record_number,buggy_code,fixed_code,code_similarity
116001,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  Set<StartupOrder> setStartUpOrder=null;
  if (startupOrders != null) {
    setStartUpOrder=ParserUtils.convertStartupOrder(startupOrders,groupCtxt);
    dependencyOrder.setStartupOrders(setStartUpOrder);
  }
  String[] scaleDependents=getScaleDependentForGroup(groupCtxt.getName(),serviceGroup);
  if (scaleDependents != null) {
    dependencyOrder.setScalingDependents(ParserUtils.convertScalingDependentList(scaleDependents,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()),setStartUpOrder);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        for (        ServiceGroup nestedServiceGroup : serviceGroup.getGroups()) {
          if (nestedServiceGroup.getName().equals(subGroupCtxt.getName())) {
            Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,nestedServiceGroup);
            nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
          }
        }
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  Set<StartupOrder> setStartUpOrder=null;
  if (startupOrders != null) {
    setStartUpOrder=ParserUtils.convertStartupOrder(startupOrders,groupCtxt);
    dependencyOrder.setStartupOrders(setStartUpOrder);
  }
  String[] scaleDependents=getScaleDependentForGroup(groupCtxt.getName(),serviceGroup);
  if (scaleDependents != null) {
    dependencyOrder.setScalingDependents(ParserUtils.convertScalingDependentList(scaleDependents,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,Map<String,ClusterDataHolder>> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()),setStartUpOrder);
    group.setClusterData(clusterDataMap.get(""String_Node_Str""));
    group.setClusterDataForType(clusterDataMap.get(""String_Node_Str""));
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        for (        ServiceGroup nestedServiceGroup : serviceGroup.getGroups()) {
          if (nestedServiceGroup.getName().equals(subGroupCtxt.getName())) {
            Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,nestedServiceGroup);
            nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
          }
        }
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.9798303487276154
116002,"/** 
 * Builds the Application structure
 * @param applicationContext ApplicationContext object with Application information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext applicationContext,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(applicationContext.getApplicationId());
  application.setTenantId(applicationContext.getTenantId());
  application.setTenantDomain(applicationContext.getTenantDomain());
  application.setTenantAdminUserName(applicationContext.getTeantAdminUsername());
  Map<String,ClusterDataHolder> clusterDataMap;
  if (applicationContext.getComponents() != null) {
    if (applicationContext.getComponents().getCartridgeContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(applicationContext.getApplicationId(),applicationContext.getTenantId(),application.getKey(),null,Arrays.asList(applicationContext.getComponents().getCartridgeContexts()),null);
      application.setClusterData(clusterDataMap);
    }
    if (applicationContext.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(applicationContext.getApplicationId(),applicationContext.getTenantId(),application.getKey(),Arrays.asList(applicationContext.getComponents().getGroupContexts()),subscribableInfoCtxts));
    }
    if (applicationContext.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=applicationContext.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convertStartupOrder(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias());
        }
      }
      String[] scalingDependents=applicationContext.getComponents().getDependencyContext().getScalingDependents();
      if (scalingDependents != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias() + ""String_Node_Str""+ scalingDependents.length);
        }
        appDependencyOrder.setScalingDependents(ParserUtils.convertScalingDependentList(scalingDependents));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias());
        }
      }
      String terminationBehavior=applicationContext.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + applicationContext.getApplicationId());
  }
  return application;
}","/** 
 * Builds the Application structure
 * @param applicationContext ApplicationContext object with Application information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext applicationContext,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(applicationContext.getApplicationId());
  application.setTenantId(applicationContext.getTenantId());
  application.setTenantDomain(applicationContext.getTenantDomain());
  application.setTenantAdminUserName(applicationContext.getTeantAdminUsername());
  Map<String,Map<String,ClusterDataHolder>> clusterDataMap;
  if (applicationContext.getComponents() != null) {
    if (applicationContext.getComponents().getCartridgeContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(applicationContext.getApplicationId(),applicationContext.getTenantId(),application.getKey(),null,Arrays.asList(applicationContext.getComponents().getCartridgeContexts()),null);
      application.setClusterData(clusterDataMap.get(""String_Node_Str""));
      application.setClusterDataForType(clusterDataMap.get(""String_Node_Str""));
    }
    if (applicationContext.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(applicationContext.getApplicationId(),applicationContext.getTenantId(),application.getKey(),Arrays.asList(applicationContext.getComponents().getGroupContexts()),subscribableInfoCtxts));
    }
    if (applicationContext.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=applicationContext.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convertStartupOrder(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias());
        }
      }
      String[] scalingDependents=applicationContext.getComponents().getDependencyContext().getScalingDependents();
      if (scalingDependents != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias() + ""String_Node_Str""+ scalingDependents.length);
        }
        appDependencyOrder.setScalingDependents(ParserUtils.convertScalingDependentList(scalingDependents));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias());
        }
      }
      String terminationBehavior=applicationContext.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + applicationContext.getApplicationId());
  }
  return application;
}",0.9831205049170704
116003,"/** 
 * Parse Subscription Information
 * @param appId Application id
 * @param tenantId Tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupName Group name (if relevant)
 * @param cartridgeContextList cartridgeContextList
 * @return Map [subscription alias -> ClusterDataHolder]
 * @throws ApplicationDefinitionException
 */
private Map<String,ClusterDataHolder> parseLeafLevelSubscriptions(String appId,int tenantId,String key,String groupName,List<CartridgeContext> cartridgeContextList,Set<StartupOrder> dependencyOrder) throws ApplicationDefinitionException {
}","/** 
 * Parse Subscription Information
 * @param appId Application id
 * @param tenantId Tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupName Group name (if relevant)
 * @param cartridgeContextList cartridgeContextList
 * @return Map [subscription alias -> ClusterDataHolder]
 * @throws ApplicationDefinitionException
 */
private Map<String,Map<String,ClusterDataHolder>> parseLeafLevelSubscriptions(String appId,int tenantId,String key,String groupName,List<CartridgeContext> cartridgeContextList,Set<StartupOrder> dependencyOrder) throws ApplicationDefinitionException {
}",0.9905362776025236
116004,"public Instance getInstanceByNetworkPartitionId(String networkPartitionId){
  if (getInstanceIdToInstanceContextMap().isEmpty()) {
    return null;
  }
  for (  Instance instance : instanceIdToInstanceContextMap.values()) {
    if (instance.getNetworkPartitionId().equals(networkPartitionId)) {
      return instance;
    }
  }
  return null;
}","public Instance getInstanceByNetworkPartitionId(String networkPartitionId){
  if (getInstanceIdToInstanceContextMap().isEmpty()) {
    return null;
  }
  for (  Instance instance : getInstanceIdToInstanceContextMap().values()) {
    if (instance.getNetworkPartitionId().equals(networkPartitionId)) {
      return instance;
    }
  }
  return null;
}",0.98989898989899
116005,"public Application(String id){
  super();
  this.id=id;
  this.key=RandomStringUtils.randomAlphanumeric(16);
  this.instanceIdToInstanceContextMap=new HashMap<String,ApplicationInstance>();
}","public Application(String id){
  super();
  this.id=id;
  this.key=RandomStringUtils.randomAlphanumeric(16);
  this.setInstanceIdToInstanceContextMap(new HashMap<String,ApplicationInstance>());
}",0.9792746113989638
116006,"public Group(String applicationId,String name,String alias){
  super();
  this.applicationId=applicationId;
  this.name=name;
  this.alias=alias;
  this.instanceIdToInstanceContextMap=new HashMap<String,GroupInstance>();
}","public Group(String applicationId,String name,String alias){
  super();
  this.applicationId=applicationId;
  this.name=name;
  this.alias=alias;
  this.setInstanceIdToInstanceContextMap(new HashMap<String,GroupInstance>());
}",0.9821428571428572
116007,"public ParentComponent(){
  this.isGroupScalingEnabled=false;
  this.isGroupInstanceMonitoringEnabled=false;
  aliasToGroupMap=new HashMap<String,Group>();
  aliasToClusterDataMap=new HashMap<String,ClusterDataHolder>();
  instanceIdSequence=new AtomicInteger();
}","public ParentComponent(){
  this.isGroupScalingEnabled=false;
  this.isGroupInstanceMonitoringEnabled=false;
  aliasToGroupMap=new HashMap<String,Group>();
  aliasToClusterDataMap=new HashMap<String,ClusterDataHolder>();
  typeToClusterDataMap=new HashMap<String,ClusterDataHolder>();
  instanceIdSequence=new AtomicInteger();
}",0.8918918918918919
116008,"/** 
 * Retrieves InstanceContext obj. for the given instance id
 * @param parentInstanceId parent instance id
 * @return InstanceContext obj. if exists, else null
 */
public List<Instance> getInstanceContextsWithParentId(String parentInstanceId){
  List<Instance> contexts=new ArrayList<Instance>();
  if (getInstanceIdToInstanceContextMap().isEmpty()) {
    return contexts;
  }
  if (parentInstanceId != null) {
    for (    Instance context : instanceIdToInstanceContextMap.values()) {
      if (parentInstanceId.equals(context.getParentId())) {
        contexts.add(context);
      }
    }
  }
  return contexts;
}","/** 
 * Retrieves InstanceContext obj. for the given instance id
 * @param parentInstanceId parent instance id
 * @return InstanceContext obj. if exists, else null
 */
public List<Instance> getInstanceContextsWithParentId(String parentInstanceId){
  List<Instance> contexts=new ArrayList<Instance>();
  if (getInstanceIdToInstanceContextMap().isEmpty()) {
    return contexts;
  }
  if (parentInstanceId != null) {
    for (    Instance context : getInstanceIdToInstanceContextMap().values()) {
      if (parentInstanceId.equals(context.getParentId())) {
        contexts.add(context);
      }
    }
  }
  return contexts;
}",0.994368463395012
116009,"/** 
 * Adds InstanceContext of a child to the instanceIdToInstanceContextMap.
 * @param instanceId instance id of child
 * @param instance   InstanceContext object
 */
public void addInstance(String instanceId,T instance){
  instanceIdToInstanceContextMap.put(instanceId,instance);
}","/** 
 * Adds InstanceContext of a child to the instanceIdToInstanceContextMap.
 * @param instanceId instance id of child
 * @param instance   InstanceContext object
 */
public void addInstance(String instanceId,T instance){
  getInstanceIdToInstanceContextMap().put(instanceId,instance);
}",0.987783595113438
116010,"/** 
 * This will remove the instance from instanceIdToInstanceContextMap
 * @param instanceId instance id of child
 */
public void removeInstance(String instanceId){
  instanceIdToInstanceContextMap.remove(instanceId);
}","/** 
 * This will remove the instance from instanceIdToInstanceContextMap
 * @param instanceId instance id of child
 */
public void removeInstance(String instanceId){
  getInstanceIdToInstanceContextMap().remove(instanceId);
}",0.9843400447427292
116011,"public DomainMapping[] getDomainMappings(String applicationId,int tenantId) throws DomainMappingException {
  try {
    ApplicationSignUp applicationSignUp=applicationSignUpHandler.getApplicationSignUp(applicationId,tenantId);
    return applicationSignUp.getDomainMappings();
  }
 catch (  Exception e) {
    String message=String.format(""String_Node_Str"",applicationId,tenantId);
    log.error(message,e);
    throw new DomainMappingException(message,e);
  }
}","public DomainMapping[] getDomainMappings(String applicationId,int tenantId) throws DomainMappingException {
  try {
    ApplicationSignUp applicationSignUp=applicationSignUpHandler.getApplicationSignUp(applicationId,tenantId);
    if (applicationSignUp != null) {
      return applicationSignUp.getDomainMappings();
    }
    return null;
  }
 catch (  Exception e) {
    String message=String.format(""String_Node_Str"",applicationId,tenantId);
    log.error(message,e);
    throw new DomainMappingException(message,e);
  }
}",0.9310344827586208
116012,"/** 
 * Builds the Application structure
 * @param applicationContext ApplicationContext object with Application information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext applicationContext,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
}","/** 
 * Builds the Application structure
 * @param applicationContext ApplicationContext object with Application information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext applicationContext,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(applicationContext.getApplicationId());
  application.setTenantId(applicationContext.getTenantId());
  application.setTenantDomain(applicationContext.getTenantDomain());
  application.setTenantAdminUserName(applicationContext.getTenantAdminUsername());
  Map<String,Map<String,ClusterDataHolder>> clusterDataMap;
  if (applicationContext.getComponents() != null) {
    if (applicationContext.getComponents().getCartridgeContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(applicationContext.getApplicationId(),applicationContext.getTenantId(),application.getKey(),null,Arrays.asList(applicationContext.getComponents().getCartridgeContexts()),null);
      application.setClusterData(clusterDataMap.get(""String_Node_Str""));
      application.setClusterDataForType(clusterDataMap.get(""String_Node_Str""));
    }
    if (applicationContext.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(applicationContext.getApplicationId(),applicationContext.getTenantId(),application.getKey(),Arrays.asList(applicationContext.getComponents().getGroupContexts()),subscribableInfoCtxts));
    }
    if (applicationContext.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=applicationContext.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convertStartupOrder(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias());
        }
      }
      String[] scalingDependents=applicationContext.getComponents().getDependencyContext().getScalingDependents();
      if (scalingDependents != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias() + ""String_Node_Str""+ scalingDependents.length);
        }
        appDependencyOrder.setScalingDependents(ParserUtils.convertScalingDependentList(scalingDependents));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + applicationContext.getAlias());
        }
      }
      String terminationBehavior=applicationContext.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + applicationContext.getApplicationId());
  }
  return application;
}",0.2922621981271562
116013,"/** 
 * Verify the existence of the application and add it.
 * @param appDefinition
 * @param ctxt
 * @param userName
 * @param tenantDomain
 * @throws RestAPIException
 */
public static void addApplication(ApplicationBean appDefinition,ConfigurationContext ctxt,String userName,String tenantDomain) throws RestAPIException {
  try {
    if (AutoscalerServiceClient.getInstance().getApplication(appDefinition.getApplicationId()) != null) {
      String msg=""String_Node_Str"" + appDefinition.getApplicationId();
      throw new RestAPIException(msg);
    }
  }
 catch (  RemoteException e) {
    throw new RestAPIException(""String_Node_Str"",e);
  }
  ApplicationContext applicationContext=ObjectConverter.convertApplicationDefinitionToStubApplicationContext(appDefinition);
  applicationContext.setTenantId(ApplicationManagementUtil.getTenantId(ctxt));
  applicationContext.setTenantDomain(tenantDomain);
  applicationContext.setTeantAdminUsername(userName);
  if (appDefinition.getProperty() != null) {
    org.apache.stratos.autoscaler.stub.Properties properties=new org.apache.stratos.autoscaler.stub.Properties();
    for (    PropertyBean propertyBean : appDefinition.getProperty()) {
      org.apache.stratos.autoscaler.stub.Property property=new org.apache.stratos.autoscaler.stub.Property();
      property.setName(propertyBean.getName());
      property.setValue(propertyBean.getValue());
      properties.addProperties(property);
    }
    applicationContext.setProperties(properties);
  }
  try {
    AutoscalerServiceClient.getInstance().addApplication(applicationContext);
  }
 catch (  AutoScalerServiceApplicationDefinitionExceptionException e) {
    throw new RestAPIException(e);
  }
catch (  RemoteException e) {
    throw new RestAPIException(e);
  }
}","/** 
 * Verify the existence of the application and add it.
 * @param appDefinition
 * @param ctxt
 * @param userName
 * @param tenantDomain
 * @throws RestAPIException
 */
public static void addApplication(ApplicationBean appDefinition,ConfigurationContext ctxt,String userName,String tenantDomain) throws RestAPIException {
  try {
    if (AutoscalerServiceClient.getInstance().getApplication(appDefinition.getApplicationId()) != null) {
      String msg=""String_Node_Str"" + appDefinition.getApplicationId();
      throw new RestAPIException(msg);
    }
  }
 catch (  RemoteException e) {
    throw new RestAPIException(""String_Node_Str"",e);
  }
  ApplicationContext applicationContext=ObjectConverter.convertApplicationDefinitionToStubApplicationContext(appDefinition);
  applicationContext.setTenantId(ApplicationManagementUtil.getTenantId(ctxt));
  applicationContext.setTenantDomain(tenantDomain);
  applicationContext.setTenantAdminUsername(userName);
  if (appDefinition.getProperty() != null) {
    org.apache.stratos.autoscaler.stub.Properties properties=new org.apache.stratos.autoscaler.stub.Properties();
    for (    PropertyBean propertyBean : appDefinition.getProperty()) {
      org.apache.stratos.autoscaler.stub.Property property=new org.apache.stratos.autoscaler.stub.Property();
      property.setName(propertyBean.getName());
      property.setValue(propertyBean.getValue());
      properties.addProperties(property);
    }
    applicationContext.setProperties(properties);
  }
  try {
    AutoscalerServiceClient.getInstance().addApplication(applicationContext);
  }
 catch (  AutoScalerServiceApplicationDefinitionExceptionException e) {
    throw new RestAPIException(e);
  }
catch (  RemoteException e) {
    throw new RestAPIException(e);
  }
}",0.9997175939000282
116014,"public static PayloadData createPayload(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String clusterId,String hostName,String repoUrl,String alias,Map<String,String> customPayloadEntries,String[] dependencyAliases,org.apache.stratos.common.Properties properties,String oauthToken) throws ApplicationDefinitionException {
  BasicPayloadData basicPayloadData=createBasicPayload(appId,groupName,cartridgeInfo,subscriptionKey,clusterId,hostName,repoUrl,alias,tenantId,dependencyAliases);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  boolean isDeploymentParam=false;
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    org.apache.stratos.common.Properties cartridgeProps=AutoscalerUtil.toCommonProperties(cartridgeInfo.getProperties());
    if (cartridgeProps != null) {
      for (      Property propertyEntry : cartridgeProps.getProperties()) {
        if (propertyEntry.getName().startsWith(""String_Node_Str"")) {
          String payloadParamName=propertyEntry.getName();
          String payloadParamSubstring=payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1);
          if (""String_Node_Str"".equals(payloadParamSubstring)) {
            isDeploymentParam=true;
          }
          payloadData.add(payloadParamSubstring,propertyEntry.getValue());
        }
      }
    }
  }
  if (properties != null && properties.getProperties() != null && properties.getProperties().length != 0) {
    for (    Property property : properties.getProperties()) {
      if (property.getName().startsWith(""String_Node_Str"")) {
        String payloadParamName=property.getName();
        String payloadParamSubstring=payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1);
        payloadData.add(payloadParamSubstring,property.getValue());
      }
    }
  }
  if (!isDeploymentParam) {
    payloadData.add(""String_Node_Str"",""String_Node_Str"");
  }
  if (!StringUtils.isEmpty(oauthToken)) {
    payloadData.add(TOKEN_PAYLOD_PARAM_NAME,oauthToken);
  }
  if (customPayloadEntries != null) {
    Set<Map.Entry<String,String>> entrySet=customPayloadEntries.entrySet();
    for (    Map.Entry<String,String> entry : entrySet) {
      payloadData.add(entry.getKey(),entry.getValue());
    }
  }
  return payloadData;
}","public static PayloadData createPayload(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String clusterId,String hostName,String repoUrl,String alias,Map<String,String> customPayloadEntries,String[] dependencyAliases,org.apache.stratos.common.Properties properties,String oauthToken) throws ApplicationDefinitionException {
  BasicPayloadData basicPayloadData=createBasicPayload(appId,groupName,cartridgeInfo,subscriptionKey,clusterId,hostName,repoUrl,alias,tenantId,dependencyAliases);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    org.apache.stratos.common.Properties cartridgeProps=AutoscalerUtil.toCommonProperties(cartridgeInfo.getProperties());
    if (cartridgeProps != null) {
      for (      Property propertyEntry : cartridgeProps.getProperties()) {
        if (propertyEntry.getName().startsWith(""String_Node_Str"")) {
          String payloadParamName=propertyEntry.getName();
          String payloadParamSubstring=payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1);
          if (""String_Node_Str"".equals(payloadParamSubstring)) {
            payloadData.getBasicPayloadData().setDeployment(payloadParamSubstring);
            continue;
          }
          payloadData.add(payloadParamSubstring,propertyEntry.getValue());
        }
      }
    }
  }
  if (properties != null && properties.getProperties() != null && properties.getProperties().length != 0) {
    for (    Property property : properties.getProperties()) {
      if (property.getName().startsWith(""String_Node_Str"")) {
        String payloadParamName=property.getName();
        String payloadParamSubstring=payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1);
        payloadData.add(payloadParamSubstring,property.getValue());
      }
    }
  }
  if (!StringUtils.isEmpty(oauthToken)) {
    payloadData.add(TOKEN_PAYLOD_PARAM_NAME,oauthToken);
  }
  if (customPayloadEntries != null) {
    Set<Map.Entry<String,String>> entrySet=customPayloadEntries.entrySet();
    for (    Map.Entry<String,String> entry : entrySet) {
      payloadData.add(entry.getKey(),entry.getValue());
    }
  }
  return payloadData;
}",0.952165879696161
116015,"public void populatePayload(){
  payloadBuilder=new StringBuilder();
  payloadBuilder.append(""String_Node_Str"" + getAppId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getGroupName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getServiceName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getHostName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getMultitenant());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getTenantId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getTenantRange());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getSubscriptionAlias());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getClusterId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getSubscriptionKey());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getDeployment());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getApplicationPath());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getGitRepositoryUrl());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getPortMappings());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getProvider());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  if (getDependencyAliasesPayloadString() != null) {
    payloadBuilder.append(""String_Node_Str"" + getDependencyAliasesPayloadString());
  }
  payloadBuilder.append(""String_Node_Str"");
  if (getExportingPropertiesPayloadString() != null) {
    payloadBuilder.append(""String_Node_Str"" + getExportingPropertiesPayloadString());
  }
}","public void populatePayload(){
  payloadBuilder=new StringBuilder();
  payloadBuilder.append(""String_Node_Str"" + getAppId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getGroupName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getServiceName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getHostName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getMultitenant());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getTenantId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getTenantRange());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getSubscriptionAlias());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getClusterId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getSubscriptionKey());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + AutoScalerConstants.PAYLOAD_DEPLOYMENT);
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getApplicationPath());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getGitRepositoryUrl());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getPortMappings());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getProvider());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
  payloadBuilder.append(""String_Node_Str"");
  if (getDependencyAliasesPayloadString() != null) {
    payloadBuilder.append(""String_Node_Str"" + getDependencyAliasesPayloadString());
  }
  payloadBuilder.append(""String_Node_Str"");
  if (getExportingPropertiesPayloadString() != null) {
    payloadBuilder.append(""String_Node_Str"" + getExportingPropertiesPayloadString());
  }
}",0.9899149693494168
116016,"@Override public int getActiveInstanceCount(){
  return getNonTerminatedMemberCount();
}","@Override public int getActiveInstanceCount(){
  return this.activeMembers.size();
}",0.7906976744186046
116017,"private static void updateApplicationMonitor(String appId,ApplicationStatus status,String networkPartitionId,String instanceId){
  ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
  if (applicationMonitor != null) {
    if (status == ApplicationStatus.Active) {
      applicationMonitor.getNetworkPartitionContext(networkPartitionId).movePendingInstanceToActiveInstances(instanceId);
    }
 else     if (status == ApplicationStatus.Terminating) {
      applicationMonitor.setTerminating(true);
      NetworkPartitionContext context=applicationMonitor.getNetworkPartitionContext(networkPartitionId);
      if (context.getActiveInstance(instanceId) != null) {
        context.moveActiveInstanceToTerminationPendingInstances(instanceId);
      }
 else       if (context.getPendingInstance(instanceId) != null) {
        context.movePendingInstanceToTerminationPendingInstances(instanceId);
      }
    }
    applicationMonitor.setStatus(status,instanceId);
  }
 else {
    log.warn(""String_Node_Str"" + appId);
  }
}","private static void updateApplicationMonitor(String appId,ApplicationStatus status,String networkPartitionId,String instanceId){
  ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
  NetworkPartitionContext context=applicationMonitor.getNetworkPartitionContext(networkPartitionId);
  if (applicationMonitor != null) {
    if (status == ApplicationStatus.Active) {
      context.movePendingInstanceToActiveInstances(instanceId);
    }
 else     if (status == ApplicationStatus.Terminating) {
      applicationMonitor.setTerminating(true);
      if (context.getActiveInstance(instanceId) != null) {
        context.moveActiveInstanceToTerminationPendingInstances(instanceId);
      }
 else       if (context.getPendingInstance(instanceId) != null) {
        context.movePendingInstanceToTerminationPendingInstances(instanceId);
      }
    }
 else     if (status == ApplicationStatus.Terminated) {
      context.removeTerminationPendingInstance(instanceId);
    }
    applicationMonitor.setStatus(status,instanceId);
  }
 else {
    log.warn(""String_Node_Str"" + appId);
  }
}",0.8211981566820277
116018,"public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (applicationInstance.isStateTransitionValid(status)) {
      applicationInstance.setStatus(status);
      updateApplicationMonitor(appId,status,applicationInstance.getNetworkPartitionId(),instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      applicationMonitor.getNetworkPartitionContext(applicationInstance.getNetworkPartitionId()).removeInstanceContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
        PrivilegedCarbonContext.startTenantFlow();
        try {
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(MultitenantConstants.SUPER_TENANT_ID);
          String policyId=PolicyManager.getInstance().getDeploymentPolicyIdByApplication(appId);
          if (policyId != null) {
            try {
              PolicyManager.getInstance().undeployDeploymentPolicy(policyId);
              log.info(""String_Node_Str"" + appId + ""String_Node_Str"");
            }
 catch (            InvalidPolicyException e) {
              log.error(""String_Node_Str"" + appId);
            }
          }
        }
  finally {
          PrivilegedCarbonContext.endTenantFlow();
        }
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,instanceId);
      handleApplicationRemoval(appId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}","public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (applicationInstance.isStateTransitionValid(status)) {
      applicationInstance.setStatus(status);
      updateApplicationMonitor(appId,status,applicationInstance.getNetworkPartitionId(),instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      NetworkPartitionContext networkPartitionContext=applicationMonitor.getNetworkPartitionContext(applicationInstance.getNetworkPartitionId());
      networkPartitionContext.removeInstanceContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,instanceId);
      if (application.getInstanceContextCount() == 0 && applicationMonitor.isTerminating()) {
        if (applicationMonitor.hasMonitors() && applicationMonitor.isTerminating()) {
          for (          Monitor monitor1 : applicationMonitor.getAliasToActiveMonitorsMap().values()) {
            monitor1.destroy();
          }
        }
        applicationMonitor.destroy();
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
        PrivilegedCarbonContext.startTenantFlow();
        try {
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(MultitenantConstants.SUPER_TENANT_ID);
          String policyId=PolicyManager.getInstance().getDeploymentPolicyIdByApplication(appId);
          if (policyId != null) {
            try {
              PolicyManager.getInstance().undeployDeploymentPolicy(policyId);
              log.info(""String_Node_Str"" + appId + ""String_Node_Str"");
            }
 catch (            InvalidPolicyException e) {
              log.error(""String_Node_Str"" + appId);
            }
          }
        }
  finally {
          PrivilegedCarbonContext.endTenantFlow();
        }
        handleApplicationRemoval(appId);
      }
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}",0.8534812547819434
116019,"private static void updateGroupMonitor(String appId,String groupId,GroupStatus status,String networkPartitionId,String instanceId,String parentInstanceId){
  GroupMonitor monitor=getGroupMonitor(appId,groupId);
  if (monitor != null) {
    if (status == GroupStatus.Active) {
      monitor.getNetworkPartitionContext(networkPartitionId).movePendingInstanceToActiveInstances(instanceId);
    }
 else     if (status == GroupStatus.Terminating) {
      NetworkPartitionContext context=monitor.getNetworkPartitionContext(networkPartitionId);
      if (context.getActiveInstance(instanceId) != null) {
        context.moveActiveInstanceToTerminationPendingInstances(instanceId);
      }
 else       if (context.getPendingInstance(instanceId) != null) {
        context.movePendingInstanceToTerminationPendingInstances(instanceId);
      }
    }
    monitor.setStatus(status,instanceId,parentInstanceId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
}","private static void updateGroupMonitor(String appId,String groupId,GroupStatus status,String networkPartitionId,String instanceId,String parentInstanceId){
  GroupMonitor monitor=getGroupMonitor(appId,groupId);
  if (monitor != null) {
    NetworkPartitionContext context=monitor.getNetworkPartitionContext(networkPartitionId);
    if (status == GroupStatus.Active) {
      context.movePendingInstanceToActiveInstances(instanceId);
    }
 else     if (status == GroupStatus.Terminating) {
      if (context.getActiveInstance(instanceId) != null) {
        context.moveActiveInstanceToTerminationPendingInstances(instanceId);
      }
 else       if (context.getPendingInstance(instanceId) != null) {
        context.movePendingInstanceToTerminationPendingInstances(instanceId);
      }
    }
 else     if (status == GroupStatus.Terminated) {
      context.removeTerminationPendingInstance(instanceId);
    }
    monitor.setStatus(status,instanceId,parentInstanceId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
}",0.8278567925453654
116020,"public InstanceContext(String id){
  this.id=id;
  setIdToScalingEvent(new HashMap<String,ScalingEvent>());
  setIdToScalingOverMaxEvent(new HashMap<String,ScalingUpBeyondMaxEvent>());
  setIdToScalingDownBeyondMinEvent(new HashMap<String,ScalingDownBeyondMinEvent>());
}","public InstanceContext(String id){
  this.id=id;
  setIdToScalingEvent(new ConcurrentHashMap<String,ScalingEvent>());
  setIdToScalingOverMaxEvent(new ConcurrentHashMap<String,ScalingUpBeyondMaxEvent>());
  setIdToScalingDownBeyondMinEvent(new ConcurrentHashMap<String,ScalingDownBeyondMinEvent>());
}",0.9475524475524476
116021,"private void handleScalingMaxOut(NetworkPartitionContext networkPartitionContext){
  if (networkPartitionContext.getPendingInstancesCount() == 0) {
    try {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      }
      handleApplicationBursting();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    PolicyValidationException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    MonitorNotFoundException e) {
      log.error(""String_Node_Str"",e);
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","private void handleScalingMaxOut(InstanceContext instanceContext,NetworkPartitionContext networkPartitionContext){
  if (networkPartitionContext.getPendingInstancesCount() == 0) {
    try {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      }
      handleApplicationBursting();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    PolicyValidationException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    MonitorNotFoundException e) {
      log.error(""String_Node_Str"",e);
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  instanceContext.setIdToScalingOverMaxEvent(new ConcurrentHashMap<String,ScalingUpBeyondMaxEvent>());
}",0.9108910891089108
116022,"@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str"");
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
          handleScalingMaxOut(networkPartitionContext);
        }
 else         if (!instanceContext.getIdToScalingEvent().isEmpty()) {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
 else         if (!instanceContext.getIdToScalingDownBeyondMinEvent().isEmpty()) {
          handleScalingDownBeyondMin(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}","@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str"");
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
          handleScalingMaxOut(instanceContext,networkPartitionContext);
        }
 else         if (!instanceContext.getIdToScalingEvent().isEmpty()) {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
 else         if (!instanceContext.getIdToScalingDownBeyondMinEvent().isEmpty()) {
          handleScalingDownBeyondMin(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}",0.992063492063492
116023,"public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + appId + ""String_Node_Str"");
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              handleScalingMaxOut(networkPartitionContext);
            }
 else             if (!instanceContext.getIdToScalingEvent().isEmpty()) {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
 else             if (!instanceContext.getIdToScalingDownBeyondMinEvent().isEmpty()) {
              handleScalingDownBeyondMin(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}","public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + appId + ""String_Node_Str"");
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              handleScalingMaxOut(instanceContext,networkPartitionContext);
            }
 else             if (!instanceContext.getIdToScalingEvent().isEmpty()) {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
 else             if (!instanceContext.getIdToScalingDownBeyondMinEvent().isEmpty()) {
              handleScalingDownBeyondMin(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}",0.9939577039274924
116024,"private void handleScalingDownBeyondMin(InstanceContext instanceContext,NetworkPartitionContext nwPartitionContext){
  boolean allChildrenScaleDown=false;
  for (  Monitor monitor : this.aliasToActiveMonitorsMap.values()) {
    if (instanceContext.getScalingDownBeyondMinEvent(monitor.getId()) == null) {
      allChildrenScaleDown=false;
      break;
    }
 else {
      allChildrenScaleDown=true;
    }
  }
  if (allChildrenScaleDown) {
    ApplicationBuilder.handleApplicationInstanceTerminatingEvent(this.appId,instanceContext.getId());
  }
  instanceContext.setIdToScalingDownBeyondMinEvent(new HashMap<String,ScalingDownBeyondMinEvent>());
}","private void handleScalingDownBeyondMin(InstanceContext instanceContext,NetworkPartitionContext nwPartitionContext){
  boolean allChildrenScaleDown=false;
  for (  Monitor monitor : this.aliasToActiveMonitorsMap.values()) {
    if (instanceContext.getScalingDownBeyondMinEvent(monitor.getId()) == null) {
      allChildrenScaleDown=false;
      break;
    }
 else {
      allChildrenScaleDown=true;
    }
  }
  if (allChildrenScaleDown) {
    ApplicationBuilder.handleApplicationInstanceTerminatingEvent(this.appId,instanceContext.getId());
  }
  instanceContext.setIdToScalingDownBeyondMinEvent(new ConcurrentHashMap<String,ScalingDownBeyondMinEvent>());
}",0.9923312883435584
116025,"private void handleScalingMaxOut(NetworkPartitionContext networkPartitionContext,InstanceContext instanceContext){
  if (!hasScalingDependents) {
    createGroupInstanceOnScaling(networkPartitionContext,instanceContext.getParentInstanceId());
  }
 else {
    notifyParentOnMaxOut(networkPartitionContext,instanceContext);
  }
  instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingUpBeyondMaxEvent>());
}","private void handleScalingMaxOut(InstanceContext instanceContext,NetworkPartitionContext networkPartitionContext){
  if (!hasScalingDependents) {
    createGroupInstanceOnScaling(networkPartitionContext,instanceContext.getParentInstanceId());
  }
 else {
    notifyParentOnMaxOut(networkPartitionContext,instanceContext);
  }
  instanceContext.setIdToScalingOverMaxEvent(new ConcurrentHashMap<String,ScalingUpBeyondMaxEvent>());
}",0.9129411764705884
116026,"public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + id + ""String_Node_Str"");
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              handleScalingMaxOut(networkPartitionContext,instanceContext);
            }
 else             if (!instanceContext.getIdToScalingEvent().isEmpty()) {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
 else             if (!instanceContext.getIdToScalingDownBeyondMinEvent().isEmpty()) {
              handleScalingDownBeyondMin(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}","public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + id + ""String_Node_Str"");
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              handleScalingMaxOut(instanceContext,networkPartitionContext);
            }
 else             if (!instanceContext.getIdToScalingEvent().isEmpty()) {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
 else             if (!instanceContext.getIdToScalingDownBeyondMinEvent().isEmpty()) {
              handleScalingDownBeyondMin(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}",0.987851176917236
116027,"private void handleScalingDownBeyondMin(InstanceContext instanceContext,NetworkPartitionContext nwPartitionContext){
  boolean allChildrenScaleDown=false;
  for (  Monitor monitor : this.aliasToActiveMonitorsMap.values()) {
    if (instanceContext.getScalingDownBeyondMinEvent(monitor.getId()) == null) {
      allChildrenScaleDown=false;
      break;
    }
 else {
      allChildrenScaleDown=true;
    }
  }
  if (allChildrenScaleDown) {
    if (hasScalingDependents) {
      if (nwPartitionContext.getNonTerminatedInstancesCount() > ((GroupLevelNetworkPartitionContext)nwPartitionContext).getMinInstanceCount()) {
        float minInstances=((GroupLevelNetworkPartitionContext)nwPartitionContext).getMinInstanceCount();
        float factor=(nwPartitionContext.getNonTerminatedInstancesCount() - 1) / minInstances;
        ScalingEvent scalingEvent=new ScalingEvent(this.id,nwPartitionContext.getId(),instanceContext.getId(),factor);
        this.parent.onChildScalingEvent(scalingEvent);
      }
 else {
        ScalingDownBeyondMinEvent newScalingDownBeyondMinEvent=new ScalingDownBeyondMinEvent(this.id,nwPartitionContext.getId(),instanceContext.getParentInstanceId());
        this.parent.onChildScalingDownBeyondMinEvent(newScalingDownBeyondMinEvent);
      }
    }
 else {
      if (groupScalingEnabled) {
        if (nwPartitionContext.getNonTerminatedInstancesCount() > ((GroupLevelNetworkPartitionContext)nwPartitionContext).getMinInstanceCount()) {
          ApplicationBuilder.handleGroupTerminatingEvent(this.appId,this.id,instanceContext.getId());
        }
      }
 else {
        ScalingDownBeyondMinEvent newScalingDownBeyondMinEvent=new ScalingDownBeyondMinEvent(this.id,nwPartitionContext.getId(),instanceContext.getParentInstanceId());
        this.parent.onChildScalingDownBeyondMinEvent(newScalingDownBeyondMinEvent);
      }
    }
  }
  instanceContext.setIdToScalingDownBeyondMinEvent(new HashMap<String,ScalingDownBeyondMinEvent>());
}","private void handleScalingDownBeyondMin(InstanceContext instanceContext,NetworkPartitionContext nwPartitionContext){
  boolean allChildrenScaleDown=false;
  for (  Monitor monitor : this.aliasToActiveMonitorsMap.values()) {
    if (instanceContext.getScalingDownBeyondMinEvent(monitor.getId()) == null) {
      allChildrenScaleDown=false;
      break;
    }
 else {
      allChildrenScaleDown=true;
    }
  }
  if (allChildrenScaleDown) {
    if (hasScalingDependents) {
      if (nwPartitionContext.getNonTerminatedInstancesCount() > ((GroupLevelNetworkPartitionContext)nwPartitionContext).getMinInstanceCount()) {
        float minInstances=((GroupLevelNetworkPartitionContext)nwPartitionContext).getMinInstanceCount();
        float factor=(nwPartitionContext.getNonTerminatedInstancesCount() - 1) / minInstances;
        ScalingEvent scalingEvent=new ScalingEvent(this.id,nwPartitionContext.getId(),instanceContext.getId(),factor);
        this.parent.onChildScalingEvent(scalingEvent);
      }
 else {
        ScalingDownBeyondMinEvent newScalingDownBeyondMinEvent=new ScalingDownBeyondMinEvent(this.id,nwPartitionContext.getId(),instanceContext.getParentInstanceId());
        this.parent.onChildScalingDownBeyondMinEvent(newScalingDownBeyondMinEvent);
      }
    }
 else {
      if (groupScalingEnabled) {
        if (nwPartitionContext.getNonTerminatedInstancesCount() > ((GroupLevelNetworkPartitionContext)nwPartitionContext).getMinInstanceCount()) {
          ApplicationBuilder.handleGroupTerminatingEvent(this.appId,this.id,instanceContext.getId());
        }
      }
 else {
        ScalingDownBeyondMinEvent newScalingDownBeyondMinEvent=new ScalingDownBeyondMinEvent(this.id,nwPartitionContext.getId(),instanceContext.getParentInstanceId());
        this.parent.onChildScalingDownBeyondMinEvent(newScalingDownBeyondMinEvent);
      }
    }
  }
  instanceContext.setIdToScalingDownBeyondMinEvent(new ConcurrentHashMap<String,ScalingDownBeyondMinEvent>());
}",0.9974567650050864
116028,"protected void handleDependentScaling(InstanceContext instanceContext,NetworkPartitionContext networkPartitionContext){
  List<ScalingEvent> highestScalingEventOfDependencies=new ArrayList<ScalingEvent>();
  for (  ScalingDependentList scalingDependentList : scalingDependencies) {
    ScalingEvent highestFactorEvent=null;
    for (    String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
      ScalingEvent scalingEvent=instanceContext.getScalingEvent(scalingDependentListComponent);
      if (scalingEvent != null) {
        if (highestFactorEvent == null) {
          highestFactorEvent=scalingEvent;
        }
 else {
          if (scalingEvent.getFactor() > highestFactorEvent.getFactor()) {
            highestFactorEvent=scalingEvent;
          }
        }
      }
    }
    if (highestFactorEvent != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + highestFactorEvent.getId() + ""String_Node_Str""+ highestFactorEvent.getFactor());
      }
      highestScalingEventOfDependencies.add(highestFactorEvent);
    }
  }
  for (  ScalingEvent highestScalingEventOfChild : highestScalingEventOfDependencies) {
    if (scalingDependencies != null && !scalingDependencies.isEmpty()) {
      for (      ScalingDependentList scalingDependentList : scalingDependencies) {
        if (scalingDependentList.getScalingDependentListComponents().contains(highestScalingEventOfChild.getId())) {
          for (          String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
            Monitor monitor=aliasToActiveMonitorsMap.get(scalingDependentListComponent);
            if (monitor instanceof GroupMonitor || monitor instanceof ClusterMonitor) {
              ScalingEvent scalingEvent=new ScalingEvent(monitor.getId(),networkPartitionContext.getId(),instanceContext.getId(),highestScalingEventOfChild.getFactor());
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + scalingEvent.getId() + ""String_Node_Str""+ scalingEvent.getInstanceId()+ ""String_Node_Str""+ scalingEvent.getFactor()+ ""String_Node_Str"");
              }
              monitor.onParentScalingEvent(scalingEvent);
            }
          }
        }
        break;
      }
    }
  }
  instanceContext.setIdToScalingEvent(new HashMap<String,ScalingEvent>());
}","protected void handleDependentScaling(InstanceContext instanceContext,NetworkPartitionContext networkPartitionContext){
  List<ScalingEvent> highestScalingEventOfDependencies=new ArrayList<ScalingEvent>();
  for (  ScalingDependentList scalingDependentList : scalingDependencies) {
    ScalingEvent highestFactorEvent=null;
    for (    String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
      ScalingEvent scalingEvent=instanceContext.getScalingEvent(scalingDependentListComponent);
      if (scalingEvent != null) {
        if (highestFactorEvent == null) {
          highestFactorEvent=scalingEvent;
        }
 else {
          if (scalingEvent.getFactor() > highestFactorEvent.getFactor()) {
            highestFactorEvent=scalingEvent;
          }
        }
      }
    }
    if (highestFactorEvent != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + highestFactorEvent.getId() + ""String_Node_Str""+ highestFactorEvent.getFactor());
      }
      highestScalingEventOfDependencies.add(highestFactorEvent);
    }
  }
  for (  ScalingEvent highestScalingEventOfChild : highestScalingEventOfDependencies) {
    if (scalingDependencies != null && !scalingDependencies.isEmpty()) {
      for (      ScalingDependentList scalingDependentList : scalingDependencies) {
        if (scalingDependentList.getScalingDependentListComponents().contains(highestScalingEventOfChild.getId())) {
          for (          String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
            Monitor monitor=aliasToActiveMonitorsMap.get(scalingDependentListComponent);
            if (monitor instanceof GroupMonitor || monitor instanceof ClusterMonitor) {
              ScalingEvent scalingEvent=new ScalingEvent(monitor.getId(),networkPartitionContext.getId(),instanceContext.getId(),highestScalingEventOfChild.getFactor());
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + scalingEvent.getId() + ""String_Node_Str""+ scalingEvent.getInstanceId()+ ""String_Node_Str""+ scalingEvent.getFactor()+ ""String_Node_Str"");
              }
              monitor.onParentScalingEvent(scalingEvent);
            }
          }
        }
        break;
      }
    }
  }
  instanceContext.setIdToScalingEvent(new ConcurrentHashMap<String,ScalingEvent>());
}",0.99790004199916
116029,"private boolean createInstance(String parentInstanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  Instance parentMonitorInstance=this.parent.getInstance(parentInstanceId);
  String partitionId=null;
  if (parentMonitorInstance instanceof GroupInstance) {
    partitionId=parentMonitorInstance.getPartitionId();
  }
  if (parentMonitorInstance != null) {
    ClusterInstance clusterInstance=cluster.getInstanceContexts(parentInstanceId);
    if (clusterInstance != null) {
      ClusterContext clusterContext=(ClusterContext)this.getClusterContext();
      if (clusterContext == null) {
        clusterContext=ClusterContextFactory.getVMClusterContext(clusterInstance.getInstanceId(),cluster,hasScalingDependents());
        this.setClusterContext(clusterContext);
      }
      clusterContext.addInstanceContext(parentInstanceId,cluster,hasScalingDependents(),groupScalingEnabledSubtree());
      if (this.getInstance(clusterInstance.getInstanceId()) == null) {
        this.addInstance(clusterInstance);
      }
      boolean stateChanged=ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",cluster.getClusterId(),clusterInstance.getInstanceId());
      if (!stateChanged && clusterInstance.getStatus() != ClusterStatus.Created) {
        this.notifyParentMonitor(clusterInstance.getStatus(),clusterInstance.getInstanceId());
        if (this.hasMonitoringStarted().compareAndSet(false,true)) {
          this.startScheduler();
          log.info(""String_Node_Str"" + cluster.getClusterId() + ""String_Node_Str"");
        }
      }
    }
 else {
      createClusterInstance(cluster.getServiceName(),cluster.getClusterId(),null,parentInstanceId,partitionId,parentMonitorInstance.getNetworkPartitionId());
    }
    return true;
  }
 else {
    return false;
  }
}","private boolean createInstance(String parentInstanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  Instance parentMonitorInstance=this.parent.getInstance(parentInstanceId);
  String partitionId=null;
  if (parentMonitorInstance instanceof GroupInstance) {
    partitionId=parentMonitorInstance.getPartitionId();
  }
  if (parentMonitorInstance != null) {
    ClusterInstance clusterInstance=cluster.getInstanceContexts(parentInstanceId);
    if (clusterInstance != null) {
      ClusterContext clusterContext=(ClusterContext)this.getClusterContext();
      if (clusterContext == null) {
        clusterContext=ClusterContextFactory.getVMClusterContext(clusterInstance.getInstanceId(),cluster,hasScalingDependents());
        this.setClusterContext(clusterContext);
      }
      clusterContext.addInstanceContext(parentInstanceId,cluster,hasScalingDependents(),groupScalingEnabledSubtree());
      if (this.getInstance(clusterInstance.getInstanceId()) == null) {
        this.addInstance(clusterInstance);
      }
      boolean stateChanged=ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",cluster.getClusterId(),clusterInstance.getInstanceId());
      if (!stateChanged && clusterInstance.getStatus() != ClusterStatus.Created) {
        this.notifyParentMonitor(clusterInstance.getStatus(),clusterInstance.getInstanceId());
      }
      if (this.hasMonitoringStarted().compareAndSet(false,true)) {
        this.startScheduler();
        log.info(""String_Node_Str"" + cluster.getClusterId() + ""String_Node_Str"");
      }
    }
 else {
      createClusterInstance(cluster.getServiceName(),cluster.getClusterId(),null,parentInstanceId,partitionId,parentMonitorInstance.getNetworkPartitionId());
    }
    return true;
  }
 else {
    return false;
  }
}",0.99457111834962
116030,"public static org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy convertToCCAutoscalerPojo(AutoscalePolicy autoscalePolicyBean){
  org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy autoscalePolicy=new org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy();
  autoscalePolicy.setId(autoscalePolicyBean.getId());
  autoscalePolicy.setDescription(autoscalePolicyBean.getDescription());
  autoscalePolicy.setIsPublic(autoscalePolicyBean.getIsPublic());
  autoscalePolicy.setDisplayName(autoscalePolicyBean.getDisplayName());
  autoscalePolicy.setInstanceRoundingFactor(autoscalePolicyBean.getInstanceRoundingFactor());
  if (autoscalePolicyBean.getLoadThresholds() != null) {
    org.apache.stratos.autoscaler.stub.autoscale.policy.LoadThresholds loadThresholds=new org.apache.stratos.autoscaler.stub.autoscale.policy.LoadThresholds();
    if (autoscalePolicyBean.getLoadThresholds().getLoadAverage() != null) {
      loadThresholds.setMemoryConsumptionThreshold(autoscalePolicyBean.getLoadThresholds().getLoadAverage().getThreshold());
    }
    if (autoscalePolicyBean.getLoadThresholds().getRequestsInFlight() != null) {
      loadThresholds.setRequestsInFlightThreshold(autoscalePolicyBean.getLoadThresholds().getRequestsInFlight().getThreshold());
    }
    if (autoscalePolicyBean.getLoadThresholds().getMemoryConsumption() != null) {
      loadThresholds.setMemoryConsumptionThreshold(autoscalePolicyBean.getLoadThresholds().getMemoryConsumption().getThreshold());
    }
    autoscalePolicy.setLoadThresholds(loadThresholds);
  }
  return autoscalePolicy;
}","public static org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy convertToCCAutoscalerPojo(AutoscalePolicy autoscalePolicyBean){
  org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy autoscalePolicy=new org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy();
  autoscalePolicy.setId(autoscalePolicyBean.getId());
  autoscalePolicy.setDescription(autoscalePolicyBean.getDescription());
  autoscalePolicy.setIsPublic(autoscalePolicyBean.getIsPublic());
  autoscalePolicy.setDisplayName(autoscalePolicyBean.getDisplayName());
  autoscalePolicy.setInstanceRoundingFactor(autoscalePolicyBean.getInstanceRoundingFactor());
  if (autoscalePolicyBean.getLoadThresholds() != null) {
    org.apache.stratos.autoscaler.stub.autoscale.policy.LoadThresholds loadThresholds=new org.apache.stratos.autoscaler.stub.autoscale.policy.LoadThresholds();
    if (autoscalePolicyBean.getLoadThresholds().getLoadAverage() != null) {
      loadThresholds.setLoadAverageThreshold(autoscalePolicyBean.getLoadThresholds().getLoadAverage().getThreshold());
    }
    if (autoscalePolicyBean.getLoadThresholds().getRequestsInFlight() != null) {
      loadThresholds.setRequestsInFlightThreshold(autoscalePolicyBean.getLoadThresholds().getRequestsInFlight().getThreshold());
    }
    if (autoscalePolicyBean.getLoadThresholds().getMemoryConsumption() != null) {
      loadThresholds.setMemoryConsumptionThreshold(autoscalePolicyBean.getLoadThresholds().getMemoryConsumption().getThreshold());
    }
    autoscalePolicy.setLoadThresholds(loadThresholds);
  }
  return autoscalePolicy;
}",0.9583074051026758
116031,"private void startInstanceNotifierReceiver(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  final InstanceNotifierEventReceiver instanceNotifierEventReceiver=new InstanceNotifierEventReceiver();
  instanceNotifierEventReceiver.addEventListener(new InstanceCleanupClusterEventListener(){
    @Override protected void onEvent(    Event event){
      InstanceCleanupClusterEvent instanceCleanupClusterEvent=(InstanceCleanupClusterEvent)event;
      if (mockMemberContext.getClusterId().equals(instanceCleanupClusterEvent.getClusterId()) && mockMemberContext.getInstanceId().equals(instanceCleanupClusterEvent.getInstanceId())) {
        handleMemberTermination();
      }
    }
  }
);
  instanceNotifierEventReceiver.addEventListener(new InstanceCleanupMemberEventListener(){
    @Override protected void onEvent(    Event event){
      InstanceCleanupMemberEvent instanceCleanupClusterEvent=(InstanceCleanupMemberEvent)event;
      if (mockMemberContext.getMemberId().equals(instanceCleanupClusterEvent.getMemberId())) {
        handleMemberTermination();
      }
    }
  }
);
  instanceNotifierExecutorService.submit(new Runnable(){
    @Override public void run(){
      instanceNotifierEventReceiver.execute();
    }
  }
);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}","private void startInstanceNotifierReceiver(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  final InstanceNotifierEventReceiver instanceNotifierEventReceiver=new InstanceNotifierEventReceiver();
  instanceNotifierEventReceiver.addEventListener(new InstanceCleanupClusterEventListener(){
    @Override protected void onEvent(    Event event){
      InstanceCleanupClusterEvent instanceCleanupClusterEvent=(InstanceCleanupClusterEvent)event;
      if (mockMemberContext.getClusterId().equals(instanceCleanupClusterEvent.getClusterId()) && mockMemberContext.getClusterInstanceId().equals(instanceCleanupClusterEvent.getClusterInstanceId())) {
        handleMemberTermination();
      }
    }
  }
);
  instanceNotifierEventReceiver.addEventListener(new InstanceCleanupMemberEventListener(){
    @Override protected void onEvent(    Event event){
      InstanceCleanupMemberEvent instanceCleanupClusterEvent=(InstanceCleanupMemberEvent)event;
      if (mockMemberContext.getMemberId().equals(instanceCleanupClusterEvent.getMemberId())) {
        handleMemberTermination();
      }
    }
  }
);
  instanceNotifierExecutorService.submit(new Runnable(){
    @Override public void run(){
      instanceNotifierEventReceiver.execute();
    }
  }
);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}",0.9947169811320756
116032,"public InstanceCleanupClusterEvent(String clusterId,String instanceId){
  this.clusterId=clusterId;
  this.instanceId=instanceId;
}","public InstanceCleanupClusterEvent(String clusterId,String instanceId){
  this.clusterId=clusterId;
  this.clusterInstanceId=instanceId;
}",0.966542750929368
116033,"/** 
 * Gets the group level network partition context.
 * @param parentInstanceContext the parent instance context
 * @return the group level network partition context
 */
private GroupLevelNetworkPartitionContext getGroupLevelNetworkPartitionContext(String groupId,String appId,Instance parentInstanceContext){
  GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext;
  ChildPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId).getChildPolicy(groupId);
  String networkPartitionId=parentInstanceContext.getNetworkPartitionId();
  if (this.networkPartitionCtxts.containsKey(parentInstanceContext)) {
    groupLevelNetworkPartitionContext=(GroupLevelNetworkPartitionContext)this.networkPartitionCtxts.get(networkPartitionId);
  }
 else {
    if (policy != null) {
      ChildLevelNetworkPartition networkPartition=policy.getChildLevelNetworkPartition(parentInstanceContext.getNetworkPartitionId());
      groupLevelNetworkPartitionContext=new GroupLevelNetworkPartitionContext(networkPartitionId,networkPartition.getPartitionAlgo());
    }
 else {
      groupLevelNetworkPartitionContext=new GroupLevelNetworkPartitionContext(networkPartitionId);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + networkPartitionId + ""String_Node_Str""+ ""String_Node_Str""+ this.id);
    }
    this.addNetworkPartitionContext(groupLevelNetworkPartitionContext);
  }
  return groupLevelNetworkPartitionContext;
}","/** 
 * Gets the group level network partition context.
 * @param parentInstanceContext the parent instance context
 * @return the group level network partition context
 */
private GroupLevelNetworkPartitionContext getGroupLevelNetworkPartitionContext(String groupId,String appId,Instance parentInstanceContext){
  GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext;
  ChildPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId).getChildPolicy(groupId);
  String networkPartitionId=parentInstanceContext.getNetworkPartitionId();
  if (this.networkPartitionCtxts.containsKey(networkPartitionId)) {
    groupLevelNetworkPartitionContext=(GroupLevelNetworkPartitionContext)this.networkPartitionCtxts.get(networkPartitionId);
  }
 else {
    if (policy != null) {
      ChildLevelNetworkPartition networkPartition=policy.getChildLevelNetworkPartition(parentInstanceContext.getNetworkPartitionId());
      groupLevelNetworkPartitionContext=new GroupLevelNetworkPartitionContext(networkPartitionId,networkPartition.getPartitionAlgo());
    }
 else {
      groupLevelNetworkPartitionContext=new GroupLevelNetworkPartitionContext(networkPartitionId);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + networkPartitionId + ""String_Node_Str""+ ""String_Node_Str""+ this.id);
    }
    this.addNetworkPartitionContext(groupLevelNetworkPartitionContext);
  }
  return groupLevelNetworkPartitionContext;
}",0.9866117404737385
116034,"public MemberContext startContainer(MemberContext memberContext) throws CartridgeNotFoundException {
  Lock lock=null;
  try {
    lock=CloudControllerContext.getInstance().acquireMemberContextWriteLock();
    handleNullObject(memberContext,""String_Node_Str"");
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberContext.getCartridgeType()));
    }
    String clusterId=memberContext.getClusterId();
    String memberId=memberContext.getMemberId();
    handleNullObject(clusterId,""String_Node_Str"");
    ClusterContext clusterContext=CloudControllerContext.getInstance().getClusterContext(clusterId);
    handleNullObject(clusterContext,""String_Node_Str"" + clusterId + ""String_Node_Str""+ memberId);
    Partition partition=memberContext.getPartition();
    handleNullObject(partition,""String_Node_Str"" + ""String_Node_Str"" + clusterId + ""String_Node_Str""+ memberId);
    String cartridgeType=clusterContext.getCartridgeType();
    Cartridge cartridge=CloudControllerContext.getInstance().getCartridge(cartridgeType);
    if (cartridge == null) {
      String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ memberId;
      log.error(msg);
      throw new CartridgeNotFoundException(msg);
    }
    try {
      String kubernetesClusterId=readProperty(StratosConstants.KUBERNETES_CLUSTER_ID,partition.getProperties(),partition.toString());
      KubernetesGroup kubernetesGroup=CloudControllerContext.getInstance().getKubernetesGroup(kubernetesClusterId);
      handleNullObject(kubernetesGroup,""String_Node_Str"" + ""String_Node_Str"" + kubernetesClusterId + ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ memberId);
      String kubernetesMasterIp=kubernetesGroup.getKubernetesMaster().getHostIpAddress();
      PortRange kubernetesPortRange=kubernetesGroup.getPortRange();
      String kubernetesMasterPort=CloudControllerUtil.getProperty(kubernetesGroup.getKubernetesMaster().getProperties(),StratosConstants.KUBERNETES_MASTER_PORT,StratosConstants.KUBERNETES_MASTER_DEFAULT_PORT);
      KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesMasterPort,kubernetesPortRange.getLower(),kubernetesPortRange.getUpper());
      KubernetesApiClient kubernetesApi=kubClusterContext.getKubApi();
      createReplicationController(memberContext,clusterId,kubernetesApi);
      List<Service> services=createProxyServices(clusterContext,kubClusterContext,kubernetesApi);
      Pod[] pods=waitForPodToBeCreated(memberContext,kubernetesApi);
      if (pods.length != 1) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",((int)POD_CREATION_TIMEOUT / 1000),clusterId,memberId));
        }
        terminateContainers(clusterId);
        return null;
      }
      Pod pod=pods[0];
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",clusterId,memberId,pod.getId()));
      }
      MemberContext newMemberContext=new MemberContext();
      newMemberContext.setCartridgeType(cartridgeType);
      newMemberContext.setClusterId(clusterId);
      newMemberContext.setMemberId(memberContext.getMemberId());
      newMemberContext.setClusterInstanceId(memberContext.getClusterInstanceId());
      newMemberContext.setInitTime(memberContext.getInitTime());
      newMemberContext.setNetworkPartitionId(memberContext.getNetworkPartitionId());
      newMemberContext.setPartition(memberContext.getPartition());
      newMemberContext.setInitTime(System.currentTimeMillis());
      newMemberContext.setInstanceId(pod.getId());
      newMemberContext.setPrivateIpAddress(pod.getCurrentState().getHostIP());
      newMemberContext.setPublicIpAddress(pod.getCurrentState().getHostIP());
      newMemberContext.setProperties(memberContext.getProperties());
      Property servicesProperty=new Property();
      servicesProperty.setName(StratosConstants.KUBERNETES_SERVICES);
      servicesProperty.setValue(services);
      newMemberContext.getProperties().addProperty(servicesProperty);
      CloudControllerContext.getInstance().addMemberContext(newMemberContext);
      ScheduledThreadExecutor exec=ScheduledThreadExecutor.getInstance();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      CloudControllerContext.getInstance().addScheduledFutureJob(newMemberContext.getMemberId(),exec.schedule(new PodActivationWatcher(pod.getId(),newMemberContext,kubernetesApi),5000));
      CloudControllerContext.getInstance().persist();
      log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ memberContext.getMemberId());
      return newMemberContext;
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ e.getMessage();
      log.error(msg,e);
      throw new IllegalStateException(msg,e);
    }
  }
  finally {
    if (lock != null) {
      CloudControllerContext.getInstance().releaseWriteLock(lock);
    }
  }
}","public MemberContext startContainer(MemberContext memberContext) throws CartridgeNotFoundException {
  Lock lock=null;
  try {
    lock=CloudControllerContext.getInstance().acquireMemberContextWriteLock();
    handleNullObject(memberContext,""String_Node_Str"");
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberContext.getCartridgeType()));
    }
    String clusterId=memberContext.getClusterId();
    String memberId=memberContext.getMemberId();
    handleNullObject(clusterId,""String_Node_Str"");
    ClusterContext clusterContext=CloudControllerContext.getInstance().getClusterContext(clusterId);
    handleNullObject(clusterContext,""String_Node_Str"" + clusterId + ""String_Node_Str""+ memberId);
    Partition partition=memberContext.getPartition();
    handleNullObject(partition,""String_Node_Str"" + ""String_Node_Str"" + clusterId + ""String_Node_Str""+ memberId);
    String cartridgeType=clusterContext.getCartridgeType();
    Cartridge cartridge=CloudControllerContext.getInstance().getCartridge(cartridgeType);
    if (cartridge == null) {
      String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ memberId;
      log.error(msg);
      throw new CartridgeNotFoundException(msg);
    }
    try {
      String kubernetesClusterId=readProperty(StratosConstants.KUBERNETES_CLUSTER_ID,partition.getProperties(),partition.toString());
      KubernetesGroup kubernetesGroup=CloudControllerContext.getInstance().getKubernetesGroup(kubernetesClusterId);
      handleNullObject(kubernetesGroup,""String_Node_Str"" + ""String_Node_Str"" + kubernetesClusterId + ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ memberId);
      String kubernetesMasterIp=kubernetesGroup.getKubernetesMaster().getHostIpAddress();
      PortRange kubernetesPortRange=kubernetesGroup.getPortRange();
      String kubernetesMasterPort=CloudControllerUtil.getProperty(kubernetesGroup.getKubernetesMaster().getProperties(),StratosConstants.KUBERNETES_MASTER_PORT,StratosConstants.KUBERNETES_MASTER_DEFAULT_PORT);
      KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesMasterPort,kubernetesPortRange.getLower(),kubernetesPortRange.getUpper());
      KubernetesApiClient kubernetesApi=kubClusterContext.getKubApi();
      createReplicationController(memberContext,clusterId,kubernetesApi);
      List<Service> services=createProxyServices(clusterContext,kubClusterContext,kubernetesApi);
      Pod[] pods=waitForPodToBeCreated(memberContext,kubernetesApi);
      if (pods.length != 1) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",((int)POD_CREATION_TIMEOUT / 1000),clusterId,memberId));
        }
        terminateContainers(clusterId);
        return null;
      }
      Pod pod=pods[0];
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",clusterId,memberId,pod.getId()));
      }
      MemberContext newMemberContext=createNewMemberContext(memberContext,pod);
      Property servicesProperty=new Property();
      servicesProperty.setName(StratosConstants.KUBERNETES_SERVICES);
      servicesProperty.setValue(services);
      newMemberContext.getProperties().addProperty(servicesProperty);
      CloudControllerContext.getInstance().addMemberContext(newMemberContext);
      ScheduledThreadExecutor exec=ScheduledThreadExecutor.getInstance();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      CloudControllerContext.getInstance().addScheduledFutureJob(newMemberContext.getMemberId(),exec.schedule(new PodActivationWatcher(pod.getId(),newMemberContext,kubernetesApi),5000));
      CloudControllerContext.getInstance().persist();
      log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ memberContext.getMemberId());
      return newMemberContext;
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ e.getMessage();
      log.error(msg,e);
      throw new IllegalStateException(msg,e);
    }
  }
  finally {
    if (lock != null) {
      CloudControllerContext.getInstance().releaseWriteLock(lock);
    }
  }
}",0.9097371822490306
116035,"private static void updateApplicationMonitor(String appId,ApplicationStatus status,String instanceId){
  ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
  if (applicationMonitor != null) {
    if (status == ApplicationStatus.Terminating) {
      applicationMonitor.setTerminating(true);
    }
    applicationMonitor.setStatus(status,instanceId);
  }
 else {
    log.warn(""String_Node_Str"" + appId);
  }
}","private static void updateApplicationMonitor(String appId,ApplicationStatus status,String networkPartitionId,String instanceId){
  ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
  if (applicationMonitor != null) {
    if (status == ApplicationStatus.Active) {
      applicationMonitor.getNetworkPartitionContext(networkPartitionId).movePendingInstanceToActiveInstances(instanceId);
    }
 else     if (status == ApplicationStatus.Terminating) {
      applicationMonitor.setTerminating(true);
      NetworkPartitionContext context=applicationMonitor.getNetworkPartitionContext(networkPartitionId);
      if (context.getActiveInstance(instanceId) != null) {
        context.moveActiveInstanceToTerminationPendingInstances(instanceId);
      }
 else       if (context.getPendingInstance(instanceId) != null) {
        context.movePendingInstanceToTerminationPendingInstances(instanceId);
      }
    }
    applicationMonitor.setStatus(status,instanceId);
  }
 else {
    log.warn(""String_Node_Str"" + appId);
  }
}",0.5961410512308716
116036,"public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (applicationInstance.isStateTransitionValid(status)) {
      applicationInstance.setStatus(status);
      updateApplicationMonitor(appId,status,instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      applicationMonitor.getNetworkPartitionContext(applicationInstance.getNetworkPartitionId()).removeInstanceContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
        PrivilegedCarbonContext.startTenantFlow();
        try {
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(MultitenantConstants.SUPER_TENANT_ID);
          String policyId=PolicyManager.getInstance().getDeploymentPolicyIdByApplication(appId);
          if (policyId != null) {
            try {
              PolicyManager.getInstance().undeployDeploymentPolicy(policyId);
              log.info(""String_Node_Str"" + appId + ""String_Node_Str"");
            }
 catch (            InvalidPolicyException e) {
              log.error(""String_Node_Str"" + appId);
            }
          }
        }
  finally {
          PrivilegedCarbonContext.endTenantFlow();
        }
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,instanceId);
      handleApplicationRemoval(appId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}","public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (applicationInstance.isStateTransitionValid(status)) {
      applicationInstance.setStatus(status);
      updateApplicationMonitor(appId,status,applicationInstance.getNetworkPartitionId(),instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      applicationMonitor.getNetworkPartitionContext(applicationInstance.getNetworkPartitionId()).removeInstanceContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
        PrivilegedCarbonContext.startTenantFlow();
        try {
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(MultitenantConstants.SUPER_TENANT_ID);
          String policyId=PolicyManager.getInstance().getDeploymentPolicyIdByApplication(appId);
          if (policyId != null) {
            try {
              PolicyManager.getInstance().undeployDeploymentPolicy(policyId);
              log.info(""String_Node_Str"" + appId + ""String_Node_Str"");
            }
 catch (            InvalidPolicyException e) {
              log.error(""String_Node_Str"" + appId);
            }
          }
        }
  finally {
          PrivilegedCarbonContext.endTenantFlow();
        }
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,instanceId);
      handleApplicationRemoval(appId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}",0.9907988289418652
116037,"public static boolean handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Set<ClusterDataHolder> clusterData;
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return false;
    }
    clusterData=application.getClusterDataRecursively();
    Collection<ApplicationInstance> context=application.getInstanceIdToInstanceContextMap().values();
    ApplicationStatus status=ApplicationStatus.Terminating;
    for (    ApplicationInstance context1 : context) {
      if (context1.isStateTransitionValid(status)) {
        application.setStatus(status,context1.getInstanceId());
        updateApplicationMonitor(appId,status,context1.getInstanceId());
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendApplicationInstanceTerminatingEvent(appId,context1.getInstanceId());
      }
 else {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,context1.getInstanceId() + context1.getStatus(),status));
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  for (  ClusterDataHolder aClusterData : clusterData) {
    if (AutoscalerContext.getInstance().getClusterMonitor(aClusterData.getClusterId()) == null) {
      TopologyManager.acquireReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      try {
        Service service=TopologyManager.getTopology().getService(aClusterData.getServiceType());
        if (service != null) {
          Cluster cluster=service.getCluster(aClusterData.getClusterId());
          if (cluster != null) {
            for (            ClusterInstance instance : cluster.getInstanceIdToInstanceContextMap().values()) {
              ClusterStatusEventPublisher.sendClusterTerminatingEvent(appId,aClusterData.getServiceType(),aClusterData.getClusterId(),instance.getInstanceId());
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      }
    }
  }
  return true;
}","public static boolean handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Set<ClusterDataHolder> clusterData;
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return false;
    }
    clusterData=application.getClusterDataRecursively();
    Collection<ApplicationInstance> context=application.getInstanceIdToInstanceContextMap().values();
    ApplicationStatus status=ApplicationStatus.Terminating;
    for (    ApplicationInstance context1 : context) {
      if (context1.isStateTransitionValid(status)) {
        application.setStatus(status,context1.getInstanceId());
        updateApplicationMonitor(appId,status,context1.getNetworkPartitionId(),context1.getInstanceId());
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendApplicationInstanceTerminatingEvent(appId,context1.getInstanceId());
      }
 else {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,context1.getInstanceId() + context1.getStatus(),status));
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  for (  ClusterDataHolder aClusterData : clusterData) {
    if (AutoscalerContext.getInstance().getClusterMonitor(aClusterData.getClusterId()) == null) {
      TopologyManager.acquireReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      try {
        Service service=TopologyManager.getTopology().getService(aClusterData.getServiceType());
        if (service != null) {
          Cluster cluster=service.getCluster(aClusterData.getClusterId());
          if (cluster != null) {
            for (            ClusterInstance instance : cluster.getInstanceIdToInstanceContextMap().values()) {
              ClusterStatusEventPublisher.sendClusterTerminatingEvent(appId,aClusterData.getServiceType(),aClusterData.getClusterId(),instance.getInstanceId());
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      }
    }
  }
  return true;
}",0.9929108485499464
116038,"public static void handleApplicationInstanceInactivateEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Inactive;
  ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
  if (applicationInstance.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceInactivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,applicationInstance.getStatus(),status));
  }
}","public static void handleApplicationInstanceInactivateEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Inactive;
  ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
  if (applicationInstance.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,applicationInstance.getNetworkPartitionId(),instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceInactivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,applicationInstance.getStatus(),status));
  }
}",0.978805394990366
116039,"public static void handleApplicationInstanceActivatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Active;
  ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
  if (applicationInstance.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceActivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,applicationInstance.getStatus(),status));
  }
}","public static void handleApplicationInstanceActivatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Active;
  ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
  if (applicationInstance.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,applicationInstance.getNetworkPartitionId(),instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceActivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,applicationInstance.getStatus(),status));
  }
}",0.978702807357212
116040,"protected NetworkPartitionContext(String id){
  this.id=id;
  instanceIdToInstanceContextMap=new HashMap<String,InstanceContext>();
}","protected NetworkPartitionContext(String id){
  this.id=id;
  instanceIdToInstanceContextMap=new HashMap<String,InstanceContext>();
  pendingInstances=new ArrayList<InstanceContext>();
  activeInstances=new ArrayList<InstanceContext>();
  terminatingPending=new ArrayList<InstanceContext>();
}",0.6244131455399061
116041,"@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + this.toString());
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty() && networkPartitionContext.getPendingInstancesCount() > 0) {
          try {
            if (log.isInfoEnabled()) {
              log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
            }
            createInstanceOnBurstingForApplication();
          }
 catch (          TopologyInConsistentException e) {
            log.error(""String_Node_Str"",e);
          }
catch (          PolicyValidationException e) {
            log.error(""String_Node_Str"",e);
          }
catch (          MonitorNotFoundException e) {
            log.error(""String_Node_Str"",e);
          }
        }
 else {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}","@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + this.toString());
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
          if (networkPartitionContext.getPendingInstancesCount() == 0) {
            try {
              if (log.isInfoEnabled()) {
                log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
              }
              createInstanceOnBurstingForApplication();
            }
 catch (            TopologyInConsistentException e) {
              log.error(""String_Node_Str"",e);
            }
catch (            PolicyValidationException e) {
              log.error(""String_Node_Str"",e);
            }
catch (            MonitorNotFoundException e) {
              log.error(""String_Node_Str"",e);
            }
          }
 else {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + ""String_Node_Str"");
            }
          }
        }
 else {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}",0.926232457718604
116042,"public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + this.toString());
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty() && networkPartitionContext.getPendingInstancesCount() > 0) {
              try {
                if (log.isInfoEnabled()) {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
                }
                createInstanceOnBurstingForApplication();
              }
 catch (              TopologyInConsistentException e) {
                log.error(""String_Node_Str"",e);
              }
catch (              PolicyValidationException e) {
                log.error(""String_Node_Str"",e);
              }
catch (              MonitorNotFoundException e) {
                log.error(""String_Node_Str"",e);
              }
            }
 else {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}","public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + this.toString());
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              if (networkPartitionContext.getPendingInstancesCount() == 0) {
                try {
                  if (log.isInfoEnabled()) {
                    log.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
                  }
                  createInstanceOnBurstingForApplication();
                }
 catch (                TopologyInConsistentException e) {
                  log.error(""String_Node_Str"",e);
                }
catch (                PolicyValidationException e) {
                  log.error(""String_Node_Str"",e);
                }
catch (                MonitorNotFoundException e) {
                  log.error(""String_Node_Str"",e);
                }
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + ""String_Node_Str"");
                }
              }
            }
 else {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}",0.934850640113798
116043,"private String handleApplicationInstanceCreation(Application application,ApplicationLevelNetworkPartitionContext context,ApplicationInstance instanceExist){
  ApplicationInstance instance;
  ApplicationInstanceContext instanceContext;
  if (instanceExist != null) {
    instance=instanceExist;
  }
 else {
    instance=createApplicationInstance(application,context.getId());
  }
  String instanceId=instance.getInstanceId();
  instanceContext=new ApplicationInstanceContext(instanceId);
  context.addInstanceContext(instanceContext);
  this.instanceIdToInstanceMap.put(instanceId,instance);
  this.networkPartitionCtxts.put(context.getId(),context);
  return instanceId;
}","private String handleApplicationInstanceCreation(Application application,ApplicationLevelNetworkPartitionContext context,ApplicationInstance instanceExist){
  ApplicationInstance instance;
  ApplicationInstanceContext instanceContext;
  if (instanceExist != null) {
    instance=instanceExist;
  }
 else {
    instance=createApplicationInstance(application,context.getId());
  }
  String instanceId=instance.getInstanceId();
  instanceContext=new ApplicationInstanceContext(instanceId);
  context.addInstanceContext(instanceContext);
  context.addPendingInstance(instanceContext);
  this.instanceIdToInstanceMap.put(instanceId,instance);
  this.networkPartitionCtxts.put(context.getId(),context);
  return instanceId;
}",0.9662113587347232
116044,"@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + this.toString());
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
          if (!hasScalingDependents) {
            if (groupScalingEnabled && networkPartitionContext.getPendingInstancesCount() > 0) {
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
              }
              boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
              if (!createOnDemand) {
                MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
              }
 else {
                instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
              }
            }
 else {
              MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
            }
          }
 else {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getId());
            }
            MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
          }
        }
 else {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}","@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + this.toString());
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
          if (!hasScalingDependents) {
            if (groupScalingEnabled) {
              if (networkPartitionContext.getPendingInstancesCount() == 0) {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
                }
                boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
                if (!createOnDemand) {
                  MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
                }
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + ""String_Node_Str"");
                }
              }
            }
 else {
              MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
            }
          }
 else {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getId());
            }
            MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
          }
          instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
        }
 else {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}",0.6671728676284485
116045,"public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + this.toString());
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              if (!hasScalingDependents) {
                if (groupScalingEnabled && networkPartitionContext.getPendingInstancesCount() > 0) {
                  if (log.isDebugEnabled()) {
                    log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
                  }
                  boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
                  if (!createOnDemand) {
                    MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
                  }
 else {
                    instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
                  }
                }
 else {
                  MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
                }
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getId());
                }
                MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
              }
            }
 else {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}","public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + this.toString());
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              if (!hasScalingDependents) {
                if (groupScalingEnabled) {
                  if (networkPartitionContext.getPendingInstancesCount() == 0) {
                    if (log.isDebugEnabled()) {
                      log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
                    }
                    boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
                    if (!createOnDemand) {
                      MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
                    }
                  }
 else {
                    if (log.isDebugEnabled()) {
                      log.debug(""String_Node_Str"" + ""String_Node_Str"");
                    }
                  }
                }
 else {
                  MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
                }
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getId());
                }
                MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
              }
              instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
            }
 else {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}",0.9222951513868304
116046,"public static void addServiceGroup(ServiceGroupDefinition serviceGroupDefinition) throws RestAPIException {
  try {
    serviceGropingManager.deployServiceGroupDefinition(serviceGroupDefinition);
  }
 catch (  InvalidServiceGroupException e) {
    throw new RestAPIException(e);
  }
catch (  ServiceGroupDefinitioException e) {
    throw new RestAPIException(e);
  }
catch (  ADCException e) {
    throw new RestAPIException(e);
  }
catch (  CloudControllerServiceUnregisteredCartridgeExceptionException e) {
    throw new RestAPIException(e);
  }
  log.info(""String_Node_Str"" + serviceGroupDefinition.getName());
}","public static void addServiceGroup(ServiceGroupDefinition serviceGroupDefinition) throws RestAPIException {
  try {
    serviceGropingManager.deployServiceGroupDefinition(serviceGroupDefinition);
  }
 catch (  InvalidServiceGroupException e) {
    throw new RestAPIException(e);
  }
catch (  ServiceGroupDefinitioException e) {
    throw new RestAPIException(e);
  }
catch (  ADCException e) {
    throw new RestAPIException(e);
  }
catch (  CloudControllerServiceCartridgeNotFoundExceptionException e) {
    throw new RestAPIException(e);
  }
  log.info(""String_Node_Str"" + serviceGroupDefinition.getName());
}",0.9706362153344208
116047,"public static CartridgeDefinitionBean getCartridge(String cartridgeType) throws RestAPIException {
  try {
    CartridgeInfo cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (cartridgeInfo == null) {
      return null;
    }
    return convertCartridgeToCartridgeDefinitionBean(cartridgeInfo);
  }
 catch (  RemoteException e) {
    String message=e.getMessage();
    log.error(message,e);
    throw new RestAPIException(message,e);
  }
catch (  CloudControllerServiceUnregisteredCartridgeExceptionException e) {
    String message=e.getMessage();
    log.error(message,e);
    throw new RestAPIException(message,e);
  }
}","public static CartridgeDefinitionBean getCartridge(String cartridgeType) throws RestAPIException {
  try {
    CartridgeInfo cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (cartridgeInfo == null) {
      return null;
    }
    return convertCartridgeToCartridgeDefinitionBean(cartridgeInfo);
  }
 catch (  RemoteException e) {
    String message=e.getMessage();
    log.error(message,e);
    throw new RestAPIException(message,e);
  }
catch (  CloudControllerServiceCartridgeNotFoundExceptionException e) {
    String message=e.getMessage();
    log.error(message,e);
    throw new RestAPIException(message,e);
  }
}",0.9717682020802376
116048,"public static ApplicationBean convertApplicationToApplicationBean(Application application){
  if (application == null) {
    return null;
  }
  ApplicationBean applicationBean=new ApplicationBean();
  applicationBean.setId(application.getUniqueIdentifier());
  applicationBean.setName(application.getName());
  applicationBean.setDescription(application.getDescription());
  applicationBean.setTenantDomain(application.getTenantDomain());
  applicationBean.setTenantAdminUsername(application.getTenantAdminUserName());
  applicationBean.setInstances(convertApplicationInstancesToInstances(application));
  return applicationBean;
}","public static ApplicationInfoBean convertApplicationToApplicationBean(Application application){
  if (application == null) {
    return null;
  }
  ApplicationInfoBean applicationBean=new ApplicationInfoBean();
  applicationBean.setId(application.getUniqueIdentifier());
  applicationBean.setName(application.getName());
  applicationBean.setDescription(application.getDescription());
  applicationBean.setTenantDomain(application.getTenantDomain());
  applicationBean.setTenantAdminUsername(application.getTenantAdminUserName());
  return applicationBean;
}",0.9184188393608074
116049,"public static ClusterInstanceBean convertClusterToClusterInstanceBean(String instanceId,Cluster cluster,String alias){
  ClusterInstanceBean clusterInstanceBean=new ClusterInstanceBean();
  clusterInstanceBean.setAlias(alias);
  clusterInstanceBean.setServiceName(cluster.getServiceName());
  clusterInstanceBean.setClusterId(cluster.getClusterId());
  clusterInstanceBean.setInstanceId(instanceId);
  clusterInstanceBean.setParentInstanceId(instanceId);
  if (cluster.getInstanceContexts(instanceId) != null) {
    clusterInstanceBean.setStatus(cluster.getInstanceContexts(instanceId).getStatus().toString());
  }
  clusterInstanceBean.setTenantRange(cluster.getTenantRange());
  clusterInstanceBean.setMember(new ArrayList<Member>());
  clusterInstanceBean.setHostNames(new ArrayList<String>());
  for (  org.apache.stratos.messaging.domain.topology.Member member : cluster.getMembers()) {
    if (member.getInstanceId().equals(instanceId)) {
      Member memberBean=new Member();
      memberBean.setClusterId(member.getClusterId());
      memberBean.setLbClusterId(member.getLbClusterId());
      memberBean.setNetworkPartitionId(member.getNetworkPartitionId());
      memberBean.setPartitionId(member.getPartitionId());
      memberBean.setMemberId(member.getMemberId());
      if (member.getMemberIp() == null) {
        memberBean.setMemberIp(""String_Node_Str"");
      }
 else {
        memberBean.setMemberIp(member.getMemberIp());
      }
      if (member.getMemberPublicIp() == null) {
        memberBean.setMemberPublicIp(""String_Node_Str"");
      }
 else {
        memberBean.setMemberPublicIp(member.getMemberPublicIp());
      }
      memberBean.setServiceName(member.getServiceName());
      memberBean.setStatus(member.getStatus().toString());
      memberBean.setProperty(convertJavaUtilPropertiesToPropertyBeans(member.getProperties()));
      clusterInstanceBean.getMember().add(memberBean);
    }
  }
  for (  String hostname : cluster.getHostNames()) {
    clusterInstanceBean.getHostNames().add(hostname);
  }
  return clusterInstanceBean;
}","public static ClusterInstanceBean convertClusterToClusterInstanceBean(String instanceId,Cluster cluster,String alias){
  ClusterInstanceBean clusterInstanceBean=new ClusterInstanceBean();
  clusterInstanceBean.setAlias(alias);
  clusterInstanceBean.setServiceName(cluster.getServiceName());
  clusterInstanceBean.setClusterId(cluster.getClusterId());
  clusterInstanceBean.setInstanceId(instanceId);
  clusterInstanceBean.setParentInstanceId(instanceId);
  if (cluster.getInstanceContexts(instanceId) != null) {
    clusterInstanceBean.setStatus(cluster.getInstanceContexts(instanceId).getStatus().toString());
  }
  clusterInstanceBean.setTenantRange(cluster.getTenantRange());
  clusterInstanceBean.setMember(new ArrayList<Member>());
  clusterInstanceBean.setHostNames(new ArrayList<String>());
  for (  org.apache.stratos.messaging.domain.topology.Member member : cluster.getMembers()) {
    if (member.getClusterInstanceId().equals(instanceId)) {
      Member memberBean=new Member();
      memberBean.setClusterId(member.getClusterId());
      memberBean.setLbClusterId(member.getLbClusterId());
      memberBean.setNetworkPartitionId(member.getNetworkPartitionId());
      memberBean.setPartitionId(member.getPartitionId());
      memberBean.setMemberId(member.getMemberId());
      if (member.getMemberIp() == null) {
        memberBean.setMemberIp(""String_Node_Str"");
      }
 else {
        memberBean.setMemberIp(member.getMemberIp());
      }
      if (member.getMemberPublicIp() == null) {
        memberBean.setMemberPublicIp(""String_Node_Str"");
      }
 else {
        memberBean.setMemberPublicIp(member.getMemberPublicIp());
      }
      memberBean.setServiceName(member.getServiceName());
      memberBean.setStatus(member.getStatus().toString());
      memberBean.setProperty(convertJavaUtilPropertiesToPropertyBeans(member.getProperties()));
      clusterInstanceBean.getMember().add(memberBean);
    }
  }
  for (  String hostname : cluster.getHostNames()) {
    clusterInstanceBean.getHostNames().add(hostname);
  }
  return clusterInstanceBean;
}",0.9983063150254052
116050,"public static void handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Set<ClusterDataHolder> appClusterDataToSend;
  Application application;
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return;
    }
 else {
      org.apache.stratos.autoscaler.pojo.policy.deployment.DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
      if (policy != null) {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",appId));
        return;
      }
    }
    appClusterDataToSend=new HashSet<ClusterDataHolder>();
    Set<ClusterDataHolder> appClusterData=application.getClusterDataRecursively();
    for (    ClusterDataHolder currClusterData : appClusterData) {
      ClusterDataHolder newClusterData=new ClusterDataHolder(currClusterData.getServiceType(),currClusterData.getClusterId());
      appClusterDataToSend.add(newClusterData);
    }
    ApplicationHolder.removeApplication(appId);
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  ApplicationsEventPublisher.sendApplicationDeletedEvent(appId,appClusterDataToSend);
}","public static boolean handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Set<ClusterDataHolder> clusterData;
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return false;
    }
    clusterData=application.getClusterDataRecursively();
    Collection<ApplicationInstance> context=application.getInstanceIdToInstanceContextMap().values();
    ApplicationStatus status=ApplicationStatus.Terminating;
    for (    ApplicationInstance context1 : context) {
      if (context1.isStateTransitionValid(status)) {
        application.setStatus(status,context1.getInstanceId());
        updateApplicationMonitor(appId,status,context1.getInstanceId());
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendApplicationInstanceTerminatingEvent(appId,context1.getInstanceId());
      }
 else {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,context1.getInstanceId() + context1.getStatus(),status));
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  for (  ClusterDataHolder aClusterData : clusterData) {
    if (AutoscalerContext.getInstance().getClusterMonitor(aClusterData.getClusterId()) == null) {
      TopologyManager.acquireReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      try {
        Service service=TopologyManager.getTopology().getService(aClusterData.getServiceType());
        if (service != null) {
          Cluster cluster=service.getCluster(aClusterData.getClusterId());
          if (cluster != null) {
            for (            ClusterInstance instance : cluster.getInstanceIdToInstanceContextMap().values()) {
              ClusterStatusEventPublisher.sendClusterTerminatingEvent(appId,aClusterData.getServiceType(),aClusterData.getClusterId(),instance.getInstanceId());
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      }
    }
  }
  return true;
}",0.3324324324324324
116051,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convertStartupOrder(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        for (        ServiceGroup nestedServiceGroup : serviceGroup.getGroups()) {
          if (nestedServiceGroup.getName().equals(subGroupCtxt.getName())) {
            Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,nestedServiceGroup);
            nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
          }
        }
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convertStartupOrder(startupOrders,groupCtxt));
  }
  String[] scaleDependents=getScaleDependentForGroup(groupCtxt.getName(),serviceGroup);
  if (scaleDependents != null) {
    dependencyOrder.setScalingDependents(ParserUtils.convertScalingDependentList(scaleDependents,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        for (        ServiceGroup nestedServiceGroup : serviceGroup.getGroups()) {
          if (nestedServiceGroup.getName().equals(subGroupCtxt.getName())) {
            Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,nestedServiceGroup);
            nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
          }
        }
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.9168238005447308
116052,"/** 
 * This will create a new app monitor based on the give appId by getting the application from Topology
 * @param applicationId appId of the application which requires to create app monitor
 * @return ApplicationMonitor
 * @throws DependencyBuilderException    throws while building dependency for app monitor
 * @throws TopologyInConsistentException throws while traversing thr topology
 */
public static ApplicationMonitor getApplicationMonitor(String applicationId) throws DependencyBuilderException, TopologyInConsistentException, PolicyValidationException {
  ApplicationMonitor applicationMonitor;
  Application application;
  try {
    ApplicationHolder.acquireReadLock();
    application=ApplicationHolder.getApplications().getApplication(applicationId);
    if (application != null) {
      applicationMonitor=new ApplicationMonitor(application);
      applicationMonitor.setHasStartupDependents(false);
    }
 else {
      String msg=""String_Node_Str"" + applicationId;
      throw new TopologyInConsistentException(msg);
    }
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  applicationMonitor.startMinimumDependencies(application);
  return applicationMonitor;
}","/** 
 * This will create a new app monitor based on the give appId by getting the application from Topology
 * @param applicationId appId of the application which requires to create app monitor
 * @return ApplicationMonitor
 * @throws DependencyBuilderException    throws while building dependency for app monitor
 * @throws TopologyInConsistentException throws while traversing thr topology
 */
public static ApplicationMonitor getApplicationMonitor(String applicationId) throws DependencyBuilderException, TopologyInConsistentException, PolicyValidationException {
  ApplicationMonitor applicationMonitor;
  Application application;
  try {
    ApplicationHolder.acquireReadLock();
    application=ApplicationHolder.getApplications().getApplication(applicationId);
    if (application != null) {
      applicationMonitor=new ApplicationMonitor(application);
      applicationMonitor.setHasStartupDependents(false);
      applicationMonitor.startScheduler();
    }
 else {
      String msg=""String_Node_Str"" + applicationId;
      throw new TopologyInConsistentException(msg);
    }
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  applicationMonitor.startMinimumDependencies(application);
  return applicationMonitor;
}",0.9822826534816648
116053,"/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.policy.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.partition.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,List<String> parentInstanceIds) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    boolean hasScalingDependents=false;
    if (parentMonitor.getScalingDependencies() != null) {
      for (      ScalingDependentList scalingDependentList : parentMonitor.getScalingDependencies()) {
        if (scalingDependentList.getScalingDependentListComponents().contains(""String_Node_Str"" + clusterId.substring(0,clusterId.indexOf('.')))) {
          hasScalingDependents=true;
        }
      }
    }
    boolean groupScalingEnabledSubtree=false;
    if (parentMonitor instanceof GroupMonitor) {
      GroupMonitor groupMonitor=(GroupMonitor)parentMonitor;
      groupScalingEnabledSubtree=findIfChildIsInGroupScalingEnabledSubTree(groupMonitor);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster,hasScalingDependents,groupScalingEnabledSubtree);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    ((VMClusterMonitor)clusterMonitor).createClusterInstance(parentInstanceIds,cluster);
    AutoscalerContext.getInstance().addClusterMonitor(clusterMonitor);
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}","/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.policy.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.partition.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,List<String> parentInstanceIds) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    boolean hasScalingDependents=false;
    if (parentMonitor.getScalingDependencies() != null) {
      for (      ScalingDependentList scalingDependentList : parentMonitor.getScalingDependencies()) {
        if (scalingDependentList.getScalingDependentListComponents().contains(clusterId)) {
          hasScalingDependents=true;
        }
      }
    }
    boolean groupScalingEnabledSubtree=false;
    if (parentMonitor instanceof GroupMonitor) {
      GroupMonitor groupMonitor=(GroupMonitor)parentMonitor;
      groupScalingEnabledSubtree=findIfChildIsInGroupScalingEnabledSubTree(groupMonitor);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster,hasScalingDependents,groupScalingEnabledSubtree);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    ((VMClusterMonitor)clusterMonitor).createClusterInstance(parentInstanceIds,cluster);
    AutoscalerContext.getInstance().addClusterMonitor(clusterMonitor);
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}",0.989618094178717
116054,"@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + this.toString());
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
          if (groupScalingEnabled) {
            boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
            if (!createOnDemand) {
              MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
            }
 else {
              instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
            }
          }
 else {
            MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
          }
        }
 else {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}","@Override public void run(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + this.toString());
  }
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
    for (    InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
      GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
      if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
        if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
          if (groupScalingEnabled) {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
            }
            boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
            if (!createOnDemand) {
              MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
            }
 else {
              instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
            }
          }
 else {
            MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
          }
        }
 else {
          handleDependentScaling(instanceContext,networkPartitionContext);
        }
      }
    }
  }
}",0.9481751824817518
116055,"public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + this.toString());
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              if (groupScalingEnabled) {
                boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
                if (!createOnDemand) {
                  MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
                }
 else {
                  instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
                }
              }
 else {
                MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
              }
            }
 else {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}","public synchronized void monitor(){
  final Collection<NetworkPartitionContext> networkPartitionContexts=this.networkPartitionCtxts.values();
  Runnable monitoringRunnable=new Runnable(){
    @Override public void run(){
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + this.toString());
      }
      for (      NetworkPartitionContext networkPartitionContext : networkPartitionContexts) {
        for (        InstanceContext instanceContext : networkPartitionContext.getInstanceIdToInstanceContextMap().values()) {
          GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceContext.getId());
          if (instance.getStatus().getCode() <= GroupStatus.Active.getCode()) {
            if (!instanceContext.getIdToScalingOverMaxEvent().isEmpty()) {
              if (groupScalingEnabled) {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
                }
                boolean createOnDemand=createInstanceOnDemand(instanceContext.getParentInstanceId());
                if (!createOnDemand) {
                  MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
                }
 else {
                  instanceContext.setIdToScalingOverMaxEvent(new HashMap<String,ScalingOverMaxEvent>());
                }
              }
 else {
                MonitorStatusEventBuilder.handleScalingOverMaxEvent(parent,networkPartitionContext.getId(),instanceContext.getId(),appId);
              }
            }
 else {
              handleDependentScaling(instanceContext,networkPartitionContext);
            }
          }
        }
      }
    }
  }
;
  monitoringRunnable.run();
}",0.9550233644859814
116056,"@Override public void onChildScalingOverMaxEvent(ScalingOverMaxEvent scalingOverMaxEvent){
  String networkPartitionId=scalingOverMaxEvent.getNetworkPartitionId();
  String instanceId=scalingOverMaxEvent.getInstanceId();
  String id=scalingOverMaxEvent.getId();
  NetworkPartitionContext networkPartitionContext=this.networkPartitionCtxts.get(networkPartitionId);
  if (networkPartitionContext != null) {
    InstanceContext instanceContext=networkPartitionContext.getInstanceContext(instanceId);
    if (instanceContext != null) {
      if (instanceContext.containsScalingEvent(id)) {
        instanceContext.removeScalingOverMaxEvent(id);
        instanceContext.addScalingOverMaxEvent(scalingOverMaxEvent);
      }
 else {
        instanceContext.addScalingOverMaxEvent(scalingOverMaxEvent);
      }
    }
  }
  this.monitor();
}","@Override public void onChildScalingOverMaxEvent(ScalingOverMaxEvent scalingOverMaxEvent){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + this.getId() + ""String_Node_Str""+ scalingOverMaxEvent.getNetworkPartitionId()+ ""String_Node_Str""+ scalingOverMaxEvent.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ scalingOverMaxEvent.getInstanceId());
  }
  String networkPartitionId=scalingOverMaxEvent.getNetworkPartitionId();
  String instanceId=scalingOverMaxEvent.getInstanceId();
  String id=scalingOverMaxEvent.getId();
  NetworkPartitionContext networkPartitionContext=this.networkPartitionCtxts.get(networkPartitionId);
  if (networkPartitionContext != null) {
    InstanceContext instanceContext=networkPartitionContext.getInstanceContext(instanceId);
    if (instanceContext != null) {
      if (instanceContext.containsScalingEvent(id)) {
        instanceContext.removeScalingOverMaxEvent(id);
        instanceContext.addScalingOverMaxEvent(scalingOverMaxEvent);
      }
 else {
        instanceContext.addScalingOverMaxEvent(scalingOverMaxEvent);
      }
    }
  }
  this.monitor();
}",0.7090439276485788
116057,"protected void handleDependentScaling(InstanceContext instanceContext,NetworkPartitionContext networkPartitionContext){
  List<ScalingEvent> highestScalingEventOfDependencies=new ArrayList<ScalingEvent>();
  for (  ScalingDependentList scalingDependentList : scalingDependencies) {
    ScalingEvent highestFactorEvent=null;
    for (    String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
      ScalingEvent scalingEvent=instanceContext.getScalingEvent(scalingDependentListComponent);
      if (highestFactorEvent == null) {
        highestFactorEvent=scalingEvent;
      }
 else {
        if (scalingEvent.getFactor() > highestFactorEvent.getFactor()) {
          highestFactorEvent=scalingEvent;
        }
      }
    }
    highestScalingEventOfDependencies.add(highestFactorEvent);
  }
  for (  ScalingEvent highestScalingEventOfChild : highestScalingEventOfDependencies) {
    if (scalingDependencies != null && !scalingDependencies.isEmpty()) {
      for (      ScalingDependentList scalingDependentList : scalingDependencies) {
        if (scalingDependentList.getScalingDependentListComponents().contains(highestScalingEventOfChild.getId())) {
          for (          String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
            Monitor monitor=aliasToActiveMonitorsMap.get(scalingDependentListComponent);
            if (monitor instanceof GroupMonitor || monitor instanceof VMClusterMonitor) {
              ScalingEvent scalingEvent=new ScalingEvent(monitor.getId(),networkPartitionContext.getId(),instanceContext.getId(),highestScalingEventOfChild.getFactor());
              monitor.onParentScalingEvent(scalingEvent);
            }
          }
        }
        break;
      }
    }
  }
  instanceContext.setIdToScalingEvent(new HashMap<String,ScalingEvent>());
}","protected void handleDependentScaling(InstanceContext instanceContext,NetworkPartitionContext networkPartitionContext){
  List<ScalingEvent> highestScalingEventOfDependencies=new ArrayList<ScalingEvent>();
  for (  ScalingDependentList scalingDependentList : scalingDependencies) {
    ScalingEvent highestFactorEvent=null;
    for (    String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
      ScalingEvent scalingEvent=instanceContext.getScalingEvent(scalingDependentListComponent);
      if (scalingEvent != null) {
        if (highestFactorEvent == null) {
          highestFactorEvent=scalingEvent;
        }
 else {
          if (scalingEvent.getFactor() > highestFactorEvent.getFactor()) {
            highestFactorEvent=scalingEvent;
          }
        }
      }
    }
    if (highestFactorEvent != null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + highestFactorEvent.getId() + ""String_Node_Str""+ highestFactorEvent.getFactor());
      }
      highestScalingEventOfDependencies.add(highestFactorEvent);
    }
  }
  for (  ScalingEvent highestScalingEventOfChild : highestScalingEventOfDependencies) {
    if (scalingDependencies != null && !scalingDependencies.isEmpty()) {
      for (      ScalingDependentList scalingDependentList : scalingDependencies) {
        if (scalingDependentList.getScalingDependentListComponents().contains(highestScalingEventOfChild.getId())) {
          for (          String scalingDependentListComponent : scalingDependentList.getScalingDependentListComponents()) {
            Monitor monitor=aliasToActiveMonitorsMap.get(scalingDependentListComponent);
            if (monitor instanceof GroupMonitor || monitor instanceof VMClusterMonitor) {
              ScalingEvent scalingEvent=new ScalingEvent(monitor.getId(),networkPartitionContext.getId(),instanceContext.getId(),highestScalingEventOfChild.getFactor());
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + scalingEvent.getId() + ""String_Node_Str""+ scalingEvent.getInstanceId()+ ""String_Node_Str""+ scalingEvent.getFactor()+ ""String_Node_Str"");
              }
              monitor.onParentScalingEvent(scalingEvent);
            }
          }
        }
        break;
      }
    }
  }
  instanceContext.setIdToScalingEvent(new HashMap<String,ScalingEvent>());
}",0.8814675446848542
116058,"public void delegateScalingDependencyNotification(String clusterId,String networkPartitionId,String instanceId,int requiredInstanceCount,int minimumInstanceCount){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterId);
  float factor=requiredInstanceCount / minimumInstanceCount;
  if (clusterMonitor instanceof VMClusterMonitor) {
    VMClusterMonitor vmClusterMonitor=(VMClusterMonitor)clusterMonitor;
    vmClusterMonitor.sendClusterScalingEvent(networkPartitionId,instanceId,factor);
  }
}","public void delegateScalingDependencyNotification(String clusterId,String networkPartitionId,String instanceId,int requiredInstanceCount,int minimumInstanceCount){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + instanceId);
  }
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterId);
  float factor=requiredInstanceCount / minimumInstanceCount;
  if (clusterMonitor instanceof VMClusterMonitor) {
    VMClusterMonitor vmClusterMonitor=(VMClusterMonitor)clusterMonitor;
    vmClusterMonitor.sendClusterScalingEvent(networkPartitionId,instanceId,factor);
  }
}",0.9894222945484134
116059,"public void delegateScalingOverMaxNotification(String clusterId,String networkPartitionId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterId);
  if (clusterMonitor instanceof VMClusterMonitor) {
    VMClusterMonitor vmClusterMonitor=(VMClusterMonitor)clusterMonitor;
    vmClusterMonitor.sendScalingOverMaxEvent(networkPartitionId,instanceId);
  }
}","public void delegateScalingOverMaxNotification(String clusterId,String networkPartitionId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + instanceId);
  }
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterId);
  if (clusterMonitor instanceof VMClusterMonitor) {
    VMClusterMonitor vmClusterMonitor=(VMClusterMonitor)clusterMonitor;
    vmClusterMonitor.sendScalingOverMaxEvent(networkPartitionId,instanceId);
  }
}",0.9868020304568528
116060,"public boolean verifyGroupStatus(String childId,String instanceId,GroupStatus requiredStatus){
  Monitor monitor=this.getMonitor(childId);
  List<String> groupInstances;
  GroupInstance groupInstance=(GroupInstance)monitor.getInstance(instanceId);
  if (groupInstance == null) {
    groupInstances=monitor.getInstancesByParentInstanceId(instanceId);
  }
 else {
    if (groupInstance.getStatus() == requiredStatus) {
      return true;
    }
 else {
      return false;
    }
  }
  String networkPartitionId=null;
  int noOfInstancesOfRequiredStatus=0;
  for (  String childInstanceId : groupInstances) {
    GroupInstance childGroupInstance=(GroupInstance)monitor.getInstance(childInstanceId);
    networkPartitionId=childGroupInstance.getNetworkPartitionId();
    if (childGroupInstance.getStatus() == requiredStatus) {
      noOfInstancesOfRequiredStatus++;
    }
    if (!groupInstances.isEmpty()) {
      GroupLevelNetworkPartitionContext networkPartitionContext=(GroupLevelNetworkPartitionContext)this.networkPartitionCtxts.get(networkPartitionId);
      int minInstances=networkPartitionContext.getMinInstanceCount();
      if (noOfInstancesOfRequiredStatus == this.inactiveInstancesMap.size() && requiredStatus == GroupStatus.Terminated) {
        return true;
      }
 else       if (noOfInstancesOfRequiredStatus >= minInstances) {
        return true;
      }
    }
  }
  return false;
}","public boolean verifyGroupStatus(String childId,String instanceId,GroupStatus requiredStatus){
  Monitor monitor=this.getMonitor(childId);
  List<String> groupInstances;
  GroupInstance groupInstance=(GroupInstance)monitor.getInstance(instanceId);
  if (groupInstance == null) {
    groupInstances=monitor.getInstancesByParentInstanceId(instanceId);
  }
 else {
    if (groupInstance.getStatus() == requiredStatus) {
      return true;
    }
 else {
      return false;
    }
  }
  String networkPartitionId=null;
  int noOfInstancesOfRequiredStatus=0;
  for (  String childInstanceId : groupInstances) {
    GroupInstance childGroupInstance=(GroupInstance)monitor.getInstance(childInstanceId);
    networkPartitionId=childGroupInstance.getNetworkPartitionId();
    if (childGroupInstance.getStatus() == requiredStatus) {
      noOfInstancesOfRequiredStatus++;
    }
  }
  if (!groupInstances.isEmpty()) {
    GroupLevelNetworkPartitionContext networkPartitionContext=(GroupLevelNetworkPartitionContext)this.networkPartitionCtxts.get(networkPartitionId);
    int minInstances=networkPartitionContext.getMinInstanceCount();
    if (noOfInstancesOfRequiredStatus == this.inactiveInstancesMap.size() && requiredStatus == GroupStatus.Terminated) {
      return true;
    }
 else     if (noOfInstancesOfRequiredStatus >= minInstances) {
      return true;
    }
 else {
      if (requiredStatus == GroupStatus.Inactive && noOfInstancesOfRequiredStatus >= 1) {
        return true;
      }
    }
  }
  return false;
}",0.9226538329322792
116061,"/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLB if this cluster is an LB
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLB,String[] dependencyAliases,Properties properties) throws ApplicationDefinitionException {
  PayloadData payloadData=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases,properties);
  String textPayload=payloadData.toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB);
}","/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLB if this cluster is an LB
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLB,String[] dependencyAliases,Properties properties) throws ApplicationDefinitionException {
  PayloadData payloadData=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases,properties);
  String oAuth_token=createToken(appId);
  payloadData.add(TOKEN_PAYLOD_PARAM_NAME,oAuth_token);
  String textPayload=payloadData.toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB);
}",0.9676126878130216
116062,"public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId+ ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      GroupMonitor monitor=getGroupMonitor(appId,groupId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      if (monitor != null) {
        if (monitor.hasMonitors() && applicationMonitor.isTerminating()) {
          for (          Monitor monitor1 : monitor.getAliasToActiveMonitorsMap().values()) {
            monitor1.destroy();
          }
        }
        GroupLevelNetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionContext(context.getNetworkPartitionId());
        networkPartitionContext.removeClusterGroupContext(instanceId);
        if (context.getPartitionId() != null) {
          networkPartitionContext.getPartitionCtxt(context.getPartitionId()).removeActiveInstance(context);
        }
        monitor.removeInstance(instanceId);
        group.removeInstance(instanceId);
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
        monitor.setStatus(status,instanceId);
      }
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId+ ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance groupInstance=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  String parentId;
  if (groupInstance != null) {
    if (groupInstance.isStateTransitionValid(status)) {
      groupInstance.setStatus(status);
      parentId=groupInstance.getParentId();
      GroupMonitor monitor=getGroupMonitor(appId,groupId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      if (monitor != null) {
        if (monitor.hasMonitors() && applicationMonitor.isTerminating()) {
          for (          Monitor monitor1 : monitor.getAliasToActiveMonitorsMap().values()) {
            monitor1.destroy();
          }
        }
        GroupLevelNetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionContext(groupInstance.getNetworkPartitionId());
        networkPartitionContext.removeClusterGroupContext(instanceId);
        if (groupInstance.getPartitionId() != null) {
          networkPartitionContext.getPartitionCtxt(groupInstance.getPartitionId()).removeActiveInstance(groupInstance);
        }
        monitor.removeInstance(instanceId);
        group.removeInstance(instanceId);
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
        monitor.setStatus(status,instanceId,parentId);
      }
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ groupInstance.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.9357303370786516
116063,"public static void handleGroupTerminatingEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId+ ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    GroupInstance context=group.getInstanceContexts(instanceId);
    GroupStatus status=GroupStatus.Terminating;
    if (context != null) {
      if (context.isStateTransitionValid(status)) {
        context.setStatus(status);
        updateGroupMonitor(appId,groupId,status,instanceId);
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendGroupInstanceTerminatingEvent(appId,groupId,instanceId);
      }
 else {
        log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
      }
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}","public static void handleGroupTerminatingEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId+ ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    GroupInstance groupInstance=group.getInstanceContexts(instanceId);
    GroupStatus status=GroupStatus.Terminating;
    if (groupInstance != null) {
      if (groupInstance.isStateTransitionValid(status)) {
        groupInstance.setStatus(status);
        updateGroupMonitor(appId,groupId,status,instanceId,groupInstance.getParentId());
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendGroupInstanceTerminatingEvent(appId,groupId,instanceId);
      }
 else {
        log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ groupInstance.getStatus()+ ""String_Node_Str""+ status);
      }
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}",0.9561643835616438
116064,"public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    ApplicationInstance instance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (instance.isStateTransitionValid(status)) {
      instance.setStatus(status);
      updateApplicationMonitor(appId,status,instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      applicationMonitor.getNetworkPartitionContext(instance.getNetworkPartitionId()).removeClusterApplicationContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
        PrivilegedCarbonContext.startTenantFlow();
        try {
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(MultitenantConstants.SUPER_TENANT_ID);
          String policyId=PolicyManager.getInstance().getDeploymentPolicyIdByApplication(appId);
          if (policyId != null) {
            try {
              PolicyManager.getInstance().undeployDeploymentPolicy(policyId);
              log.info(""String_Node_Str"" + appId + ""String_Node_Str"");
            }
 catch (            InvalidPolicyException e) {
              log.error(""String_Node_Str"" + appId);
            }
          }
        }
  finally {
          PrivilegedCarbonContext.endTenantFlow();
        }
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,instanceId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}","public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (applicationInstance.isStateTransitionValid(status)) {
      applicationInstance.setStatus(status);
      updateApplicationMonitor(appId,status,instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      applicationMonitor.getNetworkPartitionContext(applicationInstance.getNetworkPartitionId()).removeClusterApplicationContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
        PrivilegedCarbonContext.startTenantFlow();
        try {
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
          PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(MultitenantConstants.SUPER_TENANT_ID);
          String policyId=PolicyManager.getInstance().getDeploymentPolicyIdByApplication(appId);
          if (policyId != null) {
            try {
              PolicyManager.getInstance().undeployDeploymentPolicy(policyId);
              log.info(""String_Node_Str"" + appId + ""String_Node_Str"");
            }
 catch (            InvalidPolicyException e) {
              log.error(""String_Node_Str"" + appId);
            }
          }
        }
  finally {
          PrivilegedCarbonContext.endTenantFlow();
        }
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,instanceId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}",0.9887834339948232
116065,"public static void handleGroupInactivateEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Inactive;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceInactivateEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInactivateEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance groupInstance=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Inactive;
  if (groupInstance != null) {
    if (groupInstance.isStateTransitionValid(status)) {
      groupInstance.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId,groupInstance.getParentId());
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceInactivateEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ groupInstance.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.9501557632398754
116066,"public static GroupInstance handleGroupInstanceCreatedEvent(String appId,String groupId,String parentId,String networkPartitionId,String partitionId){
  GroupInstance instance=null;
  ApplicationHolder.acquireWriteLock();
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
    }
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return instance;
    }
    Group group=application.getGroupRecursively(groupId);
    if (group == null) {
      log.warn(String.format(""String_Node_Str"",groupId));
      return instance;
    }
    GroupStatus status=GroupStatus.Created;
    String instanceId=parentId;
    int minGroupInstances=group.getGroupMinInstances();
    int maxGroupInstances=group.getGroupMaxInstances();
    if (minGroupInstances > 1 || maxGroupInstances > 1 || group.isGroupScalingEnabled()) {
      instanceId=group.getNextInstanceId(groupId);
    }
    if (!group.containsInstanceContext(instanceId)) {
      instance=new GroupInstance(groupId,instanceId);
      instance.setParentId(parentId);
      instance.setPartitionId(partitionId);
      instance.setNetworkPartitionId(networkPartitionId);
      instance.setStatus(status);
      group.addInstance(instanceId,instance);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceCreatedEvent(appId,groupId,instance);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return instance;
}","public static GroupInstance handleGroupInstanceCreatedEvent(String appId,String groupId,String parentId,String networkPartitionId,String partitionId){
  GroupInstance groupInstance=null;
  ApplicationHolder.acquireWriteLock();
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
    }
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return groupInstance;
    }
    Group group=application.getGroupRecursively(groupId);
    if (group == null) {
      log.warn(String.format(""String_Node_Str"",groupId));
      return groupInstance;
    }
    GroupStatus status=GroupStatus.Created;
    String instanceId=parentId;
    int minGroupInstances=group.getGroupMinInstances();
    int maxGroupInstances=group.getGroupMaxInstances();
    if (minGroupInstances > 1 || maxGroupInstances > 1 || group.isGroupScalingEnabled()) {
      instanceId=group.getNextInstanceId(groupId);
    }
    if (!group.containsInstanceContext(instanceId)) {
      groupInstance=new GroupInstance(groupId,instanceId);
      groupInstance.setParentId(parentId);
      groupInstance.setPartitionId(partitionId);
      groupInstance.setNetworkPartitionId(networkPartitionId);
      groupInstance.setStatus(status);
      group.addInstance(instanceId,groupInstance);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceCreatedEvent(appId,groupId,groupInstance);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return groupInstance;
}",0.9782915139554552
116067,"public static void handleApplicationInstanceInactivateEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Inactive;
  ApplicationInstance context=application.getInstanceContexts(instanceId);
  if (context.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceInactivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,context.getStatus(),status));
  }
}","public static void handleApplicationInstanceInactivateEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Inactive;
  ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
  if (applicationInstance.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceInactivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,applicationInstance.getStatus(),status));
  }
}",0.935871743486974
116068,"private static void updateGroupMonitor(String appId,String groupId,GroupStatus status,String instanceId){
  GroupMonitor monitor=getGroupMonitor(appId,groupId);
  if (monitor != null) {
    monitor.setStatus(status,instanceId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
}","private static void updateGroupMonitor(String appId,String groupId,GroupStatus status,String instanceId,String parentInstanceId){
  GroupMonitor monitor=getGroupMonitor(appId,groupId);
  if (monitor != null) {
    monitor.setStatus(status,instanceId,parentInstanceId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
}",0.9388971684053652
116069,"public static void handleGroupInstanceActivatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId+ ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Active;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceActivatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInstanceActivatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId+ ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance groupInstance=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Active;
  if (groupInstance != null) {
    if (groupInstance.isStateTransitionValid(status)) {
      groupInstance.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId,groupInstance.getParentId());
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceActivatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ groupInstance.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.9514783927217588
116070,"public static void handleApplicationInstanceActivatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Active;
  ApplicationInstance context=application.getInstanceContexts(instanceId);
  if (context.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceActivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,context.getStatus(),status));
  }
}","public static void handleApplicationInstanceActivatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId + ""String_Node_Str""+ instanceId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Active;
  ApplicationInstance applicationInstance=application.getInstanceContexts(instanceId);
  if (applicationInstance.isStateTransitionValid(status)) {
    application.setStatus(status,instanceId);
    updateApplicationMonitor(appId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceActivatedEvent(appId,instanceId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId,applicationInstance.getStatus(),status));
  }
}",0.9355488418932528
116071,"@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent){
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ this.getClusterId());
    }
    ClusterStatusEventPublisher.sendClusterTerminatingEvent(getAppId(),getServiceId(),getClusterId(),instanceId);
  }
}","@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent){
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ this.getClusterId()+ ""String_Node_Str""+ instanceId);
    }
    ClusterStatusEventPublisher.sendClusterTerminatingEvent(getAppId(),getServiceId(),getClusterId(),instanceId);
  }
}",0.968968968968969
116072,"@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent) throws MonitorNotFoundException {
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    GroupInstance instance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId);
    }
 else {
      List<String> instanceIds=this.getInstancesByParentInstanceId(instanceId);
      if (!instanceIds.isEmpty()) {
        for (        String instanceId1 : instanceIds) {
          ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId1);
        }
      }
    }
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
    Application application=ApplicationHolder.getApplications().getApplication(this.appId);
    Group group=application.getGroupRecursively(statusEvent.getId());
    createInstanceOnDemand(statusEvent.getInstanceId());
  }
}","@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent) throws MonitorNotFoundException {
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    GroupInstance instance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ id+ ""String_Node_Str""+ instanceId);
      }
      ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId);
    }
 else {
      List<String> instanceIds=this.getInstancesByParentInstanceId(instanceId);
      if (!instanceIds.isEmpty()) {
        for (        String instanceId1 : instanceIds) {
          if (log.isInfoEnabled()) {
            log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ id+ ""String_Node_Str""+ instanceId1);
          }
          ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId1);
        }
      }
    }
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
    createInstanceOnDemand(statusEvent.getInstanceId());
  }
}",0.7614561027837259
116073,"/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status status of the group
 */
public void setStatus(GroupStatus status,String instanceId){
  GroupInstance groupInstance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
  if (groupInstance == null) {
    if (status != GroupStatus.Terminated) {
      log.warn(""String_Node_Str"" + instanceId + ""String_Node_Str"");
    }
  }
 else {
    if (groupInstance.getStatus() != status) {
      groupInstance.setStatus(status);
    }
  }
  log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId());
  if (this.isGroupScalingEnabled()) {
    try {
      ApplicationHolder.acquireReadLock();
      Application application=ApplicationHolder.getApplications().getApplication(this.appId);
      if (application != null) {
        Group group=application.getGroupRecursively(this.id);
        if (group != null) {
          GroupInstance context=group.getInstanceContexts(instanceId);
          MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,context.getParentId());
        }
      }
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
  }
 else {
    MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,instanceId);
  }
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,this.id,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + this.id,e);
  }
}","/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status status of the group
 */
public void setStatus(GroupStatus status,String instanceId,String parentInstanceId){
  GroupInstance groupInstance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
  if (groupInstance == null) {
    if (status != GroupStatus.Terminated) {
      log.warn(""String_Node_Str"" + instanceId + ""String_Node_Str"");
    }
  }
 else {
    if (groupInstance.getStatus() != status) {
      groupInstance.setStatus(status);
    }
  }
  if (this.isGroupScalingEnabled()) {
    try {
      ApplicationHolder.acquireReadLock();
      Application application=ApplicationHolder.getApplications().getApplication(this.appId);
      if (application != null) {
        Group group=application.getGroupRecursively(this.id);
        if (group != null) {
          GroupInstance context=group.getInstanceContexts(instanceId);
          log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId()+ ""String_Node_Str""+ context.getParentId());
          MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,parentInstanceId);
        }
      }
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId()+ ""String_Node_Str""+ instanceId);
    MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,instanceId);
  }
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,this.id,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + this.id,e);
  }
}",0.6989447548106766
116074,"@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String childId=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == GroupStatus.Active) {
    boolean isChildActive=verifyGroupStatus(instanceId,GroupStatus.Active);
    if (isChildActive) {
      onChildActivatedEvent(childId,instanceId);
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
 else   if (status1 == ClusterStatus.Active) {
    onChildActivatedEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    markInstanceAsInactive(childId,instanceId);
    onChildInactiveEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    markInstanceAsTerminating(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (status1 == GroupStatus.Terminated) {
      boolean childTerminated=verifyGroupStatus(instanceId,(GroupStatus)status1);
      if (childTerminated) {
        onTerminationOfInstance(childId,instanceId);
      }
 else {
        log.info(""String_Node_Str"");
      }
    }
 else {
      onTerminationOfInstance(childId,instanceId);
    }
  }
}","@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String childId=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == GroupStatus.Active) {
    boolean isChildActive=verifyGroupStatus(childId,instanceId,GroupStatus.Active);
    if (isChildActive) {
      onChildActivatedEvent(childId,instanceId);
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
 else   if (status1 == ClusterStatus.Active) {
    onChildActivatedEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    markInstanceAsInactive(childId,instanceId);
    onChildInactiveEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    markInstanceAsTerminating(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (status1 == GroupStatus.Terminated) {
      onTerminationOfInstance(childId,instanceId);
    }
 else {
      onTerminationOfInstance(childId,instanceId);
    }
  }
}",0.9263157894736842
116075,"public boolean verifyGroupStatus(String instanceId,GroupStatus requiredStatus){
  if (this.instanceIdToInstanceMap.containsKey(instanceId)) {
    if (((GroupInstance)this.instanceIdToInstanceMap.get(instanceId)).getStatus() == requiredStatus) {
      return true;
    }
  }
 else {
    List<GroupInstance> instances=new ArrayList<GroupInstance>();
    String networkPartitionId=null;
    int noOfInstancesOfRequiredStatus=0;
    for (    Instance instance : this.instanceIdToInstanceMap.values()) {
      GroupInstance groupInstance=(GroupInstance)instance;
      if (groupInstance.getParentId().equals(instanceId)) {
        instances.add(groupInstance);
        networkPartitionId=groupInstance.getNetworkPartitionId();
        if (groupInstance.getStatus() == requiredStatus) {
          noOfInstancesOfRequiredStatus++;
        }
      }
    }
    if (!instances.isEmpty()) {
      int minInstances=this.networkPartitionCtxts.get(networkPartitionId).getMinInstanceCount();
      if (noOfInstancesOfRequiredStatus == this.inactiveInstancesMap.size() && requiredStatus == GroupStatus.Terminated) {
        return true;
      }
 else       if (noOfInstancesOfRequiredStatus >= minInstances) {
        return true;
      }
 else {
        if (requiredStatus == GroupStatus.Inactive && noOfInstancesOfRequiredStatus >= 1) {
          return true;
        }
      }
    }
  }
  return false;
}","public boolean verifyGroupStatus(String childId,String instanceId,GroupStatus requiredStatus){
  Monitor monitor=this.getMonitor(childId);
  List<String> groupInstances;
  GroupInstance groupInstance=(GroupInstance)monitor.getInstance(instanceId);
  if (groupInstance == null) {
    groupInstances=monitor.getInstancesByParentInstanceId(instanceId);
  }
 else {
    if (groupInstance.getStatus() == requiredStatus) {
      return true;
    }
 else {
      return false;
    }
  }
  String networkPartitionId=null;
  int noOfInstancesOfRequiredStatus=0;
  for (  String childInstanceId : groupInstances) {
    GroupInstance childGroupInstance=(GroupInstance)monitor.getInstance(childInstanceId);
    networkPartitionId=childGroupInstance.getNetworkPartitionId();
    if (childGroupInstance.getStatus() == requiredStatus) {
      noOfInstancesOfRequiredStatus++;
    }
  }
  if (!groupInstances.isEmpty()) {
    int minInstances=this.networkPartitionCtxts.get(networkPartitionId).getMinInstanceCount();
    if (noOfInstancesOfRequiredStatus == this.inactiveInstancesMap.size() && requiredStatus == GroupStatus.Terminated) {
      return true;
    }
 else     if (noOfInstancesOfRequiredStatus >= minInstances) {
      return true;
    }
 else {
      if (requiredStatus == GroupStatus.Inactive && noOfInstancesOfRequiredStatus >= 1) {
        return true;
      }
    }
  }
  return false;
}",0.641726618705036
116076,"/** 
 * Creates the group instance and adds the required context objects
 * @param group                             the group
 * @param parentInstanceContext             the parent instance context
 * @param partitionContext
 * @param groupLevelNetworkPartitionContext the group level network partition context
 */
private String createGroupInstanceAndAddToMonitor(Group group,Instance parentInstanceContext,PartitionContext partitionContext,GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext,GroupInstance groupInstance){
  String partitionId;
  if (groupInstance == null) {
    partitionId=partitionContext.getPartitionId();
    groupInstance=createGroupInstance(group,parentInstanceContext.getNetworkPartitionId(),parentInstanceContext.getInstanceId(),partitionId);
  }
  this.addInstance(groupInstance);
  String instanceId=groupInstance.getInstanceId();
  GroupInstanceContext groupInstanceContext=new GroupInstanceContext(instanceId);
  groupInstanceContext.setParentInstanceId(groupInstance.getParentId());
  groupInstanceContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
  groupLevelNetworkPartitionContext.addInstanceContext(groupInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + instanceId + ""String_Node_Str""+ this.id);
  }
  if (partitionContext != null) {
    ((GroupLevelPartitionContext)partitionContext).addActiveInstance(groupInstance);
  }
  return instanceId;
}","/** 
 * Creates the group instance and adds the required context objects
 * @param group                             the group
 * @param parentInstanceContext             the parent instance context
 * @param partitionContext
 * @param groupLevelNetworkPartitionContext the group level network partition context
 */
private String createGroupInstanceAndAddToMonitor(Group group,Instance parentInstanceContext,PartitionContext partitionContext,GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext,GroupInstance groupInstance){
  String partitionId=null;
  if (groupInstance == null) {
    if (partitionContext != null) {
      partitionId=partitionContext.getPartitionId();
    }
    groupInstance=createGroupInstance(group,parentInstanceContext.getNetworkPartitionId(),parentInstanceContext.getInstanceId(),partitionId);
  }
  this.addInstance(groupInstance);
  String instanceId=groupInstance.getInstanceId();
  GroupInstanceContext groupInstanceContext=new GroupInstanceContext(instanceId);
  groupInstanceContext.setParentInstanceId(groupInstance.getParentId());
  groupInstanceContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
  groupLevelNetworkPartitionContext.addInstanceContext(groupInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + instanceId + ""String_Node_Str""+ this.id);
  }
  if (partitionContext != null) {
    ((GroupLevelPartitionContext)partitionContext).addActiveInstance(groupInstance);
  }
  return instanceId;
}",0.9759729272419628
116077,"private PartitionContext getPartitionContext(GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext,String parentPartitionId){
  PartitionContext partitionContext;
  List<GroupLevelPartitionContext> partitionContexts=groupLevelNetworkPartitionContext.getPartitionCtxts();
  GroupLevelPartitionContext[] groupLevelPartitionContexts=new GroupLevelPartitionContext[partitionContexts.size()];
  if (parentPartitionId == null) {
    AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
    partitionContext=algorithm.getNextScaleUpPartitionContext((partitionContexts.toArray(groupLevelPartitionContexts)));
  }
 else {
    partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
  }
  return partitionContext;
}","private PartitionContext getPartitionContext(GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext,String parentPartitionId){
  PartitionContext partitionContext=null;
  List<GroupLevelPartitionContext> partitionContexts=groupLevelNetworkPartitionContext.getPartitionCtxts();
  GroupLevelPartitionContext[] groupLevelPartitionContexts=new GroupLevelPartitionContext[partitionContexts.size()];
  if (parentPartitionId == null) {
    if (!partitionContexts.isEmpty()) {
      AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
      partitionContext=algorithm.getNextScaleUpPartitionContext((partitionContexts.toArray(groupLevelPartitionContexts)));
    }
  }
 else {
    partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
  }
  return partitionContext;
}",0.967589864466706
116078,"/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=group.getGroupMinInstances();
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(instance.getPartitionId());
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,(GroupInstance)instance);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        partitionContext=getPartitionContext(groupLevelNetworkPartitionContext,parentPartitionId);
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + group.getUniqueIdentifier());
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}","/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=group.getGroupMinInstances();
    groupLevelNetworkPartitionContext.setMinInstanceCount(groupMin);
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(instance.getPartitionId());
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,(GroupInstance)instance);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        partitionContext=getPartitionContext(groupLevelNetworkPartitionContext,parentPartitionId);
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + group.getUniqueIdentifier());
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}",0.9847513812154696
116079,"private boolean allParentActive(List<ApplicationChildContext> parentContexts,String instanceId){
  boolean parentsActive=false;
  for (  ApplicationChildContext context1 : parentContexts) {
    if (this.inactiveInstancesMap.containsKey(context1.getId()) && this.inactiveInstancesMap.get(context1.getId()).contains(instanceId) || this.terminatingInstancesMap.containsKey(context1.getId()) && this.terminatingInstancesMap.get(context1.getId()).contains(instanceId)) {
      parentsActive=false;
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      return parentsActive;
    }
 else     if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      Monitor monitor=this.aliasToActiveMonitorsMap.get(context1.getId());
      if (monitor instanceof GroupMonitor) {
        GroupMonitor monitor1=(GroupMonitor)monitor;
        try {
          ApplicationHolder.acquireReadLock();
          if (monitor1.verifyGroupStatus(instanceId,GroupStatus.Active)) {
            parentsActive=true;
          }
        }
  finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 else       if (monitor instanceof AbstractClusterMonitor) {
        AbstractClusterMonitor monitor1=(AbstractClusterMonitor)monitor;
        TopologyManager.acquireReadLockForCluster(monitor1.getServiceId(),monitor1.getClusterId());
        try {
          if (((ClusterInstance)monitor1.getInstance(instanceId)).getStatus() == ClusterStatus.Active) {
            parentsActive=true;
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(monitor1.getServiceId(),monitor1.getClusterId());
        }
      }
    }
  }
  return parentsActive;
}","private boolean allParentActive(List<ApplicationChildContext> parentContexts,String instanceId){
  boolean parentsActive=false;
  for (  ApplicationChildContext context1 : parentContexts) {
    if (this.inactiveInstancesMap.containsKey(context1.getId()) && this.inactiveInstancesMap.get(context1.getId()).contains(instanceId) || this.terminatingInstancesMap.containsKey(context1.getId()) && this.terminatingInstancesMap.get(context1.getId()).contains(instanceId)) {
      parentsActive=false;
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      return parentsActive;
    }
 else     if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      Monitor monitor=this.aliasToActiveMonitorsMap.get(context1.getId());
      if (monitor instanceof GroupMonitor) {
        GroupMonitor monitor1=(GroupMonitor)monitor;
        try {
          ApplicationHolder.acquireReadLock();
          if (monitor1.verifyGroupStatus(context1.getId(),instanceId,GroupStatus.Active)) {
            parentsActive=true;
          }
        }
  finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 else       if (monitor instanceof AbstractClusterMonitor) {
        AbstractClusterMonitor monitor1=(AbstractClusterMonitor)monitor;
        TopologyManager.acquireReadLockForCluster(monitor1.getServiceId(),monitor1.getClusterId());
        try {
          if (((ClusterInstance)monitor1.getInstance(instanceId)).getStatus() == ClusterStatus.Active) {
            parentsActive=true;
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(monitor1.getServiceId(),monitor1.getClusterId());
        }
      }
    }
  }
  return parentsActive;
}",0.9950014701558364
116080,"private ServiceGroup populateServiceGroupPojo(ServiceGroupDefinition serviceGroupDefinition) throws ServiceGroupDefinitioException {
  ServiceGroup servicegroup=new ServiceGroup();
  servicegroup.setGroupscalingEnabled(serviceGroupDefinition.isGroupScalingEnabled());
  List<ServiceGroupDefinition> groupsDef=serviceGroupDefinition.getGroups();
  List<String> cartridgesDef=serviceGroupDefinition.getCartridges();
  servicegroup.setName(serviceGroupDefinition.getName());
  if (groupsDef == null) {
    groupsDef=new ArrayList<ServiceGroupDefinition>(0);
  }
  if (cartridgesDef == null) {
    cartridgesDef=new ArrayList<String>(0);
  }
  ServiceGroup[] subGroups=new ServiceGroup[groupsDef.size()];
  String[] cartridges=new String[cartridgesDef.size()];
  int i=0;
  for (  ServiceGroupDefinition groupDefinition : groupsDef) {
    subGroups[i]=populateServiceGroupPojo(groupDefinition);
    ++i;
  }
  servicegroup.setGroups(subGroups);
  cartridges=cartridgesDef.toArray(cartridges);
  servicegroup.setCartridges(cartridges);
  DependencyDefinitions depDefs=serviceGroupDefinition.getDependencies();
  if (depDefs != null) {
    Dependencies deps=new Dependencies();
    List<String> startupOrdersDef=depDefs.getStartupOrders();
    if (startupOrdersDef != null) {
      String[] startupOrders=new String[startupOrdersDef.size()];
      startupOrders=startupOrdersDef.toArray(startupOrders);
      deps.setStartupOrders(startupOrders);
    }
    validateTerminationBehavior(depDefs.getTerminationBehaviour());
    deps.setTerminationBehaviour(depDefs.getTerminationBehaviour());
    if (depDefs.getScalingDependants() != null) {
      deps.setScalingDependants(depDefs.getScalingDependants().toArray(new String[depDefs.getScalingDependants().size()]));
    }
    servicegroup.setDependencies(deps);
  }
  return servicegroup;
}","private ServiceGroup populateServiceGroupPojo(ServiceGroupDefinition serviceGroupDefinition) throws ServiceGroupDefinitioException {
  ServiceGroup servicegroup=new ServiceGroup();
  servicegroup.setGroupscalingEnabled(serviceGroupDefinition.isGroupScalingEnabled);
  List<ServiceGroupDefinition> groupsDef=serviceGroupDefinition.getGroups();
  List<String> cartridgesDef=serviceGroupDefinition.getCartridges();
  servicegroup.setName(serviceGroupDefinition.getName());
  if (groupsDef == null) {
    groupsDef=new ArrayList<ServiceGroupDefinition>(0);
  }
  if (cartridgesDef == null) {
    cartridgesDef=new ArrayList<String>(0);
  }
  ServiceGroup[] subGroups=new ServiceGroup[groupsDef.size()];
  String[] cartridges=new String[cartridgesDef.size()];
  int i=0;
  for (  ServiceGroupDefinition groupDefinition : groupsDef) {
    subGroups[i]=populateServiceGroupPojo(groupDefinition);
    ++i;
  }
  servicegroup.setGroups(subGroups);
  cartridges=cartridgesDef.toArray(cartridges);
  servicegroup.setCartridges(cartridges);
  DependencyDefinitions depDefs=serviceGroupDefinition.getDependencies();
  if (depDefs != null) {
    Dependencies deps=new Dependencies();
    List<String> startupOrdersDef=depDefs.getStartupOrders();
    if (startupOrdersDef != null) {
      String[] startupOrders=new String[startupOrdersDef.size()];
      startupOrders=startupOrdersDef.toArray(startupOrders);
      deps.setStartupOrders(startupOrders);
    }
    validateTerminationBehavior(depDefs.getTerminationBehaviour());
    deps.setTerminationBehaviour(depDefs.getTerminationBehaviour());
    if (depDefs.getScalingDependants() != null) {
      deps.setScalingDependants(depDefs.getScalingDependants().toArray(new String[depDefs.getScalingDependants().size()]));
    }
    servicegroup.setDependencies(deps);
  }
  return servicegroup;
}",0.9994538503549972
116081,"/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLB if this cluster is an LB
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLB,String[] dependencyAliases,Properties properties) throws ApplicationDefinitionException {
  PayloadData payloadData=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases,properties);
  String oAuth_token=createToken(appId);
  payloadData.add(TOKEN_PAYLOD_PARAM_NAME,oAuth_token);
  String textPayload=payloadData.toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB);
}","/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLB if this cluster is an LB
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLB,String[] dependencyAliases,Properties properties) throws ApplicationDefinitionException {
  PayloadData payloadData=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases,properties);
  String textPayload=payloadData.toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB);
}",0.9676126878130216
116082,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  group.setGroupScalingEnabled(groupCtxt.isGroupScalingEnabled());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convertStartupOrder(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        for (        ServiceGroup nestedServiceGroup : serviceGroup.getGroups()) {
          if (nestedServiceGroup.getName().equals(subGroupCtxt.getName())) {
            Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,nestedServiceGroup);
            nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
          }
        }
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convertStartupOrder(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        for (        ServiceGroup nestedServiceGroup : serviceGroup.getGroups()) {
          if (nestedServiceGroup.getName().equals(subGroupCtxt.getName())) {
            Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,nestedServiceGroup);
            nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
          }
        }
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.9854505971769816
116083,"/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination(String instanceId) throws TopologyInConsistentException, MonitorNotFoundException, PolicyValidationException, PartitionValidationException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependenciesByTermination(this,instanceId);
  for (  ApplicationChildContext context : applicationContexts) {
    if (context instanceof GroupChildContext) {
      GroupMonitor groupMonitor=(GroupMonitor)this.aliasToActiveMonitorsMap.get(context.getId());
    }
 else     if (context instanceof ClusterChildContext) {
    }
  }
}","/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination(String instanceId) throws TopologyInConsistentException, MonitorNotFoundException, PolicyValidationException, PartitionValidationException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependenciesByTermination(this,instanceId);
  for (  ApplicationChildContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (!this.aliasToActiveMonitorsMap.containsKey(context.getId())) {
      String msg=""String_Node_Str"";
      throw new MonitorNotFoundException(msg);
    }
 else {
      Monitor monitor=aliasToActiveMonitorsMap.get(context.getId());
      monitor.createInstanceOnDemand(instanceId);
    }
  }
}",0.7330016583747927
116084,"private boolean allParentTerminated(List<ApplicationChildContext> parentContexts,String instanceId){
  boolean parentsTerminated=false;
  for (  ApplicationChildContext context1 : parentContexts) {
    if (this.inactiveInstancesMap.containsKey(context1.getId()) && this.inactiveInstancesMap.get(context1.getId()).contains(instanceId)) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=false;
      return parentsTerminated;
    }
 else     if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      if (parentsTerminated) {
        log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      }
    }
 else {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=true;
    }
  }
  return parentsTerminated;
}","private boolean allParentTerminated(List<ApplicationChildContext> parentContexts,String instanceId){
  boolean parentsTerminated=false;
  for (  ApplicationChildContext context1 : parentContexts) {
    if (this.inactiveInstancesMap.containsKey(context1.getId()) && this.inactiveInstancesMap.get(context1.getId()).contains(instanceId) || this.terminatingInstancesMap.containsKey(context1.getId()) && this.terminatingInstancesMap.get(context1.getId()).contains(instanceId)) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=false;
      return parentsTerminated;
    }
 else     if (this.aliasToActiveMonitorsMap.get(context1.getId()).getInstance(instanceId) != null) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=true;
    }
  }
  return parentsTerminated;
}",0.6478717523493643
116085,"private boolean allDependentTerminated(List<ApplicationChildContext> terminationList){
  boolean allDependentTerminated=false;
  for (  ApplicationChildContext context1 : terminationList) {
    if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      allDependentTerminated=false;
      return allDependentTerminated;
    }
 else     if (this.inactiveInstancesMap.containsKey(context1.getId())) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      allDependentTerminated=false;
      return allDependentTerminated;
    }
 else {
      allDependentTerminated=true;
    }
  }
  return allDependentTerminated;
}","private boolean allDependentTerminated(List<ApplicationChildContext> terminationList,String instanceId){
  boolean allDependentTerminated=false;
  for (  ApplicationChildContext context1 : terminationList) {
    if (this.inactiveInstancesMap.containsKey(context1.getId()) && this.inactiveInstancesMap.get(context1.getId()).contains(instanceId) || this.terminatingInstancesMap.containsKey(context1.getId()) && this.terminatingInstancesMap.get(context1.getId()).contains(instanceId)) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"");
      allDependentTerminated=false;
      return allDependentTerminated;
    }
 else     if (this.aliasToActiveMonitorsMap.get(context1.getId()).getInstance(instanceId) != null) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"");
    }
 else {
      allDependentTerminated=true;
    }
  }
  return allDependentTerminated;
}",0.693034238488784
116086,"/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  log.info(""String_Node_Str"" + ""String_Node_Str"" + eventId + ""String_Node_Str""+ instanceId);
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      try {
        this.startDependencyOnTermination(instanceId);
      }
 catch (      MonitorNotFoundException e) {
        e.printStackTrace();
      }
catch (      PolicyValidationException e) {
        e.printStackTrace();
      }
catch (      PartitionValidationException e) {
        e.printStackTrace();
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}","/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList,instanceId);
  }
  log.info(""String_Node_Str"" + ""String_Node_Str"" + eventId + ""String_Node_Str""+ instanceId);
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      try {
        this.startDependencyOnTermination(instanceId);
      }
 catch (      MonitorNotFoundException e) {
        e.printStackTrace();
      }
catch (      PolicyValidationException e) {
        e.printStackTrace();
      }
catch (      PartitionValidationException e) {
        e.printStackTrace();
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}",0.9968776610843032
116087,"/** 
 * Find out whether all the clusters of a group are in the same state
 * @param clusterData clusters of the group
 * @param status      the status to check of the group
 * @return whether all groups in the same state or not
 */
protected boolean getAllClusterInSameState(Map<String,ClusterDataHolder> clusterData,ClusterStatus status,String instanceId){
  boolean clusterStat=false;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    String serviceName=clusterDataHolderEntry.getValue().getServiceType();
    String clusterId=clusterDataHolderEntry.getValue().getClusterId();
    TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
    try {
      Service service=TopologyManager.getTopology().getService(serviceName);
      Cluster cluster=service.getCluster(clusterId);
      ClusterInstance context=cluster.getInstanceContexts(instanceId);
      if (context != null) {
        if (context.getStatus() == status) {
          clusterStat=true;
        }
 else {
          clusterStat=false;
        }
      }
 else {
        if (status == ClusterStatus.Terminated) {
          clusterStat=true;
        }
 else {
          clusterStat=false;
          return clusterStat;
        }
      }
    }
  finally {
      TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
    }
  }
  return clusterStat;
}","/** 
 * Find out whether all the clusters of a group are in the same state
 * @param clusterData clusters of the group
 * @param status      the status to check of the group
 * @return whether all groups in the same state or not
 */
protected boolean getAllClusterInSameState(Map<String,ClusterDataHolder> clusterData,ClusterStatus status,String instanceId){
  boolean clusterStat=false;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    String serviceName=clusterDataHolderEntry.getValue().getServiceType();
    String clusterId=clusterDataHolderEntry.getValue().getClusterId();
    TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
    try {
      Service service=TopologyManager.getTopology().getService(serviceName);
      Cluster cluster=service.getCluster(clusterId);
      ClusterInstance context=cluster.getInstanceContexts(instanceId);
      if (context != null) {
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ context.getStatus().toString());
        }
        if (context.getStatus() == status) {
          clusterStat=true;
        }
 else {
          clusterStat=false;
          return clusterStat;
        }
      }
 else {
        if (status == ClusterStatus.Terminated) {
          clusterStat=true;
        }
 else {
          clusterStat=false;
          return clusterStat;
        }
      }
    }
  finally {
      TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
    }
  }
  return clusterStat;
}",0.9394969408565602
116088,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  group.setGroupScalingEnabled(groupCtxt.isGroupScalingEnabled());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,serviceGroup);
        nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  group.setGroupScalingEnabled(groupCtxt.isGroupScalingEnabled());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        for (        ServiceGroup nestedServiceGroup : serviceGroup.getGroups()) {
          if (nestedServiceGroup.getName().equals(subGroupCtxt.getName())) {
            Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,nestedServiceGroup);
            nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
          }
        }
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.9555256064690026
116089,"/** 
 * Find the startup order
 * @param groupContext GroupContext with Group defintion information
 * @return Set of Startup Orders which are defined in the Group
 * @throws ApplicationDefinitionException
 */
private String[] getStartupOrderForGroup(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
}","/** 
 * Find the startup order
 * @param serviceGroup GroupContext with Group defintion information
 * @return Set of Startup Orders which are defined in the Group
 * @throws ApplicationDefinitionException
 */
private String[] getStartupOrderForGroup(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
}",0.9650145772594751
116090,"public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      GroupMonitor monitor=getGroupMonitor(appId,groupId);
      if (monitor != null) {
        if (monitor.hasMonitors()) {
          for (          Monitor monitor1 : monitor.getAliasToActiveMonitorsMap().values()) {
            monitor1.destroy();
          }
        }
        GroupLevelNetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionContext(context.getNetworkPartitionId());
        networkPartitionContext.removeClusterGroupContext(instanceId);
        if (context.getPartitionId() != null) {
          networkPartitionContext.getPartitionCtxt(context.getPartitionId()).removeActiveInstance(context);
        }
        monitor.removeInstance(instanceId);
        group.removeInstance(instanceId);
        monitor.setStatus(status,instanceId);
      }
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      GroupMonitor monitor=getGroupMonitor(appId,groupId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      if (monitor != null) {
        if (monitor.hasMonitors() && applicationMonitor.isTerminating()) {
          for (          Monitor monitor1 : monitor.getAliasToActiveMonitorsMap().values()) {
            monitor1.destroy();
          }
        }
        GroupLevelNetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionContext(context.getNetworkPartitionId());
        networkPartitionContext.removeClusterGroupContext(instanceId);
        if (context.getPartitionId() != null) {
          networkPartitionContext.getPartitionCtxt(context.getPartitionId()).removeActiveInstance(context);
        }
        monitor.removeInstance(instanceId);
        group.removeInstance(instanceId);
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
        monitor.setStatus(status,instanceId);
      }
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.940805434255216
116091,"public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (instance.getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
            }
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            boolean averageRequestServedPerInstanceReset=instanceContext.isAverageRequestServedPerInstanceReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              log.info(""String_Node_Str"");
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",averageRequestServedPerInstanceReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
      for (      final ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}","public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (instance.getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
            }
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId() + ""String_Node_Str"" + clusterId));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            boolean averageRequestServedPerInstanceReset=instanceContext.isAverageRequestServedPerInstanceReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              log.info(""String_Node_Str"");
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",averageRequestServedPerInstanceReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
      for (      final ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}",0.9969765684051398
116092,"/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      try {
        this.startDependencyOnTermination(instanceId);
      }
 catch (      MonitorNotFoundException e) {
        e.printStackTrace();
      }
catch (      PolicyValidationException e) {
        e.printStackTrace();
      }
catch (      PartitionValidationException e) {
        e.printStackTrace();
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}","/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  log.info(""String_Node_Str"" + ""String_Node_Str"" + eventId + ""String_Node_Str""+ instanceId);
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      try {
        this.startDependencyOnTermination(instanceId);
      }
 catch (      MonitorNotFoundException e) {
        e.printStackTrace();
      }
catch (      PolicyValidationException e) {
        e.printStackTrace();
      }
catch (      PartitionValidationException e) {
        e.printStackTrace();
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}",0.9727990640538168
116093,"private ServiceGroup populateServiceGroupPojo(ServiceGroupDefinition serviceGroupDefinition) throws ServiceGroupDefinitioException {
  ServiceGroup servicegroup=new ServiceGroup();
  servicegroup.setGroupscalingEnabled(serviceGroupDefinition.isGroupScalingEnabled());
  List<ServiceGroupDefinition> groupsDef=serviceGroupDefinition.getGroups();
  List<String> cartridgesDef=serviceGroupDefinition.getCartridges();
  servicegroup.setName(serviceGroupDefinition.getName());
  if (groupsDef == null) {
    groupsDef=new ArrayList<ServiceGroupDefinition>(0);
  }
  if (cartridgesDef == null) {
    cartridgesDef=new ArrayList<String>(0);
  }
  ServiceGroup[] subGroups=new ServiceGroup[groupsDef.size()];
  String[] cartridges=new String[cartridgesDef.size()];
  for (  ServiceGroupDefinition groupDefinition : groupsDef) {
    int i=0;
    subGroups[i]=populateServiceGroupPojo(groupDefinition);
    ++i;
  }
  servicegroup.setGroups(subGroups);
  cartridges=cartridgesDef.toArray(cartridges);
  servicegroup.setCartridges(cartridges);
  DependencyDefinitions depDefs=serviceGroupDefinition.getDependencies();
  if (depDefs != null) {
    Dependencies deps=new Dependencies();
    List<String> startupOrdersDef=depDefs.getStartupOrders();
    if (startupOrdersDef != null) {
      String[] startupOrders=new String[startupOrdersDef.size()];
      startupOrders=startupOrdersDef.toArray(startupOrders);
      deps.setStartupOrders(startupOrders);
    }
    validateTerminationBehavior(depDefs.getTerminationBehaviour());
    deps.setTerminationBehaviour(depDefs.getTerminationBehaviour());
    if (depDefs.getScalingDependants() != null) {
      deps.setScalingDependants(depDefs.getScalingDependants().toArray(new String[depDefs.getScalingDependants().size()]));
    }
    servicegroup.setDependencies(deps);
  }
  return servicegroup;
}","private ServiceGroup populateServiceGroupPojo(ServiceGroupDefinition serviceGroupDefinition) throws ServiceGroupDefinitioException {
  ServiceGroup servicegroup=new ServiceGroup();
  servicegroup.setGroupscalingEnabled(serviceGroupDefinition.isGroupScalingEnabled());
  List<ServiceGroupDefinition> groupsDef=serviceGroupDefinition.getGroups();
  List<String> cartridgesDef=serviceGroupDefinition.getCartridges();
  servicegroup.setName(serviceGroupDefinition.getName());
  if (groupsDef == null) {
    groupsDef=new ArrayList<ServiceGroupDefinition>(0);
  }
  if (cartridgesDef == null) {
    cartridgesDef=new ArrayList<String>(0);
  }
  ServiceGroup[] subGroups=new ServiceGroup[groupsDef.size()];
  String[] cartridges=new String[cartridgesDef.size()];
  int i=0;
  for (  ServiceGroupDefinition groupDefinition : groupsDef) {
    subGroups[i]=populateServiceGroupPojo(groupDefinition);
    ++i;
  }
  servicegroup.setGroups(subGroups);
  cartridges=cartridgesDef.toArray(cartridges);
  servicegroup.setCartridges(cartridges);
  DependencyDefinitions depDefs=serviceGroupDefinition.getDependencies();
  if (depDefs != null) {
    Dependencies deps=new Dependencies();
    List<String> startupOrdersDef=depDefs.getStartupOrders();
    if (startupOrdersDef != null) {
      String[] startupOrders=new String[startupOrdersDef.size()];
      startupOrders=startupOrdersDef.toArray(startupOrders);
      deps.setStartupOrders(startupOrders);
    }
    validateTerminationBehavior(depDefs.getTerminationBehaviour());
    deps.setTerminationBehaviour(depDefs.getTerminationBehaviour());
    if (depDefs.getScalingDependants() != null) {
      deps.setScalingDependants(depDefs.getScalingDependants().toArray(new String[depDefs.getScalingDependants().size()]));
    }
    servicegroup.setDependencies(deps);
  }
  return servicegroup;
}",0.9934533551554828
116094,"private static void addClustersToApplicationBean(ApplicationBean applicationBean,Application application){
  Map<String,ClusterDataHolder> topLevelClusterDataMap=application.getClusterDataMap();
  for (  Map.Entry<String,ClusterDataHolder> entry : topLevelClusterDataMap.entrySet()) {
    ClusterDataHolder clusterDataHolder=entry.getValue();
    String clusterId=clusterDataHolder.getClusterId();
    String serviceType=clusterDataHolder.getServiceType();
    TopologyManager.acquireReadLockForCluster(serviceType,clusterId);
    Cluster topLevelCluster;
    try {
      TopologyManager.acquireReadLockForCluster(serviceType,clusterId);
      topLevelCluster=TopologyManager.getTopology().getService(serviceType).getCluster(clusterId);
    }
  finally {
      TopologyManager.releaseReadLockForCluster(serviceType,clusterId);
    }
    applicationBean.clusters.add(PojoConverter.populateClusterPojos(topLevelCluster,entry.getKey()));
  }
}","private static void addClustersToApplicationBean(ApplicationBean applicationBean,Application application){
  Map<String,ClusterDataHolder> topLevelClusterDataMap=application.getClusterDataMap();
  for (  Map.Entry<String,ClusterDataHolder> entry : topLevelClusterDataMap.entrySet()) {
    ClusterDataHolder clusterDataHolder=entry.getValue();
    String clusterId=clusterDataHolder.getClusterId();
    String serviceType=clusterDataHolder.getServiceType();
    TopologyManager.acquireReadLockForCluster(serviceType,clusterId);
    Cluster topLevelCluster=TopologyManager.getTopology().getService(serviceType).getCluster(clusterId);
    applicationBean.clusters.add(PojoConverter.populateClusterPojos(topLevelCluster,entry.getKey()));
  }
}",0.7611673615247171
116095,"public NodeMetadata createInstance(ClusterContext clusterContext,MemberContext memberContext){
synchronized (MockIaasService.class) {
    MockMemberContext mockMemberContext=new MockMemberContext(clusterContext.getCartridgeType(),clusterContext.getClusterId(),memberContext.getMemberId(),memberContext.getNetworkPartitionId(),memberContext.getPartition().getId(),memberContext.getInstanceId());
    MockMember mockMember=new MockMember(mockMemberContext);
    membersMap.put(mockMember.getMockMemberContext().getMemberId(),mockMember);
    mockMemberExecutorService.submit(mockMember);
    MockNodeMetadata nodeMetadata=new MockNodeMetadata();
    nodeMetadata.setId(UUID.randomUUID().toString());
    persistInRegistry();
    if (!MockHealthStatisticsGenerator.isScheduled()) {
      MockHealthStatisticsGenerator.scheduleStatisticsUpdaters();
    }
    return nodeMetadata;
  }
}","public NodeMetadata createInstance(ClusterContext clusterContext,MemberContext memberContext){
synchronized (MockIaasService.class) {
    MockMemberContext mockMemberContext=new MockMemberContext(clusterContext.getCartridgeType(),clusterContext.getClusterId(),memberContext.getMemberId(),memberContext.getNetworkPartitionId(),memberContext.getPartition().getId(),memberContext.getInstanceId());
    MockMember mockMember=new MockMember(mockMemberContext);
    membersMap.put(mockMember.getMockMemberContext().getMemberId(),mockMember);
    mockMemberExecutorService.submit(mockMember);
    MockNodeMetadata nodeMetadata=new MockNodeMetadata();
    nodeMetadata.setId(UUID.randomUUID().toString());
    persistInRegistry();
    if (!MockHealthStatisticsGenerator.getInstance().isScheduled()) {
      MockHealthStatisticsGenerator.getInstance().scheduleStatisticsUpdaters();
    }
    return nodeMetadata;
  }
}",0.9843575418994414
116096,"public void terminateInstance(MemberContext memberContext) throws InvalidCartridgeTypeException, InvalidMemberException {
synchronized (MockIaasService.class) {
    MockMember mockMember=membersMap.get(memberContext.getMemberId());
    if (mockMember != null) {
      mockMember.terminate();
      membersMap.remove(memberContext.getMemberId());
    }
    if (membersMap.size() == 0) {
      MockHealthStatisticsGenerator.stopStatisticsUpdaters();
    }
  }
}","public void terminateInstance(MemberContext memberContext) throws InvalidCartridgeTypeException, InvalidMemberException {
synchronized (MockIaasService.class) {
    MockMember mockMember=membersMap.get(memberContext.getMemberId());
    if (mockMember != null) {
      mockMember.terminate();
      membersMap.remove(memberContext.getMemberId());
    }
    if (membersMap.size() == 0) {
      MockHealthStatisticsGenerator.getInstance().stopStatisticsUpdaters();
    }
  }
}",0.9849785407725322
116097,"public static boolean isScheduled(){
  return scheduled;
}","public boolean isScheduled(){
  return scheduled;
}",0.9357798165137616
116098,"public static void scheduleStatisticsUpdaters(){
  if (!scheduled) {
synchronized (MockHealthStatisticsGenerator.class) {
      if (!scheduled) {
        List<MockHealthStatisticsPattern> statisticsPatterns=MockIaasConfig.getInstance().getMockHealthStatisticsConfig().getStatisticsPatterns();
        for (        MockHealthStatisticsPattern statisticsPattern : statisticsPatterns) {
          scheduledExecutorService.scheduleAtFixedRate(new MockHealthStatisticsUpdater(statisticsPattern),0,statisticsPattern.getSampleDuration(),TimeUnit.SECONDS);
        }
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"");
        }
        scheduled=true;
      }
    }
  }
}","public void scheduleStatisticsUpdaters(){
  if (!scheduled) {
synchronized (MockHealthStatisticsGenerator.class) {
      if (!scheduled) {
        List<MockHealthStatisticsPattern> statisticsPatterns=MockIaasConfig.getInstance().getMockHealthStatisticsConfig().getStatisticsPatterns();
        for (        MockHealthStatisticsPattern statisticsPattern : statisticsPatterns) {
          scheduledExecutorService.scheduleAtFixedRate(new MockHealthStatisticsUpdater(statisticsPattern),0,statisticsPattern.getSampleDuration(),TimeUnit.SECONDS);
        }
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"");
        }
        scheduled=true;
      }
    }
  }
}",0.9948717948717948
116099,"public static void stopStatisticsUpdaters(){
synchronized (MockHealthStatisticsGenerator.class) {
    scheduledExecutorService.shutdownNow();
  }
}","public void stopStatisticsUpdaters(){
synchronized (MockHealthStatisticsGenerator.class) {
    scheduledExecutorService.shutdownNow();
  }
}",0.975609756097561
116100,"@Override public void run(){
  try {
    MockHealthStatistics.getInstance().acquireWriteLock(statisticsPattern.getCartridgeType());
    int nextSample=statisticsPattern.getNextSample();
    MockHealthStatistics.getInstance().addStatistics(statisticsPattern.getCartridgeType(),statisticsPattern.getFactor(),nextSample);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",statisticsPattern.getCartridgeType(),statisticsPattern.getFactor().toString(),nextSample));
    }
  }
  finally {
    MockHealthStatistics.getInstance().releaseWriteLock(statisticsPattern.getCartridgeType());
  }
}","@Override public void run(){
  try {
    MockHealthStatistics.getInstance().acquireWriteLock(statisticsPattern.getCartridgeType());
    int nextSample=statisticsPattern.getNextSample();
    MockHealthStatistics.getInstance().addStatistics(statisticsPattern.getCartridgeType(),statisticsPattern.getFactor(),nextSample);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",statisticsPattern.getCartridgeType(),statisticsPattern.getFactor().toString(),nextSample));
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    MockHealthStatistics.getInstance().releaseWriteLock(statisticsPattern.getCartridgeType());
  }
}",0.9502332814930016
116101,"protected void activate(ComponentContext context){
  try {
    executorService=StratosThreadPool.getExecutorService(DEFAULT_IDENTIFIER,THREAD_POOL_SIZE);
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (CloudControllerContext.getInstance().isClustered()) {
      Thread coordinatorElectorThread=new Thread(){
        @Override public void run(){
          ServiceReferenceHolder.getInstance().getHazelcastInstance().getLock(CLOUD_CONTROLLER_COORDINATOR_LOCK).lock();
          log.info(""String_Node_Str"" + ServiceReferenceHolder.getInstance().getHazelcastInstance().getCluster().getLocalMember().getUuid() + ""String_Node_Str""+ ""String_Node_Str"");
          CloudControllerContext.getInstance().setCoordinator(true);
          executeCoordinatorTasks();
        }
      }
;
      coordinatorElectorThread.setName(""String_Node_Str"");
      executorService.submit(coordinatorElectorThread);
    }
 else {
      executeCoordinatorTasks();
    }
    if (MockIaasConfig.getInstance().isEnabled()) {
      MockIaasService.startMockMembersIfPresentInRegistry();
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}","protected void activate(ComponentContext context){
  try {
    executorService=StratosThreadPool.getExecutorService(DEFAULT_IDENTIFIER,THREAD_POOL_SIZE);
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (CloudControllerContext.getInstance().isClustered()) {
      Thread coordinatorElectorThread=new Thread(){
        @Override public void run(){
          ServiceReferenceHolder.getInstance().getHazelcastInstance().getLock(CLOUD_CONTROLLER_COORDINATOR_LOCK).lock();
          log.info(""String_Node_Str"" + ServiceReferenceHolder.getInstance().getHazelcastInstance().getCluster().getLocalMember().getUuid() + ""String_Node_Str""+ ""String_Node_Str"");
          CloudControllerContext.getInstance().setCoordinator(true);
          executeCoordinatorTasks();
        }
      }
;
      coordinatorElectorThread.setName(""String_Node_Str"");
      executorService.submit(coordinatorElectorThread);
    }
 else {
      executeCoordinatorTasks();
    }
    if (MockIaasConfig.getInstance().isEnabled()) {
      MockIaasService.getInstance().startMockMembers();
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9868995633187772
116102,"@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent){
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ this.getClusterId());
    }
    ClusterStatusEventPublisher.sendClusterTerminatingEvent(getAppId(),getServiceId(),getClusterId(),instanceId);
  }
 else   if (statusEvent.getStatus() == GroupStatus.Created || statusEvent.getStatus() == ApplicationStatus.Created) {
    try {
      createClusterInstanceOnScaleUp(instanceId);
    }
 catch (    PolicyValidationException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    PartitionValidationException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent){
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ this.getClusterId());
    }
    ClusterStatusEventPublisher.sendClusterTerminatingEvent(getAppId(),getServiceId(),getClusterId(),instanceId);
  }
}",0.7267267267267268
116103,"/** 
 * Find the group monitor by traversing recursively in the hierarchical monitors.
 * @param groupId the unique alias of the Group
 * @return the found GroupMonitor
 */
public Monitor findGroupMonitorWithId(String groupId){
  return findGroupMonitor(groupId,aliasToActiveMonitorsMap.values());
}","/** 
 * Find the group monitor by traversing recursively in the hierarchical monitors.
 * @param groupId the unique alias of the Group
 * @return the found GroupMonitor
 */
public Monitor findGroupMonitorWithId(String groupId){
  return findGroupMonitor(groupId,aliasToActiveMonitorsMap);
}",0.9847198641765704
116104,"/** 
 * Utility method to find the group monitor recursively within app monitor
 * @param id       the unique alias of the Group
 * @param monitors the group monitors found in the app monitor
 * @return the found GroupMonitor
 */
private Monitor findGroupMonitor(String id,Collection<Monitor> monitors){
  for (  Monitor monitor : monitors) {
    if (monitor.getId().equals(id)) {
      return monitor;
    }
 else {
      if (monitor instanceof ParentComponentMonitor) {
        return findGroupMonitor(id,((ParentComponentMonitor)monitor).getAliasToActiveMonitorsMap().values());
      }
    }
  }
  return null;
}","/** 
 * Utility method to find the group monitor recursively within app monitor
 * @param id       the unique alias of the Group
 * @param monitors the group monitors found in the app monitor
 * @return the found GroupMonitor
 */
private Monitor findGroupMonitor(String id,Map<String,Monitor> monitors){
  if (monitors.containsKey(id)) {
    return monitors.get(id);
  }
  for (  Monitor monitor : monitors.values()) {
    if (monitor instanceof ParentComponentMonitor) {
      Monitor monitor1=findGroupMonitor(id,((ParentComponentMonitor)monitor).getAliasToActiveMonitorsMap());
      if (monitor1 != null) {
        return monitor1;
      }
    }
  }
  return null;
}",0.6547433903576982
116105,"@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent) throws MonitorNotFoundException {
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    GroupInstance instance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId);
    }
 else {
      List<String> instanceIds=this.getInstancesByParentInstanceId(instanceId);
      if (!instanceIds.isEmpty()) {
        for (        String instanceId1 : instanceIds) {
          ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId1);
        }
      }
    }
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
    Application application=ApplicationHolder.getApplications().getApplication(this.appId);
    Group group=application.getGroupRecursively(statusEvent.getId());
    createInstanceAndStartDependencyOnScaleup(statusEvent.getInstanceId());
  }
}","@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent) throws MonitorNotFoundException {
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    GroupInstance instance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId);
    }
 else {
      List<String> instanceIds=this.getInstancesByParentInstanceId(instanceId);
      if (!instanceIds.isEmpty()) {
        for (        String instanceId1 : instanceIds) {
          ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId1);
        }
      }
    }
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
    Application application=ApplicationHolder.getApplications().getApplication(this.appId);
    Group group=application.getGroupRecursively(statusEvent.getId());
    createInstanceOnDemand(statusEvent.getInstanceId());
  }
}",0.9860423232778028
116106,"/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=group.getGroupMinInstances();
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(instance.getPartitionId());
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,(GroupInstance)instance);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        List<GroupLevelPartitionContext> partitionContexts=groupLevelNetworkPartitionContext.getPartitionCtxts();
        GroupLevelPartitionContext[] groupLevelPartitionContexts=new GroupLevelPartitionContext[partitionContexts.size()];
        if (parentPartitionId == null) {
          AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
          partitionContext=algorithm.getNextScaleUpPartitionContext((partitionContexts.toArray(groupLevelPartitionContexts)));
        }
 else {
          partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
        }
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + group.getUniqueIdentifier());
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}","/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=group.getGroupMinInstances();
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(instance.getPartitionId());
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,(GroupInstance)instance);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        partitionContext=getPartitionContext(groupLevelNetworkPartitionContext,parentPartitionId);
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + group.getUniqueIdentifier());
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}",0.8404700258912567
116107,"/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination(String instanceId) throws TopologyInConsistentException, MonitorNotFoundException, PolicyValidationException, PartitionValidationException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependenciesByTermination(this,instanceId);
  for (  ApplicationChildContext context : applicationContexts) {
    if (context instanceof GroupChildContext) {
      GroupMonitor groupMonitor=(GroupMonitor)this.aliasToActiveMonitorsMap.get(context.getId());
      groupMonitor.createInstanceAndStartDependencyOnScaleup(instanceId);
    }
 else     if (context instanceof ClusterChildContext) {
      VMClusterMonitor clusterMonitor=(VMClusterMonitor)this.aliasToActiveMonitorsMap.get(context.getId());
      clusterMonitor.createClusterInstanceOnScaleUp(instanceId);
    }
  }
}","/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination(String instanceId) throws TopologyInConsistentException, MonitorNotFoundException, PolicyValidationException, PartitionValidationException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependenciesByTermination(this,instanceId);
  for (  ApplicationChildContext context : applicationContexts) {
    if (context instanceof GroupChildContext) {
      GroupMonitor groupMonitor=(GroupMonitor)this.aliasToActiveMonitorsMap.get(context.getId());
      groupMonitor.createInstanceOnDemand(instanceId);
    }
 else     if (context instanceof ClusterChildContext) {
      VMClusterMonitor clusterMonitor=(VMClusterMonitor)this.aliasToActiveMonitorsMap.get(context.getId());
      clusterMonitor.createInstanceOnDemand(instanceId);
    }
  }
}",0.9755395683453236
116108,"/** 
 * This will start the child monitors based on the active of siblings according to start up order
 * @param childId parent id of the event which received
 */
protected void onChildActivatedEvent(String childId,String instanceId){
  try {
    removeInstanceFromFromInactiveMap(childId,instanceId);
    removeInstanceFromFromTerminatingMap(childId,instanceId);
    boolean startDep;
    if (!aliasToActiveMonitorsMap.containsKey(childId) || !pendingMonitorsList.contains(childId)) {
      startDep=startDependency(childId,instanceId);
    }
 else {
      startDep=startDependencyByInstanceCreation(childId,instanceId);
    }
    if (!startDep) {
      ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    }
 else {
      log.info(""String_Node_Str"" + startDep + ""String_Node_Str""+ childId);
    }
  }
 catch (  MonitorNotFoundException e) {
    log.error(e);
  }
}","/** 
 * This will start the child monitors based on the active of siblings according to start up order
 * @param childId parent id of the event which received
 */
protected void onChildActivatedEvent(String childId,String instanceId){
  try {
    removeInstanceFromFromInactiveMap(childId,instanceId);
    removeInstanceFromFromTerminatingMap(childId,instanceId);
    boolean startDep;
    if (!aliasToActiveMonitorsMap.containsKey(childId) || !pendingMonitorsList.contains(childId)) {
      startDep=startDependency(childId,instanceId);
    }
 else {
      startDep=startDependencyByInstanceCreation(childId,instanceId);
    }
    if (!startDep) {
      ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    }
 else {
      log.info(""String_Node_Str"" + startDep + ""String_Node_Str""+ this.id);
    }
  }
 catch (  MonitorNotFoundException e) {
    log.error(e);
  }
}",0.9935135135135136
116109,"/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationChildContext> applicationContexts,String instanceId) throws MonitorNotFoundException {
  if (applicationContexts != null && applicationContexts.isEmpty()) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationChildContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (!this.aliasToActiveMonitorsMap.containsKey(context.getId())) {
      String msg=""String_Node_Str"";
      throw new MonitorNotFoundException(msg);
    }
 else {
      Monitor monitor=aliasToActiveMonitorsMap.get(context.getId());
      if (context instanceof ClusterChildContext) {
        MonitorStatusEventBuilder.notifyChildCluster(monitor,ClusterStatus.Created,instanceId);
      }
 else       if (context instanceof GroupChildContext) {
        MonitorStatusEventBuilder.notifyChildGroup(monitor,GroupStatus.Created,instanceId);
      }
    }
  }
  return true;
}","/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationChildContext> applicationContexts,String instanceId) throws MonitorNotFoundException {
  if (applicationContexts != null && applicationContexts.isEmpty()) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationChildContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (!this.aliasToActiveMonitorsMap.containsKey(context.getId())) {
      String msg=""String_Node_Str"";
      throw new MonitorNotFoundException(msg);
    }
 else {
      Monitor monitor=aliasToActiveMonitorsMap.get(context.getId());
      monitor.createInstanceOnDemand(instanceId);
    }
  }
  return true;
}",0.8108108108108109
116110,"/** 
 * @param childId
 */
protected void onChildInactiveEvent(String childId,String instanceId){
  List<ApplicationChildContext> terminationList;
  Monitor monitor;
  terminationList=this.startupDependencyTree.getTerminationDependencies(childId);
  ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
  if (this.startupDependencyTree.getTerminationBehavior() == DependencyTree.TerminationBehavior.TERMINATE_ALL && terminationList.size() == this.aliasToActiveMonitorsMap.size()) {
    if (this.parent != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(this.appId,childId,instanceId);
    }
 else {
      sendTerminatingEventOnNotification(terminationList,childId,true,instanceId);
    }
    log.info(""String_Node_Str"" + childId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    sendTerminatingEventOnNotification(terminationList,childId,false,instanceId);
  }
}","/** 
 * @param childId
 */
protected void onChildInactiveEvent(String childId,String instanceId){
  List<ApplicationChildContext> terminationList;
  Monitor monitor;
  terminationList=this.startupDependencyTree.getTerminationDependencies(childId);
  ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
  if (this.startupDependencyTree.getTerminationBehavior() == DependencyTree.TerminationBehavior.TERMINATE_ALL && terminationList.size() == this.aliasToActiveMonitorsMap.size()) {
    if (this.parent != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(this.appId,this.id,instanceId);
    }
 else {
      sendTerminatingEventOnNotification(terminationList,childId,true,instanceId);
    }
    log.info(""String_Node_Str"" + childId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    sendTerminatingEventOnNotification(terminationList,childId,false,instanceId);
  }
}",0.9935965848452508
116111,"public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    Set<ClusterDataHolder> clusterData=application.getClusterDataRecursively();
    ApplicationInstance instance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (instance.isStateTransitionValid(status)) {
      instance.setStatus(status);
      updateApplicationMonitor(appId,status,instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      applicationMonitor.getNetworkPartitionContext(instance.getNetworkPartitionId()).removeClusterApplicationContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,clusterData);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}","public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    Set<ClusterDataHolder> clusterData=application.getClusterDataRecursively();
    ApplicationInstance instance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (instance.isStateTransitionValid(status)) {
      instance.setStatus(status);
      updateApplicationMonitor(appId,status,instanceId);
      ApplicationMonitor applicationMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      applicationMonitor.getNetworkPartitionContext(instance.getNetworkPartitionId()).removeClusterApplicationContext(instanceId);
      applicationMonitor.removeInstance(instanceId);
      application.removeInstance(instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        log.info(""String_Node_Str"" + appId);
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,instanceId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}",0.9930715935334872
116112,"public static void sendApplicationInstanceTerminatedEvent(String appId,Set<ClusterDataHolder> clusterData){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId);
  }
  ApplicationInstanceTerminatedEvent applicationTerminatedEvent=new ApplicationInstanceTerminatedEvent(appId,clusterData);
  publishEvent(applicationTerminatedEvent);
}","public static void sendApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId);
  }
  ApplicationInstanceTerminatedEvent applicationTerminatedEvent=new ApplicationInstanceTerminatedEvent(appId,instanceId);
  publishEvent(applicationTerminatedEvent);
}",0.8973607038123167
116113,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (AutoscalerUtil.allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
          if (policy != null && !AutoscalerContext.getInstance().containsPendingMonitor(appId)) {
            AutoscalerUtil.getInstance().startApplicationMonitor(appId);
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceActivatedEvent clusterActivatedEvent=(ClusterInstanceActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      String instanceId=clusterActivatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Active,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      String instanceId=clusterResetEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.notifyParentMonitor(ClusterStatus.Created,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceInactivateEvent clusterInactivateEvent=(ClusterInstanceInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      String instanceId=clusterInactivateEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Inactive,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatingEvent clusterTerminatingEvent=(ClusterInstanceTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      ClusterInstance clusterInstance=(ClusterInstance)monitor.getInstance(instanceId);
      if (clusterInstance.getCurrentState() == ClusterStatus.Active) {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForCluster(clusterId,instanceId);
      }
 else {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        monitor.terminateAllMembers(instanceId,clusterInstance.getNetworkPartitionId());
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatedEvent clusterTerminatedEvent=(ClusterInstanceTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      String instanceId=clusterTerminatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      ApplicationMonitor appMonitor=null;
      monitor=asCtx.getClusterMonitor(clusterId);
      appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,instanceId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Terminated,instanceId);
      ClusterInstance instance=(ClusterInstance)monitor.getInstance(instanceId);
      ((VMClusterContext)monitor.getClusterContext()).getNetworkPartitionCtxt(instance.getNetworkPartitionId()).removeClusterInstanceContext(instanceId);
      monitor.removeInstance(instanceId);
      if (!monitor.hasInstance() && appMonitor.isTerminating()) {
        monitor.destroy();
        AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      ClusterInstance clusterInstance=((ClusterInstanceCreatedEvent)event).getClusterInstance();
      String instanceId=clusterInstance.getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                if (clusterContext == null) {
                  clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                  clusterMonitor.setClusterContext(clusterContext);
                }
                clusterContext.addInstanceContext(instanceId,cluster);
                if (clusterMonitor.getInstance(instanceId) == null) {
                  ClusterInstance clusterInstance1=cluster.getInstanceContexts(instanceId);
                  clusterMonitor.addInstance(clusterInstance1);
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (AutoscalerUtil.allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
          if (policy != null && !AutoscalerContext.getInstance().containsPendingMonitor(appId)) {
            AutoscalerUtil.getInstance().startApplicationMonitor(appId);
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceActivatedEvent clusterActivatedEvent=(ClusterInstanceActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      String instanceId=clusterActivatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Active,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      String instanceId=clusterResetEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.notifyParentMonitor(ClusterStatus.Created,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceInactivateEvent clusterInactivateEvent=(ClusterInstanceInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      String instanceId=clusterInactivateEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Inactive,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatingEvent clusterTerminatingEvent=(ClusterInstanceTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      ClusterInstance clusterInstance=(ClusterInstance)monitor.getInstance(instanceId);
      if (clusterInstance.getCurrentState() == ClusterStatus.Active) {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForCluster(clusterId,instanceId);
      }
 else {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        monitor.terminateAllMembers(instanceId,clusterInstance.getNetworkPartitionId());
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatedEvent clusterTerminatedEvent=(ClusterInstanceTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      String instanceId=clusterTerminatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      ApplicationMonitor appMonitor=null;
      monitor=asCtx.getClusterMonitor(clusterId);
      appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,instanceId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Terminated,instanceId);
      ClusterInstance instance=(ClusterInstance)monitor.getInstance(instanceId);
      ((VMClusterContext)monitor.getClusterContext()).getNetworkPartitionCtxt(instance.getNetworkPartitionId()).removeClusterInstanceContext(instanceId);
      monitor.removeInstance(instanceId);
      if (!monitor.hasInstance() && appMonitor.isTerminating()) {
        monitor.destroy();
        AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      ClusterInstance clusterInstance=((ClusterInstanceCreatedEvent)event).getClusterInstance();
      String instanceId=clusterInstance.getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                if (clusterContext == null) {
                  clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                  clusterMonitor.setClusterContext(clusterContext);
                }
                clusterContext.addInstanceContext(instanceId,cluster);
                if (clusterMonitor.getInstance(instanceId) == null) {
                  ClusterInstance clusterInstance1=cluster.getInstanceContexts(instanceId);
                  clusterMonitor.addInstance(clusterInstance1);
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}",0.9981100236247048
116114,"@Override public void handleMemberReadyToShutdownEvent(MemberReadyToShutdownEvent memberReadyToShutdownEvent){
  ClusterInstanceContext nwPartitionCtxt;
  String networkPartitionId=memberReadyToShutdownEvent.getNetworkPartitionId();
  String instanceId=memberReadyToShutdownEvent.getInstanceId();
  nwPartitionCtxt=getClusterInstanceContext(networkPartitionId,instanceId);
  String memberId=memberReadyToShutdownEvent.getMemberId();
  String partitionId=getPartitionOfMember(memberId);
  ClusterLevelPartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
  try {
    String clusterId=memberReadyToShutdownEvent.getClusterId();
    if (partitionCtxt.getPendingTerminationMember(memberId) != null) {
      partitionCtxt.movePendingTerminationMemberToObsoleteMembers(memberId);
    }
 else     if (partitionCtxt.getPendingTerminationMember(memberId) != null) {
      partitionCtxt.movePendingTerminationMemberToObsoleteMembers(memberId);
    }
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.getLocalizedMessage();
    log.error(msg,e);
  }
}","@Override public void handleMemberReadyToShutdownEvent(MemberReadyToShutdownEvent memberReadyToShutdownEvent){
  ClusterInstanceContext nwPartitionCtxt;
  String networkPartitionId=memberReadyToShutdownEvent.getNetworkPartitionId();
  String instanceId=memberReadyToShutdownEvent.getInstanceId();
  nwPartitionCtxt=getClusterInstanceContext(networkPartitionId,instanceId);
  String memberId=memberReadyToShutdownEvent.getMemberId();
  String partitionId=getPartitionOfMember(memberId);
  ClusterLevelPartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
  try {
    String clusterId=memberReadyToShutdownEvent.getClusterId();
    if (partitionCtxt.getPendingTerminationMember(memberId) != null) {
      partitionCtxt.movePendingTerminationMemberToObsoleteMembers(memberId);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
      }
    }
 else     if (partitionCtxt.getObsoleteMember(memberId) != null) {
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
      }
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.getLocalizedMessage();
    log.error(msg,e);
  }
}",0.88844779674474
116115,"@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String childId=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    this.markInstanceAsInactive(childId,instanceId);
    onChildInactiveEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    markInstanceAsTerminating(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    removeInstanceFromFromInactiveMap(childId,instanceId);
    removeInstanceFromFromTerminatingMap(childId,instanceId);
    ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      if (instance.getStatus() == ApplicationStatus.Terminating) {
        ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,appId,instanceId);
      }
 else {
        onChildTerminatedEvent(childId,instanceId);
      }
    }
 else {
      log.warn(""String_Node_Str"" + this.id);
    }
  }
}","@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String childId=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    this.markInstanceAsInactive(childId,instanceId);
    onChildInactiveEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    markInstanceAsTerminating(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    removeInstanceFromFromInactiveMap(childId,instanceId);
    removeInstanceFromFromTerminatingMap(childId,instanceId);
    ApplicationInstance instance=(ApplicationInstance)instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      if (this.isTerminating()) {
        ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,appId,instanceId);
      }
 else {
        onChildTerminatedEvent(childId,instanceId);
      }
    }
 else {
      log.warn(""String_Node_Str"" + this.id);
    }
  }
}",0.9804971319311664
116116,"@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String childId=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    if (!this.aliasToActiveMonitorsMap.get(childId).hasStartupDependents()) {
      onChildActivatedEvent(childId,instanceId);
    }
 else {
      this.markInstanceAsInactive(childId,instanceId);
      onChildInactiveEvent(childId,instanceId);
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    markInstanceAsTerminating(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    removeInstanceFromFromInactiveMap(childId,instanceId);
    removeInstanceFromFromTerminatingMap(childId,instanceId);
    GroupInstance instance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      if (instance.getStatus() == GroupStatus.Terminating || instance.getStatus() == GroupStatus.Terminated) {
        ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,appId,instanceId);
      }
 else {
        onChildTerminatedEvent(childId,instanceId);
      }
    }
  }
}","@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String childId=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  String id=this.id;
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    if (!aliasToActiveMonitorsMap.get(childId).hasStartupDependents()) {
      onChildActivatedEvent(childId,instanceId);
    }
 else {
      markInstanceAsInactive(childId,instanceId);
      onChildInactiveEvent(childId,instanceId);
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    markInstanceAsTerminating(childId,instanceId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    removeInstanceFromFromInactiveMap(childId,instanceId);
    removeInstanceFromFromTerminatingMap(childId,instanceId);
    GroupInstance instance=(GroupInstance)instanceIdToInstanceMap.get(instanceId);
    if (instance != null) {
      if (instance.getStatus() == GroupStatus.Terminating || instance.getStatus() == GroupStatus.Terminated) {
        ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(id,appId,instanceId);
      }
 else {
        onChildTerminatedEvent(childId,instanceId);
      }
    }
 else {
      log.warn(""String_Node_Str"" + id);
    }
  }
}",0.9679162445119892
116117,"private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Active,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) && getAllGroupInSameState(groups,GroupStatus.Active,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationInstanceActivatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier());
          ApplicationBuilder.handleGroupInstanceActivatedEvent(appId,component.getUniqueIdentifier(),instanceId);
          return true;
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}","private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Active,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) && getAllGroupInSameState(groups,GroupStatus.Active,instanceId)) {
      if (component instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        ApplicationBuilder.handleApplicationInstanceActivatedEvent(appId,instanceId);
        return true;
      }
 else       if (component instanceof Group) {
        log.info(""String_Node_Str"" + component.getUniqueIdentifier());
        ApplicationBuilder.handleGroupInstanceActivatedEvent(appId,component.getUniqueIdentifier(),instanceId);
        return true;
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}",0.9075008409014464
116118,"private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier());
          ApplicationBuilder.handleGroupInstanceTerminatedEvent(appId,component.getUniqueIdentifier(),instanceId);
          return true;
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}","private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId)) {
      if (component instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
        return true;
      }
 else       if (component instanceof Group) {
        log.info(""String_Node_Str"" + component.getUniqueIdentifier());
        ApplicationBuilder.handleGroupInstanceTerminatedEvent(appId,component.getUniqueIdentifier(),instanceId);
        return true;
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}",0.9137877373171492
116119,"private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ ""String_Node_Str""+ instanceId);
          ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier() + ""String_Node_Str""+ instanceId);
          ApplicationBuilder.handleGroupTerminatingEvent(appId,component.getUniqueIdentifier(),instanceId);
          return true;
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}","private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId)) {
      if (component instanceof Application) {
        log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ ""String_Node_Str""+ instanceId);
        ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
        return true;
      }
 else       if (component instanceof Group) {
        log.info(""String_Node_Str"" + component.getUniqueIdentifier() + ""String_Node_Str""+ instanceId);
        ApplicationBuilder.handleGroupTerminatingEvent(appId,component.getUniqueIdentifier(),instanceId);
        return true;
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}",0.9344796916691372
116120,"public ApplicationInstanceTerminatedEvent(String appId,Set<ClusterDataHolder> clusterData){
  this.appId=appId;
  this.clusterData=clusterData;
}","public ApplicationInstanceTerminatedEvent(String appId,String instanceId){
  this.appId=appId;
  this.instanceId=instanceId;
}",0.7453874538745388
116121,"private boolean doProcess(ApplicationInstanceTerminatedEvent event,Applications applications){
  if (event.getAppId() == null) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg);
    throw new RuntimeException(errorMsg);
  }
  String appId=event.getAppId();
  if (applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId + ""String_Node_Str"");
    applications.removeApplication(appId);
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(ApplicationInstanceTerminatedEvent event,Applications applications){
  if (event.getAppId() == null) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg);
    throw new RuntimeException(errorMsg);
  }
  String appId=event.getAppId();
  String instanceId=event.getInstanceId();
  if (applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId + ""String_Node_Str"");
    ApplicationInstance instance=applications.getApplication(appId).getInstanceContexts(instanceId);
    if (instance == null) {
      log.info(""String_Node_Str"" + instanceId + ""String_Node_Str"");
    }
    instance.setStatus(ApplicationStatus.Terminated);
    applications.getApplication(appId).removeInstance(instanceId);
  }
  notifyEventListeners(event);
  return true;
}",0.7169811320754716
116122,"public int getMaxNumberOfInstancesRequired(int numberOfInstancesReuquiredBasedOnRif,int numberOfInstancesReuquiredBasedOnMemoryConsumption,boolean mcReset,int numberOfInstancesReuquiredBasedOnLoadAverage,boolean laReset){
  int numberOfInstances=0;
  int rifBasedRequiredInstances=0;
  int mcBasedRequiredInstances=0;
  int laBasedRequiredInstances=0;
  if (arspiIsSet) {
    rifBasedRequiredInstances=numberOfInstancesReuquiredBasedOnRif;
  }
  if (mcReset) {
    rifBasedRequiredInstances=numberOfInstancesReuquiredBasedOnMemoryConsumption;
  }
  if (laReset) {
    rifBasedRequiredInstances=numberOfInstancesReuquiredBasedOnLoadAverage;
  }
  numberOfInstances=Math.max(Math.max(numberOfInstancesReuquiredBasedOnMemoryConsumption,numberOfInstancesReuquiredBasedOnLoadAverage),numberOfInstancesReuquiredBasedOnRif);
  return numberOfInstances;
}","public int getMaxNumberOfInstancesRequired(int numberOfInstancesReuquiredBasedOnRif,int numberOfInstancesReuquiredBasedOnMemoryConsumption,boolean mcReset,int numberOfInstancesReuquiredBasedOnLoadAverage,boolean laReset){
  int numberOfInstances=0;
  int rifBasedRequiredInstances=0;
  int mcBasedRequiredInstances=0;
  int laBasedRequiredInstances=0;
  if (arspiIsSet) {
    rifBasedRequiredInstances=numberOfInstancesReuquiredBasedOnRif;
  }
  if (mcReset) {
    mcBasedRequiredInstances=numberOfInstancesReuquiredBasedOnMemoryConsumption;
  }
  if (laReset) {
    laBasedRequiredInstances=numberOfInstancesReuquiredBasedOnLoadAverage;
  }
  numberOfInstances=Math.max(Math.max(numberOfInstancesReuquiredBasedOnMemoryConsumption,numberOfInstancesReuquiredBasedOnLoadAverage),numberOfInstancesReuquiredBasedOnRif);
  return numberOfInstances;
}",0.9940898345153664
116123,"public int getNumberOfInstancesRequiredBasedOnLoadAndMemoryConsumption(float upperLimit,float lowerLimit,double predictedValue,int activeMemberCount){
  double numberOfInstances=(activeMemberCount * predictedValue) / upperLimit;
  return (int)Math.ceil(numberOfInstances);
}","public int getNumberOfInstancesRequiredBasedOnLoadAndMemoryConsumption(float upperLimit,float lowerLimit,double predictedValue,int activeMemberCount){
  double numberOfInstances=0;
  if (upperLimit != 0) {
    numberOfInstances=(activeMemberCount * predictedValue) / upperLimit;
  }
  return (int)Math.ceil(numberOfInstances);
}",0.9102990033222592
116124,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (AutoscalerUtil.allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
          if (policy != null && !AutoscalerContext.getInstance().containsPendingMonitor(appId)) {
            AutoscalerUtil.getInstance().startApplicationMonitor(appId);
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceActivatedEvent clusterActivatedEvent=(ClusterInstanceActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      String instanceId=clusterActivatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Active,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      String instanceId=clusterResetEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.notifyParentMonitor(ClusterStatus.Created,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceInactivateEvent clusterInactivateEvent=(ClusterInstanceInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      String instanceId=clusterInactivateEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Inactive,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatingEvent clusterTerminatingEvent=(ClusterInstanceTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      ClusterInstance clusterInstance=(ClusterInstance)monitor.getInstance(instanceId);
      if (clusterInstance.getCurrentState() == ClusterStatus.Active) {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForCluster(clusterId,instanceId);
      }
 else {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        monitor.terminateAllMembers(instanceId,clusterInstance.getNetworkPartitionId());
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatedEvent clusterTerminatedEvent=(ClusterInstanceTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      String instanceId=clusterTerminatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      ApplicationMonitor appMonitor=null;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,instanceId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Terminated,instanceId);
      monitor.removeInstance(instanceId);
      if (!monitor.hasInstance() && appMonitor.isTerminating()) {
        monitor.destroy();
        AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      ClusterInstance clusterInstance=((ClusterInstanceCreatedEvent)event).getClusterInstance();
      String instanceId=clusterInstance.getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                if (clusterContext == null) {
                  clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                  clusterMonitor.setClusterContext(clusterContext);
                }
                clusterContext.addInstanceContext(instanceId,cluster);
                if (clusterMonitor.getInstance(instanceId) == null) {
                  ClusterInstance clusterInstance1=cluster.getInstanceContexts(instanceId);
                  clusterMonitor.addInstance(clusterInstance1);
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (AutoscalerUtil.allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
          if (policy != null && !AutoscalerContext.getInstance().containsPendingMonitor(appId)) {
            AutoscalerUtil.getInstance().startApplicationMonitor(appId);
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceActivatedEvent clusterActivatedEvent=(ClusterInstanceActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      String instanceId=clusterActivatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Active,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      String instanceId=clusterResetEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.notifyParentMonitor(ClusterStatus.Created,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceInactivateEvent clusterInactivateEvent=(ClusterInstanceInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      String instanceId=clusterInactivateEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Inactive,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatingEvent clusterTerminatingEvent=(ClusterInstanceTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      ClusterInstance clusterInstance=(ClusterInstance)monitor.getInstance(instanceId);
      if (clusterInstance.getCurrentState() == ClusterStatus.Active) {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForCluster(clusterId,instanceId);
      }
 else {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        monitor.terminateAllMembers(instanceId,clusterInstance.getNetworkPartitionId());
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatedEvent clusterTerminatedEvent=(ClusterInstanceTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      String instanceId=clusterTerminatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      ApplicationMonitor appMonitor=null;
      monitor=asCtx.getClusterMonitor(clusterId);
      appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,instanceId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Terminated,instanceId);
      monitor.removeInstance(instanceId);
      if (!monitor.hasInstance() && appMonitor.isTerminating()) {
        monitor.destroy();
        AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      ClusterInstance clusterInstance=((ClusterInstanceCreatedEvent)event).getClusterInstance();
      String instanceId=clusterInstance.getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                if (clusterContext == null) {
                  clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                  clusterMonitor.setClusterContext(clusterContext);
                }
                clusterContext.addInstanceContext(instanceId,cluster);
                if (clusterMonitor.getInstance(instanceId) == null) {
                  ClusterInstance clusterInstance1=cluster.getInstanceContexts(instanceId);
                  clusterMonitor.addInstance(clusterInstance1);
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}",0.9837614204447508
116125,"/** 
 * This will check whether instances are there in the map
 * @return true/false
 */
public boolean hasInstance(){
  if (this.instanceIdToInstanceMap.isEmpty()) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This will check whether instances are there in the map
 * @return true/false
 */
public boolean hasInstance(){
  if (this.instanceIdToInstanceMap.isEmpty()) {
    return false;
  }
 else {
    return true;
  }
}",0.9680365296803652
116126,"public void run(){
  ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
  for (  ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
    log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
    Iterator<MemberContext> iterator=partitionContext.getActiveMembers().listIterator();
    while (iterator.hasNext()) {
      MemberContext activeMemberCtxt=iterator.next();
      String memberId=activeMemberCtxt.getMemberId();
      log.info(""String_Node_Str"" + memberId);
      partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForMember(memberId);
    }
    Iterator<MemberContext> pendingIterator=partitionContext.getPendingMembers().listIterator();
    while (pendingIterator.hasNext()) {
      MemberContext pendingMemberCtxt=pendingIterator.next();
      String memeberId=pendingMemberCtxt.getMemberId();
      log.info(""String_Node_Str"" + memeberId + ""String_Node_Str"");
      partitionContext.movePendingMemberToObsoleteMembers(memeberId);
    }
  }
}","public void run(){
  ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
  for (  ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
    log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
    List<String> activeMembers=new ArrayList<String>();
    Iterator<MemberContext> iterator=partitionContext.getActiveMembers().listIterator();
    while (iterator.hasNext()) {
      MemberContext activeMemberCtxt=iterator.next();
      activeMembers.add(activeMemberCtxt.getMemberId());
    }
    for (    String memberId : activeMembers) {
      log.info(""String_Node_Str"" + memberId);
      partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForMember(memberId);
    }
    Iterator<MemberContext> pendingIterator=partitionContext.getPendingMembers().listIterator();
    List<String> pendingMembers=new ArrayList<String>();
    while (pendingIterator.hasNext()) {
      MemberContext activeMemberCtxt=pendingIterator.next();
      pendingMembers.add(activeMemberCtxt.getMemberId());
    }
    for (    String memberId : pendingMembers) {
      MemberContext pendingMemberCtxt=pendingIterator.next();
      String memeberId=pendingMemberCtxt.getMemberId();
      log.info(""String_Node_Str"" + memeberId + ""String_Node_Str"");
      partitionContext.movePendingMemberToObsoleteMembers(memeberId);
    }
  }
}",0.8441558441558441
116127,"@Override public void terminateAllMembers(final String instanceId,final String networkPartitionId){
  Thread memberTerminator=new Thread(new Runnable(){
    public void run(){
      ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
      for (      ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
        Iterator<MemberContext> iterator=partitionContext.getActiveMembers().listIterator();
        while (iterator.hasNext()) {
          MemberContext activeMemberCtxt=iterator.next();
          String memberId=activeMemberCtxt.getMemberId();
          log.info(""String_Node_Str"" + memberId);
          partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
          InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForMember(memberId);
        }
        Iterator<MemberContext> pendingIterator=partitionContext.getPendingMembers().listIterator();
        while (pendingIterator.hasNext()) {
          MemberContext pendingMemberCtxt=pendingIterator.next();
          String memeberId=pendingMemberCtxt.getMemberId();
          log.info(""String_Node_Str"" + memeberId + ""String_Node_Str"");
          partitionContext.movePendingMemberToObsoleteMembers(memeberId);
        }
      }
    }
  }
,""String_Node_Str"" + getClusterId());
  memberTerminator.start();
}","@Override public void terminateAllMembers(final String instanceId,final String networkPartitionId){
  Thread memberTerminator=new Thread(new Runnable(){
    public void run(){
      ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
      for (      ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
        List<String> activeMembers=new ArrayList<String>();
        Iterator<MemberContext> iterator=partitionContext.getActiveMembers().listIterator();
        while (iterator.hasNext()) {
          MemberContext activeMemberCtxt=iterator.next();
          activeMembers.add(activeMemberCtxt.getMemberId());
        }
        for (        String memberId : activeMembers) {
          log.info(""String_Node_Str"" + memberId);
          partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
          InstanceNotificationPublisher.getInstance().sendInstanceCleanupEventForMember(memberId);
        }
        Iterator<MemberContext> pendingIterator=partitionContext.getPendingMembers().listIterator();
        List<String> pendingMembers=new ArrayList<String>();
        while (pendingIterator.hasNext()) {
          MemberContext activeMemberCtxt=pendingIterator.next();
          pendingMembers.add(activeMemberCtxt.getMemberId());
        }
        for (        String memberId : pendingMembers) {
          MemberContext pendingMemberCtxt=pendingIterator.next();
          String memeberId=pendingMemberCtxt.getMemberId();
          log.info(""String_Node_Str"" + memeberId + ""String_Node_Str"");
          partitionContext.movePendingMemberToObsoleteMembers(memeberId);
        }
      }
    }
  }
,""String_Node_Str"" + getClusterId());
  memberTerminator.start();
}",0.8619153674832962
116128,"private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          if (((Group)component).getStatus(null) != GroupStatus.Terminated) {
            log.info(""String_Node_Str"" + component.getUniqueIdentifier());
            ApplicationBuilder.handleGroupInstanceTerminatedEvent(appId,component.getUniqueIdentifier(),instanceId);
            return true;
          }
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}","private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminated,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminated,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier());
          ApplicationBuilder.handleGroupInstanceTerminatedEvent(appId,component.getUniqueIdentifier(),instanceId);
          return true;
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}",0.9329017068864036
116129,"private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          if (((Group)component).getStatus(null) != GroupStatus.Terminated) {
            log.info(""String_Node_Str"" + component.getUniqueIdentifier());
            ApplicationBuilder.handleGroupTerminatingEvent(appId,component.getUniqueIdentifier(),instanceId);
            return true;
          }
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}","private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Terminating,instanceId) && getAllGroupInSameState(groups,GroupStatus.Terminating,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ ""String_Node_Str""+ instanceId);
          ApplicationBuilder.handleApplicationInstanceTerminatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier() + ""String_Node_Str""+ instanceId);
          ApplicationBuilder.handleGroupTerminatingEvent(appId,component.getUniqueIdentifier(),instanceId);
          return true;
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}",0.910503597122302
116130,"public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      group.removeInstance(instanceId);
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.9844357976653696
116131,"public VMClusterContext(String clusterId,String serviceId,AutoscalePolicy autoscalePolicy,DeploymentPolicy deploymentPolicy){
  super(clusterId,serviceId);
  this.deploymentPolicy=deploymentPolicy;
  this.networkPartitionCtxts=new HashMap<String,ClusterLevelNetworkPartitionContext>();
  this.autoscalePolicy=autoscalePolicy;
}","public VMClusterContext(String clusterId,String serviceId,AutoscalePolicy autoscalePolicy,DeploymentPolicy deploymentPolicy){
  super(clusterId,serviceId);
  this.deploymentPolicy=deploymentPolicy;
  this.networkPartitionCtxts=new ConcurrentHashMap<String,ClusterLevelNetworkPartitionContext>();
  this.autoscalePolicy=autoscalePolicy;
}",0.9849397590361446
116132,"public void movePendingTerminationMemberToObsoleteMembers(String memberId){
  log.info(""String_Node_Str"" + memberId);
  if (memberId == null) {
    return;
  }
  Iterator<MemberContext> iterator=terminationPendingMembers.listIterator();
  while (iterator.hasNext()) {
    MemberContext terminationPendingMember=iterator.next();
    if (terminationPendingMember == null) {
      iterator.remove();
      continue;
    }
    if (memberId.equals(terminationPendingMember.getMemberId())) {
      log.info(""String_Node_Str"" + memberId + ""String_Node_Str"");
      iterator.remove();
      this.obsoletedMembers.put(memberId,terminationPendingMember);
      terminationPendingStartedTime.put(memberId,System.currentTimeMillis());
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
      }
      break;
    }
  }
}","public void movePendingTerminationMemberToObsoleteMembers(String memberId){
  log.info(""String_Node_Str"" + memberId);
  if (memberId == null) {
    return;
  }
  Iterator<MemberContext> iterator=terminationPendingMembers.listIterator();
  while (iterator.hasNext()) {
    MemberContext terminationPendingMember=iterator.next();
    if (terminationPendingMember == null) {
      iterator.remove();
      continue;
    }
    if (memberId.equals(terminationPendingMember.getMemberId())) {
      log.info(""String_Node_Str"" + memberId + ""String_Node_Str"");
      iterator.remove();
      this.obsoletedMembers.put(memberId,terminationPendingMember);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
      }
      break;
    }
  }
}",0.8365384615384616
116133,"public void moveActiveMemberToTerminationPendingMembers(String memberId){
  if (memberId == null) {
    return;
  }
synchronized (activeMembers) {
    Iterator<MemberContext> iterator=activeMembers.listIterator();
    while (iterator.hasNext()) {
      MemberContext activeMember=iterator.next();
      if (activeMember == null) {
        iterator.remove();
        continue;
      }
      if (memberId.equals(activeMember.getMemberId())) {
        iterator.remove();
        this.terminationPendingMembers.add(activeMember);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        break;
      }
    }
  }
}","public void moveActiveMemberToTerminationPendingMembers(String memberId){
  if (memberId == null) {
    return;
  }
synchronized (activeMembers) {
    Iterator<MemberContext> iterator=activeMembers.listIterator();
    while (iterator.hasNext()) {
      MemberContext activeMember=iterator.next();
      if (activeMember == null) {
        iterator.remove();
        continue;
      }
      if (memberId.equals(activeMember.getMemberId())) {
        iterator.remove();
        this.terminationPendingMembers.add(activeMember);
        terminationPendingStartedTime.put(memberId,System.currentTimeMillis());
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        break;
      }
    }
  }
}",0.9452054794520548
116134,"public void notifyParentMonitor(ClusterStatus status,String instanceId){
  ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceId);
  if (instance == null) {
    log.warn(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,status,this.clusterId,instanceId);
  }
}","public void notifyParentMonitor(ClusterStatus status,String instanceId){
  ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceId);
  if (instance == null) {
    log.warn(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
 else {
    if (instance.getStatus() != status) {
      instance.setStatus(status);
    }
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,status,this.clusterId,instanceId);
  }
}",0.9012048192771084
116135,"public void run(){
  ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
  for (  ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
    log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
    for (    MemberContext activeMemberCtxt : partitionContext.getActiveMembers()) {
      log.info(""String_Node_Str"" + activeMemberCtxt.getMemberId());
      terminateMember(activeMemberCtxt.getMemberId());
    }
    for (    MemberContext pendingMemberCtxt : partitionContext.getPendingMembers()) {
      log.info(""String_Node_Str"" + pendingMemberCtxt.getMemberId());
      terminateMember(pendingMemberCtxt.getMemberId());
    }
    for (    String obsoleteMemberId : partitionContext.getObsoletedMembers().keySet()) {
      log.info(""String_Node_Str"" + obsoleteMemberId);
      terminateMember(obsoleteMemberId);
    }
  }
}","public void run(){
  ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
  for (  ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
    log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
    Iterator<MemberContext> iterator=partitionContext.getActiveMembers().listIterator();
    while (iterator.hasNext()) {
      MemberContext activeMemberCtxt=iterator.next();
      String memberId=activeMemberCtxt.getMemberId();
      log.info(""String_Node_Str"" + memberId);
      partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      InstanceNotificationPublisher.sendInstanceCleanupEventForMember(memberId);
    }
    Iterator<MemberContext> pendingIterator=partitionContext.getPendingMembers().listIterator();
    while (pendingIterator.hasNext()) {
      MemberContext pendingMemberCtxt=pendingIterator.next();
      String memeberId=pendingMemberCtxt.getMemberId();
      log.info(""String_Node_Str"" + memeberId + ""String_Node_Str"");
      partitionContext.movePendingMemberToObsoleteMembers(memeberId);
    }
  }
}",0.4285714285714285
116136,"@Override public void terminateAllMembers(final String instanceId,final String networkPartitionId){
  Thread memberTerminator=new Thread(new Runnable(){
    public void run(){
      ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
      for (      ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
        for (        MemberContext activeMemberCtxt : partitionContext.getActiveMembers()) {
          log.info(""String_Node_Str"" + activeMemberCtxt.getMemberId());
          terminateMember(activeMemberCtxt.getMemberId());
        }
        for (        MemberContext pendingMemberCtxt : partitionContext.getPendingMembers()) {
          log.info(""String_Node_Str"" + pendingMemberCtxt.getMemberId());
          terminateMember(pendingMemberCtxt.getMemberId());
        }
        for (        String obsoleteMemberId : partitionContext.getObsoletedMembers().keySet()) {
          log.info(""String_Node_Str"" + obsoleteMemberId);
          terminateMember(obsoleteMemberId);
        }
      }
    }
  }
,""String_Node_Str"" + getClusterId());
  memberTerminator.start();
}","@Override public void terminateAllMembers(final String instanceId,final String networkPartitionId){
  Thread memberTerminator=new Thread(new Runnable(){
    public void run(){
      ClusterInstanceContext instanceContext=getAllNetworkPartitionCtxts().get(networkPartitionId).getClusterInstanceContext(instanceId);
      for (      ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        log.info(""String_Node_Str"" + getClusterId() + ""String_Node_Str""+ instanceContext.getNetworkPartitionId()+ ""String_Node_Str""+ partitionContext.getPartitionId()+ ""String_Node_Str"");
        Iterator<MemberContext> iterator=partitionContext.getActiveMembers().listIterator();
        while (iterator.hasNext()) {
          MemberContext activeMemberCtxt=iterator.next();
          String memberId=activeMemberCtxt.getMemberId();
          log.info(""String_Node_Str"" + memberId);
          partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
          InstanceNotificationPublisher.sendInstanceCleanupEventForMember(memberId);
        }
        Iterator<MemberContext> pendingIterator=partitionContext.getPendingMembers().listIterator();
        while (pendingIterator.hasNext()) {
          MemberContext pendingMemberCtxt=pendingIterator.next();
          String memeberId=pendingMemberCtxt.getMemberId();
          log.info(""String_Node_Str"" + memeberId + ""String_Node_Str"");
          partitionContext.movePendingMemberToObsoleteMembers(memeberId);
        }
      }
    }
  }
,""String_Node_Str"" + getClusterId());
  memberTerminator.start();
}",0.6477732793522267
116137,"public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (instance.getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember && !stop) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
            }
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",true);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
      for (      final ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}","public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (instance.getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
            }
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",true);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
      for (      final ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}",0.9991156529429104
116138,"private static void createClusterInstance(String serviceType,String clusterId,String alias,String instanceId,String partitionId,String networkPartitionId){
  CloudControllerClient.getInstance().createClusterInstance(serviceType,clusterId,alias,instanceId,partitionId,networkPartitionId);
}","public void createClusterInstance(List<String> parentInstanceIds,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  for (  String parentInstanceId : parentInstanceIds) {
    createInstance(parentInstanceId,cluster);
  }
}",0.1841620626151013
116139,"/** 
 * To set the status of the application monitor
 * @param status the status
 */
public void setStatus(ApplicationStatus status,String instanceId){
  ((ApplicationInstance)this.instanceIdToInstanceMap.get(instanceId)).setStatus(status);
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new ApplicationStatusEvent(status,appId,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + appId,e);
  }
}","/** 
 * To set the status of the application monitor
 * @param status the status
 */
public void setStatus(ApplicationStatus status,String instanceId){
  ApplicationInstance applicationInstance=(ApplicationInstance)this.instanceIdToInstanceMap.get(instanceId);
  if (applicationInstance == null) {
    log.warn(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
 else {
    if (applicationInstance.getStatus() != status) {
      applicationInstance.setStatus(status);
    }
  }
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new ApplicationStatusEvent(status,appId,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + appId,e);
  }
}",0.7524229074889868
116140,"/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status status of the group
 */
public void setStatus(GroupStatus status,String instanceId){
  if (status == GroupStatus.Inactive && !this.hasStartupDependents) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId());
    if (this.isGroupScalingEnabled()) {
      ApplicationHolder.acquireReadLock();
      try {
        Application application=ApplicationHolder.getApplications().getApplication(this.appId);
        if (application != null) {
          Group group=application.getGroupRecursively(this.id);
          if (group != null) {
            GroupInstance context=group.getInstanceContexts(instanceId);
            MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,context.getParentId());
          }
        }
      }
  finally {
        ApplicationHolder.releaseReadLock();
      }
    }
 else {
      MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,instanceId);
    }
  }
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,this.id,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + this.id,e);
  }
}","/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status status of the group
 */
public void setStatus(GroupStatus status,String instanceId){
  GroupInstance groupInstance=(GroupInstance)this.instanceIdToInstanceMap.get(instanceId);
  if (groupInstance == null) {
    log.warn(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
 else {
    if (groupInstance.getStatus() != status) {
      groupInstance.setStatus(status);
    }
  }
  if (status == GroupStatus.Inactive && !this.hasStartupDependents) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId());
    if (this.isGroupScalingEnabled()) {
      ApplicationHolder.acquireReadLock();
      try {
        Application application=ApplicationHolder.getApplications().getApplication(this.appId);
        if (application != null) {
          Group group=application.getGroupRecursively(this.id);
          if (group != null) {
            GroupInstance context=group.getInstanceContexts(instanceId);
            MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,context.getParentId());
          }
        }
      }
  finally {
        ApplicationHolder.releaseReadLock();
      }
    }
 else {
      MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,instanceId);
    }
  }
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,this.id,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + this.id,e);
  }
}",0.9026955950032872
116141,"private void addMembersFromTopology(Cluster cluster,org.apache.stratos.cloud.controller.stub.domain.Partition partition,ClusterLevelPartitionContext clusterLevelPartitionContext){
  for (  Member member : cluster.getMembers()) {
    String memberId=member.getMemberId();
    if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
      MemberContext memberContext=new MemberContext();
      memberContext.setClusterId(member.getClusterId());
      memberContext.setMemberId(memberId);
      memberContext.setInitTime(member.getInitTime());
      memberContext.setPartition(partition);
      if (MemberStatus.Activated.equals(member.getStatus())) {
        if (log.isDebugEnabled()) {
          String msg=String.format(""String_Node_Str"",member.toString());
          log.debug(msg);
        }
        clusterLevelPartitionContext.addActiveMember(memberContext);
      }
 else       if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
        if (log.isDebugEnabled()) {
          String msg=String.format(""String_Node_Str"",member.toString());
          log.debug(msg);
        }
        clusterLevelPartitionContext.addPendingMember(memberContext);
      }
 else       if (MemberStatus.Suspended.equals(member.getStatus())) {
      }
      clusterLevelPartitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",memberId));
      }
    }
  }
}","private void addMembersFromTopology(Cluster cluster,org.apache.stratos.cloud.controller.stub.domain.Partition partition,ClusterLevelPartitionContext clusterLevelPartitionContext){
  for (  Member member : cluster.getMembers()) {
    String memberId=member.getMemberId();
    if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
      MemberContext memberContext=new MemberContext();
      memberContext.setClusterId(member.getClusterId());
      memberContext.setMemberId(memberId);
      memberContext.setInitTime(member.getInitTime());
      memberContext.setPartition(partition);
      memberContext.setProperties(AutoscalerUtil.toStubProperties(member.getProperties()));
      if (MemberStatus.Activated.equals(member.getStatus())) {
        clusterLevelPartitionContext.addActiveMember(memberContext);
        if (log.isDebugEnabled()) {
          String msg=String.format(""String_Node_Str"",member.toString());
          log.debug(msg);
        }
      }
 else       if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
        clusterLevelPartitionContext.addPendingMember(memberContext);
        if (log.isDebugEnabled()) {
          String msg=String.format(""String_Node_Str"",member.toString());
          log.debug(msg);
        }
      }
      clusterLevelPartitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",memberId));
      }
    }
  }
}",0.8523290386521308
116142,"public static org.apache.stratos.cloud.controller.stub.Properties toStubProperties(org.apache.stratos.common.Properties properties){
  org.apache.stratos.cloud.controller.stub.Properties stubProps=new org.apache.stratos.cloud.controller.stub.Properties();
  if (properties != null && properties.getProperties() != null) {
    for (    Property property : properties.getProperties()) {
      if ((property != null) && (property.getValue() != null)) {
        org.apache.stratos.cloud.controller.stub.Property newProperty=new org.apache.stratos.cloud.controller.stub.Property();
        newProperty.setName(property.getName());
        newProperty.setValue(property.getValue());
        stubProps.addProperties(newProperty);
      }
    }
  }
  return stubProps;
}","public static org.apache.stratos.cloud.controller.stub.Properties toStubProperties(java.util.Properties properties){
  org.apache.stratos.cloud.controller.stub.Properties stubProperties=new org.apache.stratos.cloud.controller.stub.Properties();
  if (properties != null) {
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      org.apache.stratos.cloud.controller.stub.Property newProperty=new org.apache.stratos.cloud.controller.stub.Property();
      newProperty.setName(entry.getKey().toString());
      newProperty.setValue(entry.getValue().toString());
      stubProperties.addProperties(newProperty);
    }
  }
  return stubProperties;
}",0.4050455501051156
116143,"private void updateContextFromRegistry(){
  if ((!isClustered()) || (isCoordinator())) {
    try {
      Object obj=RegistryManager.getInstance().read(CloudControllerConstants.DATA_RESOURCE);
      if (obj != null) {
        Object dataObj=Deserializer.deserializeFromByteArray((byte[])obj);
        if (dataObj instanceof CloudControllerContext) {
          CloudControllerContext serializedObj=(CloudControllerContext)dataObj;
          copyMap(serializedObj.kubernetesGroupsMap,kubernetesGroupsMap);
          copyMap(serializedObj.clusterIdToMemberContextListMap,clusterIdToMemberContextListMap);
          copyMap(serializedObj.memberIdToMemberContextMap,memberIdToMemberContextMap);
          copyMap(serializedObj.kubClusterIdToKubClusterContextMap,kubClusterIdToKubClusterContextMap);
          copyMap(serializedObj.clusterIdToContextMap,clusterIdToContextMap);
          copyMap(serializedObj.cartridgeTypeToPartitionIdsMap,cartridgeTypeToPartitionIdsMap);
          copyMap(serializedObj.cartridgeTypeToCartridgeMap,cartridgeTypeToCartridgeMap);
          copyMap(serializedObj.serviceGroupNameToServiceGroupMap,serviceGroupNameToServiceGroupMap);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
        }
      }
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + ""String_Node_Str"";
      log.warn(msg,e);
    }
  }
}","private void updateContextFromRegistry(){
  if ((!isClustered()) || (isCoordinator())) {
    try {
      Object dataObj=RegistryManager.getInstance().read(CloudControllerConstants.DATA_RESOURCE);
      if (dataObj != null) {
        if (dataObj instanceof CloudControllerContext) {
          CloudControllerContext serializedObj=(CloudControllerContext)dataObj;
          copyMap(serializedObj.kubernetesGroupsMap,kubernetesGroupsMap);
          copyMap(serializedObj.clusterIdToMemberContextListMap,clusterIdToMemberContextListMap);
          copyMap(serializedObj.memberIdToMemberContextMap,memberIdToMemberContextMap);
          copyMap(serializedObj.kubClusterIdToKubClusterContextMap,kubClusterIdToKubClusterContextMap);
          copyMap(serializedObj.clusterIdToContextMap,clusterIdToContextMap);
          copyMap(serializedObj.cartridgeTypeToPartitionIdsMap,cartridgeTypeToPartitionIdsMap);
          copyMap(serializedObj.cartridgeTypeToCartridgeMap,cartridgeTypeToCartridgeMap);
          copyMap(serializedObj.serviceGroupNameToServiceGroupMap,serviceGroupNameToServiceGroupMap);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
        }
      }
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + ""String_Node_Str"";
      log.warn(msg,e);
    }
  }
}",0.9703779366700716
116144,"public synchronized Object read(String resourcePath){
  try {
    Registry registry=ServiceReferenceHolder.getInstance().getRegistry();
    if (registry == null) {
      return null;
    }
    PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
    ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
    ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
    Resource resource=registry.get(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + resourcePath);
    return resource.getContent();
  }
 catch (  ResourceNotFoundException ignore) {
    return null;
  }
catch (  RegistryException e) {
    String msg=""String_Node_Str"" + CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + resourcePath;
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","public synchronized Object read(String resourcePath){
  try {
    Registry registry=ServiceReferenceHolder.getInstance().getRegistry();
    if (registry == null) {
      return null;
    }
    PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
    ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
    ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
    Resource resource=registry.get(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + resourcePath);
    Object content=resource.getContent();
    if (content != null) {
      try {
        return Deserializer.deserializeFromByteArray((byte[])content);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
        throw new RuntimeException(e);
      }
    }
    return null;
  }
 catch (  ResourceNotFoundException ignore) {
    return null;
  }
catch (  RegistryException e) {
    String msg=""String_Node_Str"" + CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + resourcePath;
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.8320251177394035
116145,"public static Topology retrieveTopology(){
  Object obj=RegistryManager.getInstance().read(CloudControllerConstants.TOPOLOGY_RESOURCE);
  if (obj != null) {
    try {
      Object dataObj=Deserializer.deserializeFromByteArray((byte[])obj);
      if (dataObj instanceof Topology) {
        return (Topology)dataObj;
      }
 else {
        return null;
      }
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"";
      log.warn(msg,e);
    }
  }
  return null;
}","public static Topology retrieveTopology(){
  Object dataObj=RegistryManager.getInstance().read(CloudControllerConstants.TOPOLOGY_RESOURCE);
  if (dataObj != null) {
    try {
      if (dataObj instanceof Topology) {
        return (Topology)dataObj;
      }
 else {
        return null;
      }
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"";
      log.warn(msg,e);
    }
  }
  return null;
}",0.904601571268238
116146,"/** 
 * Get kill behaviour related to a Group
 * @param serviceGroupName Group name
 * @return String indicating the kill behavior
 * @throws ApplicationDefinitionException if an error occurs
 */
private String getKillbehaviour(String serviceGroupName) throws ApplicationDefinitionException {
}","/** 
 * Get kill behaviour related to a Group
 * @param serviceGroupName Group name
 * @return String indicating the kill behavior
 * @throws ApplicationDefinitionException if an error occurs
 */
private String getKillbehaviour(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
}",0.9576547231270358
116147,"/** 
 * Parse Group information
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxts  Group information
 * @param subscribableInformation Subscribable Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return Map [alias -> Group]
 * @throws ApplicationDefinitionException if an error occurs in parsing Group Information
 */
private Map<String,Group> parseGroups(String appId,int tenantId,String key,List<GroupContext> groupCtxts,Map<String,SubscribableInfoContext> subscribableInformation,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  Map<String,Group> groupAliasToGroup=new HashMap<String,Group>();
  for (  GroupContext groupCtxt : groupCtxts) {
    Group group=parseGroup(appId,tenantId,key,groupCtxt,subscribableInformation,definedGroupCtxts);
    groupAliasToGroup.put(group.getAlias(),group);
  }
  Set<Group> nestedGroups=new HashSet<Group>();
  getNestedGroupContexts(nestedGroups,groupAliasToGroup.values());
  filterDuplicatedGroupContexts(groupAliasToGroup.values(),nestedGroups);
  return groupAliasToGroup;
}","/** 
 * Parse Group information
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxts  Group information
 * @param subscribableInformation Subscribable Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return Map [alias -> Group]
 * @throws ApplicationDefinitionException if an error occurs in parsing Group Information
 */
private Map<String,Group> parseGroups(String appId,int tenantId,String key,List<GroupContext> groupCtxts,Map<String,SubscribableInfoContext> subscribableInformation,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  Map<String,Group> groupAliasToGroup=new HashMap<String,Group>();
  for (  GroupContext groupCtxt : groupCtxts) {
    ServiceGroup serviceGroup=getServiceGroup(groupCtxt.getName());
    Group group=parseGroup(appId,tenantId,key,groupCtxt,subscribableInformation,definedGroupCtxts,serviceGroup);
    groupAliasToGroup.put(group.getAlias(),group);
  }
  Set<Group> nestedGroups=new HashSet<Group>();
  getNestedGroupContexts(nestedGroups,groupAliasToGroup.values());
  filterDuplicatedGroupContexts(groupAliasToGroup.values(),nestedGroups);
  return groupAliasToGroup;
}",0.9594966574911522
116148,"/** 
 * Checks if group scaling is enabled for Service Group with name serviceGroupName
 * @param serviceGroupName name of the Service Group
 * @return true if group scaling is enabled, else false
 * @throws ApplicationDefinitionException if no Service Group found for the given serviceGroupName
 */
private boolean isGroupScalingEnabled(String serviceGroupName) throws ApplicationDefinitionException {
  ServiceGroup serviceGroup=getServiceGroup(serviceGroupName);
  if (serviceGroup == null) {
    handleError(""String_Node_Str"" + serviceGroupName);
  }
  return serviceGroup.isGroupscalingEnabled();
}","/** 
 * Checks if group scaling is enabled for Service Group with name serviceGroupName
 * @param serviceGroupName name of the Service Group
 * @return true if group scaling is enabled, else false
 * @throws ApplicationDefinitionException if no Service Group found for the given serviceGroupName
 */
private boolean isGroupScalingEnabled(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  ServiceGroup nestedGroup=getNestedServiceGroup(serviceGroupName,serviceGroup);
  if (nestedGroup == null) {
    handleError(""String_Node_Str"" + serviceGroupName);
  }
  return nestedGroup.isGroupscalingEnabled();
}",0.9326923076923076
116149,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName()));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  group.setGroupScalingEnabled(groupCtxt.isGroupScalingEnabled());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      if (subGroupCtxt != null) {
        Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
        nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  group.setGroupScalingEnabled(groupCtxt.isGroupScalingEnabled());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts,serviceGroup);
        nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.8751311647429171
116150,"/** 
 * Find the startup order
 * @param groupContext GroupContext with Group defintion information
 * @return Set of Startup Orders which are defined in the Group
 * @throws ApplicationDefinitionException
 */
private String[] getStartupOrderForGroup(GroupContext groupContext) throws ApplicationDefinitionException {
}","/** 
 * Find the startup order
 * @param groupContext GroupContext with Group defintion information
 * @return Set of Startup Orders which are defined in the Group
 * @throws ApplicationDefinitionException
 */
private String[] getStartupOrderForGroup(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
}",0.8912386706948641
116151,"/** 
 * @param childId
 */
protected void onChildInactiveEvent(String childId,String instanceId){
  List<ApplicationChildContext> terminationList;
  Monitor monitor;
  terminationList=this.startupDependencyTree.getTerminationDependencies(childId);
  ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
  if (this.startupDependencyTree.getTerminationBehavior() == DependencyTree.TerminationBehavior.TERMINATE_ALL && terminationList.size() == this.aliasToActiveMonitorsMap.size()) {
    if (this.parent != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(this.appId,childId,instanceId);
    }
 else {
      sendTerminatingEventOnNotification(terminationList,childId,true,instanceId);
    }
    log.info(""String_Node_Str"" + childId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    sendTerminatingEventOnNotification(terminationList,childId,false,instanceId);
  }
}","/** 
 * @param childId
 */
protected void onChildInactiveEvent(String childId,String instanceId){
  List<ApplicationChildContext> terminationList;
  Monitor monitor;
  terminationList=this.startupDependencyTree.getTerminationDependencies(childId);
  ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
  if (this.startupDependencyTree.getTerminationBehavior() == DependencyTree.TerminationBehavior.TERMINATE_ALL && terminationList.size() == this.aliasToActiveMonitorsMap.size()) {
    if (this.parent != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(this.appId,this.id,instanceId);
    }
 else {
      sendTerminatingEventOnNotification(terminationList,childId,true,instanceId);
    }
    log.info(""String_Node_Str"" + childId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    sendTerminatingEventOnNotification(terminationList,childId,false,instanceId);
  }
}",0.9935965848452508
116152,"/** 
 * @param childId
 */
protected void onChildInactiveEvent(String childId,String instanceId){
  List<ApplicationChildContext> terminationList;
  Monitor monitor;
  terminationList=this.startupDependencyTree.getTerminationDependencies(childId);
  ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
  if (this.startupDependencyTree.getTerminationBehavior() == DependencyTree.TerminationBehavior.TERMINATE_ALL && terminationList.size() == this.aliasToActiveMonitorsMap.size()) {
    if (this.parent != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(this.appId,childId,instanceId);
    }
 else {
      sendTerminatingEventOnNotification(terminationList,childId,true,instanceId);
    }
    log.info(""String_Node_Str"" + childId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    sendTerminatingEventOnNotification(terminationList,childId,false,instanceId);
  }
}","/** 
 * @param childId
 */
protected void onChildInactiveEvent(String childId,String instanceId){
  List<ApplicationChildContext> terminationList;
  Monitor monitor;
  terminationList=this.startupDependencyTree.getTerminationDependencies(childId);
  ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
  if (this.startupDependencyTree.getTerminationBehavior() == DependencyTree.TerminationBehavior.TERMINATE_ALL && terminationList.size() == this.aliasToActiveMonitorsMap.size()) {
    if (this.parent != null) {
      ApplicationBuilder.handleGroupTerminatingEvent(this.appId,this.id,instanceId);
    }
 else {
      sendTerminatingEventOnNotification(terminationList,childId,true,instanceId);
    }
    log.info(""String_Node_Str"" + childId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    sendTerminatingEventOnNotification(terminationList,childId,false,instanceId);
  }
}",0.9935965848452508
116153,"public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember && !stop) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            if (paritionAlgo == null) {
              paritionAlgo=""String_Node_Str"";
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext.getPartitionAlgorithm());
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}","public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember && !stop) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            if (paritionAlgo == null) {
              paritionAlgo=""String_Node_Str"";
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext.getPartitionAlgorithm());
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}",0.9686003193187864
116154,"private boolean validateDeploymentPolicy(DeploymentPolicy deploymentPolicy){
  for (  ChildPolicy childPolicy : deploymentPolicy.getChildPolicies()) {
    String alias=childPolicy.getId();
    ApplicationHolder.acquireReadLock();
    List<Partition> partitionList=new ArrayList<Partition>();
    for (    ChildLevelNetworkPartition networkPartition : childPolicy.getChildLevelNetworkPartitions()) {
      Partition[] partitions=deploymentPolicy.getApplicationLevelNetworkPartition(networkPartition.getId()).getPartitions();
      for (      Partition partition : partitions) {
        partitionList.add(partition);
      }
    }
    try {
      Application application=ApplicationHolder.getApplications().getApplication(deploymentPolicy.getApplicationId());
      Partition[] partitions=new Partition[partitionList.size()];
      Group group=application.getGroupRecursively(alias);
      if (group != null) {
        Set<ClusterDataHolder> clusterDataHolders=group.getClusterDataHoldersOfGroup();
        for (        ClusterDataHolder clusterDataHolder : clusterDataHolders) {
          CloudControllerClient.getInstance().validateDeploymentPolicy(clusterDataHolder.getServiceType(),partitionList.toArray(partitions));
        }
      }
 else {
        ClusterDataHolder clusterDataHolder=application.getClusterDataHolderRecursivelyByAlias(alias);
        if (clusterDataHolder != null) {
          CloudControllerClient.getInstance().validateDeploymentPolicy(clusterDataHolder.getServiceType(),partitionList.toArray(partitions));
        }
      }
    }
 catch (    PartitionValidationException e) {
      log.error(""String_Node_Str"",e);
    }
 finally {
      ApplicationHolder.releaseReadLock();
    }
  }
  return true;
}","private boolean validateDeploymentPolicy(DeploymentPolicy deploymentPolicy){
  for (  ChildPolicy childPolicy : deploymentPolicy.getChildPolicies()) {
    String alias=childPolicy.getId();
    ApplicationHolder.acquireReadLock();
    List<Partition> partitionList=new ArrayList<Partition>();
    for (    ChildLevelNetworkPartition networkPartition : childPolicy.getChildLevelNetworkPartitions()) {
      Partition[] partitions=deploymentPolicy.getApplicationLevelNetworkPartition(networkPartition.getId()).getPartitions();
      for (      Partition partition : partitions) {
        partitionList.add(partition);
      }
    }
    try {
      Application application=ApplicationHolder.getApplications().getApplication(deploymentPolicy.getApplicationId());
      Partition[] partitions=new Partition[partitionList.size()];
      if (application != null) {
        Group group=application.getGroupRecursively(alias);
        if (group != null) {
          Set<ClusterDataHolder> clusterDataHolders=group.getClusterDataHoldersOfGroup();
          for (          ClusterDataHolder clusterDataHolder : clusterDataHolders) {
            CloudControllerClient.getInstance().validateDeploymentPolicy(clusterDataHolder.getServiceType(),partitionList.toArray(partitions));
          }
        }
 else {
          ClusterDataHolder clusterDataHolder=application.getClusterDataHolderRecursivelyByAlias(alias);
          if (clusterDataHolder != null) {
            CloudControllerClient.getInstance().validateDeploymentPolicy(clusterDataHolder.getServiceType(),partitionList.toArray(partitions));
          }
 else {
            String msg=""String_Node_Str"" + ""String_Node_Str"" + alias;
            log.error(msg);
            throw new TopologyInConsistentException(msg);
          }
        }
      }
 else {
        String msg=""String_Node_Str"" + deploymentPolicy.getApplicationId();
        log.error(msg);
        throw new TopologyInConsistentException(msg);
      }
    }
 catch (    PartitionValidationException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"",e);
    }
 finally {
      ApplicationHolder.releaseReadLock();
    }
  }
  return true;
}",0.8126422250316055
116155,"public GroupLevelPartitionContext(int max,String partitionId,String networkPartitionIid){
  super(max,partitionId,networkPartitionIid);
  this.pendingInstances=new ArrayList<Instance>();
  this.activeInstances=new ArrayList<Instance>();
  this.terminationPendingInstances=new ArrayList<Instance>();
  this.obsoletedInstances=new ConcurrentHashMap<String,Instance>();
  instanceStatsContexts=new ConcurrentHashMap<String,MemberStatsContext>();
  terminationPendingStartedTime=new HashMap<String,Long>();
  XMLConfiguration conf=ConfUtil.getInstance(null).getConfiguration();
  pendingInstanceExpiryTime=conf.getLong(StratosConstants.PENDING_VM_MEMBER_EXPIRY_TIMEOUT,900000);
  obsoltedInstanceExpiryTime=conf.getLong(StratosConstants.OBSOLETED_VM_MEMBER_EXPIRY_TIMEOUT,86400000);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + pendingInstanceExpiryTime);
    log.debug(""String_Node_Str"" + obsoltedInstanceExpiryTime);
  }
}","public GroupLevelPartitionContext(String partitionId,String networkPartitionIid){
  super(partitionId,networkPartitionIid);
  this.pendingInstances=new ArrayList<Instance>();
  this.activeInstances=new ArrayList<Instance>();
  this.terminationPendingInstances=new ArrayList<Instance>();
  this.obsoletedInstances=new ConcurrentHashMap<String,Instance>();
  instanceStatsContexts=new ConcurrentHashMap<String,MemberStatsContext>();
  terminationPendingStartedTime=new HashMap<String,Long>();
  XMLConfiguration conf=ConfUtil.getInstance(null).getConfiguration();
  pendingInstanceExpiryTime=conf.getLong(StratosConstants.PENDING_VM_MEMBER_EXPIRY_TIMEOUT,900000);
  obsoltedInstanceExpiryTime=conf.getLong(StratosConstants.OBSOLETED_VM_MEMBER_EXPIRY_TIMEOUT,86400000);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + pendingInstanceExpiryTime);
    log.debug(""String_Node_Str"" + obsoltedInstanceExpiryTime);
  }
}",0.9935691318327974
116156,"public PartitionContext(int max,String partitionId,String networkPartitionId){
  this.max=max;
  this.partitionId=partitionId;
  this.networkPartitionId=networkPartitionId;
}","public PartitionContext(String partitionId,String networkPartitionId){
  this.partitionId=partitionId;
  this.networkPartitionId=networkPartitionId;
}",0.925925925925926
116157,"/** 
 * Finds the correct partition context to which the instance should be added to and created and adds required context objects.
 * @param parentInstanceContext   the parent instance context
 * @param networkPartitionContext the GroupLevelNetworkPartitionContext
 * @return the partition context
 */
private void addPartitionContext(Instance parentInstanceContext,GroupLevelNetworkPartitionContext networkPartitionContext){
  String networkPartitionId=parentInstanceContext.getNetworkPartitionId();
  List<GroupLevelPartitionContext> childPartitionContexts;
  ChildPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(this.appId).getChildPolicy(this.id);
  PartitionContext partitionContext;
  String parentPartitionId=parentInstanceContext.getPartitionId();
  if (policy == null) {
    if (parentPartitionId != null && networkPartitionContext.getPartitionCtxt(parentPartitionId) != null) {
      partitionContext=new GroupLevelPartitionContext(0);
      networkPartitionContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + parentPartitionId + ""String_Node_Str""+ ""String_Node_Str""+ this.id);
      }
    }
  }
 else {
    ChildLevelNetworkPartition networkPartition=policy.getChildLevelNetworkPartition(networkPartitionId);
    if (networkPartitionContext.getPartitionCtxts().isEmpty()) {
      ChildLevelPartition[] childLevelPartitions=networkPartition.getChildLevelPartitions();
      childPartitionContexts=new ArrayList<GroupLevelPartitionContext>();
      for (      ChildLevelPartition childLevelPartition : childLevelPartitions) {
        partitionContext=new GroupLevelPartitionContext(childLevelPartition.getMax(),childLevelPartition.getPartitionId(),networkPartitionId);
        childPartitionContexts.add((GroupLevelPartitionContext)partitionContext);
        networkPartitionContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + childLevelPartition.getPartitionId() + ""String_Node_Str""+ this.id);
        }
      }
    }
  }
}","/** 
 * Finds the correct partition context to which the instance should be added to and created and adds required context objects.
 * @param parentInstanceContext   the parent instance context
 * @param networkPartitionContext the GroupLevelNetworkPartitionContext
 * @return the partition context
 */
private void addPartitionContext(Instance parentInstanceContext,GroupLevelNetworkPartitionContext networkPartitionContext){
  String networkPartitionId=parentInstanceContext.getNetworkPartitionId();
  List<GroupLevelPartitionContext> childPartitionContexts;
  ChildPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(this.appId).getChildPolicy(this.id);
  PartitionContext partitionContext;
  String parentPartitionId=parentInstanceContext.getPartitionId();
  if (policy == null) {
    if (parentPartitionId != null && networkPartitionContext.getPartitionCtxt(parentPartitionId) == null) {
      partitionContext=new GroupLevelPartitionContext(parentPartitionId,networkPartitionId);
      networkPartitionContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + parentPartitionId + ""String_Node_Str""+ ""String_Node_Str""+ this.id);
      }
    }
  }
 else {
    ChildLevelNetworkPartition networkPartition=policy.getChildLevelNetworkPartition(networkPartitionId);
    if (networkPartitionContext.getPartitionCtxts().isEmpty()) {
      ChildLevelPartition[] childLevelPartitions=networkPartition.getChildLevelPartitions();
      childPartitionContexts=new ArrayList<GroupLevelPartitionContext>();
      for (      ChildLevelPartition childLevelPartition : childLevelPartitions) {
        partitionContext=new GroupLevelPartitionContext(childLevelPartition.getMax(),childLevelPartition.getPartitionId(),networkPartitionId);
        childPartitionContexts.add((GroupLevelPartitionContext)partitionContext);
        networkPartitionContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + childLevelPartition.getPartitionId() + ""String_Node_Str""+ this.id);
        }
      }
    }
  }
}",0.9910076089462764
116158,"private ClusterDataHolder getClusterDataByAlias(String alias,Collection<Group> groups){
  for (  Group group : groups) {
    if (group.getClusterDataMap() != null && !group.getClusterDataMap().isEmpty()) {
      if (group.getClusterData(alias) != null) {
        return group.getClusterData(alias);
      }
    }
 else {
      if (group.getGroups() != null) {
        return getClusterDataByAlias(alias,group.getGroups());
      }
    }
  }
  return null;
}","private ClusterDataHolder getClusterDataByAlias(String alias,Collection<Group> groups){
  for (  Group group : groups) {
    if (group.getClusterDataMap() != null && !group.getClusterDataMap().isEmpty()) {
      if (group.getClusterData(alias) != null) {
        return group.getClusterData(alias);
      }
    }
  }
  for (  Group group : groups) {
    if (group.getGroups() != null) {
      return getClusterDataByAlias(alias,group.getGroups());
    }
  }
  return null;
}",0.9409237379162192
116159,"public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (instance.getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember && !stop) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",true);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
      for (      final ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}","public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (instance.getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember && !stop) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
      for (      final ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}",0.8274320668156687
116160,"/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination() throws TopologyInConsistentException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependenciesByTermination();
}","/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination(String parentInstanceId) throws TopologyInConsistentException {
}",0.8038674033149171
116161,"/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      this.startDependencyOnTermination();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}","/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      this.startDependencyOnTermination(parentInstanceId);
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}",0.994256999282125
116162,"/** 
 * Get kill behaviour related to a Group
 * @param serviceGroupName Group name
 * @return String indicating the kill behavior
 * @throws ApplicationDefinitionException if an error occurs
 */
private String getKillbehaviour(String serviceGroupName) throws ApplicationDefinitionException {
}","/** 
 * Get kill behaviour related to a Group
 * @param serviceGroupName Group name
 * @return String indicating the kill behavior
 * @throws ApplicationDefinitionException if an error occurs
 */
private String getKillbehaviour(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
}",0.9576547231270358
116163,"/** 
 * Parse Group information
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxts  Group information
 * @param subscribableInformation Subscribable Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return Map [alias -> Group]
 * @throws ApplicationDefinitionException if an error occurs in parsing Group Information
 */
private Map<String,Group> parseGroups(String appId,int tenantId,String key,List<GroupContext> groupCtxts,Map<String,SubscribableInfoContext> subscribableInformation,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  Map<String,Group> groupAliasToGroup=new HashMap<String,Group>();
  for (  GroupContext groupCtxt : groupCtxts) {
    Group group=parseGroup(appId,tenantId,key,groupCtxt,subscribableInformation,definedGroupCtxts);
    groupAliasToGroup.put(group.getAlias(),group);
  }
  Set<Group> nestedGroups=new HashSet<Group>();
  getNestedGroupContexts(nestedGroups,groupAliasToGroup.values());
  filterDuplicatedGroupContexts(groupAliasToGroup.values(),nestedGroups);
  return groupAliasToGroup;
}","/** 
 * Parse Group information
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxts  Group information
 * @param subscribableInformation Subscribable Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return Map [alias -> Group]
 * @throws ApplicationDefinitionException if an error occurs in parsing Group Information
 */
private Map<String,Group> parseGroups(String appId,int tenantId,String key,List<GroupContext> groupCtxts,Map<String,SubscribableInfoContext> subscribableInformation,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  Map<String,Group> groupAliasToGroup=new HashMap<String,Group>();
  for (  GroupContext groupCtxt : groupCtxts) {
    ServiceGroup serviceGroup=getServiceGroup(groupCtxt.getName());
    Group group=parseGroup(appId,tenantId,key,groupCtxt,subscribableInformation,definedGroupCtxts,serviceGroup);
    groupAliasToGroup.put(group.getAlias(),group);
  }
  Set<Group> nestedGroups=new HashSet<Group>();
  getNestedGroupContexts(nestedGroups,groupAliasToGroup.values());
  filterDuplicatedGroupContexts(groupAliasToGroup.values(),nestedGroups);
  return groupAliasToGroup;
}",0.9594966574911522
116164,"/** 
 * Checks if group scaling is enabled for Service Group with name serviceGroupName
 * @param serviceGroupName name of the Service Group
 * @return true if group scaling is enabled, else false
 * @throws ApplicationDefinitionException if no Service Group found for the given serviceGroupName
 */
private boolean isGroupScalingEnabled(String serviceGroupName) throws ApplicationDefinitionException {
  ServiceGroup serviceGroup=getServiceGroup(serviceGroupName);
  if (serviceGroup == null) {
    handleError(""String_Node_Str"" + serviceGroupName);
  }
  return serviceGroup.isGroupscalingEnabled();
}","/** 
 * Checks if group scaling is enabled for Service Group with name serviceGroupName
 * @param serviceGroupName name of the Service Group
 * @return true if group scaling is enabled, else false
 * @throws ApplicationDefinitionException if no Service Group found for the given serviceGroupName
 */
private boolean isGroupScalingEnabled(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  ServiceGroup nestedGroup=getNestedServiceGroup(serviceGroupName,serviceGroup);
  if (nestedGroup == null) {
    handleError(""String_Node_Str"" + serviceGroupName);
  }
  return nestedGroup.isGroupscalingEnabled();
}",0.9326923076923076
116165,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName()));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  group.setGroupScalingEnabled(groupCtxt.isGroupScalingEnabled());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      if (subGroupCtxt != null) {
        Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
        nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName(),serviceGroup));
  group.setGroupMinInstances(groupCtxt.getGroupMinInstances());
  group.setGroupMaxInstances(groupCtxt.getGroupMaxInstances());
  group.setGroupScalingEnabled(groupCtxt.isGroupScalingEnabled());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt.getName(),serviceGroup);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName(),serviceGroup));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getCartridgeContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getCartridgeContexts()));
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      if (subGroupCtxt != null) {
        Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts,serviceGroup);
        nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
      }
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.8751311647429171
116166,"/** 
 * Find the startup order
 * @param groupContext GroupContext with Group defintion information
 * @return Set of Startup Orders which are defined in the Group
 * @throws ApplicationDefinitionException
 */
private String[] getStartupOrderForGroup(GroupContext groupContext) throws ApplicationDefinitionException {
}","/** 
 * Find the startup order
 * @param groupContext GroupContext with Group defintion information
 * @return Set of Startup Orders which are defined in the Group
 * @throws ApplicationDefinitionException
 */
private String[] getStartupOrderForGroup(String serviceGroupName,ServiceGroup serviceGroup) throws ApplicationDefinitionException {
}",0.8912386706948641
116167,"/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination(String parentInstanceId) throws TopologyInConsistentException {
}","/** 
 * This will start the parallel dependencies at once from the top level by traversing to find the terminated dependencies. it will get invoked when start a child monitor on termination of a sub tree
 */
public void startDependencyOnTermination() throws TopologyInConsistentException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependenciesByTermination();
  for (  ApplicationChildContext context : applicationContexts) {
    if (context instanceof GroupChildContext) {
      GroupMonitor groupMonitor=(GroupMonitor)this.aliasToActiveMonitorsMap.get(context.getId());
    }
 else     if (context instanceof ClusterChildContext) {
    }
  }
}",0.5773809523809523
116168,"/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      this.startDependencyOnTermination(parentInstanceId);
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}","/** 
 * Act upon one of its children got terminated
 * @param eventId id of the notifier
 */
protected void onChildTerminatedEvent(String eventId,String instanceId){
  List<ApplicationChildContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationChildContext context=this.startupDependencyTree.findApplicationContextWithIdInPrimaryTree(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationChildContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  boolean allParentsActive=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts,instanceId);
    allParentsActive=allParentActive(parentContexts,instanceId);
  }
  if ((terminationList.isEmpty() || allDependentTerminated) && (parentContexts.isEmpty() || parentsTerminated || allParentsActive)) {
    try {
      this.startDependencyOnTermination();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    log.info(""String_Node_Str"");
  }
}",0.994256999282125
116169,"@Override protected void onEvent(Event event){
  ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
  String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
  if (clusterMonitor != null) {
    TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    try {
      Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
      if (service != null) {
        Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
        if (cluster != null) {
          try {
            if (cluster.isKubernetesCluster()) {
              clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
            }
 else {
              VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
              if (clusterContext == null) {
                clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                clusterMonitor.setClusterContext(clusterContext);
              }
              clusterContext.addInstanceContext(instanceId,cluster);
              if (clusterMonitor.getInstance(instanceId) == null) {
                ClusterInstance clusterInstance=cluster.getInstanceContexts(instanceId);
                ClusterInstance instance=new ClusterInstance(clusterInstance.getAlias(),cluster.getClusterId(),clusterInstance.getInstanceId());
                instance.setParentId(clusterInstance.getParentId());
                instance.setNetworkPartitionId(clusterInstance.getNetworkPartitionId());
                instance.setPartitionId(clusterInstance.getPartitionId());
                instance.setStatus(clusterInstance.getStatus());
                clusterMonitor.addInstance(instance);
              }
            }
            if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
              clusterMonitor.startScheduler();
              log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
            }
          }
 catch (          PolicyValidationException e) {
            log.error(e.getMessage(),e);
          }
catch (          PartitionValidationException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
      }
    }
  finally {
      TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    }
  }
 else {
    log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
  }
}","@Override protected void onEvent(Event event){
  ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
  ClusterInstance clusterInstance=((ClusterInstanceCreatedEvent)event).getClusterInstance();
  String instanceId=clusterInstance.getInstanceId();
  if (clusterMonitor != null) {
    TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    try {
      Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
      if (service != null) {
        Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
        if (cluster != null) {
          try {
            if (cluster.isKubernetesCluster()) {
              clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
            }
 else {
              VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
              if (clusterContext == null) {
                clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                clusterMonitor.setClusterContext(clusterContext);
              }
              clusterContext.addInstanceContext(instanceId,cluster);
              if (clusterMonitor.getInstance(instanceId) == null) {
                ClusterInstance clusterInstance1=cluster.getInstanceContexts(instanceId);
                clusterMonitor.addInstance(clusterInstance1);
              }
            }
            if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
              clusterMonitor.startScheduler();
              log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
            }
          }
 catch (          PolicyValidationException e) {
            log.error(e.getMessage(),e);
          }
catch (          PartitionValidationException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
      }
    }
  finally {
      TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    }
  }
 else {
    log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
  }
}",0.8905187835420394
116170,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (AutoscalerUtil.allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
          if (policy != null && !AutoscalerContext.getInstance().containsPendingMonitor(appId)) {
            AutoscalerUtil.getInstance().startApplicationMonitor(appId);
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceActivatedEvent clusterActivatedEvent=(ClusterInstanceActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      String instanceId=clusterActivatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Active,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      String instanceId=clusterResetEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.notifyParentMonitor(ClusterStatus.Created,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceInactivateEvent clusterInactivateEvent=(ClusterInstanceInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      String instanceId=clusterInactivateEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Inactive,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatingEvent clusterTerminatingEvent=(ClusterInstanceTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      ClusterInstance clusterInstance=(ClusterInstance)monitor.getInstance(instanceId);
      if (clusterInstance.getCurrentState() == ClusterStatus.Active) {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId,instanceId);
      }
 else {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        monitor.terminateAllMembers(instanceId,clusterInstance.getNetworkPartitionId());
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatedEvent clusterTerminatedEvent=(ClusterInstanceTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      String instanceId=clusterTerminatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      ApplicationMonitor appMonitor=null;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,instanceId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Terminated,instanceId);
      monitor.removeInstance(instanceId);
      if (!monitor.hasInstance() && appMonitor.isTerminating()) {
        monitor.destroy();
        AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                if (cluster.isKubernetesCluster()) {
                  clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
                }
 else {
                  VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                  if (clusterContext == null) {
                    clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                    clusterMonitor.setClusterContext(clusterContext);
                  }
                  clusterContext.addInstanceContext(instanceId,cluster);
                  if (clusterMonitor.getInstance(instanceId) == null) {
                    ClusterInstance clusterInstance=cluster.getInstanceContexts(instanceId);
                    ClusterInstance instance=new ClusterInstance(clusterInstance.getAlias(),cluster.getClusterId(),clusterInstance.getInstanceId());
                    instance.setParentId(clusterInstance.getParentId());
                    instance.setNetworkPartitionId(clusterInstance.getNetworkPartitionId());
                    instance.setPartitionId(clusterInstance.getPartitionId());
                    instance.setStatus(clusterInstance.getStatus());
                    clusterMonitor.addInstance(instance);
                  }
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (AutoscalerUtil.allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
          if (policy != null && !AutoscalerContext.getInstance().containsPendingMonitor(appId)) {
            AutoscalerUtil.getInstance().startApplicationMonitor(appId);
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceActivatedEvent clusterActivatedEvent=(ClusterInstanceActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      String instanceId=clusterActivatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Active,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      String instanceId=clusterResetEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.notifyParentMonitor(ClusterStatus.Created,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceInactivateEvent clusterInactivateEvent=(ClusterInstanceInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      String instanceId=clusterInactivateEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Inactive,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatingEvent clusterTerminatingEvent=(ClusterInstanceTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      ClusterInstance clusterInstance=(ClusterInstance)monitor.getInstance(instanceId);
      if (clusterInstance.getCurrentState() == ClusterStatus.Active) {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId,instanceId);
      }
 else {
        monitor.notifyParentMonitor(ClusterStatus.Terminating,instanceId);
        monitor.terminateAllMembers(instanceId,clusterInstance.getNetworkPartitionId());
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInstanceTerminatedEvent clusterTerminatedEvent=(ClusterInstanceTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      String instanceId=clusterTerminatedEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      ApplicationMonitor appMonitor=null;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,instanceId));
        }
        return;
      }
      monitor.notifyParentMonitor(ClusterStatus.Terminated,instanceId);
      monitor.removeInstance(instanceId);
      if (!monitor.hasInstance() && appMonitor.isTerminating()) {
        monitor.destroy();
        AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      ClusterInstance clusterInstance=((ClusterInstanceCreatedEvent)event).getClusterInstance();
      String instanceId=clusterInstance.getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                if (cluster.isKubernetesCluster()) {
                  clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
                }
 else {
                  VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                  if (clusterContext == null) {
                    clusterContext=ClusterContextFactory.getVMClusterContext(instanceId,cluster);
                    clusterMonitor.setClusterContext(clusterContext);
                  }
                  clusterContext.addInstanceContext(instanceId,cluster);
                  if (clusterMonitor.getInstance(instanceId) == null) {
                    ClusterInstance clusterInstance1=cluster.getInstanceContexts(instanceId);
                    clusterMonitor.addInstance(clusterInstance1);
                  }
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}",0.9798896959913908
116171,"public static void sendClusterInstanceCreatedEvent(ClusterInstanceCreatedEvent clusterInstanceCreatedEvent){
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId(),clusterInstanceCreatedEvent.getNetworkPartitionId(),clusterInstanceCreatedEvent.getInstanceId()));
  }
  publishEvent(clusterInstanceCreatedEvent);
}","public static void sendClusterInstanceCreatedEvent(ClusterInstanceCreatedEvent clusterInstanceCreatedEvent){
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId(),clusterInstanceCreatedEvent.getNetworkPartitionId(),clusterInstanceCreatedEvent.getClusterInstance().getInstanceId()));
  }
  publishEvent(clusterInstanceCreatedEvent);
}",0.97669256381798
116172,"/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLB if this cluster is an LB
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLB,String[] dependencyAliases,Properties properties) throws ApplicationDefinitionException {
  PayloadData payloadData=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases,properties);
  payloadData.add(""String_Node_Str"",createToken(appId));
  String textPayload=payloadData.toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB);
}","/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLB if this cluster is an LB
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLB,String[] dependencyAliases,Properties properties) throws ApplicationDefinitionException {
  PayloadData payloadData=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases,properties);
  String textPayload=payloadData.toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB);
}",0.9807106598984772
116173,"/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=group.getGroupMinInstances();
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        if (parentPartitionId == null) {
          AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
          partitionContext=algorithm.getNextScaleUpPartitionContext((PartitionContext[])groupLevelNetworkPartitionContext.getPartitionCtxts().toArray());
        }
 else {
          partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
        }
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}","/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=group.getGroupMinInstances();
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        List<GroupLevelPartitionContext> partitionContexts=groupLevelNetworkPartitionContext.getPartitionCtxts();
        GroupLevelPartitionContext[] groupLevelPartitionContexts=new GroupLevelPartitionContext[partitionContexts.size()];
        if (parentPartitionId == null) {
          AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
          partitionContext=algorithm.getNextScaleUpPartitionContext((partitionContexts.toArray(groupLevelPartitionContexts)));
        }
 else {
          partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
        }
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}",0.931384015594542
116174,"public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInstanceTerminatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Terminated;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceTerminatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.986784140969163
116175,"public static void handleGroupTerminatingEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    GroupInstance context=group.getInstanceContexts(instanceId);
    GroupStatus status=GroupStatus.Terminating;
    if (context != null) {
      if (context.isStateTransitionValid(status)) {
        updateGroupMonitor(appId,groupId,status,instanceId);
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendGroupInstanceTerminatingEvent(appId,groupId,instanceId);
      }
 else {
        log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
      }
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}","public static void handleGroupTerminatingEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    GroupInstance context=group.getInstanceContexts(instanceId);
    GroupStatus status=GroupStatus.Terminating;
    if (context != null) {
      if (context.isStateTransitionValid(status)) {
        context.setStatus(status);
        updateGroupMonitor(appId,groupId,status,instanceId);
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendGroupInstanceTerminatingEvent(appId,groupId,instanceId);
      }
 else {
        log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
      }
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}",0.9873417721518988
116176,"public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    Set<ClusterDataHolder> clusterData=application.getClusterDataRecursively();
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (application.isStateTransitionValid(status,instanceId)) {
      application.setStatus(status,instanceId);
      updateApplicationMonitor(appId,status,instanceId);
      AutoscalerContext.getInstance().removeAppMonitor(appId);
      ApplicationHolder.removeApplication(appId);
      log.info(""String_Node_Str"" + appId);
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,clusterData);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}","public static void handleApplicationInstanceTerminatedEvent(String appId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    Set<ClusterDataHolder> clusterData=application.getClusterDataRecursively();
    ApplicationInstance instance=application.getInstanceContexts(instanceId);
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (instance.isStateTransitionValid(status)) {
      instance.setStatus(status);
      application.removeInstance(instanceId);
      updateApplicationMonitor(appId,status,instanceId);
      if (application.getInstanceContextCount() == 0) {
        AutoscalerContext.getInstance().removeAppMonitor(appId);
        ApplicationHolder.removeApplication(appId);
        log.info(""String_Node_Str"" + appId);
      }
      ApplicationsEventPublisher.sendApplicationInstanceTerminatedEvent(appId,clusterData);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getInstanceContexts(instanceId).getStatus(),status));
    }
  }
}",0.744804655029094
116177,"public static GroupInstance handleGroupInstanceCreatedEvent(String appId,String groupId,String parentId,String networkPartitionId,String instanceId,String partitionId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  GroupInstance instance=null;
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return instance;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return instance;
  }
  GroupStatus status=GroupStatus.Created;
  if (!group.containsInstanceContext(instanceId)) {
    instance=new GroupInstance(groupId,instanceId);
    instance.setParentId(parentId);
    instance.setPartitionId(partitionId);
    instance.setNetworkPartitionId(networkPartitionId);
    instance.setStatus(status);
    group.addInstance(instanceId,instance);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupInstanceCreatedEvent(appId,groupId,instance);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
  return instance;
}","public static GroupInstance handleGroupInstanceCreatedEvent(String appId,String groupId,String parentId,String networkPartitionId,String instanceId,String partitionId){
  GroupInstance instance=null;
  ApplicationHolder.acquireWriteLock();
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
    }
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return instance;
    }
    Group group=application.getGroupRecursively(groupId);
    if (group == null) {
      log.warn(String.format(""String_Node_Str"",groupId));
      return instance;
    }
    GroupStatus status=GroupStatus.Created;
    if (!group.containsInstanceContext(instanceId)) {
      instance=new GroupInstance(groupId,instanceId);
      instance.setParentId(parentId);
      instance.setPartitionId(partitionId);
      instance.setNetworkPartitionId(networkPartitionId);
      instance.setStatus(status);
      group.addInstance(instanceId,instance);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceCreatedEvent(appId,groupId,instance);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return instance;
}",0.8633093525179856
116178,"public static ApplicationInstance handleApplicationInstanceCreatedEvent(String appId,String instanceId,String networkPartitionId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return null;
  }
  ApplicationStatus status=ApplicationStatus.Created;
  ApplicationInstance applicationInstance=null;
  if (!application.containsInstanceContext(instanceId)) {
    applicationInstance=new ApplicationInstance(appId,instanceId);
    applicationInstance.setStatus(status);
    applicationInstance.setNetworkPartitionId(networkPartitionId);
    application.addInstance(instanceId,applicationInstance);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationInstanceCreatedEvent(appId,applicationInstance);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId));
  }
  return applicationInstance;
}","public static ApplicationInstance handleApplicationInstanceCreatedEvent(String appId,String instanceId,String networkPartitionId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  ApplicationInstance applicationInstance=null;
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return null;
    }
    if (!application.containsInstanceContext(instanceId)) {
      applicationInstance=new ApplicationInstance(appId,instanceId);
      applicationInstance.setNetworkPartitionId(networkPartitionId);
      application.addInstance(instanceId,applicationInstance);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendApplicationInstanceCreatedEvent(appId,applicationInstance);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,instanceId));
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return applicationInstance;
}",0.7038174637999123
116179,"public static void handleGroupInstanceActivatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Active;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceActivatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInstanceActivatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Active;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceActivatedEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.9867203219315897
116180,"public static void handleGroupInActivateEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Inactive;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceInActivateEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}","public static void handleGroupInActivateEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupInstance context=group.getInstanceContexts(instanceId);
  GroupStatus status=GroupStatus.Inactive;
  if (context != null) {
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      updateGroupMonitor(appId,groupId,status,instanceId);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupInstanceInActivateEvent(appId,groupId,instanceId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ context.getStatus()+ ""String_Node_Str""+ status);
    }
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
}",0.9866774323778764
116181,"/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.policy.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.partition.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,List<String> parentInstanceIds) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    if (parentMonitor.hasGroupScalingDependent() || (context.isGroupScalingEnabled())) {
      clusterMonitor.setHasGroupScalingDependent(true);
    }
 else {
      clusterMonitor.setHasGroupScalingDependent(false);
    }
    for (    String parentInstanceId : parentInstanceIds) {
      Instance instance=parentMonitor.getInstance(parentInstanceId);
      String partitionId=null;
      if (instance instanceof GroupInstance) {
        partitionId=((GroupInstance)instance).getPartitionId();
      }
      if (instance != null) {
        ClusterInstance clusterInstance=cluster.getInstanceContexts(parentInstanceId);
        if (clusterInstance != null) {
          if (cluster.isKubernetesCluster()) {
            clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(clusterInstance.getInstanceId(),cluster));
          }
 else {
            VMClusterContext clusterContext;
            clusterContext=ClusterContextFactory.getVMClusterContext(clusterInstance.getInstanceId(),cluster);
            clusterMonitor.setClusterContext(clusterContext);
            clusterContext.addInstanceContext(parentInstanceId,cluster);
            if (clusterMonitor.getInstance(clusterInstance.getInstanceId()) == null) {
              clusterMonitor.addInstance(clusterInstance);
            }
          }
        }
 else {
          createClusterInstance(cluster.getServiceName(),clusterId,null,parentInstanceId,partitionId,instance.getNetworkPartitionId());
        }
      }
 else {
      }
      AutoscalerContext.getInstance().addClusterMonitor(clusterMonitor);
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}","/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.policy.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.partition.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,List<String> parentInstanceIds) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    if (parentMonitor.hasGroupScalingDependent() || (context.isGroupScalingEnabled())) {
      clusterMonitor.setHasGroupScalingDependent(true);
    }
 else {
      clusterMonitor.setHasGroupScalingDependent(false);
    }
    for (    String parentInstanceId : parentInstanceIds) {
      Instance parentMonitorInstance=parentMonitor.getInstance(parentInstanceId);
      String partitionId=null;
      if (parentMonitorInstance instanceof GroupInstance) {
        partitionId=parentMonitorInstance.getPartitionId();
      }
      if (parentMonitorInstance != null) {
        ClusterInstance clusterInstance=cluster.getInstanceContexts(parentInstanceId);
        if (clusterInstance != null) {
          if (cluster.isKubernetesCluster()) {
            clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(clusterInstance.getInstanceId(),cluster));
          }
 else {
            VMClusterContext clusterContext;
            clusterContext=ClusterContextFactory.getVMClusterContext(clusterInstance.getInstanceId(),cluster);
            clusterMonitor.setClusterContext(clusterContext);
            clusterContext.addInstanceContext(parentInstanceId,cluster);
            if (clusterMonitor.getInstance(clusterInstance.getInstanceId()) == null) {
              clusterMonitor.addInstance(clusterInstance);
            }
          }
        }
 else {
          createClusterInstance(cluster.getServiceName(),clusterId,null,parentInstanceId,partitionId,parentMonitorInstance.getNetworkPartitionId());
        }
      }
 else {
      }
      AutoscalerContext.getInstance().addClusterMonitor(clusterMonitor);
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}",0.9847306251800634
116182,"public static void handleClusterInstanceCreated(String serviceType,String clusterId,String alias,String instanceId,String partitionId,String networkPartitionId){
  TopologyManager.acquireWriteLock();
  try {
    Topology topology=TopologyManager.getTopology();
    Service service=topology.getService(serviceType);
    if (service == null) {
      log.error(""String_Node_Str"" + serviceType + ""String_Node_Str"");
      return;
    }
    Cluster cluster=service.getCluster(clusterId);
    if (cluster == null) {
      log.error(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
      return;
    }
    if (cluster.getInstanceContexts(instanceId) != null) {
      log.warn(""String_Node_Str"" + clusterId + ""String_Node_Str""+ instanceId);
      return;
    }
    cluster.addInstanceContext(instanceId,new ClusterInstance(alias,clusterId,instanceId));
    TopologyManager.updateTopology(topology);
    ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=new ClusterInstanceCreatedEvent(alias,serviceType,clusterId,instanceId,networkPartitionId);
    clusterInstanceCreatedEvent.setPartitionId(partitionId);
    TopologyEventPublisher.sendClusterInstanceCreatedEvent(clusterInstanceCreatedEvent);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}","public static void handleClusterInstanceCreated(String serviceType,String clusterId,String alias,String instanceId,String partitionId,String networkPartitionId){
  TopologyManager.acquireWriteLock();
  try {
    Topology topology=TopologyManager.getTopology();
    Service service=topology.getService(serviceType);
    if (service == null) {
      log.error(""String_Node_Str"" + serviceType + ""String_Node_Str"");
      return;
    }
    Cluster cluster=service.getCluster(clusterId);
    if (cluster == null) {
      log.error(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
      return;
    }
    if (cluster.getInstanceContexts(instanceId) != null) {
      log.warn(""String_Node_Str"" + clusterId + ""String_Node_Str""+ instanceId);
      return;
    }
    ClusterInstance clusterInstance=new ClusterInstance(alias,clusterId,instanceId);
    clusterInstance.setNetworkPartitionId(networkPartitionId);
    clusterInstance.setPartitionId(partitionId);
    cluster.addInstanceContext(instanceId,clusterInstance);
    TopologyManager.updateTopology(topology);
    ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=new ClusterInstanceCreatedEvent(serviceType,clusterId,clusterInstance);
    clusterInstanceCreatedEvent.setPartitionId(partitionId);
    TopologyEventPublisher.sendClusterInstanceCreatedEvent(clusterInstanceCreatedEvent);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}",0.7437893956247683
116183,"public ClusterInstanceCreatedEvent(String alias,String serviceName,String clusterId,String instanceId,String networkPartitionId){
  this.serviceName=serviceName;
  this.clusterId=clusterId;
  this.instanceId=instanceId;
  this.alias=alias;
  this.setNetworkPartitionId(networkPartitionId);
}","public ClusterInstanceCreatedEvent(String serviceName,String clusterId,ClusterInstance clusterInstance){
  this.serviceName=serviceName;
  this.clusterId=clusterId;
  this.clusterInstance=clusterInstance;
}",0.5030181086519114
116184,"private boolean doProcess(ClusterInstanceCreatedEvent event,Topology topology){
  if (TopologyServiceFilter.getInstance().isActive()) {
    if (TopologyServiceFilter.getInstance().serviceNameExcluded(event.getServiceName())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getServiceName()));
      }
      return false;
    }
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    if (TopologyClusterFilter.getInstance().clusterIdExcluded(event.getClusterId())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getClusterId()));
      }
      return false;
    }
  }
  Service service=topology.getService(event.getServiceName());
  if (service == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getServiceName()));
    }
    return false;
  }
  Cluster cluster=service.getCluster(event.getClusterId());
  if (cluster == null) {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId()));
    }
  }
 else {
    ClusterInstance context=new ClusterInstance(event.getAlias(),event.getClusterId(),event.getInstanceId());
    context.setNetworkPartitionId(event.getNetworkPartitionId());
    context.setPartitionId(event.getPartitionId());
    cluster.addInstanceContext(event.getInstanceId(),context);
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(ClusterInstanceCreatedEvent event,Topology topology){
  if (TopologyServiceFilter.getInstance().isActive()) {
    if (TopologyServiceFilter.getInstance().serviceNameExcluded(event.getServiceName())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getServiceName()));
      }
      return false;
    }
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    if (TopologyClusterFilter.getInstance().clusterIdExcluded(event.getClusterId())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getClusterId()));
      }
      return false;
    }
  }
  Service service=topology.getService(event.getServiceName());
  if (service == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getServiceName()));
    }
    return false;
  }
  Cluster cluster=service.getCluster(event.getClusterId());
  if (cluster == null) {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId()));
    }
  }
 else {
    ClusterInstance clusterInstance=event.getClusterInstance();
    if (cluster.getInstanceContexts(clusterInstance.getInstanceId()) != null) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",event.getServiceName(),event.getClusterId(),clusterInstance.getInstanceId()));
      }
    }
    cluster.addInstanceContext(clusterInstance.getInstanceId(),clusterInstance);
  }
  notifyEventListeners(event);
  return true;
}",0.7972395662175484
116185,"public static GroupInstance handleGroupInstanceCreatedEvent(String appId,String groupId,String instanceId,String parentId,String partitionId,String networkPartitionId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  GroupInstance instance=null;
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return instance;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return instance;
  }
  GroupStatus status=GroupStatus.Created;
  if (!group.containsInstanceContext(instanceId)) {
    instance=new GroupInstance(groupId,instanceId);
    instance.setParentId(parentId);
    instance.setStatus(status);
    group.addInstance(instanceId,instance);
    ApplicationHolder.persistApplication(application);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
  return instance;
}","public static GroupInstance handleGroupInstanceCreatedEvent(String appId,String groupId,String parentId,String networkPartitionId,String instanceId,String partitionId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  GroupInstance instance=null;
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return instance;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return instance;
  }
  GroupStatus status=GroupStatus.Created;
  if (!group.containsInstanceContext(instanceId)) {
    instance=new GroupInstance(groupId,instanceId);
    instance.setParentId(parentId);
    instance.setPartitionId(partitionId);
    instance.setNetworkPartitionId(networkPartitionId);
    instance.setStatus(status);
    group.addInstance(instanceId,instance);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupInstanceCreatedEvent(appId,groupId,instance);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ instanceId);
  }
  return instance;
}",0.8889802631578947
116186,"private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext,ChildLevelPartition childLevelPartition) throws PolicyValidationException, PartitionValidationException {
  if (clusterLevelNetworkPartitionContext == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  String nPartitionId=clusterLevelNetworkPartitionContext.getId();
  if (clusterInstance.getPartitionId() == null && childLevelPartition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  int maxInstances=1;
  if (clusterInstanceContext == null) {
    int minInstances=1;
    ApplicationHolder.acquireReadLock();
    try {
      Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
      ClusterDataHolder dataHolder=application.getClusterData(AutoscalerUtil.getAliasFromClusterId(clusterId));
      minInstances=dataHolder.getMinInstances();
      maxInstances=dataHolder.getMaxInstances();
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),clusterLevelNetworkPartitionContext.getPartitionAlgorithm(),minInstances,maxInstances,nPartitionId);
  }
  String partitionId;
  if (childLevelPartition != null) {
    partitionId=childLevelPartition.getPartitionId();
    maxInstances=childLevelPartition.getMax();
  }
 else {
    partitionId=clusterInstance.getPartitionId();
  }
  Partition appPartition=deploymentPolicy.getApplicationLevelNetworkPartition(nPartitionId).getPartition(partitionId);
  org.apache.stratos.cloud.controller.stub.domain.Partition partition=convertTOCCPartition(appPartition);
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(maxInstances,partition,clusterInstance.getNetworkPartitionId());
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  addMembersFromTopology(cluster,partition,clusterLevelPartitionContext);
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterInstanceContext.getId()));
  }
  return clusterLevelNetworkPartitionContext;
}","private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext,ChildLevelPartition childLevelPartition) throws PolicyValidationException, PartitionValidationException {
  if (clusterLevelNetworkPartitionContext == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  String nPartitionId=clusterLevelNetworkPartitionContext.getId();
  if (clusterInstance.getPartitionId() == null && childLevelPartition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  int maxInstances=1;
  if (clusterInstanceContext == null) {
    int minInstances=1;
    ApplicationHolder.acquireReadLock();
    try {
      Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
      ClusterDataHolder dataHolder=application.getClusterDataHolderRecursivelyByAlias(AutoscalerUtil.getAliasFromClusterId(clusterId));
      minInstances=dataHolder.getMinInstances();
      maxInstances=dataHolder.getMaxInstances();
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),clusterLevelNetworkPartitionContext.getPartitionAlgorithm(),minInstances,maxInstances,nPartitionId);
  }
  String partitionId;
  if (childLevelPartition != null) {
    partitionId=childLevelPartition.getPartitionId();
    maxInstances=childLevelPartition.getMax();
  }
 else {
    partitionId=clusterInstance.getPartitionId();
  }
  Partition appPartition=deploymentPolicy.getApplicationLevelNetworkPartition(nPartitionId).getPartition(partitionId);
  org.apache.stratos.cloud.controller.stub.domain.Partition partition=convertTOCCPartition(appPartition);
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(maxInstances,partition,clusterInstance.getNetworkPartitionId());
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  addMembersFromTopology(cluster,partition,clusterLevelPartitionContext);
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterInstanceContext.getId()));
  }
  return clusterLevelNetworkPartitionContext;
}",0.9960487323016134
116187,"/** 
 * Creates the group instance and adds the required context objects
 * @param group                             the group
 * @param parentInstanceContext             the parent instance context
 * @param partitionContext
 * @param groupLevelNetworkPartitionContext the group level network partition context
 */
private String createGroupInstanceAndAddToMonitor(Group group,Instance parentInstanceContext,PartitionContext partitionContext,GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext,GroupInstance groupInstance){
  String partitionId;
  if (groupInstance == null) {
    partitionId=partitionContext.getPartitionId();
    groupInstance=createGroupInstance(group,parentInstanceContext.getInstanceId(),partitionId,parentInstanceContext.getNetworkPartitionId());
  }
  this.addInstance(groupInstance);
  String instanceId=groupInstance.getInstanceId();
  GroupInstanceContext groupInstanceContext=new GroupInstanceContext(instanceId);
  groupInstanceContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
  groupLevelNetworkPartitionContext.addInstanceContext(groupInstanceContext);
  if (partitionContext != null) {
    ((GroupLevelPartitionContext)partitionContext).addActiveInstance(groupInstance);
  }
  return instanceId;
}","/** 
 * Creates the group instance and adds the required context objects
 * @param group                             the group
 * @param parentInstanceContext             the parent instance context
 * @param partitionContext
 * @param groupLevelNetworkPartitionContext the group level network partition context
 */
private String createGroupInstanceAndAddToMonitor(Group group,Instance parentInstanceContext,PartitionContext partitionContext,GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext,GroupInstance groupInstance){
  String partitionId;
  if (groupInstance == null) {
    partitionId=partitionContext.getPartitionId();
    groupInstance=createGroupInstance(group,parentInstanceContext.getNetworkPartitionId(),parentInstanceContext.getInstanceId(),partitionId);
  }
  this.addInstance(groupInstance);
  String instanceId=groupInstance.getInstanceId();
  GroupInstanceContext groupInstanceContext=new GroupInstanceContext(instanceId);
  groupInstanceContext.addPartitionContext((GroupLevelPartitionContext)partitionContext);
  groupLevelNetworkPartitionContext.addInstanceContext(groupInstanceContext);
  if (partitionContext != null) {
    ((GroupLevelPartitionContext)partitionContext).addActiveInstance(groupInstance);
  }
  return instanceId;
}",0.960691823899371
116188,"/** 
 * This will create the group instance in the applications Topology
 * @param group
 * @param parentInstanceId
 * @param partitionId
 * @param networkPartitionId
 * @return
 */
private GroupInstance createGroupInstance(Group group,String parentInstanceId,String partitionId,String networkPartitionId){
  String instanceId=parentInstanceId;
  int minGroupInstances=group.getGroupMinInstances();
  int maxGroupInstances=group.getGroupMaxInstances();
  if (minGroupInstances > 1 || maxGroupInstances > 1) {
    instanceId=this.generateInstanceId(group);
  }
  return ApplicationBuilder.handleGroupInstanceCreatedEvent(appId,group.getUniqueIdentifier(),instanceId,parentInstanceId,networkPartitionId,partitionId);
}","/** 
 * This will create the group instance in the applications Topology
 * @param group
 * @param parentInstanceId
 * @param partitionId
 * @param networkPartitionId
 * @return
 */
private GroupInstance createGroupInstance(Group group,String networkPartitionId,String parentInstanceId,String partitionId){
  String instanceId=parentInstanceId;
  int minGroupInstances=group.getGroupMinInstances();
  int maxGroupInstances=group.getGroupMaxInstances();
  if (minGroupInstances > 1 || maxGroupInstances > 1) {
    instanceId=this.generateInstanceId(group);
  }
  return ApplicationBuilder.handleGroupInstanceCreatedEvent(appId,group.getUniqueIdentifier(),parentInstanceId,networkPartitionId,instanceId,partitionId);
}",0.9455307262569832
116189,"private boolean doProcess(GroupInstanceCreatedEvent event,Applications applications){
  Application application=applications.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
  Group group=application.getGroupRecursively(event.getGroupId());
  if (group == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId(),event.getGroupId()));
      return false;
    }
  }
 else {
    String instanceId=event.getGroupInstance().getInstanceId();
    GroupInstance context=group.getInstanceContexts(instanceId);
    if (context == null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",event.getAppId(),event.getGroupId(),instanceId));
        return false;
      }
    }
    group.addInstance(instanceId,event.getGroupInstance());
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(GroupInstanceCreatedEvent event,Applications applications){
  Application application=applications.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
  Group group=application.getGroupRecursively(event.getGroupId());
  if (group == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId(),event.getGroupId()));
      return false;
    }
  }
 else {
    String instanceId=event.getGroupInstance().getInstanceId();
    GroupInstance context=group.getInstanceContexts(instanceId);
    if (context != null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",event.getAppId(),event.getGroupId(),instanceId));
        return false;
      }
    }
    group.addInstance(instanceId,event.getGroupInstance());
  }
  notifyEventListeners(event);
  return true;
}",0.9990138067061144
116190,"public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember && !stop) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext.getPartitionAlgorithm());
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext.getPartitionAlgorithm());
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}","public void monitor(){
  for (  ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {
    final Collection<ClusterInstanceContext> clusterInstanceContexts=networkPartitionContext.getClusterInstanceContextMap().values();
    for (    final ClusterInstanceContext instanceContext : clusterInstanceContexts) {
      ClusterInstance instance=(ClusterInstance)this.instanceIdToInstanceMap.get(instanceContext.getId());
      if ((instance.getStatus().getCode() <= ClusterStatus.Active.getCode()) || (getStatus() == ClusterStatus.Inactive && !hasStartupDependents) && !this.hasFaultyMember && !stop) {
        Runnable monitoringRunnable=new Runnable(){
          @Override public void run(){
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + getClusterId());
            }
            List<String> primaryMemberListInClusterInstance=new ArrayList<String>();
            for (            ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {
              for (              MemberContext memberContext : partitionContext.getActiveMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
              for (              MemberContext memberContext : partitionContext.getPendingMembers()) {
                if (isPrimaryMember(memberContext)) {
                  primaryMemberListInClusterInstance.add(memberContext.getMemberId());
                }
              }
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            String paritionAlgo=instanceContext.getPartitionAlgorithm();
            if (paritionAlgo == null) {
              paritionAlgo=""String_Node_Str"";
            }
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",paritionAlgo);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),minCheckFactHandle,instanceContext);
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,instanceContext);
            boolean rifReset=instanceContext.isRifReset();
            boolean memoryConsumptionReset=instanceContext.isMemoryConsumptionReset();
            boolean loadAverageReset=instanceContext.isLoadAverageReset();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
            }
            if (rifReset || memoryConsumptionReset || loadAverageReset) {
              VMClusterContext vmClusterContext=(VMClusterContext)clusterContext;
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
              getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInClusterInstance);
              getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceContext.getPartitionAlgorithm());
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",instanceContext.getId()));
                log.debug(""String_Node_Str"" + primaryMemberListInClusterInstance);
              }
              scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,instanceContext);
              instanceContext.setRifReset(false);
              instanceContext.setMemoryConsumptionReset(false);
              instanceContext.setLoadAverageReset(false);
            }
 else             if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",instanceContext.getId()));
            }
          }
        }
;
        monitoringRunnable.run();
      }
    }
  }
}",0.9777200951762924
116191,"public static void handleClusterTerminatingEvent(ClusterStatusClusterTerminatingEvent event){
  TopologyManager.acquireWriteLock();
  try {
    Topology topology=TopologyManager.getTopology();
    Cluster cluster=topology.getService(event.getServiceName()).getCluster(event.getClusterId());
    if (!cluster.isStateTransitionValid(ClusterStatus.Terminating,event.getInstanceId())) {
      log.error(""String_Node_Str"" + cluster.getStatus(event.getInstanceId()) + ""String_Node_Str""+ ClusterStatus.Terminating);
    }
    ClusterInstance context=cluster.getInstanceContexts(event.getInstanceId());
    if (context == null) {
      log.warn(""String_Node_Str"" + event.getClusterId() + ""String_Node_Str""+ event.getInstanceId());
      return;
    }
    ClusterStatus status=ClusterStatus.Terminating;
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      log.info(""String_Node_Str"" + cluster.getClusterId());
      TopologyManager.updateTopology(topology);
      ClusterTerminatingEvent clusterTerminaingEvent=new ClusterTerminatingEvent(event.getAppId(),event.getServiceName(),event.getClusterId(),null);
      TopologyEventPublisher.sendClusterTerminatingEvent(clusterTerminaingEvent);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",event.getClusterId(),event.getInstanceId(),context.getStatus(),status));
    }
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}","public static void handleClusterTerminatingEvent(ClusterStatusClusterTerminatingEvent event){
  TopologyManager.acquireWriteLock();
  try {
    Topology topology=TopologyManager.getTopology();
    Cluster cluster=topology.getService(event.getServiceName()).getCluster(event.getClusterId());
    if (!cluster.isStateTransitionValid(ClusterStatus.Terminating,event.getInstanceId())) {
      log.error(""String_Node_Str"" + cluster.getStatus(event.getInstanceId()) + ""String_Node_Str""+ ClusterStatus.Terminating);
    }
    ClusterInstance context=cluster.getInstanceContexts(event.getInstanceId());
    if (context == null) {
      log.warn(""String_Node_Str"" + event.getClusterId() + ""String_Node_Str""+ event.getInstanceId());
      return;
    }
    ClusterStatus status=ClusterStatus.Terminating;
    if (context.isStateTransitionValid(status)) {
      context.setStatus(status);
      log.info(""String_Node_Str"" + cluster.getClusterId());
      TopologyManager.updateTopology(topology);
      ClusterTerminatingEvent clusterTerminaingEvent=new ClusterTerminatingEvent(event.getAppId(),event.getServiceName(),event.getClusterId(),event.getInstanceId());
      TopologyEventPublisher.sendClusterTerminatingEvent(clusterTerminaingEvent);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",event.getClusterId(),event.getInstanceId(),context.getStatus(),status));
    }
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}",0.9913584514344972
116192,"/** 
 * Gets the parent instance context.
 * @param parentInstanceId the parent instance id
 * @return the parent instance context
 */
private Instance getParentInstanceContext(String parentInstanceId){
  Instance parentInstanceContext;
  Application application=ApplicationHolder.getApplications().getApplication(this.appId);
  if (this.id.equals(appId)) {
    parentInstanceContext=application.getInstanceContexts(parentInstanceId);
  }
 else {
    Group parentGroup=application.getGroupRecursively(this.parent.getId());
    parentInstanceContext=parentGroup.getInstanceContexts(parentInstanceId);
  }
  return parentInstanceContext;
}","/** 
 * Gets the parent instance context.
 * @param parentInstanceId the parent instance id
 * @return the parent instance context
 */
private Instance getParentInstanceContext(String parentInstanceId){
  Instance parentInstanceContext;
  Application application=ApplicationHolder.getApplications().getApplication(this.appId);
  if (this.parent.getId().equals(appId)) {
    parentInstanceContext=application.getInstanceContexts(parentInstanceId);
  }
 else {
    Group parentGroup=application.getGroupRecursively(this.parent.getId());
    parentInstanceContext=parentGroup.getInstanceContexts(parentInstanceId);
  }
  return parentInstanceContext;
}",0.9875583203732504
116193,"/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=groupLevelNetworkPartitionContext.getMinInstanceCount();
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        if (parentPartitionId == null) {
          AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
          partitionContext=algorithm.getNextScaleUpPartitionContext((PartitionContext[])groupLevelNetworkPartitionContext.getPartitionCtxts().toArray());
        }
 else {
          partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
        }
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}","/** 
 * This will create the required instance and start the dependency This method will be called on initial startup
 * @param group             blue print of the instance to be started
 * @param parentInstanceIds parent instanceIds used to start the child instance
 * @throws TopologyInConsistentException
 */
public boolean createInstanceAndStartDependencyAtStartup(Group group,List<String> parentInstanceIds) throws TopologyInConsistentException {
  boolean initialStartup=true;
  List<String> instanceIdsToStart=new ArrayList<String>();
  for (  String parentInstanceId : parentInstanceIds) {
    Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
    GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
    addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
    String groupInstanceId;
    PartitionContext partitionContext;
    String parentPartitionId=parentInstanceContext.getPartitionId();
    int groupMin=group.getGroupMinInstances();
    List<Instance> existingGroupInstances=group.getInstanceContextsWithParentId(parentInstanceId);
    for (    Instance instance : existingGroupInstances) {
      initialStartup=false;
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
      instanceIdsToStart.add(groupInstanceId);
    }
    if (existingGroupInstances.size() <= groupMin) {
      for (int i=0; i < groupMin - existingGroupInstances.size(); i++) {
        if (parentPartitionId == null) {
          AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
          partitionContext=algorithm.getNextScaleUpPartitionContext((PartitionContext[])groupLevelNetworkPartitionContext.getPartitionCtxts().toArray());
        }
 else {
          partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
        }
        groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
        instanceIdsToStart.add(groupInstanceId);
      }
    }
  }
  startDependency(group,instanceIdsToStart);
  return initialStartup;
}",0.992116434202547
116194,"/** 
 * This will start the group instance based on the given parent instanceId A new monitor is not created in this case
 * @param group
 * @param parentInstanceId
 * @throws org.apache.stratos.autoscaler.exception.application.MonitorNotFoundException
 */
public void createInstanceAndStartDependencyOnScaleup(Group group,String parentInstanceId) throws MonitorNotFoundException {
  Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
  GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
  addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
  String groupInstanceId;
  PartitionContext partitionContext;
  String parentPartitionId=parentInstanceContext.getPartitionId();
  int groupMax=groupLevelNetworkPartitionContext.getMaxInstanceCount();
  if (group.getInstanceContextCount() < groupMax) {
    if (parentPartitionId == null) {
      AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
      partitionContext=algorithm.getNextScaleUpPartitionContext((PartitionContext[])groupLevelNetworkPartitionContext.getPartitionCtxts().toArray());
    }
 else {
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
    }
    groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
    startDependency(group,groupInstanceId);
  }
 else {
    log.warn(""String_Node_Str"" + group.getUniqueIdentifier() + ""String_Node_Str""+ ""String_Node_Str""+ groupMax+ ""String_Node_Str"");
  }
}","/** 
 * This will start the group instance based on the given parent instanceId A new monitor is not created in this case
 * @param group
 * @param parentInstanceId
 * @throws org.apache.stratos.autoscaler.exception.application.MonitorNotFoundException
 */
public void createInstanceAndStartDependencyOnScaleup(Group group,String parentInstanceId) throws MonitorNotFoundException {
  Instance parentInstanceContext=getParentInstanceContext(parentInstanceId);
  GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext=getGroupLevelNetworkPartitionContext(group.getUniqueIdentifier(),this.appId,parentInstanceContext);
  addPartitionContext(parentInstanceContext,groupLevelNetworkPartitionContext);
  String groupInstanceId;
  PartitionContext partitionContext;
  String parentPartitionId=parentInstanceContext.getPartitionId();
  int groupMax=group.getGroupMaxInstances();
  if (group.getInstanceContextCount() < groupMax) {
    if (parentPartitionId == null) {
      AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(groupLevelNetworkPartitionContext.getPartitionAlgorithm());
      partitionContext=algorithm.getNextScaleUpPartitionContext((PartitionContext[])groupLevelNetworkPartitionContext.getPartitionCtxts().toArray());
    }
 else {
      partitionContext=groupLevelNetworkPartitionContext.getPartitionContextById(parentPartitionId);
    }
    if (partitionContext != null) {
      groupInstanceId=createGroupInstanceAndAddToMonitor(group,parentInstanceContext,partitionContext,groupLevelNetworkPartitionContext,null);
      startDependency(group,groupInstanceId);
    }
 else {
      log.warn(""String_Node_Str"" + group.getUniqueIdentifier() + ""String_Node_Str""+ ""String_Node_Str""+ groupMax+ ""String_Node_Str"");
    }
  }
 else {
    log.warn(""String_Node_Str"" + group.getUniqueIdentifier() + ""String_Node_Str""+ ""String_Node_Str""+ groupMax+ ""String_Node_Str"");
  }
}",0.9253731343283582
116195,"/** 
 * Retrieves InstanceContext obj. for the given instance id
 * @param parentInstanceId parent instance id
 * @return InstanceContext obj. if exists, else null
 */
public List<Instance> getInstanceContextsWithParentId(String parentInstanceId){
  if (getInstanceIdToInstanceContextMap().isEmpty()) {
    return null;
  }
  List<Instance> contexts=new ArrayList<Instance>();
  if (parentInstanceId == null) {
    for (    Instance context : instanceIdToInstanceContextMap.values()) {
      if (parentInstanceId.equals(context.getParentId())) {
        contexts.add(context);
      }
    }
  }
  return contexts;
}","/** 
 * Retrieves InstanceContext obj. for the given instance id
 * @param parentInstanceId parent instance id
 * @return InstanceContext obj. if exists, else null
 */
public List<Instance> getInstanceContextsWithParentId(String parentInstanceId){
  List<Instance> contexts=new ArrayList<Instance>();
  if (getInstanceIdToInstanceContextMap().isEmpty()) {
    return contexts;
  }
  if (parentInstanceId == null) {
    for (    Instance context : instanceIdToInstanceContextMap.values()) {
      if (parentInstanceId.equals(context.getParentId())) {
        contexts.add(context);
      }
    }
  }
  return contexts;
}",0.9043760129659644
116196,"public static void sendClusterActivatedEvent(String appId,String serviceName,String clusterId,String instanceId){
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Service service=TopologyManager.getTopology().getService(serviceName);
    if (service != null) {
      Cluster cluster=service.getCluster(clusterId);
      ClusterInstance clusterInstance=cluster.getInstanceContexts(instanceId);
      if (clusterInstance.isStateTransitionValid(ClusterStatus.Active) && clusterInstance.getStatus() != ClusterStatus.Active) {
        ClusterStatusClusterActivatedEvent clusterActivatedEvent=new ClusterStatusClusterActivatedEvent(appId,serviceName,clusterId,""String_Node_Str"");
        publishEvent(clusterActivatedEvent);
      }
 else {
        log.warn(""String_Node_Str"" + clusterId);
      }
    }
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}","public static void sendClusterActivatedEvent(String appId,String serviceName,String clusterId,String instanceId){
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Service service=TopologyManager.getTopology().getService(serviceName);
    if (service != null) {
      Cluster cluster=service.getCluster(clusterId);
      ClusterInstance clusterInstance=cluster.getInstanceContexts(instanceId);
      if (clusterInstance.isStateTransitionValid(ClusterStatus.Active) && clusterInstance.getStatus() != ClusterStatus.Active) {
        ClusterStatusClusterActivatedEvent clusterActivatedEvent=new ClusterStatusClusterActivatedEvent(appId,serviceName,clusterId,instanceId);
        publishEvent(clusterActivatedEvent);
      }
 else {
        log.warn(""String_Node_Str"" + clusterId);
      }
    }
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}",0.8968903436988543
116197,"private boolean getClusterInactive(String instanceId,VMClusterMonitor monitor){
  boolean clusterInActive=false;
  for (  ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext : monitor.getAllNetworkPartitionCtxts().values()) {
    ClusterInstanceContext instanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(instanceId);
    if (instanceContext != null) {
      if (instanceContext.getActiveMembers() < instanceContext.getMaxInstanceCount()) {
        clusterInActive=true;
      }
    }
  }
  return clusterInActive;
}","private boolean getClusterInactive(String instanceId,VMClusterMonitor monitor){
  boolean clusterInActive=false;
  for (  ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext : monitor.getAllNetworkPartitionCtxts().values()) {
    ClusterInstanceContext instanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(instanceId);
    if (instanceContext != null) {
      if (instanceContext.getActiveMembers() < instanceContext.getMinInstanceCount()) {
        clusterInActive=true;
      }
    }
  }
  return clusterInActive;
}",0.99644128113879
116198,"@Override public boolean process(String type,String clusterId,String instanceId){
  boolean statusChanged;
  if (type == null || (ClusterStatusTerminatedProcessor.class.getName().equals(type))) {
    statusChanged=doProcess(clusterId,instanceId);
    if (statusChanged) {
      return statusChanged;
    }
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(null,clusterId,instanceId);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",type,clusterId,instanceId));
    }
  }
  return false;
}","@Override public boolean process(String type,String clusterId,String instanceId){
  boolean statusChanged;
  if (type == null || (ClusterStatusTerminatedProcessor.class.getName().equals(type))) {
    statusChanged=doProcess(clusterId,instanceId);
    if (statusChanged) {
      return statusChanged;
    }
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,clusterId,instanceId);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",type,clusterId,instanceId));
    }
  }
  return false;
}",0.9929701230228472
116199,"public synchronized MemberContext spawnAnInstance(Partition partition,String clusterId,String networkPartitionId,String instanceID,boolean isPrimary,int minMemberCount) throws SpawningException {
  try {
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",clusterId,partition.getId(),networkPartitionId));
    }
    XMLConfiguration conf=ConfUtil.getInstance(null).getConfiguration();
    long expiryTime=conf.getLong(StratosConstants.OBSOLETED_VM_MEMBER_EXPIRY_TIMEOUT,86400000);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + expiryTime);
    }
    MemberContext member=new MemberContext();
    member.setClusterId(clusterId);
    member.setPartition(partition);
    member.setInstanceId(instanceID);
    member.setObsoleteExpiryTime(expiryTime);
    member.setInitTime(System.currentTimeMillis());
    member.setNetworkPartitionId(networkPartitionId);
    Properties memberContextProps=new Properties();
    Property isPrimaryProp=new Property();
    isPrimaryProp.setName(""String_Node_Str"");
    isPrimaryProp.setValue(String.valueOf(isPrimary));
    Property minCountProp=new Property();
    minCountProp.setName(""String_Node_Str"");
    minCountProp.setValue(String.valueOf(minMemberCount));
    memberContextProps.addProperty(isPrimaryProp);
    memberContextProps.addProperty(minCountProp);
    member.setProperties(AutoscalerUtil.toStubProperties(memberContextProps));
    long startTime=System.currentTimeMillis();
    MemberContext memberContext=stub.startInstance(member);
    if (log.isDebugEnabled()) {
      long endTime=System.currentTimeMillis();
      log.debug(String.format(""String_Node_Str"",(endTime - startTime)));
    }
    return memberContext;
  }
 catch (  CloudControllerServiceUnregisteredCartridgeExceptionException e) {
    String message=e.getFaultMessage().getUnregisteredCartridgeException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
catch (  RemoteException e) {
    log.error(e.getMessage(),e);
    throw new SpawningException(e.getMessage(),e);
  }
catch (  CloudControllerServiceInvalidIaasProviderExceptionException e) {
    String message=e.getFaultMessage().getInvalidIaasProviderException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
}","public synchronized MemberContext spawnAnInstance(Partition partition,String clusterId,String networkPartitionId,String instanceID,boolean isPrimary,int minMemberCount) throws SpawningException {
  try {
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId,partition.getId(),networkPartitionId));
    }
    XMLConfiguration conf=ConfUtil.getInstance(null).getConfiguration();
    long expiryTime=conf.getLong(StratosConstants.OBSOLETED_VM_MEMBER_EXPIRY_TIMEOUT,86400000);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + expiryTime);
    }
    MemberContext member=new MemberContext();
    member.setClusterId(clusterId);
    member.setPartition(partition);
    member.setInstanceId(instanceID);
    member.setObsoleteExpiryTime(expiryTime);
    member.setInitTime(System.currentTimeMillis());
    member.setNetworkPartitionId(networkPartitionId);
    Properties memberContextProps=new Properties();
    Property isPrimaryProp=new Property();
    isPrimaryProp.setName(""String_Node_Str"");
    isPrimaryProp.setValue(String.valueOf(isPrimary));
    Property minCountProp=new Property();
    minCountProp.setName(""String_Node_Str"");
    minCountProp.setValue(String.valueOf(minMemberCount));
    memberContextProps.addProperty(isPrimaryProp);
    memberContextProps.addProperty(minCountProp);
    member.setProperties(AutoscalerUtil.toStubProperties(memberContextProps));
    long startTime=System.currentTimeMillis();
    MemberContext memberContext=stub.startInstance(member);
    if (log.isDebugEnabled()) {
      long endTime=System.currentTimeMillis();
      log.debug(String.format(""String_Node_Str"",(endTime - startTime)));
    }
    return memberContext;
  }
 catch (  CloudControllerServiceUnregisteredCartridgeExceptionException e) {
    String message=e.getFaultMessage().getUnregisteredCartridgeException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
catch (  RemoteException e) {
    log.error(e.getMessage(),e);
    throw new SpawningException(e.getMessage(),e);
  }
catch (  CloudControllerServiceInvalidIaasProviderExceptionException e) {
    String message=e.getFaultMessage().getInvalidIaasProviderException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
}",0.9956952216960826
116200,"public void delegateSpawn(ClusterLevelPartitionContext clusterMonitorPartitionContext,String clusterId,String instanceId,boolean isPrimary){
  try {
    String nwPartitionId=clusterMonitorPartitionContext.getNetworkPartitionId();
    int minimumCountOfNetworkPartition=0;
    VMClusterMonitor vmClusterMonitor=(VMClusterMonitor)AutoscalerContext.getInstance().getClusterMonitor(clusterId);
    VMClusterContext clusterContext=(VMClusterContext)vmClusterMonitor.getClusterContext();
    ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext=clusterContext.getNetworkPartitionCtxt(nwPartitionId);
    ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(instanceId);
    minimumCountOfNetworkPartition=clusterInstanceContext.getMinInstanceCount();
    MemberContext memberContext=CloudControllerClient.getInstance().spawnAnInstance(clusterMonitorPartitionContext.getPartition(),clusterId,instanceId,clusterMonitorPartitionContext.getNetworkPartitionId(),isPrimary,minimumCountOfNetworkPartition);
    if (memberContext != null) {
      clusterMonitorPartitionContext.addPendingMember(memberContext);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",memberContext.getMemberId(),memberContext.getPartition().getId()));
      }
    }
 else     if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new RuntimeException(message,e);
  }
}","public void delegateSpawn(ClusterLevelPartitionContext clusterMonitorPartitionContext,String clusterId,String instanceId,boolean isPrimary){
  try {
    String nwPartitionId=clusterMonitorPartitionContext.getNetworkPartitionId();
    int minimumCountOfNetworkPartition=0;
    VMClusterMonitor vmClusterMonitor=(VMClusterMonitor)AutoscalerContext.getInstance().getClusterMonitor(clusterId);
    VMClusterContext clusterContext=(VMClusterContext)vmClusterMonitor.getClusterContext();
    ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext=clusterContext.getNetworkPartitionCtxt(nwPartitionId);
    ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(instanceId);
    minimumCountOfNetworkPartition=clusterInstanceContext.getMinInstanceCount();
    MemberContext memberContext=CloudControllerClient.getInstance().spawnAnInstance(clusterMonitorPartitionContext.getPartition(),clusterId,clusterMonitorPartitionContext.getNetworkPartitionId(),instanceId,isPrimary,minimumCountOfNetworkPartition);
    if (memberContext != null) {
      clusterMonitorPartitionContext.addPendingMember(memberContext);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",memberContext.getMemberId(),memberContext.getPartition().getId()));
      }
    }
 else     if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new RuntimeException(message,e);
  }
}",0.9589216944801028
116201,"public ClusterInstanceContext(String clusterInstanceId,String partitionAlgo,int min,int max,String networkPartitionId){
  super(clusterInstanceId);
  this.networkPartitionId=networkPartitionId;
  this.setMinMembers(min);
  partitionCtxts=new ArrayList<ClusterLevelPartitionContext>();
  this.partitionAlgorithm=partitionAlgo;
  requestsInFlight=new RequestsInFlight();
  loadAverage=new LoadAverage();
  memoryConsumption=new MemoryConsumption();
  maxInstanceCount=max;
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
}","public ClusterInstanceContext(String clusterInstanceId,String partitionAlgo,int min,int max,String networkPartitionId){
  super(clusterInstanceId);
  this.networkPartitionId=networkPartitionId;
  this.minInstanceCount=min;
  this.maxInstanceCount=max;
  partitionCtxts=new ArrayList<ClusterLevelPartitionContext>();
  this.partitionAlgorithm=partitionAlgo;
  requestsInFlight=new RequestsInFlight();
  loadAverage=new LoadAverage();
  memoryConsumption=new MemoryConsumption();
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
}",0.9229466553767992
116202,"private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext,ChildLevelPartition childLevelPartition) throws PolicyValidationException, PartitionValidationException {
  if (clusterLevelNetworkPartitionContext == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  String nPartitionId=clusterLevelNetworkPartitionContext.getId();
  if (clusterInstance.getPartitionId() == null || childLevelPartition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  int maxInstances=2;
  if (clusterInstanceContext == null) {
    int minInstances=2;
    ApplicationHolder.acquireReadLock();
    try {
      Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
      ClusterDataHolder dataHolder=application.getClusterData(AutoscalerUtil.getAliasFromClusterId(clusterId));
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),clusterLevelNetworkPartitionContext.getPartitionAlgorithm(),minInstances,maxInstances,nPartitionId);
  }
  String partitionId;
  if (childLevelPartition != null) {
    partitionId=childLevelPartition.getPartitionId();
    maxInstances=childLevelPartition.getMax();
  }
 else {
    partitionId=clusterInstance.getPartitionId();
  }
  Partition appPartition=deploymentPolicy.getApplicationLevelNetworkPartition(nPartitionId).getPartition(partitionId);
  org.apache.stratos.cloud.controller.stub.domain.Partition partition=convertTOCCPartition(appPartition);
  CloudControllerClient.getInstance().validatePartition(partition);
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(maxInstances,partition,clusterInstance.getNetworkPartitionId());
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  addMembersFromTopology(cluster,partition,clusterLevelPartitionContext);
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  return clusterLevelNetworkPartitionContext;
}","private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext,ChildLevelPartition childLevelPartition) throws PolicyValidationException, PartitionValidationException {
  if (clusterLevelNetworkPartitionContext == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  String nPartitionId=clusterLevelNetworkPartitionContext.getId();
  if (clusterInstance.getPartitionId() == null && childLevelPartition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  int maxInstances=2;
  if (clusterInstanceContext == null) {
    int minInstances=2;
    ApplicationHolder.acquireReadLock();
    try {
      Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
      ClusterDataHolder dataHolder=application.getClusterData(AutoscalerUtil.getAliasFromClusterId(clusterId));
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),clusterLevelNetworkPartitionContext.getPartitionAlgorithm(),minInstances,maxInstances,nPartitionId);
  }
  String partitionId;
  if (childLevelPartition != null) {
    partitionId=childLevelPartition.getPartitionId();
    maxInstances=childLevelPartition.getMax();
  }
 else {
    partitionId=clusterInstance.getPartitionId();
  }
  Partition appPartition=deploymentPolicy.getApplicationLevelNetworkPartition(nPartitionId).getPartition(partitionId);
  org.apache.stratos.cloud.controller.stub.domain.Partition partition=convertTOCCPartition(appPartition);
  CloudControllerClient.getInstance().validatePartition(partition);
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(maxInstances,partition,clusterInstance.getNetworkPartitionId());
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  addMembersFromTopology(cluster,partition,clusterLevelPartitionContext);
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterInstanceContext.getId()));
  }
  return clusterLevelNetworkPartitionContext;
}",0.9433253670194606
116203,"private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(ClusterInstance clusterInstance,Cluster cluster,ChildPolicy childPolicy,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + childPolicy.getId());
  }
  if (childPolicy == null) {
    String msg=""String_Node_Str"" + childPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelPartition[] childLevelPartitions=childPolicy.getChildLevelNetworkPartition(clusterLevelNetworkPartitionContext.getId()).getChildLevelPartitions();
  if (childLevelPartitions == null) {
    String msg=""String_Node_Str"" + childPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelNetworkPartition networkPartition;
  networkPartition=childPolicy.getChildLevelNetworkPartition(clusterInstance.getNetworkPartitionId());
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(networkPartition.getId(),networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  for (  ChildLevelPartition childLevelPartition : networkPartition.getChildLevelPartitions()) {
    addPartition(clusterInstance,cluster,clusterLevelNetworkPartitionContext,childLevelPartition);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",childLevelPartition.getPartitionId()));
    }
  }
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterLevelNetworkPartitionContext.getId()));
  }
  return clusterLevelNetworkPartitionContext;
}","private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(ClusterInstance clusterInstance,Cluster cluster,ChildPolicy childPolicy,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + childPolicy.getId());
  }
  if (childPolicy == null) {
    String msg=""String_Node_Str"" + childPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelPartition[] childLevelPartitions=childPolicy.getChildLevelNetworkPartition(clusterLevelNetworkPartitionContext.getId()).getChildLevelPartitions();
  if (childLevelPartitions == null) {
    String msg=""String_Node_Str"" + childPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelNetworkPartition networkPartition;
  networkPartition=childPolicy.getChildLevelNetworkPartition(clusterInstance.getNetworkPartitionId());
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(networkPartition.getId(),networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  for (  ChildLevelPartition childLevelPartition : networkPartition.getChildLevelPartitions()) {
    addPartition(clusterInstance,cluster,clusterLevelNetworkPartitionContext,childLevelPartition);
  }
  return clusterLevelNetworkPartitionContext;
}",0.8872931626600062
116204,"/** 
 * Triggered when a status event is received from the parent.
 * @param statusEvent
 */
public abstract void onParentStatusEvent(MonitorStatusEvent statusEvent) throws ParentMonitorNotFoundException ;","/** 
 * Triggered when a status event is received from the parent.
 * @param statusEvent
 */
public abstract void onParentStatusEvent(MonitorStatusEvent statusEvent) throws MonitorNotFoundException ;",0.9851485148514852
116205,"public void createInstanceOnBurstingForApplication() throws TopologyInConsistentException, PolicyValidationException, ParentMonitorNotFoundException {
  Application application=ApplicationHolder.getApplications().getApplication(appId);
  if (application == null) {
    String msg=""String_Node_Str"";
    throw new TopologyInConsistentException(msg);
  }
  boolean burstNPFound=false;
  DeploymentPolicy deploymentPolicy=getDeploymentPolicy(application);
  String instanceId=null;
  if (deploymentPolicy == null) {
    instanceId=createApplicationInstance(application,null);
  }
 else {
    for (    ApplicationLevelNetworkPartition networkPartition : deploymentPolicy.getApplicationLevelNetworkPartitions()) {
      if (!networkPartition.isActiveByDefault()) {
        if (!this.networkPartitionCtxts.containsKey(networkPartition.getId())) {
          ApplicationLevelNetworkPartitionContext context=new ApplicationLevelNetworkPartitionContext(networkPartition.getId());
          context.setCreatedOnBurst(true);
          instanceId=createApplicationInstance(application,networkPartition.getId());
          ApplicationInstanceContext instanceContext=new ApplicationInstanceContext(instanceId);
          context.addInstanceContext(instanceContext);
          this.networkPartitionCtxts.put(context.getId(),context);
          ApplicationInstance instance=new ApplicationInstance(appId,instanceId);
          instance.setStatus(ApplicationStatus.Created);
          this.applicationInstanceIdMap.put(instanceId,instance);
          burstNPFound=true;
        }
      }
    }
  }
  if (!burstNPFound) {
    log.warn(""String_Node_Str"" + appId + ""String_Node_Str"");
  }
 else {
    startDependency(application,instanceId);
  }
}","public void createInstanceOnBurstingForApplication() throws TopologyInConsistentException, PolicyValidationException, MonitorNotFoundException {
  Application application=ApplicationHolder.getApplications().getApplication(appId);
  if (application == null) {
    String msg=""String_Node_Str"";
    throw new TopologyInConsistentException(msg);
  }
  boolean burstNPFound=false;
  DeploymentPolicy deploymentPolicy=getDeploymentPolicy(application);
  String instanceId=null;
  if (deploymentPolicy == null) {
    instanceId=createApplicationInstance(application,null);
  }
 else {
    for (    ApplicationLevelNetworkPartition networkPartition : deploymentPolicy.getApplicationLevelNetworkPartitions()) {
      if (!networkPartition.isActiveByDefault()) {
        if (!this.networkPartitionCtxts.containsKey(networkPartition.getId())) {
          ApplicationLevelNetworkPartitionContext context=new ApplicationLevelNetworkPartitionContext(networkPartition.getId());
          context.setCreatedOnBurst(true);
          instanceId=createApplicationInstance(application,networkPartition.getId());
          ApplicationInstanceContext instanceContext=new ApplicationInstanceContext(instanceId);
          context.addInstanceContext(instanceContext);
          this.networkPartitionCtxts.put(context.getId(),context);
          ApplicationInstance instance=new ApplicationInstance(appId,instanceId);
          instance.setStatus(ApplicationStatus.Created);
          this.applicationInstanceIdMap.put(instanceId,instance);
          burstNPFound=true;
        }
      }
    }
  }
  if (!burstNPFound) {
    log.warn(""String_Node_Str"" + appId + ""String_Node_Str"");
  }
 else {
    startDependency(application,instanceId);
  }
}",0.9982588508415554
116206,"/** 
 * To set the status of the application monitor
 * @param status the status
 */
public void setStatus(ApplicationStatus status,String instanceId){
  this.applicationInstanceIdMap.get(instanceId).setStatus(status);
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new ApplicationStatusEvent(status,appId,instanceId));
  }
 catch (  ParentMonitorNotFoundException e) {
    log.error(""String_Node_Str"" + appId,e);
  }
}","/** 
 * To set the status of the application monitor
 * @param status the status
 */
public void setStatus(ApplicationStatus status,String instanceId){
  this.applicationInstanceIdMap.get(instanceId).setStatus(status);
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new ApplicationStatusEvent(status,appId,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + appId,e);
  }
}",0.9929742388758782
116207,"@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    this.markMonitorAsInactive(id);
    onChildInactiveEvent(id,instanceId);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.terminatingMonitorsList.contains(id)) {
      this.terminatingMonitorsList.remove(id);
      this.aliasToActiveMonitorsMap.remove(id);
      if (AutoscalerContext.getInstance().getClusterMonitors().containsKey(id)) {
        AutoscalerContext.getInstance().removeClusterMonitor(id);
      }
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsTerminating(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.terminatingMonitorsList.contains(id)) {
      this.terminatingMonitorsList.remove(id);
      this.aliasToActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    ApplicationHolder.releaseReadLock();
    GroupStatus instanceStatus;
    try {
      Group group=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(this.id);
      instanceStatus=group.getInstanceContexts(instanceId).getStatus();
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
    if (instanceStatus == GroupStatus.Terminating) {
      ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,appId,instanceId);
    }
 else {
      onChildTerminatedEvent(id,instanceId);
    }
  }
}","@Override public void onChildStatusEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  String instanceId=statusEvent.getInstanceId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id,instanceId);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    this.markMonitorAsInactive(instanceId);
    onChildInactiveEvent(id,instanceId);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.terminatingMonitorsList.contains(instanceId)) {
      this.terminatingMonitorsList.remove(instanceId);
      this.aliasToActiveMonitorsMap.remove(instanceId);
      if (AutoscalerContext.getInstance().getClusterMonitors().containsKey(id)) {
        AutoscalerContext.getInstance().removeClusterMonitor(id);
      }
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsTerminating(instanceId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.terminatingMonitorsList.contains(id)) {
      this.terminatingMonitorsList.remove(id);
      this.aliasToActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    ApplicationHolder.releaseReadLock();
    GroupStatus instanceStatus;
    try {
      Group group=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(this.id);
      instanceStatus=group.getInstanceContexts(instanceId).getStatus();
    }
  finally {
      ApplicationHolder.releaseReadLock();
    }
    if (instanceStatus == GroupStatus.Terminating) {
      ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,appId,instanceId);
    }
 else {
      onChildTerminatedEvent(id,instanceId);
    }
  }
}",0.9895615866388308
116208,"/** 
 * This will start the group instance based on the given parent instanceId
 * @param group
 * @param parentInstanceId
 * @throws ParentMonitorNotFoundException
 */
public void createInstanceAndStartDependency(Group group,String parentInstanceId) throws ParentMonitorNotFoundException {
  String deploymentPolicyName=group.getDeploymentPolicy();
  String instanceId;
  Application application=ApplicationHolder.getApplications().getApplication(this.appId);
  Instance parentInstanceContext;
  if (this.id.equals(appId)) {
    parentInstanceContext=application.getInstanceContexts(parentInstanceId);
  }
 else {
    Group group1=application.getGroupRecursively(this.parent.getId());
    parentInstanceContext=group1.getInstanceContexts(parentInstanceId);
  }
  GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext;
  if (this.networkPartitionCtxts.containsKey(parentInstanceContext)) {
    groupLevelNetworkPartitionContext=this.networkPartitionCtxts.get(parentInstanceContext.getNetworkPartitionId());
  }
 else {
    groupLevelNetworkPartitionContext=new GroupLevelNetworkPartitionContext(parentInstanceContext.getNetworkPartitionId(),null,null);
    this.addNetworkPartitionContext(groupLevelNetworkPartitionContext);
  }
  String partitionId=null;
  String networkPartitionId=parentInstanceContext.getNetworkPartitionId();
  ChildPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(group.getApplicationId()).getChildPolicy(group.getUniqueIdentifier());
  ChildLevelNetworkPartition networkPartition=policy.getChildLevelNetworkPartition(parentInstanceContext.getNetworkPartitionId());
  if (policy != null) {
    AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(networkPartition.getPartitionAlgo());
  }
  instanceId=createGroupInstance(group,parentInstanceId,partitionId,networkPartitionId);
  startDependency(group,instanceId);
}","/** 
 * This will start the group instance based on the given parent instanceId
 * @param group
 * @param parentInstanceId
 * @throws org.apache.stratos.autoscaler.exception.application.MonitorNotFoundException
 */
public void createInstanceAndStartDependency(Group group,String parentInstanceId) throws MonitorNotFoundException {
  String deploymentPolicyName=group.getDeploymentPolicy();
  String instanceId;
  Application application=ApplicationHolder.getApplications().getApplication(this.appId);
  Instance parentInstanceContext;
  if (this.id.equals(appId)) {
    parentInstanceContext=application.getInstanceContexts(parentInstanceId);
  }
 else {
    Group group1=application.getGroupRecursively(this.parent.getId());
    parentInstanceContext=group1.getInstanceContexts(parentInstanceId);
  }
  GroupLevelNetworkPartitionContext groupLevelNetworkPartitionContext;
  if (this.networkPartitionCtxts.containsKey(parentInstanceContext)) {
    groupLevelNetworkPartitionContext=this.networkPartitionCtxts.get(parentInstanceContext.getNetworkPartitionId());
  }
 else {
    groupLevelNetworkPartitionContext=new GroupLevelNetworkPartitionContext(parentInstanceContext.getNetworkPartitionId(),null,null);
    this.addNetworkPartitionContext(groupLevelNetworkPartitionContext);
  }
  String partitionId=null;
  String networkPartitionId=parentInstanceContext.getNetworkPartitionId();
  ChildPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(group.getApplicationId()).getChildPolicy(group.getUniqueIdentifier());
  ChildLevelNetworkPartition networkPartition=policy.getChildLevelNetworkPartition(parentInstanceContext.getNetworkPartitionId());
  if (policy != null) {
    AutoscaleAlgorithm algorithm=this.getAutoscaleAlgorithm(networkPartition.getPartitionAlgo());
  }
  instanceId=createGroupInstance(group,parentInstanceId,partitionId,networkPartitionId);
  startDependency(group,instanceId);
}",0.9831756046267088
116209,"/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status status of the group
 */
public void setStatus(GroupStatus status,String instanceId){
  this.groupInstanceIdMap.get(instanceId).setStatus(status);
  if (status == GroupStatus.Inactive && !this.hasStartupDependents) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId());
    if (this.isGroupScalingEnabled()) {
      ApplicationHolder.acquireReadLock();
      try {
        Application application=ApplicationHolder.getApplications().getApplication(this.appId);
        if (application != null) {
          Group group=application.getGroupRecursively(this.id);
          if (group != null) {
            GroupInstance context=group.getInstanceContexts(instanceId);
            MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,context.getParentId());
          }
        }
      }
  finally {
        ApplicationHolder.releaseReadLock();
      }
    }
 else {
      MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,instanceId);
    }
  }
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,this.id,instanceId));
  }
 catch (  ParentMonitorNotFoundException e) {
    log.error(""String_Node_Str"" + this.id,e);
  }
}","/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status status of the group
 */
public void setStatus(GroupStatus status,String instanceId){
  this.groupInstanceIdMap.get(instanceId).setStatus(status);
  if (status == GroupStatus.Inactive && !this.hasStartupDependents) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId());
    if (this.isGroupScalingEnabled()) {
      ApplicationHolder.acquireReadLock();
      try {
        Application application=ApplicationHolder.getApplications().getApplication(this.appId);
        if (application != null) {
          Group group=application.getGroupRecursively(this.id);
          if (group != null) {
            GroupInstance context=group.getInstanceContexts(instanceId);
            MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,context.getParentId());
          }
        }
      }
  finally {
        ApplicationHolder.releaseReadLock();
      }
    }
 else {
      MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,status,this.id,instanceId);
    }
  }
  try {
    MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,this.id,instanceId));
  }
 catch (  MonitorNotFoundException e) {
    log.error(""String_Node_Str"" + this.id,e);
  }
}",0.9979123173277662
116210,"@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent) throws ParentMonitorNotFoundException {
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId);
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
    Application application=ApplicationHolder.getApplications().getApplication(this.appId);
    Group group=application.getGroupRecursively(statusEvent.getId());
    createInstanceAndStartDependency(group,statusEvent.getInstanceId());
  }
}","@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent) throws MonitorNotFoundException {
  String instanceId=statusEvent.getInstanceId();
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    ApplicationBuilder.handleGroupTerminatingEvent(appId,id,instanceId);
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
    Application application=ApplicationHolder.getApplications().getApplication(this.appId);
    Group group=application.getGroupRecursively(statusEvent.getId());
    createInstanceAndStartDependency(group,statusEvent.getInstanceId());
  }
}",0.9957805907172996
116211,"/** 
 * This will start the parallel dependencies at once from the top level. it will get invoked when the monitor starts up only.
 */
public boolean startDependencyByInstanceCreation(String childId,String instanceId) throws ParentMonitorNotFoundException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependencies(childId);
  return startDependency(applicationContexts,instanceId);
}","/** 
 * This will start the parallel dependencies at once from the top level. it will get invoked when the monitor starts up only.
 */
public boolean startDependencyByInstanceCreation(String childId,String instanceId) throws MonitorNotFoundException {
  List<ApplicationChildContext> applicationContexts=this.startupDependencyTree.getStarAbleDependencies(childId);
  return startDependency(applicationContexts,instanceId);
}",0.9929742388758782
116212,"/** 
 * This will start the child monitors based on the active of siblings according to start up order
 * @param eventId parent id of the event which received
 */
protected void onChildActivatedEvent(String eventId,String instanceId){
  try {
    if (this.inactiveMonitorsList.contains(eventId)) {
      this.inactiveMonitorsList.remove(eventId);
    }
    if (this.terminatingMonitorsList.contains(eventId)) {
      this.terminatingMonitorsList.remove(eventId);
    }
    boolean startDep;
    if (!aliasToActiveMonitorsMap.containsKey(eventId)) {
      startDep=startDependency(eventId,instanceId);
    }
 else {
      startDep=startDependencyByInstanceCreation(eventId,instanceId);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + startDep + ""String_Node_Str""+ eventId);
    }
    if (!startDep) {
      StatusChecker.getInstance().onChildStatusChange(eventId,this.id,this.appId,instanceId);
    }
  }
 catch (  ParentMonitorNotFoundException e) {
    log.error(e);
  }
}","/** 
 * This will start the child monitors based on the active of siblings according to start up order
 * @param eventId parent id of the event which received
 */
protected void onChildActivatedEvent(String eventId,String instanceId){
  try {
    if (this.inactiveMonitorsList.contains(eventId)) {
      this.inactiveMonitorsList.remove(eventId);
    }
    if (this.terminatingMonitorsList.contains(eventId)) {
      this.terminatingMonitorsList.remove(eventId);
    }
    boolean startDep;
    if (!aliasToActiveMonitorsMap.containsKey(eventId)) {
      startDep=startDependency(eventId,instanceId);
    }
 else {
      startDep=startDependencyByInstanceCreation(eventId,instanceId);
    }
    if (!startDep) {
      ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,this.appId,instanceId);
    }
 else {
      log.info(""String_Node_Str"" + startDep + ""String_Node_Str""+ eventId);
    }
  }
 catch (  MonitorNotFoundException e) {
    log.error(e);
  }
}",0.8454957221942627
116213,"/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationChildContext> applicationContexts,String instanceId) throws ParentMonitorNotFoundException {
  if (applicationContexts != null && applicationContexts.isEmpty()) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationChildContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (!this.aliasToActiveMonitorsMap.containsKey(context.getId())) {
      String msg=""String_Node_Str"";
      throw new ParentMonitorNotFoundException(msg);
    }
 else {
      Monitor monitor=aliasToActiveMonitorsMap.get(context.getId());
      if (context instanceof ClusterChildContext) {
        MonitorStatusEventBuilder.notifyChildCluster(monitor,ClusterStatus.Created,instanceId);
      }
 else       if (context instanceof GroupChildContext) {
        MonitorStatusEventBuilder.notifyChildGroup(monitor,GroupStatus.Created,instanceId);
      }
    }
  }
  return true;
}","/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationChildContext> applicationContexts,String instanceId) throws MonitorNotFoundException {
  if (applicationContexts != null && applicationContexts.isEmpty()) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationChildContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (!this.aliasToActiveMonitorsMap.containsKey(context.getId())) {
      String msg=""String_Node_Str"";
      throw new MonitorNotFoundException(msg);
    }
 else {
      Monitor monitor=aliasToActiveMonitorsMap.get(context.getId());
      if (context instanceof ClusterChildContext) {
        MonitorStatusEventBuilder.notifyChildCluster(monitor,ClusterStatus.Created,instanceId);
      }
 else       if (context instanceof GroupChildContext) {
        MonitorStatusEventBuilder.notifyChildGroup(monitor,GroupStatus.Created,instanceId);
      }
    }
  }
  return true;
}",0.9948849104859336
116214,"public static void notifyChildGroup(Monitor child,GroupStatus state,String instanceId) throws ParentMonitorNotFoundException {
  MonitorStatusEvent statusEvent=new GroupStatusEvent(state,child.getId(),instanceId);
  child.onParentStatusEvent(statusEvent);
}","public static void notifyChildGroup(Monitor child,GroupStatus state,String instanceId) throws MonitorNotFoundException {
  MonitorStatusEvent statusEvent=new GroupStatusEvent(state,child.getId(),instanceId);
  child.onParentStatusEvent(statusEvent);
}",0.9881889763779528
116215,"public static void notifyChildCluster(Monitor child,ClusterStatus state,String instanceId) throws ParentMonitorNotFoundException {
  MonitorStatusEvent statusEvent=new ClusterStatusEvent(state,child.getId(),instanceId);
  child.onParentStatusEvent(statusEvent);
}","public static void notifyChildCluster(Monitor child,ClusterStatus state,String instanceId) throws MonitorNotFoundException {
  MonitorStatusEvent statusEvent=new ClusterStatusEvent(state,child.getId(),instanceId);
  child.onParentStatusEvent(statusEvent);
}",0.9884615384615384
116216,"private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Active,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) && getAllGroupInSameState(groups,GroupStatus.Active,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationActivatedEvent(appId,instanceId);
        }
 else         if (component instanceof Group) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier());
          ApplicationBuilder.handleGroupActivatedEvent(appId,component.getUniqueIdentifier(),instanceId);
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return true;
}","private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (component.isGroupScalingEnabled()) {
    }
 else {
      if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Active,instanceId) || getAllClusterInSameState(clusterData,ClusterStatus.Active,instanceId) && getAllGroupInSameState(groups,GroupStatus.Active,instanceId)) {
        if (component instanceof Application) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationActivatedEvent(appId,instanceId);
          return true;
        }
 else         if (component instanceof Group) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier());
          ApplicationBuilder.handleGroupActivatedEvent(appId,component.getUniqueIdentifier(),instanceId);
          return true;
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}",0.7922204213938412
116217,"private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (groups.isEmpty() && getAllClusterInactive(clusterData,instanceId) || clusterData.isEmpty() && getAllGroupInActive(groups,instanceId) || getAllClusterInactive(clusterData,instanceId) || getAllGroupInActive(groups,instanceId)) {
      if (component instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (component instanceof Group) {
        if (((Group)component).getStatus(null) != GroupStatus.Inactive) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier());
          ApplicationBuilder.handleGroupInActivateEvent(appId,component.getUniqueIdentifier(),instanceId);
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return true;
}","private boolean doProcess(String idOfComponent,String appId,String instanceId){
  ParentComponent component;
  Map<String,Group> groups;
  Map<String,ClusterDataHolder> clusterData;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  try {
    ApplicationHolder.acquireWriteLock();
    if (idOfComponent.equals(appId)) {
      component=ApplicationHolder.getApplications().getApplication(appId);
    }
 else {
      component=ApplicationHolder.getApplications().getApplication(appId).getGroupRecursively(idOfComponent);
    }
    groups=component.getAliasToGroupMap();
    clusterData=component.getClusterDataMap();
    if (groups.isEmpty() && getAllClusterInactive(clusterData,instanceId) || clusterData.isEmpty() && getAllGroupInActive(groups,instanceId) || getAllClusterInactive(clusterData,instanceId) || getAllGroupInActive(groups,instanceId)) {
      if (component instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
        return true;
      }
 else       if (component instanceof Group) {
        if (((Group)component).getStatus(null) != GroupStatus.Inactive) {
          log.info(""String_Node_Str"" + component.getUniqueIdentifier());
          ApplicationBuilder.handleGroupInActivateEvent(appId,component.getUniqueIdentifier(),instanceId);
          return true;
        }
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  return false;
}",0.982124079915878
116218,"public boolean process(String idOfComponent,String appId,String instanceId){
  GroupStatusProcessor root=(GroupStatusProcessor)list.getFirst();
  if (root == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return root.process(idOfComponent,appId,instanceId);
}","public boolean process(String idOfComponent,String appId,String instanceId){
  GroupStatusProcessor root=(GroupStatusProcessor)list.getFirst();
  if (root == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + ""String_Node_Str"" + idOfComponent + ""String_Node_Str"");
  }
  return root.process(idOfComponent,appId,instanceId);
}",0.7633136094674556
116219,"public static void handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Set<ClusterDataHolder> clusterData;
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return;
    }
    clusterData=application.getClusterDataRecursively();
    Collection<ApplicationInstance> context=application.getInstanceIdToInstanceContextMap().values();
    ApplicationStatus status=ApplicationStatus.Terminating;
    for (    ApplicationInstance context1 : context) {
      if (context1.isStateTransitionValid(status)) {
        application.setStatus(status,context1.getInstanceId());
        updateApplicationMonitor(appId,status,context1.getInstanceId());
        ApplicationHolder.persistApplication(application);
        ApplicationsEventPublisher.sendApplicationTerminatingEvent(appId,context1.getInstanceId());
      }
 else {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,context1.getInstanceId() + context1.getStatus(),status));
      }
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  for (  ClusterDataHolder aClusterData : clusterData) {
    if (AutoscalerContext.getInstance().getClusterMonitor(aClusterData.getClusterId()) == null) {
      TopologyManager.acquireReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      try {
        Service service=TopologyManager.getTopology().getService(aClusterData.getServiceType());
        if (service != null) {
          Cluster cluster=service.getCluster(aClusterData.getClusterId());
          if (cluster != null) {
          }
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(aClusterData.getServiceType(),aClusterData.getClusterId());
      }
    }
  }
}","public static void handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Set<ClusterDataHolder> clusterData;
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    Application application=applications.getApplication(appId);
    if (application == null) {
      log.warn(String.format(""String_Node_Str"",appId));
      return;
    }
 else {
      org.apache.stratos.autoscaler.pojo.policy.deployment.DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);
      if (policy != null) {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId));
      }
    }
    ApplicationHolder.removeApplication(appId);
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  log.info(""String_Node_Str"" + appId + ""String_Node_Str"");
}",0.3491735537190082
116220,"public static VMServiceClusterContext getVMServiceClusterContext(String instanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  AutoscalePolicy autoscalePolicy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  String deploymentPolicyName;
  DeploymentPolicy deploymentPolicy;
  ApplicationHolder.acquireReadLock();
  try {
    Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
    deploymentPolicyName=application.getDeploymentPolicy();
    deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  return new VMServiceClusterContext(cluster.getClusterId(),cluster.getServiceName(),autoscalePolicy,deploymentPolicy);
}","public static VMServiceClusterContext getVMServiceClusterContext(String instanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  AutoscalePolicy autoscalePolicy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  DeploymentPolicy deploymentPolicy;
  ApplicationHolder.acquireReadLock();
  try {
    Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
    deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(cluster.getAppId());
    ChildPolicy policy=deploymentPolicy.getChildPolicy(AutoscalerUtil.getAliasFromClusterId(cluster.getClusterId()));
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  return new VMServiceClusterContext(cluster.getClusterId(),cluster.getServiceName(),autoscalePolicy,deploymentPolicy);
}",0.664073894020418
116221,"public ClusterInstanceContext(String clusterInstanceId,String partitionAlgo,ChildLevelPartition[] partitions,int min){
  this.id=clusterInstanceId;
  this.min=min;
  if (partitions == null) {
    this.partitions=new ChildLevelPartition[0];
  }
 else {
    this.partitions=Arrays.copyOf(partitions,partitions.length);
  }
  partitionCtxts=new ArrayList<ClusterLevelPartitionContext>();
  this.partitionAlgorithm=partitionAlgo;
  requestsInFlight=new RequestsInFlight();
  loadAverage=new LoadAverage();
  memoryConsumption=new MemoryConsumption();
  for (  ChildLevelPartition partition : partitions) {
    maxInstanceCount+=partition.getMax();
  }
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
}","public ClusterInstanceContext(String clusterInstanceId,String partitionAlgo,ChildLevelPartition[] partitions,int min){
  super(clusterInstanceId);
  this.min=min;
  if (partitions == null) {
    this.partitions=new ChildLevelPartition[0];
  }
 else {
    this.partitions=Arrays.copyOf(partitions,partitions.length);
  }
  partitionCtxts=new ArrayList<ClusterLevelPartitionContext>();
  this.partitionAlgorithm=partitionAlgo;
  requestsInFlight=new RequestsInFlight();
  loadAverage=new LoadAverage();
  memoryConsumption=new MemoryConsumption();
  for (  ChildLevelPartition partition : partitions) {
    maxInstanceCount+=partition.getMax();
  }
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
}",0.9679109364767516
116222,"private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,DeploymentPolicy deploymentPolicy,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  ChildLevelNetworkPartition networkPartition=deploymentPolicy.getChildLevelNetworkPartition(clusterInstance.getNetworkPartitionId());
  if (networkPartition == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelPartition partition=networkPartition.getChildLevelPartition(clusterInstance.getPartitionId());
  if (partition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition partition1=deploymentPolicy.getApplicationLevelNetworkPartition(networkPartition.getId()).getPartition(partition.getPartitionId());
  CloudControllerClient.getInstance().validatePartition(convertTOCCPartition(partition1));
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(clusterInstance.getNetworkPartitionId(),networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(0);
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  clusterLevelPartitionContext.setNetworkPartitionId(networkPartition.getId());
  addMembersFromTopology(cluster,partition1,clusterLevelPartitionContext);
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  if (clusterInstanceContext == null) {
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),networkPartition.getPartitionAlgo(),networkPartition.getChildLevelPartitions(),networkPartition.getMin());
  }
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  return clusterLevelNetworkPartitionContext;
}","private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  ChildLevelNetworkPartition networkPartition=deploymentPolicy.getChildLevelNetworkPartition(clusterInstance.getNetworkPartitionId());
  if (networkPartition == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelPartition partition=networkPartition.getChildLevelPartition(clusterInstance.getPartitionId());
  if (partition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition partition1=deploymentPolicy.getApplicationLevelNetworkPartition(networkPartition.getId()).getPartition(partition.getPartitionId());
  CloudControllerClient.getInstance().validatePartition(convertTOCCPartition(partition1));
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(clusterInstance.getNetworkPartitionId(),networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(0);
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  clusterLevelPartitionContext.setNetworkPartitionId(networkPartition.getId());
  addMembersFromTopology(cluster,partition1,clusterLevelPartitionContext);
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  if (clusterInstanceContext == null) {
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),networkPartition.getPartitionAlgo(),networkPartition.getChildLevelPartitions(),networkPartition.getMin());
  }
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  return clusterLevelNetworkPartitionContext;
}",0.9933254809579898
116223,"public void addInstanceContext(String instanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  ClusterLevelNetworkPartitionContext networkPartitionContext=null;
  ClusterInstance clusterInstance=cluster.getInstanceContexts(instanceId);
  if (networkPartitionCtxts.containsKey(clusterInstance.getNetworkPartitionId())) {
    networkPartitionContext=this.networkPartitionCtxts.get(clusterInstance.getNetworkPartitionId());
  }
  if (clusterInstance.getPartitionId() != null) {
    networkPartitionContext=addPartition(clusterInstance,cluster,this.deploymentPolicy,networkPartitionContext);
  }
 else {
    networkPartitionContext=parseDeploymentPolicy(clusterInstance,cluster,this.deploymentPolicy,networkPartitionContext);
  }
  if (!networkPartitionCtxts.containsKey(clusterInstance.getNetworkPartitionId())) {
    this.networkPartitionCtxts.put(clusterInstance.getNetworkPartitionId(),networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterInstance.getNetworkPartitionId()));
    }
  }
}","public void addInstanceContext(String instanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  ClusterLevelNetworkPartitionContext networkPartitionContext=null;
  ClusterInstance clusterInstance=cluster.getInstanceContexts(instanceId);
  if (networkPartitionCtxts.containsKey(clusterInstance.getNetworkPartitionId())) {
    networkPartitionContext=this.networkPartitionCtxts.get(clusterInstance.getNetworkPartitionId());
  }
  if (clusterInstance.getPartitionId() != null) {
    networkPartitionContext=addPartition(clusterInstance,cluster,networkPartitionContext);
  }
 else {
    ChildPolicy policy=this.deploymentPolicy.getChildPolicy(AutoscalerUtil.getAliasFromClusterId(clusterId));
    networkPartitionContext=parseDeploymentPolicy(clusterInstance,cluster,policy,networkPartitionContext);
  }
  if (!networkPartitionCtxts.containsKey(clusterInstance.getNetworkPartitionId())) {
    this.networkPartitionCtxts.put(clusterInstance.getNetworkPartitionId(),networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterInstance.getNetworkPartitionId()));
    }
  }
}",0.9231444883618796
116224,"private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(ClusterInstance instance,Cluster cluster,DeploymentPolicy deploymentPolicy,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicy.getId());
  }
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ChildLevelNetworkPartition networkPartition;
  networkPartition=deploymentPolicy.getChildLevelNetworkPartition(instance.getNetworkPartitionId());
  String networkPartitionId=networkPartition.getId();
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(networkPartitionId,networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(instance.getInstanceId());
  if (clusterInstanceContext == null) {
    clusterInstanceContext=new ClusterInstanceContext(instance.getInstanceId(),networkPartition.getPartitionAlgo(),networkPartition.getChildLevelPartitions(),networkPartition.getMin());
  }
  for (  ChildLevelPartition partition : networkPartition.getChildLevelPartitions()) {
    ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(0);
    clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
    clusterLevelPartitionContext.setProperties(cluster.getProperties());
    clusterLevelPartitionContext.setNetworkPartitionId(networkPartition.getId());
    Partition partition1=deploymentPolicy.getApplicationLevelNetworkPartition(networkPartitionId).getPartition(partition.getPartitionId());
    addMembersFromTopology(cluster,partition1,clusterLevelPartitionContext);
    clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
    }
  }
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterLevelNetworkPartitionContext.getId()));
  }
  return clusterLevelNetworkPartitionContext;
}","private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(ClusterInstance instance,Cluster cluster,ChildPolicy deploymentPolicy,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicy.getId());
  }
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelPartition[] childLevelPartitions=deploymentPolicy.getChildLevelNetworkPartition(clusterLevelNetworkPartitionContext.getId()).getChildLevelPartitions();
  if (childLevelPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  for (  ChildLevelPartition childLevelPartition : childLevelPartitions) {
    Partition partition=this.deploymentPolicy.getApplicationLevelNetworkPartition(clusterLevelNetworkPartitionContext.getId()).getPartition(childLevelPartition.getPartitionId());
    CloudControllerClient.getInstance().validatePartition(convertTOCCPartition(partition));
  }
  ChildLevelNetworkPartition networkPartition;
  networkPartition=deploymentPolicy.getChildLevelNetworkPartition(instance.getNetworkPartitionId());
  String networkPartitionId=networkPartition.getId();
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(networkPartitionId,networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(instance.getInstanceId());
  if (clusterInstanceContext == null) {
    clusterInstanceContext=new ClusterInstanceContext(instance.getInstanceId(),networkPartition.getPartitionAlgo(),networkPartition.getChildLevelPartitions(),networkPartition.getMin());
  }
  for (  ChildLevelPartition partition : networkPartition.getChildLevelPartitions()) {
    ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(0);
    clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
    clusterLevelPartitionContext.setProperties(cluster.getProperties());
    clusterLevelPartitionContext.setNetworkPartitionId(networkPartition.getId());
    Partition partition1=this.deploymentPolicy.getApplicationLevelNetworkPartition(clusterLevelNetworkPartitionContext.getId()).getPartition(partition.getPartitionId());
    addMembersFromTopology(cluster,partition1,clusterLevelPartitionContext);
    clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
    }
  }
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterLevelNetworkPartitionContext.getId()));
  }
  return clusterLevelNetworkPartitionContext;
}",0.4677754677754678
116225,"@Override public boolean addDeploymentPolicy(DeploymentPolicy deploymentPolicy) throws InvalidPolicyException {
  boolean hasDeployed=PolicyManager.getInstance().deployDeploymentPolicy(deploymentPolicy);
  return hasDeployed;
}","@Override public boolean addDeploymentPolicy(DeploymentPolicy deploymentPolicy) throws InvalidPolicyException {
  boolean hasDeployed=PolicyManager.getInstance().deployDeploymentPolicy(deploymentPolicy);
  ApplicationHolder.acquireReadLock();
  boolean allClusterInitialized=false;
  try {
    Application application=ApplicationHolder.getApplications().getApplication(deploymentPolicy.getApplicationId());
    if (application != null) {
      allClusterInitialized=AutoscalerUtil.allClustersInitialized(application);
    }
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  if (allClusterInitialized) {
    AutoscalerUtil.getInstance().startApplicationMonitor(deploymentPolicy.getApplicationId());
  }
 else {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
  }
  return hasDeployed;
}",0.4407766990291262
116226,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                startApplicationMonitor(application.getUniqueIdentifier());
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          startApplicationMonitor(appId);
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      if (monitor.getStatus() == ClusterStatus.Active) {
        monitor.setStatus(ClusterStatus.Terminating);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
      }
 else {
        monitor.setStatus(ClusterStatus.Terminating);
        monitor.terminateAllMembers();
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,null));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Terminated);
      monitor.destroy();
      AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                if (cluster.isKubernetesCluster()) {
                  clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
                }
 else {
                  VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                  if (clusterContext == null) {
                    clusterMonitor.setClusterContext(ClusterContextFactory.getVMServiceClusterContext(instanceId,cluster));
                  }
 else {
                    clusterContext.addInstanceContext(instanceId,cluster);
                  }
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      if (monitor.getStatus() == ClusterStatus.Active) {
        monitor.setStatus(ClusterStatus.Terminating);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
      }
 else {
        monitor.setStatus(ClusterStatus.Terminating);
        monitor.terminateAllMembers();
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,null));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Terminated);
      monitor.destroy();
      AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                if (cluster.isKubernetesCluster()) {
                  clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
                }
 else {
                  VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                  if (clusterContext == null) {
                    clusterMonitor.setClusterContext(ClusterContextFactory.getVMServiceClusterContext(instanceId,cluster));
                  }
 else {
                    clusterContext.addInstanceContext(instanceId,cluster);
                  }
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}",0.9839457450477028
116227,"public static VMClusterContext getVMClusterContext(String instanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  AutoscalePolicy autoscalePolicy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  DeploymentPolicy deploymentPolicy;
  ApplicationHolder.acquireReadLock();
  try {
    Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
    deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(cluster.getAppId());
    ChildPolicy policy=deploymentPolicy.getChildPolicy(AutoscalerUtil.getAliasFromClusterId(cluster.getClusterId()));
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  return new VMClusterContext(cluster.getClusterId(),cluster.getServiceName(),autoscalePolicy,deploymentPolicy);
}","public static VMClusterContext getVMClusterContext(String instanceId,Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  AutoscalePolicy autoscalePolicy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  DeploymentPolicy deploymentPolicy;
  ApplicationHolder.acquireReadLock();
  try {
    deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(cluster.getAppId());
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  return new VMClusterContext(cluster.getClusterId(),cluster.getServiceName(),autoscalePolicy,deploymentPolicy);
}",0.7969264544456641
116228,"public ClusterInstanceContext(String clusterInstanceId,String partitionAlgo,ChildLevelPartition[] partitions,int min){
  super(clusterInstanceId);
  this.min=min;
  if (partitions == null) {
    this.partitions=new ChildLevelPartition[0];
  }
 else {
    this.partitions=Arrays.copyOf(partitions,partitions.length);
  }
  partitionCtxts=new ArrayList<ClusterLevelPartitionContext>();
  this.partitionAlgorithm=partitionAlgo;
  requestsInFlight=new RequestsInFlight();
  loadAverage=new LoadAverage();
  memoryConsumption=new MemoryConsumption();
  for (  ChildLevelPartition partition : partitions) {
    maxInstanceCount+=partition.getMax();
  }
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
}","public ClusterInstanceContext(String clusterInstanceId,String partitionAlgo,ChildLevelPartition[] partitions,int min){
  super(clusterInstanceId);
  this.setMinMembers(min);
  if (partitions == null) {
    this.partitions=new ChildLevelPartition[0];
  }
 else {
    this.partitions=Arrays.copyOf(partitions,partitions.length);
  }
  partitionCtxts=new ArrayList<ClusterLevelPartitionContext>();
  this.partitionAlgorithm=partitionAlgo;
  requestsInFlight=new RequestsInFlight();
  loadAverage=new LoadAverage();
  memoryConsumption=new MemoryConsumption();
  for (  ChildLevelPartition partition : partitions) {
    maxInstanceCount+=partition.getMax();
  }
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
}",0.9837345478204296
116229,"private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  ChildLevelNetworkPartition networkPartition=deploymentPolicy.getChildLevelNetworkPartition(clusterInstance.getNetworkPartitionId());
  if (networkPartition == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelPartition partition=networkPartition.getChildLevelPartition(clusterInstance.getPartitionId());
  if (partition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition partition1=deploymentPolicy.getApplicationLevelNetworkPartition(networkPartition.getId()).getPartition(partition.getPartitionId());
  CloudControllerClient.getInstance().validatePartition(convertTOCCPartition(partition1));
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(clusterInstance.getNetworkPartitionId(),networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(0);
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  clusterLevelPartitionContext.setNetworkPartitionId(networkPartition.getId());
  addMembersFromTopology(cluster,partition1,clusterLevelPartitionContext);
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  if (clusterInstanceContext == null) {
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),networkPartition.getPartitionAlgo(),networkPartition.getChildLevelPartitions(),networkPartition.getMin());
  }
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  return clusterLevelNetworkPartitionContext;
}","private ClusterLevelNetworkPartitionContext addPartition(ClusterInstance clusterInstance,Cluster cluster,ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext) throws PolicyValidationException, PartitionValidationException {
  ChildLevelNetworkPartition networkPartition=deploymentPolicy.getChildLevelNetworkPartition(clusterInstance.getNetworkPartitionId());
  if (networkPartition == null) {
    String msg=""String_Node_Str"" + deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  ChildLevelPartition partition=networkPartition.getChildLevelPartition(clusterInstance.getPartitionId());
  if (partition == null) {
    String msg=""String_Node_Str"" + clusterInstance.getPartitionId() + ""String_Node_Str""+ clusterInstance.getNetworkPartitionId()+ ""String_Node_Str""+ ""String_Node_Str""+ deploymentPolicy.getId();
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition partition1=deploymentPolicy.getApplicationLevelNetworkPartition(networkPartition.getId()).getPartition(partition.getPartitionId());
  CloudControllerClient.getInstance().validatePartition(convertTOCCPartition(partition1));
  if (clusterLevelNetworkPartitionContext == null) {
    clusterLevelNetworkPartitionContext=new ClusterLevelNetworkPartitionContext(clusterInstance.getNetworkPartitionId(),networkPartition.getPartitionAlgo(),networkPartition.getMin());
  }
  ClusterLevelPartitionContext clusterLevelPartitionContext=new ClusterLevelPartitionContext(0);
  clusterLevelPartitionContext.setServiceName(cluster.getServiceName());
  clusterLevelPartitionContext.setProperties(cluster.getProperties());
  clusterLevelPartitionContext.setNetworkPartitionId(networkPartition.getId());
  addMembersFromTopology(cluster,partition1,clusterLevelPartitionContext);
  ClusterInstanceContext clusterInstanceContext=clusterLevelNetworkPartitionContext.getClusterInstanceContext(clusterInstance.getInstanceId());
  ApplicationHolder.acquireReadLock();
  try {
    Application application=ApplicationHolder.getApplications().getApplication(cluster.getAppId());
    ClusterDataHolder dataHolder=application.getClusterData(AutoscalerUtil.getAliasFromClusterId(clusterId));
    clusterInstanceContext.setMinMembers(dataHolder.getMinInstances());
    clusterInstanceContext.setMaxMembers(dataHolder.getMaxInstances());
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  if (clusterInstanceContext == null) {
    clusterInstanceContext=new ClusterInstanceContext(clusterInstance.getInstanceId(),networkPartition.getPartitionAlgo(),networkPartition.getChildLevelPartitions(),networkPartition.getMin());
  }
  clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);
  clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",clusterLevelPartitionContext.getPartitionId()));
  }
  return clusterLevelNetworkPartitionContext;
}",0.9163346613545816
116230,"@Override protected void onEvent(Event event){
  ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
  String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
  if (clusterMonitor != null) {
    TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    try {
      Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
      if (service != null) {
        Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
        if (cluster != null) {
          try {
            if (cluster.isKubernetesCluster()) {
              clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
            }
 else {
              VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
              if (clusterContext == null) {
                clusterMonitor.setClusterContext(ClusterContextFactory.getVMClusterContext(instanceId,cluster));
              }
 else {
                clusterContext.addInstanceContext(instanceId,cluster);
              }
            }
            if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
              clusterMonitor.startScheduler();
              log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
            }
          }
 catch (          PolicyValidationException e) {
            log.error(e.getMessage(),e);
          }
catch (          PartitionValidationException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
      }
    }
  finally {
      TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    }
  }
 else {
    log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
  }
}","@Override protected void onEvent(Event event){
  ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
  AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
  String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
  if (clusterMonitor != null) {
    TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    try {
      Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
      if (service != null) {
        Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
        if (cluster != null) {
          try {
            if (cluster.isKubernetesCluster()) {
              clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
            }
 else {
              VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
              if (clusterContext == null) {
                clusterMonitor.setClusterContext(ClusterContextFactory.getVMClusterContext(instanceId,cluster));
              }
              clusterContext.addInstanceContext(instanceId,cluster);
            }
            if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
              clusterMonitor.startScheduler();
              log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
            }
          }
 catch (          PolicyValidationException e) {
            log.error(e.getMessage(),e);
          }
catch (          PartitionValidationException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
      }
    }
  finally {
      TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
    }
  }
 else {
    log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
  }
}",0.9942781690140844
116231,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      if (monitor.getStatus() == ClusterStatus.Active) {
        monitor.setStatus(ClusterStatus.Terminating);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
      }
 else {
        monitor.setStatus(ClusterStatus.Terminating);
        monitor.terminateAllMembers();
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,null));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Terminated);
      monitor.destroy();
      AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                if (cluster.isKubernetesCluster()) {
                  clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
                }
 else {
                  VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                  if (clusterContext == null) {
                    clusterMonitor.setClusterContext(ClusterContextFactory.getVMClusterContext(instanceId,cluster));
                  }
 else {
                    clusterContext.addInstanceContext(instanceId,cluster);
                  }
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                DeploymentPolicy policy=PolicyManager.getInstance().getDeploymentPolicyByApplication(application.getUniqueIdentifier());
                if (policy != null) {
                  AutoscalerUtil.getInstance().startApplicationMonitor(application.getUniqueIdentifier());
                }
 else {
                  log.info(""String_Node_Str"" + ""String_Node_Str"" + application.getUniqueIdentifier());
                }
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      String instanceId=clusterTerminatingEvent.getInstanceId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ClusterStatusEventPublisher.sendClusterTerminatedEvent(clusterTerminatingEvent.getAppId(),clusterTerminatingEvent.getServiceName(),clusterId,instanceId);
        return;
      }
      if (monitor.getStatus() == ClusterStatus.Active) {
        monitor.setStatus(ClusterStatus.Terminating);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
      }
 else {
        monitor.setStatus(ClusterStatus.Terminating);
        monitor.terminateAllMembers();
      }
      ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(""String_Node_Str"",clusterId,instanceId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated,clusterId,null));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Terminated);
      monitor.destroy();
      AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInstanceCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterInstanceCreatedEvent clusterInstanceCreatedEvent=(ClusterInstanceCreatedEvent)event;
      AbstractClusterMonitor clusterMonitor=AutoscalerContext.getInstance().getClusterMonitor(clusterInstanceCreatedEvent.getClusterId());
      String instanceId=((ClusterInstanceCreatedEvent)event).getInstanceId();
      if (clusterMonitor != null) {
        TopologyManager.acquireReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        try {
          Service service=TopologyManager.getTopology().getService(clusterInstanceCreatedEvent.getServiceName());
          if (service != null) {
            Cluster cluster=service.getCluster(clusterInstanceCreatedEvent.getClusterId());
            if (cluster != null) {
              try {
                if (cluster.isKubernetesCluster()) {
                  clusterMonitor.setClusterContext(ClusterContextFactory.getKubernetesClusterContext(instanceId,cluster));
                }
 else {
                  VMClusterContext clusterContext=(VMClusterContext)clusterMonitor.getClusterContext();
                  if (clusterContext == null) {
                    clusterMonitor.setClusterContext(ClusterContextFactory.getVMClusterContext(instanceId,cluster));
                  }
                  clusterContext.addInstanceContext(instanceId,cluster);
                }
                if (clusterMonitor.hasMonitoringStarted().compareAndSet(false,true)) {
                  clusterMonitor.startScheduler();
                  log.info(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId() + ""String_Node_Str"");
                }
              }
 catch (              PolicyValidationException e) {
                log.error(e.getMessage(),e);
              }
catch (              PartitionValidationException e) {
                log.error(e.getMessage(),e);
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getServiceName() + ""String_Node_Str""+ clusterInstanceCreatedEvent.getClusterId());
          }
        }
  finally {
          TopologyManager.releaseReadLockForCluster(clusterInstanceCreatedEvent.getServiceName(),clusterInstanceCreatedEvent.getClusterId());
        }
      }
 else {
        log.error(""String_Node_Str"" + clusterInstanceCreatedEvent.getClusterId());
      }
    }
  }
);
}",0.9988621709777744
116232,"/** 
 * Put a key value pair to a map, if clustered use a distributed lock.
 * @param map
 * @param key
 * @param value
 */
public void putToMap(Map map,Object key,Object value){
  if (clustered) {
    ILock lock=null;
    try {
      lock=acquireDistributedLock(map);
      ((IMap)map).set(key,value);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    map.put(key,value);
  }
}","/** 
 * Put a key value pair to a map, if clustered use a distributed lock.
 * @param map
 * @param key
 * @param value
 */
public void putToMap(Map map,Object key,Object value){
  if (clustered) {
    ILock lock=null;
    try {
      IMap imap=(IMap)map;
      lock=acquireDistributedLock(imap.getName());
      imap.set(key,value);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    map.put(key,value);
  }
}",0.8510131108462455
116233,"/** 
 * Add an object to a list, if clustered use a distributed lock.
 * @param list
 * @param value
 */
public void addToList(List list,Object value){
  if (clustered) {
    ILock lock=null;
    try {
      lock=acquireDistributedLock(list);
      ((IList)list).add(value);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    list.add(value);
  }
}","/** 
 * Add an object to a list, if clustered use a distributed lock.
 * @param list
 * @param value
 */
public void addToList(List list,Object value){
  if (clustered) {
    ILock lock=null;
    try {
      IList ilist=(IList)list;
      lock=acquireDistributedLock(ilist.getName());
      ilist.add(value);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    list.add(value);
  }
}",0.8794871794871795
116234,"private void releaseDistributedLock(ILock lock){
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",lock.getKey()));
  }
  lock.forceUnlock();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",lock.getKey()));
  }
}","private void releaseDistributedLock(ILock lock){
  if (lock == null) {
    return;
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",lock.getKey()));
  }
  lock.forceUnlock();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",lock.getKey()));
  }
}",0.9333333333333332
116235,"/** 
 * Remove an object from a map, if clustered use a distributed lock.
 * @param map
 * @param key
 */
public void removeFromMap(Map map,Object key){
  if (clustered) {
    ILock lock=null;
    try {
      lock=acquireDistributedLock(map);
      ((IMap)map).delete(key);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    map.remove(key);
  }
}","/** 
 * Remove an object from a map, if clustered use a distributed lock.
 * @param map
 * @param key
 */
public void removeFromMap(Map map,Object key){
  if (clustered) {
    ILock lock=null;
    try {
      IMap imap=(IMap)map;
      lock=acquireDistributedLock(imap.getName());
      imap.delete(key);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    map.remove(key);
  }
}",0.8387096774193549
116236,"/** 
 * Remove an object from a list, if clustered use a distributed lock.
 * @param list
 * @param value
 */
public void removeFromList(List list,Object value){
  if (clustered) {
    ILock lock=null;
    try {
      lock=acquireDistributedLock(list);
      ((IList)list).remove(value);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    list.remove(value);
  }
}","/** 
 * Remove an object from a list, if clustered use a distributed lock.
 * @param list
 * @param value
 */
public void removeFromList(List list,Object value){
  if (clustered) {
    ILock lock=null;
    try {
      IList ilist=(IList)list;
      lock=acquireDistributedLock(ilist.getName());
      ilist.remove(value);
    }
  finally {
      releaseDistributedLock(lock);
    }
  }
 else {
    list.remove(value);
  }
}",0.8842364532019704
116237,"@Test public void testPutToMapLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  Map<String,String> map=provider.getMap(""String_Node_Str"");
  provider.putToMap(map,""String_Node_Str"",""String_Node_Str"");
  assertEquals(map.get(""String_Node_Str""),""String_Node_Str"");
}","@Test public void testPutToMapLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  testPutToMap(provider);
}",0.6031042128603105
116238,"@Test public void testAddToListLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  List list=provider.getList(""String_Node_Str"");
  String value1=""String_Node_Str"";
  provider.addToList(list,value1);
  assertTrue(list.contains(value1));
}","@Test public void testAddToListLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  testAddToList(provider);
}",0.6588235294117647
116239,"@Test public void testRemoveFromListLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  List list=provider.getList(""String_Node_Str"");
  String value1=""String_Node_Str"";
  provider.addToList(list,value1);
  assertTrue(list.contains(value1));
  provider.removeFromList(list,value1);
  assertFalse(list.contains(value1));
}","@Test public void testRemoveFromListLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  testRemovalFromList(provider);
}",0.5741811175337187
116240,"@Test public void testRemoveFromMapLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  Map<String,String> map=provider.getMap(""String_Node_Str"");
  provider.putToMap(map,""String_Node_Str"",""String_Node_Str"");
  assertEquals(map.get(""String_Node_Str""),""String_Node_Str"");
  provider.removeFromMap(map,""String_Node_Str"");
  assertNull(map.get(""String_Node_Str""));
}","@Test public void testRemoveFromMapLocal(){
  DistributedObjectProvider provider=new DistributedObjectProvider(false,null);
  testRemoveFromMap(provider);
}",0.5421903052064632
116241,"public static AutoscalePolicy[] getAutoScalePolicies() throws RestAPIException {
  org.apache.stratos.autoscaler.stub.policy.model.AutoscalePolicy[] autoscalePolicies=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicies=autoscalerServiceClient.getAutoScalePolicies();
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojos(autoscalePolicies);
}","public static AutoscalePolicy[] getAutoScalePolicies() throws RestAPIException {
  org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy[] autoscalePolicies=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicies=autoscalerServiceClient.getAutoScalePolicies();
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojos(autoscalePolicies);
}",0.9872408293460924
116242,"public static AutoscalePolicy getAutoScalePolicy(String autoscalePolicyId) throws RestAPIException {
  org.apache.stratos.autoscaler.stub.policy.model.AutoscalePolicy autoscalePolicy=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicy=autoscalerServiceClient.getAutoScalePolicy(autoscalePolicyId);
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + autoscalePolicyId + ""String_Node_Str""+ e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojo(autoscalePolicy);
}","public static AutoscalePolicy getAutoScalePolicy(String autoscalePolicyId) throws RestAPIException {
  org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy autoscalePolicy=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicy=autoscalerServiceClient.getAutoScalePolicy(autoscalePolicyId);
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + autoscalePolicyId + ""String_Node_Str""+ e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojo(autoscalePolicy);
}",0.9797687861271676
116243,"public static StratosApiResponse deployAutoscalingPolicy(AutoscalePolicy autoscalePolicyBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.policy.model.AutoscalePolicy autoscalePolicy=PojoConverter.convertToCCAutoscalerPojo(autoscalePolicyBean);
    try {
      autoscalerServiceClient.deployAutoscalingPolicy(autoscalePolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  StratosApiResponse stratosApiResponse=new StratosApiResponse();
  stratosApiResponse.setMessage(""String_Node_Str"" + autoscalePolicyBean.getId());
  return stratosApiResponse;
}","public static StratosApiResponse deployAutoscalingPolicy(AutoscalePolicy autoscalePolicyBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy autoscalePolicy=PojoConverter.convertToCCAutoscalerPojo(autoscalePolicyBean);
    try {
      autoscalerServiceClient.deployAutoscalingPolicy(autoscalePolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  StratosApiResponse stratosApiResponse=new StratosApiResponse();
  stratosApiResponse.setMessage(""String_Node_Str"" + autoscalePolicyBean.getId());
  return stratosApiResponse;
}",0.9861660079051384
116244,"public static AutoscalePolicy[] getAutoScalePolicies() throws RestAPIException {
  org.apache.stratos.autoscaler.stub.policy.model.AutoscalePolicy[] autoscalePolicies=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicies=autoscalerServiceClient.getAutoScalePolicies();
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojos(autoscalePolicies);
}","public static AutoscalePolicy[] getAutoScalePolicies() throws RestAPIException {
  org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy[] autoscalePolicies=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicies=autoscalerServiceClient.getAutoScalePolicies();
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojos(autoscalePolicies);
}",0.9872408293460924
116245,"public static boolean updateKubernetesHost(KubernetesHost kubernetesHostBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.kubernetes.KubernetesHost kubernetesHost=PojoConverter.convertToASKubernetesHostPojo(kubernetesHostBean);
    try {
      return autoscalerServiceClient.updateKubernetesHost(kubernetesHost);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesHostExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesHostException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    AutoScalerServiceNonExistingKubernetesHostExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesHostException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}","public static boolean updateKubernetesHost(KubernetesHost kubernetesHostBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.common.kubernetes.KubernetesHost kubernetesHost=PojoConverter.convertToASKubernetesHostPojo(kubernetesHostBean);
    try {
      return autoscalerServiceClient.updateKubernetesHost(kubernetesHost);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesHostExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesHostException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    AutoScalerServiceNonExistingKubernetesHostExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesHostException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}",0.9904328018223236
116246,"public static void updateDeploymentPolicy(org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",deploymentPolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.policy.model.DeploymentPolicy deploymentPolicy=PojoConverter.convetToCCDeploymentPolicyPojo(deploymentPolicyBean);
    try {
      autoscalerServiceClient.updateDeploymentPolicy(deploymentPolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}","public static void updateDeploymentPolicy(org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",deploymentPolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.deployment.policy.DeploymentPolicy deploymentPolicy=PojoConverter.convetToCCDeploymentPolicyPojo(deploymentPolicyBean);
    try {
      autoscalerServiceClient.updateDeploymentPolicy(deploymentPolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}",0.9850899742930592
116247,"public static void deployAutoscalingPolicy(AutoscalePolicy autoscalePolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",autoscalePolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.policy.model.AutoscalePolicy autoscalePolicy=PojoConverter.convertToCCAutoscalerPojo(autoscalePolicyBean);
    try {
      autoscalerServiceClient.deployAutoscalingPolicy(autoscalePolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}","public static void deployAutoscalingPolicy(AutoscalePolicy autoscalePolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",autoscalePolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy autoscalePolicy=PojoConverter.convertToCCAutoscalerPojo(autoscalePolicyBean);
    try {
      autoscalerServiceClient.deployAutoscalingPolicy(autoscalePolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}",0.9843575418994414
116248,"public static boolean updateKubernetesMaster(KubernetesMaster kubernetesMasterBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.kubernetes.KubernetesMaster kubernetesMaster=PojoConverter.convertToASKubernetesMasterPojo(kubernetesMasterBean);
    try {
      return autoscalerServiceClient.updateKubernetesMaster(kubernetesMaster);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesMasterExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesMasterException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    AutoScalerServiceNonExistingKubernetesMasterExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesMasterException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}","public static boolean updateKubernetesMaster(KubernetesMaster kubernetesMasterBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.common.kubernetes.KubernetesMaster kubernetesMaster=PojoConverter.convertToASKubernetesMasterPojo(kubernetesMasterBean);
    try {
      return autoscalerServiceClient.updateKubernetesMaster(kubernetesMaster);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesMasterExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesMasterException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    AutoScalerServiceNonExistingKubernetesMasterExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesMasterException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}",0.9906542056074766
116249,"public static KubernetesHost[] getKubernetesHosts(String kubernetesGroupId) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.autoscaler.stub.kubernetes.KubernetesHost[] kubernetesHosts=autoscalerServiceClient.getKubernetesHosts(kubernetesGroupId);
      List<KubernetesHost> arrayList=PojoConverter.populateKubernetesHostsPojo(kubernetesHosts);
      KubernetesHost[] array=new KubernetesHost[arrayList.size()];
      array=arrayList.toArray(array);
      return array;
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return null;
}","public static KubernetesHost[] getKubernetesHosts(String kubernetesGroupId) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.common.kubernetes.KubernetesHost[] kubernetesHosts=autoscalerServiceClient.getKubernetesHosts(kubernetesGroupId);
      List<KubernetesHost> arrayList=PojoConverter.populateKubernetesHostsPojo(kubernetesHosts);
      KubernetesHost[] array=new KubernetesHost[arrayList.size()];
      array=arrayList.toArray(array);
      return array;
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return null;
}",0.9895366218236172
116250,"public static boolean deployKubernetesGroup(KubernetesGroup kubernetesGroupBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.kubernetes.KubernetesGroup kubernetesGroup=PojoConverter.convertToASKubernetesGroupPojo(kubernetesGroupBean);
    try {
      return autoscalerServiceClient.deployKubernetesGroup(kubernetesGroup);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}","public static boolean deployKubernetesGroup(KubernetesGroup kubernetesGroupBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.common.kubernetes.KubernetesGroup kubernetesGroup=PojoConverter.convertToASKubernetesGroupPojo(kubernetesGroupBean);
    try {
      return autoscalerServiceClient.deployKubernetesGroup(kubernetesGroup);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}",0.9877551020408164
116251,"public static boolean deployKubernetesHost(String kubernetesGroupId,KubernetesHost kubernetesHostBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.kubernetes.KubernetesHost kubernetesHost=PojoConverter.convertToASKubernetesHostPojo(kubernetesHostBean);
    try {
      return autoscalerServiceClient.deployKubernetesHost(kubernetesGroupId,kubernetesHost);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesHostExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesHostException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}","public static boolean deployKubernetesHost(String kubernetesGroupId,KubernetesHost kubernetesHostBean) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.common.kubernetes.KubernetesHost kubernetesHost=PojoConverter.convertToASKubernetesHostPojo(kubernetesHostBean);
    try {
      return autoscalerServiceClient.deployKubernetesHost(kubernetesGroupId,kubernetesHost);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidKubernetesHostExceptionException e) {
      String message=e.getFaultMessage().getInvalidKubernetesHostException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return false;
}",0.9908096280087528
116252,"public static void updateAutoscalingPolicy(AutoscalePolicy autoscalePolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",autoscalePolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.policy.model.AutoscalePolicy autoscalePolicy=PojoConverter.convertToCCAutoscalerPojo(autoscalePolicyBean);
    try {
      autoscalerServiceClient.updateAutoscalingPolicy(autoscalePolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}","public static void updateAutoscalingPolicy(AutoscalePolicy autoscalePolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",autoscalePolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy autoscalePolicy=PojoConverter.convertToCCAutoscalerPojo(autoscalePolicyBean);
    try {
      autoscalerServiceClient.updateAutoscalingPolicy(autoscalePolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}",0.9843575418994414
116253,"public static KubernetesGroup[] getAvailableKubernetesGroups() throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.autoscaler.stub.kubernetes.KubernetesGroup[] kubernetesGroups=autoscalerServiceClient.getAvailableKubernetesGroups();
      return PojoConverter.populateKubernetesGroupsPojo(kubernetesGroups);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
  }
  return null;
}","public static KubernetesGroup[] getAvailableKubernetesGroups() throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.common.kubernetes.KubernetesGroup[] kubernetesGroups=autoscalerServiceClient.getAvailableKubernetesGroups();
      return PojoConverter.populateKubernetesGroupsPojo(kubernetesGroups);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
  }
  return null;
}",0.982066609735269
116254,"public static AutoscalePolicy getAutoScalePolicy(String autoscalePolicyId) throws RestAPIException {
  org.apache.stratos.autoscaler.stub.policy.model.AutoscalePolicy autoscalePolicy=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicy=autoscalerServiceClient.getAutoScalePolicy(autoscalePolicyId);
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + autoscalePolicyId + ""String_Node_Str""+ e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojo(autoscalePolicy);
}","public static AutoscalePolicy getAutoScalePolicy(String autoscalePolicyId) throws RestAPIException {
  org.apache.stratos.autoscaler.stub.autoscale.policy.AutoscalePolicy autoscalePolicy=null;
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      autoscalePolicy=autoscalerServiceClient.getAutoScalePolicy(autoscalePolicyId);
    }
 catch (    RemoteException e) {
      String errorMsg=""String_Node_Str"" + autoscalePolicyId + ""String_Node_Str""+ e.getMessage();
      log.error(errorMsg,e);
      throw new RestAPIException(errorMsg,e);
    }
  }
  return PojoConverter.populateAutoscalePojo(autoscalePolicy);
}",0.9797687861271676
116255,"public static void deployDeploymentPolicy(org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",deploymentPolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.policy.model.DeploymentPolicy deploymentPolicy=PojoConverter.convetToCCDeploymentPolicyPojo(deploymentPolicyBean);
    try {
      autoscalerServiceClient.deployDeploymentPolicy(deploymentPolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}","public static void deployDeploymentPolicy(org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean) throws RestAPIException {
  log.info(String.format(""String_Node_Str"",deploymentPolicyBean.getId()));
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    org.apache.stratos.autoscaler.stub.deployment.policy.DeploymentPolicy deploymentPolicy=PojoConverter.convetToCCDeploymentPolicyPojo(deploymentPolicyBean);
    try {
      autoscalerServiceClient.deployDeploymentPolicy(deploymentPolicy);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceInvalidPolicyExceptionException e) {
      String message=e.getFaultMessage().getInvalidPolicyException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
}",0.9850899742930592
116256,"public static KubernetesGroup getKubernetesGroup(String kubernetesGroupId) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.autoscaler.stub.kubernetes.KubernetesGroup kubernetesGroup=autoscalerServiceClient.getKubernetesGroup(kubernetesGroupId);
      return PojoConverter.populateKubernetesGroupPojo(kubernetesGroup);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return null;
}","public static KubernetesGroup getKubernetesGroup(String kubernetesGroupId) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.common.kubernetes.KubernetesGroup kubernetesGroup=autoscalerServiceClient.getKubernetesGroup(kubernetesGroupId);
      return PojoConverter.populateKubernetesGroupPojo(kubernetesGroup);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return null;
}",0.987683284457478
116257,"public static KubernetesMaster getKubernetesMaster(String kubernetesGroupId) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.autoscaler.stub.kubernetes.KubernetesMaster kubernetesMaster=autoscalerServiceClient.getKubernetesMaster(kubernetesGroupId);
      return PojoConverter.populateKubernetesMasterPojo(kubernetesMaster);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return null;
}","public static KubernetesMaster getKubernetesMaster(String kubernetesGroupId) throws RestAPIException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  if (autoscalerServiceClient != null) {
    try {
      org.apache.stratos.common.kubernetes.KubernetesMaster kubernetesMaster=autoscalerServiceClient.getKubernetesMaster(kubernetesGroupId);
      return PojoConverter.populateKubernetesMasterPojo(kubernetesMaster);
    }
 catch (    RemoteException e) {
      log.error(e.getMessage(),e);
      throw new RestAPIException(e.getMessage(),e);
    }
catch (    AutoScalerServiceNonExistingKubernetesGroupExceptionException e) {
      String message=e.getFaultMessage().getNonExistingKubernetesGroupException().getMessage();
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
  return null;
}",0.987783595113438
116258,"public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  try {
    clusterId=AutoscalerServiceClient.getServiceClient().getDefaultLBClusterId(getDeploymentPolicyName());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new ADCException(e);
  }
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    defaultLBServiceExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(null,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(null,cartridgeInfo.getHostName()));
    return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
  }
}","public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    defaultLBServiceExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(null,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(null,cartridgeInfo.getHostName()));
    return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
  }
}",0.914179104477612
116259,"public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  try {
    clusterId=AutoscalerServiceClient.getServiceClient().getServiceLBClusterId(getLoadBalancedServiceType(),getDeploymentPolicyName());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new ADCException(e);
  }
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    serviceAwareLBExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(getLoadBalancedServiceType(),cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(getLoadBalancedServiceType(),cartridgeInfo.getHostName()));
    PayloadData serviceLevelLbPayloadData=createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
    serviceLevelLbPayloadData.add(CartridgeConstants.LOAD_BALANCED_SERVICE_TYPE,getLoadBalancedServiceType());
    return serviceLevelLbPayloadData;
  }
}","public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    serviceAwareLBExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(getLoadBalancedServiceType(),cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(getLoadBalancedServiceType(),cartridgeInfo.getHostName()));
    PayloadData serviceLevelLbPayloadData=createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
    serviceLevelLbPayloadData.add(CartridgeConstants.LOAD_BALANCED_SERVICE_TYPE,getLoadBalancedServiceType());
    return serviceLevelLbPayloadData;
  }
}",0.9180639038279026
116260,"public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  try {
    clusterId=AutoscalerServiceClient.getServiceClient().getDefaultLBClusterId(getDeploymentPolicyName());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new ADCException(e);
  }
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    defaultLBExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
    return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
  }
}","public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    defaultLBExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
    return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
  }
}",0.9138576779026216
116261,"public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  try {
    clusterId=AutoscalerServiceClient.getServiceClient().getServiceLBClusterId(getLoadBalancedServiceType(),getDeploymentPolicyName());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new ADCException(e);
  }
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    serviceLbExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
    PayloadData serviceLevelLbPayloadData=createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
    serviceLevelLbPayloadData.add(CartridgeConstants.LOAD_BALANCED_SERVICE_TYPE,getLoadBalancedServiceType());
    return serviceLevelLbPayloadData;
  }
}","public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId);
    }
    serviceLbExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"",e);
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName());
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
    PayloadData serviceLevelLbPayloadData=createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
    serviceLevelLbPayloadData.add(CartridgeConstants.LOAD_BALANCED_SERVICE_TYPE,getLoadBalancedServiceType());
    return serviceLevelLbPayloadData;
  }
}",0.9153318077803204
116262,"public PartitionContext getPartitionCtxt(String partitionId){
  return partitionCtxts.get(partitionId);
}","public ClusterLevelPartitionContext getPartitionCtxt(String partitionId){
  return partitionCtxts.get(partitionId);
}",0.945945945945946
116263,"public ParentComponentLevelNetworkPartitionContext(String id,String partitionAlgo,Partition[] partitions){
  super(id,partitionAlgo,partitions);
  this.id=id;
  this.partitionAlgorithm=partitionAlgo;
  if (partitions == null) {
    this.partitions=new Partition[0];
  }
 else {
    this.partitions=Arrays.copyOf(partitions,partitions.length);
  }
  partitionCtxts=new HashMap<String,PartitionContext>();
  for (  Partition partition : partitions) {
    minInstanceCount+=partition.getPartitionMin();
    maxInstanceCount+=partition.getPartitionMax();
  }
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
  instanceIdToInstanceContextMap=new HashMap<String,InstanceContext>();
}","public ParentComponentLevelNetworkPartitionContext(String id,String partitionAlgo,Partition[] partitions){
  super(id,partitionAlgo,partitions);
  this.id=id;
  this.partitionAlgorithm=partitionAlgo;
  if (partitions == null) {
    this.partitions=new Partition[0];
  }
 else {
    this.partitions=Arrays.copyOf(partitions,partitions.length);
  }
  partitionCtxts=new HashMap<String,ClusterLevelPartitionContext>();
  for (  Partition partition : partitions) {
    minInstanceCount+=partition.getPartitionMin();
    maxInstanceCount+=partition.getPartitionMax();
  }
  requiredInstanceCountBasedOnStats=minInstanceCount;
  requiredInstanceCountBasedOnDependencies=minInstanceCount;
  instanceIdToInstanceContextMap=new HashMap<String,InstanceContext>();
}",0.9919893190921228
116264,"public void addPartitionContext(PartitionContext partitionContext){
  partitionCtxts.put(partitionContext.getPartitionId(),partitionContext);
}","public void addPartitionContext(ClusterLevelPartitionContext partitionContext){
  partitionCtxts.put(partitionContext.getPartitionId(),partitionContext);
}",0.959731543624161
116265,"public Map<String,PartitionContext> getPartitionCtxts(){
  return partitionCtxts;
}","public Map<String,ClusterLevelPartitionContext> getPartitionCtxts(){
  return partitionCtxts;
}",0.9325842696629212
116266,"private void createInstanceAndStartDependency(Application application) throws TopologyInConsistentException, PolicyValidationException {
  List<String> instanceIds=new ArrayList<String>();
  String deploymentPolicyName=application.getDeploymentPolicy();
  if (deploymentPolicyName == null) {
    String msg=""String_Node_Str"" + appId;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    if (deploymentPolicy == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
  }
  String instanceId;
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    instanceId=createApplicationInstance(application,partitionGroup.getId());
    ParentComponentLevelNetworkPartitionContext context=new ParentComponentLevelNetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    context.addInstanceContext(application.getInstanceContexts(instanceId));
    this.addNetworkPartitionContext(context);
    instanceIds.add(instanceId);
  }
  startDependency(application,instanceIds);
}","private void createInstanceAndStartDependency(Application application) throws TopologyInConsistentException, PolicyValidationException {
  List<String> instanceIds=new ArrayList<String>();
  DeploymentPolicy deploymentPolicy=getDeploymentPolicy(application);
  String instanceId;
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    instanceId=createApplicationInstance(application,partitionGroup.getId());
    ParentComponentLevelNetworkPartitionContext context=new ParentComponentLevelNetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    context.addInstanceContext(application.getInstanceContexts(instanceId));
    this.addNetworkPartitionContext(context);
    instanceIds.add(instanceId);
  }
  startDependency(application,instanceIds);
}",0.2122487143525011
116267,"public void handleAverageRequestsServingCapabilityEvent(AverageRequestsServingCapabilityEvent averageRequestsServingCapabilityEvent){
}","public void handleAverageRequestsServingCapabilityEvent(AverageRequestsServingCapabilityEvent averageRequestsServingCapabilityEvent){
  String clusterId=averageRequestsServingCapabilityEvent.getClusterId();
  String networkPartitionId=averageRequestsServingCapabilityEvent.getNetworkPartitionId();
  Float floatValue=averageRequestsServingCapabilityEvent.getValue();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",clusterId,networkPartitionId,floatValue));
  }
  NetworkPartitionContext networkPartitionContext=getNetworkPartitionCtxt(null,networkPartitionId);
  if (null != networkPartitionContext) {
    networkPartitionContext.setAverageRequestsServedPerInstance(floatValue);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionId));
    }
  }
}",0.2732793522267207
116268,"@Override public void handleMemberReadyToShutdownEvent(MemberReadyToShutdownEvent memberReadyToShutdownEvent){
}","@Override public void handleMemberReadyToShutdownEvent(MemberReadyToShutdownEvent memberReadyToShutdownEvent){
  NetworkPartitionContext nwPartitionCtxt;
  String networkPartitionId=memberReadyToShutdownEvent.getNetworkPartitionId();
  String instanceId=memberReadyToShutdownEvent.getInstanceId();
  nwPartitionCtxt=getNetworkPartitionCtxt(instanceId,networkPartitionId);
  String memberId=memberReadyToShutdownEvent.getMemberId();
  String partitionId=getPartitionOfMember(memberId);
  PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
  try {
    String clusterId=memberReadyToShutdownEvent.getClusterId();
    if (partitionCtxt.getPendingTerminationMember(memberId) != null) {
      partitionCtxt.movePendingTerminationMemberToObsoleteMembers(memberId);
    }
 else     if (partitionCtxt.getPendingTerminationMember(memberId) != null) {
      partitionCtxt.movePendingTerminationMemberToObsoleteMembers(memberId);
    }
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberId,partitionId,clusterId));
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.getLocalizedMessage();
    log.error(msg,e);
  }
}",0.1727062451811873
116269,"@Override public void run(){
  for (  NetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts(instanceIdToClusterCtxtEntry.getKey()).values()) {
    List<String> primaryMemberListInNetworkPartition=new ArrayList<String>();
    for (    PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
      List<String> primaryMemberListInPartition=new ArrayList<String>();
      for (      MemberContext memberContext : partitionContext.getActiveMembers()) {
        if (isPrimaryMember(memberContext)) {
          primaryMemberListInPartition.add(memberContext.getMemberId());
        }
      }
      for (      MemberContext memberContext : partitionContext.getPendingMembers()) {
        if (isPrimaryMember(memberContext)) {
          primaryMemberListInPartition.add(memberContext.getMemberId());
        }
      }
      primaryMemberListInNetworkPartition.addAll(primaryMemberListInPartition);
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",""String_Node_Str"");
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
      minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(getMinCheckKnowledgeSession(),minCheckFactHandle,partitionContext);
      obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluateObsoleteCheck(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
    }
    boolean rifReset=networkPartitionContext.isRifReset();
    boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
    boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
    }
    if (rifReset || memoryConsumptionReset || loadAverageReset) {
      VMClusterContext vmClusterContext=(VMClusterContext)instanceIdToClusterCtxtEntry.getValue();
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",""String_Node_Str"");
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",false);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInNetworkPartition);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
        log.debug(""String_Node_Str"" + primaryMemberListInNetworkPartition);
      }
      scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,networkPartitionContext);
      networkPartitionContext.setRifReset(false);
      networkPartitionContext.setMemoryConsumptionReset(false);
      networkPartitionContext.setLoadAverageReset(false);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
}","@Override public void run(){
  for (  NetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts(instanceIdToClusterCtxtEntry.getKey()).values()) {
    List<String> primaryMemberListInNetworkPartition=new ArrayList<String>();
    for (    PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
      List<String> primaryMemberListInPartition=new ArrayList<String>();
      for (      MemberContext memberContext : partitionContext.getActiveMembers()) {
        if (isPrimaryMember(memberContext)) {
          primaryMemberListInPartition.add(memberContext.getMemberId());
        }
      }
      for (      MemberContext memberContext : partitionContext.getPendingMembers()) {
        if (isPrimaryMember(memberContext)) {
          primaryMemberListInPartition.add(memberContext.getMemberId());
        }
      }
      primaryMemberListInNetworkPartition.addAll(primaryMemberListInPartition);
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
      getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceIdToClusterCtxtEntry.getKey());
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
      minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(getMinCheckKnowledgeSession(),minCheckFactHandle,partitionContext);
      obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluateObsoleteCheck(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
    }
    boolean rifReset=networkPartitionContext.isRifReset();
    boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
    boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
    }
    if (rifReset || memoryConsumptionReset || loadAverageReset) {
      VMClusterContext vmClusterContext=(VMClusterContext)instanceIdToClusterCtxtEntry.getValue();
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceIdToClusterCtxtEntry.getKey());
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",false);
      getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInNetworkPartition);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
        log.debug(""String_Node_Str"" + primaryMemberListInNetworkPartition);
      }
      scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,networkPartitionContext);
      networkPartitionContext.setRifReset(false);
      networkPartitionContext.setMemoryConsumptionReset(false);
      networkPartitionContext.setLoadAverageReset(false);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
}",0.985553772070626
116270,"public void monitor(){
  Set<Map.Entry<String,AbstractClusterContext>> instanceIdToClusterCtxtEntries=instanceIdToClusterContextMap.entrySet();
  for (  final Map.Entry<String,AbstractClusterContext> instanceIdToClusterCtxtEntry : instanceIdToClusterCtxtEntries) {
    Runnable monitoringRunnable=new Runnable(){
      @Override public void run(){
        for (        NetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts(instanceIdToClusterCtxtEntry.getKey()).values()) {
          List<String> primaryMemberListInNetworkPartition=new ArrayList<String>();
          for (          PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
            List<String> primaryMemberListInPartition=new ArrayList<String>();
            for (            MemberContext memberContext : partitionContext.getActiveMembers()) {
              if (isPrimaryMember(memberContext)) {
                primaryMemberListInPartition.add(memberContext.getMemberId());
              }
            }
            for (            MemberContext memberContext : partitionContext.getPendingMembers()) {
              if (isPrimaryMember(memberContext)) {
                primaryMemberListInPartition.add(memberContext.getMemberId());
              }
            }
            primaryMemberListInNetworkPartition.addAll(primaryMemberListInPartition);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",""String_Node_Str"");
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(getMinCheckKnowledgeSession(),minCheckFactHandle,partitionContext);
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluateObsoleteCheck(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
          boolean rifReset=networkPartitionContext.isRifReset();
          boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
          boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
          }
          if (rifReset || memoryConsumptionReset || loadAverageReset) {
            VMClusterContext vmClusterContext=(VMClusterContext)instanceIdToClusterCtxtEntry.getValue();
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",""String_Node_Str"");
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",false);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInNetworkPartition);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
              log.debug(""String_Node_Str"" + primaryMemberListInNetworkPartition);
            }
            scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,networkPartitionContext);
            networkPartitionContext.setRifReset(false);
            networkPartitionContext.setMemoryConsumptionReset(false);
            networkPartitionContext.setLoadAverageReset(false);
          }
 else           if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
          }
        }
      }
    }
;
    monitoringRunnable.run();
  }
}","public void monitor(){
  Set<Map.Entry<String,AbstractClusterContext>> instanceIdToClusterCtxtEntries=instanceIdToClusterContextMap.entrySet();
  for (  final Map.Entry<String,AbstractClusterContext> instanceIdToClusterCtxtEntry : instanceIdToClusterCtxtEntries) {
    Runnable monitoringRunnable=new Runnable(){
      @Override public void run(){
        for (        NetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts(instanceIdToClusterCtxtEntry.getKey()).values()) {
          List<String> primaryMemberListInNetworkPartition=new ArrayList<String>();
          for (          PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
            List<String> primaryMemberListInPartition=new ArrayList<String>();
            for (            MemberContext memberContext : partitionContext.getActiveMembers()) {
              if (isPrimaryMember(memberContext)) {
                primaryMemberListInPartition.add(memberContext.getMemberId());
              }
            }
            for (            MemberContext memberContext : partitionContext.getPendingMembers()) {
              if (isPrimaryMember(memberContext)) {
                primaryMemberListInPartition.add(memberContext.getMemberId());
              }
            }
            primaryMemberListInNetworkPartition.addAll(primaryMemberListInPartition);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",hasPrimary);
            getMinCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceIdToClusterCtxtEntry.getKey());
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
            }
            minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(getMinCheckKnowledgeSession(),minCheckFactHandle,partitionContext);
            obsoleteCheckFactHandle=AutoscalerRuleEvaluator.evaluateObsoleteCheck(getObsoleteCheckKnowledgeSession(),obsoleteCheckFactHandle,partitionContext);
          }
          boolean rifReset=networkPartitionContext.isRifReset();
          boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
          boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + rifReset + ""String_Node_Str""+ memoryConsumptionReset+ ""String_Node_Str""+ loadAverageReset);
          }
          if (rifReset || memoryConsumptionReset || loadAverageReset) {
            VMClusterContext vmClusterContext=(VMClusterContext)instanceIdToClusterCtxtEntry.getValue();
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",instanceIdToClusterCtxtEntry.getKey());
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",getClusterId());
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",vmClusterContext.getAutoscalePolicy());
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",rifReset);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",memoryConsumptionReset);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",loadAverageReset);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",lbReferenceType);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",false);
            getScaleCheckKnowledgeSession().setGlobal(""String_Node_Str"",primaryMemberListInNetworkPartition);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
              log.debug(""String_Node_Str"" + primaryMemberListInNetworkPartition);
            }
            scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(getScaleCheckKnowledgeSession(),scaleCheckFactHandle,networkPartitionContext);
            networkPartitionContext.setRifReset(false);
            networkPartitionContext.setMemoryConsumptionReset(false);
            networkPartitionContext.setLoadAverageReset(false);
          }
 else           if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
          }
        }
      }
    }
;
    monitoringRunnable.run();
  }
}",0.9878950907868193
116271,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName()));
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  group.setDeploymentPolicy(groupCtxt.getDeploymentPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
      nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName()));
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
      nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.9869198312236288
116272,"private static void updateGroupStatusesRecursively(GroupStatus groupStatus,Collection<Group> groups){
  for (  Group group : groups) {
    if (!group.isStateTransitionValid(groupStatus,null)) {
      log.error(""String_Node_Str"" + group.getStatus(null) + ""String_Node_Str""+ groupStatus);
    }
    group.setStatus(groupStatus,null);
    if (group.getGroups() != null) {
      updateGroupStatusesRecursively(groupStatus,group.getGroups());
    }
  }
}","private static void updateGroupStatusesRecursively(GroupStatus groupStatus,Collection<Group> groups){
  for (  Group group : groups) {
    if (!group.isStateTransitionValid(groupStatus,null)) {
      log.error(""String_Node_Str"" + group.getStatus(null) + ""String_Node_Str""+ groupStatus);
    }
    if (group.getGroups() != null) {
      updateGroupStatusesRecursively(groupStatus,group.getGroups());
    }
  }
}",0.9545983701979044
116273,"public static void handleGroupCreatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Created;
  if (group.isStateTransitionValid(status,null)) {
    group.setStatus(status,null);
    updateGroupMonitor(appId,groupId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupCreatedEvent(appId,groupId,instanceId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus(null)+ ""String_Node_Str""+ status);
  }
}","public static void handleGroupCreatedEvent(String appId,String groupId,String instanceId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Created;
  if (group.isStateTransitionValid(status,null)) {
    updateGroupMonitor(appId,groupId,status,instanceId);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupCreatedEvent(appId,groupId,instanceId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus(null)+ ""String_Node_Str""+ status);
  }
}",0.983084577114428
116274,"public static void sendApplicationTerminatingEvent(String appId,String instanceId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId);
  }
  ApplicationTerminatingEvent applicationTerminatingEvent=new ApplicationTerminatingEvent(appId);
  publishEvent(applicationTerminatingEvent);
}","public static void sendApplicationTerminatingEvent(String appId,String instanceId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId);
  }
  ApplicationTerminatingEvent applicationTerminatingEvent=new ApplicationTerminatingEvent(appId,instanceId);
  publishEvent(applicationTerminatingEvent);
}",0.9821138211382112
116275,"public static void sendApplicationInactivatedEvent(String appId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId);
  }
  ApplicationInactivatedEvent applicationInActivatedEvent=new ApplicationInactivatedEvent(appId);
  publishEvent(applicationInActivatedEvent);
}","public static void sendApplicationInactivatedEvent(String appId,String instanceId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId);
  }
  ApplicationInactivatedEvent applicationInActivatedEvent=new ApplicationInactivatedEvent(appId,instanceId);
  publishEvent(applicationInActivatedEvent);
}",0.95142378559464
116276,"public MonitorAdder(ParentComponentMonitor parent,ApplicationChildContext context,String instanceId,String appId){
  this.parent=parent;
  this.context=context;
  this.appId=appId;
  this.instanceId=instanceId;
}","public MonitorAdder(ParentComponentMonitor parent,ApplicationChildContext context,String appId,String instanceId){
  this.parent=parent;
  this.context=context;
  this.appId=appId;
  this.instanceId=instanceId;
}",0.9481132075471698
116277,"private void startMinimumDependencies(Application application) throws TopologyInConsistentException {
  DeploymentPolicy policy=application.getComponentDeploymentPolicy();
  int min=policy.getMin();
  if (application.getInstanceContextCount() >= min) {
    startDependency(application);
  }
 else {
    if (application.getInstanceContextCount() > 0) {
      startDependency(application);
      int remainingInstancesToBeStarted=min - application.getInstanceContextCount();
      while (remainingInstancesToBeStarted > 0) {
        createInstanceAndStartDependency(application);
        remainingInstancesToBeStarted--;
      }
    }
 else {
      int instancesToBeStarted=min;
      while (instancesToBeStarted > 0) {
        createInstanceAndStartDependency(application);
        instancesToBeStarted--;
      }
    }
  }
}","private void startMinimumDependencies(Application application) throws TopologyInConsistentException {
  DeploymentPolicy policy=application.getComponentDeploymentPolicy();
  int min=1;
  if (policy != null) {
    min=policy.getMin();
  }
  if (application.getInstanceContextCount() >= min) {
    startDependency(application);
  }
 else {
    if (application.getInstanceContextCount() > 0) {
      startDependency(application);
      int remainingInstancesToBeStarted=min - application.getInstanceContextCount();
      while (remainingInstancesToBeStarted > 0) {
        createInstanceAndStartDependency(application);
        remainingInstancesToBeStarted--;
      }
    }
 else {
      int instancesToBeStarted=min;
      while (instancesToBeStarted > 0) {
        createInstanceAndStartDependency(application);
        instancesToBeStarted--;
      }
    }
  }
}",0.976882039122703
116278,"/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,String appId,String instanceId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    if (parentMonitor.isHasGroupScalingDependent() || (context.isGroupScalingEnabled())) {
      clusterMonitor.setHasGroupScalingDependent(true);
    }
 else {
      clusterMonitor.setHasGroupScalingDependent(false);
    }
    if (cluster.getStatus(null) != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus(null));
    }
 else {
      if (!cluster.hasMembers()) {
        StatusChecker.getInstance().onMemberStatusChange(clusterId);
      }
    }
    if (cluster.getInstanceContextCount() > 0) {
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}","/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,String appId,String instanceId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    if (parentMonitor.isHasGroupScalingDependent() || (context.isGroupScalingEnabled())) {
      clusterMonitor.setHasGroupScalingDependent(true);
    }
 else {
      clusterMonitor.setHasGroupScalingDependent(false);
    }
    if (cluster.getInstanceContextCount() > 0) {
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}",0.9434046345811052
116279,"@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent){
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    ClusterStatusEventPublisher.sendClusterTerminatingEvent(appId,this.getServiceId(),clusterId,statusEvent.getInstanceId());
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
  }
}","@Override public void onParentStatusEvent(MonitorStatusEvent statusEvent){
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    ClusterStatusEventPublisher.sendClusterTerminatingEvent(appId,this.getServiceId(),clusterId,statusEvent.getInstanceId());
  }
 else   if (statusEvent.getStatus() == ClusterStatus.Created || statusEvent.getStatus() == GroupStatus.Created) {
    Application application=ApplicationHolder.getApplications().getApplication(this.appId);
    Group group=application.getGroupRecursively(statusEvent.getId());
  }
}",0.8457142857142858
116280,"public void setStatus(ClusterStatus status){
  this.status=status;
  if (status == ClusterStatus.Inactive && !this.hasStartupDependents) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,this.status,this.clusterId);
  }
}","public void setStatus(ClusterStatus status){
  if (status == ClusterStatus.Inactive && !this.hasStartupDependents) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,status,this.clusterId);
  }
}",0.958139534883721
116281,"@Override public void run(){
  while (!isDestroyed()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + this.toString());
    }
    try {
      if (!ClusterStatus.Inactive.equals(getStatus())) {
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.Inactive + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(getMonitorIntervalMilliseconds());
    }
 catch (    InterruptedException ignore) {
    }
  }
}","@Override public void run(){
  while (!isDestroyed()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + this.toString());
    }
    try {
      monitor();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(getMonitorIntervalMilliseconds());
    }
 catch (    InterruptedException ignore) {
    }
  }
}",0.4411177644710579
116282,"@Override public void run(){
  while (!isDestroyed()) {
    try {
      if (((getStatus().getCode() <= ClusterStatus.Active.getCode()) || (getStatus() == ClusterStatus.Inactive && !hasStartupDependents)) && !this.hasFaultyMember && !stop) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + this.toString());
        }
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.Inactive + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(getMonitorIntervalMilliseconds());
    }
 catch (    InterruptedException ignore) {
    }
  }
}","@Override public void run(){
  while (!isDestroyed()) {
    try {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + this.toString());
      }
      monitor();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(getMonitorIntervalMilliseconds());
    }
 catch (    InterruptedException ignore) {
    }
  }
}",0.172231985940246
116283,"private void startMinimumDependencies(Group group,String parentInstanceId) throws TopologyInConsistentException {
  DeploymentPolicy policy=group.getComponentDeploymentPolicy();
  int min=policy.getMin();
  if (group.getInstanceContextCount() >= min) {
    startDependency(group);
  }
 else {
    if (group.getInstanceContextCount() > 0) {
      startDependency(group);
      int remainingInstancesToBeStarted=min - group.getInstanceContextCount();
      while (remainingInstancesToBeStarted > 0) {
        createInstanceAndStartDependency(group,parentInstanceId);
        remainingInstancesToBeStarted--;
      }
    }
 else {
      int instancesToBeStarted=min;
      while (instancesToBeStarted > 0) {
        createInstanceAndStartDependency(group,parentInstanceId);
        instancesToBeStarted--;
      }
    }
  }
}","private void startMinimumDependencies(Group group,String parentInstanceId) throws TopologyInConsistentException {
  DeploymentPolicy policy=group.getComponentDeploymentPolicy();
  int min=1;
  if (policy != null) {
    min=policy.getMin();
  }
  if (group.getInstanceContextCount() >= min) {
    startDependency(group);
  }
 else {
    if (group.getInstanceContextCount() > 0) {
      startDependency(group);
      int remainingInstancesToBeStarted=min - group.getInstanceContextCount();
      while (remainingInstancesToBeStarted > 0) {
        createInstanceAndStartDependency(group,parentInstanceId);
        remainingInstancesToBeStarted--;
      }
    }
 else {
      int instancesToBeStarted=min;
      while (instancesToBeStarted > 0) {
        createInstanceAndStartDependency(group,parentInstanceId);
        instancesToBeStarted--;
      }
    }
  }
}",0.9768270944741532
116284,"@Override public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    dataHolder.addClusterContext(new ClusterContext(appClusterCtxt.getClusterId(),appClusterCtxt.getCartridgeType(),appClusterCtxt.getTextPayload(),appClusterCtxt.getHostName(),appClusterCtxt.isLbCluster(),appClusterCtxt.getProperties()));
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(appClusterCtxt.getTenantRange());
    newCluster.setStatus(ClusterStatus.Created,null);
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    Cartridge cartridge=dataHolder.getCartridge(appClusterCtxt.getCartridgeType());
    if (cartridge.getDeployerType() != null && cartridge.getDeployerType().equals(StratosConstants.KUBERNETES_DEPLOYER_TYPE)) {
      newCluster.setKubernetesCluster(true);
    }
    if (appClusterCtxt.getProperties() != null) {
      Properties properties=CloudControllerUtil.toJavaUtilProperties(appClusterCtxt.getProperties());
      newCluster.setProperties(properties);
    }
    clusters.add(newCluster);
  }
  TopologyBuilder.handleApplicationClustersCreated(appId,clusters);
  persist();
}","@Override public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    dataHolder.addClusterContext(new ClusterContext(appClusterCtxt.getClusterId(),appClusterCtxt.getCartridgeType(),appClusterCtxt.getTextPayload(),appClusterCtxt.getHostName(),appClusterCtxt.isLbCluster(),appClusterCtxt.getProperties()));
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(appClusterCtxt.getTenantRange());
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    Cartridge cartridge=dataHolder.getCartridge(appClusterCtxt.getCartridgeType());
    if (cartridge.getDeployerType() != null && cartridge.getDeployerType().equals(StratosConstants.KUBERNETES_DEPLOYER_TYPE)) {
      newCluster.setKubernetesCluster(true);
    }
    if (appClusterCtxt.getProperties() != null) {
      Properties properties=CloudControllerUtil.toJavaUtilProperties(appClusterCtxt.getProperties());
      newCluster.setProperties(properties);
    }
    clusters.add(newCluster);
  }
  TopologyBuilder.handleApplicationClustersCreated(appId,clusters);
  persist();
}",0.9841735052754984
116285,"public ApplicationInactivatedEvent(String appId){
  this.appId=appId;
}","public ApplicationInactivatedEvent(String appId,String instanceId){
  this.appId=appId;
  this.instanceId=instanceId;
}",0.7473684210526316
116286,"public ApplicationTerminatingEvent(String appId){
  this.appId=appId;
}","public ApplicationTerminatingEvent(String appId,String instanceId){
  this.appId=appId;
  this.instanceId=instanceId;
}",0.7473684210526316
116287,"private boolean doProcess(ApplicationActivatedEvent event,Applications applications){
  Application application=applications.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
 else {
    if (!application.isStateTransitionValid(ApplicationStatus.Active,null)) {
      log.error(""String_Node_Str"" + application.getStatus(null) + ""String_Node_Str""+ ApplicationStatus.Active+ ""String_Node_Str"");
    }
    application.setStatus(ApplicationStatus.Active,null);
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(ApplicationActivatedEvent event,Applications applications){
  Application application=applications.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
 else {
    ApplicationInstanceContext context=application.getInstanceContexts(event.getInstanceId());
    if (context == null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",event.getAppId(),event.getInstanceId()));
        return false;
      }
    }
    ApplicationStatus status=ApplicationStatus.Active;
    if (!context.isStateTransitionValid(status)) {
      log.error(""String_Node_Str"" + context.getStatus() + ""String_Node_Str""+ status+ ""String_Node_Str"");
    }
    context.setStatus(status);
  }
  notifyEventListeners(event);
  return true;
}",0.6437221159974506
116288,"private boolean doProcess(ApplicationInactivatedEvent event,Applications applications){
  Application application=applications.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
 else {
    if (!application.isStateTransitionValid(ApplicationStatus.Inactive,null)) {
      log.error(""String_Node_Str"" + application.getStatus(null) + ""String_Node_Str""+ ApplicationStatus.Inactive+ ""String_Node_Str"");
    }
    application.setStatus(ApplicationStatus.Inactive,null);
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(ApplicationInactivatedEvent event,Applications applications){
  Application application=applications.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
 else {
    ApplicationInstanceContext context=application.getInstanceContexts(event.getInstanceId());
    if (context == null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",event.getAppId(),event.getInstanceId()));
        return false;
      }
    }
    ApplicationStatus status=ApplicationStatus.Inactive;
    if (!context.isStateTransitionValid(status)) {
      log.error(""String_Node_Str"" + context.getStatus() + ""String_Node_Str""+ status+ ""String_Node_Str"");
    }
    context.setStatus(status);
  }
  notifyEventListeners(event);
  return true;
}",0.6413662239089184
116289,"public ParentComponentMonitor(ParentComponent component) throws DependencyBuilderException {
  aliasToActiveMonitorsMap=new HashMap<String,Monitor>();
  inactiveMonitorsList=new ArrayList<String>();
  terminatingMonitorsList=new ArrayList<String>();
  setInstanceIdToInstanceContextMap(new HashMap<String,InstanceContext>());
  this.id=component.getUniqueIdentifier();
  startupDependencyTree=DependencyBuilder.getInstance().buildDependency(component);
  scalingDependencyTree=DependencyBuilder.getInstance().buildDependency(component);
}","public ParentComponentMonitor(ParentComponent component) throws DependencyBuilderException {
  aliasToActiveMonitorsMap=new HashMap<String,Monitor>();
  inactiveMonitorsList=new ArrayList<String>();
  terminatingMonitorsList=new ArrayList<String>();
  this.id=component.getUniqueIdentifier();
  startupDependencyTree=DependencyBuilder.getInstance().buildDependency(component);
  scalingDependencyTree=DependencyBuilder.getInstance().buildDependency(component);
}",0.59
116290,"/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationChildContext> applicationContexts,String instanceId) throws TopologyInConsistentException {
  if (applicationContexts != null && applicationContexts.isEmpty()) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationChildContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (!this.aliasToActiveMonitorsMap.containsKey(context.getId())) {
      context.setTerminated(false);
      startMonitor(this,context,instanceId);
    }
 else {
      if (!this.instanceIdToInstanceContextMap.containsKey(instanceId)) {
        Monitor monitor=this.aliasToActiveMonitorsMap.get(context.getId());
      }
    }
  }
  return true;
}","/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationChildContext> applicationContexts,String instanceId) throws TopologyInConsistentException {
  if (applicationContexts != null && applicationContexts.isEmpty()) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationChildContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (!this.aliasToActiveMonitorsMap.containsKey(context.getId())) {
      context.setTerminated(false);
      startMonitor(this,context,instanceId);
    }
 else {
    }
  }
  return true;
}",0.8870967741935484
116291,"@Override public synchronized void connectionLost(Throwable cause){
  log.warn(""String_Node_Str"" + topicName,cause);
  if (mqttClient.isConnected()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    return;
  }
  log.info(""String_Node_Str"" + topicName);
  create();
  connect();
  subscribe();
  log.info(""String_Node_Str"" + topicName);
}","@Override public synchronized void connectionLost(Throwable cause){
  if (log.isWarnEnabled()) {
    log.warn(""String_Node_Str"" + topicName,cause);
  }
  if (mqttClient.isConnected()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    return;
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + topicName);
  }
  create();
  connect();
  subscribe();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + topicName);
  }
}",0.7824019024970273
116292,"@Override public void disconnect(){
  try {
synchronized (mqttClient) {
      if (mqttClient.isConnected()) {
        mqttClient.disconnect();
      }
    }
  }
 catch (  MqttException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
  }
  closeConnection();
}","/** 
 * Disconnect from message broker and close the connection.
 */
@Override public void disconnect(){
  try {
    if (mqttClient == null) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"");
      }
      return;
    }
synchronized (mqttClient) {
      if (mqttClient.isConnected()) {
        mqttClient.disconnect();
      }
      closeConnection();
    }
  }
 catch (  Exception e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
  }
}",0.6727989487516426
116293,"@Override public void subscribe(){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
    mqttClient.setCallback(new MQTTSubscriberCallback());
    mqttClient.subscribe(topicName,MqttConstants.QOS);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
  }
 catch (  MqttException e) {
    String errorMsg=""String_Node_Str"" + topicName;
    log.error(errorMsg,e);
  }
}","/** 
 * Subscribe to topic.
 */
@Override public void subscribe(){
  try {
    if (mqttClient == null) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"");
      }
      return;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
    mqttClient.setCallback(new MQTTSubscriberCallback());
    mqttClient.subscribe(topicName,MqttConstants.QOS);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
  }
 catch (  Exception e) {
    String errorMsg=""String_Node_Str"" + topicName;
    log.error(errorMsg,e);
  }
}",0.842911877394636
116294,"@Override public void create(){
  try {
    String mqttUrl=MqttConstants.MQTT_PROPERTIES.getProperty(""String_Node_Str"",MqttConstants.MQTT_URL_DEFAULT);
    MemoryPersistence memoryPersistence=new MemoryPersistence();
    String clientId=Util.getRandomString(23);
    mqttClient=new MqttClient(mqttUrl,clientId,memoryPersistence);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clientId);
    }
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new MessagingException(message,e);
  }
}","/** 
 * Create MQTT client object with required configuration.
 */
@Override public void create(){
  try {
    String mqttUrl=MqttConstants.MQTT_PROPERTIES.getProperty(""String_Node_Str"",MqttConstants.MQTT_URL_DEFAULT);
    MemoryPersistence memoryPersistence=new MemoryPersistence();
    String clientId=Util.getRandomString(23);
    mqttClient=new MqttClient(mqttUrl,clientId,memoryPersistence);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clientId);
    }
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new MessagingException(message,e);
  }
}",0.9433643279797126
116295,"@Override public String getServerURI(){
  return mqttClient.getServerURI();
}","/** 
 * Return server URI.
 * @return
 */
@Override public String getServerURI(){
  return mqttClient.getServerURI();
}",0.7857142857142857
116296,"@Override public void connect(){
  try {
    MqttConnectOptions connectOptions=new MqttConnectOptions();
    connectOptions.setCleanSession(true);
    mqttClient.connect(connectOptions);
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new MessagingException(message,e);
  }
}","/** 
 * Connect to message broker using MQTT client object created.
 */
@Override public void connect(){
  try {
    if (mqttClient == null) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"");
      }
      return;
    }
    MqttConnectOptions connectOptions=new MqttConnectOptions();
    connectOptions.setCleanSession(true);
    mqttClient.connect(connectOptions);
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new MessagingException(message,e);
  }
}",0.7674418604651163
116297,"private void closeConnection(){
  try {
    if (mqttClient != null) {
      mqttClient.close();
    }
  }
 catch (  MqttException e) {
    String message=""String_Node_Str"";
    log.error(message,e);
  }
 finally {
    mqttClient=null;
  }
}","private void closeConnection(){
  try {
    if (mqttClient == null) {
      if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"");
      }
      return;
    }
    mqttClient.close();
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    log.error(message,e);
  }
 finally {
    mqttClient=null;
  }
}",0.8091872791519434
116298,"/** 
 * Adds InstanceContext of a child to the aliasAndInstanceIdToInstanceContextMap, after initializing the map if not already done.
 * @param alias alias of child
 * @param instanceId instance id of child
 * @param instanceContext InstanceContext object
 */
public void addInstanceContext(String alias,String instanceId,InstanceContext instanceContext){
  if (aliasAndInstanceIdToInstanceContextMap == null) {
synchronized (this) {
      if (aliasAndInstanceIdToInstanceContextMap == null) {
        aliasAndInstanceIdToInstanceContextMap=new HashMap<AliasAndInstanceId,InstanceContext>();
      }
    }
  }
  aliasAndInstanceIdToInstanceContextMap.put(new AliasAndInstanceId(alias,instanceId),instanceContext);
}","/** 
 * Adds InstanceContext of a child to the aliasAndInstanceIdToInstanceContextMap.
 * @param alias alias of child
 * @param instanceId instance id of child
 * @param instanceContext InstanceContext object
 */
public void addInstanceContext(String alias,String instanceId,InstanceContext instanceContext){
  aliasAndInstanceIdToInstanceContextMap.put(new AliasAndInstanceId(alias,instanceId),instanceContext);
}",0.5646017699115045
116299,"/** 
 * Retrieves InstanceContext obj. for the given alias and instance id
 * @param alias alias
 * @param instanceId instance id
 * @return InstanceContext obj if exists, else null
 */
public InstanceContext getInstanceContext(String alias,String instanceId){
  if (aliasAndInstanceIdToInstanceContextMap == null) {
    return null;
  }
  return aliasAndInstanceIdToInstanceContextMap.get(new AliasAndInstanceId(alias,instanceId));
}","/** 
 * Retrieves InstanceContext obj. for the given alias and instance id
 * @param alias alias
 * @param instanceId instance id
 * @return InstanceContext obj if exists, else null
 */
public InstanceContext getInstanceContext(String alias,String instanceId){
  return aliasAndInstanceIdToInstanceContextMap.get(new AliasAndInstanceId(alias,instanceId));
}",0.9026548672566372
116300,"private void reconnect(){
  boolean reconnected=false;
  while (!reconnected) {
    try {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + Util.getFailoverPingInterval() / 1000 + ""String_Node_Str"");
      }
      try {
        Thread.sleep(Util.getFailoverPingInterval());
      }
 catch (      InterruptedException ignore) {
      }
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + topicName);
      }
      create();
      connect();
      subscribe();
    }
 catch (    Exception e) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + topicName);
  }
}","private void reconnect(){
  boolean reconnected=false;
  while (!reconnected) {
    try {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + Util.getFailoverPingInterval() / 1000 + ""String_Node_Str"");
      }
      try {
        Thread.sleep(Util.getFailoverPingInterval());
      }
 catch (      InterruptedException ignore) {
      }
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + topicName);
      }
      create();
      connect();
      subscribe();
      reconnected=true;
    }
 catch (    Exception e) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + topicName);
  }
}",0.9831697054698456
116301,"/** 
 * Subscribe to topic.
 */
@Override public void subscribe(){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
    if (mqttClient == null) {
      String error=""String_Node_Str"";
      if (log.isErrorEnabled()) {
        log.error(error);
      }
      throw new MessagingException(error);
    }
    mqttClient.setCallback(new MQTTSubscriberCallback());
    mqttClient.subscribe(topicName,MqttConstants.QOS);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
  }
 catch (  Exception e) {
    String errorMsg=""String_Node_Str"" + topicName;
    log.error(errorMsg,e);
  }
}","/** 
 * Subscribe to topic.
 */
@Override public void subscribe(){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
    if (mqttClient == null) {
      String error=""String_Node_Str"";
      if (log.isErrorEnabled()) {
        log.error(error);
      }
      throw new MessagingException(error);
    }
    mqttClient.setCallback(new MQTTSubscriberCallback());
    mqttClient.subscribe(topicName,MqttConstants.QOS);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName);
    }
  }
 catch (  Exception e) {
    String errorMsg=""String_Node_Str"" + topicName;
    log.error(errorMsg,e);
    throw new MessagingException(errorMsg,e);
  }
}",0.9661764705882352
116302,"/** 
 * This will build the dependency tree based on the given dependencies
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentComponent component) throws DependencyBuilderException {
  String identifier=component.getUniqueIdentifier();
  DependencyTree dependencyTree=new DependencyTree(identifier);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    log.info(""String_Node_Str"" + identifier);
    String terminationBehaviour=dependencyOrder.getTerminationBehaviour();
    if (Constants.TERMINATE_NONE.equals(terminationBehaviour)) {
      dependencyTree.setTerminationBehavior(DependencyTree.TerminationBehavior.TERMINATE_NONE);
    }
 else     if (Constants.TERMINATE_ALL.equals(terminationBehaviour)) {
      dependencyTree.setTerminationBehavior(DependencyTree.TerminationBehavior.TERMINATE_ALL);
    }
 else     if (Constants.TERMINATE_DEPENDENTS.equals(terminationBehaviour)) {
      dependencyTree.setTerminationBehavior(DependencyTree.TerminationBehavior.TERMINATE_DEPENDENT);
    }
    log.info(""String_Node_Str"" + terminationBehaviour + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    Set<StartupOrder> startupOrders=dependencyOrder.getStartupOrders();
    ApplicationChildContext foundContext;
    ApplicationChildContext parentContext;
    if (startupOrders != null) {
      for (      StartupOrder startupOrder : startupOrders) {
        parentContext=null;
        for (        String startupOrderComponent : startupOrder.getStartupOrderComponentList()) {
          if (startupOrderComponent != null) {
            ApplicationChildContext applicationContext=ApplicationChildContextFactory.getApplicationContext(startupOrderComponent,component,dependencyTree);
            String id=applicationContext.getId();
            ApplicationChildContext existingApplicationContext=dependencyTree.findApplicationContextWithIdInPrimaryTree(id);
            if (existingApplicationContext == null) {
              if (parentContext != null) {
                parentContext.addApplicationContext(applicationContext);
                parentContext=applicationContext;
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + parentContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
                }
              }
 else {
                dependencyTree.addPrimaryApplicationContext(applicationContext);
                parentContext=applicationContext;
              }
            }
 else {
              if (parentContext == null) {
                existingApplicationContext.addApplicationContext(applicationContext);
                parentContext=existingApplicationContext;
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
                }
              }
 else {
                String msg=""String_Node_Str"" + ""String_Node_Str"";
                throw new DependencyBuilderException(msg);
              }
            }
          }
        }
      }
    }
    Set<ScalingOrder> scalingOrders=dependencyOrder.getScalingOrders();
    if (scalingOrders != null) {
      for (      ScalingOrder scalingOrder : scalingOrders) {
        foundContext=null;
        parentContext=null;
        for (        String scalingOrderComponent : scalingOrder.getScalingOrderComponentsList()) {
          if (scalingOrderComponent != null) {
            String applicationContextId=null;
            if (scalingOrderComponent.startsWith(Constants.GROUP + ""String_Node_Str"")) {
              applicationContextId=getGroupFromStartupOrder(scalingOrderComponent);
            }
 else             if (scalingOrderComponent.startsWith(Constants.CARTRIDGE + ""String_Node_Str"")) {
              applicationContextId=getClusterFromStartupOrder(scalingOrderComponent);
            }
 else {
              log.warn(""String_Node_Str"" + scalingOrderComponent + ""String_Node_Str"");
            }
            if (applicationContextId != null) {
              ApplicationChildContext applicationContext=dependencyTree.findApplicationContextWithIdInPrimaryTree(applicationContextId);
              ApplicationChildContext existingApplicationContext=dependencyTree.findApplicationContextWithIdInScalingDependencyTree(applicationContextId);
              if (existingApplicationContext == null) {
                if (parentContext != null) {
                  parentContext.setHasScalingDependents(true);
                  parentContext.addApplicationContext(applicationContext);
                  parentContext=applicationContext;
                  if (log.isDebugEnabled()) {
                    log.debug(""String_Node_Str"" + parentContext.getId() + ""String_Node_Str""+ applicationContextId+ ""String_Node_Str"");
                  }
                }
 else {
                  dependencyTree.addScalingApplicationContext(applicationContext);
                  parentContext=applicationContext;
                }
              }
 else {
                String msg=""String_Node_Str"" + ""String_Node_Str"";
                throw new DependencyBuilderException(msg);
              }
            }
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithIdInPrimaryTree(group1.getAlias()) == null) {
      ApplicationChildContext context=ApplicationChildContextFactory.getGroupChildContext(group1.getAlias(),dependencyTree.isTerminateDependent());
      dependencyTree.addPrimaryApplicationContext(context);
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithIdInPrimaryTree(dataHolder.getClusterId()) == null) {
      ApplicationChildContext context=ApplicationChildContextFactory.getClusterChildContext(dataHolder,dependencyTree.isTerminateDependent());
      dependencyTree.addPrimaryApplicationContext(context);
    }
  }
  return dependencyTree;
}","/** 
 * This will build the dependency tree based on the given dependencies
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentComponent component) throws DependencyBuilderException {
  String identifier=component.getUniqueIdentifier();
  DependencyTree dependencyTree=new DependencyTree(identifier);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    log.info(""String_Node_Str"" + identifier);
    String terminationBehaviour=dependencyOrder.getTerminationBehaviour();
    if (Constants.TERMINATE_NONE.equals(terminationBehaviour)) {
      dependencyTree.setTerminationBehavior(DependencyTree.TerminationBehavior.TERMINATE_NONE);
    }
 else     if (Constants.TERMINATE_ALL.equals(terminationBehaviour)) {
      dependencyTree.setTerminationBehavior(DependencyTree.TerminationBehavior.TERMINATE_ALL);
    }
 else     if (Constants.TERMINATE_DEPENDENTS.equals(terminationBehaviour)) {
      dependencyTree.setTerminationBehavior(DependencyTree.TerminationBehavior.TERMINATE_DEPENDENT);
    }
    log.info(""String_Node_Str"" + terminationBehaviour + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    Set<StartupOrder> startupOrders=dependencyOrder.getStartupOrders();
    ApplicationChildContext foundContext;
    ApplicationChildContext parentContext;
    if (startupOrders != null) {
      for (      StartupOrder startupOrder : startupOrders) {
        parentContext=null;
        for (        String startupOrderComponent : startupOrder.getStartupOrderComponentList()) {
          if (startupOrderComponent != null) {
            ApplicationChildContext applicationContext=ApplicationChildContextFactory.getApplicationContext(startupOrderComponent,component,dependencyTree);
            String id=applicationContext.getId();
            ApplicationChildContext existingApplicationContext=dependencyTree.findApplicationContextWithIdInPrimaryTree(id);
            if (existingApplicationContext == null) {
              if (parentContext != null) {
                parentContext.addApplicationContext(applicationContext);
                parentContext=applicationContext;
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + parentContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
                }
              }
 else {
                dependencyTree.addPrimaryApplicationContext(applicationContext);
                parentContext=applicationContext;
              }
            }
 else {
              if (parentContext == null) {
                existingApplicationContext.addApplicationContext(applicationContext);
                parentContext=existingApplicationContext;
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
                }
              }
 else {
                String msg=""String_Node_Str"" + ""String_Node_Str"";
                throw new DependencyBuilderException(msg);
              }
            }
          }
        }
      }
    }
    Set<ScalingOrder> scalingOrders=dependencyOrder.getScalingOrders();
    if (scalingOrders != null) {
      for (      ScalingOrder scalingOrder : scalingOrders) {
        foundContext=null;
        parentContext=null;
        for (        String scalingOrderComponent : scalingOrder.getScalingOrderComponentsList()) {
          if (scalingOrderComponent != null) {
            String applicationContextId=null;
            if (scalingOrderComponent.startsWith(Constants.GROUP + ""String_Node_Str"")) {
              applicationContextId=getGroupFromStartupOrder(scalingOrderComponent);
            }
 else             if (scalingOrderComponent.startsWith(Constants.CARTRIDGE + ""String_Node_Str"")) {
              applicationContextId=getClusterFromStartupOrder(scalingOrderComponent);
            }
 else {
              log.warn(""String_Node_Str"" + scalingOrderComponent + ""String_Node_Str"");
            }
            if (applicationContextId != null) {
              ApplicationChildContext applicationContext=dependencyTree.findApplicationContextWithIdInPrimaryTree(applicationContextId);
              ApplicationChildContext existingApplicationContext=dependencyTree.findApplicationContextWithIdInScalingDependencyTree(applicationContextId);
              if (existingApplicationContext == null) {
                if (parentContext != null) {
                  parentContext.setGroupScalingEnabled(true);
                  parentContext.addApplicationContext(applicationContext);
                  parentContext=applicationContext;
                  if (log.isDebugEnabled()) {
                    log.debug(""String_Node_Str"" + parentContext.getId() + ""String_Node_Str""+ applicationContextId+ ""String_Node_Str"");
                  }
                }
 else {
                  dependencyTree.addScalingApplicationContext(applicationContext);
                  parentContext=applicationContext;
                }
              }
 else {
                String msg=""String_Node_Str"" + ""String_Node_Str"";
                throw new DependencyBuilderException(msg);
              }
            }
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithIdInPrimaryTree(group1.getAlias()) == null) {
      ApplicationChildContext context=ApplicationChildContextFactory.getGroupChildContext(group1.getAlias(),dependencyTree.isTerminateDependent());
      dependencyTree.addPrimaryApplicationContext(context);
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithIdInPrimaryTree(dataHolder.getClusterId()) == null) {
      ApplicationChildContext context=ApplicationChildContextFactory.getClusterChildContext(dataHolder,dependencyTree.isTerminateDependent());
      dependencyTree.addPrimaryApplicationContext(context);
    }
  }
  return dependencyTree;
}",0.9968259135671848
116303,"public static String encryptPassword(String repoUserPassword,String secKey){
  String encryptPassword=""String_Node_Str"";
  String secret=secKey;
  SecretKey key;
  Cipher cipher;
  Base64 coder;
  key=new SecretKeySpec(secret.getBytes(),""String_Node_Str"");
  try {
    cipher=Cipher.getInstance(""String_Node_Str"",""String_Node_Str"");
    coder=new Base64();
    cipher.init(Cipher.ENCRYPT_MODE,key);
    byte[] cipherText=cipher.doFinal(repoUserPassword.getBytes());
    encryptPassword=new String(coder.encode(cipherText));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return encryptPassword;
}","public static String encryptPassword(String repoUserPassword,String secKey){
  String encryptPassword=""String_Node_Str"";
  SecretKey key;
  Cipher cipher;
  Base64 coder;
  key=new SecretKeySpec(secKey.getBytes(),""String_Node_Str"");
  try {
    cipher=Cipher.getInstance(""String_Node_Str"",""String_Node_Str"");
    coder=new Base64();
    cipher.init(Cipher.ENCRYPT_MODE,key);
    byte[] cipherText=cipher.doFinal(repoUserPassword.getBytes());
    encryptPassword=new String(coder.encode(cipherText));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return encryptPassword;
}",0.9748743718592964
116304,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  group.setDeploymentPolicy(groupCtxt.getDeploymentPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
      nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setGroupScalingEnabled(isGroupScalingEnabled(groupCtxt.getName()));
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  group.setDeploymentPolicy(groupCtxt.getDeploymentPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
      nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.9839187473550572
116305,"/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    if (parentMonitor.hasScalingDependents() || (context.hasScalingDependents())) {
      clusterMonitor.setHasScalingDependents(true);
    }
 else {
      clusterMonitor.setHasScalingDependents(false);
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
 else {
      if (!cluster.hasMembers()) {
        StatusChecker.getInstance().onMemberStatusChange(clusterId);
      }
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}","/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterChildContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    clusterMonitor.setId(clusterId);
    if (parentMonitor.hasStartupDependents() || (context.hasStartupDependents() && context.hasChild())) {
      clusterMonitor.setHasStartupDependents(true);
    }
 else {
      clusterMonitor.setHasStartupDependents(false);
    }
    if (parentMonitor.isGroupScalingEnabled() || (context.isGroupScalingEnabled())) {
      clusterMonitor.setGroupScalingEnabled(true);
    }
 else {
      clusterMonitor.setGroupScalingEnabled(false);
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
 else {
      if (!cluster.hasMembers()) {
        StatusChecker.getInstance().onMemberStatusChange(clusterId);
      }
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}",0.9648351648351648
116306,"@Override public void onChildScalingEvent(MonitorScalingEvent scalingEvent){
  GroupChildContext currentChildContextInScalingTree=(GroupChildContext)scalingDependencyTree.findApplicationContextWithIdInScalingDependencyTree(id);
  if (currentChildContextInScalingTree.hasScalingDependents()) {
    for (    ApplicationChildContext applicationChildContext : currentChildContextInScalingTree.getApplicationChildContextList()) {
      Monitor monitor=aliasToActiveMonitorsMap.get(applicationChildContext.getId());
      if (monitor instanceof GroupMonitor || monitor instanceof ApplicationMonitor) {
        monitor.onParentScalingEvent(scalingEvent);
      }
    }
  }
}","@Override public void onChildScalingEvent(MonitorScalingEvent scalingEvent){
  GroupChildContext currentChildContextInScalingTree=(GroupChildContext)scalingDependencyTree.findApplicationContextWithIdInScalingDependencyTree(id);
  if (currentChildContextInScalingTree.isGroupScalingEnabled()) {
    for (    ApplicationChildContext applicationChildContext : currentChildContextInScalingTree.getApplicationChildContextList()) {
      Monitor monitor=aliasToActiveMonitorsMap.get(applicationChildContext.getId());
      if (monitor instanceof GroupMonitor || monitor instanceof ApplicationMonitor) {
        monitor.onParentScalingEvent(scalingEvent);
      }
    }
  }
}",0.9692883895131086
116307,"public void setTerminationBehaviour(String killBehaviour){
  this.terminationBehaviour=killBehaviour;
}","public void setTerminationBehaviour(String terminationBehaviour){
  this.terminationBehaviour=terminationBehaviour;
}",0.8818181818181818
116308,"public ServiceGroup[] getServiceGroups() throws RemoteException {
  return stub.getServiceGroups();
}","public ServiceGroup[] getServiceGroups() throws RemoteException, AutoScalerServiceAutoScalerExceptionException {
  return stub.getServiceGroups();
}",0.8112449799196787
116309,"public ServiceGroupDefinition[] getServiceGroupDefinitions() throws ADCException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  AutoscalerServiceClient asServiceClient;
  try {
    asServiceClient=AutoscalerServiceClient.getServiceClient();
    ServiceGroup[] serviceGroups=asServiceClient.getServiceGroups();
    if (serviceGroups == null || serviceGroups.length == 0) {
      return null;
    }
    ServiceGroupDefinition[] serviceGroupDefinitions=new ServiceGroupDefinition[serviceGroups.length];
    for (int i=0; i < serviceGroups.length; i++) {
      serviceGroupDefinitions[i]=populateServiceGroupDefinitionPojo(serviceGroups[i]);
    }
    return serviceGroupDefinitions;
  }
 catch (  AxisFault axisFault) {
    throw new ADCException(axisFault);
  }
catch (  RemoteException e) {
    throw new ADCException(e);
  }
}","public ServiceGroupDefinition[] getServiceGroupDefinitions() throws ADCException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  AutoscalerServiceClient asServiceClient;
  try {
    asServiceClient=AutoscalerServiceClient.getServiceClient();
    ServiceGroup[] serviceGroups=asServiceClient.getServiceGroups();
    if (serviceGroups == null || serviceGroups.length == 0) {
      return null;
    }
    ServiceGroupDefinition[] serviceGroupDefinitions=new ServiceGroupDefinition[serviceGroups.length];
    for (int i=0; i < serviceGroups.length; i++) {
      serviceGroupDefinitions[i]=populateServiceGroupDefinitionPojo(serviceGroups[i]);
    }
    return serviceGroupDefinitions;
  }
 catch (  AxisFault axisFault) {
    throw new ADCException(axisFault);
  }
catch (  RemoteException e) {
    throw new ADCException(e);
  }
catch (  AutoScalerServiceAutoScalerExceptionException e) {
    e.printStackTrace();
    return null;
  }
}",0.9413716814159292
116310,"public static void handleGroupActivatedEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Active;
  if (group.isStateTransitionValid(status)) {
    log.info(String.format(""String_Node_Str"",groupId,status));
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",groupId,group.getStatus(),status));
  }
  ApplicationHolder.persistApplication(application);
}","public static void handleGroupActivatedEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Active;
  if (group.isStateTransitionValid(status)) {
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupActivatedEvent(appId,groupId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",groupId,group.getStatus(),status));
  }
}",0.7202505219206681
116311,"public static void handleGroupTerminatingEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    GroupStatus status=GroupStatus.Terminating;
    if (group.isStateTransitionValid(status)) {
      log.info(""String_Node_Str"" + status + ""String_Node_Str""+ group.getUniqueIdentifier());
      group.setStatus(status);
      updateGroupMonitor(appId,groupId,status);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus()+ ""String_Node_Str""+ status);
    }
    ApplicationHolder.persistApplication(application);
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}","public static void handleGroupTerminatingEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    GroupStatus status=GroupStatus.Terminating;
    if (group.isStateTransitionValid(status)) {
      group.setStatus(status);
      updateGroupMonitor(appId,groupId,status);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendGroupTerminatingEvent(appId,groupId);
    }
 else {
      log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus()+ ""String_Node_Str""+ status);
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}",0.6413237924865832
116312,"public static void handleApplicationTerminatingEvent(String applicationId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + applicationId);
  }
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    if (!applications.applicationExists(applicationId)) {
      log.warn(""String_Node_Str"" + applicationId);
      return;
    }
    Application application=applications.getApplication(applicationId);
    ApplicationStatus status=ApplicationStatus.Terminating;
    if (application.isStateTransitionValid(status)) {
      log.info(String.format(""String_Node_Str"",applicationId,status));
      application.setStatus(status);
      updateApplicationMonitor(applicationId,status);
      ApplicationsEventPublisher.sendApplicationTerminatingEvent(applicationId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationId,application.getStatus(),status));
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}","public static void handleApplicationTerminatingEvent(String applicationId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + applicationId);
  }
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    if (!applications.applicationExists(applicationId)) {
      log.warn(""String_Node_Str"" + applicationId);
      return;
    }
    Application application=applications.getApplication(applicationId);
    ApplicationStatus status=ApplicationStatus.Terminating;
    if (application.isStateTransitionValid(status)) {
      application.setStatus(status);
      updateApplicationMonitor(applicationId,status);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendApplicationTerminatingEvent(applicationId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationId,application.getStatus(),status));
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
}",0.7451171875
116313,"public static void handleGroupTerminatedEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Terminated;
  if (group.isStateTransitionValid(status)) {
    log.info(String.format(""String_Node_Str"",groupId,status));
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",groupId,group.getStatus(),status));
  }
  ApplicationHolder.persistApplication(application);
}","public static void handleGroupTerminatedEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Terminated;
  if (group.isStateTransitionValid(status)) {
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupTerminatedEvent(appId,groupId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",groupId,group.getStatus(),status));
  }
}",0.7213284898806435
116314,"public static void handleApplicationTerminatedEvent(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    Set<ClusterDataHolder> clusterData=application.getClusterDataRecursively();
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (application.isStateTransitionValid(status)) {
      log.info(String.format(""String_Node_Str"",appId,status));
      application.setStatus(status);
      updateApplicationMonitor(appId,status);
      AutoscalerContext.getInstance().removeAppMonitor(appId);
      ApplicationHolder.removeApplication(appId);
      log.info(""String_Node_Str"" + appId);
      ApplicationsEventPublisher.sendApplicationTerminatedEvent(appId,clusterData);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getStatus(),status));
    }
  }
}","public static void handleApplicationTerminatedEvent(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  if (!applications.applicationExists(appId)) {
    log.warn(""String_Node_Str"" + appId);
  }
 else {
    Application application=applications.getApplication(appId);
    Set<ClusterDataHolder> clusterData=application.getClusterDataRecursively();
    ApplicationStatus status=ApplicationStatus.Terminated;
    if (application.isStateTransitionValid(status)) {
      application.setStatus(status);
      updateApplicationMonitor(appId,status);
      AutoscalerContext.getInstance().removeAppMonitor(appId);
      ApplicationHolder.removeApplication(appId);
      log.info(""String_Node_Str"" + appId);
      ApplicationsEventPublisher.sendApplicationTerminatedEvent(appId,clusterData);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getStatus(),status));
    }
  }
}",0.6555819477434679
116315,"public static void handleApplicationActivatedEvent(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Active;
  if (application.isStateTransitionValid(status)) {
    log.info(String.format(""String_Node_Str"",appId,status));
    application.setStatus(status);
    updateApplicationMonitor(appId,status);
    ApplicationHolder.persistApplication(application);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getStatus(),status));
  }
}","public static void handleApplicationActivatedEvent(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  ApplicationStatus status=ApplicationStatus.Active;
  if (application.isStateTransitionValid(status)) {
    application.setStatus(status);
    updateApplicationMonitor(appId,status);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendApplicationActivatedEvent(appId);
  }
 else {
    log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getStatus(),status));
  }
}",0.7204030226700252
116316,"public static void handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    ApplicationStatus status=ApplicationStatus.Terminating;
    if (application.isStateTransitionValid(status)) {
      log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,status));
      application.setStatus(status);
      updateApplicationMonitor(appId,status);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendApplicationTerminatingEvent(appId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getStatus(),status));
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  ApplicationsEventPublisher.sendApplicationTerminatingEvent(appId);
}","public static void handleApplicationUndeployed(String appId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  try {
    ApplicationHolder.acquireWriteLock();
    ApplicationStatus status=ApplicationStatus.Terminating;
    if (application.isStateTransitionValid(status)) {
      application.setStatus(status);
      updateApplicationMonitor(appId,status);
      ApplicationHolder.persistApplication(application);
      ApplicationsEventPublisher.sendApplicationTerminatingEvent(appId);
    }
 else {
      log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",appId,application.getStatus(),status));
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  ApplicationsEventPublisher.sendApplicationTerminatingEvent(appId);
}",0.6653864618338934
116317,"public static void handleGroupCreatedEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Created;
  if (group.isStateTransitionValid(status)) {
    log.info(""String_Node_Str"" + group.getUniqueIdentifier() + ""String_Node_Str""+ status);
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus()+ ""String_Node_Str""+ status);
  }
  ApplicationHolder.persistApplication(application);
}","public static void handleGroupCreatedEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Created;
  if (group.isStateTransitionValid(status)) {
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupCreatedEvent(appId,groupId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus()+ ""String_Node_Str""+ status);
  }
}",0.7249488752556237
116318,"public static void handleGroupInActivateEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Inactive;
  if (group.isStateTransitionValid(status)) {
    log.info(""String_Node_Str"" + groupId + ""String_Node_Str""+ status);
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus()+ ""String_Node_Str""+ status);
  }
  ApplicationHolder.persistApplication(application);
}","public static void handleGroupInActivateEvent(String appId,String groupId){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + groupId + ""String_Node_Str""+ appId);
  }
  Applications applications=ApplicationHolder.getApplications();
  Application application=applications.getApplication(appId);
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",appId));
    return;
  }
  Group group=application.getGroupRecursively(groupId);
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupId));
    return;
  }
  GroupStatus status=GroupStatus.Inactive;
  if (group.isStateTransitionValid(status)) {
    group.setStatus(status);
    updateGroupMonitor(appId,groupId,status);
    ApplicationHolder.persistApplication(application);
    ApplicationsEventPublisher.sendGroupInActivateEvent(appId,groupId);
  }
 else {
    log.warn(""String_Node_Str"" + groupId + ""String_Node_Str""+ group.getStatus()+ ""String_Node_Str""+ status);
  }
}",0.7344632768361582
116319,"/** 
 * To set the status of the application monitor
 * @param status the status
 */
public void setStatus(ApplicationStatus status){
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",id,this.status,status));
  this.status=status;
  MonitorStatusEventBuilder.notifyChildren(this,new ApplicationStatusEvent(status,appId));
}","/** 
 * To set the status of the application monitor
 * @param status the status
 */
public void setStatus(ApplicationStatus status){
  this.status=status;
  MonitorStatusEventBuilder.notifyChildren(this,new ApplicationStatusEvent(status,appId));
}",0.5034246575342466
116320,"/** 
 * This will use to calculate whether  all children of a particular component is active by travesing Top
 * @param appId
 * @param id
 * @param groups
 * @param clusterData
 * @param parent
 * @return
 */
private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  log.info(""String_Node_Str"" + clusterFound);
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    Application application=ApplicationHolder.getApplications().getApplication(appId);
    if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Active) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Active) || getAllClusterInSameState(clusterData,ClusterStatus.Active) && getAllGroupInSameState(groups,GroupStatus.Active)) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        ApplicationBuilder.handleApplicationActivatedEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupActivatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminated) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminated) || getAllClusterInSameState(clusterData,ClusterStatus.Terminated) && getAllGroupInSameState(groups,GroupStatus.Terminated)) {
      if (parent instanceof Application) {
        if (application.getStatus().equals(ApplicationStatus.Terminating)) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationTerminatedEvent(appId);
        }
 else {
          log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ application.getStatus().toString()+ ""String_Node_Str"");
        }
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupTerminatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Created) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Created) || getAllClusterInSameState(clusterData,ClusterStatus.Created) && getAllGroupInSameState(groups,GroupStatus.Created)) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ ""String_Node_Str""+ application.getStatus().toString());
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupCreatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && getAllClusterInactive(clusterData) || clusterData.isEmpty() && getAllGroupInActive(groups) || getAllClusterInactive(clusterData) && getAllGroupInActive(groups)) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupInActivateEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    return childFound;
  }
 else {
    log.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getUniqueIdentifier());
  }
  return childFound;
}","/** 
 * This will use to calculate whether  all children of a particular component is active by travesing Top
 * @param appId
 * @param id
 * @param groups
 * @param clusterData
 * @param parent
 * @return
 */
private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  log.info(""String_Node_Str"" + clusterFound);
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    Application application=ApplicationHolder.getApplications().getApplication(appId);
    if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Active) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Active) || getAllClusterInSameState(clusterData,ClusterStatus.Active) && getAllGroupInSameState(groups,GroupStatus.Active)) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        ApplicationBuilder.handleApplicationActivatedEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupActivatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Terminated) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Terminated) || getAllClusterInSameState(clusterData,ClusterStatus.Terminated) && getAllGroupInSameState(groups,GroupStatus.Terminated)) {
      if (parent instanceof Application) {
        if (application.getStatus().equals(ApplicationStatus.Terminating)) {
          log.info(""String_Node_Str"" + appId);
          ApplicationBuilder.handleApplicationTerminatedEvent(appId);
        }
 else {
          log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ application.getStatus().toString()+ ""String_Node_Str"");
        }
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupTerminatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && getAllClusterInSameState(clusterData,ClusterStatus.Created) || clusterData.isEmpty() && getAllGroupInSameState(groups,GroupStatus.Created) || getAllClusterInSameState(clusterData,ClusterStatus.Created) && getAllGroupInSameState(groups,GroupStatus.Created)) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ ""String_Node_Str""+ application.getStatus().toString());
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupCreatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && getAllClusterInactive(clusterData) || clusterData.isEmpty() && getAllGroupInActive(groups) || getAllClusterInactive(clusterData) || getAllGroupInActive(groups)) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        ApplicationBuilder.handleGroupInActivateEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    return childFound;
  }
 else {
    log.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getUniqueIdentifier());
  }
  return childFound;
}",0.9994692144373672
116321,"@Override public PartitionValidator getPartitionValidator(){
  return new CloudstackPartitionValidator();
}","@Override public PartitionValidator getPartitionValidator(){
  return new CloudStackPartitionValidator();
}",0.9906542056074766
116322,"@Override public String createVolume(int sizeGB,String snapshotId){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String zone=ComputeServiceBuilderUtil.extractZone(iaasInfo);
  String diskOfferingID=iaasInfo.getTemplate().getOptions().as(CloudStackTemplateOptions.class).getDiskOfferingId();
  if (zone == null && diskOfferingID == null) {
    log.fatal(""String_Node_Str"" + zone + ""String_Node_Str""+ iaasInfo);
    return null;
  }
  VolumeApi volumeApi=context.unwrapApi(CloudStackApi.class).getVolumeApi();
  Volume volume;
  if (StringUtils.isEmpty(snapshotId)) {
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + zone);
    }
    volumeApi.createVolumeFromCustomDiskOfferingInZone(null,diskOfferingID,zone,sizeGB);
  }
 else {
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + zone + ""String_Node_Str""+ snapshotId);
    }
    volumeApi.createVolumeFromSnapshotInZone(null,diskOfferingID,zone);
  }
  return null;
}","@Override public String createVolume(int sizeGB,String snapshotId){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String zone=ComputeServiceBuilderUtil.extractZone(iaasInfo);
  String diskOfferingID=iaasInfo.getTemplate().getOptions().as(CloudStackTemplateOptions.class).getDiskOfferingId();
  if (zone == null && diskOfferingID == null) {
    log.error(""String_Node_Str"" + zone + ""String_Node_Str""+ iaasInfo);
    return null;
  }
  VolumeApi volumeApi=context.unwrapApi(CloudStackApi.class).getVolumeApi();
  Volume volume;
  if (StringUtils.isEmpty(snapshotId)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + zone);
    }
    volumeApi.createVolumeFromCustomDiskOfferingInZone(null,diskOfferingID,zone,sizeGB);
  }
 else {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + zone + ""String_Node_Str""+ snapshotId);
    }
    volumeApi.createVolumeFromSnapshotInZone(null,diskOfferingID,zone);
  }
  return null;
}",0.986341463414634
116323,"@Override public String attachVolume(String instanceId,String volumeId,String deviceName){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  CloudStackApi cloudStackApi=context.unwrapApi(CloudStackApi.class);
  org.jclouds.cloudstack.domain.Volume volume=cloudStackApi.getVolumeApi().getVolume(volumeId);
  Volume.State volumeState=volume.getState();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ volumeState);
  }
  if (!(volumeState == Volume.State.ALLOCATED || volumeState == Volume.State.CREATING || volumeState == Volume.State.READY)) {
    log.error(String.format(""String_Node_Str"",volumeId,volumeState));
  }
  if (!volume.getAccount().equals(cloudStackApi.getVirtualMachineApi().getVirtualMachine(instanceId).getAccount())) {
    log.error(String.format(""String_Node_Str"" + ""String_Node_Str"",volumeId));
  }
  boolean volumeBecameAvailable=false, volumeBecameAttached=false;
  try {
    if (volumeState == Volume.State.CREATING) {
      volumeBecameAvailable=waitForStatus(volumeId,Volume.State.ALLOCATED,5);
    }
 else     if (volumeState == Volume.State.READY) {
      volumeBecameAvailable=true;
    }
  }
 catch (  TimeoutException e) {
    log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volumeBecameAvailable) {
    cloudStackApi.getVolumeApi().attachVolume(volumeId,instanceId);
    try {
      volumeBecameAttached=waitForStatus(volumeId,Volume.State.READY,2);
    }
 catch (    TimeoutException e) {
      log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  if (!volumeBecameAttached) {
    log.error(String.format(""String_Node_Str"",volumeId));
  }
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",volumeId,instanceId,iaasInfo));
  return ""String_Node_Str"";
}","@Override public String attachVolume(String instanceId,String volumeId,String deviceName){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  CloudStackApi cloudStackApi=context.unwrapApi(CloudStackApi.class);
  org.jclouds.cloudstack.domain.Volume volume=cloudStackApi.getVolumeApi().getVolume(volumeId);
  Volume.State volumeState=volume.getState();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ volumeState);
  }
  if (!(volumeState == Volume.State.ALLOCATED || volumeState == Volume.State.CREATING || volumeState == Volume.State.READY)) {
    log.error(String.format(""String_Node_Str"",volumeId,volumeState));
  }
  if (!volume.getAccount().equals(cloudStackApi.getVirtualMachineApi().getVirtualMachine(instanceId).getAccount())) {
    log.error(String.format(""String_Node_Str"" + ""String_Node_Str"",volumeId));
  }
  boolean volumeBecameAvailable=false, volumeBecameAttached=false;
  try {
    if (volumeState == Volume.State.CREATING) {
      volumeBecameAvailable=waitForStatus(volumeId,Volume.State.ALLOCATED,5);
    }
 else     if (volumeState == Volume.State.READY) {
      volumeBecameAvailable=true;
    }
  }
 catch (  TimeoutException e) {
    log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volumeBecameAvailable) {
    cloudStackApi.getVolumeApi().attachVolume(volumeId,instanceId);
    try {
      volumeBecameAttached=waitForStatus(volumeId,Volume.State.READY,2);
    }
 catch (    TimeoutException e) {
      log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException ignored) {
  }
  if (!volumeBecameAttached) {
    log.error(String.format(""String_Node_Str"",volumeId));
  }
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",volumeId,instanceId,iaasInfo));
  return ""String_Node_Str"";
}",0.9087168938030342
116324,"/** 
 * IMPORTANT In cloudstack we can assign public IPs, if we are using an advanced zone only. If we are using a basic zone we cannot assign public ips. <p/> When we use an advanced zone, a public IP address will get automatically assigned to the vm. So we don't need to find an unallocated IP address and assign that address to the vm (Not like in ec2 and openstack). <p/> So  this method will find the IP that has been assigned to the vm and return it.
 */
@Override public String associateAddress(NodeMetadata node){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  CloudStackApi cloudStackApi=context.unwrapApi(CloudStackApi.class);
  String ip=null;
  ListPublicIPAddressesOptions listPublicIPAddressesOptions=new ListPublicIPAddressesOptions();
  listPublicIPAddressesOptions.zoneId(iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE));
  Set<PublicIPAddress> publicIPAddresses=cloudStackApi.getAddressApi().listPublicIPAddresses(listPublicIPAddressesOptions);
  String id=node.getProviderId();
  for (  PublicIPAddress publicIPAddress : publicIPAddresses) {
    if (publicIPAddress.getVirtualMachineId().equals(id)) {
      ip=publicIPAddress.getIPAddress();
      log.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ node.getId());
      break;
    }
  }
  if (ip == null || ip.isEmpty()) {
    String msg=""String_Node_Str"" + node.getId();
    log.debug(msg);
    throw new CloudControllerException(msg);
  }
  return ip;
}","/** 
 * IMPORTANT In cloudstack we can assign public IPs, if we are using an advanced zone only. If we are using a basic zone we cannot assign public ips. <p/> When we use an advanced zone, a public IP address will get automatically assigned to the vm. So we don't need to find an unallocated IP address and assign that address to the vm. If you are using a basic zone you cannot assign public IPs <p/> So  this method will find the IP that has been assigned to the vm and return it.
 */
@Override public String associateAddress(NodeMetadata node){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  CloudStackApi cloudStackApi=context.unwrapApi(CloudStackApi.class);
  String ip=null;
  ListPublicIPAddressesOptions listPublicIPAddressesOptions=new ListPublicIPAddressesOptions();
  listPublicIPAddressesOptions.zoneId(iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE));
  Set<PublicIPAddress> publicIPAddresses=cloudStackApi.getAddressApi().listPublicIPAddresses(listPublicIPAddressesOptions);
  String id=node.getProviderId();
  for (  PublicIPAddress publicIPAddress : publicIPAddresses) {
    if (publicIPAddress.getVirtualMachineId().equals(id)) {
      ip=publicIPAddress.getIPAddress();
      log.info(""String_Node_Str"" + ip + ""String_Node_Str""+ node.getId());
      break;
    }
  }
  if (ip == null || ip.isEmpty()) {
    String msg=""String_Node_Str"" + node.getId();
    log.warn(msg);
    throw new CloudControllerException(msg);
  }
  return ip;
}",0.9637373407383208
116325,"private boolean waitForStatus(String volumeId,Volume.State expectedStatus,int timeoutInMins) throws TimeoutException {
  int timeout=1000 * 60 * timeoutInMins;
  long timout=System.currentTimeMillis() + timeout;
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  CloudStackApi cloudStackApi=context.unwrapApi(CloudStackApi.class);
  org.jclouds.cloudstack.domain.Volume volume=cloudStackApi.getVolumeApi().getVolume(volumeId);
  Volume.State volumeState=volume.getState();
  while (volumeState != expectedStatus) {
    try {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus,volumeState));
      }
      if (volumeState == Volume.State.FAILED || volumeState == Volume.State.DESTROYED || volumeState == Volume.State.UNRECOGNIZED) {
        log.error(""String_Node_Str"" + volumeId + ""String_Node_Str""+ volumeState);
        return false;
      }
      Thread.sleep(1000);
      volumeState=volume.getState();
      if (System.currentTimeMillis() > timout) {
        throw new TimeoutException();
      }
    }
 catch (    InterruptedException e) {
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus));
  }
  return true;
}","private boolean waitForStatus(String volumeId,Volume.State expectedStatus,int timeoutInMilliseconds) throws TimeoutException {
  int timeout=1000 * 60 * timeoutInMilliseconds;
  long timout=System.currentTimeMillis() + timeout;
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  CloudStackApi cloudStackApi=context.unwrapApi(CloudStackApi.class);
  org.jclouds.cloudstack.domain.Volume volume=cloudStackApi.getVolumeApi().getVolume(volumeId);
  Volume.State volumeState=volume.getState();
  while (volumeState != expectedStatus) {
    try {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus,volumeState));
      }
      if (volumeState == Volume.State.FAILED || volumeState == Volume.State.DESTROYED || volumeState == Volume.State.UNRECOGNIZED) {
        log.error(""String_Node_Str"" + volumeId + ""String_Node_Str""+ volumeState);
        return false;
      }
      Thread.sleep(1000);
      volumeState=volume.getState();
      if (System.currentTimeMillis() > timout) {
        throw new TimeoutException();
      }
    }
 catch (    InterruptedException e) {
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus));
  }
  return true;
}",0.9923838537699924
116326,"@Override public void buildTemplate(){
  IaasProvider iaasInfo=getIaasProvider();
  if (iaasInfo.getComputeService() == null) {
    String msg=""String_Node_Str"" + iaasInfo.getName();
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  TemplateBuilder templateBuilder=iaasInfo.getComputeService().templateBuilder();
  templateBuilder.imageId(iaasInfo.getImage());
  if (iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE) != null) {
    Set<? extends Location> locations=iaasInfo.getComputeService().listAssignableLocations();
    for (    Location location : locations) {
      if (location.getId().equals(iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE))) {
        templateBuilder.locationId(location.getId());
        log.info(""String_Node_Str"" + iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE) + ""String_Node_Str""+ location.getId());
        break;
      }
    }
  }
  if (iaasInfo.getProperty(CloudControllerConstants.INSTANCE_TYPE) != null) {
    templateBuilder.hardwareId(iaasInfo.getProperty(CloudControllerConstants.INSTANCE_TYPE));
  }
  Template template=templateBuilder.build();
  boolean blockUntilRunning=Boolean.parseBoolean(iaasInfo.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP));
  template.getOptions().as(TemplateOptions.class).blockUntilRunning(blockUntilRunning);
  template.getOptions().as(TemplateOptions.class).inboundPorts(new int[]{});
  if (iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUP_IDS) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).securityGroupIds(Arrays.asList(iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUP_IDS).split(CloudControllerConstants.ENTRY_SEPARATOR)));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.NETWORK_IDS) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).networks(Arrays.asList(iaasInfo.getProperty(CloudControllerConstants.NETWORK_IDS).split(CloudControllerConstants.ENTRY_SEPARATOR)));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.USER_NAME) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).account(iaasInfo.getProperty(CloudControllerConstants.USER_NAME));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.DOMAIN_ID) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).domainId(iaasInfo.getProperty(CloudControllerConstants.DOMAIN_ID));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).keyPair(iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.TAGS) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).tags(Arrays.asList(iaasInfo.getProperty(CloudControllerConstants.TAGS).split(CloudControllerConstants.ENTRY_SEPARATOR)));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.DISK_OFFERING) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).diskOfferingId(iaasInfo.getProperty(CloudControllerConstants.DISK_OFFERING));
  }
  iaasInfo.setTemplate(template);
}","@Override public void buildTemplate(){
  IaasProvider iaasInfo=getIaasProvider();
  if (iaasInfo.getComputeService() == null) {
    String msg=""String_Node_Str"" + iaasInfo.getName();
    log.error(msg);
    throw new CloudControllerException(msg);
  }
  TemplateBuilder templateBuilder=iaasInfo.getComputeService().templateBuilder();
  templateBuilder.imageId(iaasInfo.getImage());
  if (iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE) != null) {
    Set<? extends Location> locations=iaasInfo.getComputeService().listAssignableLocations();
    for (    Location location : locations) {
      if (location.getId().equals(iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE))) {
        templateBuilder.locationId(location.getId());
        log.info(""String_Node_Str"" + iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE) + ""String_Node_Str""+ location.getId());
        break;
      }
    }
  }
  if (iaasInfo.getProperty(CloudControllerConstants.INSTANCE_TYPE) != null) {
    templateBuilder.hardwareId(iaasInfo.getProperty(CloudControllerConstants.INSTANCE_TYPE));
  }
  Template template=templateBuilder.build();
  boolean blockUntilRunning=Boolean.parseBoolean(iaasInfo.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP));
  template.getOptions().as(TemplateOptions.class).blockUntilRunning(blockUntilRunning);
  template.getOptions().as(TemplateOptions.class).inboundPorts(new int[]{});
  if (iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUP_IDS) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).securityGroupIds(Arrays.asList(iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUP_IDS).split(CloudControllerConstants.ENTRY_SEPARATOR)));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.NETWORK_IDS) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).networks(Arrays.asList(iaasInfo.getProperty(CloudControllerConstants.NETWORK_IDS).split(CloudControllerConstants.ENTRY_SEPARATOR)));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.USER_NAME) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).account(iaasInfo.getProperty(CloudControllerConstants.USER_NAME));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.DOMAIN_ID) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).domainId(iaasInfo.getProperty(CloudControllerConstants.DOMAIN_ID));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).keyPair(iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.TAGS) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).tags(Arrays.asList(iaasInfo.getProperty(CloudControllerConstants.TAGS).split(CloudControllerConstants.ENTRY_SEPARATOR)));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.DISK_OFFERING) != null) {
    template.getOptions().as(CloudStackTemplateOptions.class).diskOfferingId(iaasInfo.getProperty(CloudControllerConstants.DISK_OFFERING));
  }
  iaasInfo.setTemplate(template);
}",0.9984081502706144
116327,"/** 
 * When one group/cluster terminates/in_maintenance, need to consider about other dependencies
 * @param id the alias/id of group/cluster in which terminated event received
 * @return all the kill able children dependencies
 */
public List<ApplicationContext> getTerminationDependencies(String id){
  List<ApplicationContext> allChildrenOfAppContext=new ArrayList<ApplicationContext>();
  ApplicationContext applicationContext=findApplicationContextWithId(id);
  if (terminationBehavior == TerminationBehavior.TERMINATE_DEPENDENT) {
    allChildrenOfAppContext.add(applicationContext);
    findAllChildrenOfAppContext(applicationContext.getApplicationContextList(),allChildrenOfAppContext);
    return allChildrenOfAppContext;
  }
 else   if (terminationBehavior == TerminationBehavior.TERMINATE_DEPENDENT) {
    findAllChildrenOfAppContext(this.applicationContextList,allChildrenOfAppContext);
  }
  return allChildrenOfAppContext;
}","/** 
 * When one group/cluster terminates/in_maintenance, need to consider about other dependencies
 * @param id the alias/id of group/cluster in which terminated event received
 * @return all the kill able children dependencies
 */
public List<ApplicationContext> getTerminationDependencies(String id){
  List<ApplicationContext> allChildrenOfAppContext=new ArrayList<ApplicationContext>();
  ApplicationContext applicationContext=findApplicationContextWithId(id);
  allChildrenOfAppContext.add(applicationContext);
  if (terminationBehavior == TerminationBehavior.TERMINATE_DEPENDENT) {
    findAllChildrenOfAppContext(applicationContext.getApplicationContextList(),allChildrenOfAppContext);
    return allChildrenOfAppContext;
  }
 else   if (terminationBehavior == TerminationBehavior.TERMINATE_ALL) {
    findAllChildrenOfAppContext(this.applicationContextList,allChildrenOfAppContext);
  }
  return allChildrenOfAppContext;
}",0.9379679144385028
116328,"protected void onChildTerminatedEvent(String eventId){
  List<ApplicationContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationContext context=this.startupDependencyTree.findApplicationContextWithId(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts);
  }
  if ((terminationList != null && allDependentTerminated || terminationList.isEmpty()) && (parentContexts != null && parentsTerminated || parentContexts.isEmpty())) {
    try {
      this.startDependencyOnTermination();
      List<ApplicationContext> applicationContexts=this.startupDependencyTree.getStarAbleDependenciesByTermination();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    StatusChecker.getInstance().onChildStatusChange(eventId,this.id,this.appId);
    log.info(""String_Node_Str"" + ""String_Node_Str"");
  }
}","protected void onChildTerminatedEvent(String eventId){
  List<ApplicationContext> terminationList;
  boolean allDependentTerminated=false;
  ApplicationContext context=this.startupDependencyTree.findApplicationContextWithId(eventId);
  context.setTerminated(true);
  terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationContext> parentContexts=this.startupDependencyTree.findAllParentContextWithId(eventId);
  boolean parentsTerminated=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts);
  }
  if ((terminationList != null && allDependentTerminated || terminationList.isEmpty()) && (parentContexts != null && parentsTerminated || parentContexts.isEmpty())) {
    try {
      this.startDependencyOnTermination();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    StatusChecker.getInstance().onChildStatusChange(eventId,this.id,this.appId);
    log.info(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.95152013147083
116329,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
    if (this.status == ApplicationStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == ApplicationStatus.Terminating || this.status == ApplicationStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
      this.aliasToActiveMonitorsMap.remove(id);
    }
    if (this.status == ApplicationStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == ApplicationStatus.Terminating || this.status == ApplicationStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
}",0.9834254143646408
116330,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
    if (this.status == GroupStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == GroupStatus.Terminating || this.status == GroupStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
      this.aliasToActiveMonitorsMap.remove(id);
    }
    if (this.status == GroupStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == GroupStatus.Terminating || this.status == GroupStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.9826338639652678
116331,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                startApplicationMonitor(application.getUniqueIdentifier());
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          startApplicationMonitor(appId);
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Active);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      if (monitor.getStatus() == ClusterStatus.Active) {
        monitor.setStatus(ClusterStatus.Terminating);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
      }
 else {
        monitor.setStatus(ClusterStatus.Terminating);
        monitor.terminateAllMembers();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Terminated);
      monitor.destroy();
      AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                startApplicationMonitor(application.getUniqueIdentifier());
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          startApplicationMonitor(appId);
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String clusterId=clusterActivatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Active);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterResetEvent clusterResetEvent=(ClusterResetEvent)event;
      String clusterId=clusterResetEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.destroy();
      monitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String clusterId=clusterInactivateEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      if (monitor.getStatus() == ClusterStatus.Active) {
        monitor.setStatus(ClusterStatus.Terminating);
        InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
      }
 else {
        monitor.setStatus(ClusterStatus.Terminating);
        monitor.terminateAllMembers();
      }
      StatusChecker.getInstance().onMemberTermination(clusterId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String clusterId=clusterTerminatedEvent.getClusterId();
      AutoscalerContext asCtx=AutoscalerContext.getInstance();
      AbstractClusterMonitor monitor;
      monitor=asCtx.getClusterMonitor(clusterId);
      if (null == monitor) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
        }
        return;
      }
      monitor.setStatus(ClusterStatus.Terminated);
      monitor.destroy();
      AutoscalerContext.getInstance().removeClusterMonitor(clusterId);
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberReadyToShutdownEvent(memberReadyToShutdownEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        String clusterId=memberTerminatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberTerminatedEvent(memberTerminatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        String clusterId=memberActivatedEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberActivatedEvent(memberActivatedEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberMaintenanceModeEvent maintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        String clusterId=maintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        monitor=asCtx.getClusterMonitor(clusterId);
        if (null == monitor) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        monitor.handleMemberMaintenanceModeEvent(maintenanceModeEvent);
      }
 catch (      Exception e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
}",0.996628524724152
116332,"public void setAliasToInActiveMonitorsMap(Map<String,Monitor> aliasToInActiveMonitorsMap){
  this.aliasToInactiveMonitorsMap=aliasToInActiveMonitorsMap;
}","public void setAliasToInActiveMonitorsMap(List<String> inactiveMonitorsList){
  this.inactiveMonitorsList=inactiveMonitorsList;
}",0.6007067137809188
116333,"public boolean hasActiveMonitors(){
  boolean hasMonitor=false;
  if ((this.aliasToActiveMonitorsMap != null && !this.aliasToActiveMonitorsMap.isEmpty()) || (this.aliasToInactiveMonitorsMap != null && !this.aliasToInactiveMonitorsMap.isEmpty())) {
    hasMonitor=true;
  }
  return hasMonitor;
}","public boolean hasActiveMonitors(){
  boolean hasMonitor=false;
  if ((this.aliasToActiveMonitorsMap != null && !this.aliasToActiveMonitorsMap.isEmpty()) || (this.inactiveMonitorsList != null && !this.inactiveMonitorsList.isEmpty())) {
    hasMonitor=true;
  }
  return hasMonitor;
}",0.7785467128027682
116334,"public boolean hasMonitors(){
  return this.aliasToActiveMonitorsMap != null || this.aliasToInactiveMonitorsMap != null;
}","public boolean hasMonitors(){
  return this.aliasToActiveMonitorsMap != null || this.inactiveMonitorsList != null;
}",0.9411764705882352
116335,"public Map<String,Monitor> getAliasToInActiveMonitorsMap(){
  return this.aliasToInactiveMonitorsMap;
}","public List<String> getAliasToInActiveMonitorsMap(){
  return this.inactiveMonitorsList;
}",0.8497409326424871
116336,"public ParentComponentMonitor(ParentComponent component) throws DependencyBuilderException {
  aliasToActiveMonitorsMap=new HashMap<String,Monitor>();
  aliasToInactiveMonitorsMap=new HashMap<String,Monitor>();
  this.id=component.getUniqueIdentifier();
  startupDependencyTree=DependencyBuilder.getInstance().buildStartupDependency(component);
  scalingDependencyTree=DependencyBuilder.getInstance().buildStartupDependency(component);
}","public ParentComponentMonitor(ParentComponent component) throws DependencyBuilderException {
  aliasToActiveMonitorsMap=new HashMap<String,Monitor>();
  inactiveMonitorsList=new ArrayList<String>();
  this.id=component.getUniqueIdentifier();
  startupDependencyTree=DependencyBuilder.getInstance().buildStartupDependency(component);
  scalingDependencyTree=DependencyBuilder.getInstance().buildStartupDependency(component);
}",0.9535962877030162
116337,"/** 
 * @param eventId
 */
protected void onChildInactiveEvent(String eventId){
  List<ApplicationContext> terminationList;
  Monitor monitor;
  if (this.hasDependent) {
    StatusChecker.getInstance().onChildStatusChange(eventId,this.id,this.appId);
  }
 else {
    terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
    if (terminationList.size() == (this.aliasToActiveMonitorsMap.size() + this.aliasToInactiveMonitorsMap.size())) {
      if (this.parent != null) {
        ApplicationBuilder.handleGroupTerminatingEvent(this.appId,this.id);
      }
    }
 else {
      if (this.parent != null) {
        ApplicationBuilder.handleGroupInActivateEvent(this.appId,this.id);
      }
      if (terminationList != null) {
        for (        ApplicationContext terminationContext : terminationList) {
          monitor=this.aliasToActiveMonitorsMap.get(terminationContext.getId());
          if (monitor != null) {
            if (monitor.hasActiveMonitors()) {
              ApplicationBuilder.handleGroupTerminatingEvent(this.appId,terminationContext.getId());
            }
 else {
              ClusterStatusEventPublisher.sendClusterTerminatingEvent(this.appId,((AbstractClusterMonitor)monitor).getServiceId(),terminationContext.getId());
            }
          }
 else {
            log.warn(""String_Node_Str"" + terminationContext.getId() + ""String_Node_Str"");
          }
        }
      }
 else {
        log.warn(""String_Node_Str"" + eventId + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
}","/** 
 * @param eventId
 */
protected void onChildInactiveEvent(String eventId){
  List<ApplicationContext> terminationList;
  Monitor monitor;
  if (this.hasDependent) {
    StatusChecker.getInstance().onChildStatusChange(eventId,this.id,this.appId);
  }
 else {
    terminationList=this.startupDependencyTree.getTerminationDependencies(eventId);
    if (terminationList.size() == (this.aliasToActiveMonitorsMap.size())) {
      if (this.parent != null) {
        ApplicationBuilder.handleGroupTerminatingEvent(this.appId,this.id);
      }
    }
 else {
      if (this.parent != null) {
        ApplicationBuilder.handleGroupInActivateEvent(this.appId,this.id);
      }
      if (terminationList != null) {
        for (        ApplicationContext terminationContext : terminationList) {
          monitor=this.aliasToActiveMonitorsMap.get(terminationContext.getId());
          if (monitor != null) {
            if (monitor.hasActiveMonitors()) {
              ApplicationBuilder.handleGroupTerminatingEvent(this.appId,terminationContext.getId());
            }
 else {
              ClusterStatusEventPublisher.sendClusterTerminatingEvent(this.appId,((AbstractClusterMonitor)monitor).getServiceId(),terminationContext.getId());
            }
          }
 else {
            log.warn(""String_Node_Str"" + terminationContext.getId() + ""String_Node_Str"");
          }
        }
      }
 else {
        log.warn(""String_Node_Str"" + eventId + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
}",0.986490939044481
116338,"private boolean allDependentTerminated(List<ApplicationContext> terminationList){
  boolean allDependentTerminated=false;
  for (  ApplicationContext context1 : terminationList) {
    if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      allDependentTerminated=false;
      return allDependentTerminated;
    }
 else     if (this.aliasToInactiveMonitorsMap.containsKey(context1.getId())) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      allDependentTerminated=false;
      return allDependentTerminated;
    }
 else {
      allDependentTerminated=true;
    }
  }
  return allDependentTerminated;
}","private boolean allDependentTerminated(List<ApplicationContext> terminationList){
  boolean allDependentTerminated=false;
  for (  ApplicationContext context1 : terminationList) {
    if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      allDependentTerminated=false;
      return allDependentTerminated;
    }
 else     if (this.inactiveMonitorsList.contains(context1.getId())) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      allDependentTerminated=false;
      return allDependentTerminated;
    }
 else {
      allDependentTerminated=true;
    }
  }
  return allDependentTerminated;
}",0.9742519137091162
116339,"private boolean allParentTerminated(List<ApplicationContext> parentContexts){
  boolean parentsTerminated=false;
  for (  ApplicationContext context1 : parentContexts) {
    if (this.aliasToInactiveMonitorsMap.containsKey(context1.getId())) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=false;
      return parentsTerminated;
    }
 else     if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      if (parentsTerminated) {
        log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      }
    }
 else {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=true;
    }
  }
  return parentsTerminated;
}","private boolean allParentTerminated(List<ApplicationContext> parentContexts){
  boolean parentsTerminated=false;
  for (  ApplicationContext context1 : parentContexts) {
    if (this.inactiveMonitorsList.contains(context1.getId())) {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=false;
      return parentsTerminated;
    }
 else     if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
      if (parentsTerminated) {
        log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      }
    }
 else {
      log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      parentsTerminated=true;
    }
  }
  return parentsTerminated;
}",0.974674880219028
116340,"/** 
 * This will start the child monitors based on the active of siblings according to start up order
 * @param eventId parent id of the event which received
 */
protected void onChildActivatedEvent(String eventId){
  try {
    if (this.aliasToInactiveMonitorsMap.containsKey(eventId)) {
      this.aliasToActiveMonitorsMap.put(id,this.aliasToInactiveMonitorsMap.remove(eventId));
    }
    boolean startDep=startDependency(eventId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + startDep + ""String_Node_Str""+ eventId);
    }
    if (!startDep) {
      StatusChecker.getInstance().onChildStatusChange(eventId,this.id,this.appId);
    }
  }
 catch (  TopologyInConsistentException e) {
    log.error(e);
  }
}","/** 
 * This will start the child monitors based on the active of siblings according to start up order
 * @param eventId parent id of the event which received
 */
protected void onChildActivatedEvent(String eventId){
  try {
    if (this.inactiveMonitorsList.contains(eventId)) {
      this.aliasToActiveMonitorsMap.put(id,this.aliasToActiveMonitorsMap.remove(eventId));
    }
    boolean startDep=startDependency(eventId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + startDep + ""String_Node_Str""+ eventId);
    }
    if (!startDep) {
      StatusChecker.getInstance().onChildStatusChange(eventId,this.id,this.appId);
    }
  }
 catch (  TopologyInConsistentException e) {
    log.error(e);
  }
}",0.9083390764989664
116341,"protected synchronized void markMonitorAsInactive(String monitorKey){
  if (!this.aliasToInactiveMonitorsMap.containsKey(monitorKey)) {
    this.aliasToInactiveMonitorsMap.put(monitorKey,this.aliasToActiveMonitorsMap.remove(monitorKey));
  }
}","protected synchronized void markMonitorAsInactive(String monitorKey){
  if (!this.inactiveMonitorsList.contains(monitorKey)) {
    this.inactiveMonitorsList.add(monitorKey);
  }
}",0.8104265402843602
116342,"/** 
 * Utility method to find the group monitor recursively within app monitor
 * @param id       the unique alias of the Group
 * @param monitors the group monitors found in the app monitor
 * @return the found GroupMonitor
 */
private Monitor findGroupMonitor(String id,Collection<Monitor> monitors,boolean active){
  for (  Monitor monitor : monitors) {
    if (monitor.getId().equals(id)) {
      return monitor;
    }
 else {
      if (monitor.getAliasToActiveMonitorsMap() != null && active) {
        return findGroupMonitor(id,monitor.getAliasToActiveMonitorsMap().values(),active);
      }
 else       if (monitor.getAliasToInActiveMonitorsMap() != null && !active) {
        return findGroupMonitor(id,monitor.getAliasToInActiveMonitorsMap().values(),active);
      }
    }
  }
  return null;
}","/** 
 * Utility method to find the group monitor recursively within app monitor
 * @param id       the unique alias of the Group
 * @param monitors the group monitors found in the app monitor
 * @return the found GroupMonitor
 */
private Monitor findGroupMonitor(String id,Collection<Monitor> monitors){
  for (  Monitor monitor : monitors) {
    if (monitor.getId().equals(id)) {
      return monitor;
    }
 else {
      if (monitor.getAliasToActiveMonitorsMap() != null) {
        return findGroupMonitor(id,monitor.getAliasToActiveMonitorsMap().values());
      }
    }
  }
  return null;
}",0.8177269478198713
116343,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.aliasToInactiveMonitorsMap.containsKey(id)) {
      this.aliasToInactiveMonitorsMap.remove(id);
    }
    if (this.status == ApplicationStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInactiveMonitorsMap.containsKey(id)) {
      this.aliasToInactiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == ApplicationStatus.Terminating || this.status == ApplicationStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
    if (this.status == ApplicationStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == ApplicationStatus.Terminating || this.status == ApplicationStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
}",0.9173036831132731
116344,"/** 
 * Find the group monitor by traversing recursively in the hierarchical monitors.
 * @param groupId the unique alias of the Group
 * @return the found GroupMonitor
 */
public Monitor findGroupMonitorWithId(String groupId){
  Monitor monitor;
  monitor=findGroupMonitor(groupId,aliasToActiveMonitorsMap.values(),true);
  if (monitor == null) {
    monitor=findGroupMonitor(groupId,aliasToInactiveMonitorsMap.values(),false);
  }
  return monitor;
}","/** 
 * Find the group monitor by traversing recursively in the hierarchical monitors.
 * @param groupId the unique alias of the Group
 * @return the found GroupMonitor
 */
public Monitor findGroupMonitorWithId(String groupId){
  Monitor monitor;
  return findGroupMonitor(groupId,aliasToActiveMonitorsMap.values());
}",0.8077922077922078
116345,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.aliasToInactiveMonitorsMap.containsKey(id)) {
      this.aliasToInactiveMonitorsMap.remove(id);
    }
    if (this.status == GroupStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInactiveMonitorsMap.containsKey(id)) {
      this.aliasToInactiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == GroupStatus.Terminating || this.status == GroupStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInactiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
    if (this.status == GroupStatus.Terminating) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.inactiveMonitorsList.contains(id)) {
      this.inactiveMonitorsList.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == GroupStatus.Terminating || this.status == GroupStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.9133284777858705
116346,"public AbstractClusterContext(String clusterId,String serviceId){
  this.clusterId=clusterId;
}","public AbstractClusterContext(String clusterId,String serviceId){
  this.clusterId=clusterId;
  this.serviceId=serviceId;
}",0.8715596330275229
116347,"@Override public void run(){
  while (!isDestroyed()) {
    try {
      if ((getStatus().getCode() <= ClusterStatus.Active.getCode()) || (getStatus() == ClusterStatus.Inactive && !hasDependent) || !this.hasFaultyMember) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + this.toString());
        }
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.Inactive + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(getMonitorIntervalMilliseconds());
    }
 catch (    InterruptedException ignore) {
    }
  }
}","@Override public void run(){
  while (!isDestroyed()) {
    try {
      if (((getStatus().getCode() <= ClusterStatus.Active.getCode()) || (getStatus() == ClusterStatus.Inactive && !hasDependent)) && !this.hasFaultyMember && !stop) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + this.toString());
        }
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.Inactive + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(getMonitorIntervalMilliseconds());
    }
 catch (    InterruptedException ignore) {
    }
  }
}",0.9882677708764666
116348,"private boolean getAllClusterInSameState(Map<String,ClusterDataHolder> clusterData,ClusterStatus status){
  boolean clusterStat=false;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    Service service=TopologyManager.getTopology().getService(clusterDataHolderEntry.getValue().getServiceType());
    Cluster cluster=service.getCluster(clusterDataHolderEntry.getValue().getClusterId());
    if (cluster.getStatus() == status) {
      clusterStat=true;
    }
 else {
      clusterStat=false;
      return clusterStat;
    }
  }
  return clusterStat;
}","private boolean getAllClusterInSameState(Map<String,ClusterDataHolder> clusterData,ClusterStatus status){
  boolean clusterStat=false;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    String serviceName=clusterDataHolderEntry.getValue().getServiceType();
    String clusterId=clusterDataHolderEntry.getValue().getClusterId();
    TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
    try {
      Service service=TopologyManager.getTopology().getService(serviceName);
      Cluster cluster=service.getCluster(clusterId);
      if (cluster.getStatus() == status) {
        clusterStat=true;
      }
 else {
        clusterStat=false;
        return clusterStat;
      }
    }
  finally {
      TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
    }
  }
  return clusterStat;
}",0.635989010989011
116349,"private boolean doProcess(ClusterResetEvent event,Topology topology){
  if (TopologyServiceFilter.getInstance().isActive()) {
    if (TopologyServiceFilter.getInstance().serviceNameExcluded(event.getServiceName())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getServiceName()));
      }
      return false;
    }
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    if (TopologyClusterFilter.getInstance().clusterIdExcluded(event.getClusterId())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getClusterId()));
      }
      return false;
    }
  }
  Service service=topology.getService(event.getServiceName());
  if (service == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getServiceName()));
    }
    return false;
  }
  if (service.clusterExists(event.getClusterId())) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId()));
    }
  }
 else {
    Cluster cluster=service.getCluster(event.getClusterId());
    if (!cluster.isStateTransitionValid(ClusterStatus.Created)) {
      log.error(""String_Node_Str"" + cluster.getStatus() + ""String_Node_Str""+ ClusterStatus.Created+ ""String_Node_Str""+ ""String_Node_Str""+ cluster.getClusterId());
    }
    cluster.setStatus(ClusterStatus.Created);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",cluster.toString()));
    }
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(ClusterResetEvent event,Topology topology){
  if (TopologyServiceFilter.getInstance().isActive()) {
    if (TopologyServiceFilter.getInstance().serviceNameExcluded(event.getServiceName())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getServiceName()));
      }
      return false;
    }
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    if (TopologyClusterFilter.getInstance().clusterIdExcluded(event.getClusterId())) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",event.getClusterId()));
      }
      return false;
    }
  }
  Service service=topology.getService(event.getServiceName());
  if (service == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getServiceName()));
    }
    return false;
  }
  Cluster cluster=service.getCluster(event.getClusterId());
  if (cluster == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId()));
    }
  }
 else {
    if (!cluster.isStateTransitionValid(ClusterStatus.Created)) {
      log.error(""String_Node_Str"" + cluster.getStatus() + ""String_Node_Str""+ ClusterStatus.Created);
    }
    cluster.setStatus(ClusterStatus.Created);
  }
  notifyEventListeners(event);
  return true;
}",0.893949694085656
116350,"private static void publish(Event event){
  EventPublisher instanceNotifyingEvent=EventPublisherPool.getPublisher(Constants.INSTANCE_NOTIFIER_TOPIC);
  instanceNotifyingEvent.publish(event);
}","private static void publish(Event event){
  String topic=Util.getMessageTopicName(event);
  EventPublisher instanceNotifyingEvent=EventPublisherPool.getPublisher(topic);
  instanceNotifyingEvent.publish(event);
}",0.7871287128712872
116351,"@Override public void messageArrived(String topicName,MqttMessage message) throws Exception {
  TextMessage receivedMessage=new ActiveMQTextMessage();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str""));
  }
  receivedMessage.setText(new String(message.getPayload()));
  receivedMessage.setStringProperty(Constants.EVENT_CLASS_NAME,Util.getEventNameForTopic(topicName));
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",((TextMessage)message).getText()));
    }
    messageQueue.add(receivedMessage);
  }
 catch (  JMSException e) {
    log.error(e.getMessage(),e);
  }
}","@Override public void messageArrived(String topicName,MqttMessage message) throws Exception {
  TextMessage receivedMessage=new ActiveMQTextMessage();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str""));
  }
  receivedMessage.setText(new String(message.getPayload()));
  receivedMessage.setStringProperty(Constants.EVENT_CLASS_NAME,Util.getEventNameForTopic(topicName));
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",receivedMessage.getText()));
    }
    messageQueue.add(receivedMessage);
  }
 catch (  JMSException e) {
    log.error(e.getMessage(),e);
  }
}",0.9707509881422924
116352,"@Override public void messageArrived(String topicName,MqttMessage message) throws Exception {
  TextMessage receivedMessage=new ActiveMQTextMessage();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str""));
  }
  receivedMessage.setText(new String(message.getPayload()));
  receivedMessage.setStringProperty(Constants.EVENT_CLASS_NAME,Util.getEventNameForTopic(topicName));
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",((TextMessage)message).getText()));
    }
    messageQueue.add(receivedMessage);
  }
 catch (  JMSException e) {
    log.error(e.getMessage(),e);
  }
}","@Override public void messageArrived(String topicName,MqttMessage message) throws Exception {
  TextMessage receivedMessage=new ActiveMQTextMessage();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str""));
  }
  receivedMessage.setText(new String(message.getPayload()));
  receivedMessage.setStringProperty(Constants.EVENT_CLASS_NAME,Util.getEventNameForTopic(topicName));
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",receivedMessage.getText()));
    }
    messageQueue.add(receivedMessage);
  }
 catch (  JMSException e) {
    log.error(e.getMessage(),e);
  }
}",0.9707509881422924
116353,"public static void sendCompleteApplicationsEvent(Applications completeApplications){
  publishEvent(new CompleteApplicationsEvent(completeApplications));
}","public static void sendCompleteApplicationsEvent(Applications completeApplications){
}",0.7136929460580913
116354,"public static void main(String[] args){
  try {
    final Thread mainThread=Thread.currentThread();
    Runtime.getRuntime().addShutdownHook(new Thread(){
      public void run(){
        try {
          EventPublisherPool.close(Constants.INSTANCE_STATUS_TOPIC);
          mainThread.join();
        }
 catch (        Exception e) {
          log.error(e);
        }
      }
    }
);
    CartridgeAgentConfiguration.getInstance();
    if (args.length >= 1) {
      String className=args[0];
      try {
        Constructor<?> c=Class.forName(className).getConstructor();
        cartridgeAgent=(CartridgeAgent)c.newInstance();
        log.info(""String_Node_Str"" + className);
      }
 catch (      Exception e) {
        String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",className);
        log.warn(msg,e);
      }
    }
    if (cartridgeAgent == null) {
      cartridgeAgent=new CartridgeAgent();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
    }
    Thread thread=new Thread(cartridgeAgent);
    thread.start();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(e);
    }
    if (cartridgeAgent != null) {
      cartridgeAgent.terminate();
    }
  }
}","public static void main(String[] args){
  try {
    final Thread mainThread=Thread.currentThread();
    Runtime.getRuntime().addShutdownHook(new Thread(){
      public void run(){
        try {
          EventPublisherPool.close(Constants.INSTANCE_STATUS_TOPIC);
          mainThread.join();
        }
 catch (        Exception e) {
          log.error(e);
        }
      }
    }
);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    PropertyConfigurator.configure(System.getProperty(""String_Node_Str""));
    CartridgeAgentConfiguration.getInstance();
    if (args.length >= 1) {
      String className=args[0];
      try {
        Constructor<?> c=Class.forName(className).getConstructor();
        cartridgeAgent=(CartridgeAgent)c.newInstance();
        log.info(""String_Node_Str"" + className);
      }
 catch (      Exception e) {
        String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",className);
        log.warn(msg,e);
      }
    }
    if (cartridgeAgent == null) {
      cartridgeAgent=new CartridgeAgent();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
    }
    Thread thread=new Thread(cartridgeAgent);
    thread.start();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(e);
    }
    if (cartridgeAgent != null) {
      cartridgeAgent.terminate();
    }
  }
}",0.942889996167114
116355,"protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    applicationTopicReceiver=new ApplicationTopicReceiver();
    Thread tApplicationTopicReceiver=new Thread(applicationTopicReceiver);
    tApplicationTopicReceiver.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    clusterStatusTopicReceiver=new ClusterStatusTopicReceiver();
    Thread tClusterStatusTopicReceiver=new Thread(clusterStatusTopicReceiver);
    tClusterStatusTopicReceiver.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}","protected void activate(ComponentContext context){
  try {
    applicationTopicReceiver=new ApplicationTopicReceiver();
    Thread tApplicationTopicReceiver=new Thread(applicationTopicReceiver);
    tApplicationTopicReceiver.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    clusterStatusTopicReceiver=new ClusterStatusTopicReceiver();
    Thread tClusterStatusTopicReceiver=new Thread(clusterStatusTopicReceiver);
    tClusterStatusTopicReceiver.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    instanceStatusTopicReceiver=new InstanceStatusTopicReceiver();
    Thread tInstanceStatusTopicReceiver=new Thread(instanceStatusTopicReceiver);
    tInstanceStatusTopicReceiver.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.7022222222222222
116356,"@Override public void run(){
  this.applicationsEventReceiver=new ApplicationsEventReceiver();
  addEventListeners();
}","@Override public void run(){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  Thread thread=new Thread(applicationsEventReceiver);
  thread.start();
  while (!terminated) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}",0.2494714587737843
116357,"public ClusterStatusTopicReceiver(){
  this.statusEventReceiver=new ClusterStatusEventReceiver();
  addEventListeners();
}","public ClusterStatusTopicReceiver(){
  this.statusEventReceiver=new ClusterStatusEventReceiver();
}",0.8959276018099548
116358,"public void run(){
  try {
    Thread.sleep(15000);
  }
 catch (  InterruptedException ignore) {
  }
  Thread thread=new Thread(statusEventReceiver);
  thread.start();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  while (!terminated) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}","public void run(){
  Thread thread=new Thread(statusEventReceiver);
  thread.start();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  while (!terminated) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}",0.8918205804749341
116359,"/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    if (parentMonitor.isDependent() || (context.isDependent() && context.hasChild())) {
      clusterMonitor.setHasDependent(true);
    }
 else {
      clusterMonitor.setHasDependent(false);
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}","/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static AbstractClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    AbstractClusterMonitor clusterMonitor=ClusterMonitorFactory.getMonitor(cluster);
    clusterMonitor.setParent(parentMonitor);
    if (parentMonitor.isDependent() || (context.isDependent() && context.hasChild())) {
      clusterMonitor.setHasDependent(true);
    }
 else {
      clusterMonitor.setHasDependent(false);
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
 else {
      if (!cluster.hasMembers()) {
        StatusChecker.getInstance().onMemberStatusChange(clusterId);
      }
    }
    return clusterMonitor;
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
}",0.9673066943435392
116360,"/** 
 * Builds the Application structure
 * @param appCtxt ApplicationContext object with Application information
 * @param definedGroupCtxts Map [cartridge alias -> Group] with extracted Group Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext appCtxt,Map<String,GroupContext> definedGroupCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(appCtxt.getApplicationId());
  application.setTenantId(appCtxt.getTenantId());
  application.setTenantDomain(appCtxt.getTenantDomain());
  application.setTenantAdminUserName(appCtxt.getTeantAdminUsername());
  Map<String,ClusterDataHolder> clusterDataMap;
  if (appCtxt.getComponents() != null) {
    if (appCtxt.getComponents().getSubscribableContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),null,Arrays.asList(appCtxt.getComponents().getSubscribableContexts()),subscribableInfoCtxts);
      application.setClusterData(clusterDataMap);
    }
    if (appCtxt.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),Arrays.asList(appCtxt.getComponents().getGroupContexts()),subscribableInfoCtxts,definedGroupCtxts));
    }
    if (appCtxt.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=appCtxt.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias());
        }
      }
      String terminationBehavior=appCtxt.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  String alias;
  Properties properties=new Properties();
  for (  SubscribableInfoContext value : subscribableInfoCtxts.values()) {
    alias=value.getAlias();
    String username=value.getRepoUsername();
    String password=value.getRepoPassword();
    String repoUrl=value.getRepoUrl();
    if (StringUtils.isNotEmpty(username)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(username);
      properties.addProperties(property);
    }
    if (StringUtils.isNotEmpty(password)) {
      String encryptedPassword=encryptPassword(password,application.getKey());
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(encryptedPassword);
      properties.addProperties(property);
    }
    if (StringUtils.isNotEmpty(repoUrl)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(repoUrl);
      properties.addProperties(property);
    }
    this.addProperties(alias,properties);
  }
  log.info(""String_Node_Str"" + appCtxt.getApplicationId() + ""String_Node_Str"");
  return application;
}","/** 
 * Builds the Application structure
 * @param appCtxt ApplicationContext object with Application information
 * @param definedGroupCtxts Map [cartridge alias -> Group] with extracted Group Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext appCtxt,Map<String,GroupContext> definedGroupCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(appCtxt.getApplicationId());
  application.setTenantId(appCtxt.getTenantId());
  application.setTenantDomain(appCtxt.getTenantDomain());
  application.setTenantAdminUserName(appCtxt.getTeantAdminUsername());
  Map<String,ClusterDataHolder> clusterDataMap;
  if (appCtxt.getComponents() != null) {
    if (appCtxt.getComponents().getSubscribableContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),null,Arrays.asList(appCtxt.getComponents().getSubscribableContexts()),subscribableInfoCtxts);
      application.setClusterData(clusterDataMap);
    }
    if (appCtxt.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),Arrays.asList(appCtxt.getComponents().getGroupContexts()),subscribableInfoCtxts,definedGroupCtxts));
    }
    if (appCtxt.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=appCtxt.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias());
        }
      }
      String terminationBehavior=appCtxt.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  String alias;
  Properties properties=new Properties();
  for (  SubscribableInfoContext value : subscribableInfoCtxts.values()) {
    alias=value.getAlias();
    String username=value.getRepoUsername();
    String password=value.getRepoPassword();
    String repoUrl=value.getRepoUrl();
    List<Property> propertyList=new ArrayList<Property>();
    if (StringUtils.isNotEmpty(username)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(username);
      propertyList.add(property);
    }
    if (StringUtils.isNotEmpty(password)) {
      String encryptedPassword=encryptPassword(password,application.getKey());
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(encryptedPassword);
      propertyList.add(property);
    }
    if (StringUtils.isNotEmpty(repoUrl)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(repoUrl);
      propertyList.add(property);
    }
    Property[] properties1=new Property[propertyList.size()];
    properties.setProperties(propertyList.toArray(properties1));
    this.addProperties(alias,properties);
  }
  log.info(""String_Node_Str"" + appCtxt.getApplicationId() + ""String_Node_Str"");
  return application;
}",0.9629145991120396
116361,"@Override public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    dataHolder.addClusterContext(new ClusterContext(appClusterCtxt.getClusterId(),appClusterCtxt.getCartridgeType(),appClusterCtxt.getTextPayload(),appClusterCtxt.getHostName(),appClusterCtxt.isLbCluster(),appClusterCtxt.getProperties()));
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(appClusterCtxt.getTenantRange());
    newCluster.setStatus(ClusterStatus.Created);
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    Cartridge cartridge=dataHolder.getCartridge(appClusterCtxt.getCartridgeType());
    if (cartridge.getDeployerType() != null && cartridge.getDeployerType().equals(StratosConstants.KUBERNETES_DEPLOYER_TYPE)) {
      newCluster.setKubernetesCluster(true);
    }
    clusters.add(newCluster);
  }
}","@Override public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    dataHolder.addClusterContext(new ClusterContext(appClusterCtxt.getClusterId(),appClusterCtxt.getCartridgeType(),appClusterCtxt.getTextPayload(),appClusterCtxt.getHostName(),appClusterCtxt.isLbCluster(),appClusterCtxt.getProperties()));
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(appClusterCtxt.getTenantRange());
    newCluster.setStatus(ClusterStatus.Created);
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    Cartridge cartridge=dataHolder.getCartridge(appClusterCtxt.getCartridgeType());
    if (cartridge.getDeployerType() != null && cartridge.getDeployerType().equals(StratosConstants.KUBERNETES_DEPLOYER_TYPE)) {
      newCluster.setKubernetesCluster(true);
    }
    clusters.add(newCluster);
  }
  TopologyBuilder.handleApplicationClustersCreated(appId,clusters);
  persist();
}",0.9727364523729384
116362,"public static synchronized void handleApplicationCreated(Application application,Set<ApplicationClusterContext> appClusterContexts){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + application.getUniqueIdentifier());
  }
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    if (applications.getApplication(application.getUniqueIdentifier()) != null) {
      CloudControllerClient.getInstance().createApplicationClusters(application.getUniqueIdentifier(),appClusterContexts);
      ApplicationHolder.persistApplication(application);
      CloudControllerClient.getInstance().createApplicationClusters(application.getUniqueIdentifier(),appClusterContexts);
    }
 else {
      log.warn(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  ApplicationsEventPublisher.sendApplicationCreatedEvent(application);
}","public static synchronized void handleApplicationCreated(Application application,Set<ApplicationClusterContext> appClusterContexts){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + application.getUniqueIdentifier());
  }
  ApplicationHolder.acquireWriteLock();
  try {
    Applications applications=ApplicationHolder.getApplications();
    if (applications.getApplication(application.getUniqueIdentifier()) == null) {
      CloudControllerClient.getInstance().createApplicationClusters(application.getUniqueIdentifier(),appClusterContexts);
      ApplicationHolder.persistApplication(application);
    }
 else {
      log.warn(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
    }
  }
  finally {
    ApplicationHolder.releaseWriteLock();
  }
  ApplicationsEventPublisher.sendApplicationCreatedEvent(application);
}",0.9319542732716384
116363,"/** 
 * Builds the Application structure
 * @param appCtxt ApplicationContext object with Application information
 * @param definedGroupCtxts Map [cartridge alias -> Group] with extracted Group Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext appCtxt,Map<String,GroupContext> definedGroupCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(appCtxt.getApplicationId());
  application.setTenantId(appCtxt.getTenantId());
  application.setTenantDomain(appCtxt.getTenantDomain());
  application.setTenantAdminUserName(appCtxt.getTeantAdminUsername());
  Map<String,ClusterDataHolder> clusterDataMap;
  if (appCtxt.getComponents() != null) {
    if (appCtxt.getComponents().getSubscribableContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),null,Arrays.asList(appCtxt.getComponents().getSubscribableContexts()),subscribableInfoCtxts);
      application.setClusterData(clusterDataMap);
    }
    if (appCtxt.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),Arrays.asList(appCtxt.getComponents().getGroupContexts()),subscribableInfoCtxts,definedGroupCtxts));
    }
    if (appCtxt.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=appCtxt.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias());
        }
      }
      String terminationBehavior=appCtxt.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  String alias;
  Properties properties=new Properties();
  for (  SubscribableInfoContext value : subscribableInfoCtxts.values()) {
    alias=value.getAlias();
    String username=value.getRepoUsername();
    String password=value.getRepoPassword();
    String repoUrl=value.getRepoUrl();
    List<Property> propertyList=new ArrayList<Property>();
    if (StringUtils.isNotEmpty(username)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(username);
      propertyList.add(property);
    }
    if (StringUtils.isNotEmpty(password)) {
      String encryptedPassword=encryptPassword(password,application.getKey());
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(encryptedPassword);
      propertyList.add(property);
    }
    if (StringUtils.isNotEmpty(repoUrl)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(repoUrl);
      propertyList.add(property);
    }
    Property[] properties1=new Property[propertyList.size()];
    properties.setProperties(propertyList.toArray(properties1));
    this.addProperties(alias,properties);
  }
  log.info(""String_Node_Str"" + appCtxt.getApplicationId() + ""String_Node_Str"");
  return application;
}","/** 
 * Builds the Application structure
 * @param appCtxt ApplicationContext object with Application information
 * @param definedGroupCtxts Map [cartridge alias -> Group] with extracted Group Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext appCtxt,Map<String,GroupContext> definedGroupCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(appCtxt.getApplicationId());
  application.setTenantId(appCtxt.getTenantId());
  application.setTenantDomain(appCtxt.getTenantDomain());
  application.setTenantAdminUserName(appCtxt.getTeantAdminUsername());
  Map<String,ClusterDataHolder> clusterDataMap;
  if (appCtxt.getComponents() != null) {
    if (appCtxt.getComponents().getSubscribableContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),null,Arrays.asList(appCtxt.getComponents().getSubscribableContexts()),subscribableInfoCtxts);
      application.setClusterData(clusterDataMap);
    }
    if (appCtxt.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),Arrays.asList(appCtxt.getComponents().getGroupContexts()),subscribableInfoCtxts,definedGroupCtxts));
    }
    if (appCtxt.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=appCtxt.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias());
        }
      }
      String terminationBehavior=appCtxt.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  String alias;
  Properties properties=new Properties();
  for (  SubscribableInfoContext value : subscribableInfoCtxts.values()) {
    alias=value.getAlias();
    String username=value.getRepoUsername();
    String password=value.getRepoPassword();
    String repoUrl=value.getRepoUrl();
    List<Property> propertyList=new ArrayList<Property>();
    if (StringUtils.isNotEmpty(username)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(username);
      propertyList.add(property);
    }
    if (StringUtils.isNotEmpty(password)) {
      String encryptedPassword=encryptPassword(password,application.getKey());
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(encryptedPassword);
      propertyList.add(property);
    }
    if (StringUtils.isNotEmpty(repoUrl)) {
      Property property=new Property();
      property.setName(""String_Node_Str"");
      property.setValue(repoUrl);
      propertyList.add(property);
    }
    if (propertyList.size() > 0) {
      Property[] properties1=new Property[propertyList.size()];
      properties.setProperties(propertyList.toArray(properties1));
      this.addProperties(alias,properties);
    }
  }
  log.info(""String_Node_Str"" + appCtxt.getApplicationId() + ""String_Node_Str"");
  return application;
}",0.9940256768780984
116364,"@Override public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    dataHolder.addClusterContext(new ClusterContext(appClusterCtxt.getClusterId(),appClusterCtxt.getCartridgeType(),appClusterCtxt.getTextPayload(),appClusterCtxt.getHostName(),appClusterCtxt.isLbCluster(),appClusterCtxt.getProperties()));
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(appClusterCtxt.getTenantRange());
    newCluster.setStatus(ClusterStatus.Created);
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    Cartridge cartridge=dataHolder.getCartridge(appClusterCtxt.getCartridgeType());
    if (cartridge.getDeployerType().equals(StratosConstants.KUBERNETES_DEPLOYER_TYPE)) {
      newCluster.setKubernetesCluster(true);
    }
    clusters.add(newCluster);
  }
}","@Override public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    dataHolder.addClusterContext(new ClusterContext(appClusterCtxt.getClusterId(),appClusterCtxt.getCartridgeType(),appClusterCtxt.getTextPayload(),appClusterCtxt.getHostName(),appClusterCtxt.isLbCluster(),appClusterCtxt.getProperties()));
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(appClusterCtxt.getTenantRange());
    newCluster.setStatus(ClusterStatus.Created);
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    Cartridge cartridge=dataHolder.getCartridge(appClusterCtxt.getCartridgeType());
    if (cartridge.getDeployerType() != null && cartridge.getDeployerType().equals(StratosConstants.KUBERNETES_DEPLOYER_TYPE)) {
      newCluster.setKubernetesCluster(true);
    }
    clusters.add(newCluster);
  }
}",0.986320589266924
116365,"public synchronized void createApplicationClusters(String appId,Set<ApplicationClusterContext> appClusterContexts){
}","public synchronized void createApplicationClusters(String appId,Set<ApplicationClusterContext> appClusterContexts){
  List<ApplicationClusterContextDTO> contextDTOs=new ArrayList<ApplicationClusterContextDTO>();
  for (  ApplicationClusterContext context : appClusterContexts) {
    ApplicationClusterContextDTO dto=new ApplicationClusterContextDTO();
    dto.setClusterId(context.getClusterId());
    dto.setAutoscalePolicyName(context.getAutoscalePolicyName());
    dto.setDeploymentPolicyName(context.getDeploymentPolicyName());
    dto.setCartridgeType(context.getCartridgeType());
    dto.setHostName(context.getHostName());
    dto.setTenantRange(context.getTenantRange());
    dto.setTextPayload(context.getTextPayload());
    dto.setLbCluster(context.isLbCluster());
    contextDTOs.add(dto);
  }
  ApplicationClusterContextDTO[] applicationClusterContextDTOs=new ApplicationClusterContextDTO[contextDTOs.size()];
  contextDTOs.toArray(applicationClusterContextDTOs);
  try {
    stub.createApplicationClusters(appId,applicationClusterContextDTOs);
  }
 catch (  RemoteException e) {
    String msg=e.getMessage();
    log.error(msg,e);
  }
catch (  CloudControllerServiceApplicationClusterRegistrationExceptionException e) {
    String msg=e.getMessage();
    log.error(msg,e);
  }
}",0.1660752306600426
116366,"@Override public boolean registerService(Registrant registrant) throws UnregisteredCartridgeException {
  String cartridgeType=registrant.getCartridgeType();
  handleNullObject(cartridgeType,""String_Node_Str"");
  String clusterId=registrant.getClusterId();
  handleNullObject(clusterId,""String_Node_Str"");
  String payload=registrant.getPayload();
  handleNullObject(payload,""String_Node_Str"");
  String hostName=registrant.getHostName();
  handleNullObject(hostName,""String_Node_Str"");
  Cartridge cartridge=null;
  if ((cartridge=dataHolder.getCartridge(cartridgeType)) == null) {
    String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ cartridgeType;
    LOG.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  Properties props=CloudControllerUtil.toJavaUtilProperties(registrant.getProperties());
  String property=props.getProperty(Constants.IS_LOAD_BALANCER);
  boolean isLb=property != null ? Boolean.parseBoolean(property) : false;
  ClusterContext ctxt=null;
  dataHolder.addClusterContext(ctxt);
  TopologyBuilder.handleClusterCreated(registrant,isLb);
  persist();
  LOG.info(""String_Node_Str"" + registrant);
  return true;
}","@Override public boolean registerService(Registrant registrant) throws UnregisteredCartridgeException {
  String cartridgeType=registrant.getCartridgeType();
  handleNullObject(cartridgeType,""String_Node_Str"");
  String clusterId=registrant.getClusterId();
  handleNullObject(clusterId,""String_Node_Str"");
  String payload=registrant.getPayload();
  handleNullObject(payload,""String_Node_Str"");
  String hostName=registrant.getHostName();
  handleNullObject(hostName,""String_Node_Str"");
  Cartridge cartridge=null;
  if ((cartridge=dataHolder.getCartridge(cartridgeType)) == null) {
    String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ cartridgeType;
    LOG.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  Properties props=CloudControllerUtil.toJavaUtilProperties(registrant.getProperties());
  String property=props.getProperty(Constants.IS_LOAD_BALANCER);
  boolean isLb=property != null ? Boolean.parseBoolean(property) : false;
  TopologyBuilder.handleClusterCreated(registrant,isLb);
  persist();
  LOG.info(""String_Node_Str"" + registrant);
  return true;
}",0.9707964601769912
116367,"public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(""String_Node_Str"");
    newCluster.setStatus(ClusterStatus.Created);
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    clusters.add(newCluster);
  }
  TopologyBuilder.handleApplicationClustersCreated(appId,clusters);
  persist();
}","@Override public void createApplicationClusters(String appId,ApplicationClusterContextDTO[] appClustersContexts) throws ApplicationClusterRegistrationException {
  if (appClustersContexts == null || appClustersContexts.length == 0) {
    String errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    throw new ApplicationClusterRegistrationException(errorMsg);
  }
  List<Cluster> clusters=new ArrayList<Cluster>();
  for (  ApplicationClusterContextDTO appClusterCtxt : appClustersContexts) {
    dataHolder.addClusterContext(new ClusterContext(appClusterCtxt.getClusterId(),appClusterCtxt.getCartridgeType(),appClusterCtxt.getTextPayload(),appClusterCtxt.getHostName(),appClusterCtxt.isLbCluster(),appClusterCtxt.getProperties()));
    Cluster newCluster=new Cluster(appClusterCtxt.getCartridgeType(),appClusterCtxt.getClusterId(),appClusterCtxt.getDeploymentPolicyName(),appClusterCtxt.getAutoscalePolicyName(),appId);
    newCluster.setLbCluster(false);
    newCluster.setTenantRange(appClusterCtxt.getTenantRange());
    newCluster.setStatus(ClusterStatus.Created);
    newCluster.setHostNames(Arrays.asList(appClusterCtxt.getHostName()));
    Cartridge cartridge=dataHolder.getCartridge(appClusterCtxt.getCartridgeType());
    if (cartridge.getDeployerType().equals(StratosConstants.KUBERNETES_DEPLOYER_TYPE)) {
      newCluster.setKubernetesCluster(true);
    }
    clusters.add(newCluster);
  }
}",0.6162162162162163
116368,"private ClusterContext buildClusterContext(Cartridge cartridge,String clusterId,String payload,String hostName,org.apache.stratos.common.Properties props,boolean isLb,Persistence persistence){
  return null;
}","private ClusterContext buildClusterContext(Cartridge cartridge,String clusterId,String payload,String hostName,org.apache.stratos.common.Properties props,boolean isLb,Persistence persistence){
  ClusterContext ctxt=new ClusterContext(clusterId,cartridge.getType(),payload,hostName,isLb,props);
  return null;
}",0.8053949903660886
116369,"@Override public MemberContext[] startContainers(ContainerClusterContext containerClusterContext) throws UnregisteredCartridgeException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  handleNullObject(containerClusterContext,""String_Node_Str"");
  String clusterId=containerClusterContext.getClusterId();
  handleNullObject(clusterId,""String_Node_Str"");
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + containerClusterContext.toString());
  }
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  handleNullObject(ctxt,""String_Node_Str"" + containerClusterContext.toString());
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ containerClusterContext.toString();
    LOG.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  try {
    String minReplicas=validateProperty(StratosConstants.KUBERNETES_MIN_REPLICAS,ctxt);
    String kubernetesClusterId=validateProperty(StratosConstants.KUBERNETES_CLUSTER_ID,ctxt);
    String kubernetesMasterIp=validateProperty(StratosConstants.KUBERNETES_MASTER_IP,containerClusterContext);
    String kubernetesPortRange=validateProperty(StratosConstants.KUBERNETES_PORT_RANGE,containerClusterContext);
    KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesPortRange);
    KubernetesApiClient kubApi=kubClusterContext.getKubApi();
    ContainerClusterContextToReplicationController controllerFunction=new ContainerClusterContextToReplicationController();
    ReplicationController controller=controllerFunction.apply(containerClusterContext);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + controller + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createReplicationController(controller);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    ContainerClusterContextToKubernetesService serviceFunction=new ContainerClusterContextToKubernetesService();
    Service service=serviceFunction.apply(containerClusterContext);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + service + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createService(service);
    ctxt.addProperty(StratosConstants.ALLOCATED_SERVICE_HOST_PORT,service.getPort());
    dataHolder.addClusterContext(ctxt);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    Label l=new Label();
    l.setName(clusterId);
    Pod[] newlyCreatedPods=new Pod[0];
    int expectedCount=Integer.parseInt(minReplicas);
    for (int i=0; i < expectedCount; i++) {
      newlyCreatedPods=kubApi.getSelectedPods(new Label[]{l});
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + newlyCreatedPods.length + ""String_Node_Str""+ clusterId);
      }
      if (newlyCreatedPods.length == expectedCount) {
        break;
      }
      Thread.sleep(10000);
    }
    if (newlyCreatedPods.length == 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(String.format(""String_Node_Str"",clusterId));
      }
      terminateAllContainers(clusterId);
      return new MemberContext[0];
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(String.format(""String_Node_Str"",newlyCreatedPods.length,clusterId));
    }
    List<MemberContext> memberContexts=new ArrayList<MemberContext>();
    PodToMemberContext podToMemberContextFunc=new PodToMemberContext();
    for (    Pod pod : newlyCreatedPods) {
      MemberContext context=podToMemberContextFunc.apply(pod);
      context.setCartridgeType(cartridgeType);
      context.setClusterId(clusterId);
      context.setProperties(CloudControllerUtil.addProperty(context.getProperties(),StratosConstants.ALLOCATED_SERVICE_HOST_PORT,String.valueOf(service.getPort())));
      dataHolder.addMemberContext(context);
      ScheduledThreadExecutor exec=ScheduledThreadExecutor.getInstance();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"");
      }
      dataHolder.addScheduledFutureJob(context.getMemberId(),exec.schedule(new PodActivationWatcher(pod.getId(),context,kubApi),5000));
      memberContexts.add(context);
    }
    persist();
    LOG.info(""String_Node_Str"" + memberContexts);
    return memberContexts.toArray(new MemberContext[0]);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + containerClusterContext.toString() + ""String_Node_Str""+ e.getMessage();
    LOG.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}","@Override public MemberContext[] startContainers(ContainerClusterContext containerClusterContext) throws UnregisteredCartridgeException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  handleNullObject(containerClusterContext,""String_Node_Str"");
  String clusterId=containerClusterContext.getClusterId();
  handleNullObject(clusterId,""String_Node_Str"");
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + containerClusterContext.toString());
  }
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  handleNullObject(ctxt,""String_Node_Str"" + containerClusterContext.toString());
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ containerClusterContext.toString();
    LOG.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  try {
    String minReplicas=validateProperty(StratosConstants.KUBERNETES_MIN_REPLICAS,ctxt);
    String kubernetesClusterId=validateProperty(StratosConstants.KUBERNETES_CLUSTER_ID,ctxt);
    String kubernetesMasterIp=validateProperty(StratosConstants.KUBERNETES_MASTER_IP,containerClusterContext);
    String kubernetesPortRange=validateProperty(StratosConstants.KUBERNETES_PORT_RANGE,containerClusterContext);
    KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesPortRange);
    KubernetesApiClient kubApi=kubClusterContext.getKubApi();
    ContainerClusterContextToReplicationController controllerFunction=new ContainerClusterContextToReplicationController();
    ReplicationController controller=controllerFunction.apply(containerClusterContext);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + controller + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createReplicationController(controller);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    ContainerClusterContextToKubernetesService serviceFunction=new ContainerClusterContextToKubernetesService();
    Service service=serviceFunction.apply(containerClusterContext);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + service + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createService(service);
    Property[] properties=new Property[1];
    Property property=new Property(StratosConstants.ALLOCATED_SERVICE_HOST_PORT,String.valueOf(service.getPort()));
    org.apache.stratos.common.Properties properties1=new org.apache.stratos.common.Properties();
    properties1.setProperties(properties);
    ctxt.setProperties(properties1);
    dataHolder.addClusterContext(ctxt);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    Label l=new Label();
    l.setName(clusterId);
    Pod[] newlyCreatedPods=new Pod[0];
    int expectedCount=Integer.parseInt(minReplicas);
    for (int i=0; i < expectedCount; i++) {
      newlyCreatedPods=kubApi.getSelectedPods(new Label[]{l});
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + newlyCreatedPods.length + ""String_Node_Str""+ clusterId);
      }
      if (newlyCreatedPods.length == expectedCount) {
        break;
      }
      Thread.sleep(10000);
    }
    if (newlyCreatedPods.length == 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(String.format(""String_Node_Str"",clusterId));
      }
      terminateAllContainers(clusterId);
      return new MemberContext[0];
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(String.format(""String_Node_Str"",newlyCreatedPods.length,clusterId));
    }
    List<MemberContext> memberContexts=new ArrayList<MemberContext>();
    PodToMemberContext podToMemberContextFunc=new PodToMemberContext();
    for (    Pod pod : newlyCreatedPods) {
      MemberContext context=podToMemberContextFunc.apply(pod);
      context.setCartridgeType(cartridgeType);
      context.setClusterId(clusterId);
      context.setProperties(CloudControllerUtil.addProperty(context.getProperties(),StratosConstants.ALLOCATED_SERVICE_HOST_PORT,String.valueOf(service.getPort())));
      dataHolder.addMemberContext(context);
      ScheduledThreadExecutor exec=ScheduledThreadExecutor.getInstance();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"");
      }
      dataHolder.addScheduledFutureJob(context.getMemberId(),exec.schedule(new PodActivationWatcher(pod.getId(),context,kubApi),5000));
      memberContexts.add(context);
    }
    persist();
    LOG.info(""String_Node_Str"" + memberContexts);
    return memberContexts.toArray(new MemberContext[0]);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + containerClusterContext.toString() + ""String_Node_Str""+ e.getMessage();
    LOG.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}",0.9719703215169002
116370,"/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts,Properties properties) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  group.setDeploymentPolicy(groupCtxt.getDeploymentPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts,properties);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts,properties);
      nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","/** 
 * Parses an individual Group
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxt Group definition information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return  Group object
 * @throws ApplicationDefinitionException if unable to parse
 */
private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(appId,groupCtxt.getName(),groupCtxt.getAlias());
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  group.setDeploymentPolicy(groupCtxt.getDeploymentPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  String[] startupOrders=getStartupOrderForGroup(groupCtxt);
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders,groupCtxt));
  }
  dependencyOrder.setTerminationBehaviour(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
      nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.945888368129527
116371,"/** 
 * Builds the Application structure
 * @param appCtxt ApplicationContext object with Application information
 * @param definedGroupCtxts Map [cartridge alias -> Group] with extracted Group Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext appCtxt,Map<String,GroupContext> definedGroupCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(appCtxt.getApplicationId());
  application.setTenantId(appCtxt.getTenantId());
  application.setTenantDomain(appCtxt.getTenantDomain());
  application.setTenantAdminUserName(appCtxt.getTeantAdminUsername());
  Map<String,ClusterDataHolder> clusterDataMap;
  if (appCtxt.getComponents() != null) {
    if (appCtxt.getComponents().getSubscribableContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),null,Arrays.asList(appCtxt.getComponents().getSubscribableContexts()),subscribableInfoCtxts,appCtxt.getProperties());
      application.setClusterData(clusterDataMap);
    }
    if (appCtxt.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),Arrays.asList(appCtxt.getComponents().getGroupContexts()),subscribableInfoCtxts,definedGroupCtxts,appCtxt.getProperties()));
    }
    if (appCtxt.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=appCtxt.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias());
        }
      }
      String terminationBehavior=appCtxt.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  log.info(""String_Node_Str"" + appCtxt.getApplicationId() + ""String_Node_Str"");
  return application;
}","/** 
 * Builds the Application structure
 * @param appCtxt ApplicationContext object with Application information
 * @param definedGroupCtxts Map [cartridge alias -> Group] with extracted Group Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Application Application object denoting the Application structure
 * @throws ApplicationDefinitionException If an error occurs in building the Application structure
 */
private Application buildCompositeAppStructure(ApplicationContext appCtxt,Map<String,GroupContext> definedGroupCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
  Application application=new Application(appCtxt.getApplicationId());
  application.setTenantId(appCtxt.getTenantId());
  application.setTenantDomain(appCtxt.getTenantDomain());
  application.setTenantAdminUserName(appCtxt.getTeantAdminUsername());
  Map<String,ClusterDataHolder> clusterDataMap;
  if (appCtxt.getComponents() != null) {
    if (appCtxt.getComponents().getSubscribableContexts() != null) {
      clusterDataMap=parseLeafLevelSubscriptions(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),null,Arrays.asList(appCtxt.getComponents().getSubscribableContexts()),subscribableInfoCtxts);
      application.setClusterData(clusterDataMap);
    }
    if (appCtxt.getComponents().getGroupContexts() != null) {
      application.setGroups(parseGroups(appCtxt.getApplicationId(),appCtxt.getTenantId(),application.getKey(),Arrays.asList(appCtxt.getComponents().getGroupContexts()),subscribableInfoCtxts,definedGroupCtxts));
    }
    if (appCtxt.getComponents().getDependencyContext() != null) {
      DependencyOrder appDependencyOrder=new DependencyOrder();
      String[] startupOrders=appCtxt.getComponents().getDependencyContext().getStartupOrdersContexts();
      if (startupOrders != null) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias() + ""String_Node_Str""+ startupOrders.length);
        }
        appDependencyOrder.setStartupOrders(ParserUtils.convert(startupOrders));
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + appCtxt.getAlias());
        }
      }
      String terminationBehavior=appCtxt.getComponents().getDependencyContext().getTerminationBehaviour();
      validateTerminationBehavior(terminationBehavior);
      appDependencyOrder.setTerminationBehaviour(terminationBehavior);
      application.setDependencyOrder(appDependencyOrder);
    }
  }
  log.info(""String_Node_Str"" + appCtxt.getApplicationId() + ""String_Node_Str"");
  return application;
}",0.9911764705882352
116372,"/** 
 * Parse Group information
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxts  Group information
 * @param subscribableInformation Subscribable Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return Map [alias -> Group]
 * @throws ApplicationDefinitionException if an error occurs in parsing Group Information
 */
private Map<String,Group> parseGroups(String appId,int tenantId,String key,List<GroupContext> groupCtxts,Map<String,SubscribableInfoContext> subscribableInformation,Map<String,GroupContext> definedGroupCtxts,Properties properties) throws ApplicationDefinitionException {
  Map<String,Group> groupAliasToGroup=new HashMap<String,Group>();
  for (  GroupContext groupCtxt : groupCtxts) {
    Group group=parseGroup(appId,tenantId,key,groupCtxt,subscribableInformation,definedGroupCtxts,properties);
    groupAliasToGroup.put(group.getAlias(),group);
  }
  Set<Group> nestedGroups=new HashSet<Group>();
  getNestedGroupContexts(nestedGroups,groupAliasToGroup.values());
  filterDuplicatedGroupContexts(groupAliasToGroup.values(),nestedGroups);
  return groupAliasToGroup;
}","/** 
 * Parse Group information
 * @param appId Application id
 * @param tenantId tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupCtxts  Group information
 * @param subscribableInformation Subscribable Information
 * @param definedGroupCtxts Map [group alias -> Group] with extracted Group Information
 * @return Map [alias -> Group]
 * @throws ApplicationDefinitionException if an error occurs in parsing Group Information
 */
private Map<String,Group> parseGroups(String appId,int tenantId,String key,List<GroupContext> groupCtxts,Map<String,SubscribableInfoContext> subscribableInformation,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  Map<String,Group> groupAliasToGroup=new HashMap<String,Group>();
  for (  GroupContext groupCtxt : groupCtxts) {
    Group group=parseGroup(appId,tenantId,key,groupCtxt,subscribableInformation,definedGroupCtxts);
    groupAliasToGroup.put(group.getAlias(),group);
  }
  Set<Group> nestedGroups=new HashSet<Group>();
  getNestedGroupContexts(nestedGroups,groupAliasToGroup.values());
  filterDuplicatedGroupContexts(groupAliasToGroup.values(),nestedGroups);
  return groupAliasToGroup;
}",0.9867735470941884
116373,"/** 
 * Parse Subscription Information
 * @param appId Application id
 * @param tenantId Tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupName Group name (if relevant)
 * @param subscribableCtxts Subscribable Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Map [subscription alias -> ClusterDataHolder]
 * @throws ApplicationDefinitionException
 */
private Map<String,ClusterDataHolder> parseLeafLevelSubscriptions(String appId,int tenantId,String key,String groupName,List<SubscribableContext> subscribableCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Properties properties) throws ApplicationDefinitionException {
}","/** 
 * Parse Subscription Information
 * @param appId Application id
 * @param tenantId Tenant id of tenant which deployed the Application
 * @param key Generated key for the Application
 * @param groupName Group name (if relevant)
 * @param subscribableCtxts Subscribable Information
 * @param subscribableInfoCtxts Map [cartridge alias -> Group] with extracted Subscription Information
 * @return Map [subscription alias -> ClusterDataHolder]
 * @throws ApplicationDefinitionException
 */
private Map<String,ClusterDataHolder> parseLeafLevelSubscriptions(String appId,int tenantId,String key,String groupName,List<SubscribableContext> subscribableCtxts,Map<String,SubscribableInfoContext> subscribableInfoCtxts) throws ApplicationDefinitionException {
}",0.9856584093872228
116374,"/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLBCluster if this cluster is an LB
 * @param isKubernetesCluster if this cluster is a Kubernetes cluster
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLBCluster,boolean isKubernetesCluster,String[] dependencyAliases,Properties properties) throws ApplicationDefinitionException {
  String textPayload=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases).toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB,isKubernetesCluster,properties);
}","/** 
 * Creates a ApplicationClusterContext object to keep information related to a Cluster in this Application
 * @param appId Application id
 * @param groupName Group name
 * @param cartridgeInfo Cartridge information
 * @param subscriptionKey Generated key for the Application
 * @param tenantId Tenant Id of the tenant which deployed the Application
 * @param repoUrl Repository URL
 * @param alias alias specified for this Subscribable in the Application Definition
 * @param clusterId Cluster id
 * @param hostname Hostname
 * @param deploymentPolicy Deployment policy used
 * @param isLB if this cluster is an LB
 * @return ApplicationClusterContext object with relevant information
 * @throws ApplicationDefinitionException If any error occurs
 */
private ApplicationClusterContext createApplicationClusterContext(String appId,String groupName,CartridgeInfo cartridgeInfo,String subscriptionKey,int tenantId,String repoUrl,String alias,String clusterId,String hostname,String deploymentPolicy,boolean isLB,String[] dependencyAliases) throws ApplicationDefinitionException {
  String textPayload=ApplicationUtils.createPayload(appId,groupName,cartridgeInfo,subscriptionKey,tenantId,clusterId,hostname,repoUrl,alias,null,dependencyAliases).toString();
  return new ApplicationClusterContext(cartridgeInfo.getType(),clusterId,hostname,textPayload,deploymentPolicy,isLB);
}",0.9434737923946556
116375,"protected void activate(ComponentContext context){
}","protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    clusterStatusTopicReceiver=new ClusterStatusTopicReceiver();
    Thread tClusterStatusTopicReceiver=new Thread(clusterStatusTopicReceiver);
    tClusterStatusTopicReceiver.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.0778443113772455
116376,"public static void handleClusterActivatedEvent(AppStatusClusterActivatedEvent clusterActivatedEvent){
  Topology topology=TopologyManager.getTopology();
  Service service=topology.getService(clusterActivatedEvent.getServiceName());
  if (service == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getServiceName()));
    return;
  }
  Cluster cluster=service.getCluster(clusterActivatedEvent.getClusterId());
  if (cluster == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getClusterId()));
    return;
  }
  org.apache.stratos.messaging.event.topology.ClusterActivatedEvent clusterActivatedEvent1=new org.apache.stratos.messaging.event.topology.ClusterActivatedEvent(clusterActivatedEvent.getAppId(),clusterActivatedEvent.getServiceName(),clusterActivatedEvent.getClusterId());
  try {
    TopologyManager.acquireWriteLock();
    cluster.setStatus(ClusterStatus.Active);
    log.info(""String_Node_Str"" + cluster.getClusterId());
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendClusterActivatedEvent(clusterActivatedEvent1);
}","public static void handleClusterActivatedEvent(ClusterStatusClusterActivatedEvent clusterActivatedEvent){
  Topology topology=TopologyManager.getTopology();
  Service service=topology.getService(clusterActivatedEvent.getServiceName());
  if (service == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getServiceName()));
    return;
  }
  Cluster cluster=service.getCluster(clusterActivatedEvent.getClusterId());
  if (cluster == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getClusterId()));
    return;
  }
  org.apache.stratos.messaging.event.topology.ClusterActivatedEvent clusterActivatedEvent1=new org.apache.stratos.messaging.event.topology.ClusterActivatedEvent(clusterActivatedEvent.getAppId(),clusterActivatedEvent.getServiceName(),clusterActivatedEvent.getClusterId());
  try {
    TopologyManager.acquireWriteLock();
    cluster.setStatus(ClusterStatus.Active);
    log.info(""String_Node_Str"" + cluster.getClusterId());
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendClusterActivatedEvent(clusterActivatedEvent1);
}",0.9957264957264956
116377,"protected void activate(ComponentContext context){
}","protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    clusterStatusTopicReceiver=new ClusterStatusTopicReceiver();
    Thread tClusterStatusTopicReceiver=new Thread(clusterStatusTopicReceiver);
    tClusterStatusTopicReceiver.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.0822784810126582
116378,"public static void handleClusterActivatedEvent(AppStatusClusterActivatedEvent clusterActivatedEvent){
  Topology topology=TopologyManager.getTopology();
  Service service=topology.getService(clusterActivatedEvent.getServiceName());
  if (service == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getServiceName()));
    return;
  }
  Cluster cluster=service.getCluster(clusterActivatedEvent.getClusterId());
  if (cluster == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getClusterId()));
    return;
  }
  org.apache.stratos.messaging.event.topology.ClusterActivatedEvent clusterActivatedEvent1=new org.apache.stratos.messaging.event.topology.ClusterActivatedEvent(clusterActivatedEvent.getAppId(),clusterActivatedEvent.getServiceName(),clusterActivatedEvent.getClusterId());
  try {
    TopologyManager.acquireWriteLock();
    cluster.setStatus(ClusterStatus.Active);
    log.info(""String_Node_Str"" + cluster.getClusterId());
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendClusterActivatedEvent(clusterActivatedEvent1);
}","public static void handleClusterActivatedEvent(ClusterStatusClusterActivatedEvent clusterActivatedEvent){
  Topology topology=TopologyManager.getTopology();
  Service service=topology.getService(clusterActivatedEvent.getServiceName());
  if (service == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getServiceName()));
    return;
  }
  Cluster cluster=service.getCluster(clusterActivatedEvent.getClusterId());
  if (cluster == null) {
    log.warn(String.format(""String_Node_Str"",clusterActivatedEvent.getClusterId()));
    return;
  }
  org.apache.stratos.messaging.event.topology.ClusterActivatedEvent clusterActivatedEvent1=new org.apache.stratos.messaging.event.topology.ClusterActivatedEvent(clusterActivatedEvent.getAppId(),clusterActivatedEvent.getServiceName(),clusterActivatedEvent.getClusterId());
  try {
    TopologyManager.acquireWriteLock();
    cluster.setStatus(ClusterStatus.Active);
    log.info(""String_Node_Str"" + cluster.getClusterId());
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendClusterActivatedEvent(clusterActivatedEvent1);
}",0.9957264957264956
116379,"/** 
 * This will create a new app monitor based on the give appId by getting the application from Topology
 * @param appId appId of the application which requires to create app monitor
 * @return ApplicationMonitor
 * @throws DependencyBuilderException    throws while building dependency for app monitor
 * @throws TopologyInConsistentException throws while traversing thr topology
 */
public static ApplicationMonitor getApplicationMonitor(String appId) throws DependencyBuilderException, TopologyInConsistentException {
  ApplicationMonitor applicationMonitor;
  ApplicationManager.acquireReadLockForApplication(appId);
  try {
    Application application=ApplicationManager.getApplications().getApplication(appId);
    if (application != null) {
      applicationMonitor=new ApplicationMonitor(application);
      applicationMonitor.setHasDependent(false);
    }
 else {
      String msg=""String_Node_Str"" + appId + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
  }
  finally {
    ApplicationManager.releaseReadLockForApplication(appId);
  }
  return applicationMonitor;
}","/** 
 * This will create a new app monitor based on the give appId by getting the application from Topology
 * @param appId appId of the application which requires to create app monitor
 * @return ApplicationMonitor
 * @throws DependencyBuilderException    throws while building dependency for app monitor
 * @throws TopologyInConsistentException throws while traversing thr topology
 */
public static ApplicationMonitor getApplicationMonitor(String appId) throws DependencyBuilderException, TopologyInConsistentException {
  ApplicationMonitor applicationMonitor;
  ApplicationHolder.acquireReadLock();
  try {
    Application application=ApplicationHolder.getApplications().getApplication(appId);
    if (application != null) {
      applicationMonitor=new ApplicationMonitor(application);
      applicationMonitor.setHasDependent(false);
    }
 else {
      String msg=""String_Node_Str"" + appId + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
  return applicationMonitor;
}",0.9701423977951308
116380,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                startApplicationMonitor(application.getUniqueIdentifier());
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          startApplicationMonitor(appId);
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
      String clusterId=clusterCreatedEvent.getCluster().getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStop(true);
      clusterMonitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String appId=clusterInactivateEvent.getAppId();
      String clusterId=clusterInactivateEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Inactive);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        if (clusterMonitor.getStatus() == ClusterStatus.Active) {
          clusterMonitor.setStatus(ClusterStatus.Terminating);
          InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
        }
 else {
          clusterMonitor.setStatus(ClusterStatus.Terminating);
          clusterMonitor.terminateAllMembers();
        }
      }
 else {
        log.warn(""String_Node_Str"" + clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String appId=clusterTerminatedEvent.getAppId();
      String clusterId=clusterTerminatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Terminated);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationUndeployedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationUndeployedEvent applicationUndeployedEvent=(ApplicationUndeployedEvent)event;
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(applicationUndeployedEvent.getApplicationId());
      Set<ClusterDataHolder> clusterDataHolders=applicationUndeployedEvent.getClusterData();
      if (clusterDataHolders != null) {
        for (        ClusterDataHolder clusterDataHolder : clusterDataHolders) {
          ClusterMonitor clusterMonitor=((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterDataHolder.getClusterId()));
          if (clusterMonitor == null) {
            ClusterStatusEventPublisher.sendClusterTerminatedEvent(applicationUndeployedEvent.getApplicationId(),clusterDataHolder.getServiceType(),clusterDataHolder.getClusterId());
          }
 else {
            clusterMonitor.setDestroyed(true);
          }
        }
      }
      if (appMonitor != null) {
        appMonitor.setStatus(ApplicationStatus.Terminating);
      }
 else {
        ApplicationsEventPublisher.sendApplicationTerminatedEvent(applicationUndeployedEvent.getApplicationId(),applicationUndeployedEvent.getClusterData());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationHolder.acquireReadLock();
        try {
          Applications applications=ApplicationHolder.getApplications();
          if (applications != null) {
            for (            Application application : applications.getApplications().values()) {
              if (allClustersInitialized(application)) {
                startApplicationMonitor(application.getUniqueIdentifier());
              }
 else {
                log.error(""String_Node_Str"" + ""String_Node_Str"");
              }
            }
            topologyInitialized=true;
          }
 else {
            log.info(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationClustersCreatedEvent applicationClustersCreatedEvent=(ApplicationClustersCreatedEvent)event;
        String appId=applicationClustersCreatedEvent.getAppId();
        try {
          ApplicationHolder.acquireReadLock();
          startApplicationMonitor(appId);
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          ApplicationHolder.releaseReadLock();
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
      String clusterId=clusterCreatedEvent.getCluster().getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStop(true);
      clusterMonitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String appId=clusterInactivateEvent.getAppId();
      String clusterId=clusterInactivateEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Inactive);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        if (clusterMonitor.getStatus() == ClusterStatus.Active) {
          clusterMonitor.setStatus(ClusterStatus.Terminating);
          InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
        }
 else {
          clusterMonitor.setStatus(ClusterStatus.Terminating);
          clusterMonitor.terminateAllMembers();
        }
      }
 else {
        log.warn(""String_Node_Str"" + clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String appId=clusterTerminatedEvent.getAppId();
      String clusterId=clusterTerminatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Terminated);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}",0.9566642503703237
116381,"public String[] getApplicationResourcePaths(){
  Object obj=retrieve(AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.APPLICATIONS_RESOURCE);
  if (obj != null) {
    if (obj instanceof String[]) {
      return (String[])obj;
    }
 else {
      log.warn(""String_Node_Str"");
      return null;
    }
  }
  return null;
}","public String[] getApplicationResourcePaths(){
  PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
  ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
  Object obj=retrieve(AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.APPLICATIONS_RESOURCE);
  if (obj != null) {
    if (obj instanceof String[]) {
      return (String[])obj;
    }
 else {
      log.warn(""String_Node_Str"");
      return null;
    }
  }
  return null;
}",0.7585421412300684
116382,"/** 
 * Persist an object in the local registry.
 * @param dataObj object to be persisted.
 * @param resourcePath resource path to be persisted.
 */
private void persist(Object dataObj,String resourcePath) throws AutoScalerException {
  try {
    registryService.beginTransaction();
    Resource nodeResource=registryService.newResource();
    nodeResource.setContent(Serializer.serializeToByteArray(dataObj));
    registryService.put(resourcePath,nodeResource);
    registryService.commitTransaction();
  }
 catch (  Exception e) {
    try {
      registryService.rollbackTransaction();
    }
 catch (    RegistryException e1) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"",e);
      }
    }
    throw new AutoScalerException(""String_Node_Str"",e);
  }
}","/** 
 * Persist an object in the local registry.
 * @param dataObj object to be persisted.
 * @param resourcePath resource path to be persisted.
 */
private void persist(Object dataObj,String resourcePath) throws AutoScalerException {
  PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
  ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
  try {
    registryService.beginTransaction();
    Resource nodeResource=registryService.newResource();
    nodeResource.setContent(Serializer.serializeToByteArray(dataObj));
    registryService.put(resourcePath,nodeResource);
    registryService.commitTransaction();
  }
 catch (  Exception e) {
    try {
      registryService.rollbackTransaction();
    }
 catch (    RegistryException e1) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"",e);
      }
    }
    throw new AutoScalerException(""String_Node_Str"",e);
  }
}",0.880225988700565
116383,"public void persistApplication(Application application){
  String resourcePath=AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.APPLICATIONS_RESOURCE + ""String_Node_Str""+ application.getUniqueIdentifier();
  persist(application,resourcePath);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
  }
}","public void persistApplication(Application application){
  PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
  ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
  String resourcePath=AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.APPLICATIONS_RESOURCE + ""String_Node_Str""+ application.getUniqueIdentifier();
  persist(application,resourcePath);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
  }
}",0.7823408624229979
116384,"@Override public void init(){
  log.info(""String_Node_Str"");
}","@Override public void init(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}",0.7577639751552795
116385,"public static synchronized void handleCompleteApplication(Applications applications){
  log.info(""String_Node_Str"");
  ApplicationHolder.acquireReadLock();
  try {
    ApplicationsEventPublisher.sendCompleteApplicationsEvent(applications);
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
}","public static synchronized void handleCompleteApplication(Applications applications){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ApplicationHolder.acquireReadLock();
  try {
    ApplicationsEventPublisher.sendCompleteApplicationsEvent(applications);
  }
  finally {
    ApplicationHolder.releaseReadLock();
  }
}",0.9204368174726988
116386,"public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException {
  handleNullObject(cartridgeConfig,""String_Node_Str"");
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + cartridgeConfig.toString());
  }
  Cartridge cartridge=null;
  try {
    cartridge=CloudControllerUtil.toCartridge(cartridgeConfig);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str""+ e.getMessage();
    LOG.error(msg,e);
    throw new InvalidCartridgeDefinitionException(msg,e);
  }
  List<IaasProvider> iaases=cartridge.getIaases();
  if (!StratosConstants.KUBERNETES_DEPLOYER_TYPE.equals(cartridge.getDeployerType())) {
    if (iaases == null || iaases.isEmpty()) {
      String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str"";
      LOG.error(msg);
      throw new InvalidCartridgeDefinitionException(msg);
    }
    if (iaases == null || iaases.isEmpty()) {
      String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str"";
      LOG.error(msg);
      throw new InvalidCartridgeDefinitionException(msg);
    }
    for (    IaasProvider iaasProvider : iaases) {
      CloudControllerUtil.getIaas(iaasProvider);
    }
    String cartridgeType=cartridge.getType();
    if (dataHolder.getCartridge(cartridgeType) != null) {
      Cartridge cartridgeToBeRemoved=dataHolder.getCartridge(cartridgeType);
      try {
        undeployCartridgeDefinition(cartridgeToBeRemoved.getType());
      }
 catch (      InvalidCartridgeTypeException e) {
      }
      populateNewCartridge(cartridge,cartridgeToBeRemoved);
    }
    dataHolder.addCartridge(cartridge);
    persist();
    List<Cartridge> cartridgeList=new ArrayList<Cartridge>();
    cartridgeList.add(cartridge);
    TopologyBuilder.handleServiceCreated(cartridgeList);
    LOG.info(""String_Node_Str"" + cartridgeType);
  }
}","public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException {
  handleNullObject(cartridgeConfig,""String_Node_Str"");
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + cartridgeConfig.toString());
  }
  Cartridge cartridge=null;
  try {
    cartridge=CloudControllerUtil.toCartridge(cartridgeConfig);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str""+ e.getMessage();
    LOG.error(msg,e);
    throw new InvalidCartridgeDefinitionException(msg,e);
  }
  List<IaasProvider> iaases=cartridge.getIaases();
  if (!StratosConstants.KUBERNETES_DEPLOYER_TYPE.equals(cartridge.getDeployerType())) {
    if (iaases == null || iaases.isEmpty()) {
      String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str"";
      LOG.error(msg);
      throw new InvalidCartridgeDefinitionException(msg);
    }
    if (iaases == null || iaases.isEmpty()) {
      String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str"";
      LOG.error(msg);
      throw new InvalidCartridgeDefinitionException(msg);
    }
    for (    IaasProvider iaasProvider : iaases) {
      CloudControllerUtil.getIaas(iaasProvider);
    }
  }
  String cartridgeType=cartridge.getType();
  if (dataHolder.getCartridge(cartridgeType) != null) {
    Cartridge cartridgeToBeRemoved=dataHolder.getCartridge(cartridgeType);
    try {
      undeployCartridgeDefinition(cartridgeToBeRemoved.getType());
    }
 catch (    InvalidCartridgeTypeException e) {
    }
    populateNewCartridge(cartridge,cartridgeToBeRemoved);
  }
  dataHolder.addCartridge(cartridge);
  persist();
  List<Cartridge> cartridgeList=new ArrayList<Cartridge>();
  cartridgeList.add(cartridge);
  TopologyBuilder.handleServiceCreated(cartridgeList);
  LOG.info(""String_Node_Str"" + cartridgeType);
}",0.9849350649350648
116387,"private void addEventListeners(){
  statusEventReceiver.addEventListener(new ClusterStatusClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterCreated((ClusterStatusClusterResettedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterActivatedEvent((ClusterStatusClusterActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatedEvent((ClusterStatusClusterTerminatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatingEvent((ClusterStatusClusterTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterInactivateEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterInActivateEvent((ClusterStatusClusterInactivateEvent)event);
    }
  }
);
}","private void addEventListeners(){
  statusEventReceiver.addEventListener(new ClusterStatusClusterResetEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterCreated((ClusterStatusClusterResettedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterCreated((ClusterStatusClusterResettedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterActivatedEvent((ClusterStatusClusterActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatedEvent((ClusterStatusClusterTerminatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatingEvent((ClusterStatusClusterTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new ClusterStatusClusterInactivateEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterInActivateEvent((ClusterStatusClusterInactivateEvent)event);
    }
  }
);
}",0.6189294576391351
116388,"public static void sendClusterCreatedEvent(String appId,String serviceName,String clusterId){
}","public static void sendClusterCreatedEvent(Cluster cluster){
  ClusterCreatedEvent clusterCreatedEvent=new ClusterCreatedEvent(cluster);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + cluster.getClusterId());
  }
  publishEvent(clusterCreatedEvent);
}",0.2880886426592798
116389,"public Cluster(String serviceName,String clusterId,String deploymentPolicyName,String autoscalePolicyName,String appId){
  this.serviceName=serviceName;
  this.clusterId=clusterId;
  this.deploymentPolicyName=deploymentPolicyName;
  this.autoscalePolicyName=autoscalePolicyName;
  this.hostNames=new ArrayList<String>();
  this.memberMap=new HashMap<String,Member>();
  this.appId=appId;
  this.clusterStateManager=new LifeCycleStateManager<ClusterStatus>(ClusterStatus.Created,clusterId);
}","public Cluster(String serviceName,String clusterId,String deploymentPolicyName,String autoscalePolicyName,String appId){
  this.serviceName=serviceName;
  this.clusterId=clusterId;
  this.deploymentPolicyName=deploymentPolicyName;
  this.autoscalePolicyName=autoscalePolicyName;
  this.setHostNames(new ArrayList<String>());
  this.memberMap=new HashMap<String,Member>();
  this.appId=appId;
  this.clusterStateManager=new LifeCycleStateManager<ClusterStatus>(ClusterStatus.Created,clusterId);
}",0.9756592292089248
116390,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminated) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInActiveMonitorsMap.containsKey(id)) {
      this.aliasToInActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status != ApplicationStatus.Terminating || this.status != ApplicationStatus.Terminated) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInActiveMonitorsMap.containsKey(id)) {
      this.aliasToInActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == ApplicationStatus.Terminating || this.status == ApplicationStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
}",0.9506810709253172
116391,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminated) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInActiveMonitorsMap.containsKey(id)) {
      this.aliasToInActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status != GroupStatus.Terminating || this.status != GroupStatus.Terminated) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInActiveMonitorsMap.containsKey(id)) {
      this.aliasToInActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status == GroupStatus.Terminating || this.status == GroupStatus.Terminated) {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
 else {
      onChildTerminatedEvent(id);
    }
  }
}",0.9501187648456056
116392,"/** 
 * Executing the commands. Returns a code
 * @param context The context assoicated with the Command Line Application
 * @param args The arguments for the command
 * @param already_parsed_opts Options parsed by any parent parsers.
 * @return The status code
 * @throws org.apache.stratos.cli.exception.CommandException if any errors occur when executing the command
 */
int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException ;","/** 
 * Executing the commands. Returns a code
 * @param context The context assoicated with the Command Line Application
 * @param args The arguments for the command
 * @return The status code
 * @throws org.apache.stratos.cli.exception.CommandException if any errors occur when executing the command
 */
int execute(T context,String[] args) throws CommandException ;",0.5228604923798359
116393,"@Override public int run(String[] args){
  boolean loaded=loadRequiredProperties();
  if (!loaded) {
    return CliConstants.ERROR_CODE;
  }
  String[] remainingArgs=null;
  String action=null;
  Option[] actionOptions=null;
  String usernameInput=null;
  String passwordInput=null;
  if (args != null && args.length > 0) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
      for (      String arg : args) {
        logger.debug(arg);
      }
    }
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      Options allCommandOptions=new Options();
      for (      Command<StratosCommandContext> command : commands.values()) {
        Options commandOptions=command.getOptions();
        if (commandOptions != null) {
          Collection<?> allOptions=commandOptions.getOptions();
          for (          Object o : allOptions) {
            allCommandOptions.addOption((Option)o);
          }
        }
      }
      Collection<?> allOptions=options.getOptions();
      for (      Object o : allOptions) {
        allCommandOptions.addOption((Option)o);
      }
      commandLine=parser.parse(options,args,true);
      remainingArgs=commandLine.getArgs();
      actionOptions=commandLine.getOptions();
      if (remainingArgs != null && remainingArgs.length > 0) {
        action=remainingArgs[0];
      }
      setLoggerLevel(commandLine.hasOption(CliConstants.TRACE_OPTION),commandLine.hasOption(CliConstants.DEBUG_OPTION));
      if (commandLine.hasOption(CliConstants.USERNAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        usernameInput=commandLine.getOptionValue(CliConstants.USERNAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.PASSWORD_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        passwordInput=commandLine.getOptionValue(CliConstants.PASSWORD_OPTION);
      }
      if (commandLine.hasOption(CliConstants.HELP_ACTION)) {
        printHelp();
        return CliConstants.COMMAND_SUCCESSFULL;
      }
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.COMMAND_FAILED;
    }
  }
  if (StringUtils.isNotBlank(action)) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",action);
    }
    Command<StratosCommandContext> command=commands.get(action);
    if (command == null) {
      printHelp();
      return CliConstants.COMMAND_FAILED;
    }
    boolean loginRequired=!CliConstants.HELP_ACTION.equals(action);
    if (loginRequired && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    if (loginRequired && !login(usernameInput,passwordInput,false)) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",action);
      }
      return CliConstants.ERROR_CODE;
    }
    try {
      String[] actionArgs=Arrays.copyOfRange(remainingArgs,1,remainingArgs.length);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",action,Arrays.asList(actionArgs));
      }
      int returnCode=command.execute(context,actionArgs,actionOptions);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",returnCode,action);
      }
      System.exit(returnCode);
    }
 catch (    CommandException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"" + action,e);
      }
      return CliConstants.ERROR_CODE;
    }
  }
 else {
    if (login(usernameInput,passwordInput,true)) {
      System.out.println(""String_Node_Str"");
    }
 else {
      return CliConstants.ERROR_CODE;
    }
    promptLoop();
  }
  return CliConstants.COMMAND_SUCCESSFULL;
}","@Override public int run(String[] args){
  boolean loaded=loadRequiredProperties();
  if (!loaded) {
    return CliConstants.ERROR_CODE;
  }
  String[] remainingArgs=null;
  String action=null;
  String usernameInput=null;
  String passwordInput=null;
  if (args != null && args.length > 0) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
      for (      String arg : args) {
        logger.debug(arg);
      }
    }
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      Options allCommandOptions=new Options();
      for (      Command<StratosCommandContext> command : commands.values()) {
        Options commandOptions=command.getOptions();
        if (commandOptions != null) {
          Collection<?> allOptions=commandOptions.getOptions();
          for (          Object o : allOptions) {
            allCommandOptions.addOption((Option)o);
          }
        }
      }
      Collection<?> allOptions=options.getOptions();
      for (      Object o : allOptions) {
        allCommandOptions.addOption((Option)o);
      }
      commandLine=parser.parse(options,args,true);
      remainingArgs=commandLine.getArgs();
      if (remainingArgs != null && remainingArgs.length > 0) {
        action=remainingArgs[0];
      }
      setLoggerLevel(commandLine.hasOption(CliConstants.TRACE_OPTION),commandLine.hasOption(CliConstants.DEBUG_OPTION));
      if (commandLine.hasOption(CliConstants.USERNAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        usernameInput=commandLine.getOptionValue(CliConstants.USERNAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.PASSWORD_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        passwordInput=commandLine.getOptionValue(CliConstants.PASSWORD_OPTION);
      }
      if (commandLine.hasOption(CliConstants.HELP_ACTION)) {
        printHelp();
        return CliConstants.COMMAND_SUCCESSFULL;
      }
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.COMMAND_FAILED;
    }
  }
  if (StringUtils.isNotBlank(action)) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",action);
    }
    Command<StratosCommandContext> command=commands.get(action);
    if (command == null) {
      printHelp();
      return CliConstants.COMMAND_FAILED;
    }
    boolean loginRequired=!CliConstants.HELP_ACTION.equals(action);
    if (loginRequired && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    if (loginRequired && !login(usernameInput,passwordInput,false)) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",action);
      }
      return CliConstants.ERROR_CODE;
    }
    try {
      String[] actionArgs=Arrays.copyOfRange(remainingArgs,1,remainingArgs.length);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",action,Arrays.asList(actionArgs));
      }
      int returnCode=command.execute(context,actionArgs);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",returnCode,action);
      }
      System.exit(returnCode);
    }
 catch (    CommandException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"" + action,e);
      }
      return CliConstants.ERROR_CODE;
    }
  }
 else {
    if (login(usernameInput,passwordInput,true)) {
      System.out.println(""String_Node_Str"");
    }
 else {
      return CliConstants.ERROR_CODE;
    }
    promptLoop();
  }
  return CliConstants.COMMAND_SUCCESSFULL;
}",0.987999472504286
116394,"@Override protected int executeCommand(String line){
  String[] tokens=new StrTokenizer(line).getTokenArray();
  String action=tokens[0];
  String[] actionArgs=Arrays.copyOfRange(tokens,1,tokens.length);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",action,tokens.length);
  }
  Command<StratosCommandContext> command=commands.get(action);
  if (command == null) {
    System.out.println(action + ""String_Node_Str"");
    return CliConstants.COMMAND_FAILED;
  }
  try {
    return command.execute(context,actionArgs,new Option[0]);
  }
 catch (  CommandException e) {
    if (logger.isErrorEnabled()) {
      logger.error(""String_Node_Str"" + action,e);
    }
    return CliConstants.ERROR_CODE;
  }
}","@Override protected int executeCommand(String line){
  String[] tokens=new StrTokenizer(line).getTokenArray();
  String action=tokens[0];
  String[] actionArgs=Arrays.copyOfRange(tokens,1,tokens.length);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",action,tokens.length);
  }
  Command<StratosCommandContext> command=commands.get(action);
  if (command == null) {
    System.out.println(action + ""String_Node_Str"");
    return CliConstants.COMMAND_FAILED;
  }
  try {
    return command.execute(context,actionArgs);
  }
 catch (  CommandException e) {
    if (logger.isErrorEnabled()) {
      logger.error(""String_Node_Str"" + action,e);
    }
    return CliConstants.ERROR_CODE;
  }
}",0.9901960784313726
116395,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().activateTenant(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().activateTenant(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9744942832014072
116396,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 2) {
    String alias=args[0];
    String domain=args[1];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",domain,alias);
    }
    String domainToDisplay=null;
    domainToDisplay=CommandLineService.getInstance().addDomainMapping(domain,alias);
    if (StringUtils.isBlank(domainToDisplay)) {
      System.out.println(""String_Node_Str"");
      return CliConstants.COMMAND_FAILED;
    }
 else {
      System.out.format(""String_Node_Str"",domainToDisplay);
      return CliConstants.COMMAND_SUCCESSFULL;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 2) {
    String alias=args[0];
    String domain=args[1];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",domain,alias);
    }
    String domainToDisplay=null;
    domainToDisplay=CommandLineService.getInstance().addDomainMapping(domain,alias);
    if (StringUtils.isBlank(domainToDisplay)) {
      System.out.println(""String_Node_Str"");
      return CliConstants.COMMAND_FAILED;
    }
 else {
      System.out.format(""String_Node_Str"",domainToDisplay);
      return CliConstants.COMMAND_SUCCESSFULL;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.98356940509915
116397,"public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length > 0) {
    String admin=null;
    String firstName=null;
    String lastaName=null;
    String password=null;
    String domain=null;
    String email=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      Options opts=mergeOptionArrays(already_parsed_opts,commandLine.getOptions());
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (opts.hasOption(CliConstants.USERNAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        admin=opts.getOption(CliConstants.USERNAME_OPTION).getValue();
      }
      if (opts.hasOption(CliConstants.FIRST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        firstName=opts.getOption(CliConstants.FIRST_NAME_OPTION).getValue();
      }
      if (opts.hasOption(CliConstants.LAST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        lastaName=opts.getOption(CliConstants.LAST_NAME_OPTION).getValue();
      }
      if (opts.hasOption(CliConstants.PASSWORD_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        password=opts.getOption(CliConstants.PASSWORD_OPTION).getValue();
      }
      if (opts.hasOption(CliConstants.DOMAIN_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        domain=opts.getOption(CliConstants.DOMAIN_NAME_OPTION).getValue();
      }
      if (opts.hasOption(CliConstants.EMAIL_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        email=opts.getOption(CliConstants.EMAIL_OPTION).getValue();
      }
      if (admin == null || firstName == null || lastaName == null || password == null || domain == null || email == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.COMMAND_FAILED;
      }
      RestCommandLineService.getInstance().addTenant(admin,firstName,lastaName,password,domain,email);
      return CliConstants.COMMAND_SUCCESSFULL;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.COMMAND_FAILED;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length > 0) {
    String admin=null;
    String firstName=null;
    String lastaName=null;
    String password=null;
    String domain=null;
    String email=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.USERNAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        admin=commandLine.getOptionValue(CliConstants.USERNAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.FIRST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        firstName=commandLine.getOptionValue(CliConstants.FIRST_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.LAST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        lastaName=commandLine.getOptionValue(CliConstants.LAST_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.PASSWORD_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        password=commandLine.getOptionValue(CliConstants.PASSWORD_OPTION);
      }
      if (commandLine.hasOption(CliConstants.DOMAIN_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        domain=commandLine.getOptionValue(CliConstants.DOMAIN_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.EMAIL_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        email=commandLine.getOptionValue(CliConstants.EMAIL_OPTION);
      }
      if (admin == null || firstName == null || lastaName == null || password == null || domain == null || email == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.COMMAND_FAILED;
      }
      RestCommandLineService.getInstance().addTenant(admin,firstName,lastaName,password,domain,email);
      return CliConstants.COMMAND_SUCCESSFULL;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.COMMAND_FAILED;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.8850759606791778
116398,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().deactivateTenant(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().deactivateTenant(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9745836985100788
116399,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().deleteTenant(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().deleteTenant(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9744042365401588
116400,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describeAutoScalingPolicy(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describeAutoScalingPolicy(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9749784296807592
116401,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describeAvailableCartridges(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describeAvailableCartridges(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9750644883920896
116402,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describeDeploymentPolicy(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describeDeploymentPolicy(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9749351771823682
116403,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describePartition(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String id=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",id);
    }
    RestCommandLineService.getInstance().describePartition(id);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9746281714785652
116404,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9638854296388544
116405,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    context.getStratosApplication().printHelp();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else   if (args != null && args.length == 1) {
    context.getStratosApplication().printHelp(args[0]);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    context.getStratosApplication().printHelp();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else   if (args != null && args.length == 1) {
    context.getStratosApplication().printHelp(args[0]);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.975973487986744
116406,"@Override public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String alias=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",alias);
    }
    CommandLineService.getInstance().info(alias);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","@Override public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length == 1) {
    String alias=args[0];
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",alias);
    }
    CommandLineService.getInstance().info(alias);
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.974267968056788
116407,"public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    RestCommandLineService.getInstance().listAllTenants();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    RestCommandLineService.getInstance().listAllTenants();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9678135405105438
116408,"public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    RestCommandLineService.getInstance().listCartridges();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    RestCommandLineService.getInstance().listCartridges();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.9678135405105438
116409,"public int execute(StratosCommandContext context,String[] args,Option[] already_parsed_opts) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    RestCommandLineService.getInstance().listServices();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args == null || args.length == 0) {
    RestCommandLineService.getInstance().listServices();
    return CliConstants.COMMAND_SUCCESSFULL;
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.COMMAND_FAILED;
  }
}",0.967670011148272
116410,"public PartitionContext(Partition partition){
  this.setPartition(partition);
  this.minimumMemberCount=partition.getPartitionMin();
  this.partitionId=partition.getId();
  this.pendingMembers=new ArrayList<MemberContext>();
  this.activeMembers=new ArrayList<MemberContext>();
  this.terminationPendingMembers=new ArrayList<MemberContext>();
  this.obsoletedMembers=new CopyOnWriteArrayList<String>();
  memberStatsContexts=new ConcurrentHashMap<String,MemberStatsContext>();
  XMLConfiguration conf=ConfUtil.getInstance(null).getConfiguration();
  expiryTime=conf.getLong(""String_Node_Str"",900000);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + expiryTime);
  }
  Thread th=new Thread(new PendingMemberWatcher(this));
  th.start();
}","public PartitionContext(Partition partition){
  this.setPartition(partition);
  this.minimumMemberCount=partition.getPartitionMin();
  this.partitionId=partition.getId();
  this.pendingMembers=new CopyOnWriteArrayList<MemberContext>();
  this.activeMembers=new CopyOnWriteArrayList<MemberContext>();
  this.terminationPendingMembers=new CopyOnWriteArrayList<MemberContext>();
  this.obsoletedMembers=new CopyOnWriteArrayList<String>();
  memberStatsContexts=new ConcurrentHashMap<String,MemberStatsContext>();
  XMLConfiguration conf=ConfUtil.getInstance(null).getConfiguration();
  expiryTime=conf.getLong(""String_Node_Str"",900000);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + expiryTime);
  }
  Thread th=new Thread(new PendingMemberWatcher(this));
  th.start();
}",0.9785575048732944
116411,"public void setStatus(ClusterStatus status){
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId,this.status,status));
  this.status=status;
  if (status == ClusterStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (status == ClusterStatus.Terminating) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,this.status,this.clusterId);
  }
}","public void setStatus(ClusterStatus status){
  this.status=status;
  if (status == ClusterStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (status == ClusterStatus.Terminating) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,this.status,this.clusterId);
  }
}",0.9076773566569484
116412,"/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status
 */
public void setStatus(GroupStatus status){
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",id,this.status,status));
  this.status=status;
  if (status == GroupStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (status == GroupStatus.Terminating) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,this.status,this.id);
  }
  MonitorStatusEventBuilder.notifyChildren(this.parent,new GroupStatusEvent(status,getId()));
}","/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status
 */
public void setStatus(GroupStatus status){
  this.status=status;
  if (status == GroupStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (status == GroupStatus.Terminating) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,this.status,this.id);
  }
  MonitorStatusEventBuilder.notifyChildren(this.parent,new GroupStatusEvent(status,getId()));
}",0.9377652050919376
116413,"public boolean isSubscriptionDomainValid(String domainName) throws ADCException {
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",domainName));
    }
    org.wso2.carbon.user.core.tenant.TenantManager tenantManager=DataHolder.getRealmService().getTenantManager();
    org.wso2.carbon.user.api.Tenant[] tenants=tenantManager.getAllTenants();
    if ((tenants != null) && (tenants.length > 0)) {
      DataInsertionAndRetrievalManager manager=new DataInsertionAndRetrievalManager();
      for (      org.wso2.carbon.user.api.Tenant tenant : tenants) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",tenant.getId(),tenant.getDomain()));
        }
        Collection<CartridgeSubscription> subscriptions=manager.getCartridgeSubscriptions(tenant.getId());
        if (subscriptions == null) {
          continue;
        }
        for (        CartridgeSubscription subscription : subscriptions) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",subscription.getAlias(),subscription.getSubscriptionDomains()));
          }
          if (subscription.subscriptionDomainExists(domainName)) {
            return false;
          }
        }
      }
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",domainName));
    }
    return true;
  }
 catch (  Exception e) {
    String errorMsg=""String_Node_Str"" + domainName;
    log.error(errorMsg);
    throw new ADCException(errorMsg,e);
  }
}","public static boolean isSubscriptionDomainValid(String domainName) throws ADCException {
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",domainName));
    }
    org.wso2.carbon.user.core.tenant.TenantManager tenantManager=DataHolder.getRealmService().getTenantManager();
    org.wso2.carbon.user.api.Tenant[] tenants=tenantManager.getAllTenants();
    if ((tenants != null) && (tenants.length > 0)) {
      DataInsertionAndRetrievalManager manager=new DataInsertionAndRetrievalManager();
      for (      org.wso2.carbon.user.api.Tenant tenant : tenants) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",tenant.getId(),tenant.getDomain()));
        }
        Collection<CartridgeSubscription> subscriptions=manager.getCartridgeSubscriptions(tenant.getId());
        if (subscriptions == null) {
          continue;
        }
        for (        CartridgeSubscription subscription : subscriptions) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",subscription.getAlias(),subscription.getSubscriptionDomains()));
          }
          if (subscription.subscriptionDomainExists(domainName)) {
            return false;
          }
        }
      }
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",domainName));
    }
    return true;
  }
 catch (  Exception e) {
    String errorMsg=""String_Node_Str"" + domainName;
    log.error(errorMsg);
    throw new ADCException(errorMsg,e);
  }
}",0.9977324263038548
116414,"private Properties getPersistenceMappingProperties(PersistenceContext persistenceCtxt,CartridgeInfo cartridgeInfo) throws ADCException {
  if (!cartridgeInfo.isPersistenceSpecified()) {
    String errorMsg=""String_Node_Str"" + cartridgeInfo.getType();
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  Properties persistenceMappingProperties=new Properties();
  persistenceMappingProperties.setProperties(new Property[]{persistenceCtxt.getPersistanceRequiredProperty(),persistenceCtxt.getSizeProperty(),persistenceCtxt.getDeleteOnTerminationProperty(),persistenceCtxt.getVolumeIdProperty()});
  return persistenceMappingProperties;
}","private static Properties getPersistenceMappingProperties(PersistenceContext persistenceCtxt,CartridgeInfo cartridgeInfo) throws ADCException {
  if (!cartridgeInfo.isPersistenceSpecified()) {
    String errorMsg=""String_Node_Str"" + cartridgeInfo.getType();
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  Properties persistenceMappingProperties=new Properties();
  persistenceMappingProperties.setProperties(new Property[]{persistenceCtxt.getPersistanceRequiredProperty(),persistenceCtxt.getSizeProperty(),persistenceCtxt.getDeleteOnTerminationProperty(),persistenceCtxt.getVolumeIdProperty()});
  return persistenceMappingProperties;
}",0.9946524064171124
116415,"public CartridgeSubscription getCartridgeSubscription(int tenantId,String subscriptionAlias){
  return new DataInsertionAndRetrievalManager().getCartridgeSubscription(tenantId,subscriptionAlias);
}","public static CartridgeSubscription getCartridgeSubscription(int tenantId,String subscriptionAlias){
  return new DataInsertionAndRetrievalManager().getCartridgeSubscription(tenantId,subscriptionAlias);
}",0.9825436408977556
116416,"private ClusterStatus getClusterStatus(Map<String,ClusterDataHolder> clusterData){
  ClusterStatus status=null;
  boolean clusterActive=true;
  boolean clusterTerminated=true;
  boolean clusterCreated=true;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    Service service=TopologyManager.getTopology().getService(clusterDataHolderEntry.getValue().getServiceType());
    Cluster cluster=service.getCluster(clusterDataHolderEntry.getValue().getClusterId());
    if (cluster.getStatus() == ClusterStatus.Active) {
      clusterActive=clusterActive && true;
      clusterTerminated=false;
      clusterCreated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Inactive) {
      status=ClusterStatus.Inactive;
      break;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminated) {
      clusterActive=false;
      clusterCreated=false;
      clusterTerminated=clusterTerminated && true;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminating) {
      status=ClusterStatus.Terminating;
      clusterActive=false;
      clusterTerminated=false;
      clusterCreated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Created) {
      clusterActive=false;
      clusterTerminated=false;
      clusterCreated=clusterCreated && true;
    }
  }
  if (clusterActive) {
    status=ClusterStatus.Active;
  }
 else   if (clusterTerminated) {
    status=ClusterStatus.Terminated;
  }
 else   if (clusterCreated) {
    status=ClusterStatus.Created;
  }
  return status;
}","private ClusterStatus getClusterStatus(Map<String,ClusterDataHolder> clusterData){
  ClusterStatus status=null;
  boolean clusterActive=true;
  boolean clusterTerminated=true;
  boolean clusterCreated=true;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    Service service=TopologyManager.getTopology().getService(clusterDataHolderEntry.getValue().getServiceType());
    Cluster cluster=service.getCluster(clusterDataHolderEntry.getValue().getClusterId());
    if (cluster.getStatus() == ClusterStatus.Active) {
      clusterActive=clusterActive && true;
      clusterTerminated=false;
      clusterCreated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Inactive) {
      status=ClusterStatus.Inactive;
      clusterActive=false;
      clusterTerminated=false;
      clusterCreated=false;
      break;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminated) {
      clusterActive=false;
      clusterCreated=false;
      clusterTerminated=clusterTerminated && true;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminating) {
      status=ClusterStatus.Terminating;
      clusterActive=false;
      clusterTerminated=false;
      clusterCreated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Created) {
      clusterActive=false;
      clusterTerminated=false;
      clusterCreated=clusterCreated && true;
    }
  }
  if (clusterActive) {
    status=ClusterStatus.Active;
  }
 else   if (clusterTerminated) {
    status=ClusterStatus.Terminated;
  }
 else   if (clusterCreated) {
    status=ClusterStatus.Created;
  }
  return status;
}",0.9731585518102372
116417,"private GroupStatus getGroupStatus(Map<String,Group> groups){
  GroupStatus status=null;
  boolean groupActive=true;
  boolean groupTerminated=true;
  boolean groupCreated=true;
  for (  Group group : groups.values()) {
    if (group.getStatus() == GroupStatus.Active) {
      groupActive=groupActive && true;
      groupTerminated=false;
      groupCreated=false;
    }
 else     if (group.getStatus() == GroupStatus.Inactive) {
      status=GroupStatus.Inactive;
      break;
    }
 else     if (group.getStatus() == GroupStatus.Terminated) {
      groupActive=false;
      groupCreated=false;
      groupTerminated=groupTerminated && true;
    }
 else     if (group.getStatus() == GroupStatus.Created) {
      groupActive=false;
      groupTerminated=false;
      groupCreated=groupCreated && true;
    }
 else     if (group.getStatus() == GroupStatus.Terminating) {
      groupActive=false;
      groupTerminated=false;
      groupCreated=false;
      status=GroupStatus.Terminating;
    }
  }
  if (groupActive) {
    status=GroupStatus.Active;
  }
 else   if (groupTerminated) {
    status=GroupStatus.Terminated;
  }
 else   if (groupCreated) {
    status=GroupStatus.Created;
  }
  return status;
}","private GroupStatus getGroupStatus(Map<String,Group> groups){
  GroupStatus status=null;
  boolean groupActive=true;
  boolean groupTerminated=true;
  boolean groupCreated=true;
  for (  Group group : groups.values()) {
    if (group.getStatus() == GroupStatus.Active) {
      groupActive=groupActive && true;
      groupTerminated=false;
      groupCreated=false;
    }
 else     if (group.getStatus() == GroupStatus.Inactive) {
      status=GroupStatus.Inactive;
      groupActive=false;
      groupTerminated=false;
      groupCreated=false;
      break;
    }
 else     if (group.getStatus() == GroupStatus.Terminated) {
      groupActive=false;
      groupCreated=false;
      groupTerminated=groupTerminated && true;
    }
 else     if (group.getStatus() == GroupStatus.Created) {
      groupActive=false;
      groupTerminated=false;
      groupCreated=groupCreated && true;
    }
 else     if (group.getStatus() == GroupStatus.Terminating) {
      groupActive=false;
      groupTerminated=false;
      groupCreated=false;
      status=GroupStatus.Terminating;
    }
  }
  if (groupActive) {
    status=GroupStatus.Active;
  }
 else   if (groupTerminated) {
    status=GroupStatus.Terminated;
  }
 else   if (groupCreated) {
    status=GroupStatus.Created;
  }
  return status;
}",0.9036918138041734
116418,"public void setStatus(ClusterStatus status){
  this.status=status;
  if (status == ClusterStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (status == ClusterStatus.Terminating) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,this.status,this.clusterId);
  }
}","public void setStatus(ClusterStatus status){
  this.status=status;
  if (status == ClusterStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId());
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,this.status,this.clusterId);
  }
}",0.8054607508532423
116419,"protected void onChildTerminatedEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  boolean allDependentTerminated=true;
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(idOfEvent);
  context.setTerminated(true);
  terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
  if (terminationList != null) {
    for (    ApplicationContext context1 : terminationList) {
      if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
        log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        allDependentTerminated=false;
      }
 else       if (this.aliasToInActiveMonitorsMap.containsKey(context1.getId())) {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        allDependentTerminated=false;
      }
 else {
        allDependentTerminated=true;
      }
    }
  }
  List<ApplicationContext> parentContexts=this.dependencyTree.findAllParentContextWithId(idOfEvent);
  boolean canStart=false;
  if (parentContexts != null) {
    for (    ApplicationContext context1 : parentContexts) {
      if (this.aliasToInActiveMonitorsMap.containsKey(context1.getId())) {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        canStart=false;
      }
 else       if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
        if (canStart) {
          log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        }
      }
 else {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        canStart=true;
      }
    }
  }
  if ((terminationList != null && allDependentTerminated || terminationList == null) && (parentContexts != null && canStart || parentContexts == null)) {
    try {
      this.startDependencyOnTermination();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    StatusChecker.getInstance().onChildStatusChange(idOfEvent,this.id,this.appId);
    log.info(""String_Node_Str"" + idOfEvent + ""String_Node_Str"");
  }
}","protected void onChildTerminatedEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  boolean allDependentTerminated=true;
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(idOfEvent);
  context.setTerminated(true);
  terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
  if (terminationList != null) {
    allDependentTerminated=allDependentTerminated(terminationList);
  }
  List<ApplicationContext> parentContexts=this.dependencyTree.findAllParentContextWithId(idOfEvent);
  boolean parentsTerminated=false;
  if (parentContexts != null) {
    parentsTerminated=allParentTerminated(parentContexts);
  }
  if ((terminationList != null && allDependentTerminated || terminationList == null) && (parentContexts != null && parentsTerminated || parentContexts == null)) {
    try {
      this.startDependencyOnTermination();
    }
 catch (    TopologyInConsistentException e) {
      log.error(""String_Node_Str"" + e);
    }
  }
 else {
    StatusChecker.getInstance().onChildStatusChange(idOfEvent,this.id,this.appId);
    log.info(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6227581941867656
116420,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != ApplicationStatus.Terminating || this.status != ApplicationStatus.Terminated) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminated) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInActiveMonitorsMap.containsKey(id)) {
      this.aliasToInActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status != ApplicationStatus.Terminating || this.status != ApplicationStatus.Terminated) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.5683530678148547
116421,"@Override public void onParentEvent(MonitorStatusEvent statusEvent){
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    StatusEventPublisher.sendGroupTerminatingEvent(appId,id);
    this.markMonitorAsInactive(id);
  }
}","@Override public void onParentEvent(MonitorStatusEvent statusEvent){
  if (statusEvent.getStatus() == GroupStatus.Terminating || statusEvent.getStatus() == ApplicationStatus.Terminating) {
    StatusEventPublisher.sendGroupTerminatingEvent(appId,id);
  }
}",0.9343065693430656
116422,"@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != GroupStatus.Terminating || this.status != GroupStatus.Terminated) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override public void onChildEvent(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminated) {
    this.markMonitorAsInactive(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    if (this.aliasToInActiveMonitorsMap.containsKey(id)) {
      this.aliasToInActiveMonitorsMap.remove(id);
    }
 else {
      log.warn(""String_Node_Str"" + id + ""String_Node_Str"");
    }
    if (this.status != GroupStatus.Terminating || this.status != GroupStatus.Terminated) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.8451472191930207
116423,"/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status
 */
public void setStatus(GroupStatus status){
  this.status=status;
  if (status == GroupStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (status == GroupStatus.Terminating) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,this.status,this.id);
  }
  MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,getId()));
}","/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status
 */
public void setStatus(GroupStatus status){
  this.status=status;
  if (status == GroupStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ this.parent.getId());
    MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,this.status,this.id);
  }
  MonitorStatusEventBuilder.notifyChildren(this,new GroupStatusEvent(status,getId()));
}",0.9103885804916731
116424,"private ClusterStatus getClusterStatus(Map<String,ClusterDataHolder> clusterData){
  ClusterStatus status=null;
  boolean clusterActive=false;
  boolean clusterTerminated=false;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    Service service=TopologyManager.getTopology().getService(clusterDataHolderEntry.getValue().getServiceType());
    Cluster cluster=service.getCluster(clusterDataHolderEntry.getValue().getClusterId());
    if (cluster.getStatus() == ClusterStatus.Active) {
      clusterActive=true;
      clusterTerminated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Inactive) {
      status=ClusterStatus.Inactive;
      clusterActive=false;
      clusterTerminated=false;
      break;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminated) {
      clusterActive=false;
      clusterTerminated=true;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminating) {
      status=ClusterStatus.Terminating;
      clusterActive=false;
      clusterTerminated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Created) {
      status=ClusterStatus.Created;
      clusterActive=false;
      clusterTerminated=false;
    }
  }
  if (clusterActive) {
    status=ClusterStatus.Active;
  }
 else   if (clusterTerminated) {
    status=ClusterStatus.Terminated;
  }
  return status;
}","private ClusterStatus getClusterStatus(Map<String,ClusterDataHolder> clusterData){
  ClusterStatus status=null;
  boolean clusterActive=true;
  boolean clusterTerminated=true;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    Service service=TopologyManager.getTopology().getService(clusterDataHolderEntry.getValue().getServiceType());
    Cluster cluster=service.getCluster(clusterDataHolderEntry.getValue().getClusterId());
    if (cluster.getStatus() == ClusterStatus.Active) {
      clusterActive=clusterActive && true;
      clusterTerminated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Inactive) {
      status=ClusterStatus.Inactive;
      clusterActive=false;
      clusterTerminated=false;
      break;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminated) {
      clusterActive=false;
      clusterTerminated=clusterTerminated && true;
    }
 else     if (cluster.getStatus() == ClusterStatus.Terminating) {
      status=ClusterStatus.Terminating;
      clusterActive=false;
      clusterTerminated=false;
    }
 else     if (cluster.getStatus() == ClusterStatus.Created) {
      status=ClusterStatus.Created;
      clusterActive=false;
      clusterTerminated=false;
    }
  }
  if (clusterActive) {
    status=ClusterStatus.Active;
  }
 else   if (clusterTerminated) {
    status=ClusterStatus.Terminated;
  }
  return status;
}",0.9815209665955936
116425,"/** 
 * Calculating whether the cluster has all min instances as active and send the ClusterActivatedEvent.
 * @param clusterId id of the cluster
 */
public void onMemberStatusChange(final String clusterId){
  Runnable group=new Runnable(){
    public void run(){
      ClusterMonitor monitor=(ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      boolean clusterActive=false;
      if (monitor != null) {
        clusterActive=clusterActive(monitor);
      }
      log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ clusterActive);
      if (clusterActive) {
        StatusEventPublisher.sendClusterActivatedEvent(monitor.getAppId(),monitor.getServiceId(),monitor.getClusterId());
      }
    }
  }
;
  Thread groupThread=new Thread(group);
  groupThread.start();
}","/** 
 * Calculating whether the cluster has all min instances as active and send the ClusterActivatedEvent.
 * @param clusterId id of the cluster
 */
public void onMemberStatusChange(final String clusterId){
  Runnable group=new Runnable(){
    public void run(){
      ClusterMonitor monitor=(ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      boolean clusterActive=false;
      if (monitor != null) {
        clusterActive=clusterActive(monitor);
      }
      log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ clusterActive);
      if (clusterActive) {
        monitor.setHasFaultyMember(false);
        StatusEventPublisher.sendClusterActivatedEvent(monitor.getAppId(),monitor.getServiceId(),monitor.getClusterId());
      }
    }
  }
;
  Thread groupThread=new Thread(group);
  groupThread.start();
}",0.9737324373854612
116426,"private GroupStatus getGroupStatus(Map<String,Group> groups){
  GroupStatus status=null;
  boolean groupActive=false;
  boolean groupTerminated=false;
  for (  Group group : groups.values()) {
    if (group.getStatus() == GroupStatus.Active) {
      groupActive=true;
      groupTerminated=false;
    }
 else     if (group.getStatus() == GroupStatus.Inactive) {
      status=GroupStatus.Inactive;
      break;
    }
 else     if (group.getStatus() == GroupStatus.Terminated) {
      groupActive=false;
      groupTerminated=true;
    }
 else     if (group.getStatus() == GroupStatus.Created) {
      groupActive=false;
      groupTerminated=false;
      status=GroupStatus.Created;
    }
 else     if (group.getStatus() == GroupStatus.Terminating) {
      groupActive=false;
      groupTerminated=false;
      status=GroupStatus.Terminating;
    }
  }
  if (groupActive) {
    status=GroupStatus.Active;
  }
 else   if (groupTerminated) {
    status=GroupStatus.Terminated;
  }
  return status;
}","private GroupStatus getGroupStatus(Map<String,Group> groups){
  GroupStatus status=null;
  boolean groupActive=true;
  boolean groupTerminated=true;
  for (  Group group : groups.values()) {
    if (group.getStatus() == GroupStatus.Active) {
      groupActive=groupActive && true;
      groupTerminated=false;
    }
 else     if (group.getStatus() == GroupStatus.Inactive) {
      status=GroupStatus.Inactive;
      break;
    }
 else     if (group.getStatus() == GroupStatus.Terminated) {
      groupActive=false;
      groupTerminated=groupTerminated && true;
    }
 else     if (group.getStatus() == GroupStatus.Created) {
      groupActive=false;
      groupTerminated=false;
      status=GroupStatus.Created;
    }
 else     if (group.getStatus() == GroupStatus.Terminating) {
      groupActive=false;
      groupTerminated=false;
      status=GroupStatus.Terminating;
    }
  }
  if (groupActive) {
    status=GroupStatus.Active;
  }
 else   if (groupTerminated) {
    status=GroupStatus.Terminated;
  }
  return status;
}",0.6175889328063241
116427,"/** 
 * This will use to calculate whether  all children of a particular component is active by travesing Top
 * @param appId
 * @param id
 * @param groups
 * @param clusterData
 * @param parent
 * @return
 */
private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean groupActive=false;
  ClusterStatus clusterStatus;
  GroupStatus groupStatus;
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  log.info(""String_Node_Str"" + clusterFound);
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    clusterStatus=getClusterStatus(clusterData);
    groupStatus=getGroupStatus(groups);
    if (groups.isEmpty() && clusterStatus == ClusterStatus.Active || clusterData.isEmpty() && groupStatus == GroupStatus.Active || groupStatus == GroupStatus.Active && clusterStatus == ClusterStatus.Active) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        StatusEventPublisher.sendApplicationActivatedEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupActivatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Inactive || clusterData.isEmpty() && groupStatus == GroupStatus.Inactive || groupStatus == GroupStatus.Inactive && clusterStatus == ClusterStatus.Inactive) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupInActivateEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminated || clusterData.isEmpty() && groupStatus == GroupStatus.Terminated || groupStatus == GroupStatus.Terminated && clusterStatus == ClusterStatus.Terminated) {
      if (parent instanceof Application) {
        try {
          TopologyManager.acquireReadLockForApplication(appId);
          Application application=TopologyManager.getTopology().getApplication(appId);
          if (application.getStatus().equals(ApplicationStatus.Terminating)) {
            log.info(""String_Node_Str"" + appId);
            StatusEventPublisher.sendApplicationTerminatedEvent(appId,parent.getClusterDataRecursively());
          }
 else {
            log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ application.getStatus().toString()+ ""String_Node_Str"");
          }
        }
  finally {
          TopologyManager.releaseReadLockForApplication(appId);
        }
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminating || clusterData.isEmpty() && groupStatus == GroupStatus.Terminating || groupStatus == GroupStatus.Terminating && clusterStatus == ClusterStatus.Terminating) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatingEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    return childFound;
  }
 else {
    log.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getUniqueIdentifier());
  }
  return childFound;
}","/** 
 * This will use to calculate whether  all children of a particular component is active by travesing Top
 * @param appId
 * @param id
 * @param groups
 * @param clusterData
 * @param parent
 * @return
 */
private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean groupsActive=false;
  boolean groupsTerminated=false;
  boolean groupsInActive=false;
  boolean groupsTerminating=false;
  ClusterStatus clusterStatus;
  GroupStatus groupStatus;
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  log.info(""String_Node_Str"" + clusterFound);
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    clusterStatus=getClusterStatus(clusterData);
    groupStatus=getGroupStatus(groups);
    if (groups.isEmpty() && clusterStatus == ClusterStatus.Active || clusterData.isEmpty() && groupStatus == GroupStatus.Active || groupStatus == GroupStatus.Active && clusterStatus == ClusterStatus.Active) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        StatusEventPublisher.sendApplicationActivatedEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupActivatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Inactive || clusterData.isEmpty() && groupStatus == GroupStatus.Inactive || groupStatus == GroupStatus.Inactive && clusterStatus == ClusterStatus.Inactive) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupInActivateEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminated || clusterData.isEmpty() && groupStatus == GroupStatus.Terminated || groupStatus == GroupStatus.Terminated && clusterStatus == ClusterStatus.Terminated) {
      if (parent instanceof Application) {
        try {
          TopologyManager.acquireReadLockForApplication(appId);
          Application application=TopologyManager.getTopology().getApplication(appId);
          if (application.getStatus().equals(ApplicationStatus.Terminating)) {
            log.info(""String_Node_Str"" + appId);
            StatusEventPublisher.sendApplicationTerminatedEvent(appId,parent.getClusterDataRecursively());
          }
 else {
            log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ application.getStatus().toString()+ ""String_Node_Str"");
          }
        }
  finally {
          TopologyManager.releaseReadLockForApplication(appId);
        }
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminating || clusterData.isEmpty() && groupStatus == GroupStatus.Terminating || groupStatus == GroupStatus.Terminating && clusterStatus == ClusterStatus.Terminating) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatingEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    return childFound;
  }
 else {
    log.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getUniqueIdentifier());
  }
  return childFound;
}",0.9871374527112232
116428,"/** 
 * Validates terminationBehavior. The terminationBehavior should be one of the following: 1. terminate-none 2. terminate-dependents 3. terminate-all
 * @throws ApplicationDefinitionException if terminationBehavior is different to what islisted above
 */
private static void validateTerminationBehavior(String terminationBehavior) throws ApplicationDefinitionException {
  if (terminationBehavior != null && terminationBehavior != ""String_Node_Str"" && terminationBehavior != ""String_Node_Str"" && terminationBehavior != ""String_Node_Str"") {
    throw new ApplicationDefinitionException(""String_Node_Str"" + terminationBehavior + ""String_Node_Str""+ ""String_Node_Str"");
  }
}","/** 
 * Validates terminationBehavior. The terminationBehavior should be one of the following: 1. terminate-none 2. terminate-dependents 3. terminate-all
 * @throws ApplicationDefinitionException if terminationBehavior is different to what islisted above
 */
private static void validateTerminationBehavior(String terminationBehavior) throws ApplicationDefinitionException {
  if (!(terminationBehavior == null || ""String_Node_Str"".equals(terminationBehavior) || ""String_Node_Str"".equals(terminationBehavior) || ""String_Node_Str"".equals(terminationBehavior))) {
    throw new ApplicationDefinitionException(""String_Node_Str"" + terminationBehavior + ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.8450292397660819
116429,"/** 
 * Validates terminationBehavior. The terminationBehavior should be one of the following: 1. terminate-none 2. terminate-dependents 3. terminate-all
 * @throws ServiceGroupDefinitioException if terminationBehavior is different to what islisted above
 */
private static void validateTerminationBehavior(String terminationBehavior) throws ServiceGroupDefinitioException {
  if (terminationBehavior != null && terminationBehavior != ""String_Node_Str"" && terminationBehavior != ""String_Node_Str"" && terminationBehavior != ""String_Node_Str"") {
    throw new ServiceGroupDefinitioException(""String_Node_Str"" + terminationBehavior + ""String_Node_Str""+ ""String_Node_Str"");
  }
}","/** 
 * Validates terminationBehavior. The terminationBehavior should be one of the following: 1. terminate-none 2. terminate-dependents 3. terminate-all
 * @throws ServiceGroupDefinitioException if terminationBehavior is different to what islisted above
 */
private static void validateTerminationBehavior(String terminationBehavior) throws ServiceGroupDefinitioException {
  if (!(terminationBehavior == null || ""String_Node_Str"".equals(terminationBehavior) || ""String_Node_Str"".equals(terminationBehavior) || ""String_Node_Str"".equals(terminationBehavior))) {
    throw new ServiceGroupDefinitioException(""String_Node_Str"" + terminationBehavior + ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.8377192982456141
116430,"public static void sendGroupTerminatingEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  AppStatusGroupTerminatingEvent groupInTerminatingEvent=new AppStatusGroupTerminatingEvent(appId,groupId);
  publishEvent(groupInTerminatingEvent);
}","public static void sendGroupTerminatingEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  try {
    TopologyManager.acquireReadLockForApplication(appId);
    Application application=TopologyManager.getTopology().getApplication(appId);
    if (application != null) {
      Group group=application.getGroupRecursively(groupId);
      if (group.getStatus().getNextStates().contains(GroupStatus.Terminating)) {
        AppStatusGroupTerminatingEvent groupInTerminatingEvent=new AppStatusGroupTerminatingEvent(appId,groupId);
        publishEvent(groupInTerminatingEvent);
      }
 else {
        log.warn(""String_Node_Str"" + groupId);
      }
    }
  }
  finally {
    TopologyManager.releaseReadLockForApplication(appId);
  }
}",0.574430823117338
116431,"public static void sendGroupActivatedEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  AppStatusGroupActivatedEvent groupActivatedEvent=new AppStatusGroupActivatedEvent(appId,groupId);
  publishEvent(groupActivatedEvent);
}","public static void sendGroupActivatedEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  try {
    TopologyManager.acquireReadLockForApplication(appId);
    Application application=TopologyManager.getTopology().getApplication(appId);
    if (application != null) {
      Group group=application.getGroupRecursively(groupId);
      if (group.getStatus().getNextStates().contains(GroupStatus.Active)) {
        AppStatusGroupActivatedEvent groupActivatedEvent=new AppStatusGroupActivatedEvent(appId,groupId);
        publishEvent(groupActivatedEvent);
      }
 else {
        log.warn(""String_Node_Str"" + groupId);
      }
    }
  }
  finally {
    TopologyManager.releaseReadLockForApplication(appId);
  }
}",0.5500450856627592
116432,"public static void sendGroupTerminatedEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  AppStatusGroupTerminatedEvent groupInTerminatedEvent=new AppStatusGroupTerminatedEvent(appId,groupId);
  publishEvent(groupInTerminatedEvent);
}","public static void sendGroupTerminatedEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  try {
    TopologyManager.acquireReadLockForApplication(appId);
    Application application=TopologyManager.getTopology().getApplication(appId);
    if (application != null) {
      Group group=application.getGroupRecursively(groupId);
      if (group.getStatus().getNextStates().contains(GroupStatus.Terminated)) {
        AppStatusGroupTerminatedEvent groupInTerminatedEvent=new AppStatusGroupTerminatedEvent(appId,groupId);
        publishEvent(groupInTerminatedEvent);
      }
 else {
        log.warn(""String_Node_Str"" + groupId);
      }
    }
  }
  finally {
    TopologyManager.releaseReadLockForApplication(appId);
  }
}",0.5711759504862953
116433,"public static void sendGroupInActivateEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  AppStatusGroupInactivateEvent appStatusGroupInactivateEvent=new AppStatusGroupInactivateEvent(appId,groupId);
  publishEvent(appStatusGroupInactivateEvent);
}","public static void sendGroupInActivateEvent(String appId,String groupId){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ groupId);
  }
  try {
    TopologyManager.acquireReadLockForApplication(appId);
    Application application=TopologyManager.getTopology().getApplication(appId);
    if (application != null) {
      Group group=application.getGroupRecursively(groupId);
      if (group.getStatus().getNextStates().contains(GroupStatus.Inactive)) {
        AppStatusGroupInactivateEvent appStatusGroupInactivateEvent=new AppStatusGroupInactivateEvent(appId,groupId);
        publishEvent(appStatusGroupInactivateEvent);
      }
 else {
        log.warn(""String_Node_Str"" + groupId);
      }
    }
  }
  finally {
    TopologyManager.releaseReadLockForApplication(appId);
  }
}",0.5721694036300777
116434,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        TopologyManager.acquireReadLock();
        try {
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application.getUniqueIdentifier());
          }
          topologyInitialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
        try {
          TopologyManager.acquireReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
          startApplicationMonitor(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          TopologyManager.releaseReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Active);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
      String clusterId=clusterCreatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String appId=clusterInactivateEvent.getAppId();
      String clusterId=clusterInactivateEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String appId=clusterTerminatingEvent.getAppId();
      String clusterId=clusterTerminatingEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Terminating);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String appId=clusterTerminatedEvent.getAppId();
      String clusterId=clusterTerminatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Terminated);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupActivatedEvent groupActivatedEvent=(GroupActivatedEvent)event;
      String appId=groupActivatedEvent.getAppId();
      String groupId=groupActivatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(GroupStatus.Active);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupInactivateEvent groupInactivateEvent=(GroupInactivateEvent)event;
      String appId=groupInactivateEvent.getAppId();
      String groupId=groupInactivateEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(GroupStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatingEvent groupTerminatingEvent=(GroupTerminatingEvent)event;
      String appId=groupTerminatingEvent.getAppId();
      String groupId=groupTerminatingEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(GroupStatus.Terminating);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatedEvent groupTerminatedEvent=(GroupTerminatedEvent)event;
      String appId=groupTerminatedEvent.getAppId();
      String groupId=groupTerminatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(GroupStatus.Terminated);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationActivatedEvent applicationActivatedEvent=(ApplicationActivatedEvent)event;
      String appId=applicationActivatedEvent.getAppId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      appMonitor.setStatus(ApplicationStatus.Active);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationUndeployedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationUndeployedEvent applicationUndeployedEvent=(ApplicationUndeployedEvent)event;
      TopologyManager.acquireReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      Set<ClusterDataHolder> clusterDataHolders=applicationUndeployedEvent.getClusterData();
      if (clusterDataHolders != null) {
        for (        ClusterDataHolder clusterData : clusterDataHolders) {
          TopologyManager.acquireReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
        }
      }
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(applicationUndeployedEvent.getApplicationId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ClusterMonitor clusterMonitor=((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId()));
            if (clusterMonitor != null) {
              clusterMonitor.setDestroyed(true);
              clusterMonitor.terminateAllMembers();
              clusterMonitor.setStatus(ClusterStatus.Terminating);
            }
 else {
              log.warn(""String_Node_Str"" + clusterData.getClusterId());
            }
          }
        }
 else {
          log.warn(""String_Node_Str"" + applicationUndeployedEvent.getApplicationId());
        }
      }
  finally {
        if (clusterDataHolders != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            TopologyManager.releaseReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
          }
        }
        TopologyManager.releaseReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatingEvent appTerminatingEvent=(ApplicationTerminatingEvent)event;
      TopologyManager.acquireReadLockForApplication(appTerminatingEvent.getAppId());
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appTerminatingEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
        }
 else {
          log.warn(""String_Node_Str"" + appTerminatingEvent.getAppId());
        }
      }
  finally {
        TopologyManager.releaseReadLockForApplication(appTerminatingEvent.getAppId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatedEvent applicationRemovedEvent=(ApplicationTerminatedEvent)event;
      Set<ClusterDataHolder> clusterDataHolders=applicationRemovedEvent.getClusterData();
      try {
        ApplicationMonitor monitor=AutoscalerContext.getInstance().getAppMonitor(applicationRemovedEvent.getAppId());
        if (monitor != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId())).setDestroyed(true);
            AutoscalerContext.getInstance().removeMonitor(clusterData.getClusterId());
          }
          AutoscalerContext.getInstance().removeAppMonitor(applicationRemovedEvent.getAppId());
        }
 else {
          log.warn(""String_Node_Str"" + applicationRemovedEvent.getAppId());
        }
      }
  finally {
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        TopologyManager.acquireReadLock();
        try {
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application.getUniqueIdentifier());
          }
          topologyInitialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
        try {
          TopologyManager.acquireReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
          startApplicationMonitor(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          TopologyManager.releaseReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Active);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
      String clusterId=clusterCreatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String appId=clusterInactivateEvent.getAppId();
      String clusterId=clusterInactivateEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String appId=clusterTerminatingEvent.getAppId();
      String clusterId=clusterTerminatingEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setDestroyed(true);
        clusterMonitor.terminateAllMembers();
        clusterMonitor.setStatus(ClusterStatus.Terminating);
      }
 else {
        log.warn(""String_Node_Str"" + clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String appId=clusterTerminatedEvent.getAppId();
      String clusterId=clusterTerminatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Terminated);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupActivatedEvent groupActivatedEvent=(GroupActivatedEvent)event;
      String appId=groupActivatedEvent.getAppId();
      String groupId=groupActivatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupInactivateEvent groupInactivateEvent=(GroupInactivateEvent)event;
      String appId=groupInactivateEvent.getAppId();
      String groupId=groupInactivateEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(GroupStatus.Inactive);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatingEvent groupTerminatingEvent=(GroupTerminatingEvent)event;
      String appId=groupTerminatingEvent.getAppId();
      String groupId=groupTerminatingEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(GroupStatus.Terminating);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatedEvent groupTerminatedEvent=(GroupTerminatedEvent)event;
      String appId=groupTerminatedEvent.getAppId();
      String groupId=groupTerminatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(GroupStatus.Terminated);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationActivatedEvent applicationActivatedEvent=(ApplicationActivatedEvent)event;
      String appId=applicationActivatedEvent.getAppId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      appMonitor.setStatus(ApplicationStatus.Active);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationUndeployedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationUndeployedEvent applicationUndeployedEvent=(ApplicationUndeployedEvent)event;
      TopologyManager.acquireReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      Set<ClusterDataHolder> clusterDataHolders=applicationUndeployedEvent.getClusterData();
      if (clusterDataHolders != null) {
        for (        ClusterDataHolder clusterData : clusterDataHolders) {
          TopologyManager.acquireReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
        }
      }
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(applicationUndeployedEvent.getApplicationId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ClusterMonitor clusterMonitor=((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId()));
            if (clusterMonitor != null) {
              clusterMonitor.setDestroyed(true);
              clusterMonitor.terminateAllMembers();
              clusterMonitor.setStatus(ClusterStatus.Terminating);
            }
 else {
              log.warn(""String_Node_Str"" + clusterData.getClusterId());
            }
          }
        }
 else {
          log.warn(""String_Node_Str"" + applicationUndeployedEvent.getApplicationId());
        }
      }
  finally {
        if (clusterDataHolders != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            TopologyManager.releaseReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
          }
        }
        TopologyManager.releaseReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatingEvent appTerminatingEvent=(ApplicationTerminatingEvent)event;
      TopologyManager.acquireReadLockForApplication(appTerminatingEvent.getAppId());
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appTerminatingEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
        }
 else {
          log.warn(""String_Node_Str"" + appTerminatingEvent.getAppId());
        }
      }
  finally {
        TopologyManager.releaseReadLockForApplication(appTerminatingEvent.getAppId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatedEvent applicationRemovedEvent=(ApplicationTerminatedEvent)event;
      Set<ClusterDataHolder> clusterDataHolders=applicationRemovedEvent.getClusterData();
      try {
        ApplicationMonitor monitor=AutoscalerContext.getInstance().getAppMonitor(applicationRemovedEvent.getAppId());
        if (monitor != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId())).setDestroyed(true);
            AutoscalerContext.getInstance().removeMonitor(clusterData.getClusterId());
          }
          AutoscalerContext.getInstance().removeAppMonitor(applicationRemovedEvent.getAppId());
        }
 else {
          log.warn(""String_Node_Str"" + applicationRemovedEvent.getAppId());
        }
      }
  finally {
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}",0.9943315228992244
116435,"protected void onChildInActiveEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  Monitor monitor;
  this.aliasToInActiveMonitorsMap.put(idOfEvent,this.aliasToActiveMonitorsMap.remove(idOfEvent));
  if (this.hasDependent) {
    StatusChecker.getInstance().onChildStatusChange(idOfEvent,this.id,this.appId);
  }
 else {
    terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
    if (this.hasInDependentChild()) {
      if (this.parent != null) {
        StatusEventPublisher.sendGroupInActivateEvent(this.appId,this.id);
      }
    }
    if (terminationList != null) {
      for (      ApplicationContext terminationContext : terminationList) {
        monitor=this.aliasToActiveMonitorsMap.get(terminationContext.getId());
        if (monitor != null) {
          if (monitor.hasActiveMonitors()) {
            StatusEventPublisher.sendGroupTerminatingEvent(this.appId,terminationContext.getId());
          }
 else {
            StatusEventPublisher.sendClusterTerminatingEvent(this.appId,((AbstractClusterMonitor)monitor).getServiceId(),terminationContext.getId());
          }
        }
 else {
          log.warn(""String_Node_Str"" + terminationContext.getId() + ""String_Node_Str"");
        }
      }
    }
 else {
      log.warn(""String_Node_Str"" + idOfEvent + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
}","protected void onChildInActiveEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  Monitor monitor;
  if (this.hasDependent) {
    StatusChecker.getInstance().onChildStatusChange(idOfEvent,this.id,this.appId);
  }
 else {
    terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
    if (this.hasInDependentChild()) {
      if (this.parent != null) {
        StatusEventPublisher.sendGroupInActivateEvent(this.appId,this.id);
      }
    }
    if (terminationList != null) {
      for (      ApplicationContext terminationContext : terminationList) {
        monitor=this.aliasToActiveMonitorsMap.get(terminationContext.getId());
        if (monitor != null) {
          if (monitor.hasActiveMonitors()) {
            StatusEventPublisher.sendGroupTerminatingEvent(this.appId,terminationContext.getId());
          }
 else {
            StatusEventPublisher.sendClusterTerminatingEvent(this.appId,((AbstractClusterMonitor)monitor).getServiceId(),terminationContext.getId());
          }
        }
 else {
          log.warn(""String_Node_Str"" + terminationContext.getId() + ""String_Node_Str"");
        }
      }
    }
 else {
      log.warn(""String_Node_Str"" + idOfEvent + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
}",0.1885496183206106
116436,"protected void onChildTerminatedEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  boolean allDependentTerminated=true;
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(idOfEvent);
  context.setTerminated(true);
  terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
  if (terminationList != null) {
    for (    ApplicationContext context1 : terminationList) {
      if (this.aliasToInActiveMonitorsMap.containsKey(context1.getId())) {
        allDependentTerminated=false;
      }
 else       if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
        log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        allDependentTerminated=false;
      }
 else {
        allDependentTerminated=true;
      }
    }
  }
  List<ApplicationContext> parentContexts=this.dependencyTree.findAllParentContextWithId(idOfEvent);
  boolean canStart=false;
  if (parentContexts != null) {
    for (    ApplicationContext context1 : parentContexts) {
      if (this.aliasToInActiveMonitorsMap.containsKey(context1.getId())) {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        canStart=false;
      }
 else       if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
        if (canStart) {
          log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        }
      }
 else {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        canStart=true;
      }
    }
  }
  if ((terminationList != null && allDependentTerminated || terminationList == null) && (parentContexts != null && canStart || parentContexts == null)) {
    try {
      this.startDependency();
    }
 catch (    TopologyInConsistentException e) {
      e.printStackTrace();
    }
  }
 else {
    log.info(""String_Node_Str"" + idOfEvent + ""String_Node_Str"");
  }
}","protected void onChildTerminatedEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  boolean allDependentTerminated=true;
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(idOfEvent);
  context.setTerminated(true);
  terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
  if (terminationList != null) {
    for (    ApplicationContext context1 : terminationList) {
      if (!this.aliasToInActiveMonitorsMap.containsKey(context1.getId())) {
        allDependentTerminated=false;
      }
 else       if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
        log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        allDependentTerminated=false;
      }
 else {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
      }
    }
  }
  List<ApplicationContext> parentContexts=this.dependencyTree.findAllParentContextWithId(idOfEvent);
  boolean canStart=false;
  if (parentContexts != null) {
    for (    ApplicationContext context1 : parentContexts) {
      if (this.aliasToInActiveMonitorsMap.containsKey(context1.getId())) {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        canStart=false;
      }
 else       if (this.aliasToActiveMonitorsMap.containsKey(context1.getId())) {
        if (canStart) {
          log.warn(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        }
      }
 else {
        log.info(""String_Node_Str"" + context1.getId() + ""String_Node_Str"");
        canStart=true;
      }
    }
  }
  if ((terminationList != null && allDependentTerminated || terminationList == null) && (parentContexts != null && canStart || parentContexts == null)) {
    try {
      this.startDependencyOnTermination();
    }
 catch (    TopologyInConsistentException e) {
      e.printStackTrace();
    }
  }
 else {
    StatusChecker.getInstance().onChildStatusChange(idOfEvent,this.id,this.appId);
    log.info(""String_Node_Str"" + idOfEvent + ""String_Node_Str"");
  }
}",0.9372151898734176
116437,"@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    onChildTerminatingEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != ApplicationStatus.Terminating && !this.aliasToInActiveMonitorsMap.isEmpty() && !this.aliasToActiveMonitorsMap.isEmpty()) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    onChildTerminatingEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != ApplicationStatus.Terminating) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.9546827794561934
116438,"@Override public void run(){
  while (!isDestroyed()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + this.toString());
    }
    try {
      if ((this.status.getCode() <= ClusterStatus.Active.getCode()) || (this.status == ClusterStatus.Inactive && !hasDependent)) {
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.Inactive + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(monitorInterval);
    }
 catch (    InterruptedException ignore) {
    }
  }
}","@Override public void run(){
  while (!isDestroyed()) {
    try {
      if ((this.status.getCode() <= ClusterStatus.Active.getCode()) || (this.status == ClusterStatus.Inactive && !hasDependent)) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + this.toString());
        }
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.Inactive + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(monitorInterval);
    }
 catch (    InterruptedException ignore) {
    }
  }
}",0.8539493293591655
116439,"@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    onChildTerminatingEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != GroupStatus.Terminating && !this.aliasToInActiveMonitorsMap.isEmpty() && !this.aliasToActiveMonitorsMap.isEmpty()) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    onChildTerminatingEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != GroupStatus.Terminating) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.9576669802445908
116440,"/** 
 * This will use to calculate whether  all children of a particular component is active by travesing Top
 * @param appId
 * @param id
 * @param groups
 * @param clusterData
 * @param parent
 * @return
 */
private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean groupActive=false;
  ClusterStatus clusterStatus;
  GroupStatus groupStatus;
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  log.info(""String_Node_Str"" + clusterFound);
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    clusterStatus=getClusterStatus(clusterData);
    groupStatus=getGroupStatus(groups);
    if (groups.isEmpty() && clusterStatus == ClusterStatus.Active || clusterData.isEmpty() && groupStatus == GroupStatus.Active || groupStatus == GroupStatus.Active && clusterStatus == ClusterStatus.Active) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        StatusEventPublisher.sendApplicationActivatedEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupActivatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Inactive || clusterData.isEmpty() && groupStatus == GroupStatus.Inactive || groupStatus == GroupStatus.Inactive && clusterStatus == ClusterStatus.Inactive) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        StatusEventPublisher.sendApplicationInactivatedEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupInActivateEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminated || clusterData.isEmpty() && groupStatus == GroupStatus.Terminated || groupStatus == GroupStatus.Terminated && clusterStatus == ClusterStatus.Terminated) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        StatusEventPublisher.sendApplicationTerminatedEvent(appId,parent.getClusterDataRecursively());
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminating || clusterData.isEmpty() && groupStatus == GroupStatus.Terminating || groupStatus == GroupStatus.Terminating && clusterStatus == ClusterStatus.Terminating) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        StatusEventPublisher.sendApplicationTerminatingEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatingEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    return childFound;
  }
 else {
    log.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getUniqueIdentifier());
  }
  return childFound;
}","/** 
 * This will use to calculate whether  all children of a particular component is active by travesing Top
 * @param appId
 * @param id
 * @param groups
 * @param clusterData
 * @param parent
 * @return
 */
private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean groupActive=false;
  ClusterStatus clusterStatus;
  GroupStatus groupStatus;
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  log.info(""String_Node_Str"" + clusterFound);
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    clusterStatus=getClusterStatus(clusterData);
    groupStatus=getGroupStatus(groups);
    if (groups.isEmpty() && clusterStatus == ClusterStatus.Active || clusterData.isEmpty() && groupStatus == GroupStatus.Active || groupStatus == GroupStatus.Active && clusterStatus == ClusterStatus.Active) {
      if (parent instanceof Application) {
        log.info(""String_Node_Str"" + appId);
        StatusEventPublisher.sendApplicationActivatedEvent(appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupActivatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Inactive || clusterData.isEmpty() && groupStatus == GroupStatus.Inactive || groupStatus == GroupStatus.Inactive && clusterStatus == ClusterStatus.Inactive) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupInActivateEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminated || clusterData.isEmpty() && groupStatus == GroupStatus.Terminated || groupStatus == GroupStatus.Terminated && clusterStatus == ClusterStatus.Terminated) {
      if (parent instanceof Application) {
        try {
          TopologyManager.acquireReadLockForApplication(appId);
          Application application=TopologyManager.getTopology().getApplication(appId);
          if (application.getStatus().equals(ApplicationStatus.Terminating)) {
            log.info(""String_Node_Str"" + appId);
            StatusEventPublisher.sendApplicationTerminatedEvent(appId,parent.getClusterDataRecursively());
          }
 else {
            log.info(""String_Node_Str"" + appId + ""String_Node_Str""+ application.getStatus().toString()+ ""String_Node_Str"");
          }
        }
  finally {
          TopologyManager.releaseReadLockForApplication(appId);
        }
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatedEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else     if (groups.isEmpty() && clusterStatus == ClusterStatus.Terminating || clusterData.isEmpty() && groupStatus == GroupStatus.Terminating || groupStatus == GroupStatus.Terminating && clusterStatus == ClusterStatus.Terminating) {
      if (parent instanceof Application) {
        log.warn(""String_Node_Str"" + appId);
      }
 else       if (parent instanceof Group) {
        log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
        StatusEventPublisher.sendGroupTerminatingEvent(appId,parent.getUniqueIdentifier());
      }
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    return childFound;
  }
 else {
    log.warn(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ parent.getUniqueIdentifier());
  }
  return childFound;
}",0.6695255963548646
116441,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        TopologyManager.acquireReadLock();
        try {
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application.getUniqueIdentifier());
          }
          topologyInitialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
        try {
          TopologyManager.acquireReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
          startApplicationMonitor(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          TopologyManager.releaseReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
      String clusterId=clusterCreatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String appId=clusterInactivateEvent.getAppId();
      String clusterId=clusterInactivateEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Inactive);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String appId=clusterTerminatingEvent.getAppId();
      String clusterId=clusterTerminatingEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setDestroyed(true);
        clusterMonitor.terminateAllMembers();
        clusterMonitor.setStatus(ClusterStatus.Terminating);
      }
 else {
        log.warn(""String_Node_Str"" + clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String appId=clusterTerminatedEvent.getAppId();
      String clusterId=clusterTerminatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Terminated);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupActivatedEvent groupActivatedEvent=(GroupActivatedEvent)event;
      String appId=groupActivatedEvent.getAppId();
      String groupId=groupActivatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupInactivateEvent groupInactivateEvent=(GroupInactivateEvent)event;
      String appId=groupInactivateEvent.getAppId();
      String groupId=groupInactivateEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Inactive);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatingEvent groupTerminatingEvent=(GroupTerminatingEvent)event;
      String appId=groupTerminatingEvent.getAppId();
      String groupId=groupTerminatingEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Terminating);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatedEvent groupTerminatedEvent=(GroupTerminatedEvent)event;
      String appId=groupTerminatedEvent.getAppId();
      String groupId=groupTerminatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Terminated);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationActivatedEvent applicationActivatedEvent=(ApplicationActivatedEvent)event;
      String appId=applicationActivatedEvent.getAppId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      if (appMonitor != null) {
        appMonitor.setStatus(ApplicationStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationUndeployedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationUndeployedEvent applicationUndeployedEvent=(ApplicationUndeployedEvent)event;
      TopologyManager.acquireReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      Set<ClusterDataHolder> clusterDataHolders=applicationUndeployedEvent.getClusterData();
      if (clusterDataHolders != null) {
        for (        ClusterDataHolder clusterData : clusterDataHolders) {
          TopologyManager.acquireReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
        }
      }
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(applicationUndeployedEvent.getApplicationId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
          boolean clusterMonitorsFound=false;
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ClusterMonitor clusterMonitor=((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId()));
            if (clusterMonitor != null) {
              clusterMonitorsFound=true;
              clusterMonitor.setDestroyed(true);
              if (clusterMonitor.getStatus() == ClusterStatus.Active) {
                clusterMonitor.setStatus(ClusterStatus.Terminating);
                InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterData.getClusterId());
              }
 else {
                clusterMonitor.setStatus(ClusterStatus.Terminating);
                clusterMonitor.terminateAllMembers();
              }
            }
 else {
              log.warn(""String_Node_Str"" + clusterData.getClusterId());
              StatusEventPublisher.sendClusterTerminatedEvent(applicationUndeployedEvent.getApplicationId(),clusterData.getServiceType(),clusterData.getClusterId());
            }
          }
          if (!clusterMonitorsFound) {
            StatusEventPublisher.sendApplicationTerminatedEvent(applicationUndeployedEvent.getApplicationId(),clusterDataHolders);
          }
        }
 else {
          log.warn(""String_Node_Str"" + applicationUndeployedEvent.getApplicationId());
          StatusEventPublisher.sendApplicationTerminatedEvent(applicationUndeployedEvent.getApplicationId(),clusterDataHolders);
        }
      }
  finally {
        if (clusterDataHolders != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            TopologyManager.releaseReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
          }
        }
        TopologyManager.releaseReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatingEvent appTerminatingEvent=(ApplicationTerminatingEvent)event;
      TopologyManager.acquireReadLockForApplication(appTerminatingEvent.getAppId());
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appTerminatingEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
        }
 else {
          log.warn(""String_Node_Str"" + appTerminatingEvent.getAppId());
        }
      }
  finally {
        TopologyManager.releaseReadLockForApplication(appTerminatingEvent.getAppId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatedEvent applicationRemovedEvent=(ApplicationTerminatedEvent)event;
      Set<ClusterDataHolder> clusterDataHolders=applicationRemovedEvent.getClusterData();
      try {
        ApplicationMonitor monitor=AutoscalerContext.getInstance().getAppMonitor(applicationRemovedEvent.getAppId());
        if (monitor != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ClusterMonitor clusterMonitor=((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId()));
            if (clusterMonitor != null) {
              clusterMonitor.setDestroyed(true);
              AutoscalerContext.getInstance().removeMonitor(clusterData.getClusterId());
            }
 else {
              log.warn(""String_Node_Str"" + clusterData.getClusterId() + ""String_Node_Str"");
            }
          }
          AutoscalerContext.getInstance().removeAppMonitor(applicationRemovedEvent.getAppId());
        }
 else {
          log.warn(""String_Node_Str"" + applicationRemovedEvent.getAppId() + ""String_Node_Str"");
        }
      }
  finally {
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        log.info(""String_Node_Str"" + event.getClass());
        TopologyManager.acquireReadLock();
        try {
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application.getUniqueIdentifier());
          }
          topologyInitialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
        try {
          TopologyManager.acquireReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
          startApplicationMonitor(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          TopologyManager.releaseReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterCreatedEvent clusterCreatedEvent=(ClusterCreatedEvent)event;
      String clusterId=clusterCreatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(ClusterStatus.Created);
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterInactivateEvent clusterInactivateEvent=(ClusterInactivateEvent)event;
      String appId=clusterInactivateEvent.getAppId();
      String clusterId=clusterInactivateEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Inactive);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatingEvent clusterTerminatingEvent=(ClusterTerminatingEvent)event;
      String clusterId=clusterTerminatingEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        if (clusterMonitor.getStatus() == ClusterStatus.Active) {
          clusterMonitor.setStatus(ClusterStatus.Terminating);
          InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);
        }
 else {
          clusterMonitor.setStatus(ClusterStatus.Terminating);
          clusterMonitor.terminateAllMembers();
        }
      }
 else {
        log.warn(""String_Node_Str"" + clusterId);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterTerminatedEvent clusterTerminatedEvent=(ClusterTerminatedEvent)event;
      String appId=clusterTerminatedEvent.getAppId();
      String clusterId=clusterTerminatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      if (clusterMonitor != null) {
        clusterMonitor.setStatus(ClusterStatus.Terminated);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupActivatedEvent groupActivatedEvent=(GroupActivatedEvent)event;
      String appId=groupActivatedEvent.getAppId();
      String groupId=groupActivatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupInActivateEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupInactivateEvent groupInactivateEvent=(GroupInactivateEvent)event;
      String appId=groupInactivateEvent.getAppId();
      String groupId=groupInactivateEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Inactive);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatingEvent groupTerminatingEvent=(GroupTerminatingEvent)event;
      String appId=groupTerminatingEvent.getAppId();
      String groupId=groupTerminatingEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Terminating);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupTerminatedEvent groupTerminatedEvent=(GroupTerminatedEvent)event;
      String appId=groupTerminatedEvent.getAppId();
      String groupId=groupTerminatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      if (monitor != null) {
        monitor.setStatus(GroupStatus.Terminated);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationActivatedEvent applicationActivatedEvent=(ApplicationActivatedEvent)event;
      String appId=applicationActivatedEvent.getAppId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      if (appMonitor != null) {
        appMonitor.setStatus(ApplicationStatus.Active);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationUndeployedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationUndeployedEvent applicationUndeployedEvent=(ApplicationUndeployedEvent)event;
      TopologyManager.acquireReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      Set<ClusterDataHolder> clusterDataHolders=applicationUndeployedEvent.getClusterData();
      if (clusterDataHolders != null) {
        for (        ClusterDataHolder clusterData : clusterDataHolders) {
          TopologyManager.acquireReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
        }
      }
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(applicationUndeployedEvent.getApplicationId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
          boolean clusterMonitorsFound=false;
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ClusterMonitor clusterMonitor=((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId()));
            if (clusterMonitor != null) {
              clusterMonitorsFound=true;
              clusterMonitor.setDestroyed(true);
              if (clusterMonitor.getStatus() == ClusterStatus.Active) {
                clusterMonitor.setStatus(ClusterStatus.Terminating);
                InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterData.getClusterId());
              }
 else {
                clusterMonitor.setStatus(ClusterStatus.Terminating);
                clusterMonitor.terminateAllMembers();
              }
            }
 else {
              log.warn(""String_Node_Str"" + clusterData.getClusterId());
              StatusEventPublisher.sendClusterTerminatedEvent(applicationUndeployedEvent.getApplicationId(),clusterData.getServiceType(),clusterData.getClusterId());
            }
          }
          if (!clusterMonitorsFound) {
            StatusEventPublisher.sendApplicationTerminatedEvent(applicationUndeployedEvent.getApplicationId(),clusterDataHolders);
          }
        }
 else {
          log.warn(""String_Node_Str"" + applicationUndeployedEvent.getApplicationId());
          StatusEventPublisher.sendApplicationTerminatedEvent(applicationUndeployedEvent.getApplicationId(),clusterDataHolders);
        }
      }
  finally {
        if (clusterDataHolders != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            TopologyManager.releaseReadLockForCluster(clusterData.getServiceType(),clusterData.getClusterId());
          }
        }
        TopologyManager.releaseReadLockForApplication(applicationUndeployedEvent.getApplicationId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatingEvent appTerminatingEvent=(ApplicationTerminatingEvent)event;
      TopologyManager.acquireReadLockForApplication(appTerminatingEvent.getAppId());
      try {
        ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appTerminatingEvent.getAppId());
        if (appMonitor != null) {
          appMonitor.setStatus(ApplicationStatus.Terminating);
        }
 else {
          log.warn(""String_Node_Str"" + appTerminatingEvent.getAppId());
        }
      }
  finally {
        TopologyManager.releaseReadLockForApplication(appTerminatingEvent.getAppId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationTerminatedEvent applicationRemovedEvent=(ApplicationTerminatedEvent)event;
      Set<ClusterDataHolder> clusterDataHolders=applicationRemovedEvent.getClusterData();
      try {
        ApplicationMonitor monitor=AutoscalerContext.getInstance().getAppMonitor(applicationRemovedEvent.getAppId());
        if (monitor != null) {
          for (          ClusterDataHolder clusterData : clusterDataHolders) {
            ClusterMonitor clusterMonitor=((ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterData.getClusterId()));
            if (clusterMonitor != null) {
              clusterMonitor.setDestroyed(true);
              AutoscalerContext.getInstance().removeMonitor(clusterData.getClusterId());
            }
 else {
              log.warn(""String_Node_Str"" + clusterData.getClusterId() + ""String_Node_Str"");
            }
          }
          AutoscalerContext.getInstance().removeAppMonitor(applicationRemovedEvent.getAppId());
        }
 else {
          log.warn(""String_Node_Str"" + applicationRemovedEvent.getAppId() + ""String_Node_Str"");
        }
      }
  finally {
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}",0.9910950449656144
116442,"/** 
 * When one group/cluster terminates/in_maintenance, need to consider about other dependencies
 * @param id the alias/id of group/cluster in which terminated event received
 * @return all the kill able children dependencies
 */
public List<ApplicationContext> getTerminationDependencies(String id){
  List<ApplicationContext> allChildrenOfAppContext=new ArrayList<ApplicationContext>();
  ApplicationContext applicationContext=findApplicationContextWithId(id);
  if (this.killDependent) {
    findAllChildrenOfAppContext(applicationContext.getApplicationContextList(),allChildrenOfAppContext);
    return allChildrenOfAppContext;
  }
 else   if (this.killAll) {
    findAllChildrenOfAppContext(this.applicationContextList,allChildrenOfAppContext);
  }
  return allChildrenOfAppContext;
}","/** 
 * When one group/cluster terminates/in_maintenance, need to consider about other dependencies
 * @param id the alias/id of group/cluster in which terminated event received
 * @return all the kill able children dependencies
 */
public List<ApplicationContext> getTerminationDependencies(String id){
  List<ApplicationContext> allChildrenOfAppContext=new ArrayList<ApplicationContext>();
  ApplicationContext applicationContext=findApplicationContextWithId(id);
  if (this.killDependent) {
    allChildrenOfAppContext.add(applicationContext);
    findAllChildrenOfAppContext(applicationContext.getApplicationContextList(),allChildrenOfAppContext);
    return allChildrenOfAppContext;
  }
 else   if (this.killAll) {
    findAllChildrenOfAppContext(this.applicationContextList,allChildrenOfAppContext);
  }
  return allChildrenOfAppContext;
}",0.967623701893708
116443,"/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status
 */
public void setStatus(GroupStatus status){
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",id,this.status,status));
  this.status=status;
  MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,this.status,this.id);
}","/** 
 * Will set the status of the monitor based on Topology Group status/child status like scaling
 * @param status
 */
public void setStatus(GroupStatus status){
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",id,this.status,status));
  this.status=status;
  if (status == GroupStatus.Inactive && !this.hasDependent) {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    MonitorStatusEventBuilder.handleGroupStatusEvent(this.parent,this.status,this.id);
  }
}",0.8163265306122449
116444,"private void addEventListeners(){
  statusEventReceiver.addEventListener(new AppStatusClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterActivatedEvent((AppStatusClusterActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatedEvent((AppStatusClusterTerminatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatingEvent((AppStatusClusterTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusClusterInactivateEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterInActivateEvent((AppStatusClusterInactivateEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusGroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleGroupActivatedEvent((AppStatusGroupActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusGroupTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleGroupTerminatedEvent((AppStatusGroupTerminatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusGroupTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleGroupTerminatingEvent((AppStatusGroupTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationActivatedEvent((AppStatusApplicationActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationInactivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationInActivatedEvent((AppStatusApplicationInactivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationCreatedEvent((AppStatusApplicationCreatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationTerminatingEvent((AppStatusApplicationTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationTerminatedEvent((AppStatusApplicationTerminatedEvent)event);
    }
  }
);
}","private void addEventListeners(){
  statusEventReceiver.addEventListener(new AppStatusClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterActivatedEvent((AppStatusClusterActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusClusterTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatedEvent((AppStatusClusterTerminatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusClusterTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterTerminatingEvent((AppStatusClusterTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusClusterInactivateEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleClusterInActivateEvent((AppStatusClusterInactivateEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusGroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleGroupActivatedEvent((AppStatusGroupActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusGroupTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleGroupTerminatedEvent((AppStatusGroupTerminatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusGroupTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleGroupTerminatingEvent((AppStatusGroupTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusGroupInactivateEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleGroupInActiveEvent((AppStatusGroupInactivateEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationActivatedEvent((AppStatusApplicationActivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationInactivatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationInActivatedEvent((AppStatusApplicationInactivatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationCreatedEvent((AppStatusApplicationCreatedEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationTerminatingEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationTerminatingEvent((AppStatusApplicationTerminatingEvent)event);
    }
  }
);
  statusEventReceiver.addEventListener(new AppStatusApplicationTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      TopologyBuilder.handleApplicationTerminatedEvent((AppStatusApplicationTerminatedEvent)event);
    }
  }
);
}",0.8093570973901973
116445,"@Override public boolean process(String type,String message,Object object){
  if (ApplicationCreatedEvent.class.getName().equals(type)) {
    ApplicationCreatedEvent event=(ApplicationCreatedEvent)Util.jsonToObject(message,ApplicationCreatedEvent.class);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + event.toString());
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,object);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",type,message));
    }
  }
}","@Override public boolean process(String type,String message,Object object){
  if (AppStatusApplicationCreatedEvent.class.getName().equals(type)) {
    AppStatusApplicationCreatedEvent event=(AppStatusApplicationCreatedEvent)Util.jsonToObject(message,AppStatusApplicationCreatedEvent.class);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + event.toString());
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,object);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",type,message));
    }
  }
}",0.9720496894409938
116446,"protected void onChildInActiveEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  Monitor monitor;
  if (this.hasDependent) {
    StatusChecker.getInstance().onChildStatusChange(idOfEvent,this.id,this.appId);
  }
 else {
    terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
    if (this.hasInDependentChild()) {
      if (this.parent != null) {
        StatusEventPublisher.sendGroupInActivateEvent(this.appId,this.id);
      }
    }
    if (terminationList != null) {
      for (      ApplicationContext terminationContext : terminationList) {
        monitor=this.aliasToActiveMonitorsMap.get(terminationContext.getId());
        if (monitor != null) {
          if (monitor.hasActiveMonitors()) {
            StatusEventPublisher.sendGroupTerminatingEvent(this.appId,terminationContext.getId());
          }
 else {
            StatusEventPublisher.sendClusterTerminatingEvent(this.appId,((AbstractClusterMonitor)monitor).getServiceId(),terminationContext.getId());
          }
        }
 else {
          log.warn(""String_Node_Str"" + terminationContext.getId() + ""String_Node_Str"");
        }
      }
    }
 else {
      log.warn(""String_Node_Str"" + idOfEvent + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
}","protected void onChildInActiveEvent(String idOfEvent){
  List<ApplicationContext> terminationList;
  Monitor monitor;
  if (this.hasDependent) {
    StatusChecker.getInstance().onChildStatusChange(idOfEvent,this.id,this.appId);
  }
 else {
    terminationList=this.dependencyTree.getTerminationDependencies(idOfEvent);
    if (terminationList.size() == (this.aliasToActiveMonitorsMap.size() + this.aliasToInActiveMonitorsMap.size())) {
      if (this.parent != null) {
        StatusEventPublisher.sendGroupTerminatingEvent(this.appId,this.id);
      }
    }
 else {
      if (this.parent != null) {
        StatusEventPublisher.sendGroupInActivateEvent(this.appId,this.id);
      }
      if (terminationList != null) {
        for (        ApplicationContext terminationContext : terminationList) {
          monitor=this.aliasToActiveMonitorsMap.get(terminationContext.getId());
          if (monitor != null) {
            if (monitor.hasActiveMonitors()) {
              StatusEventPublisher.sendGroupTerminatingEvent(this.appId,terminationContext.getId());
            }
 else {
              StatusEventPublisher.sendClusterTerminatingEvent(this.appId,((AbstractClusterMonitor)monitor).getServiceId(),terminationContext.getId());
            }
          }
 else {
            log.warn(""String_Node_Str"" + terminationContext.getId() + ""String_Node_Str"");
          }
        }
      }
 else {
        log.warn(""String_Node_Str"" + idOfEvent + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
}",0.8929862617498192
116447,"@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    onChildTerminatingEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != ApplicationStatus.Terminating) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != ApplicationStatus.Terminating) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.8800945067926758
116448,"@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    onChildTerminatingEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != GroupStatus.Terminating) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}","@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  LifeCycleState status1=statusEvent.getStatus();
  if (status1 == ClusterStatus.Active || status1 == GroupStatus.Active) {
    onChildActivatedEvent(id);
  }
 else   if (status1 == ClusterStatus.Inactive || status1 == GroupStatus.Inactive) {
    onChildInActiveEvent(id);
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {
    StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
  }
 else   if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {
    this.aliasToInActiveMonitorsMap.remove(id);
    if (this.status != GroupStatus.Terminating) {
      onChildTerminatedEvent(id);
    }
 else {
      StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
      log.info(""String_Node_Str"" + id);
    }
  }
}",0.983524712930604
116449,"private void handleMemberFaultEvent(String clusterId,String memberId){
  try {
    AbstractClusterMonitor monitor=getMonitor(clusterId);
    NetworkPartitionContext nwPartitionCtxt;
    TopologyManager.acquireReadLockForServices();
    try {
      Member member=findMember(memberId);
      if (null == member) {
        return;
      }
      if (!member.isActive()) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        return;
      }
      if (monitor != null) {
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(member);
      }
 else {
        return;
      }
    }
  finally {
      TopologyManager.releaseReadLockForServices();
    }
    String partitionId=monitor.getPartitionOfMember(memberId);
    PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
    if (!partitionCtxt.activeMemberExist(memberId)) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",memberId));
      }
      return;
    }
    CloudControllerClient ccClient=CloudControllerClient.getInstance();
    ccClient.terminate(memberId);
    partitionCtxt.removeActiveMemberById(memberId);
    StatusChecker.getInstance().onMemberFaultEvent(clusterId,""String_Node_Str"",partitionCtxt);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberId,partitionId,clusterId));
    }
  }
 catch (  TerminationException e) {
    log.error(e);
  }
}","private void handleMemberFaultEvent(String clusterId,String memberId){
  try {
    AbstractClusterMonitor monitor=getMonitor(clusterId);
    NetworkPartitionContext nwPartitionCtxt;
    TopologyManager.acquireReadLockForServices();
    try {
      Member member=findMember(memberId);
      if (null == member) {
        return;
      }
      if (!member.isActive()) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        return;
      }
      if (monitor != null) {
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(member);
      }
 else {
        return;
      }
    }
  finally {
      TopologyManager.releaseReadLockForServices();
    }
    String partitionId=monitor.getPartitionOfMember(memberId);
    PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
    if (!partitionCtxt.activeMemberExist(memberId)) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",memberId));
      }
      return;
    }
    CloudControllerClient ccClient=CloudControllerClient.getInstance();
    ccClient.terminate(memberId);
    partitionCtxt.removeActiveMemberById(memberId);
    StatusChecker.getInstance().onMemberFaultEvent(clusterId,partitionCtxt);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberId,partitionId,clusterId));
    }
  }
 catch (  TerminationException e) {
    log.error(e);
  }
}",0.9425675675675677
116450,"/** 
 * @param clusterId
 * @param appId
 * @param partitionContext is to decide in which partition has less members while others have active members
 */
public void onMemberFaultEvent(final String clusterId,final String appId,final PartitionContext partitionContext){
  ClusterMonitor monitor=(ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
  boolean clusterInActive=getClusterInActive(monitor,partitionContext);
  if (clusterInActive) {
    StatusEventPublisher.sendClusterInActivateEvent(appId,monitor.getServiceId(),clusterId);
  }
 else {
    boolean clusterActive=clusterActive(monitor);
    if (clusterActive) {
    }
  }
}","/** 
 * @param clusterId
 * @param partitionContext is to decide in which partition has less members while others have active members
 */
public void onMemberFaultEvent(final String clusterId,final PartitionContext partitionContext){
  ClusterMonitor monitor=(ClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
  boolean clusterInActive=getClusterInActive(monitor,partitionContext);
  String appId=monitor.getAppId();
  if (clusterInActive) {
    StatusEventPublisher.sendClusterInActivateEvent(appId,monitor.getServiceId(),clusterId);
  }
 else {
    boolean clusterActive=clusterActive(monitor);
    if (clusterActive) {
    }
  }
}",0.8101071975497703
116451,"@Override public void unregisterService(String clusterId) throws UnregisteredClusterException {
  final String clusterId_=clusterId;
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
  handleNullObject(ctxt,""String_Node_Str"" + clusterId);
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str"";
    LOG.error(msg);
    throw new UnregisteredClusterException(msg);
  }
  if (StratosConstants.KUBERNETES_DEPLOYER_TYPE.equals(cartridge.getDeployerType())) {
    unregisterDockerService(clusterId_);
  }
 else {
    TopologyBuilder.handleClusterMaintenanceMode(dataHolder.getClusterContext(clusterId_));
    Runnable terminateInTimeout=new Runnable(){
      @Override public void run(){
        ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
        if (ctxt == null) {
          String msg=""String_Node_Str"" + clusterId_;
          LOG.error(msg);
        }
        Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
        int sizeOfRespondingMembers=0;
        for (        Member member : members) {
          if (member.getStatus().getCode() >= MemberStatus.Activated.getCode()) {
            sizeOfRespondingMembers++;
          }
        }
        long endTime=System.currentTimeMillis() + ctxt.getTimeoutInMillis() * sizeOfRespondingMembers;
        while (System.currentTimeMillis() < endTime) {
          CloudControllerUtil.sleep(1000);
        }
        if (members.size() > 0) {
          for (          Member member : members) {
            try {
              terminateInstance(member.getMemberId());
            }
 catch (            Exception e) {
              LOG.warn(""String_Node_Str"" + member.getMemberId(),e);
            }
          }
        }
      }
    }
;
    Runnable unregister=new Runnable(){
      public void run(){
        ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
        if (ctxt == null) {
          String msg=""String_Node_Str"" + clusterId_;
          LOG.error(msg);
        }
        Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
        while (members.size() > 0) {
          CloudControllerUtil.sleep(1000);
        }
        LOG.info(""String_Node_Str"" + clusterId_);
        deleteVolumes(ctxt);
        onClusterRemoval(clusterId_);
      }
      private void deleteVolumes(      ClusterContext ctxt){
        if (ctxt.isVolumeRequired()) {
          Cartridge cartridge=dataHolder.getCartridge(ctxt.getCartridgeType());
          if (cartridge != null && cartridge.getIaases() != null && ctxt.getVolumes() != null) {
            for (            Volume volume : ctxt.getVolumes()) {
              if (volume.getId() != null) {
                String iaasType=volume.getIaasType();
                Iaas iaas=cartridge.getIaasProvider(iaasType).getIaas();
                if (iaas != null) {
                  try {
                    if (volume.isRemoveOntermination()) {
                      iaas.deleteVolume(volume.getId());
                      volume.setId(null);
                    }
                  }
 catch (                  Exception ignore) {
                    if (LOG.isErrorEnabled()) {
                      LOG.error(""String_Node_Str"" + volume.getId(),ignore);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
;
    new Thread(terminateInTimeout).start();
    new Thread(unregister).start();
  }
}","@Override public void unregisterService(String clusterId) throws UnregisteredClusterException {
  final String clusterId_=clusterId;
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
  handleNullObject(ctxt,""String_Node_Str"" + clusterId);
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str"";
    LOG.error(msg);
    throw new UnregisteredClusterException(msg);
  }
  if (StratosConstants.KUBERNETES_DEPLOYER_TYPE.equals(cartridge.getDeployerType())) {
    unregisterDockerService(clusterId_);
  }
 else {
    TopologyBuilder.handleClusterMaintenanceMode(dataHolder.getClusterContext(clusterId_));
    Runnable terminateInTimeout=new Runnable(){
      @Override public void run(){
        ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
        if (ctxt == null) {
          String msg=""String_Node_Str"" + clusterId_;
          LOG.error(msg);
          return;
        }
        Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
        int sizeOfRespondingMembers=0;
        for (        Member member : members) {
          if (member.getStatus().getCode() >= MemberStatus.Activated.getCode()) {
            sizeOfRespondingMembers++;
          }
        }
        long endTime=System.currentTimeMillis() + ctxt.getTimeoutInMillis() * sizeOfRespondingMembers;
        while (System.currentTimeMillis() < endTime) {
          CloudControllerUtil.sleep(1000);
        }
        if (members.size() > 0) {
          for (          Member member : members) {
            try {
              terminateInstance(member.getMemberId());
            }
 catch (            Exception e) {
              LOG.warn(""String_Node_Str"" + member.getMemberId(),e);
            }
          }
        }
      }
    }
;
    Runnable unregister=new Runnable(){
      public void run(){
        ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
        if (ctxt == null) {
          String msg=""String_Node_Str"" + clusterId_;
          LOG.error(msg);
          return;
        }
        Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
        while (members.size() > 0) {
          CloudControllerUtil.sleep(1000);
        }
        LOG.info(""String_Node_Str"" + clusterId_);
        deleteVolumes(ctxt);
        onClusterRemoval(clusterId_);
      }
      private void deleteVolumes(      ClusterContext ctxt){
        if (ctxt.isVolumeRequired()) {
          Cartridge cartridge=dataHolder.getCartridge(ctxt.getCartridgeType());
          if (cartridge != null && cartridge.getIaases() != null && ctxt.getVolumes() != null) {
            for (            Volume volume : ctxt.getVolumes()) {
              if (volume.getId() != null) {
                String iaasType=volume.getIaasType();
                Iaas iaas=cartridge.getIaasProvider(iaasType).getIaas();
                if (iaas != null) {
                  try {
                    if (volume.isRemoveOntermination()) {
                      iaas.deleteVolume(volume.getId());
                      volume.setId(null);
                    }
                  }
 catch (                  Exception ignore) {
                    if (LOG.isErrorEnabled()) {
                      LOG.error(""String_Node_Str"" + volume.getId(),ignore);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
;
    new Thread(terminateInTimeout).start();
    new Thread(unregister).start();
  }
}",0.9951625907014244
116452,"public void run(){
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + clusterId_;
    LOG.error(msg);
  }
  Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
  while (members.size() > 0) {
    CloudControllerUtil.sleep(1000);
  }
  LOG.info(""String_Node_Str"" + clusterId_);
  deleteVolumes(ctxt);
  onClusterRemoval(clusterId_);
}","public void run(){
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + clusterId_;
    LOG.error(msg);
    return;
  }
  Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
  while (members.size() > 0) {
    CloudControllerUtil.sleep(1000);
  }
  LOG.info(""String_Node_Str"" + clusterId_);
  deleteVolumes(ctxt);
  onClusterRemoval(clusterId_);
}",0.9876543209876544
116453,"@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (ApplicationTerminatedEvent.class.getName().equals(type)) {
    if (!topology.isInitialized())     return false;
    ApplicationTerminatedEvent event=(ApplicationTerminatedEvent)Util.jsonToObject(message,ApplicationTerminatedEvent.class);
    TopologyUpdater.acquireWriteLockForApplication(event.getAppId());
    Set<ClusterDataHolder> clusterDataHolders=event.getClusterData();
    if (clusterDataHolders != null) {
      for (      ClusterDataHolder clusterData : clusterDataHolders) {
        TopologyUpdater.acquireWriteLockForService(clusterData.getServiceType());
      }
    }
    try {
      return doProcess(event,topology);
    }
  finally {
      TopologyUpdater.releaseWriteLockForApplication(event.getAppId());
      if (clusterDataHolders != null) {
        for (        ClusterDataHolder clusterData : clusterDataHolders) {
          TopologyUpdater.releaseWriteLockForService(clusterData.getServiceType());
        }
      }
    }
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"",type,message));
    }
  }
}","@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (ApplicationTerminatedEvent.class.getName().equals(type)) {
    if (!topology.isInitialized())     return false;
    ApplicationTerminatedEvent event=(ApplicationTerminatedEvent)Util.jsonToObject(message,ApplicationTerminatedEvent.class);
    TopologyUpdater.acquireWriteLockForApplications();
    Set<ClusterDataHolder> clusterDataHolders=event.getClusterData();
    if (clusterDataHolders != null) {
      for (      ClusterDataHolder clusterData : clusterDataHolders) {
        TopologyUpdater.acquireWriteLockForService(clusterData.getServiceType());
      }
    }
    try {
      return doProcess(event,topology);
    }
  finally {
      TopologyUpdater.releaseWriteLockForApplications();
      if (clusterDataHolders != null) {
        for (        ClusterDataHolder clusterData : clusterDataHolders) {
          TopologyUpdater.releaseWriteLockForService(clusterData.getServiceType());
        }
      }
    }
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"",type,message));
    }
  }
}",0.984932593180016
116454,"@Override public void connectionLost(Throwable arg0){
}","@Override public void connectionLost(Throwable throwable){
  log.warn(""String_Node_Str"",throwable);
}",0.6666666666666666
116455,"@Override public void messageArrived(String topicName,MqttMessage message) throws Exception {
  if (message instanceof MqttMessage) {
    TextMessage receivedMessage=new ActiveMQTextMessage();
    receivedMessage.setText(new String(message.getPayload()));
    receivedMessage.setStringProperty(Constants.EVENT_CLASS_NAME,Util.getEventNameForTopic(topicName));
    try {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",((TextMessage)message).getText()));
      }
      messageQueue.add(receivedMessage);
    }
 catch (    JMSException e) {
      log.error(e.getMessage(),e);
    }
  }
}","@Override public void messageArrived(String topicName,MqttMessage message) throws Exception {
  TextMessage textMessage=new ActiveMQTextMessage();
  textMessage.setText(new String(message.getPayload()));
  textMessage.setStringProperty(Constants.EVENT_CLASS_NAME,Util.getEventNameForTopic(topicName));
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",textMessage.getText()));
    }
    messageQueue.add(textMessage);
  }
 catch (  JMSException e) {
    log.error(e.getMessage(),e);
  }
}",0.8631211857018308
116456,"@Override public void deliveryComplete(IMqttDeliveryToken arg0){
}","@Override public void deliveryComplete(IMqttDeliveryToken deliveryToken){
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",((deliveryToken != null) ? deliveryToken.toString() : ""String_Node_Str"")));
  }
}",0.4175084175084175
116457,"public AbstractClusterMonitor(){
  readConfigurations();
}","public AbstractClusterMonitor(){
  readConfigurations();
  status=ClusterStatus.Created;
}",0.7837837837837838
116458,"public ClusterMonitor(String clusterId,String serviceId,DeploymentPolicy deploymentPolicy,AutoscalePolicy autoscalePolicy){
  this.clusterId=clusterId;
  this.serviceId=serviceId;
  this.autoscalerRuleEvaluator=new AutoscalerRuleEvaluator();
  this.scaleCheckKnowledgeSession=autoscalerRuleEvaluator.getScaleCheckStatefulSession();
  this.minCheckKnowledgeSession=autoscalerRuleEvaluator.getMinCheckStatefulSession();
  this.terminateDependencyKnowledgeSession=autoscalerRuleEvaluator.getTerminateDependencyStatefulSession();
  this.terminateAllKnowledgeSession=autoscalerRuleEvaluator.getTerminateAllStatefulSession();
  this.deploymentPolicy=deploymentPolicy;
  this.autoscalePolicy=autoscalePolicy;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicy);
  }
  networkPartitionCtxts=new ConcurrentHashMap<String,NetworkPartitionContext>();
  status=ClusterStatus.Created;
}","public ClusterMonitor(String clusterId,String serviceId,DeploymentPolicy deploymentPolicy,AutoscalePolicy autoscalePolicy){
  this.clusterId=clusterId;
  this.serviceId=serviceId;
  this.autoscalerRuleEvaluator=new AutoscalerRuleEvaluator();
  this.scaleCheckKnowledgeSession=autoscalerRuleEvaluator.getScaleCheckStatefulSession();
  this.minCheckKnowledgeSession=autoscalerRuleEvaluator.getMinCheckStatefulSession();
  this.terminateDependencyKnowledgeSession=autoscalerRuleEvaluator.getTerminateDependencyStatefulSession();
  this.terminateAllKnowledgeSession=autoscalerRuleEvaluator.getTerminateAllStatefulSession();
  this.deploymentPolicy=deploymentPolicy;
  this.autoscalePolicy=autoscalePolicy;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicy);
  }
  networkPartitionCtxts=new ConcurrentHashMap<String,NetworkPartitionContext>();
}",0.981941309255079
116459,"/** 
 * Constructor of GroupMonitor
 * @param group Takes the group from the Topology
 * @throws DependencyBuilderException    throws when couldn't build the Topology
 * @throws TopologyInConsistentException throws when topology is inconsistent
 */
public GroupMonitor(Group group,String appId) throws DependencyBuilderException, TopologyInConsistentException {
  super(group);
  this.appId=appId;
  this.setStatus(group.getStatus());
  startDependency();
}","/** 
 * Constructor of GroupMonitor
 * @param group Takes the group from the Topology
 * @throws DependencyBuilderException    throws when couldn't build the Topology
 * @throws TopologyInConsistentException throws when topology is inconsistent
 */
public GroupMonitor(Group group,String appId) throws DependencyBuilderException, TopologyInConsistentException {
  super(group);
  this.appId=appId;
  this.status=group.getStatus();
  startDependency();
}",0.9208791208791208
116460,"/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  ClusterMonitor clusterMonitor;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId);
        }
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    String autoscalePolicyName=cluster.getAutoscalePolicyName();
    String deploymentPolicyName=cluster.getDeploymentPolicyName();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + deploymentPolicyName);
      log.debug(""String_Node_Str"" + autoscalePolicyName);
    }
    AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
    DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
    if (deploymentPolicy == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    Partition[] allPartitions=deploymentPolicy.getAllPartitions();
    if (allPartitions == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
    clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
    clusterMonitor.setAppId(cluster.getAppId());
    for (    PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
      NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
      for (      Partition partition : partitionGroup.getPartitions()) {
        PartitionContext partitionContext=new PartitionContext(partition);
        partitionContext.setServiceName(cluster.getServiceName());
        partitionContext.setProperties(cluster.getProperties());
        partitionContext.setNetworkPartitionId(partitionGroup.getId());
        for (        Member member : cluster.getMembers()) {
          String memberId=member.getMemberId();
          if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
            MemberContext memberContext=new MemberContext();
            memberContext.setClusterId(member.getClusterId());
            memberContext.setMemberId(memberId);
            memberContext.setPartition(partition);
            memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
            if (MemberStatus.Activated.equals(member.getStatus())) {
              partitionContext.addActiveMember(memberContext);
            }
 else             if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
              partitionContext.addPendingMember(memberContext);
            }
 else             if (MemberStatus.Suspended.equals(member.getStatus())) {
            }
            partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
            if (log.isInfoEnabled()) {
              log.info(String.format(""String_Node_Str"",memberId));
            }
          }
        }
        if (cluster.hasMembers()) {
          StatusChecker.getInstance().onMemberStatusChange(clusterId);
        }
        networkPartitionContext.addPartitionContext(partitionContext);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
        }
      }
      clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
      clusterMonitor.setParent(parentMonitor);
      if (!parentMonitor.isHasDependent() && !context.hasChild()) {
        clusterMonitor.setHasDependent(true);
      }
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}","/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  ClusterMonitor clusterMonitor;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId);
        }
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    String autoscalePolicyName=cluster.getAutoscalePolicyName();
    String deploymentPolicyName=cluster.getDeploymentPolicyName();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + deploymentPolicyName);
      log.debug(""String_Node_Str"" + autoscalePolicyName);
    }
    AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
    DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
    if (deploymentPolicy == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    Partition[] allPartitions=deploymentPolicy.getAllPartitions();
    if (allPartitions == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
    clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
    clusterMonitor.setAppId(cluster.getAppId());
    for (    PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
      NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
      for (      Partition partition : partitionGroup.getPartitions()) {
        PartitionContext partitionContext=new PartitionContext(partition);
        partitionContext.setServiceName(cluster.getServiceName());
        partitionContext.setProperties(cluster.getProperties());
        partitionContext.setNetworkPartitionId(partitionGroup.getId());
        for (        Member member : cluster.getMembers()) {
          String memberId=member.getMemberId();
          if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
            MemberContext memberContext=new MemberContext();
            memberContext.setClusterId(member.getClusterId());
            memberContext.setMemberId(memberId);
            memberContext.setPartition(partition);
            memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
            if (MemberStatus.Activated.equals(member.getStatus())) {
              partitionContext.addActiveMember(memberContext);
            }
 else             if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
              partitionContext.addPendingMember(memberContext);
            }
 else             if (MemberStatus.Suspended.equals(member.getStatus())) {
            }
            partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
            if (log.isInfoEnabled()) {
              log.info(String.format(""String_Node_Str"",memberId));
            }
          }
        }
        networkPartitionContext.addPartitionContext(partitionContext);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
        }
      }
      clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
      clusterMonitor.setParent(parentMonitor);
      if (!parentMonitor.isHasDependent() && !context.hasChild()) {
        clusterMonitor.setHasDependent(true);
      }
      AutoscalerContext.getInstance().addMonitor(clusterMonitor);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
    if (!cluster.hasMembers()) {
      StatusChecker.getInstance().onMemberStatusChange(clusterId);
    }
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}",0.974027141188101
116461,"public void run(){
  Monitor monitor=null;
  int retries=5;
  boolean success;
  do {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e1) {
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId());
    }
    try {
      monitor=ApplicationMonitorFactory.getMonitor(parent,context,appId);
    }
 catch (    DependencyBuilderException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
catch (    TopologyInConsistentException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
catch (    PolicyValidationException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
catch (    PartitionValidationException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
    success=true;
  }
 while (!success && retries != 0);
  if (monitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + context.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  AutoscalerContext.getInstance().addMonitor(monitor);
  aliasToActiveMonitorsMap.put(context.getId(),monitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",context.getId()));
  }
}","public void run(){
  Monitor monitor=null;
  int retries=5;
  boolean success;
  do {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e1) {
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId());
    }
    try {
      monitor=ApplicationMonitorFactory.getMonitor(parent,context,appId);
    }
 catch (    DependencyBuilderException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
catch (    TopologyInConsistentException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
catch (    PolicyValidationException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
catch (    PartitionValidationException e) {
      String msg=""String_Node_Str"" + context.getId();
      log.warn(msg,e);
      retries--;
    }
    success=true;
  }
 while (!success && retries != 0);
  if (monitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + context.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  aliasToActiveMonitorsMap.put(context.getId(),monitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",context.getId()));
  }
}",0.8860473862354269
116462,"public void setStatus(ClusterStatus status){
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId,this.status,status));
  this.status=status;
  if (status == ClusterStatus.Inactive && !this.hasDependent) {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,this.status,this.clusterId);
  }
}","public void setStatus(ClusterStatus status){
  log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId,this.status,status));
  this.status=status;
  if (!(status == ClusterStatus.Inactive && !this.hasDependent)) {
    MonitorStatusEventBuilder.handleClusterStatusEvent(this.parent,this.status,this.clusterId);
  }
}",0.9954337899543378
116463,"/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  ClusterMonitor clusterMonitor;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId);
        }
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    String autoscalePolicyName=cluster.getAutoscalePolicyName();
    String deploymentPolicyName=cluster.getDeploymentPolicyName();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + deploymentPolicyName);
      log.debug(""String_Node_Str"" + autoscalePolicyName);
    }
    AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
    DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
    if (deploymentPolicy == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    Partition[] allPartitions=deploymentPolicy.getAllPartitions();
    if (allPartitions == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
    clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
    clusterMonitor.setAppId(cluster.getAppId());
    for (    PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
      NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
      for (      Partition partition : partitionGroup.getPartitions()) {
        PartitionContext partitionContext=new PartitionContext(partition);
        partitionContext.setServiceName(cluster.getServiceName());
        partitionContext.setProperties(cluster.getProperties());
        partitionContext.setNetworkPartitionId(partitionGroup.getId());
        for (        Member member : cluster.getMembers()) {
          String memberId=member.getMemberId();
          if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
            MemberContext memberContext=new MemberContext();
            memberContext.setClusterId(member.getClusterId());
            memberContext.setMemberId(memberId);
            memberContext.setPartition(partition);
            memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
            if (MemberStatus.Activated.equals(member.getStatus())) {
              partitionContext.addActiveMember(memberContext);
            }
 else             if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
              partitionContext.addPendingMember(memberContext);
            }
 else             if (MemberStatus.Suspended.equals(member.getStatus())) {
            }
            partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
            if (log.isInfoEnabled()) {
              log.info(String.format(""String_Node_Str"",memberId));
            }
          }
        }
        networkPartitionContext.addPartitionContext(partitionContext);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
        }
      }
      clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
      clusterMonitor.setParent(parentMonitor);
      if (!parentMonitor.isHasDependent() && !context.hasChild()) {
        clusterMonitor.setHasDependent(true);
      }
      AutoscalerContext.getInstance().addMonitor(clusterMonitor);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
    if (!cluster.hasMembers()) {
      StatusChecker.getInstance().onMemberStatusChange(clusterId);
    }
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}","/** 
 * Updates ClusterContext for given cluster
 * @param parentMonitor parent of the monitor
 * @param context
 * @return ClusterMonitor - Updated ClusterContext
 * @throws org.apache.stratos.autoscaler.exception.PolicyValidationException
 * @throws org.apache.stratos.autoscaler.exception.PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(ParentComponentMonitor parentMonitor,ClusterContext context,String appId) throws PolicyValidationException, PartitionValidationException, TopologyInConsistentException {
  String clusterId=context.getId();
  String serviceName=context.getServiceName();
  Cluster cluster;
  ClusterMonitor clusterMonitor;
  TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
  try {
    Topology topology=TopologyManager.getTopology();
    if (topology.serviceExists(serviceName)) {
      Service service=topology.getService(serviceName);
      if (service.clusterExists(clusterId)) {
        cluster=service.getCluster(clusterId);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId);
        }
      }
 else {
        String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
        throw new TopologyInConsistentException(msg);
      }
    }
 else {
      String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
      throw new TopologyInConsistentException(msg);
    }
    String autoscalePolicyName=cluster.getAutoscalePolicyName();
    String deploymentPolicyName=cluster.getDeploymentPolicyName();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + deploymentPolicyName);
      log.debug(""String_Node_Str"" + autoscalePolicyName);
    }
    AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
    DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
    if (deploymentPolicy == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    Partition[] allPartitions=deploymentPolicy.getAllPartitions();
    if (allPartitions == null) {
      String msg=""String_Node_Str"" + deploymentPolicyName;
      log.error(msg);
      throw new PolicyValidationException(msg);
    }
    CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
    clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
    for (    PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
      NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
      for (      Partition partition : partitionGroup.getPartitions()) {
        PartitionContext partitionContext=new PartitionContext(partition);
        partitionContext.setServiceName(cluster.getServiceName());
        partitionContext.setProperties(cluster.getProperties());
        partitionContext.setNetworkPartitionId(partitionGroup.getId());
        for (        Member member : cluster.getMembers()) {
          String memberId=member.getMemberId();
          if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
            MemberContext memberContext=new MemberContext();
            memberContext.setClusterId(member.getClusterId());
            memberContext.setMemberId(memberId);
            memberContext.setPartition(partition);
            memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
            if (MemberStatus.Activated.equals(member.getStatus())) {
              partitionContext.addActiveMember(memberContext);
            }
 else             if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
              partitionContext.addPendingMember(memberContext);
            }
 else             if (MemberStatus.Suspended.equals(member.getStatus())) {
            }
            partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
            if (log.isInfoEnabled()) {
              log.info(String.format(""String_Node_Str"",memberId));
            }
          }
        }
        networkPartitionContext.addPartitionContext(partitionContext);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
        }
      }
      clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
      clusterMonitor.setParent(parentMonitor);
      if (!parentMonitor.isHasDependent() && !context.hasChild()) {
        clusterMonitor.setHasDependent(true);
      }
      AutoscalerContext.getInstance().addMonitor(clusterMonitor);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
    }
    if (cluster.getStatus() != clusterMonitor.getStatus()) {
      clusterMonitor.setStatus(cluster.getStatus());
    }
    if (!cluster.hasMembers()) {
      StatusChecker.getInstance().onMemberStatusChange(clusterId);
    }
  }
  finally {
    TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}",0.9955986706188809
116464,"public void setParent(ParentComponentMonitor parent){
  this.parent=parent;
}","public void setParent(ParentComponentMonitor parent){
  this.parent=parent;
  this.appId=parent.getAppId();
}",0.8279569892473119
116465,"public ParentComponentMonitor(ParentComponent component) throws DependencyBuilderException {
  aliasToActiveMonitorsMap=new HashMap<String,Monitor>();
  this.id=component.getUniqueIdentifier();
  dependencyTree=DependencyBuilder.getInstance().buildDependency(component);
}","public ParentComponentMonitor(ParentComponent component) throws DependencyBuilderException {
  aliasToActiveMonitorsMap=new HashMap<String,Monitor>();
  aliasToInActiveMonitorsMap=new HashMap<String,Monitor>();
  this.id=component.getUniqueIdentifier();
  dependencyTree=DependencyBuilder.getInstance().buildDependency(component);
}",0.9006622516556292
116466,"/** 
 * Retrieves the previous state
 * @return previous state
 */
public T getPreviousState(){
  return stateStack.get(1);
}","/** 
 * Retrieves the previous state
 * @return previous state
 */
public T getPreviousState(){
  return stateStack.get(stateStack.size() - 2);
}",0.9185185185185184
116467,"private boolean getClusterStatus(Map<String,ClusterDataHolder> clusterData){
  boolean clusterActiveStatus=false;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    Service service=TopologyManager.getTopology().getService(clusterDataHolderEntry.getValue().getServiceType());
    if (service.getCluster(clusterDataHolderEntry.getValue().getClusterId()).getStatus() == Status.Activated) {
      clusterActiveStatus=true;
    }
 else {
      clusterActiveStatus=false;
    }
  }
  return clusterActiveStatus;
}","private boolean getClusterStatus(Map<String,ClusterDataHolder> clusterData){
  boolean clusterActiveStatus=false;
  for (  Map.Entry<String,ClusterDataHolder> clusterDataHolderEntry : clusterData.entrySet()) {
    Service service=TopologyManager.getTopology().getService(clusterDataHolderEntry.getValue().getServiceType());
    if (service.getCluster(clusterDataHolderEntry.getValue().getClusterId()).getStatus() == Status.Activated) {
      clusterActiveStatus=true;
    }
 else {
      clusterActiveStatus=false;
      break;
    }
  }
  return clusterActiveStatus;
}",0.9884444444444443
116468,"/** 
 * @param clusterId1
 */
public void onMemberStatusChange(String clusterId1){
  final String clusterId=clusterId1;
  Runnable exCluster=new Runnable(){
    public void run(){
      ClusterMonitor monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
      boolean clusterActive=false;
      for (      NetworkPartitionContext networkPartitionContext : monitor.getNetworkPartitionCtxts().values()) {
        for (        PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
          if (partitionContext.getMinimumMemberCount() == partitionContext.getActiveMemberCount()) {
            clusterActive=true;
          }
 else           if (partitionContext.getActiveMemberCount() > partitionContext.getMinimumMemberCount()) {
            log.info(""String_Node_Str"");
            clusterActive=true;
          }
 else {
            clusterActive=false;
          }
        }
      }
      if (clusterActive) {
        StatusEventPublisher.sendClusterActivatedEvent(monitor.getAppId(),monitor.getServiceId(),monitor.getClusterId());
      }
    }
  }
;
  Thread clusterThread=new Thread(exCluster);
  clusterThread.start();
}","/** 
 * Calculating whether the cluster has all min instances as active and send the ClusterActivatedEvent.
 * @param clusterId id of the cluster
 */
public void onMemberStatusChange(String clusterId){
  ClusterMonitor monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
  boolean clusterActive=clusterActive(monitor);
  if (clusterActive) {
    StatusEventPublisher.sendClusterActivatedEvent(monitor.getAppId(),monitor.getServiceId(),monitor.getClusterId());
  }
}",0.2533333333333333
116469,"private boolean getGroupStatus(Map<String,Group> groups){
  boolean groupActiveStatus=false;
  for (  Group group : groups.values()) {
    if (group.getStatus() == Status.Activated) {
      groupActiveStatus=true;
    }
 else {
      groupActiveStatus=false;
    }
  }
  return groupActiveStatus;
}","private boolean getGroupStatus(Map<String,Group> groups){
  boolean groupActiveStatus=false;
  for (  Group group : groups.values()) {
    if (group.getStatus() == Status.Activated) {
      groupActiveStatus=true;
    }
 else {
      groupActiveStatus=false;
      break;
    }
  }
  return groupActiveStatus;
}",0.9786535303776684
116470,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        TopologyManager.acquireReadLock();
        try {
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application.getUniqueIdentifier());
          }
          topologyInitialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
        try {
          TopologyManager.acquireReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
          startApplicationMonitor(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          TopologyManager.releaseReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(Status.Activated);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupActivatedEvent groupActivatedEvent=(GroupActivatedEvent)event;
      String appId=groupActivatedEvent.getAppId();
      String groupId=groupActivatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(Status.Activated);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationActivatedEvent applicationActivatedEvent=(ApplicationActivatedEvent)event;
      String appId=applicationActivatedEvent.getAppId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      appMonitor.setStatus(Status.Activated);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationRemovedEvent applicationRemovedEvent=(ApplicationRemovedEvent)event;
      TopologyManager.acquireReadLockForApplication(applicationRemovedEvent.getApplicationId());
      try {
      }
  finally {
        TopologyManager.releaseReadLockForApplication(applicationRemovedEvent.getApplicationId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterMaintenanceModeEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterMaintenanceModeEvent clusterMaitenanceEvent=null;
      try {
        log.info(""String_Node_Str"" + event);
        clusterMaitenanceEvent=(ClusterMaintenanceModeEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterMaitenanceEvent.getServiceName(),clusterMaitenanceEvent.getClusterId());
        Service service=TopologyManager.getTopology().getService(clusterMaitenanceEvent.getServiceName());
        Cluster cluster=service.getCluster(clusterMaitenanceEvent.getClusterId());
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist((cluster.getClusterId()))) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterMaitenanceEvent.getClusterId());
          monitor.setStatus(Status.In_Active);
        }
 else         if (AutoscalerContext.getInstance().lbMonitorExist((cluster.getClusterId()))) {
          AutoscalerContext.getInstance().getLBMonitor(clusterMaitenanceEvent.getClusterId()).setStatus(clusterMaitenanceEvent.getStatus());
        }
 else {
          log.error(""String_Node_Str"" + cluster.toString());
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterMaitenanceEvent.getServiceName(),clusterMaitenanceEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      if (!topologyInitialized) {
        TopologyManager.acquireReadLock();
        try {
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application.getUniqueIdentifier());
          }
          topologyInitialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event.getClass());
        ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
        try {
          TopologyManager.acquireReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
          startApplicationMonitor(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"" + e.getLocalizedMessage();
          log.error(msg,e);
        }
 finally {
          TopologyManager.releaseReadLockForApplication(applicationCreatedEvent.getApplication().getUniqueIdentifier());
        }
      }
 catch (      ClassCastException e) {
        String msg=""String_Node_Str"" + e.getLocalizedMessage();
        log.error(msg,e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      AbstractClusterMonitor clusterMonitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
      clusterMonitor.setStatus(Status.Activated);
    }
  }
);
  topologyEventReceiver.addEventListener(new GroupActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      GroupActivatedEvent groupActivatedEvent=(GroupActivatedEvent)event;
      String appId=groupActivatedEvent.getAppId();
      String groupId=groupActivatedEvent.getGroupId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      GroupMonitor monitor=(GroupMonitor)appMonitor.findGroupMonitorWithId(groupId);
      monitor.setStatus(Status.Activated);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationActivatedEvent applicationActivatedEvent=(ApplicationActivatedEvent)event;
      String appId=applicationActivatedEvent.getAppId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      appMonitor.setStatus(Status.Activated);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationRemovedEvent applicationRemovedEvent=(ApplicationRemovedEvent)event;
      TopologyManager.acquireReadLockForApplication(applicationRemovedEvent.getApplicationId());
      try {
      }
  finally {
        TopologyManager.releaseReadLockForApplication(applicationRemovedEvent.getApplicationId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterMaintenanceModeEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterMaintenanceModeEvent clusterMaitenanceEvent=null;
      try {
        log.info(""String_Node_Str"" + event);
        clusterMaitenanceEvent=(ClusterMaintenanceModeEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterMaitenanceEvent.getServiceName(),clusterMaitenanceEvent.getClusterId());
        Service service=TopologyManager.getTopology().getService(clusterMaitenanceEvent.getServiceName());
        Cluster cluster=service.getCluster(clusterMaitenanceEvent.getClusterId());
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist((cluster.getClusterId()))) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterMaitenanceEvent.getClusterId());
          monitor.setStatus(Status.In_Maintenance);
        }
 else         if (AutoscalerContext.getInstance().lbMonitorExist((cluster.getClusterId()))) {
          AutoscalerContext.getInstance().getLBMonitor(clusterMaitenanceEvent.getClusterId()).setStatus(clusterMaitenanceEvent.getStatus());
        }
 else {
          log.error(""String_Node_Str"" + cluster.toString());
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterMaitenanceEvent.getServiceName(),clusterMaitenanceEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      ClusterRemovedEvent clusterRemovedEvent=null;
      try {
        clusterRemovedEvent=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
        String clusterId=clusterRemovedEvent.getClusterId();
        String deploymentPolicy=clusterRemovedEvent.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (clusterRemovedEvent.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberTerminatedEvent memberTerminatedEvent=null;
      try {
        memberTerminatedEvent=(MemberTerminatedEvent)event;
        String networkPartitionId=memberTerminatedEvent.getNetworkPartitionId();
        String clusterId=memberTerminatedEvent.getClusterId();
        String partitionId=memberTerminatedEvent.getPartitionId();
        AbstractClusterMonitor monitor;
        TopologyManager.acquireReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=memberTerminatedEvent.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        StatusChecker.getInstance().onMemberTermination(clusterId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      TopologyManager.acquireReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      try {
        String networkPartitionId=memberActivatedEvent.getNetworkPartitionId();
        String clusterId=memberActivatedEvent.getClusterId();
        String partitionId=memberActivatedEvent.getPartitionId();
        String memberId=memberActivatedEvent.getMemberId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId());
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
      TopologyManager.acquireReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      try {
        String memberId=memberMaintenanceModeEvent.getMemberId();
        String partitionId=memberMaintenanceModeEvent.getPartitionId();
        String networkPartitionId=memberMaintenanceModeEvent.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=memberMaintenanceModeEvent.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=(AbstractClusterMonitor)AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLockForCluster(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId());
      }
    }
  }
);
}",0.9994980759578384
116471,"@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  Status status1=statusEvent.getStatus();
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(id);
  if (!isParent(id)) {
    if (status1 == Status.Activated) {
      try {
        boolean startDep=startDependency(statusEvent.getId());
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + startDep + ""String_Node_Str""+ id);
        }
        if (startDep) {
          context.setCurrentStatus(Status.Created);
          context.addStatusToLIfeCycle(Status.Created);
        }
 else {
          StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
        }
      }
 catch (      TopologyInConsistentException e) {
        log.error(e);
      }
    }
 else     if (status1 == Status.In_Active) {
      List<ApplicationContext> terminationList=new ArrayList<ApplicationContext>();
      terminationList=this.dependencyTree.getTerminationDependencies(id);
      for (      ApplicationContext terminationContext : terminationList) {
      }
    }
 else {
      List<ApplicationContext> dependents=this.dependencyTree.getTerminationDependencies(id);
    }
  }
 else   if (status1 == Status.Created) {
  }
}","@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  Status status1=statusEvent.getStatus();
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(id);
  if (!isParent(id)) {
    if (status1 == Status.Activated) {
      try {
        boolean startDep=startDependency(statusEvent.getId());
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + startDep + ""String_Node_Str""+ id);
        }
        if (startDep) {
          context.setCurrentStatus(Status.Created);
          context.addStatusToLIfeCycle(Status.Created);
        }
 else {
          StatusChecker.getInstance().onChildStatusChange(id,this.id,this.appId);
        }
      }
 catch (      TopologyInConsistentException e) {
        log.error(e);
      }
    }
 else     if (status1 == Status.In_Maintenance) {
      List<ApplicationContext> terminationList=new ArrayList<ApplicationContext>();
      terminationList=this.dependencyTree.getTerminationDependencies(id);
      for (      ApplicationContext terminationContext : terminationList) {
      }
    }
 else {
      List<ApplicationContext> dependents=this.dependencyTree.getTerminationDependencies(id);
    }
  }
 else   if (status1 == Status.Created) {
  }
}",0.9940968122786304
116472,"private boolean doProcess(GroupActivatedEvent event,Topology topology){
  Application application=topology.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
  Group group=application.getGroupRecursively(event.getGroupId());
  if (group == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId(),event.getGroupId()));
    }
  }
 else {
    group.setStatus(Status.Activated);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",group.toString()));
    }
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(GroupActivatedEvent event,Topology topology){
  Application application=topology.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
  Group group=application.getGroupRecursively(event.getGroupId());
  if (group == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId(),event.getGroupId()));
    }
  }
 else {
    group.setStatus(Status.Activated);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",group.getUniqueIdentifier()));
    }
  }
  notifyEventListeners(event);
  return true;
}",0.981263011797363
116473,"/** 
 * Constructor of GroupMonitor
 * @param group Takes the group from the Topology
 * @throws DependencyBuilderException throws when couldn't build the Topology
 * @throws TopologyInConsistentException throws when topology is inconsistent
 */
public GroupMonitor(Group group) throws DependencyBuilderException, TopologyInConsistentException {
  super(group);
  this.id=group.getAlias();
  startDependency();
}","/** 
 * Constructor of GroupMonitor
 * @param group Takes the group from the Topology
 * @throws DependencyBuilderException throws when couldn't build the Topology
 * @throws TopologyInConsistentException throws when topology is inconsistent
 */
public GroupMonitor(Group group) throws DependencyBuilderException, TopologyInConsistentException {
  super(group);
  this.id=group.getAlias();
  startDependency();
  this.status=Status.Created;
}",0.9648711943793912
116474,"@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(id);
  if (context.getStatusLifeCycle().isEmpty()) {
    try {
      boolean startDep=startDependency(statusEvent.getId());
      context.setStatus(statusEvent.getStatus());
      context.addStatusToLIfeCycle(statusEvent.getStatus());
      if (!startDep) {
        StatusChecker.getInstance().onChildStatusChange(id,this.component,this.appId);
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(e);
    }
  }
 else {
  }
}","@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(id);
  if (context.getStatusLifeCycle().isEmpty()) {
    try {
      boolean startDep=startDependency(statusEvent.getId());
      log.info(""String_Node_Str"" + startDep + ""String_Node_Str""+ id);
      context.setStatus(statusEvent.getStatus());
      context.addStatusToLIfeCycle(statusEvent.getStatus());
      if (!startDep) {
        StatusChecker.getInstance().onChildStatusChange(id,this.component,this.appId);
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(e);
    }
  }
 else {
  }
}",0.9470499243570348
116475,"private void updateChild(final String idOfChild,final ParentComponent component,final String appId){
  Runnable group=new Runnable(){
    public void run(){
      try {
        TopologyManager.acquireReadLockForApplication(appId);
        Map<String,ClusterDataHolder> clusterIds=component.getClusterDataMap();
        Map<String,Group> groups=component.getAliasToGroupMap();
        updateChildStatus(appId,idOfChild,groups,clusterIds,component);
      }
  finally {
        TopologyManager.releaseReadLockForApplication(appId);
      }
    }
  }
;
  Thread groupThread=new Thread(group);
  groupThread.start();
}","private void updateChild(final String idOfChild,final ParentComponent component,final String appId){
  Runnable group=new Runnable(){
    public void run(){
      try {
        TopologyManager.acquireReadLockForApplication(appId);
        ParentComponent component1=TopologyManager.getTopology().getApplication(appId).getGroupRecursively(component.getUniqueIdentifier());
        Map<String,ClusterDataHolder> clusterIds=component1.getClusterDataMap();
        Map<String,Group> groups=component1.getAliasToGroupMap();
        updateChildStatus(appId,idOfChild,groups,clusterIds,component1);
      }
  finally {
        TopologyManager.releaseReadLockForApplication(appId);
      }
    }
  }
;
  Thread groupThread=new Thread(group);
  groupThread.start();
}",0.8950437317784257
116476,"private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean groupActive=false;
  boolean clustersActive;
  boolean groupsActive;
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    if (!clusterData.isEmpty() && !groups.isEmpty()) {
      clustersActive=getClusterStatus(clusterData);
      groupsActive=getGroupStatus(groups);
      groupActive=clustersActive && groupsActive;
    }
 else     if (!groups.isEmpty()) {
      groupsActive=getGroupStatus(groups);
      groupActive=groupsActive;
    }
 else     if (!clusterData.isEmpty()) {
      clustersActive=getClusterStatus(clusterData);
      groupActive=clustersActive;
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    if (parent instanceof Application && groupActive) {
      StatusEventPublisher.sendApplicationActivatedEvent(appId);
    }
 else     if (parent instanceof Group && groupActive) {
      StatusEventPublisher.sendGroupActivatedEvent(appId,((Group)parent).getAlias());
    }
    return childFound;
  }
 else {
    if (!groups.isEmpty()) {
      for (      Group group : groups.values()) {
        return updateChildStatus(appId,id,group.getAliasToGroupMap(),group.getClusterDataMap(),group);
      }
    }
  }
  return childFound;
}","private boolean updateChildStatus(String appId,String id,Map<String,Group> groups,Map<String,ClusterDataHolder> clusterData,ParentComponent parent){
  boolean groupActive=false;
  boolean clustersActive;
  boolean groupsActive;
  boolean childFound=false;
  boolean clusterFound=false;
  for (  ClusterDataHolder clusterDataHolder : clusterData.values()) {
    if (clusterDataHolder.getClusterId().equals(id)) {
      clusterFound=true;
    }
  }
  log.info(""String_Node_Str"" + clusterFound);
  if (clusterFound || groups.containsKey(id)) {
    childFound=true;
    if (!clusterData.isEmpty() && !groups.isEmpty()) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterFound);
      }
      clustersActive=getClusterStatus(clusterData);
      groupsActive=getGroupStatus(groups);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clustersActive + ""String_Node_Str""+ groupActive);
      }
      groupActive=clustersActive && groupsActive;
    }
 else     if (!groups.isEmpty()) {
      groupsActive=getGroupStatus(groups);
      if (log.isDebugEnabled()) {
        log.info(""String_Node_Str"" + clusterFound);
      }
      groupActive=groupsActive;
    }
 else     if (!clusterData.isEmpty()) {
      clustersActive=getClusterStatus(clusterData);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clustersActive + ""String_Node_Str""+ groupActive);
      }
      groupActive=clustersActive;
    }
 else {
      log.warn(""String_Node_Str"" + appId);
    }
    if (parent instanceof Application && groupActive) {
      log.info(""String_Node_Str"" + appId);
      StatusEventPublisher.sendApplicationActivatedEvent(appId);
    }
 else     if (parent instanceof Group && groupActive) {
      log.info(""String_Node_Str"" + parent.getUniqueIdentifier());
      StatusEventPublisher.sendGroupActivatedEvent(appId,parent.getUniqueIdentifier());
    }
    return childFound;
  }
 else {
    if (!groups.isEmpty()) {
      for (      Group group : groups.values()) {
        return updateChildStatus(appId,id,group.getAliasToGroupMap(),group.getClusterDataMap(),group);
      }
    }
  }
  return childFound;
}",0.799140708915145
116477,"public static void plainTextWarn(final String elt){
  log.warn(""String_Node_Str"" + elt + ""String_Node_Str""+ ""String_Node_Str"");
}","public static void plainTextWarn(final String elt){
  LOG.warn(""String_Node_Str"" + elt + ""String_Node_Str""+ ""String_Node_Str"");
}",0.9767441860465116
116478,"/** 
 * @param xpath XPATH expression to be read.
 * @param elt OMElement to be used for the search.
 * @return List matching OMNode list
 */
@SuppressWarnings(""String_Node_Str"") public static OMNode getFirstMatchingNode(final String xpath,final OMElement elt) throws MalformedConfigurationFileException {
  AXIOMXPath axiomXpath;
  List<OMNode> nodeList=null;
  try {
    axiomXpath=new AXIOMXPath(xpath);
    nodeList=axiomXpath.selectNodes(elt);
    return nodeList.isEmpty() ? null : nodeList.get(0);
  }
 catch (  JaxenException e) {
    String msg=""String_Node_Str"" + xpath + ""String_Node_Str"";
    log.error(msg,e);
    throw new MalformedConfigurationFileException(msg,e);
  }
}","/** 
 * @param xpath XPATH expression to be read.
 * @param elt OMElement to be used for the search.
 * @return List matching OMNode list
 */
@SuppressWarnings(""String_Node_Str"") public static OMNode getFirstMatchingNode(final String xpath,final OMElement elt) throws MalformedConfigurationFileException {
  AXIOMXPath axiomXpath;
  List<OMNode> nodeList=null;
  try {
    axiomXpath=new AXIOMXPath(xpath);
    nodeList=axiomXpath.selectNodes(elt);
    return nodeList.isEmpty() ? null : nodeList.get(0);
  }
 catch (  JaxenException e) {
    String msg=""String_Node_Str"" + xpath + ""String_Node_Str"";
    LOG.error(msg,e);
    throw new MalformedConfigurationFileException(msg,e);
  }
}",0.9956268221574344
116479,"/** 
 * @param xpath XPATH expression to be read.
 * @param elt OMElement to be used for the search.
 * @return List matching OMNode list
 */
@SuppressWarnings(""String_Node_Str"") public static List<OMNode> getMatchingNodes(final String xpath,final OMElement elt) throws MalformedConfigurationFileException {
  AXIOMXPath axiomXpath;
  List<OMNode> nodeList=null;
  try {
    axiomXpath=new AXIOMXPath(xpath);
    nodeList=axiomXpath.selectNodes(elt);
    return nodeList;
  }
 catch (  JaxenException e) {
    String msg=""String_Node_Str"" + xpath + ""String_Node_Str"";
    log.error(msg,e);
    throw new MalformedConfigurationFileException(msg,e);
  }
}","/** 
 * @param xpath XPATH expression to be read.
 * @param elt OMElement to be used for the search.
 * @return List matching OMNode list
 */
@SuppressWarnings(""String_Node_Str"") public static List<OMNode> getMatchingNodes(final String xpath,final OMElement elt) throws MalformedConfigurationFileException {
  AXIOMXPath axiomXpath;
  List<OMNode> nodeList=null;
  try {
    axiomXpath=new AXIOMXPath(xpath);
    nodeList=axiomXpath.selectNodes(elt);
    return nodeList;
  }
 catch (  JaxenException e) {
    String msg=""String_Node_Str"" + xpath + ""String_Node_Str"";
    LOG.error(msg,e);
    throw new MalformedConfigurationFileException(msg,e);
  }
}",0.9954058192955588
116480,"public static OMElement parse(File xmlSource) throws MalformedConfigurationFileException, IllegalArgumentException {
  OMElement documentElement;
  if (xmlSource == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  try {
    documentElement=new StAXOMBuilder(xmlSource.getPath()).getDocumentElement();
    return documentElement;
  }
 catch (  XMLStreamException e) {
    String msg=""String_Node_Str"" + xmlSource.getPath();
    log.error(msg,e);
    throw new MalformedConfigurationFileException(msg,e);
  }
catch (  FileNotFoundException e) {
    String msg=""String_Node_Str"" + xmlSource.getPath();
    log.error(msg);
    throw new MalformedConfigurationFileException(msg);
  }
}","public static OMElement parse(File xmlSource) throws MalformedConfigurationFileException, IllegalArgumentException {
  OMElement documentElement;
  if (xmlSource == null) {
    String msg=""String_Node_Str"";
    LOG.error(msg);
    throw new IllegalArgumentException(msg);
  }
  try {
    documentElement=new StAXOMBuilder(xmlSource.getPath()).getDocumentElement();
    return documentElement;
  }
 catch (  XMLStreamException e) {
    String msg=""String_Node_Str"" + xmlSource.getPath();
    LOG.error(msg,e);
    throw new MalformedConfigurationFileException(msg,e);
  }
catch (  FileNotFoundException e) {
    String msg=""String_Node_Str"" + xmlSource.getPath();
    LOG.error(msg);
    throw new MalformedConfigurationFileException(msg);
  }
}",0.9879032258064516
116481,"private static void neglectingWarn(final String fileName,final String elt,final int size){
  if (size > 1) {
    log.warn(fileName + ""String_Node_Str"" + elt+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}","private static void neglectingWarn(final String fileName,final String elt,final int size){
  if (size > 1) {
    LOG.warn(fileName + ""String_Node_Str"" + elt+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.9851485148514852
116482,"@Override public MemberContext[] startContainers(ContainerClusterContext containerClusterContext) throws UnregisteredCartridgeException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (containerClusterContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=containerClusterContext.getClusterId();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + containerClusterContext.toString());
  }
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + containerClusterContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ containerClusterContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  try {
    String minReplicas=validateProperty(StratosConstants.KUBERNETES_MIN_REPLICAS,ctxt);
    String kubernetesClusterId=validateProperty(StratosConstants.KUBERNETES_CLUSTER_ID,ctxt);
    String kubernetesMasterIp=validateProperty(StratosConstants.KUBERNETES_MASTER_IP,containerClusterContext);
    String kubernetesPortRange=validateProperty(StratosConstants.KUBERNETES_PORT_RANGE,containerClusterContext);
    KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesPortRange);
    KubernetesApiClient kubApi=kubClusterContext.getKubApi();
    ContainerClusterContextToReplicationController controllerFunction=new ContainerClusterContextToReplicationController();
    ReplicationController controller=controllerFunction.apply(containerClusterContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createReplicationController(controller);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    ContainerClusterContextToKubernetesService serviceFunction=new ContainerClusterContextToKubernetesService();
    Service service=serviceFunction.apply(containerClusterContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + service + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createService(service);
    ctxt.addProperty(StratosConstants.ALLOCATED_SERVICE_HOST_PORT,service.getPort());
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    Label l=new Label();
    l.setName(clusterId);
    Pod[] newlyCreatedPods=new Pod[0];
    int expectedCount=Integer.parseInt(minReplicas);
    for (int i=0; i < expectedCount; i++) {
      newlyCreatedPods=kubApi.getSelectedPods(new Label[]{l});
      log.info(""String_Node_Str"" + newlyCreatedPods.length);
      if (newlyCreatedPods.length == expectedCount) {
        break;
      }
      Thread.sleep(5000);
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",newlyCreatedPods.length,clusterId));
    }
    List<MemberContext> memberContexts=new ArrayList<MemberContext>();
    PodToMemberContext podToMemberContextFunc=new PodToMemberContext();
    for (    Pod pod : newlyCreatedPods) {
      MemberContext context=podToMemberContextFunc.apply(pod);
      context.setCartridgeType(cartridgeType);
      context.setClusterId(clusterId);
      context.setProperties(CloudControllerUtil.addProperty(context.getProperties(),StratosConstants.ALLOCATED_SERVICE_HOST_PORT,String.valueOf(service.getPort())));
      dataHolder.addMemberContext(context);
      TopologyBuilder.handleMemberSpawned(cartridgeType,clusterId,null,kubernetesMasterIp,kubernetesMasterIp,context);
      memberContexts.add(context);
    }
    persist();
    log.info(""String_Node_Str"" + memberContexts);
    return memberContexts.toArray(new MemberContext[0]);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + containerClusterContext.toString() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}","@Override public MemberContext[] startContainers(ContainerClusterContext containerClusterContext) throws UnregisteredCartridgeException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (containerClusterContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=containerClusterContext.getClusterId();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + containerClusterContext.toString());
  }
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + containerClusterContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ containerClusterContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  try {
    String minReplicas=validateProperty(StratosConstants.KUBERNETES_MIN_REPLICAS,ctxt);
    String kubernetesClusterId=validateProperty(StratosConstants.KUBERNETES_CLUSTER_ID,ctxt);
    String kubernetesMasterIp=validateProperty(StratosConstants.KUBERNETES_MASTER_IP,containerClusterContext);
    String kubernetesPortRange=validateProperty(StratosConstants.KUBERNETES_PORT_RANGE,containerClusterContext);
    KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesPortRange);
    KubernetesApiClient kubApi=kubClusterContext.getKubApi();
    ContainerClusterContextToReplicationController controllerFunction=new ContainerClusterContextToReplicationController();
    ReplicationController controller=controllerFunction.apply(containerClusterContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createReplicationController(controller);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    ContainerClusterContextToKubernetesService serviceFunction=new ContainerClusterContextToKubernetesService();
    Service service=serviceFunction.apply(containerClusterContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + service + ""String_Node_Str""+ containerClusterContext+ ""String_Node_Str"");
    }
    kubApi.createService(service);
    ctxt.addProperty(StratosConstants.ALLOCATED_SERVICE_HOST_PORT,service.getPort());
    dataHolder.addClusterContext(ctxt);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    Label l=new Label();
    l.setName(clusterId);
    Pod[] newlyCreatedPods=new Pod[0];
    int expectedCount=Integer.parseInt(minReplicas);
    for (int i=0; i < expectedCount; i++) {
      newlyCreatedPods=kubApi.getSelectedPods(new Label[]{l});
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + newlyCreatedPods.length + ""String_Node_Str""+ clusterId);
      }
      if (newlyCreatedPods.length == expectedCount) {
        break;
      }
      Thread.sleep(5000);
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",newlyCreatedPods.length,clusterId));
    }
    List<MemberContext> memberContexts=new ArrayList<MemberContext>();
    PodToMemberContext podToMemberContextFunc=new PodToMemberContext();
    for (    Pod pod : newlyCreatedPods) {
      MemberContext context=podToMemberContextFunc.apply(pod);
      context.setCartridgeType(cartridgeType);
      context.setClusterId(clusterId);
      context.setProperties(CloudControllerUtil.addProperty(context.getProperties(),StratosConstants.ALLOCATED_SERVICE_HOST_PORT,String.valueOf(service.getPort())));
      dataHolder.addMemberContext(context);
      TopologyBuilder.handleMemberSpawned(cartridgeType,clusterId,null,pod.getCurrentState().getPodIP(),pod.getCurrentState().getHostIP(),context);
      memberContexts.add(context);
    }
    persist();
    log.info(""String_Node_Str"" + memberContexts);
    return memberContexts.toArray(new MemberContext[0]);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + containerClusterContext.toString() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}",0.9737350767481524
116483,"/** 
 * Undeploys a Cartridge configuration which is already deployed.
 * @param cartridgeType type of the cartridge to be undeployed.
 * @throws InvalidCartridgeTypeException if the cartridge type specified is not a deployed cartridge.
 */
public void undeployCartridgeDefinition(String cartridgeType) throws InvalidCartridgeTypeException ;","/** 
 * Undeploys a Cartridge configuration which is already deployed.
 * @param cartridgeType type of the cartridge to be undeployed.
 * @throws InvalidCartridgeTypeException if the cartridge type specified is not a deployed cartridge.
 */
void undeployCartridgeDefinition(String cartridgeType) throws InvalidCartridgeTypeException ;",0.9896296296296296
116484,"/** 
 * <p> Registers the details of a newly created service cluster. This will override an already present service cluster, if there is any. A service cluster is uniquely identified by its domain and sub domain combination. </p>
 * @param clusterContext information about the new subscription.
 * @return whether the registration is successful or not.
 * @throws UnregisteredCartridgeException when the cartridge type requested by this service is not a registered one.
 */
public boolean registerService(Registrant registrant) throws UnregisteredCartridgeException ;","/** 
 * <p> Registers the details of a newly created service cluster. This will override an already present service cluster, if there is any. A service cluster is uniquely identified by its domain and sub domain combination. </p>
 * @param clusterContext information about the new subscription.
 * @return whether the registration is successful or not.
 * @throws UnregisteredCartridgeException when the cartridge type requested by this service is not a registered one.
 */
boolean registerService(Registrant registrant) throws UnregisteredCartridgeException ;",0.9937888198757764
116485,"/** 
 * Unregister the service cluster identified by the given cluster id.
 * @param clusterId service cluster id.
 * @throws UnregisteredClusterException if the service cluster requested is not a registered one.
 */
public void unregisterService(String clusterId) throws UnregisteredClusterException ;","/** 
 * Unregister the service cluster identified by the given cluster id.
 * @param clusterId service cluster id.
 * @throws UnregisteredClusterException if the service cluster requested is not a registered one.
 */
void unregisterService(String clusterId) throws UnregisteredClusterException ;",0.9882747068676716
116486,"/** 
 * Returns the   {@link org.apache.stratos.cloud.controller.pojo.ClusterContext} object associated with the given cluster id, or null if not found
 * @param clusterId cluster id
 * @return {@link org.apache.stratos.cloud.controller.pojo.ClusterContext} object  associated with the given cluster id, or null
 */
public ClusterContext getClusterContext(String clusterId);","/** 
 * Returns the   {@link org.apache.stratos.cloud.controller.pojo.ClusterContext} object associated with the given cluster id, or null if not found
 * @param clusterId cluster id
 * @return {@link org.apache.stratos.cloud.controller.pojo.ClusterContext} object  associated with the given cluster id, or null
 */
ClusterContext getClusterContext(String clusterId);",0.99055330634278
116487,"/** 
 * Deploys a Cartridge configuration 
 * @param cartridgeConfig cartridge configuration to be deployed
 * @throws InvalidCartridgeDefinitionException if the cartridge configuration is not valid.
 * @throws InvalidIaasProviderException if the iaas providers configured are not valid.
 * @throws IllegalArgumentException  if the provided argument is not valid.
 */
public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException ;","/** 
 * Deploys a Cartridge configuration 
 * @param cartridgeConfig cartridge configuration to be deployed
 * @throws InvalidCartridgeDefinitionException if the cartridge configuration is not valid.
 * @throws InvalidIaasProviderException if the iaas providers configured are not valid.
 * @throws IllegalArgumentException  if the provided argument is not valid.
 */
void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException ;",0.9931305201177624
116488,"/** 
 * Unregister a docker service identified by the given cluster id.
 * @param clusterId service cluster id.
 * @throws UnregisteredClusterException if the service cluster requested is not a registered one.
 */
public void unregisterDockerService(String clusterId) throws UnregisteredClusterException ;","/** 
 * Unregister a docker service identified by the given cluster id.
 * @param clusterId service cluster id.
 * @throws UnregisteredClusterException if the service cluster requested is not a registered one.
 */
void unregisterDockerService(String clusterId) throws UnregisteredClusterException ;",0.988391376451078
116489,"/** 
 * Validate a given   {@link Partition} for basic property existence.
 * @param partition partition to be validated.
 * @return whether the partition is a valid one.
 * @throws InvalidPartitionException if the partition is invalid.
 */
public boolean validatePartition(Partition partition) throws InvalidPartitionException ;","/** 
 * Validate a given   {@link Partition} for basic property existence.
 * @param partition partition to be validated.
 * @return whether the partition is a valid one.
 * @throws InvalidPartitionException if the partition is invalid.
 */
boolean validatePartition(Partition partition) throws InvalidPartitionException ;",0.989247311827957
116490,"/** 
 * Calling this method will result in returning the types of   {@link org.apache.stratos.cloud.controller.pojo.Cartridge}s registered in Cloud Controller.
 * @return String array containing types of registered {@link org.apache.stratos.cloud.controller.pojo.Cartridge}s.
 */
public String[] getRegisteredCartridges();","/** 
 * Calling this method will result in returning the types of   {@link org.apache.stratos.cloud.controller.pojo.Cartridge}s registered in Cloud Controller.
 * @return String array containing types of registered {@link org.apache.stratos.cloud.controller.pojo.Cartridge}s.
 */
String[] getRegisteredCartridges();",0.989010989010989
116491,"/** 
 * Calling this method will result in termination of the instance with given member id in the given Partition.
 * @param memberId member ID of the instance to be terminated.
 * @param partition It contains the region, zone, network and host of a IaaS where an instance need to be terminated..
 * @return whether an instance terminated successfully or not.
 */
public void terminateInstance(String memberId) throws InvalidMemberException, InvalidCartridgeTypeException ;","/** 
 * Calling this method will result in termination of the instance with given member id in the given Partition.
 * @param memberId member ID of the instance to be terminated.
 * @param partition It contains the region, zone, network and host of a IaaS where an instance need to be terminated..
 * @return whether an instance terminated successfully or not.
 */
void terminateInstance(String memberId) throws InvalidMemberException, InvalidCartridgeTypeException ;",0.9925611052072264
116492,"/** 
 * Calling this method will result in termination of all instances belong to the provided cluster ID.
 * @param clusterId cluster ID of the instance to be terminated.
 * @return whether an instance terminated successfully or not.
 */
public void terminateAllInstances(String clusterId) throws InvalidClusterException ;","/** 
 * Calling this method will result in termination of all instances belong to the provided cluster ID.
 * @param clusterId cluster ID of the instance to be terminated.
 * @return whether an instance terminated successfully or not.
 */
void terminateAllInstances(String clusterId) throws InvalidClusterException ;",0.9890453834115804
116493,"/** 
 * Terminate all containers of the given cluster.
 * @param clusterId id of the subjected cluster.
 * @throws InvalidClusterException
 */
public void terminateAllContainers(String clusterId) throws InvalidClusterException ;","/** 
 * Terminate all containers of the given cluster.
 * @param clusterId id of the subjected cluster.
 * @throws InvalidClusterException
 */
void terminateAllContainers(String clusterId) throws InvalidClusterException ;",0.9844097995545658
116494,"/** 
 * This method will return the information regarding the given cartridge, if present. Else this will return <code>null</code>.
 * @param cartridgeType type of the cartridge.
 * @return {@link org.apache.stratos.cloud.controller.pojo.CartridgeInfo} of the given cartridge type or <code>null</code>.
 * @throws UnregisteredCartridgeException if there is no registered cartridge with this type.
 */
public CartridgeInfo getCartridgeInfo(String cartridgeType) throws UnregisteredCartridgeException ;","/** 
 * This method will return the information regarding the given cartridge, if present. Else this will return <code>null</code>.
 * @param cartridgeType type of the cartridge.
 * @return {@link org.apache.stratos.cloud.controller.pojo.CartridgeInfo} of the given cartridge type or <code>null</code>.
 * @throws UnregisteredCartridgeException if there is no registered cartridge with this type.
 */
CartridgeInfo getCartridgeInfo(String cartridgeType) throws UnregisteredCartridgeException ;",0.9929506545820744
116495,"/** 
 * Validate a given   {@link DeploymentPolicy} against a Cartridge.
 * @param cartridgeType type of the cartridge that this policy is going to be attached to.
 * @param deploymentPolicy policy to be validated.
 * @return whether the policy is a valid one against the given Cartridge.
 * @throws InvalidPartitionException if the policy contains at least one invalid partition.
 * @throws InvalidCartridgeTypeException if the given Cartridge type is not a valid one.
 */
public boolean validateDeploymentPolicy(String cartridgeType,Partition[] partitions) throws InvalidPartitionException, InvalidCartridgeTypeException ;","/** 
 * Validate a given   {@link DeploymentPolicy} against a Cartridge.
 * @param cartridgeType type of the cartridge that this policy is going to be attached to.
 * @param deploymentPolicy policy to be validated.
 * @return whether the policy is a valid one against the given Cartridge.
 * @throws InvalidPartitionException if the policy contains at least one invalid partition.
 * @throws InvalidCartridgeTypeException if the given Cartridge type is not a valid one.
 */
boolean validateDeploymentPolicy(String cartridgeType,Partition[] partitions) throws InvalidPartitionException, InvalidCartridgeTypeException ;",0.9943593875906528
116496,"/** 
 * Create a container cluster.
 * @param {@link ContainerClusterContext} Context with cluster id, and host cluster details. 
 * @return a list of {@link MemberContext}s correspond to each Pod created.
 * @throws UnregisteredCartridgeException if the requested Cartridge type is not a registered one.
 */
public MemberContext[] startContainers(ContainerClusterContext clusterContext) throws UnregisteredCartridgeException ;","/** 
 * Create a container cluster.
 * @param {@link ContainerClusterContext} Context with cluster id, and host cluster details. 
 * @return a list of {@link MemberContext}s correspond to each Pod created.
 * @throws UnregisteredCartridgeException if the requested Cartridge type is not a registered one.
 */
MemberContext[] startContainers(ContainerClusterContext clusterContext) throws UnregisteredCartridgeException ;",0.9917355371900828
116497,"/** 
 * Calling this method will result in an instance startup, which is belong to the provided Cluster ID. Also note that the instance that is starting up belongs to the group whose name is derived from its Cluster ID, replacing <i>.</i> by a hyphen (<i>-</i>).
 * @param Member Context with cluster id, partition etc.
 * @return updated {@link MemberContext}
 * @throws UnregisteredCartridgeException if the requested Cartridge type is not a registered one.
 * @throws InvalidIaasProviderException if the iaas requested is not valid.
 */
public MemberContext startInstance(MemberContext member) throws UnregisteredCartridgeException, InvalidIaasProviderException ;","/** 
 * Calling this method will result in an instance startup, which is belong to the provided Cluster ID. Also note that the instance that is starting up belongs to the group whose name is derived from its Cluster ID, replacing <i>.</i> by a hyphen (<i>-</i>).
 * @param Member Context with cluster id, partition etc.
 * @return updated {@link MemberContext}
 * @throws UnregisteredCartridgeException if the requested Cartridge type is not a registered one.
 * @throws InvalidIaasProviderException if the iaas requested is not valid.
 */
MemberContext startInstance(MemberContext member) throws UnregisteredCartridgeException, InvalidIaasProviderException ;",0.9947169811320756
116498,"protected void setTaskService(TaskService taskService){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ServiceReferenceHolder.getInstance().setTaskService(taskService);
}","protected void setTaskService(TaskService taskService){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  ServiceReferenceHolder.getInstance().setTaskService(taskService);
}",0.9689119170984456
116499,"protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}","protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (LOG.isInfoEnabled()) {
      LOG.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9897843359818388
116500,"protected void unsetRegistryService(RegistryService registryService){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ServiceReferenceHolder.getInstance().setRegistry(null);
}","protected void unsetRegistryService(RegistryService registryService){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  ServiceReferenceHolder.getInstance().setRegistry(null);
}",0.9695431472081218
116501,"protected void setRegistryService(RegistryService registryService){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  try {
    UserRegistry registry=registryService.getGovernanceSystemRegistry();
    ServiceReferenceHolder.getInstance().setRegistry(registry);
  }
 catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","protected void setRegistryService(RegistryService registryService){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  try {
    UserRegistry registry=registryService.getGovernanceSystemRegistry();
    ServiceReferenceHolder.getInstance().setRegistry(registry);
  }
 catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    LOG.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.9788732394366196
116502,"protected void unsetTaskService(TaskService taskService){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  ServiceReferenceHolder.getInstance().setTaskService(null);
}","protected void unsetTaskService(TaskService taskService){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"");
  }
  ServiceReferenceHolder.getInstance().setTaskService(null);
}",0.9680851063829788
116503,"public Object executeList(String serviceEndpoint,Class _class,String entityName) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  HttpResponse response=null;
  try {
    response=restClient.doGet(httpClient,restClient.getBaseURL() + serviceEndpoint);
    int responseCode=response.getStatusLine().getStatusCode();
    if (responseCode != 200) {
      String resultString=getHttpResponseString(response);
      if (StringUtils.isBlank(resultString)) {
        return null;
      }
 else {
        GsonBuilder gsonBuilder=new GsonBuilder();
        Gson gson=gsonBuilder.create();
        ExceptionMapper exception=gson.fromJson(resultString,ExceptionMapper.class);
        if (exception != null) {
          System.out.println(exception);
        }
        return gson.fromJson(resultString,_class);
      }
    }
    return null;
  }
 catch (  Exception e) {
    handleException(String.format(""String_Node_Str"",entityName),e);
    return null;
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public Object executeList(String serviceEndpoint,Class _class,String entityName) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  HttpResponse response=null;
  try {
    response=restClient.doGet(httpClient,restClient.getBaseURL() + serviceEndpoint);
    int responseCode=response.getStatusLine().getStatusCode();
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    if (responseCode == 200) {
      return gson.fromJson(resultString,_class);
    }
 else {
      if (StringUtils.isBlank(resultString)) {
        return null;
      }
 else {
        ExceptionMapper exception=gson.fromJson(resultString,ExceptionMapper.class);
        if (exception != null) {
          System.out.println(exception);
        }
        return gson.fromJson(resultString,_class);
      }
    }
  }
 catch (  Exception e) {
    handleException(String.format(""String_Node_Str"",entityName),e);
    return null;
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.8247422680412371
116504,"private boolean getGroupStatus(Map<String,Group> groups){
  boolean groupActiveStatus=false;
  for (  Group group : groups.values()) {
    if (group.getStatus().equals(GroupStatus.Active)) {
      groupActiveStatus=true;
    }
 else {
      groupActiveStatus=false;
    }
  }
  return groupActiveStatus;
}","private boolean getGroupStatus(Map<String,Group> groups){
  boolean groupActiveStatus=false;
  for (  Group group : groups.values()) {
    if (group.getStatus() == Status.Activated) {
      groupActiveStatus=true;
    }
 else {
      groupActiveStatus=false;
    }
  }
  return groupActiveStatus;
}",0.5339966832504146
116505,"/** 
 * Utility method to find the group monitor recursively within app monitor
 * @param id       the unique alias of the Group
 * @param monitors the group monitors found in the app monitor
 * @return the found GroupMonitor
 */
private GroupMonitor findGroupMonitor(String id,Collection<GroupMonitor> monitors){
  for (  GroupMonitor monitor : monitors) {
    if (monitor.equals(id)) {
      return monitor;
    }
 else {
      if (monitor.getAliasToGroupMonitorsMap() != null) {
        return findGroupMonitor(id,monitor.getAliasToGroupMonitorsMap().values());
      }
    }
  }
  return null;
}","/** 
 * Utility method to find the group monitor recursively within app monitor
 * @param id       the unique alias of the Group
 * @param monitors the group monitors found in the app monitor
 * @return the found GroupMonitor
 */
private GroupMonitor findGroupMonitor(String id,Collection<GroupMonitor> monitors){
  for (  GroupMonitor monitor : monitors) {
    if (monitor.getId().equals(id)) {
      return monitor;
    }
 else {
      if (monitor.getAliasToGroupMonitorsMap() != null) {
        return findGroupMonitor(id,monitor.getAliasToGroupMonitorsMap().values());
      }
    }
  }
  return null;
}",0.9933665008291874
116506,"public static void handleGroupActivatedEvent(GroupActivatedEvent groupActivatedEvent){
  Topology topology=TopologyManager.getTopology();
  Application application=topology.getApplication(groupActivatedEvent.getAppId());
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",groupActivatedEvent.getAppId()));
    return;
  }
  Group group=application.getGroup(groupActivatedEvent.getGroupId());
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupActivatedEvent.getGroupId()));
    return;
  }
  org.apache.stratos.messaging.event.topology.GroupActivatedEvent groupActivatedEvent1=new org.apache.stratos.messaging.event.topology.GroupActivatedEvent(groupActivatedEvent.getAppId(),groupActivatedEvent.getGroupId());
  try {
    TopologyManager.acquireWriteLock();
    group.setStatus(Status.Activated);
    log.info(""String_Node_Str"");
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendGroupActivatedEvent(groupActivatedEvent1);
}","public static void handleGroupActivatedEvent(GroupActivatedEvent groupActivatedEvent){
  Topology topology=TopologyManager.getTopology();
  Application application=topology.getApplication(groupActivatedEvent.getAppId());
  if (application == null) {
    log.warn(String.format(""String_Node_Str"",groupActivatedEvent.getAppId()));
    return;
  }
  Group group=application.getGroupRecursively(groupActivatedEvent.getGroupId());
  if (group == null) {
    log.warn(String.format(""String_Node_Str"",groupActivatedEvent.getGroupId()));
    return;
  }
  org.apache.stratos.messaging.event.topology.GroupActivatedEvent groupActivatedEvent1=new org.apache.stratos.messaging.event.topology.GroupActivatedEvent(groupActivatedEvent.getAppId(),groupActivatedEvent.getGroupId());
  try {
    TopologyManager.acquireWriteLock();
    group.setStatus(Status.Activated);
    log.info(""String_Node_Str"");
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendGroupActivatedEvent(groupActivatedEvent1);
}",0.9948137670909948
116507,"private Group travereAndCheckRecursively(Map<String,Group> aliasToGroupMap,String groupAlias){
  if (aliasToGroupMap.containsKey(groupAlias)) {
synchronized (aliasToGroupMap) {
      if (aliasToGroupMap.containsKey(groupAlias)) {
        return aliasToGroupMap.get(groupAlias);
      }
    }
  }
 else {
    for (    Group group : aliasToGroupMap.values()) {
      travereAndCheckRecursively(group.getAliasToGroupMap(),groupAlias);
    }
  }
  return null;
}","private Group travereAndCheckRecursively(Map<String,Group> aliasToGroupMap,String groupAlias){
  if (aliasToGroupMap.containsKey(groupAlias)) {
synchronized (aliasToGroupMap) {
      if (aliasToGroupMap.containsKey(groupAlias)) {
        return aliasToGroupMap.get(groupAlias);
      }
    }
  }
 else {
    for (    Group group : aliasToGroupMap.values()) {
      return travereAndCheckRecursively(group.getAliasToGroupMap(),groupAlias);
    }
  }
  return null;
}",0.9924160346695556
116508,"private boolean doProcess(GroupActivatedEvent event,Topology topology){
  Application application=topology.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
  Group group=application.getGroup(event.getGroupId());
  if (group == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId(),event.getGroupId()));
    }
  }
 else {
    group.setStatus(Status.Activated);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",group.toString()));
    }
  }
  notifyEventListeners(event);
  return true;
}","private boolean doProcess(GroupActivatedEvent event,Topology topology){
  Application application=topology.getApplication(event.getAppId());
  if (application == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId()));
    }
    return false;
  }
  Group group=application.getGroupRecursively(event.getGroupId());
  if (group == null) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",event.getAppId(),event.getGroupId()));
    }
  }
 else {
    group.setStatus(Status.Activated);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",group.toString()));
    }
  }
  notifyEventListeners(event);
  return true;
}",0.992248062015504
116509,"public boolean login(String serverURL,String username,String password,boolean validateLogin) throws Exception {
  try {
    SSLContext sc;
    sc=SSLContext.getInstance(""String_Node_Str"");
    HostnameVerifier hv=new HostnameVerifier(){
      public boolean verify(      String urlHostName,      SSLSession session){
        return true;
      }
    }
;
    TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
      public java.security.cert.X509Certificate[] getAcceptedIssuers(){
        return null;
      }
      public void checkClientTrusted(      java.security.cert.X509Certificate[] certs,      String authType){
      }
      public void checkServerTrusted(      java.security.cert.X509Certificate[] certs,      String authType){
      }
    }
};
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLContext.setDefault(sc);
    HttpsURLConnection.setDefaultHostnameVerifier(hv);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  try {
    initializeRestClient(serverURL,username,password);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",username);
    }
  }
 catch (  AxisFault e) {
    System.out.println(""String_Node_Str"");
    throw new CommandException(e);
  }
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    if (validateLogin) {
      HttpResponse response=restClient.doGet(httpClient,restClient.getBaseURL() + initializeCookieEndpoint);
      if (response != null) {
        String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
        if ((responseCode.equals(CliConstants.RESPONSE_OK)) && (response.toString().contains(""String_Node_Str""))) {
          return true;
        }
 else {
          System.out.println(""String_Node_Str"");
          return false;
        }
      }
      return true;
    }
 else {
      return true;
    }
  }
 catch (  ClientProtocolException e) {
    System.out.println(""String_Node_Str"");
    return false;
  }
catch (  ConnectException e) {
    System.out.println(""String_Node_Str"");
    return false;
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public boolean login(String serverURL,String username,String password,boolean validateLogin) throws Exception {
  try {
    SSLContext sc;
    sc=SSLContext.getInstance(""String_Node_Str"");
    HostnameVerifier hv=new HostnameVerifier(){
      public boolean verify(      String urlHostName,      SSLSession session){
        return true;
      }
    }
;
    TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
      public java.security.cert.X509Certificate[] getAcceptedIssuers(){
        return null;
      }
      public void checkClientTrusted(      java.security.cert.X509Certificate[] certs,      String authType){
      }
      public void checkServerTrusted(      java.security.cert.X509Certificate[] certs,      String authType){
      }
    }
};
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLContext.setDefault(sc);
    HttpsURLConnection.setDefaultHostnameVerifier(hv);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  try {
    initializeRestClient(serverURL,username,password);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",username);
    }
  }
 catch (  AxisFault e) {
    System.out.println(""String_Node_Str"");
    throw new CommandException(e);
  }
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    if (validateLogin) {
      HttpResponse response=restClient.doGet(httpClient,restClient.getBaseURL() + initializeCookieEndpoint);
      if (response != null) {
        String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
        if ((responseCode.equals(CliConstants.RESPONSE_OK)) && (response.toString().contains(""String_Node_Str""))) {
          return true;
        }
 else {
          System.out.println(""String_Node_Str"");
        }
      }
      return false;
    }
 else {
      return true;
    }
  }
 catch (  ClientProtocolException e) {
    System.out.println(""String_Node_Str"");
    return false;
  }
catch (  ConnectException e) {
    System.out.println(""String_Node_Str"");
    return false;
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.9881917110442232
116510,"/** 
 * This will build the dependency tree based on the given dependency order
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentComponent component) throws DependencyBuilderException {
  String identifier=component.getUniqueIdentifier();
  DependencyTree dependencyTree=new DependencyTree(identifier);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + identifier);
    }
    String killBehavior=dependencyOrder.getKillbehavior();
    if (Constants.KILL_NONE.equals(killBehavior)) {
      dependencyTree.setKillNone(true);
    }
 else     if (Constants.KILL_ALL.equals(killBehavior)) {
      dependencyTree.setKillAll(true);
    }
 else     if (Constants.KILL_DEPENDENTS.equals(killBehavior)) {
      dependencyTree.setKillDependent(true);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + killBehavior + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    }
    Set<StartupOrder> startupOrders=dependencyOrder.getStartupOrders();
    ApplicationContext foundContext;
    if (startupOrders == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      return dependencyTree;
    }
    for (    StartupOrder startupOrder : startupOrders) {
      foundContext=null;
      for (      String start : startupOrder.getStartList()) {
        if (start != null) {
          ApplicationContext applicationContext=ApplicationContextFactory.getApplicationContext(start,component,dependencyTree.isKillDependent());
          String id=applicationContext.getId();
          ApplicationContext existingApplicationContext=dependencyTree.findApplicationContextWithId(id);
          if (existingApplicationContext == null) {
            if (foundContext != null) {
              foundContext.addApplicationContext(applicationContext);
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + foundContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
              }
            }
 else {
              dependencyTree.addApplicationContext(applicationContext);
            }
          }
 else {
            if (foundContext == null) {
              foundContext=existingApplicationContext;
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
              }
            }
 else {
              String msg=""String_Node_Str"" + ""String_Node_Str"";
              throw new DependencyBuilderException(msg);
            }
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithId(group1.getAlias()) == null) {
      dependencyTree.addApplicationContext(new GroupContext(group1.getAlias(),dependencyTree.isKillDependent()));
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithId(dataHolder.getClusterId()) == null) {
      dependencyTree.addApplicationContext(new ClusterContext(dataHolder.getClusterId(),dependencyTree.isKillDependent()));
    }
  }
  return dependencyTree;
}","/** 
 * This will build the dependency tree based on the given dependency order
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentComponent component) throws DependencyBuilderException {
  String identifier=component.getUniqueIdentifier();
  DependencyTree dependencyTree=new DependencyTree(identifier);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + identifier);
    }
    String killBehavior=dependencyOrder.getKillbehavior();
    if (Constants.KILL_NONE.equals(killBehavior)) {
      dependencyTree.setKillNone(true);
    }
 else     if (Constants.KILL_ALL.equals(killBehavior)) {
      dependencyTree.setKillAll(true);
    }
 else     if (Constants.KILL_DEPENDENTS.equals(killBehavior)) {
      dependencyTree.setKillDependent(true);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + killBehavior + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    }
    Set<StartupOrder> startupOrders=dependencyOrder.getStartupOrders();
    ApplicationContext foundContext;
    ApplicationContext parentContext;
    if (startupOrders != null) {
      for (      StartupOrder startupOrder : startupOrders) {
        foundContext=null;
        parentContext=null;
        for (        String start : startupOrder.getStartList()) {
          if (start != null) {
            ApplicationContext applicationContext=ApplicationContextFactory.getApplicationContext(start,component,dependencyTree.isKillDependent());
            String id=applicationContext.getId();
            ApplicationContext existingApplicationContext=dependencyTree.findApplicationContextWithId(id);
            if (existingApplicationContext == null) {
              if (parentContext != null) {
                parentContext.addApplicationContext(applicationContext);
                parentContext=applicationContext;
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + parentContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
                }
              }
 else {
                dependencyTree.addApplicationContext(applicationContext);
                parentContext=applicationContext;
              }
            }
 else {
              if (foundContext == null) {
                existingApplicationContext.addApplicationContext(applicationContext);
                parentContext=existingApplicationContext;
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
                }
              }
 else {
                String msg=""String_Node_Str"" + ""String_Node_Str"";
                throw new DependencyBuilderException(msg);
              }
            }
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithId(group1.getAlias()) == null) {
      dependencyTree.addApplicationContext(new GroupContext(group1.getAlias(),dependencyTree.isKillDependent()));
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithId(dataHolder.getClusterId()) == null) {
      dependencyTree.addApplicationContext(new ClusterContext(dataHolder.getClusterId(),dependencyTree.isKillDependent()));
    }
  }
  return dependencyTree;
}",0.6758265349935595
116511,"/** 
 * Will return the GroupContext/ClusterContext based on the type in start order
 * @param startOrder reference of group/cluster in the start order
 * @param component The component which used to build the dependency
 * @param isKillDependent kill dependent behaviour of this component
 * @return Context
 */
public static ApplicationContext getApplicationContext(String startOrder,ParentComponent component,boolean isKillDependent){
  String id;
  ApplicationContext applicationContext=null;
  if (startOrder.contains(Constants.GROUP)) {
    id=getGroupFromStartupOrder(startOrder);
    applicationContext=new GroupContext(id,isKillDependent);
  }
 else   if (startOrder.contains(Constants.CARTRIDGE)) {
    id=getClusterFromStartupOrder(startOrder);
    ClusterDataHolder clusterDataHolder=component.getClusterDataMap().get(id);
    applicationContext=new ClusterContext(clusterDataHolder.getClusterId(),isKillDependent);
  }
 else {
    log.warn(""String_Node_Str"" + startOrder + ""String_Node_Str"");
  }
  return applicationContext;
}","/** 
 * Will return the GroupContext/ClusterContext based on the type in start order
 * @param startOrder reference of group/cluster in the start order
 * @param component The component which used to build the dependency
 * @param isKillDependent kill dependent behaviour of this component
 * @return Context
 */
public static ApplicationContext getApplicationContext(String startOrder,ParentComponent component,boolean isKillDependent){
  String id;
  ApplicationContext applicationContext=null;
  if (startOrder.startsWith(Constants.GROUP + ""String_Node_Str"")) {
    id=getGroupFromStartupOrder(startOrder);
    applicationContext=new GroupContext(id,isKillDependent);
  }
 else   if (startOrder.startsWith(Constants.CARTRIDGE + ""String_Node_Str"")) {
    id=getClusterFromStartupOrder(startOrder);
    ClusterDataHolder clusterDataHolder=component.getClusterDataMap().get(id);
    applicationContext=new ClusterContext(clusterDataHolder.getClusterId(),isKillDependent);
  }
 else {
    log.warn(""String_Node_Str"" + startOrder + ""String_Node_Str"");
  }
  return applicationContext;
}",0.9642184557438794
116512,"/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationContext> applicationContexts) throws TopologyInConsistentException {
  if (applicationContexts == null) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (context instanceof GroupContext) {
      startGroupMonitor(this,context.getId(),component);
    }
 else     if (context instanceof ClusterContext) {
      ClusterDataHolder clusterDataHolder=component.getClusterData(context.getId());
      String clusterId=clusterDataHolder.getClusterId();
      String serviceName=clusterDataHolder.getServiceType();
      Cluster cluster;
      TopologyManager.acquireReadLockForCluster(clusterId,serviceName);
      try {
        Topology topology=TopologyManager.getTopology();
        if (topology.serviceExists(serviceName)) {
          Service service=topology.getService(serviceName);
          if (service.clusterExists(clusterId)) {
            cluster=service.getCluster(clusterId);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + clusterId);
            }
            startClusterMonitor(this,cluster);
          }
 else {
            String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
            throw new TopologyInConsistentException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
          throw new TopologyInConsistentException(msg);
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(clusterId,serviceName);
      }
    }
  }
  return true;
}","/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationContext> applicationContexts) throws TopologyInConsistentException {
  if (applicationContexts == null) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (context instanceof GroupContext) {
      startGroupMonitor(this,context.getId(),component);
    }
 else     if (context instanceof ClusterContext) {
      String clusterId=context.getId();
      String serviceName=null;
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getClusterId().equals(clusterId)) {
          serviceName=dataHolder.getServiceType();
        }
      }
      Cluster cluster;
      TopologyManager.acquireReadLockForCluster(clusterId,serviceName);
      try {
        Topology topology=TopologyManager.getTopology();
        if (topology.serviceExists(serviceName)) {
          Service service=topology.getService(serviceName);
          if (service.clusterExists(clusterId)) {
            cluster=service.getCluster(clusterId);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + clusterId);
            }
            startClusterMonitor(this,cluster);
          }
 else {
            String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
            throw new TopologyInConsistentException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
          throw new TopologyInConsistentException(msg);
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(clusterId,serviceName);
      }
    }
  }
  return true;
}",0.9094165813715456
116513,"public String getUniqueIdentifier(){
  return name;
}","public String getUniqueIdentifier(){
  return alias;
}",0.9345794392523364
116514,"/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationContext> applicationContexts) throws TopologyInConsistentException {
  if (applicationContexts == null) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (context instanceof GroupContext) {
      startGroupMonitor(this,context.getId(),component);
    }
 else     if (context instanceof ClusterContext) {
      String clusterId=context.getId();
      String serviceName=null;
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getClusterId().equals(clusterId)) {
          serviceName=dataHolder.getServiceType();
        }
      }
      Cluster cluster;
      TopologyManager.acquireReadLockForCluster(clusterId,serviceName);
      try {
        Topology topology=TopologyManager.getTopology();
        if (topology.serviceExists(serviceName)) {
          Service service=topology.getService(serviceName);
          if (service.clusterExists(clusterId)) {
            cluster=service.getCluster(clusterId);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + clusterId);
            }
            startClusterMonitor(this,cluster);
          }
 else {
            String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
            throw new TopologyInConsistentException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
          throw new TopologyInConsistentException(msg);
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(clusterId,serviceName);
      }
    }
  }
  return true;
}","/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationContext> applicationContexts) throws TopologyInConsistentException {
  if (applicationContexts == null) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (context instanceof GroupContext) {
      startGroupMonitor(this,context.getId(),component);
    }
 else     if (context instanceof ClusterContext) {
      String clusterId=context.getId();
      String serviceName=null;
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getClusterId().equals(clusterId)) {
          serviceName=dataHolder.getServiceType();
        }
      }
      Cluster cluster;
      TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
      try {
        Topology topology=TopologyManager.getTopology();
        if (topology.serviceExists(serviceName)) {
          Service service=topology.getService(serviceName);
          if (service.clusterExists(clusterId)) {
            cluster=service.getCluster(clusterId);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + clusterId);
            }
            startClusterMonitor(this,cluster);
          }
 else {
            String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
            throw new TopologyInConsistentException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
          throw new TopologyInConsistentException(msg);
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
      }
    }
  }
  return true;
}",0.9879819729594392
116515,"@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (CompleteTopologyEvent.class.getName().equals(type)) {
    CompleteTopologyEvent event=(CompleteTopologyEvent)Util.jsonToObject(message,CompleteTopologyEvent.class);
    if (!topology.isInitialized()) {
      TopologyUpdater.acquireWriteLock();
      try {
        if (!topology.isInitialized()) {
          doProcess(event,topology);
        }
      }
  finally {
        TopologyUpdater.releaseWriteLock();
      }
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
    return false;
  }
}","@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (CompleteTopologyEvent.class.getName().equals(type)) {
    CompleteTopologyEvent event=(CompleteTopologyEvent)Util.jsonToObject(message,CompleteTopologyEvent.class);
    if (!topology.isInitialized()) {
      TopologyUpdater.acquireWriteLock();
      try {
        doProcess(event,topology);
      }
  finally {
        TopologyUpdater.releaseWriteLock();
      }
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
    return false;
  }
}",0.9620615604867572
116516,"private void doProcess(CompleteTopologyEvent event,Topology topology){
  if (TopologyServiceFilter.getInstance().isActive()) {
    for (    Service service : event.getTopology().getServices()) {
      if (TopologyServiceFilter.getInstance().serviceNameIncluded(service.getServiceName())) {
        topology.addService(service);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",service.getServiceName()));
        }
      }
    }
  }
 else {
    topology.addServices(event.getTopology().getServices());
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      List<Cluster> clustersToRemove=new ArrayList<Cluster>();
      for (      Cluster cluster : service.getClusters()) {
        if (TopologyClusterFilter.getInstance().clusterIdExcluded(cluster.getClusterId())) {
          clustersToRemove.add(cluster);
        }
      }
      for (      Cluster cluster : clustersToRemove) {
        service.removeCluster(cluster);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
        }
      }
    }
  }
  if (TopologyMemberFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      for (      Cluster cluster : service.getClusters()) {
        List<Member> membersToRemove=new ArrayList<Member>();
        for (        Member member : cluster.getMembers()) {
          if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(member.getLbClusterId())) {
            membersToRemove.add(member);
          }
        }
        for (        Member member : membersToRemove) {
          cluster.removeMember(member);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",member.getMemberId(),member.getLbClusterId()));
          }
        }
      }
    }
  }
  Collection<Application> applications=event.getTopology().getApplications();
  if (applications != null && !applications.isEmpty()) {
    for (    Application application : applications) {
      topology.addApplication(application);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  topology.setInitialized(true);
}","private void doProcess(CompleteTopologyEvent event,Topology topology){
  addTopologyLocksForClusters(event.getTopology().getServices());
  if (TopologyServiceFilter.getInstance().isActive()) {
    for (    Service service : event.getTopology().getServices()) {
      if (TopologyServiceFilter.getInstance().serviceNameIncluded(service.getServiceName())) {
        topology.addService(service);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",service.getServiceName()));
        }
      }
    }
  }
 else {
    topology.addServices(event.getTopology().getServices());
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      List<Cluster> clustersToRemove=new ArrayList<Cluster>();
      for (      Cluster cluster : service.getClusters()) {
        if (TopologyClusterFilter.getInstance().clusterIdExcluded(cluster.getClusterId())) {
          clustersToRemove.add(cluster);
        }
      }
      for (      Cluster cluster : clustersToRemove) {
        service.removeCluster(cluster);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
        }
      }
    }
  }
  if (TopologyMemberFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      for (      Cluster cluster : service.getClusters()) {
        List<Member> membersToRemove=new ArrayList<Member>();
        for (        Member member : cluster.getMembers()) {
          if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(member.getLbClusterId())) {
            membersToRemove.add(member);
          }
        }
        for (        Member member : membersToRemove) {
          cluster.removeMember(member);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",member.getMemberId(),member.getLbClusterId()));
          }
        }
      }
    }
  }
  Collection<Application> applications=event.getTopology().getApplications();
  if (applications != null && !applications.isEmpty()) {
    for (    Application application : applications) {
      topology.addApplication(application);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  topology.setInitialized(true);
}",0.9868839427662957
116517,"/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationContext> applicationContexts) throws TopologyInConsistentException {
  if (applicationContexts == null) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (context instanceof GroupContext) {
      startGroupMonitor(this,context.getId(),component);
    }
 else     if (context instanceof ClusterContext) {
      String clusterId=context.getId();
      String serviceName=null;
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getClusterId().equals(clusterId)) {
          serviceName=dataHolder.getServiceType();
        }
      }
      Cluster cluster;
      TopologyManager.acquireReadLockForCluster(clusterId,serviceName);
      try {
        Topology topology=TopologyManager.getTopology();
        if (topology.serviceExists(serviceName)) {
          Service service=topology.getService(serviceName);
          if (service.clusterExists(clusterId)) {
            cluster=service.getCluster(clusterId);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + clusterId);
            }
            startClusterMonitor(this,cluster);
          }
 else {
            String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
            throw new TopologyInConsistentException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
          throw new TopologyInConsistentException(msg);
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(clusterId,serviceName);
      }
    }
  }
  return true;
}","/** 
 * To start the dependency of the given application contexts
 * @param applicationContexts the found applicationContexts to be started
 */
private boolean startDependency(List<ApplicationContext> applicationContexts) throws TopologyInConsistentException {
  if (applicationContexts != null && applicationContexts.isEmpty()) {
    log.info(""String_Node_Str"" + this.id);
    return false;
  }
  for (  ApplicationContext context : applicationContexts) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context.getId() + ""String_Node_Str"");
    }
    if (context instanceof GroupContext) {
      startGroupMonitor(this,context.getId(),component);
    }
 else     if (context instanceof ClusterContext) {
      String clusterId=context.getId();
      String serviceName=null;
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getClusterId().equals(clusterId)) {
          serviceName=dataHolder.getServiceType();
        }
      }
      Cluster cluster;
      TopologyManager.acquireReadLockForCluster(serviceName,clusterId);
      try {
        Topology topology=TopologyManager.getTopology();
        if (topology.serviceExists(serviceName)) {
          Service service=topology.getService(serviceName);
          if (service.clusterExists(clusterId)) {
            cluster=service.getCluster(clusterId);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + clusterId);
            }
            startClusterMonitor(this,cluster);
          }
 else {
            String msg=""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName;
            throw new TopologyInConsistentException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + serviceName + ""String_Node_Str"";
          throw new TopologyInConsistentException(msg);
        }
      }
  finally {
        TopologyManager.releaseReadLockForCluster(serviceName,clusterId);
      }
    }
  }
  return true;
}",0.9769058852743978
116518,"@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(id);
  if (context.getStatusLifeCycle().isEmpty()) {
    try {
      boolean startDep=startDependency(statusEvent.getId());
      context.setStatus(status);
      context.addStatusToLIfeCycle(statusEvent.getStatus());
      if (!startDep) {
        StatusChecker.getInstance().onChildStatusChange(id,this.component,this.appId);
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(e);
    }
  }
 else {
  }
}","@Override protected void monitor(MonitorStatusEvent statusEvent){
  String id=statusEvent.getId();
  ApplicationContext context=this.dependencyTree.findApplicationContextWithId(id);
  if (context.getStatusLifeCycle().isEmpty()) {
    try {
      boolean startDep=startDependency(statusEvent.getId());
      context.setStatus(statusEvent.getStatus());
      context.addStatusToLIfeCycle(statusEvent.getStatus());
      if (!startDep) {
        StatusChecker.getInstance().onChildStatusChange(id,this.component,this.appId);
      }
    }
 catch (    TopologyInConsistentException e) {
      log.error(e);
    }
  }
 else {
  }
}",0.9862348178137652
116519,"@Override public boolean process(String type,String message,Object object){
  if (ClusterActivatedEvent.class.getName().equals(type)) {
    GroupActivatedEvent event=(GroupActivatedEvent)Util.jsonToObject(message,GroupActivatedEvent.class);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + event.toString());
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,object);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",type,message));
    }
  }
}","@Override public boolean process(String type,String message,Object object){
  if (GroupActivatedEvent.class.getName().equals(type)) {
    GroupActivatedEvent event=(GroupActivatedEvent)Util.jsonToObject(message,GroupActivatedEvent.class);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + event.toString());
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,object);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"" + ""String_Node_Str"",type,message));
    }
  }
}",0.9901800327332242
116520,"@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (CompleteTopologyEvent.class.getName().equals(type)) {
    CompleteTopologyEvent event=(CompleteTopologyEvent)Util.jsonToObject(message,CompleteTopologyEvent.class);
    if (!topology.isInitialized()) {
      TopologyUpdater.acquireWriteLock();
      try {
        return topology.isInitialized() || doProcess(event,topology);
      }
  finally {
        TopologyUpdater.releaseWriteLock();
      }
    }
 else {
      return true;
    }
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
    return false;
  }
}","@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (CompleteTopologyEvent.class.getName().equals(type)) {
    CompleteTopologyEvent event=(CompleteTopologyEvent)Util.jsonToObject(message,CompleteTopologyEvent.class);
    if (!topology.isInitialized()) {
      TopologyUpdater.acquireWriteLock();
      try {
        if (!topology.isInitialized()) {
          doProcess(event,topology);
        }
      }
  finally {
        TopologyUpdater.releaseWriteLock();
      }
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
    return false;
  }
}",0.7448763250883392
116521,"private boolean doProcess(CompleteTopologyEvent event,Topology topology){
  if (TopologyServiceFilter.getInstance().isActive()) {
    for (    Service service : event.getTopology().getServices()) {
      if (TopologyServiceFilter.getInstance().serviceNameIncluded(service.getServiceName())) {
        topology.addService(service);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",service.getServiceName()));
        }
      }
    }
  }
 else {
    topology.addServices(event.getTopology().getServices());
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      List<Cluster> clustersToRemove=new ArrayList<Cluster>();
      for (      Cluster cluster : service.getClusters()) {
        if (TopologyClusterFilter.getInstance().clusterIdExcluded(cluster.getClusterId())) {
          clustersToRemove.add(cluster);
        }
      }
      for (      Cluster cluster : clustersToRemove) {
        service.removeCluster(cluster);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
        }
      }
    }
  }
  if (TopologyMemberFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      for (      Cluster cluster : service.getClusters()) {
        List<Member> membersToRemove=new ArrayList<Member>();
        for (        Member member : cluster.getMembers()) {
          if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(member.getLbClusterId())) {
            membersToRemove.add(member);
          }
        }
        for (        Member member : membersToRemove) {
          cluster.removeMember(member);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",member.getMemberId(),member.getLbClusterId()));
          }
        }
      }
    }
  }
  Collection<Application> applications=event.getTopology().getApplications();
  if (applications != null && !applications.isEmpty()) {
    for (    Application application : applications) {
      topology.addApplication(application);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  topology.setInitialized(true);
  notifyEventListeners(event);
  return true;
}","private void doProcess(CompleteTopologyEvent event,Topology topology){
  if (TopologyServiceFilter.getInstance().isActive()) {
    for (    Service service : event.getTopology().getServices()) {
      if (TopologyServiceFilter.getInstance().serviceNameIncluded(service.getServiceName())) {
        topology.addService(service);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",service.getServiceName()));
        }
      }
    }
  }
 else {
    topology.addServices(event.getTopology().getServices());
  }
  if (TopologyClusterFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      List<Cluster> clustersToRemove=new ArrayList<Cluster>();
      for (      Cluster cluster : service.getClusters()) {
        if (TopologyClusterFilter.getInstance().clusterIdExcluded(cluster.getClusterId())) {
          clustersToRemove.add(cluster);
        }
      }
      for (      Cluster cluster : clustersToRemove) {
        service.removeCluster(cluster);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
        }
      }
    }
  }
  if (TopologyMemberFilter.getInstance().isActive()) {
    for (    Service service : topology.getServices()) {
      for (      Cluster cluster : service.getClusters()) {
        List<Member> membersToRemove=new ArrayList<Member>();
        for (        Member member : cluster.getMembers()) {
          if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(member.getLbClusterId())) {
            membersToRemove.add(member);
          }
        }
        for (        Member member : membersToRemove) {
          cluster.removeMember(member);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",member.getMemberId(),member.getLbClusterId()));
          }
        }
      }
    }
  }
  Collection<Application> applications=event.getTopology().getApplications();
  if (applications != null && !applications.isEmpty()) {
    for (    Application application : applications) {
      topology.addApplication(application);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getUniqueIdentifier() + ""String_Node_Str"");
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  topology.setInitialized(true);
}",0.9882352941176472
116522,"public ClusterMonitor(String clusterId,String serviceId,DeploymentPolicy deploymentPolicy,AutoscalePolicy autoscalePolicy){
  this.clusterId=clusterId;
  this.serviceId=serviceId;
  this.autoscalerRuleEvaluator=new AutoscalerRuleEvaluator();
  this.scaleCheckKnowledgeSession=autoscalerRuleEvaluator.getScaleCheckStatefulSession();
  this.minCheckKnowledgeSession=autoscalerRuleEvaluator.getMinCheckStatefulSession();
  this.terminateDependencyKnowledgeSession=autoscalerRuleEvaluator.getTerminateDependencyStatefulSession();
  this.deploymentPolicy=deploymentPolicy;
  this.autoscalePolicy=autoscalePolicy;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicy);
  }
  networkPartitionCtxts=new ConcurrentHashMap<String,NetworkPartitionContext>();
}","public ClusterMonitor(String clusterId,String serviceId,DeploymentPolicy deploymentPolicy,AutoscalePolicy autoscalePolicy){
  this.clusterId=clusterId;
  this.serviceId=serviceId;
  this.autoscalerRuleEvaluator=new AutoscalerRuleEvaluator();
  this.scaleCheckKnowledgeSession=autoscalerRuleEvaluator.getScaleCheckStatefulSession();
  this.minCheckKnowledgeSession=autoscalerRuleEvaluator.getMinCheckStatefulSession();
  this.terminateDependencyKnowledgeSession=autoscalerRuleEvaluator.getTerminateDependencyStatefulSession();
  this.deploymentPolicy=deploymentPolicy;
  this.autoscalePolicy=autoscalePolicy;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + autoscalePolicy);
  }
  networkPartitionCtxts=new ConcurrentHashMap<String,NetworkPartitionContext>();
  status=Status.Created;
}",0.984147114774889
116523,"/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  clusterMonitor.setAppId(cluster.getAppId());
  clusterMonitor.setStatus(Status.Created);
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}","/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  clusterMonitor.setAppId(cluster.getAppId());
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}",0.9943604204050244
116524,"/** 
 * This will build the dependency tree based on the given dependency order
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentBehavior component){
  String alias=null;
  if (component instanceof Application) {
    alias=((Application)component).getId();
  }
 else   if (component instanceof Group) {
    alias=((Group)component).getAlias();
  }
  DependencyTree dependencyTree=new DependencyTree(alias);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + alias);
    }
    String killBehavior=dependencyOrder.getKillbehavior();
    if (Constants.KILL_NONE.equals(killBehavior)) {
      dependencyTree.setKillNone(true);
    }
 else     if (Constants.KILL_ALL.equals(killBehavior)) {
      dependencyTree.setKillAll(true);
    }
 else     if (Constants.KILL_DEPENDENTS.equals(killBehavior)) {
      dependencyTree.setKillDependent(true);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + killBehavior + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    }
    Set<StartupOrder> startupOrderSet=dependencyOrder.getStartupOrders();
    ApplicationContext foundContext=null;
    for (    StartupOrder startupOrder : startupOrderSet) {
      foundContext=null;
      for (      String start : startupOrder.getStartList()) {
        ApplicationContext applicationContext=ApplicationContextFactory.getApplicationContext(start,component,dependencyTree);
        String id=applicationContext.getId();
        ApplicationContext existingApplicationContext=dependencyTree.findApplicationContextWithId(id);
        if (existingApplicationContext == null) {
          if (foundContext != null) {
            foundContext.addApplicationContext(applicationContext);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + foundContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
            }
          }
 else {
            dependencyTree.addApplicationContext(applicationContext);
          }
        }
 else {
          if (foundContext == null) {
            foundContext=existingApplicationContext;
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
            }
          }
 else {
            log.warn(""String_Node_Str"" + ""String_Node_Str"");
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithId(group1.getAlias()) == null) {
      dependencyTree.addApplicationContext(new GroupContext(group1.getAlias(),dependencyTree.isKillDependent()));
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithId(dataHolder.getClusterId()) == null) {
      dependencyTree.addApplicationContext(new ClusterContext(dataHolder.getClusterId(),dependencyTree.isKillDependent()));
    }
  }
  return dependencyTree;
}","/** 
 * This will build the dependency tree based on the given dependency order
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentBehavior component) throws DependencyBuilderException {
  String alias=null;
  if (component instanceof Application) {
    alias=((Application)component).getId();
  }
 else   if (component instanceof Group) {
    alias=((Group)component).getAlias();
  }
  DependencyTree dependencyTree=new DependencyTree(alias);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + alias);
    }
    String killBehavior=dependencyOrder.getKillbehavior();
    if (Constants.KILL_NONE.equals(killBehavior)) {
      dependencyTree.setKillNone(true);
    }
 else     if (Constants.KILL_ALL.equals(killBehavior)) {
      dependencyTree.setKillAll(true);
    }
 else     if (Constants.KILL_DEPENDENTS.equals(killBehavior)) {
      dependencyTree.setKillDependent(true);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + killBehavior + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    }
    Set<StartupOrder> startupOrderSet=dependencyOrder.getStartupOrders();
    ApplicationContext foundContext=null;
    for (    StartupOrder startupOrder : startupOrderSet) {
      foundContext=null;
      for (      String start : startupOrder.getStartList()) {
        ApplicationContext applicationContext=ApplicationContextFactory.getApplicationContext(start,component,dependencyTree);
        String id=applicationContext.getId();
        ApplicationContext existingApplicationContext=dependencyTree.findApplicationContextWithId(id);
        if (existingApplicationContext == null) {
          if (foundContext != null) {
            foundContext.addApplicationContext(applicationContext);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + foundContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
            }
          }
 else {
            dependencyTree.addApplicationContext(applicationContext);
          }
        }
 else {
          if (foundContext == null) {
            foundContext=existingApplicationContext;
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
            }
          }
 else {
            String msg=""String_Node_Str"" + ""String_Node_Str"";
            throw new DependencyBuilderException(msg);
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithId(group1.getAlias()) == null) {
      dependencyTree.addApplicationContext(new GroupContext(group1.getAlias(),dependencyTree.isKillDependent()));
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithId(dataHolder.getClusterId()) == null) {
      dependencyTree.addApplicationContext(new ClusterContext(dataHolder.getClusterId(),dependencyTree.isKillDependent()));
    }
  }
  return dependencyTree;
}",0.983150409646004
116525,"public void run(){
  ApplicationMonitor applicationMonitor=null;
  int retries=5;
  boolean success=false;
  do {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e1) {
    }
    try {
      long start=System.currentTimeMillis();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getId());
      }
      applicationMonitor=AutoscalerUtil.getApplicationMonitor(application);
      long end=System.currentTimeMillis();
      log.info(""String_Node_Str"" + (end - start) / 1000);
      success=true;
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"";
      log.warn(msg,e);
      retries--;
    }
  }
 while (!success && retries != 0);
  if (applicationMonitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + application.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  AutoscalerContext.getInstance().addAppMonitor(applicationMonitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationMonitor.getId()));
  }
}","public void run(){
  ApplicationMonitor applicationMonitor=null;
  int retries=5;
  boolean success=false;
  do {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e1) {
    }
    try {
      long start=System.currentTimeMillis();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getId());
      }
      applicationMonitor=AutoscalerUtil.getApplicationMonitor(application);
      long end=System.currentTimeMillis();
      log.info(""String_Node_Str"" + (end - start) / 1000);
      success=true;
    }
 catch (    DependencyBuilderException e) {
      String msg=""String_Node_Str"";
      log.warn(msg,e);
      retries--;
    }
catch (    TopologyInConsistentException e) {
      String msg=""String_Node_Str"";
      log.warn(msg,e);
      retries--;
    }
  }
 while (!success && retries != 0);
  if (applicationMonitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + application.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  AutoscalerContext.getInstance().addAppMonitor(applicationMonitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationMonitor.getId()));
  }
}",0.9370932754880694
116526,"/** 
 * This will build the dependency tree based on the given dependency order
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentBehavior component) throws DependencyBuilderException {
  String alias=null;
  if (component instanceof Application) {
    alias=((Application)component).getId();
  }
 else   if (component instanceof Group) {
    alias=((Group)component).getAlias();
  }
  DependencyTree dependencyTree=new DependencyTree(alias);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + alias);
    }
    String killBehavior=dependencyOrder.getKillbehavior();
    if (Constants.KILL_NONE.equals(killBehavior)) {
      dependencyTree.setKillNone(true);
    }
 else     if (Constants.KILL_ALL.equals(killBehavior)) {
      dependencyTree.setKillAll(true);
    }
 else     if (Constants.KILL_DEPENDENTS.equals(killBehavior)) {
      dependencyTree.setKillDependent(true);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + killBehavior + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    }
    Set<StartupOrder> startupOrderSet=dependencyOrder.getStartupOrders();
    ApplicationContext foundContext=null;
    for (    StartupOrder startupOrder : startupOrderSet) {
      foundContext=null;
      for (      String start : startupOrder.getStartList()) {
        ApplicationContext applicationContext=ApplicationContextFactory.getApplicationContext(start,component,dependencyTree);
        String id=applicationContext.getId();
        ApplicationContext existingApplicationContext=dependencyTree.findApplicationContextWithId(id);
        if (existingApplicationContext == null) {
          if (foundContext != null) {
            foundContext.addApplicationContext(applicationContext);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + foundContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
            }
          }
 else {
            dependencyTree.addApplicationContext(applicationContext);
          }
        }
 else {
          if (foundContext == null) {
            foundContext=existingApplicationContext;
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
            }
          }
 else {
            String msg=""String_Node_Str"" + ""String_Node_Str"";
            throw new DependencyBuilderException(msg);
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithId(group1.getAlias()) == null) {
      dependencyTree.addApplicationContext(new GroupContext(group1.getAlias(),dependencyTree.isKillDependent()));
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithId(dataHolder.getClusterId()) == null) {
      dependencyTree.addApplicationContext(new ClusterContext(dataHolder.getClusterId(),dependencyTree.isKillDependent()));
    }
  }
  return dependencyTree;
}","/** 
 * This will build the dependency tree based on the given dependency order
 * @param component it will give the necessary information to build the tree
 * @return the dependency tree out of the dependency orders
 */
public DependencyTree buildDependency(ParentComponent component) throws DependencyBuilderException {
  String identifier=component.getUniqueIdentifier();
  DependencyTree dependencyTree=new DependencyTree(identifier);
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + identifier);
    }
    String killBehavior=dependencyOrder.getKillbehavior();
    if (Constants.KILL_NONE.equals(killBehavior)) {
      dependencyTree.setKillNone(true);
    }
 else     if (Constants.KILL_ALL.equals(killBehavior)) {
      dependencyTree.setKillAll(true);
    }
 else     if (Constants.KILL_DEPENDENTS.equals(killBehavior)) {
      dependencyTree.setKillDependent(true);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + killBehavior + ""String_Node_Str""+ ""String_Node_Str""+ dependencyTree.getId());
    }
    String[] startupOrders=dependencyOrder.getStartupOrders();
    ApplicationContext foundContext=null;
    if (startupOrders == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      return dependencyTree;
    }
    for (    String startupOrder : startupOrders) {
      String start=dependencyOrder.getStartStartupOrder(startupOrder);
      foundContext=null;
      if (start != null) {
        ApplicationContext applicationContext=ApplicationContextFactory.getApplicationContext(start,component,dependencyTree);
        String id=applicationContext.getId();
        ApplicationContext existingApplicationContext=dependencyTree.findApplicationContextWithId(id);
        if (existingApplicationContext == null) {
          if (foundContext != null) {
            foundContext.addApplicationContext(applicationContext);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + foundContext.getId() + ""String_Node_Str""+ id+ ""String_Node_Str"");
            }
          }
 else {
            dependencyTree.addApplicationContext(applicationContext);
          }
        }
 else {
          if (foundContext == null) {
            foundContext=existingApplicationContext;
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
            }
          }
 else {
            String msg=""String_Node_Str"" + ""String_Node_Str"";
            throw new DependencyBuilderException(msg);
          }
        }
      }
    }
  }
  for (  Group group1 : component.getAliasToGroupMap().values()) {
    if (dependencyTree.findApplicationContextWithId(group1.getAlias()) == null) {
      dependencyTree.addApplicationContext(new GroupContext(group1.getAlias(),dependencyTree.isKillDependent()));
    }
  }
  for (  ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
    if (dependencyTree.findApplicationContextWithId(dataHolder.getClusterId()) == null) {
      dependencyTree.addApplicationContext(new ClusterContext(dataHolder.getClusterId(),dependencyTree.isKillDependent()));
    }
  }
  return dependencyTree;
}",0.864339908952959
116527,"public static ApplicationContext getApplicationContext(String startOrder,ParentBehavior component,DependencyTree dependencyTree){
  String id;
  ApplicationContext applicationContext=null;
  if (startOrder.contains(""String_Node_Str"")) {
    id=getGroupFromStartupOrder(startOrder);
    applicationContext=new GroupContext(component.getGroup(id).getAlias(),dependencyTree.isKillDependent());
  }
 else   if (startOrder.contains(""String_Node_Str"")) {
    id=getClusterFromStartupOrder(startOrder);
    applicationContext=new ClusterContext(component.getClusterData(id).getClusterId(),dependencyTree.isKillDependent());
  }
 else {
  }
  return applicationContext;
}","public static ApplicationContext getApplicationContext(String startOrder,ParentComponent component,DependencyTree dependencyTree){
  String id;
  ApplicationContext applicationContext=null;
  if (startOrder.contains(""String_Node_Str"")) {
    id=getGroupFromStartupOrder(startOrder);
    applicationContext=new GroupContext(component.getGroup(id).getAlias(),dependencyTree.isKillDependent());
  }
 else   if (startOrder.contains(""String_Node_Str"")) {
    id=getClusterFromStartupOrder(startOrder);
    applicationContext=new ClusterContext(component.getClusterData(id).getClusterId(),dependencyTree.isKillDependent());
  }
 else {
  }
  return applicationContext;
}",0.987189148455162
116528,"private void handleMemberFaultEvent(String clusterId,String memberId){
  try {
    AbstractClusterMonitor monitor=getMonitor(clusterId);
    NetworkPartitionContext nwPartitionCtxt;
    try {
      TopologyManager.acquireReadLock();
      Member member=findMember(memberId);
      if (null == member) {
        return;
      }
      if (!member.isActive()) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        return;
      }
      if (monitor != null) {
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(member);
      }
 else {
        return;
      }
    }
  finally {
      TopologyManager.releaseReadLock();
    }
    String partitionId=monitor.getPartitionOfMember(memberId);
    PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
    if (!partitionCtxt.activeMemberExist(memberId)) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",memberId));
      }
      return;
    }
    CloudControllerClient ccClient=CloudControllerClient.getInstance();
    ccClient.terminate(memberId);
    partitionCtxt.removeActiveMemberById(memberId);
    StatusChecker.getInstance().onMemberFaultEvent(clusterId,""String_Node_Str"",partitionCtxt);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberId,partitionId,clusterId));
    }
  }
 catch (  TerminationException e) {
    log.error(e);
  }
}","private void handleMemberFaultEvent(String clusterId,String memberId){
  try {
    AbstractClusterMonitor monitor=getMonitor(clusterId);
    NetworkPartitionContext nwPartitionCtxt;
    TopologyManager.acquireReadLockForServices();
    try {
      Member member=findMember(memberId);
      if (null == member) {
        return;
      }
      if (!member.isActive()) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        return;
      }
      if (monitor != null) {
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(member);
      }
 else {
        return;
      }
    }
  finally {
      TopologyManager.releaseReadLockForServices();
    }
    String partitionId=monitor.getPartitionOfMember(memberId);
    PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
    if (!partitionCtxt.activeMemberExist(memberId)) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",memberId));
      }
      return;
    }
    CloudControllerClient ccClient=CloudControllerClient.getInstance();
    ccClient.terminate(memberId);
    partitionCtxt.removeActiveMemberById(memberId);
    StatusChecker.getInstance().onMemberFaultEvent(clusterId,""String_Node_Str"",partitionCtxt);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberId,partitionId,clusterId));
    }
  }
 catch (  TerminationException e) {
    log.error(e);
  }
}",0.9830966869506425
116529,"private Member findMember(String memberId){
  try {
    TopologyManager.acquireReadLock();
    for (    Service service : TopologyManager.getTopology().getServices()) {
      for (      Cluster cluster : service.getClusters()) {
        if (cluster.memberExists(memberId)) {
          return cluster.getMember(memberId);
        }
      }
    }
    return null;
  }
  finally {
    TopologyManager.releaseReadLock();
  }
}","private Member findMember(String memberId){
  TopologyManager.acquireReadLockForServices();
  try {
    for (    Service service : TopologyManager.getTopology().getServices()) {
      for (      Cluster cluster : service.getClusters()) {
        if (cluster.memberExists(memberId)) {
          return cluster.getMember(memberId);
        }
      }
    }
    return null;
  }
  finally {
    TopologyManager.releaseReadLockForServices();
  }
}",0.9537037037037036
116530,"public void run(){
  ApplicationMonitor applicationMonitor=null;
  int retries=5;
  boolean success=false;
  do {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e1) {
    }
    try {
      long start=System.currentTimeMillis();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getId());
      }
      applicationMonitor=AutoscalerUtil.getApplicationMonitor(application);
      long end=System.currentTimeMillis();
      log.info(""String_Node_Str"" + (end - start) / 1000);
      success=true;
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + application.getId();
      log.debug(msg,e);
      retries--;
    }
  }
 while (!success && retries != 0);
  if (applicationMonitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + applicationMonitor.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  AutoscalerContext.getInstance().addAppMonitor(applicationMonitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationMonitor.getId()));
  }
}","public void run(){
  ApplicationMonitor applicationMonitor=null;
  int retries=5;
  boolean success=false;
  do {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e1) {
    }
    try {
      long start=System.currentTimeMillis();
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + application.getId());
      }
      applicationMonitor=AutoscalerUtil.getApplicationMonitor(application);
      long end=System.currentTimeMillis();
      log.info(""String_Node_Str"" + (end - start) / 1000);
      success=true;
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"";
      log.warn(msg,e);
      retries--;
    }
  }
 while (!success && retries != 0);
  if (applicationMonitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + applicationMonitor.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  AutoscalerContext.getInstance().addAppMonitor(applicationMonitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationMonitor.getId()));
  }
}",0.9749658625398272
116531,"@Override public boolean validateDeploymentPolicy(String cartridgeType,Partition[] partitions) throws InvalidPartitionException, InvalidCartridgeTypeException {
  Map<String,List<String>> validatedCache=dataHolder.getCartridgeTypeToPartitionIds();
  List<String> validatedPartitions=new ArrayList<String>();
  if (validatedCache.containsKey(cartridgeType)) {
    validatedPartitions=validatedCache.get(cartridgeType);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeType);
    }
  }
  Map<String,IaasProvider> partitionToIaasProviders=new ConcurrentHashMap<String,IaasProvider>();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cartridgeType);
  }
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg);
    throw new InvalidCartridgeTypeException(msg);
  }
  Map<String,Future<IaasProvider>> jobList=new HashMap<String,Future<IaasProvider>>();
  for (  Partition partition : partitions) {
    if (validatedPartitions.contains(partition.getId())) {
      continue;
    }
    Callable<IaasProvider> worker=new PartitionValidatorCallable(partition,cartridge);
    Future<IaasProvider> job=FasterLookUpDataHolder.getInstance().getExecutor().submit(worker);
    jobList.put(partition.getId(),job);
  }
  for (  String partitionId : jobList.keySet()) {
    Future<IaasProvider> job=jobList.get(partitionId);
    try {
      partitionToIaasProviders.put(partitionId,job.get());
      this.dataHolder.addToCartridgeTypeToPartitionIdMap(cartridgeType,partitionId);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + partitionId + ""String_Node_Str""+ cartridgeType);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
      throw new InvalidPartitionException(e.getMessage(),e);
    }
  }
  cartridge.addIaasProviders(partitionToIaasProviders);
  persist();
  log.info(""String_Node_Str"" + CloudControllerUtil.getPartitionIds(partitions) + ""String_Node_Str""+ cartridgeType);
  return true;
}","@Override public boolean validateDeploymentPolicy(String cartridgeType,Partition[] partitions) throws InvalidPartitionException, InvalidCartridgeTypeException {
  Map<String,List<String>> validatedCache=dataHolder.getCartridgeTypeToPartitionIds();
  List<String> validatedPartitions=new ArrayList<String>();
  if (validatedCache.containsKey(cartridgeType)) {
    validatedPartitions=validatedCache.get(cartridgeType);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeType);
    }
  }
  Map<String,IaasProvider> partitionToIaasProviders=new ConcurrentHashMap<String,IaasProvider>();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cartridgeType);
  }
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg);
    throw new InvalidCartridgeTypeException(msg);
  }
  Map<String,Future<IaasProvider>> jobList=new HashMap<String,Future<IaasProvider>>();
  for (  Partition partition : partitions) {
    if (validatedPartitions.contains(partition.getId())) {
      continue;
    }
    Callable<IaasProvider> worker=new PartitionValidatorCallable(partition,cartridge);
    Future<IaasProvider> job=FasterLookUpDataHolder.getInstance().getExecutor().submit(worker);
    jobList.put(partition.getId(),job);
  }
  for (  Entry<String,Future<IaasProvider>> entry : jobList.entrySet()) {
    if (entry == null) {
      continue;
    }
    String partitionId=entry.getKey();
    Future<IaasProvider> job=entry.getValue();
    try {
      partitionToIaasProviders.put(partitionId,job.get());
      this.dataHolder.addToCartridgeTypeToPartitionIdMap(cartridgeType,partitionId);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + partitionId + ""String_Node_Str""+ cartridgeType);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
      throw new InvalidPartitionException(e.getMessage(),e);
    }
  }
  cartridge.addIaasProviders(partitionToIaasProviders);
  persist();
  log.info(""String_Node_Str"" + CloudControllerUtil.getPartitionIds(partitions) + ""String_Node_Str""+ cartridgeType);
  return true;
}",0.955785512699906
116532,"private void populateNewCartridge(Cartridge cartridge,Cartridge cartridgeToBeRemoved){
  List<IaasProvider> newIaasProviders=cartridge.getIaases();
  Map<String,IaasProvider> oldPartitionToIaasMap=cartridgeToBeRemoved.getPartitionToIaasProvider();
  for (  String partitionId : oldPartitionToIaasMap.keySet()) {
    IaasProvider oldIaasProvider=oldPartitionToIaasMap.get(partitionId);
    if (newIaasProviders.contains(oldIaasProvider)) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + ""String_Node_Str"" + partitionId + ""String_Node_Str""+ cartridge.getType());
      }
      cartridge.addIaasProvider(partitionId,newIaasProviders.get(newIaasProviders.indexOf(oldIaasProvider)));
    }
  }
}","private void populateNewCartridge(Cartridge cartridge,Cartridge cartridgeToBeRemoved){
  List<IaasProvider> newIaasProviders=cartridge.getIaases();
  Map<String,IaasProvider> oldPartitionToIaasMap=cartridgeToBeRemoved.getPartitionToIaasProvider();
  for (  Entry<String,IaasProvider> entry : oldPartitionToIaasMap.entrySet()) {
    if (entry == null) {
      continue;
    }
    String partitionId=entry.getKey();
    IaasProvider oldIaasProvider=entry.getValue();
    if (newIaasProviders.contains(oldIaasProvider)) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + ""String_Node_Str"" + partitionId + ""String_Node_Str""+ cartridge.getType());
      }
      cartridge.addIaasProvider(partitionId,newIaasProviders.get(newIaasProviders.indexOf(oldIaasProvider)));
    }
  }
}",0.8344370860927153
116533,"@Override public String createVolume(int sizeGB,String snapshotId){
  IaasProvider iaasInfo=getIaasProvider();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  String zone=ComputeServiceBuilderUtil.extractZone(iaasInfo);
  if (region == null || iaasInfo == null) {
    log.fatal(String.format(""String_Node_Str"",region,iaasInfo));
    return null;
  }
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi volumeApi=novaApi.getVolumeExtensionForZone(region).get();
  Volume volume;
  if (StringUtils.isEmpty(snapshotId)) {
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + zone);
    }
    volume=volumeApi.create(sizeGB,CreateVolumeOptions.Builder.availabilityZone(zone));
  }
 else {
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + zone + ""String_Node_Str""+ snapshotId);
    }
    volume=volumeApi.create(sizeGB,CreateVolumeOptions.Builder.availabilityZone(zone).snapshotId(snapshotId));
  }
  if (volume == null) {
    log.fatal(String.format(""String_Node_Str"",region,zone,iaasInfo));
    return null;
  }
  String volumeId=volume.getId();
  log.info(String.format(""String_Node_Str"",volume.getId(),region,zone,iaasInfo,volume.getId()));
  return volumeId;
}","@Override public String createVolume(int sizeGB,String snapshotId){
  IaasProvider iaasInfo=getIaasProvider();
  if (iaasInfo == null) {
    log.fatal(String.format(""String_Node_Str"",snapshotId));
    return null;
  }
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  String zone=ComputeServiceBuilderUtil.extractZone(iaasInfo);
  if (region == null) {
    log.fatal(String.format(""String_Node_Str"",iaasInfo));
    return null;
  }
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi volumeApi=novaApi.getVolumeExtensionForZone(region).get();
  Volume volume;
  if (StringUtils.isEmpty(snapshotId)) {
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + zone);
    }
    volume=volumeApi.create(sizeGB,CreateVolumeOptions.Builder.availabilityZone(zone));
  }
 else {
    if (log.isDebugEnabled()) {
      log.info(""String_Node_Str"" + zone + ""String_Node_Str""+ snapshotId);
    }
    volume=volumeApi.create(sizeGB,CreateVolumeOptions.Builder.availabilityZone(zone).snapshotId(snapshotId));
  }
  if (volume == null) {
    log.fatal(String.format(""String_Node_Str"",region,zone,iaasInfo));
    return null;
  }
  String volumeId=volume.getId();
  log.info(String.format(""String_Node_Str"",volume.getId(),region,zone,iaasInfo,volume.getId()));
  return volumeId;
}",0.8522388059701492
116534,"@Override public String attachVolume(String instanceId,String volumeId,String deviceName){
  IaasProvider iaasInfo=getIaasProvider();
  if (StringUtils.isEmpty(volumeId)) {
    log.error(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(instanceId)) {
    log.error(""String_Node_Str"");
  }
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  String device=deviceName == null ? ""String_Node_Str"" : deviceName;
  if (region == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,region,iaasInfo));
    return null;
  }
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi volumeApi=novaApi.getVolumeExtensionForZone(region).get();
  VolumeAttachmentApi volumeAttachmentApi=novaApi.getVolumeAttachmentExtensionForZone(region).get();
  Volume.Status volumeStatus=this.getVolumeStatus(volumeApi,volumeId);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ volumeStatus);
  }
  if (!(volumeStatus == Volume.Status.AVAILABLE || volumeStatus == Volume.Status.CREATING)) {
    log.error(String.format(""String_Node_Str"",volumeId,volumeStatus));
    return null;
  }
  boolean volumeBecameAvailable=false, volumeBecameAttached=false;
  try {
    volumeBecameAvailable=waitForStatus(volumeId,Volume.Status.AVAILABLE,5);
  }
 catch (  TimeoutException e) {
    log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  VolumeAttachment attachment=null;
  if (volumeBecameAvailable) {
    attachment=volumeAttachmentApi.attachVolumeToServerAsDevice(volumeId,instanceId,device);
    try {
      volumeBecameAttached=waitForStatus(volumeId,Volume.Status.IN_USE,2);
    }
 catch (    TimeoutException e) {
      log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  if (attachment == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
    return null;
  }
  if (!volumeBecameAttached) {
    log.error(String.format(""String_Node_Str"",volumeId));
  }
  log.info(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
  return ""String_Node_Str"";
}","@Override public String attachVolume(String instanceId,String volumeId,String deviceName){
  IaasProvider iaasInfo=getIaasProvider();
  if (StringUtils.isEmpty(volumeId)) {
    log.error(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(instanceId)) {
    log.error(""String_Node_Str"");
  }
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  String device=deviceName == null ? ""String_Node_Str"" : deviceName;
  if (region == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,iaasInfo));
    return null;
  }
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi volumeApi=novaApi.getVolumeExtensionForZone(region).get();
  VolumeAttachmentApi volumeAttachmentApi=novaApi.getVolumeAttachmentExtensionForZone(region).get();
  Volume.Status volumeStatus=this.getVolumeStatus(volumeApi,volumeId);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ volumeStatus);
  }
  if (!(volumeStatus == Volume.Status.AVAILABLE || volumeStatus == Volume.Status.CREATING)) {
    log.error(String.format(""String_Node_Str"",volumeId,volumeStatus));
    return null;
  }
  boolean volumeBecameAvailable=false, volumeBecameAttached=false;
  try {
    volumeBecameAvailable=waitForStatus(volumeId,Volume.Status.AVAILABLE,5);
  }
 catch (  TimeoutException e) {
    log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  VolumeAttachment attachment=null;
  if (volumeBecameAvailable) {
    attachment=volumeAttachmentApi.attachVolumeToServerAsDevice(volumeId,instanceId,device);
    try {
      volumeBecameAttached=waitForStatus(volumeId,Volume.Status.IN_USE,2);
    }
 catch (    TimeoutException e) {
      log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  if (attachment == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
    return null;
  }
  if (!volumeBecameAttached) {
    log.error(String.format(""String_Node_Str"",volumeId));
  }
  log.info(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
  return ""String_Node_Str"";
}",0.998457130262288
116535,"@Override public void detachVolume(String instanceId,String volumeId){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  if (region == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
    return;
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",volumeId,instanceId));
  }
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeAttachmentApi api=novaApi.getVolumeAttachmentExtensionForZone(region).get();
  if (api.detachVolumeFromServer(volumeId,instanceId)) {
    log.info(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
  }
 else {
    log.error(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
  }
}","@Override public void detachVolume(String instanceId,String volumeId){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  if (region == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,instanceId,iaasInfo));
    return;
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",volumeId,instanceId));
  }
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeAttachmentApi api=novaApi.getVolumeAttachmentExtensionForZone(region).get();
  if (api.detachVolumeFromServer(volumeId,instanceId)) {
    log.info(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
  }
 else {
    log.error(String.format(""String_Node_Str"",volumeId,instanceId,region,iaasInfo));
  }
}",0.9959325973271352
116536,"@Override public void deleteVolume(String volumeId){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  if (region == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,region,iaasInfo));
    return;
  }
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi api=novaApi.getVolumeExtensionForZone(region).get();
  if (api.delete(volumeId)) {
    log.info(String.format(""String_Node_Str"",volumeId,region,iaasInfo));
  }
}","@Override public void deleteVolume(String volumeId){
  IaasProvider iaasInfo=getIaasProvider();
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  if (region == null) {
    log.fatal(String.format(""String_Node_Str"",volumeId,iaasInfo));
    return;
  }
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi api=novaApi.getVolumeExtensionForZone(region).get();
  if (api.delete(volumeId)) {
    log.info(String.format(""String_Node_Str"",volumeId,region,iaasInfo));
  }
}",0.993897122929381
116537,"private boolean waitForStatus(String volumeId,Volume.Status expectedStatus,int timeoutInMins) throws TimeoutException {
  long timeout=1000 * 60 * timeoutInMins;
  long timout=System.currentTimeMillis() + timeout;
  IaasProvider iaasInfo=getIaasProvider();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  ;
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi volumeApi=novaApi.getVolumeExtensionForZone(region).get();
  Volume.Status volumeStatus=this.getVolumeStatus(volumeApi,volumeId);
  while (volumeStatus != expectedStatus) {
    try {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus,volumeStatus));
      }
      if (volumeStatus == Volume.Status.ERROR) {
        log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
        return false;
      }
      Thread.sleep(1000);
      volumeStatus=this.getVolumeStatus(volumeApi,volumeId);
      if (System.currentTimeMillis() > timout) {
        throw new TimeoutException();
      }
    }
 catch (    InterruptedException e) {
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus));
  }
  return true;
}","private boolean waitForStatus(String volumeId,Volume.Status expectedStatus,int timeoutInMins) throws TimeoutException {
  int timeout=1000 * 60 * timeoutInMins;
  long timout=System.currentTimeMillis() + timeout;
  IaasProvider iaasInfo=getIaasProvider();
  String region=ComputeServiceBuilderUtil.extractRegion(iaasInfo);
  ComputeServiceContext context=iaasInfo.getComputeService().getContext();
  ;
  NovaApi novaApi=context.unwrapApi(NovaApi.class);
  VolumeApi volumeApi=novaApi.getVolumeExtensionForZone(region).get();
  Volume.Status volumeStatus=this.getVolumeStatus(volumeApi,volumeId);
  while (volumeStatus != expectedStatus) {
    try {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus,volumeStatus));
      }
      if (volumeStatus == Volume.Status.ERROR) {
        log.error(""String_Node_Str"" + volumeId + ""String_Node_Str"");
        return false;
      }
      Thread.sleep(1000);
      volumeStatus=this.getVolumeStatus(volumeApi,volumeId);
      if (System.currentTimeMillis() > timout) {
        throw new TimeoutException();
      }
    }
 catch (    InterruptedException e) {
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",volumeId,expectedStatus));
  }
  return true;
}",0.9972836631742336
116538,"public void buildTemplate(){
  IaasProvider iaasInfo=getIaasProvider();
  if (iaasInfo.getComputeService() == null) {
    throw new CloudControllerException(""String_Node_Str"" + iaasInfo.getName());
  }
  TemplateBuilder templateBuilder=iaasInfo.getComputeService().templateBuilder();
  templateBuilder.imageId(iaasInfo.getImage());
  if (!(iaasInfo instanceof IaasProvider)) {
    templateBuilder.locationId(iaasInfo.getType());
  }
  String instanceType;
  if (((instanceType=iaasInfo.getProperty(CloudControllerConstants.INSTANCE_TYPE)) != null)) {
    templateBuilder.hardwareId(instanceType);
  }
  Template template=templateBuilder.build();
  boolean blockUntilRunning=true;
  if (iaasInfo.getProperty(CloudControllerConstants.BLOCK_UNTIL_RUNNING) != null) {
    blockUntilRunning=Boolean.parseBoolean(iaasInfo.getProperty(CloudControllerConstants.BLOCK_UNTIL_RUNNING));
  }
  template.getOptions().as(TemplateOptions.class).blockUntilRunning(blockUntilRunning);
  template.getOptions().as(TemplateOptions.class).inboundPorts(new int[]{});
  if (iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUPS) != null) {
    template.getOptions().as(NovaTemplateOptions.class).securityGroupNames(iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUPS).split(CloudControllerConstants.ENTRY_SEPARATOR));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR) != null) {
    template.getOptions().as(NovaTemplateOptions.class).keyPairName(iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR));
  }
  if (iaasInfo.getNetworkInterfaces() != null) {
    Set<Network> novaNetworksSet=new LinkedHashSet<Network>(iaasInfo.getNetworkInterfaces().length);
    for (    NetworkInterface ni : iaasInfo.getNetworkInterfaces()) {
      novaNetworksSet.add(Network.builder().networkUuid(ni.getNetworkUuid()).fixedIp(ni.getFixedIp()).portUuid(ni.getPortUuid()).build());
    }
    template.getOptions().as(NovaTemplateOptions.class).novaNetworks(novaNetworksSet);
  }
  if (iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE) != null) {
    template.getOptions().as(NovaTemplateOptions.class).availabilityZone(iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE));
  }
  iaasInfo.setTemplate(template);
}","public void buildTemplate(){
  IaasProvider iaasInfo=getIaasProvider();
  if (iaasInfo.getComputeService() == null) {
    throw new CloudControllerException(""String_Node_Str"" + iaasInfo.getName());
  }
  TemplateBuilder templateBuilder=iaasInfo.getComputeService().templateBuilder();
  templateBuilder.imageId(iaasInfo.getImage());
  String instanceType;
  if (((instanceType=iaasInfo.getProperty(CloudControllerConstants.INSTANCE_TYPE)) != null)) {
    templateBuilder.hardwareId(instanceType);
  }
  Template template=templateBuilder.build();
  boolean blockUntilRunning=true;
  if (iaasInfo.getProperty(CloudControllerConstants.BLOCK_UNTIL_RUNNING) != null) {
    blockUntilRunning=Boolean.parseBoolean(iaasInfo.getProperty(CloudControllerConstants.BLOCK_UNTIL_RUNNING));
  }
  template.getOptions().as(TemplateOptions.class).blockUntilRunning(blockUntilRunning);
  template.getOptions().as(TemplateOptions.class).inboundPorts(new int[]{});
  if (iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUPS) != null) {
    template.getOptions().as(NovaTemplateOptions.class).securityGroupNames(iaasInfo.getProperty(CloudControllerConstants.SECURITY_GROUPS).split(CloudControllerConstants.ENTRY_SEPARATOR));
  }
  if (iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR) != null) {
    template.getOptions().as(NovaTemplateOptions.class).keyPairName(iaasInfo.getProperty(CloudControllerConstants.KEY_PAIR));
  }
  if (iaasInfo.getNetworkInterfaces() != null) {
    Set<Network> novaNetworksSet=new LinkedHashSet<Network>(iaasInfo.getNetworkInterfaces().length);
    for (    NetworkInterface ni : iaasInfo.getNetworkInterfaces()) {
      novaNetworksSet.add(Network.builder().networkUuid(ni.getNetworkUuid()).fixedIp(ni.getFixedIp()).portUuid(ni.getPortUuid()).build());
    }
    template.getOptions().as(NovaTemplateOptions.class).novaNetworks(novaNetworksSet);
  }
  if (iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE) != null) {
    template.getOptions().as(NovaTemplateOptions.class).availabilityZone(iaasInfo.getProperty(CloudControllerConstants.AVAILABILITY_ZONE));
  }
  iaasInfo.setTemplate(template);
}",0.9769037274182484
116539,"public void undeployServiceGroup(String name) throws InvalidServiceGroupException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + name);
  }
  ServiceGroup serviceGroup=null;
  if ((serviceGroup=dataHolder.getServiceGroup(name)) != null) {
    if (dataHolder.getServiceGroups().remove(name)) {
      persist();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + serviceGroup);
      }
      return;
    }
  }
  String msg=""String_Node_Str"" + name + ""String_Node_Str"";
  log.error(msg);
  throw new InvalidServiceGroupException(msg);
}","public void undeployServiceGroup(String name) throws InvalidServiceGroupException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + name);
  }
  ServiceGroup serviceGroup=null;
  serviceGroup=dataHolder.getServiceGroup(name);
  if (serviceGroup != null) {
    if (dataHolder.getServiceGroups().remove(serviceGroup)) {
      persist();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + serviceGroup);
      }
      return;
    }
  }
  String msg=""String_Node_Str"" + name + ""String_Node_Str"";
  log.error(msg);
  throw new InvalidServiceGroupException(msg);
}",0.8934707903780069
116540,"@Override public Properties execute(CartridgeInfo cartridgeInfo,SubscriptionData subscriptionData) throws ADCException {
  LBDataContext lbDataCtxt=null;
  CartridgeSubscription lbCartridgeSubscription=null;
  Properties lbCartridgeSubscriptionProperties=new Properties();
  Properties filterProperties=new Properties();
  try {
    LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
    if (lbConfig == null || lbConfig.getProperties() == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + ""String_Node_Str"" + subscriptionData.getCartridgeType());
      }
    }
 else {
      lbDataCtxt=CartridgeSubscriptionUtils.getLoadBalancerDataContext(subscriptionData.getTenantId(),subscriptionData.getCartridgeType(),subscriptionData.getDeploymentPolicyName(),lbConfig);
      lbCartridgeSubscription=subscribeToLB(subscriptionData,lbDataCtxt,cartridgeInfo);
      if (lbDataCtxt.getLbProperperties() != null && !lbDataCtxt.getLbProperperties().isEmpty()) {
        List<Property> lbProperperties=lbDataCtxt.getLbProperperties();
        lbCartridgeSubscriptionProperties.setProperties(lbProperperties.toArray(new Property[lbProperperties.size()]));
      }
      if (lbCartridgeSubscription != null) {
        Property lbClusterIdProp=new Property();
        lbClusterIdProp.setName(CartridgeConstants.LB_CLUSTER_ID);
        lbClusterIdProp.setValue(lbCartridgeSubscription.getClusterDomain());
        lbCartridgeSubscriptionProperties.addProperties(lbClusterIdProp);
        filterProperties.addProperties(lbClusterIdProp);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        CartridgeSubscriptionManager.registerCartridgeSubscription(lbCartridgeSubscription,lbCartridgeSubscriptionProperties,subscriptionData.getPersistence());
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    throw new ADCException(e.getMessage(),e);
  }
  return filterProperties;
}","@Override public Properties execute(CartridgeInfo cartridgeInfo,SubscriptionData subscriptionData) throws ADCException {
  LBDataContext lbDataCtxt=null;
  CartridgeSubscription lbCartridgeSubscription=null;
  Properties lbCartridgeSubscriptionProperties=new Properties();
  Properties filterProperties=new Properties();
  try {
    LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
    if (lbConfig == null || lbConfig.getProperties() == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + ""String_Node_Str"" + subscriptionData.getCartridgeType());
      }
    }
 else {
      lbDataCtxt=CartridgeSubscriptionUtils.getLoadBalancerDataContext(subscriptionData.getTenantId(),subscriptionData.getCartridgeType(),subscriptionData.getDeploymentPolicyName(),lbConfig);
      lbCartridgeSubscription=subscribeToLB(subscriptionData,lbDataCtxt,cartridgeInfo);
      if (lbDataCtxt.getLbProperperties() != null && !lbDataCtxt.getLbProperperties().isEmpty()) {
        List<Property> lbProperperties=lbDataCtxt.getLbProperperties();
        lbCartridgeSubscriptionProperties.setProperties(lbProperperties.toArray(new Property[lbProperperties.size()]));
        for (        Property property : lbProperperties) {
          if (org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF.equals(property.getName())) {
            filterProperties.addProperties(property);
          }
        }
      }
      if (lbCartridgeSubscription != null) {
        Property lbClusterIdProp=new Property();
        lbClusterIdProp.setName(CartridgeConstants.LB_CLUSTER_ID);
        lbClusterIdProp.setValue(lbCartridgeSubscription.getClusterDomain());
        lbCartridgeSubscriptionProperties.addProperties(lbClusterIdProp);
        filterProperties.addProperties(lbClusterIdProp);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        CartridgeSubscriptionManager.registerCartridgeSubscription(lbCartridgeSubscription,lbCartridgeSubscriptionProperties,subscriptionData.getPersistence());
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    throw new ADCException(e.getMessage(),e);
  }
  return filterProperties;
}",0.94174289841117
116541,"@Override public MemberContext startInstance(MemberContext memberContext) throws UnregisteredCartridgeException, InvalidIaasProviderException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (memberContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=memberContext.getClusterId();
  Partition partition=memberContext.getPartition();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + memberContext.toString());
  }
  ComputeService computeService=null;
  Template template=null;
  if (partition == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String partitionId=partition.getId();
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ memberContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  memberContext.setCartridgeType(cartridgeType);
  IaasProvider iaasProvider=cartridge.getIaasProviderOfPartition(partitionId);
  if (iaasProvider == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridge.hashCode() + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ partitionId);
    }
    String msg=""String_Node_Str"" + ""String_Node_Str"" + partitionId + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ ""String_Node_Str""+ cartridge.getPartitionToIaasProvider().keySet().toString()+ ""String_Node_Str""+ memberContext.toString()+ ""String_Node_Str"";
    log.fatal(msg);
    throw new InvalidIaasProviderException(msg);
  }
  String type=iaasProvider.getType();
  try {
    String memberID=generateMemberId(clusterId);
    memberContext.setMemberId(memberID);
    StringBuilder payload=new StringBuilder(ctxt.getPayload());
    addToPayload(payload,""String_Node_Str"",memberID);
    addToPayload(payload,""String_Node_Str"",memberContext.getLbClusterId());
    addToPayload(payload,""String_Node_Str"",memberContext.getNetworkPartitionId());
    addToPayload(payload,""String_Node_Str"",partitionId);
    if (memberContext.getProperties() != null) {
      org.apache.stratos.cloud.controller.pojo.Properties props1=memberContext.getProperties();
      if (props1 != null) {
        for (        Property prop : props1.getProperties()) {
          addToPayload(payload,prop.getName(),prop.getValue());
        }
      }
    }
    Iaas iaas=iaasProvider.getIaas();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + payload.toString());
    }
    if (iaas == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + type + ""String_Node_Str"");
      }
      try {
        iaas=CloudControllerUtil.getIaas(iaasProvider);
      }
 catch (      InvalidIaasProviderException e) {
        String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ type+ ""String_Node_Str""+ e.getMessage();
        log.error(msg,e);
        throw new InvalidIaasProviderException(msg,e);
      }
    }
    if (ctxt.isVolumeRequired()) {
      if (ctxt.getVolumes() != null) {
        for (        Volume volume : ctxt.getVolumes()) {
          if (volume.getId() == null) {
            createVolumeAndSetInClusterContext(volume,iaasProvider);
          }
        }
      }
    }
    if (ctxt.isVolumeRequired()) {
      addToPayload(payload,""String_Node_Str"",getPersistencePayload(ctxt,iaas).toString());
    }
    iaasProvider.setPayload(payload.toString().getBytes());
    iaas.setDynamicPayload();
    computeService=iaasProvider.getComputeService();
    template=iaasProvider.getTemplate();
    if (template == null) {
      String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ iaasProvider.getType();
      log.error(msg);
      throw new InvalidIaasProviderException(msg);
    }
    ThreadExecutor exec=ThreadExecutor.getInstance();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    exec.execute(new JcloudsInstanceCreator(memberContext,iaasProvider,cartridgeType));
    log.info(""String_Node_Str"" + memberContext.toString());
    return memberContext;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}","@Override public MemberContext startInstance(MemberContext memberContext) throws UnregisteredCartridgeException, InvalidIaasProviderException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (memberContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=memberContext.getClusterId();
  Partition partition=memberContext.getPartition();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + memberContext.toString());
  }
  ComputeService computeService=null;
  Template template=null;
  if (partition == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String partitionId=partition.getId();
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ memberContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  memberContext.setCartridgeType(cartridgeType);
  IaasProvider iaasProvider=cartridge.getIaasProviderOfPartition(partitionId);
  if (iaasProvider == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridge.hashCode() + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ partitionId);
    }
    String msg=""String_Node_Str"" + ""String_Node_Str"" + partitionId + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ ""String_Node_Str""+ cartridge.getPartitionToIaasProvider().keySet().toString()+ ""String_Node_Str""+ memberContext.toString()+ ""String_Node_Str"";
    log.fatal(msg);
    throw new InvalidIaasProviderException(msg);
  }
  String type=iaasProvider.getType();
  try {
    String memberID=generateMemberId(clusterId);
    memberContext.setMemberId(memberID);
    StringBuilder payload=new StringBuilder(ctxt.getPayload());
    addToPayload(payload,""String_Node_Str"",memberID);
    addToPayload(payload,""String_Node_Str"",memberContext.getLbClusterId());
    addToPayload(payload,""String_Node_Str"",memberContext.getNetworkPartitionId());
    addToPayload(payload,""String_Node_Str"",partitionId);
    if (memberContext.getProperties() != null) {
      org.apache.stratos.cloud.controller.pojo.Properties props1=memberContext.getProperties();
      if (props1 != null) {
        for (        Property prop : props1.getProperties()) {
          addToPayload(payload,prop.getName(),prop.getValue());
        }
      }
    }
    Iaas iaas=iaasProvider.getIaas();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + payload.toString());
    }
    if (iaas == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + type + ""String_Node_Str"");
      }
      try {
        iaas=CloudControllerUtil.getIaas(iaasProvider);
      }
 catch (      InvalidIaasProviderException e) {
        String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ type+ ""String_Node_Str""+ e.getMessage();
        log.error(msg,e);
        throw new InvalidIaasProviderException(msg,e);
      }
    }
    if (ctxt.isVolumeRequired()) {
      if (ctxt.getVolumes() != null) {
        for (        Volume volume : ctxt.getVolumes()) {
          if (volume.getId() == null) {
            createVolumeAndSetInClusterContext(volume,iaasProvider);
          }
        }
      }
    }
    if (ctxt.isVolumeRequired()) {
      addToPayload(payload,""String_Node_Str"",getPersistencePayload(ctxt,iaas).toString());
    }
    iaasProvider.setPayload(payload.toString().getBytes());
    iaas.setDynamicPayload();
    template=iaasProvider.getTemplate();
    if (template == null) {
      String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ iaasProvider.getType();
      log.error(msg);
      throw new InvalidIaasProviderException(msg);
    }
    ThreadExecutor exec=ThreadExecutor.getInstance();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    exec.execute(new JcloudsInstanceCreator(memberContext,iaasProvider,cartridgeType));
    log.info(""String_Node_Str"" + memberContext.toString());
    return memberContext;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}",0.9943236585627075
116542,"@Override public MemberContext startContainers(MemberContext memberContext) throws UnregisteredCartridgeException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (memberContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=memberContext.getClusterId();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + memberContext.toString());
  }
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ memberContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  memberContext.setCartridgeType(cartridgeType);
  try {
    String memberID=generateMemberId(clusterId);
    memberContext.setMemberId(memberID);
    String kubernetesClusterId=CloudControllerUtil.getProperty(ctxt.getProperties(),StratosConstants.KUBERNETES_CLUSTER_ID);
    if (kubernetesClusterId == null) {
      String msg=""String_Node_Str"" + StratosConstants.KUBERNETES_CLUSTER_ID + ""String_Node_Str""+ ctxt;
      log.error(msg);
      throw new IllegalArgumentException(msg);
    }
    String kubernetesMasterIp=CloudControllerUtil.getProperty(memberContext.getProperties(),StratosConstants.KUBERNETES_MASTER_IP);
    if (kubernetesMasterIp == null) {
      String msg=""String_Node_Str"" + StratosConstants.KUBERNETES_MASTER_IP + ""String_Node_Str""+ memberContext;
      log.error(msg);
      throw new IllegalArgumentException(msg);
    }
    String kubernetesPortRange=CloudControllerUtil.getProperty(memberContext.getProperties(),StratosConstants.KUBERNETES_PORT_RANGE);
    if (kubernetesPortRange == null) {
      String msg=""String_Node_Str"" + StratosConstants.KUBERNETES_PORT_RANGE + ""String_Node_Str""+ memberContext;
      log.error(msg);
      throw new IllegalArgumentException(msg);
    }
    KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesPortRange);
    if (kubClusterContext == null) {
      String msg=""String_Node_Str"" + memberContext;
      log.error(msg);
      throw new IllegalArgumentException(msg);
    }
    KubernetesApiClient kubApi=kubClusterContext.getKubApi();
    MemberContextToReplicationController controllerFunction=new MemberContextToReplicationController();
    ReplicationController controller=controllerFunction.apply(memberContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str""+ memberContext+ ""String_Node_Str"");
    }
    kubApi.createReplicationController(controller);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    MemberContextToKubernetesService serviceFunction=new MemberContextToKubernetesService();
    Service service=serviceFunction.apply(memberContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + service + ""String_Node_Str""+ memberContext+ ""String_Node_Str"");
    }
    kubApi.createService(service);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    memberContext.setPublicIpAddress(kubernetesMasterIp);
    memberContext.setPrivateIpAddress(kubernetesMasterIp);
    dataHolder.addMemberContext(memberContext);
    persist();
    TopologyBuilder.handleMemberSpawned(cartridgeType,clusterId,null,kubernetesMasterIp,kubernetesMasterIp,memberContext);
    log.info(""String_Node_Str"" + memberContext.toString());
    return memberContext;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}","@Override public MemberContext startContainers(MemberContext memberContext) throws UnregisteredCartridgeException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  if (memberContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=memberContext.getClusterId();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + memberContext.toString());
  }
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ memberContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  memberContext.setCartridgeType(cartridgeType);
  try {
    String memberID=generateMemberId(clusterId);
    memberContext.setMemberId(memberID);
    String kubernetesClusterId=CloudControllerUtil.getProperty(ctxt.getProperties(),StratosConstants.KUBERNETES_CLUSTER_ID);
    if (kubernetesClusterId == null) {
      String msg=""String_Node_Str"" + StratosConstants.KUBERNETES_CLUSTER_ID + ""String_Node_Str""+ ctxt;
      log.error(msg);
      throw new IllegalArgumentException(msg);
    }
    String kubernetesMasterIp=CloudControllerUtil.getProperty(memberContext.getProperties(),StratosConstants.KUBERNETES_MASTER_IP);
    if (kubernetesMasterIp == null) {
      String msg=""String_Node_Str"" + StratosConstants.KUBERNETES_MASTER_IP + ""String_Node_Str""+ memberContext;
      log.error(msg);
      throw new IllegalArgumentException(msg);
    }
    String kubernetesPortRange=CloudControllerUtil.getProperty(memberContext.getProperties(),StratosConstants.KUBERNETES_PORT_RANGE);
    if (kubernetesPortRange == null) {
      String msg=""String_Node_Str"" + StratosConstants.KUBERNETES_PORT_RANGE + ""String_Node_Str""+ memberContext;
      log.error(msg);
      throw new IllegalArgumentException(msg);
    }
    KubernetesClusterContext kubClusterContext=getKubernetesClusterContext(kubernetesClusterId,kubernetesMasterIp,kubernetesPortRange);
    KubernetesApiClient kubApi=kubClusterContext.getKubApi();
    MemberContextToReplicationController controllerFunction=new MemberContextToReplicationController();
    ReplicationController controller=controllerFunction.apply(memberContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str""+ memberContext+ ""String_Node_Str"");
    }
    kubApi.createReplicationController(controller);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    MemberContextToKubernetesService serviceFunction=new MemberContextToKubernetesService();
    Service service=serviceFunction.apply(memberContext);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + service + ""String_Node_Str""+ memberContext+ ""String_Node_Str"");
    }
    kubApi.createService(service);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + controller + ""String_Node_Str"");
    }
    memberContext.setPublicIpAddress(kubernetesMasterIp);
    memberContext.setPrivateIpAddress(kubernetesMasterIp);
    dataHolder.addMemberContext(memberContext);
    persist();
    TopologyBuilder.handleMemberSpawned(cartridgeType,clusterId,null,kubernetesMasterIp,kubernetesMasterIp,memberContext);
    log.info(""String_Node_Str"" + memberContext.toString());
    return memberContext;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new IllegalStateException(msg,e);
  }
}",0.9793398841017888
116543,"@Override public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + dependency + ""String_Node_Str"");
    }
    if (dependency.contains(""String_Node_Str"")) {
      for (      Group group : component.getAliasToGroupMap().values()) {
        if (group.getName().equals(dependency.substring(6))) {
          startGroupMonitor(this,group.getAlias(),component);
        }
      }
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getServiceType().equals(dependency.substring(10))) {
          String clusterId=dataHolder.getClusterId();
          String serviceName=dataHolder.getServiceType();
          Cluster cluster=null;
          cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
          if (cluster != null) {
            startClusterMonitor(this,cluster);
          }
 else {
          }
        }
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}","@Override public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + dependency + ""String_Node_Str"");
    }
    if (dependency.contains(""String_Node_Str"")) {
      for (      Group group : component.getAliasToGroupMap().values()) {
        if (group.getName().equals(dependency.substring(6))) {
          startGroupMonitor(this,group.getAlias(),component);
        }
      }
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      ClusterDataHolder clusterDataHolder=component.getClusterData(dependency.substring(10));
      String clusterId=clusterDataHolder.getClusterId();
      String serviceName=clusterDataHolder.getServiceType();
      Cluster cluster=null;
      Topology topology=TopologyManager.getTopology();
      if (topology.serviceExists(serviceName)) {
        Service service=topology.getService(serviceName);
        if (service.clusterExists(clusterId)) {
          cluster=service.getCluster(clusterId);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + clusterId);
          }
          startClusterMonitor(this,cluster);
        }
 else {
          log.warn(""String_Node_Str"" + clusterId + ""String_Node_Str""+ ""String_Node_Str""+ serviceName);
        }
      }
 else {
        log.warn(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",0.6883162725026474
116544,"/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  clusterMonitor.setStatus(Status.Created);
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}","/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  clusterMonitor.setAppId(cluster.getAppId());
  clusterMonitor.setStatus(Status.Created);
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}",0.9939735863572252
116545,"public static void handleClusterCreated(Registrant registrant,boolean isLb){
  Topology topology=TopologyManager.getTopology();
  Service service;
  try {
    TopologyManager.acquireWriteLock();
    String cartridgeType=registrant.getCartridgeType();
    service=topology.getService(cartridgeType);
    Properties props=CloudControllerUtil.toJavaUtilProperties(registrant.getProperties());
    Cluster cluster;
    String clusterId=registrant.getClusterId();
    if (service.clusterExists(clusterId)) {
      cluster=service.getCluster(clusterId);
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
    }
 else {
      cluster=new Cluster(cartridgeType,clusterId,registrant.getDeploymentPolicyName(),registrant.getAutoScalerPolicyName());
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
      cluster.setStatus(Status.Created);
      service.addCluster(cluster);
    }
    TopologyManager.updateTopology(topology);
    TopologyEventPublisher.sendClusterCreatedEvent(cartridgeType,clusterId,cluster);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}","public static void handleClusterCreated(Registrant registrant,boolean isLb){
  Topology topology=TopologyManager.getTopology();
  Service service;
  try {
    TopologyManager.acquireWriteLock();
    String cartridgeType=registrant.getCartridgeType();
    service=topology.getService(cartridgeType);
    Properties props=CloudControllerUtil.toJavaUtilProperties(registrant.getProperties());
    Cluster cluster;
    String clusterId=registrant.getClusterId();
    if (service.clusterExists(clusterId)) {
      cluster=service.getCluster(clusterId);
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
    }
 else {
      cluster=new Cluster(cartridgeType,clusterId,registrant.getDeploymentPolicyName(),registrant.getAutoScalerPolicyName(),null);
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
      cluster.setStatus(Status.Created);
      service.addCluster(cluster);
    }
    TopologyManager.updateTopology(topology);
    TopologyEventPublisher.sendClusterCreatedEvent(cartridgeType,clusterId,cluster);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}",0.998660594695955
116546,"public static void handleApplicationDeployed(Application application,Set<ApplicationClusterContext> applicationClusterContexts,Set<MetaDataHolder> metaDataHolders){
  Topology topology=TopologyManager.getTopology();
  try {
    TopologyManager.acquireWriteLock();
    if (topology.applicationExists(application.getId())) {
      log.warn(""String_Node_Str"" + application.getId() + ""String_Node_Str"");
      return;
    }
    List<Cluster> clusters=new ArrayList<Cluster>();
    for (    ApplicationClusterContext applicationClusterContext : applicationClusterContexts) {
      Cluster cluster=new Cluster(applicationClusterContext.getCartridgeType(),applicationClusterContext.getClusterId(),applicationClusterContext.getDeploymentPolicyName(),applicationClusterContext.getAutoscalePolicyName());
      cluster.setStatus(Status.Created);
      cluster.addHostName(applicationClusterContext.getHostName());
      cluster.setTenantRange(applicationClusterContext.getTenantRange());
      clusters.add(cluster);
      Service service=topology.getService(applicationClusterContext.getCartridgeType());
      if (service != null) {
        service.addCluster(cluster);
        log.info(""String_Node_Str"" + cluster.toString() + ""String_Node_Str""+ application.getId());
      }
 else {
        log.error(""String_Node_Str"" + applicationClusterContext.getCartridgeType() + ""String_Node_Str"");
        return;
      }
    }
    topology.addApplication(application);
    TopologyManager.updateTopology(topology);
    log.info(""String_Node_Str"" + application.getId() + ""String_Node_Str"");
    TopologyEventPublisher.sendApplicationCreatedEvent(application,clusters);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}","public static void handleApplicationDeployed(Application application,Set<ApplicationClusterContext> applicationClusterContexts,Set<MetaDataHolder> metaDataHolders){
  Topology topology=TopologyManager.getTopology();
  try {
    TopologyManager.acquireWriteLock();
    if (topology.applicationExists(application.getId())) {
      log.warn(""String_Node_Str"" + application.getId() + ""String_Node_Str"");
      return;
    }
    List<Cluster> clusters=new ArrayList<Cluster>();
    for (    ApplicationClusterContext applicationClusterContext : applicationClusterContexts) {
      Cluster cluster=new Cluster(applicationClusterContext.getCartridgeType(),applicationClusterContext.getClusterId(),applicationClusterContext.getDeploymentPolicyName(),applicationClusterContext.getAutoscalePolicyName(),application.getId());
      cluster.setStatus(Status.Created);
      cluster.addHostName(applicationClusterContext.getHostName());
      cluster.setTenantRange(applicationClusterContext.getTenantRange());
      clusters.add(cluster);
      Service service=topology.getService(applicationClusterContext.getCartridgeType());
      if (service != null) {
        service.addCluster(cluster);
        log.info(""String_Node_Str"" + cluster.toString() + ""String_Node_Str""+ application.getId());
      }
 else {
        log.error(""String_Node_Str"" + applicationClusterContext.getCartridgeType() + ""String_Node_Str"");
        return;
      }
    }
    topology.addApplication(application);
    TopologyManager.updateTopology(topology);
    log.info(""String_Node_Str"" + application.getId() + ""String_Node_Str"");
    TopologyEventPublisher.sendApplicationCreatedEvent(application,clusters);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}",0.994199535962877
116547,"public Cluster(String serviceName,String clusterId,String deploymentPolicyName,String autoscalePolicyName){
  this.serviceName=serviceName;
  this.clusterId=clusterId;
  this.deploymentPolicyName=deploymentPolicyName;
  this.autoscalePolicyName=autoscalePolicyName;
  this.hostNames=new ArrayList<String>();
  this.memberMap=new HashMap<String,Member>();
}","public Cluster(String serviceName,String clusterId,String deploymentPolicyName,String autoscalePolicyName,String appId){
  this.serviceName=serviceName;
  this.clusterId=clusterId;
  this.deploymentPolicyName=deploymentPolicyName;
  this.autoscalePolicyName=autoscalePolicyName;
  this.hostNames=new ArrayList<String>();
  this.memberMap=new HashMap<String,Member>();
  this.appId=appId;
}",0.9557046979865772
116548,"@Override public void run(){
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    while (!terminated) {
      try {
        TextMessage message=messageQueue.take();
        String messageText=message.getText();
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + messageText);
        }
        EventMessage eventMessage=jsonToEventMessage(messageText);
        if (eventMessage == null) {
          log.error(""String_Node_Str"");
          continue;
        }
        String type=eventMessage.getEventName();
        String json=eventMessage.getMessage();
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",type));
        }
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",type));
        }
        processorChain.process(type,json,null);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    while (!terminated) {
      try {
        TextMessage message=messageQueue.take();
        String type=message.getStringProperty(Constants.EVENT_CLASS_NAME);
        String json=message.getText();
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",type));
        }
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",type));
        }
        processorChain.process(type,json,null);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.7509495387954422
116549,"public static synchronized MqttClient getMQTTConClient(){
  if (topicClient == null) {
    String broker=mqttProp.getProperty(""String_Node_Str"",MQTTURL);
    String clientId=mqttProp.getProperty(""String_Node_Str"",CLIENT_ID);
    MemoryPersistence persistence=new MemoryPersistence();
    try {
      topicClient=new MqttClient(broker,clientId,persistence);
      MqttConnectOptions connOpts=new MqttConnectOptions();
      connOpts.setCleanSession(true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
    }
 catch (    MqttException me) {
      log.error(""String_Node_Str"",me);
    }
  }
  return topicClient;
}","public static synchronized MqttClient getMQTTConClient(){
  if (topicClient == null) {
    String broker=mqttProp.getProperty(""String_Node_Str"",MQTTURL);
    String clientId=mqttProp.getProperty(""String_Node_Str"",CLIENT_ID);
    MemoryPersistence persistence=new MemoryPersistence();
    try {
      topicClient=new MqttClient(broker,clientId,persistence);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
    }
 catch (    MqttException me) {
      log.error(""String_Node_Str"",me);
    }
  }
  return topicClient;
}",0.9177852348993288
116550,"public static synchronized MqttClient getMQTTSubClient(String identifier){
  String broker=mqttProp.getProperty(""String_Node_Str"",MQTTURL);
  String tempFile=mqttProp.getProperty(""String_Node_Str"",TMPFILELOCATION);
  MqttDefaultFilePersistence persistence=new MqttDefaultFilePersistence(tempFile);
  try {
    MqttConnectOptions connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(true);
    topicClientSub=new MqttClient(broker,identifier,persistence);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  MqttException me) {
    log.error(""String_Node_Str"",me);
  }
  return topicClientSub;
}","public static synchronized MqttClient getMQTTSubClient(String identifier) throws MqttException {
  String broker=mqttProp.getProperty(""String_Node_Str"",MQTTURL);
  String tempFile=mqttProp.getProperty(""String_Node_Str"",TMPFILELOCATION);
  MqttDefaultFilePersistence persistence=new MqttDefaultFilePersistence(tempFile);
  try {
    topicClientSub=new MqttClient(broker,identifier,persistence);
    MqttConnectOptions connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(true);
    topicClientSub.connect(connOpts);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  MqttException me) {
    log.error(""String_Node_Str"",me);
  }
  return topicClientSub;
}",0.8882265275707899
116551,"/** 
 * Publishes to a topic. If for some reason the connection to the topic got lost, this will perform re-subscription periodically, until a connection obtained.
 */
public void publish(Object messageObj,boolean retry){
synchronized (TopicPublisher.class) {
    Gson gson=new Gson();
    String message=gson.toJson(messageObj);
    boolean published=false;
    while (!published) {
      try {
        MqttClient mqttClient=MQTTConnector.getMQTTConClient();
        MqttMessage mqttMSG=new MqttMessage(message.getBytes());
        mqttMSG.setQos(QOS);
        mqttClient.connect();
        mqttClient.publish(topic,mqttMSG);
        mqttClient.disconnect();
        published=true;
      }
 catch (      Exception e) {
        initialized=false;
        if (log.isErrorEnabled()) {
          log.error(""String_Node_Str"" + topic,e);
        }
        if (!retry) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + topic);
          }
          throw new RuntimeException(e);
        }
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"");
        }
        try {
          Thread.sleep(60000);
        }
 catch (        InterruptedException ignore) {
        }
      }
    }
  }
}","/** 
 * Publishes to a topic. If for some reason the connection to the topic got lost, this will perform re-subscription periodically, until a connection obtained.
 */
public void publish(Object messageObj,boolean retry){
synchronized (TopicPublisher.class) {
    Gson gson=new Gson();
    String message=gson.toJson(messageObj);
    boolean published=false;
    while (!published)     try {
      mqttClient=MQTTConnector.getMQTTConClient();
      MqttMessage mqttMSG=new MqttMessage(message.getBytes());
      mqttMSG.setQos(QOS);
      MqttConnectOptions connOpts=new MqttConnectOptions();
      connOpts.setCleanSession(true);
      mqttClient.connect(connOpts);
      mqttClient.publish(topic,mqttMSG);
      mqttClient.disconnect();
      published=true;
    }
 catch (    Exception e) {
      initialized=false;
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"" + topic,e);
      }
      if (!retry) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + topic);
        }
        throw new RuntimeException(e);
      }
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
      try {
        Thread.sleep(60000);
      }
 catch (      InterruptedException ignore) {
      }
    }
 finally {
    }
  }
}",0.904382470119522
116552,"private void doSubscribe() throws Exception, JMSException {
  MqttClient mqttClient=MQTTConnector.getMQTTSubClient(Util.getRandomString(5));
  try {
    mqttClient.connect();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + topicName + ""String_Node_Str""+ mqttClient.getServerURI());
    }
    mqttClient.subscribe(topicName);
    mqttClient.setCallback(messageListener);
    while (true) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  finally {
    mqttClient.disconnect();
  }
}","private void doSubscribe() throws MqttException {
  MqttClient mqttClient=MQTTConnector.getMQTTSubClient(Util.getRandomString(5));
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + topicName + ""String_Node_Str""+ mqttClient.getServerURI());
  }
  try {
    mqttClient.subscribe(topicName);
    mqttClient.setCallback(messageListener);
    subscribed=true;
  }
  finally {
    mqttClient.disconnect();
  }
}",0.6693877551020408
116553,"/** 
 * @param messageListener this MessageListener will get triggered each time this subscription receives a message.
 */
public void setMessageListener(MqttCallback messageListener){
  this.messageListener=messageListener;
}","/** 
 * @param messageListener this MessageListener will get triggered each time thissubscription receives a message.
 */
public void setMessageListener(MqttCallback messageListener){
  this.messageListener=messageListener;
}",0.9977827050997784
116554,"public void setPortMappings(PortMapping[] portMappings){
  this.portMappings=portMappings;
}","public void setPortMappings(PortMapping[] portMappings){
  this.portMappings=ArrayUtils.clone(portMappings);
}",0.9108910891089108
116555,"public void setDeploymentDirs(String[] deploymentDirs){
  this.deploymentDirs=deploymentDirs;
}","public void setDeploymentDirs(String[] deploymentDirs){
  this.deploymentDirs=ArrayUtils.clone(deploymentDirs);
}",0.9134615384615384
116556,"public void setIaasConfigs(IaasConfig[] iaasConfigs){
  this.iaasConfigs=iaasConfigs;
}","public void setIaasConfigs(IaasConfig[] iaasConfigs){
  this.iaasConfigs=ArrayUtils.clone(iaasConfigs);
}",0.90625
116557,"public void setProperties(Property[] properties){
  this.properties=properties;
}","public void setProperties(Property[] properties){
  this.properties=ArrayUtils.clone(properties);
}",0.9
116558,"public void setPortMappings(PortMapping[] portMappings){
  this.portMappings=portMappings;
}","public void setPortMappings(PortMapping[] portMappings){
  this.portMappings=ArrayUtils.clone(portMappings);
}",0.9108910891089108
116559,"public void setAppTypes(AppType[] appTypes){
  this.appTypes=appTypes;
}","public void setAppTypes(AppType[] appTypes){
  this.appTypes=ArrayUtils.clone(appTypes);
}",0.8888888888888888
116560,"public void setVolumes(Volume[] volumes){
  this.volumes=volumes;
}","public void setVolumes(Volume[] volumes){
  this.volumes=ArrayUtils.clone(volumes);
}",0.881578947368421
116561,"public void setPayload(byte[] payload){
  this.payload=payload;
}","public void setPayload(byte[] payload){
  this.payload=ArrayUtils.clone(payload);
}",0.8783783783783784
116562,"/** 
 * @param networkInterfaces the networkInterfaces to set
 */
public void setNetworkInterfaces(NetworkInterface[] networkInterfaces){
  this.networkInterfaces=networkInterfaces;
}","/** 
 * @param networkInterfaces the networkInterfaces to set
 */
public void setNetworkInterfaces(NetworkInterface[] networkInterfaces){
  this.networkInterfaces=ArrayUtils.clone(networkInterfaces);
}",0.8645833333333334
116563,"public void setPayload(byte[] payload){
  this.payload=payload;
}","public void setPayload(byte[] payload){
  this.payload=ArrayUtils.clone(payload);
}",0.8783783783783784
116564,"public void setProperties(Property[] properties){
  this.properties=properties;
}","public void setProperties(Property[] properties){
  this.properties=ArrayUtils.clone(properties);
}",0.9
116565,"public static synchronized MqttClient getMQTTSubClient(String identifier) throws MqttException {
  String broker=mqttProp.getProperty(""String_Node_Str"",MQTTURL);
  String tempFile=mqttProp.getProperty(""String_Node_Str"",TMPFILELOCATION);
  MqttDefaultFilePersistence persistence=new MqttDefaultFilePersistence(tempFile);
  try {
    topicClientSub=new MqttClient(broker,identifier,persistence);
    MqttConnectOptions connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(true);
    topicClientSub.connect(connOpts);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  MqttException me) {
    log.error(""String_Node_Str"",me);
  }
  return topicClientSub;
}","public static synchronized MqttClient getMQTTSubClient(String identifier) throws MqttException {
  String broker=mqttProp.getProperty(""String_Node_Str"",MQTTURL);
  String tempFile=mqttProp.getProperty(""String_Node_Str"",TMPFILELOCATION);
  MqttDefaultFilePersistence persistence=new MqttDefaultFilePersistence(tempFile);
  try {
    topicClientSub=new MqttClient(broker,identifier,persistence);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  MqttException me) {
    log.error(""String_Node_Str"",me);
  }
  return topicClientSub;
}",0.8960629921259843
116566,"private void doSubscribe() throws MqttException {
  MqttClient mqttClient=MQTTConnector.getMQTTSubClient(Util.getRandomString(5));
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + topicName + ""String_Node_Str""+ mqttClient.getServerURI());
  }
  try {
    mqttClient.subscribe(topicName);
    mqttClient.setCallback(messageListener);
    subscribed=true;
  }
  finally {
    mqttClient.disconnect();
  }
}","private void doSubscribe() throws MqttException {
  MqttClient mqttClient=MQTTConnector.getMQTTSubClient(Util.getRandomString(5));
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + topicName + ""String_Node_Str""+ mqttClient.getServerURI());
  }
  try {
    MqttConnectOptions connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(true);
    mqttClient.connect(connOpts);
    mqttClient.subscribe(topicName);
    mqttClient.setCallback(messageListener);
    subscribed=true;
    while (true) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  finally {
    mqttClient.disconnect();
  }
}",0.7709291628334867
116567,"@Override protected void startDependency(){
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      startGroupMonitor(this,dependency.substring(6),component);
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      ClusterDataHolder clusterDataHolder=component.getClusterData(dependency.substring(10));
      String clusterId=clusterDataHolder.getClusterId();
      String serviceName=clusterDataHolder.getServiceType();
      Cluster cluster=null;
      TopologyManager.acquireReadLock();
      cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
      TopologyManager.releaseReadLock();
      if (cluster != null) {
        startClusterMonitor(this,cluster);
      }
 else {
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}","@Override protected void startDependency(){
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      startGroupMonitor(this,dependency.substring(6),component);
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      ClusterDataHolder clusterDataHolder=component.getClusterData(dependency.substring(10));
      String clusterId=clusterDataHolder.getClusterId();
      String serviceName=clusterDataHolder.getServiceType();
      Cluster cluster=null;
      cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
      if (cluster != null) {
        startClusterMonitor(this,cluster);
      }
 else {
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",0.9522700814901048
116568,"@Override public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      for (      Group group : component.getAliasToGroupMap().values()) {
        if (group.getName().equals(dependency.substring(6))) {
          startGroupMonitor(this,group.getAlias(),component);
        }
      }
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getServiceType().equals(dependency.substring(10))) {
          String clusterId=dataHolder.getClusterId();
          String serviceName=dataHolder.getServiceType();
          Cluster cluster=null;
          TopologyManager.acquireReadLock();
          cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
          TopologyManager.releaseReadLock();
          if (cluster != null) {
            startClusterMonitor(this,cluster);
          }
 else {
          }
        }
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}","@Override public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      for (      Group group : component.getAliasToGroupMap().values()) {
        if (group.getName().equals(dependency.substring(6))) {
          startGroupMonitor(this,group.getAlias(),component);
        }
      }
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getServiceType().equals(dependency.substring(10))) {
          String clusterId=dataHolder.getClusterId();
          String serviceName=dataHolder.getServiceType();
          Cluster cluster=null;
          cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
          if (cluster != null) {
            startClusterMonitor(this,cluster);
          }
 else {
          }
        }
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",0.9527426160337552
116569,"public static StringBuilder getTextPayload(String appId,String groupName,String clusterId){
  StringBuilder payloadBuilder=new StringBuilder();
  payloadBuilder.append(""String_Node_Str"" + appId);
  if (groupName != null) {
    payloadBuilder.append(""String_Node_Str"");
    payloadBuilder.append(""String_Node_Str"" + groupName);
  }
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + clusterId);
  if (MetaDataClientConfig.getInstance().getMetaDataServiceBaseUrl() != null) {
  }
  payloadBuilder.append(""String_Node_Str"");
  return payloadBuilder;
}","public static StringBuilder getTextPayload(String appId,String groupName,String clusterId){
  StringBuilder payloadBuilder=new StringBuilder();
  payloadBuilder.append(""String_Node_Str"" + appId);
  if (groupName != null) {
    payloadBuilder.append(""String_Node_Str"");
    payloadBuilder.append(""String_Node_Str"" + groupName);
  }
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + clusterId);
  payloadBuilder.append(""String_Node_Str"");
  return payloadBuilder;
}",0.8011049723756906
116570,"public MetaDataServiceClientSample() throws RestClientException {
  initialize();
}","public MetaDataServiceClientSample() throws RestClientException {
}",0.8933333333333333
116571,"protected synchronized void startClusterMonitor(Cluster cluster){
  Thread th=null;
  if (cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new LBClusterMonitorAdder(cluster));
  }
 else   if (!cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new ClusterMonitorAdder(cluster));
  }
  if (th != null) {
    th.start();
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
    }
  }
}","protected synchronized void startClusterMonitor(Monitor parent,Cluster cluster){
  Thread th=null;
  if (cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new LBClusterMonitorAdder(cluster));
  }
 else   if (!cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new ClusterMonitorAdder(parent,cluster));
  }
  if (th != null) {
    th.start();
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
    }
  }
}",0.9807355516637478
116572,"public ClusterMonitorAdder(Cluster cluster){
  this.cluster=cluster;
}","public ClusterMonitorAdder(Monitor parent,Cluster cluster){
  this.parent=parent;
  this.cluster=cluster;
}",0.7909604519774012
116573,"@Override public void run(){
  this.status=Status.Running;
  while (!isDestroyed() && status.getCode() >= ClusterStatus.Running.getCode()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + this.toString());
    }
    try {
      if (!ClusterStatus.In_Maintenance.equals(status)) {
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.In_Maintenance + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(monitorInterval);
    }
 catch (    InterruptedException ignore) {
    }
  }
}","@Override public void run(){
  while (!isDestroyed() && status.getCode() >= Status.Running.getCode()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + this.toString());
    }
    try {
      if (!ClusterStatus.In_Maintenance.equals(status)) {
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.In_Maintenance + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(monitorInterval);
    }
 catch (    InterruptedException ignore) {
    }
  }
}",0.9721595184349134
116574,"/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  clusterMonitor.setStatus(Status.Created);
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  java.util.Properties props=cluster.getProperties();
  if (props.containsKey(Constants.LOAD_BALANCER_REF)) {
    String value=props.getProperty(Constants.LOAD_BALANCER_REF);
    clusterMonitor.setLbReferenceType(value);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + value);
    }
  }
  clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}","/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  clusterMonitor.setStatus(Status.Created);
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo(),partitionGroup.getPartitions());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          memberContext.setProperties(convertMemberPropsToMemberContextProps(member.getProperties()));
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  if (cluster.getProperties() != null) {
    clusterMonitor.setHasPrimary(Boolean.parseBoolean(cluster.getProperties().getProperty(Constants.IS_PRIMARY)));
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}",0.9580629056415376
116575,"@Override protected void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      startGroupMonitor(this,dependency.substring(6),component);
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      ClusterDataHolder clusterDataHolder=component.getClusterData(dependency.substring(10));
      String clusterId=clusterDataHolder.getClusterId();
      String serviceName=clusterDataHolder.getServiceType();
      Cluster cluster=null;
      TopologyManager.acquireReadLock();
      cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
      TopologyManager.releaseReadLock();
      if (cluster != null) {
        startClusterMonitor(cluster);
      }
 else {
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}","@Override protected void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      startGroupMonitor(this,dependency.substring(6),component);
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      ClusterDataHolder clusterDataHolder=component.getClusterData(dependency.substring(10));
      String clusterId=clusterDataHolder.getClusterId();
      String serviceName=clusterDataHolder.getServiceType();
      Cluster cluster=null;
      TopologyManager.acquireReadLock();
      cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
      TopologyManager.releaseReadLock();
      if (cluster != null) {
        startClusterMonitor(this,cluster);
      }
 else {
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",0.9974025974025974
116576,"@Override public void run(){
  while (!isDestroyed() && status.getCode() >= Status.Running.getCode()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + this.toString());
    }
    try {
      if (!ClusterStatus.In_Maintenance.equals(status)) {
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.In_Maintenance + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(monitorInterval);
    }
 catch (    InterruptedException ignore) {
    }
  }
}","@Override public void run(){
  while (!isDestroyed()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + this.toString());
    }
    try {
      if (!ClusterStatus.In_Maintenance.equals(status)) {
        monitor();
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ClusterStatus.In_Maintenance + ""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + this.toString(),e);
    }
    try {
      Thread.sleep(monitorInterval);
    }
 catch (    InterruptedException ignore) {
    }
  }
}",0.9614147909967846
116577,"@Override public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      for (      Group group : component.getAliasToGroupMap().values()) {
        if (group.getName().equals(dependency.substring(6))) {
          startGroupMonitor(this,group.getAlias(),component);
        }
      }
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getServiceType().equals(dependency.substring(10))) {
          String clusterId=dataHolder.getClusterId();
          String serviceName=dataHolder.getServiceType();
          Cluster cluster=null;
          TopologyManager.acquireReadLock();
          cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
          TopologyManager.releaseReadLock();
          if (cluster != null) {
            startClusterMonitor(cluster);
          }
 else {
          }
        }
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}","@Override public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      for (      Group group : component.getAliasToGroupMap().values()) {
        if (group.getName().equals(dependency.substring(6))) {
          startGroupMonitor(this,group.getAlias(),component);
        }
      }
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      for (      ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
        if (dataHolder.getServiceType().equals(dependency.substring(10))) {
          String clusterId=dataHolder.getClusterId();
          String serviceName=dataHolder.getServiceType();
          Cluster cluster=null;
          TopologyManager.acquireReadLock();
          cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
          TopologyManager.releaseReadLock();
          if (cluster != null) {
            startClusterMonitor(this,cluster);
          }
 else {
          }
        }
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",0.9979633401221996
116578,"protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}","protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    applicationStatusTopicReceiver=new ApplicationStatusTopicReceiver();
    Thread appThread=new Thread(applicationStatusTopicReceiver);
    appThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.8823234852278418
116579,"public static Queue<String> getStartupOrder(ParentBehavior component){
  Queue<String> startup=new LinkedList<String>();
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    Set<StartupOrder> startupOrderSet=dependencyOrder.getStartupOrders();
    for (    StartupOrder startupOrder : startupOrderSet) {
      String start=startupOrder.getStart();
      String after=startupOrder.getAfter();
      if (!startup.contains(start)) {
        startup.add(start);
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
 else {
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
    }
  }
  for (  String grpAlias : component.getAliasToGroupMap().keySet()) {
    if (!startup.contains(""String_Node_Str"" + grpAlias)) {
      startup.add(""String_Node_Str"" + grpAlias);
    }
  }
  Set<String> cartridgeAliases=component.getClusterDataMap().keySet();
  for (  String carAlias : cartridgeAliases) {
    if (!startup.contains(""String_Node_Str"" + carAlias)) {
      startup.add(""String_Node_Str"" + carAlias);
    }
  }
  return startup;
}","public static Queue<String> getStartupOrder(ParentBehavior component){
  Queue<String> startup=new LinkedList<String>();
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    Set<StartupOrder> startupOrderSet=dependencyOrder.getStartupOrders();
    for (    StartupOrder startupOrder : startupOrderSet) {
      String start=startupOrder.getStart();
      String after=startupOrder.getAfter();
      if (!startup.contains(start)) {
        startup.add(start);
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
 else {
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
    }
  }
  if (component instanceof Application) {
    for (    Group group : component.getAliasToGroupMap().values()) {
      if (!startup.contains(""String_Node_Str"" + group.getAlias())) {
        startup.add(""String_Node_Str"" + group.getAlias());
      }
    }
    Set<String> cartridgeAliases=component.getClusterDataMap().keySet();
    for (    String carAlias : cartridgeAliases) {
      if (!startup.contains(""String_Node_Str"" + carAlias)) {
        startup.add(""String_Node_Str"" + carAlias);
      }
    }
  }
 else   if (component instanceof Group) {
    for (    Group group : component.getAliasToGroupMap().values()) {
      if (!startup.contains(""String_Node_Str"" + group.getName())) {
        startup.add(""String_Node_Str"" + group.getName());
      }
    }
    for (    ClusterDataHolder dataHolder : component.getClusterDataMap().values()) {
      if (!startup.contains(""String_Node_Str"" + dataHolder.getServiceType())) {
        startup.add(""String_Node_Str"" + dataHolder.getServiceType());
      }
    }
  }
  return startup;
}",0.75
116580,"public void run(){
  ApplicationMonitor applicationMonitor=null;
  int retries=5;
  boolean success=false;
  while (!success && retries != 0) {
    try {
      applicationMonitor=AutoscalerUtil.getApplicationMonitor(application);
      success=true;
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + application.getId();
      log.debug(msg,e);
      retries--;
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e1) {
      }
    }
  }
  if (applicationMonitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + applicationMonitor.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  AutoscalerContext.getInstance().addAppMonitor(applicationMonitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationMonitor.getId()));
  }
}","public void run(){
  ApplicationMonitor applicationMonitor=null;
  int retries=5;
  boolean success=false;
  do {
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e1) {
    }
    try {
      long start=System.currentTimeMillis();
      applicationMonitor=AutoscalerUtil.getApplicationMonitor(application);
      long end=System.currentTimeMillis();
      log.info(""String_Node_Str"" + (end - start) / 1000);
      success=true;
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + application.getId();
      log.debug(msg,e);
      retries--;
    }
  }
 while (!success && retries != 0);
  if (applicationMonitor == null) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + applicationMonitor.getId();
    log.error(msg);
    throw new RuntimeException(msg);
  }
  AutoscalerContext.getInstance().addAppMonitor(applicationMonitor);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",applicationMonitor.getId()));
  }
}",0.4490666666666666
116581,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        if (!topologyInitialized) {
          topologyInitialized=true;
          TopologyManager.acquireReadLock();
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application);
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
      TopologyManager.acquireReadLock();
      try {
        startApplicationMonitor(applicationCreatedEvent.getApplication());
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      Monitor monitor=appMonitor.findParentMonitorOfCluster(clusterId);
      monitor.notify();
      StatusChecker.getInstance().onClusterStatusChange(clusterId,appId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationRemovedEvent applicationCreatedEvent=(ApplicationRemovedEvent)event;
      TopologyManager.acquireReadLock();
      try {
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterMaintenanceModeEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event);
        ClusterMaintenanceModeEvent e=(ClusterMaintenanceModeEvent)event;
        TopologyManager.acquireReadLock();
        Service service=TopologyManager.getTopology().getService(e.getServiceName());
        Cluster cluster=service.getCluster(e.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist((cluster.getClusterId()))) {
          AutoscalerContext.getInstance().getMonitor(e.getClusterId()).setStatus(e.getStatus());
        }
 else         if (AutoscalerContext.getInstance().lbMonitorExist((cluster.getClusterId()))) {
          AutoscalerContext.getInstance().getLBMonitor(e.getClusterId()).setStatus(e.getStatus());
        }
 else {
          log.error(""String_Node_Str"" + cluster.toString());
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        ClusterRemovedEvent e=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLock();
        String clusterId=e.getClusterId();
        String deploymentPolicy=e.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (e.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberTerminatedEvent e=(MemberTerminatedEvent)event;
        String networkPartitionId=e.getNetworkPartitionId();
        String clusterId=e.getClusterId();
        String partitionId=e.getPartitionId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=e.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent e=(MemberActivatedEvent)event;
        String memberId=e.getMemberId();
        PartitionContext partitionContext=null;
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberMaintenanceModeEvent e=(MemberMaintenanceModeEvent)event;
        String memberId=e.getMemberId();
        String partitionId=e.getPartitionId();
        String networkPartitionId=e.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=e.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        if (!topologyInitialized) {
          topologyInitialized=true;
          for (          Application application : TopologyManager.getTopology().getApplications()) {
            startApplicationMonitor(application);
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationCreatedEvent applicationCreatedEvent=(ApplicationCreatedEvent)event;
      TopologyManager.acquireReadLock();
      try {
        startApplicationMonitor(applicationCreatedEvent.getApplication());
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ClusterActivatedEvent clusterActivatedEvent=(ClusterActivatedEvent)event;
      String appId=clusterActivatedEvent.getAppId();
      String clusterId=clusterActivatedEvent.getClusterId();
      ApplicationMonitor appMonitor=AutoscalerContext.getInstance().getAppMonitor(appId);
      Monitor monitor=appMonitor.findParentMonitorOfCluster(clusterId);
      monitor.notify();
      StatusChecker.getInstance().onClusterStatusChange(clusterId,appId);
    }
  }
);
  topologyEventReceiver.addEventListener(new ApplicationRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass());
      ApplicationRemovedEvent applicationCreatedEvent=(ApplicationRemovedEvent)event;
      TopologyManager.acquireReadLock();
      try {
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberReadyToShutdownEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        MemberReadyToShutdownEvent memberReadyToShutdownEvent=(MemberReadyToShutdownEvent)event;
        AutoscalerContext asCtx=AutoscalerContext.getInstance();
        AbstractClusterMonitor monitor;
        String clusterId=memberReadyToShutdownEvent.getClusterId();
        String memberId=memberReadyToShutdownEvent.getMemberId();
        if (asCtx.monitorExist(clusterId)) {
          monitor=asCtx.getMonitor(clusterId);
        }
 else         if (asCtx.lbMonitorExist(clusterId)) {
          monitor=asCtx.getLBMonitor(clusterId);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",clusterId));
          }
          return;
        }
        NetworkPartitionContext nwPartitionCtxt;
        nwPartitionCtxt=monitor.getNetworkPartitionCtxt(memberReadyToShutdownEvent.getNetworkPartitionId());
        String partitionId=monitor.getPartitionOfMember(memberId);
        PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
        CloudControllerClient ccClient=CloudControllerClient.getInstance();
        ccClient.terminate(memberId);
        partitionCtxt.removeActiveMemberById(memberId);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId,partitionId,clusterId));
        }
      }
 catch (      TerminationException e) {
        log.error(e);
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterMaintenanceModeEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        log.info(""String_Node_Str"" + event);
        ClusterMaintenanceModeEvent e=(ClusterMaintenanceModeEvent)event;
        TopologyManager.acquireReadLock();
        Service service=TopologyManager.getTopology().getService(e.getServiceName());
        Cluster cluster=service.getCluster(e.getClusterId());
        if (AutoscalerContext.getInstance().monitorExist((cluster.getClusterId()))) {
          AutoscalerContext.getInstance().getMonitor(e.getClusterId()).setStatus(e.getStatus());
        }
 else         if (AutoscalerContext.getInstance().lbMonitorExist((cluster.getClusterId()))) {
          AutoscalerContext.getInstance().getLBMonitor(e.getClusterId()).setStatus(e.getStatus());
        }
 else {
          log.error(""String_Node_Str"" + cluster.toString());
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        ClusterRemovedEvent e=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLock();
        String clusterId=e.getClusterId();
        String deploymentPolicy=e.getDeploymentPolicy();
        AbstractClusterMonitor monitor;
        if (e.isLbCluster()) {
          DeploymentPolicy depPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicy);
          if (depPolicy != null) {
            List<NetworkPartitionLbHolder> lbHolders=PartitionManager.getInstance().getNetworkPartitionLbHolders(depPolicy);
            for (            NetworkPartitionLbHolder networkPartitionLbHolder : lbHolders) {
              boolean isRemoved=networkPartitionLbHolder.removeLbClusterId(clusterId);
              if (isRemoved) {
                log.info(""String_Node_Str"" + clusterId + ""String_Node_Str""+ networkPartitionLbHolder.getNetworkPartitionId());
              }
              if (log.isDebugEnabled()) {
                log.debug(networkPartitionLbHolder);
              }
            }
          }
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        if (monitor != null) {
          monitor.destroy();
          log.info(String.format(""String_Node_Str"",clusterId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberTerminatedEvent e=(MemberTerminatedEvent)event;
        String networkPartitionId=e.getNetworkPartitionId();
        String clusterId=e.getClusterId();
        String partitionId=e.getPartitionId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        String memberId=e.getMemberId();
        partitionContext.removeMemberStatsContext(memberId);
        if (partitionContext.removeTerminationPendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removePendingMember(memberId)) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
          }
        }
 else         if (partitionContext.removeActiveMemberById(memberId)) {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
 else {
          log.warn(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent e=(MemberActivatedEvent)event;
        String memberId=e.getMemberId();
        PartitionContext partitionContext=null;
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberMaintenanceModeEvent e=(MemberMaintenanceModeEvent)event;
        String memberId=e.getMemberId();
        String partitionId=e.getPartitionId();
        String networkPartitionId=e.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=e.getClusterId();
        AbstractClusterMonitor monitor;
        if (AutoscalerContext.getInstance().monitorExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        partitionContext.moveActiveMemberToTerminationPendingMembers(memberId);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
}",0.993284886394996
116582,"protected synchronized void startGroupMonitor(Monitor parent,String dependency,ParentBehavior component){
  Thread th=null;
  if (!this.groupMonitors.containsKey(dependency)) {
    th=new Thread(new GroupMonitorAdder(parent,dependency,component));
  }
  if (th != null) {
    th.start();
    try {
      th.join();
    }
 catch (    InterruptedException ignore) {
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",dependency));
    }
  }
}","protected synchronized void startGroupMonitor(Monitor parent,String dependency,ParentBehavior component){
  Thread th=null;
  if (!this.groupMonitors.containsKey(dependency)) {
    th=new Thread(new GroupMonitorAdder(parent,dependency,component));
  }
  if (th != null) {
    th.start();
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",dependency));
    }
  }
}",0.9055299539170508
116583,"protected synchronized void startClusterMonitor(Cluster cluster){
  Thread th=null;
  if (cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new LBClusterMonitorAdder(cluster));
  }
 else   if (!cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new ClusterMonitorAdder(cluster));
  }
  if (th != null) {
    th.start();
    try {
      th.join();
    }
 catch (    InterruptedException ignore) {
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
    }
  }
}","protected synchronized void startClusterMonitor(Cluster cluster){
  Thread th=null;
  if (cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new LBClusterMonitorAdder(cluster));
  }
 else   if (!cluster.isLbCluster() && !this.abstractClusterMonitors.containsKey(cluster.getClusterId())) {
    th=new Thread(new ClusterMonitorAdder(cluster));
  }
  if (th != null) {
    th.start();
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
    }
  }
}",0.9317803660565724
116584,"public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      startGroupMonitor(this,dependency.substring(6),component);
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      ClusterDataHolder clusterDataHolder=component.getClusterData(dependency.substring(10));
      String clusterId=clusterDataHolder.getClusterId();
      String serviceName=clusterDataHolder.getServiceType();
      Cluster cluster=null;
      TopologyManager.acquireReadLock();
      cluster=TopologyManager.getTopology().getService(serviceName).getCluster(clusterId);
      TopologyManager.releaseReadLock();
      if (cluster != null) {
        startClusterMonitor(cluster);
      }
 else {
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",protected abstract void startDependency();,0.0546006066734074
116585,"private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(groupCtxt.getName(),groupCtxt.getAlias());
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  group.setDeploymentPolicy(groupCtxt.getDeploymentPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  Set<StartupOrder> startupOrders=getStartupOrderForGroup(groupCtxt.getName());
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(startupOrders);
  }
  dependencyOrder.setKillbehavior(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
      nestedGroups.put(nestedGroup.getName(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}","private Group parseGroup(String appId,int tenantId,String key,GroupContext groupCtxt,Map<String,SubscribableInfoContext> subscribableInfoCtxts,Map<String,GroupContext> definedGroupCtxts) throws ApplicationDefinitionException {
  GroupContext definedGroupDef=definedGroupCtxts.get(groupCtxt.getAlias());
  if (definedGroupDef == null) {
    handleError(""String_Node_Str"" + groupCtxt.getName() + ""String_Node_Str""+ groupCtxt.getAlias()+ ""String_Node_Str"");
  }
  Group group=new Group(groupCtxt.getName(),groupCtxt.getAlias());
  group.setAutoscalingPolicy(groupCtxt.getAutoscalingPolicy());
  group.setDeploymentPolicy(groupCtxt.getDeploymentPolicy());
  DependencyOrder dependencyOrder=new DependencyOrder();
  Set<StartupOrder> startupOrders=getStartupOrderForGroup(groupCtxt.getName());
  if (startupOrders != null) {
    dependencyOrder.setStartupOrders(startupOrders);
  }
  dependencyOrder.setKillbehavior(getKillbehaviour(groupCtxt.getName()));
  group.setDependencyOrder(dependencyOrder);
  Map<String,ClusterDataHolder> clusterDataMap;
  if (groupCtxt.getSubscribableContexts() != null) {
    clusterDataMap=parseLeafLevelSubscriptions(appId,tenantId,key,groupCtxt.getName(),Arrays.asList(groupCtxt.getSubscribableContexts()),subscribableInfoCtxts);
    group.setClusterData(clusterDataMap);
  }
  if (groupCtxt.getGroupContexts() != null) {
    Map<String,Group> nestedGroups=new HashMap<String,Group>();
    for (    GroupContext subGroupCtxt : groupCtxt.getGroupContexts()) {
      subGroupCtxt=definedGroupCtxts.get(subGroupCtxt.getAlias());
      Group nestedGroup=parseGroup(appId,tenantId,key,subGroupCtxt,subscribableInfoCtxts,definedGroupCtxts);
      nestedGroups.put(nestedGroup.getAlias(),nestedGroup);
    }
    group.setGroups(nestedGroups);
  }
  return group;
}",0.9974782852339592
116586,"public static Queue<String> getStartupOrder(ParentBehavior component){
  Queue<String> startup=new LinkedList<String>();
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    Set<StartupOrder> startupOrderSet=dependencyOrder.getStartupOrders();
    for (    StartupOrder startupOrder : startupOrderSet) {
      String start=startupOrder.getStart();
      String after=startupOrder.getAfter();
      if (!startup.contains(start)) {
        startup.add(start);
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
 else {
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
    }
  }
  for (  Group group : component.getAliasToGroupMap().values()) {
    if (!startup.contains(group.getAlias())) {
      startup.add(group.getAlias());
    }
  }
  for (  Set<String> clusterIds : component.getServiceNameToClusterIdsMap().values()) {
    for (    String clusterId : clusterIds) {
      if (!startup.contains(clusterId)) {
        startup.add(clusterId);
      }
    }
  }
  return startup;
}","public static Queue<String> getStartupOrder(ParentBehavior component){
  Queue<String> startup=new LinkedList<String>();
  DependencyOrder dependencyOrder=component.getDependencyOrder();
  if (dependencyOrder != null) {
    Set<StartupOrder> startupOrderSet=dependencyOrder.getStartupOrders();
    for (    StartupOrder startupOrder : startupOrderSet) {
      String start=startupOrder.getStart();
      String after=startupOrder.getAfter();
      if (!startup.contains(start)) {
        startup.add(start);
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
 else {
        if (!startup.contains(after)) {
          startup.add(after);
        }
 else {
        }
      }
    }
  }
  for (  String grpAlias : component.getAliasToGroupMap().keySet()) {
    if (!startup.contains(""String_Node_Str"" + grpAlias)) {
      startup.add(""String_Node_Str"" + grpAlias);
    }
  }
  for (  Set<String> clusterIds : component.getServiceNameToClusterIdsMap().values()) {
    for (    String clusterId : clusterIds) {
      if (!startup.contains(""String_Node_Str"" + clusterId)) {
        startup.add(""String_Node_Str"" + clusterId);
      }
    }
  }
  return startup;
}",0.6992353440951572
116587,"public Monitor(ParentBehavior component){
  this.component=component;
  startDependency();
}","public Monitor(ParentBehavior component){
  groupMonitors=new HashMap<String,GroupMonitor>();
  abstractClusterMonitors=new HashMap<String,AbstractClusterMonitor>();
  this.component=component;
  startDependency();
}",0.5974025974025974
116588,"public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      startGroupMonitor(this,dependency,component);
    }
 else     if (dependency.contains(""String_Node_Str"")) {
      Set<String> clusterIds=component.getClusterIds(dependency);
      for (      String clusterId : clusterIds) {
        Cluster cluster=null;
        TopologyManager.acquireReadLock();
        cluster=TopologyManager.getTopology().getService(dependency).getCluster(clusterId);
        TopologyManager.releaseReadLock();
        if (cluster != null) {
          startClusterMonitor(cluster);
        }
 else {
        }
      }
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}","public void startDependency(){
  preOrderTraverse=DependencyBuilder.getStartupOrder(component);
  if (!preOrderTraverse.isEmpty()) {
    String dependency=preOrderTraverse.poll();
    if (dependency.contains(""String_Node_Str"")) {
      startGroupMonitor(this,dependency.substring(6),component);
    }
 else     if (dependency.contains(""String_Node_Str"")) {
    }
  }
 else {
    log.info(""String_Node_Str"" + this.id + ""String_Node_Str"");
  }
}",0.5460122699386503
116589,"private CartridgeAgentConfiguration(){
  parameters=loadParametersFile();
  try {
    serviceGroup=readServiceGroup();
    isClustered=readClustering();
    serviceName=readParameterValue(CartridgeAgentConstants.SERVICE_NAME);
    clusterId=readParameterValue(CartridgeAgentConstants.CLUSTER_ID);
    networkPartitionId=readParameterValue(CartridgeAgentConstants.NETWORK_PARTITION_ID);
    partitionId=readParameterValue(CartridgeAgentConstants.PARTITION_ID);
    memberId=readParameterValue(CartridgeAgentConstants.MEMBER_ID);
    cartridgeKey=readParameterValue(CartridgeAgentConstants.CARTRIDGE_KEY);
    appPath=readParameterValue(CartridgeAgentConstants.APP_PATH);
    repoUrl=readParameterValue(CartridgeAgentConstants.REPO_URL);
    ports=readPorts();
    logFilePaths=readLogFilePaths();
    isMultitenant=readMultitenant(CartridgeAgentConstants.MULTITENANT);
    persistenceMappings=readPersistenceMapping();
    isCommitsEnabled=readCommitParameterValue();
    isCheckoutEnabled=Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.AUTO_CHECKOUT));
    listenAddress=System.getProperty(CartridgeAgentConstants.LISTEN_ADDRESS);
    isInternalRepo=readInternalRepo(CartridgeAgentConstants.PROVIDER);
    tenantId=readParameterValue(CartridgeAgentConstants.TENANT_ID);
    lbClusterId=readParameterValue(CartridgeAgentConstants.LB_CLUSTER_ID);
    minCount=readParameterValue(CartridgeAgentConstants.MIN_INSTANCE_COUNT);
    lbPrivateIp=System.getProperty(CartridgeAgentConstants.LB_PRIVATE_IP);
    lbPublicIp=System.getProperty(CartridgeAgentConstants.LB_PUBLIC_IP);
    tenantRepositoryPath=System.getProperty(CartridgeAgentConstants.TENANT_REPO_PATH);
    superTenantRepositoryPath=System.getProperty(CartridgeAgentConstants.SUPER_TENANT_REPO_PATH);
    deployment=readDeployment();
    managerServiceName=readManagerServiceType();
    workerServiceName=readWorkerServiceType();
    isPrimary=readIsPrimary();
  }
 catch (  ParameterNotFoundException e) {
    throw new RuntimeException(e);
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",serviceName));
    log.debug(String.format(""String_Node_Str"",clusterId));
    log.debug(String.format(""String_Node_Str"",networkPartitionId));
    log.debug(String.format(""String_Node_Str"",partitionId));
    log.debug(String.format(""String_Node_Str"",memberId));
    log.debug(String.format(""String_Node_Str"",cartridgeKey));
    log.debug(String.format(""String_Node_Str"",appPath));
    log.debug(String.format(""String_Node_Str"",repoUrl));
    log.debug(String.format(""String_Node_Str"",ports.toString()));
    log.debug(String.format(""String_Node_Str"",lbPrivateIp));
    log.debug(String.format(""String_Node_Str"",lbPublicIp));
  }
}","private CartridgeAgentConfiguration(){
  parameters=loadParametersFile();
  try {
    serviceGroup=readServiceGroup();
    isClustered=readClustering();
    serviceName=readParameterValue(CartridgeAgentConstants.SERVICE_NAME);
    clusterId=readParameterValue(CartridgeAgentConstants.CLUSTER_ID);
    networkPartitionId=readParameterValue(CartridgeAgentConstants.NETWORK_PARTITION_ID);
    partitionId=readParameterValue(CartridgeAgentConstants.PARTITION_ID);
    memberId=readParameterValue(CartridgeAgentConstants.MEMBER_ID);
    cartridgeKey=readParameterValue(CartridgeAgentConstants.CARTRIDGE_KEY);
    appPath=readParameterValue(CartridgeAgentConstants.APP_PATH);
    repoUrl=readParameterValue(CartridgeAgentConstants.REPO_URL);
    ports=readPorts();
    logFilePaths=readLogFilePaths();
    isMultitenant=readMultitenant(CartridgeAgentConstants.MULTITENANT);
    persistenceMappings=readPersistenceMapping();
    isCommitsEnabled=readCommitParameterValue();
    isCheckoutEnabled=Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.AUTO_CHECKOUT));
    listenAddress=System.getProperty(CartridgeAgentConstants.LISTEN_ADDRESS);
    isInternalRepo=readInternalRepo(CartridgeAgentConstants.PROVIDER);
    tenantId=readParameterValue(CartridgeAgentConstants.TENANT_ID);
    lbClusterId=readLBClusterIdValue(CartridgeAgentConstants.LB_CLUSTER_ID);
    minCount=readMinCountValue(CartridgeAgentConstants.MIN_INSTANCE_COUNT);
    lbPrivateIp=System.getProperty(CartridgeAgentConstants.LB_PRIVATE_IP);
    lbPublicIp=System.getProperty(CartridgeAgentConstants.LB_PUBLIC_IP);
    tenantRepositoryPath=System.getProperty(CartridgeAgentConstants.TENANT_REPO_PATH);
    superTenantRepositoryPath=System.getProperty(CartridgeAgentConstants.SUPER_TENANT_REPO_PATH);
    deployment=readDeployment();
    managerServiceName=readManagerServiceType();
    workerServiceName=readWorkerServiceType();
    isPrimary=readIsPrimary();
  }
 catch (  ParameterNotFoundException e) {
    throw new RuntimeException(e);
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",serviceName));
    log.debug(String.format(""String_Node_Str"",clusterId));
    log.debug(String.format(""String_Node_Str"",networkPartitionId));
    log.debug(String.format(""String_Node_Str"",partitionId));
    log.debug(String.format(""String_Node_Str"",memberId));
    log.debug(String.format(""String_Node_Str"",cartridgeKey));
    log.debug(String.format(""String_Node_Str"",appPath));
    log.debug(String.format(""String_Node_Str"",repoUrl));
    log.debug(String.format(""String_Node_Str"",ports.toString()));
    log.debug(String.format(""String_Node_Str"",lbPrivateIp));
    log.debug(String.format(""String_Node_Str"",lbPublicIp));
  }
}",0.9826071364532905
116590,"public static void handleClusterCreated(Registrant registrant,boolean isLb){
  Topology topology=TopologyManager.getTopology();
  Service service;
  try {
    TopologyManager.acquireWriteLock();
    String cartridgeType=registrant.getCartridgeType();
    service=topology.getService(cartridgeType);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + service + ""String_Node_Str"");
    }
    Properties props=CloudControllerUtil.toJavaUtilProperties(registrant.getProperties());
    Cluster cluster;
    String clusterId=registrant.getClusterId();
    if (service.clusterExists(clusterId)) {
      cluster=service.getCluster(clusterId);
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
      cluster.setKubernetesCluster(getKubernetesCluster(service));
    }
 else {
      cluster=new Cluster(cartridgeType,clusterId,registrant.getDeploymentPolicyName(),registrant.getAutoScalerPolicyName());
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
      cluster.setKubernetesCluster(getKubernetesCluster(service));
      cluster.setStatus(ClusterStatus.Created);
      service.addCluster(cluster);
    }
    TopologyManager.updateTopology(topology);
    TopologyEventPublisher.sendClusterCreatedEvent(cartridgeType,clusterId,cluster);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}","public static void handleClusterCreated(Registrant registrant,boolean isLb){
  Topology topology=TopologyManager.getTopology();
  Service service;
  try {
    TopologyManager.acquireWriteLock();
    String cartridgeType=registrant.getCartridgeType();
    service=topology.getService(cartridgeType);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + service + ""String_Node_Str"");
    }
    Properties props=CloudControllerUtil.toJavaUtilProperties(registrant.getProperties());
    Cluster cluster;
    String clusterId=registrant.getClusterId();
    if (service.clusterExists(clusterId)) {
      cluster=service.getCluster(clusterId);
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
      setKubernetesCluster(cluster);
    }
 else {
      cluster=new Cluster(cartridgeType,clusterId,registrant.getDeploymentPolicyName(),registrant.getAutoScalerPolicyName());
      cluster.addHostName(registrant.getHostName());
      if (service.getServiceType() == ServiceType.MultiTenant) {
        cluster.setTenantRange(registrant.getTenantRange());
      }
      if (service.getProperties().getProperty(Constants.IS_PRIMARY) != null) {
        props.setProperty(Constants.IS_PRIMARY,service.getProperties().getProperty(Constants.IS_PRIMARY));
      }
      cluster.setProperties(props);
      cluster.setLbCluster(isLb);
      setKubernetesCluster(cluster);
      cluster.setStatus(ClusterStatus.Created);
      service.addCluster(cluster);
    }
    TopologyManager.updateTopology(topology);
    TopologyEventPublisher.sendClusterCreatedEvent(cartridgeType,clusterId,cluster);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
}",0.8585858585858586
116591,"/** 
 * Update an existing Kubernetes host
 */
public synchronized boolean updateKubernetesHost(KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesHostException {
  validateKubernetesHost(kubernetesHost);
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHost.getHostId());
    for (int i=0; i < kubernetesGroupStored.getKubernetesHosts().length; i++) {
      if (kubernetesGroupStored.getKubernetesHosts()[i].getHostId().equals(kubernetesHost.getHostId())) {
        KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
        clonedObj.getKubernetesHosts()[i]=kubernetesHost;
        RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
        kubernetesGroupStored.getKubernetesHosts()[i]=kubernetesHost;
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",kubernetesHost.getHostId()));
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Update an existing Kubernetes host
 */
public synchronized boolean updateKubernetesHost(KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesHostException {
  validateKubernetesHost(kubernetesHost);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHost);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHost.getHostId());
    for (int i=0; i < kubernetesGroupStored.getKubernetesHosts().length; i++) {
      if (kubernetesGroupStored.getKubernetesHosts()[i].getHostId().equals(kubernetesHost.getHostId())) {
        KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
        clonedObj.getKubernetesHosts()[i]=kubernetesHost;
        RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
        kubernetesGroupStored.getKubernetesHosts()[i]=kubernetesHost;
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",kubernetesHost.getHostId()));
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
  return false;
}",0.9637079142982072
116592,"/** 
 * Remove a registered Kubernetes group from registry
 */
public synchronized boolean removeKubernetesGroup(String kubernetesGroupId) throws NonExistingKubernetesGroupException {
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    RegistryManager.getInstance().removeKubernetesGroup(kubernetesGroupStored);
    kubernetesGroupsMap.remove(kubernetesGroupId);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupId));
    }
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesGroupException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Remove a registered Kubernetes group from registry
 */
public synchronized boolean removeKubernetesGroup(String kubernetesGroupId) throws NonExistingKubernetesGroupException {
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesGroupId);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    RegistryManager.getInstance().removeKubernetesGroup(kubernetesGroupStored);
    kubernetesGroupsMap.remove(kubernetesGroupId);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupId));
    }
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesGroupException(e.getMessage(),e);
  }
  return false;
}",0.9359165424739196
116593,"/** 
 * Update an existing Kubernetes master
 */
public synchronized boolean updateKubernetesMaster(KubernetesMaster kubernetesMaster) throws InvalidKubernetesMasterException, NonExistingKubernetesMasterException {
  validateKubernetesMaster(kubernetesMaster);
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesMaster.getHostId());
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesMaster(kubernetesMaster);
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesMaster(kubernetesMaster);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesMaster.getHostId()));
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesMasterException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Update an existing Kubernetes master
 */
public synchronized boolean updateKubernetesMaster(KubernetesMaster kubernetesMaster) throws InvalidKubernetesMasterException, NonExistingKubernetesMasterException {
  validateKubernetesMaster(kubernetesMaster);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesMaster);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesMaster.getHostId());
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesMaster(kubernetesMaster);
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesMaster(kubernetesMaster);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesMaster.getHostId()));
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesMasterException(e.getMessage(),e);
  }
  return false;
}",0.9535772801747678
116594,"private void validateKubernetesGroup(KubernetesGroup kubernetesGroup) throws InvalidKubernetesGroupException {
  if (kubernetesGroup == null) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(kubernetesGroup.getGroupId())) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"");
  }
  if (kubernetesGroupExists(kubernetesGroup)) {
    throw new InvalidKubernetesGroupException(String.format(""String_Node_Str"" + ""String_Node_Str"",kubernetesGroup.getGroupId()));
  }
  if (kubernetesGroup.getKubernetesMaster() == null) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesGroup.getGroupId());
  }
  if (kubernetesGroup.getPortRange() == null) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesGroup.getGroupId());
  }
  if (kubernetesGroup.getPortRange().getUpper() > AutoScalerConstants.PORT_RANGE_MAX || kubernetesGroup.getPortRange().getUpper() < AutoScalerConstants.PORT_RANGE_MIN || kubernetesGroup.getPortRange().getLower() > AutoScalerConstants.PORT_RANGE_MAX || kubernetesGroup.getPortRange().getLower() < AutoScalerConstants.PORT_RANGE_MIN || kubernetesGroup.getPortRange().getUpper() < kubernetesGroup.getPortRange().getLower()) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesGroup.getGroupId());
  }
  try {
    validateKubernetesMaster(kubernetesGroup.getKubernetesMaster());
    validateKubernetesHosts(kubernetesGroup.getKubernetesHosts());
    if (kubernetesHostExists(kubernetesGroup.getKubernetesMaster().getHostId())) {
      throw new InvalidKubernetesGroupException(""String_Node_Str"" + kubernetesGroup.getKubernetesMaster().getHostId());
    }
    List<String> hostIds=new ArrayList<String>();
    hostIds.add(kubernetesGroup.getKubernetesMaster().getHostId());
    for (    KubernetesHost kubernetesHost : kubernetesGroup.getKubernetesHosts()) {
      if (hostIds.contains(kubernetesHost.getHostId())) {
        throw new InvalidKubernetesGroupException(String.format(""String_Node_Str"",kubernetesHost.getHostId()));
      }
      if (kubernetesHostExists(kubernetesHost.getHostId())) {
        throw new InvalidKubernetesGroupException(""String_Node_Str"" + kubernetesHost.getHostId());
      }
      hostIds.add(kubernetesHost.getHostId());
    }
  }
 catch (  InvalidKubernetesHostException e) {
    throw new InvalidKubernetesGroupException(e.getMessage());
  }
catch (  InvalidKubernetesMasterException e) {
    throw new InvalidKubernetesGroupException(e.getMessage());
  }
}","private void validateKubernetesGroup(KubernetesGroup kubernetesGroup) throws InvalidKubernetesGroupException {
  if (kubernetesGroup == null) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(kubernetesGroup.getGroupId())) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"");
  }
  if (kubernetesGroupExists(kubernetesGroup)) {
    throw new InvalidKubernetesGroupException(String.format(""String_Node_Str"" + ""String_Node_Str"",kubernetesGroup.getGroupId()));
  }
  if (kubernetesGroup.getKubernetesMaster() == null) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesGroup.getGroupId());
  }
  if (kubernetesGroup.getPortRange() == null) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesGroup.getGroupId());
  }
  if (kubernetesGroup.getPortRange().getUpper() > AutoScalerConstants.PORT_RANGE_MAX || kubernetesGroup.getPortRange().getUpper() < AutoScalerConstants.PORT_RANGE_MIN || kubernetesGroup.getPortRange().getLower() > AutoScalerConstants.PORT_RANGE_MAX || kubernetesGroup.getPortRange().getLower() < AutoScalerConstants.PORT_RANGE_MIN || kubernetesGroup.getPortRange().getUpper() < kubernetesGroup.getPortRange().getLower()) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesGroup.getGroupId());
  }
  try {
    validateKubernetesMaster(kubernetesGroup.getKubernetesMaster());
    validateKubernetesHosts(kubernetesGroup.getKubernetesHosts());
    if (kubernetesHostExists(kubernetesGroup.getKubernetesMaster().getHostId())) {
      throw new InvalidKubernetesGroupException(""String_Node_Str"" + kubernetesGroup.getKubernetesMaster().getHostId());
    }
    if (kubernetesGroup.getKubernetesHosts() != null) {
      List<String> hostIds=new ArrayList<String>();
      hostIds.add(kubernetesGroup.getKubernetesMaster().getHostId());
      for (      KubernetesHost kubernetesHost : kubernetesGroup.getKubernetesHosts()) {
        if (hostIds.contains(kubernetesHost.getHostId())) {
          throw new InvalidKubernetesGroupException(String.format(""String_Node_Str"",kubernetesHost.getHostId()));
        }
        if (kubernetesHostExists(kubernetesHost.getHostId())) {
          throw new InvalidKubernetesGroupException(""String_Node_Str"" + kubernetesHost.getHostId());
        }
        hostIds.add(kubernetesHost.getHostId());
      }
    }
  }
 catch (  InvalidKubernetesHostException e) {
    throw new InvalidKubernetesGroupException(e.getMessage());
  }
catch (  InvalidKubernetesMasterException e) {
    throw new InvalidKubernetesGroupException(e.getMessage());
  }
}",0.9837429111531192
116595,"/** 
 * Register a new KubernetesGroup in AutoScaler.
 */
public synchronized boolean addNewKubernetesGroup(KubernetesGroup kubernetesGroup) throws InvalidKubernetesGroupException {
  validateKubernetesGroup(kubernetesGroup);
  try {
    validateKubernetesEndPointViaCloudController(kubernetesGroup.getKubernetesMaster());
    RegistryManager.getInstance().persistKubernetesGroup(kubernetesGroup);
    addKubernetesGroupToInformationModel(kubernetesGroup);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroup.getGroupId(),kubernetesGroup.getDescription()));
    }
    return true;
  }
 catch (  Exception e) {
    throw new InvalidKubernetesGroupException(e.getMessage(),e);
  }
}","/** 
 * Register a new KubernetesGroup in AutoScaler.
 */
public synchronized boolean addNewKubernetesGroup(KubernetesGroup kubernetesGroup) throws InvalidKubernetesGroupException {
  if (kubernetesGroup == null) {
    throw new InvalidKubernetesGroupException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesGroup);
  }
  validateKubernetesGroup(kubernetesGroup);
  try {
    validateKubernetesEndPointViaCloudController(kubernetesGroup.getKubernetesMaster());
    addKubernetesGroupToInformationModel(kubernetesGroup);
    RegistryManager.getInstance().persistKubernetesGroup(kubernetesGroup);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroup.getGroupId(),kubernetesGroup.getDescription()));
    }
    return true;
  }
 catch (  Exception e) {
    throw new InvalidKubernetesGroupException(e.getMessage(),e);
  }
}",0.7896995708154506
116596,"/** 
 * Register a new KubernetesHost to an existing KubernetesGroup.
 */
public synchronized boolean addNewKubernetesHost(String kubernetesGroupId,KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesGroupException {
  if (StringUtils.isEmpty(kubernetesGroupId) || kubernetesHost == null) {
    return false;
  }
  validateKubernetesHost(kubernetesHost);
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    if (kubernetesHostExists(kubernetesHost.getHostId())) {
      throw new InvalidKubernetesHostException(""String_Node_Str"" + kubernetesHost.getHostId());
    }
    ArrayList<KubernetesHost> kubernetesHostArrayList=new ArrayList<KubernetesHost>(Arrays.asList(kubernetesGroupStored.getKubernetesHosts()));
    kubernetesHostArrayList.add(kubernetesHost);
    KubernetesHost[] kubernetesHostArray=new KubernetesHost[kubernetesHostArrayList.size()];
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesHosts(kubernetesHostArrayList.toArray(kubernetesHostArray));
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostArrayList.toArray(kubernetesHostArray));
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupStored.getGroupId()));
    }
    return true;
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
}","/** 
 * Register a new KubernetesHost to an existing KubernetesGroup.
 */
public synchronized boolean addNewKubernetesHost(String kubernetesGroupId,KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesGroupException {
  if (StringUtils.isEmpty(kubernetesGroupId) || kubernetesHost == null) {
    throw new InvalidKubernetesHostException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHost + ""String_Node_Str""+ kubernetesGroupId);
  }
  validateKubernetesHost(kubernetesHost);
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    if (kubernetesHostExists(kubernetesHost.getHostId())) {
      throw new InvalidKubernetesHostException(""String_Node_Str"" + kubernetesHost.getHostId());
    }
    ArrayList<KubernetesHost> kubernetesHostArrayList=new ArrayList<KubernetesHost>(Arrays.asList(kubernetesGroupStored.getKubernetesHosts()));
    kubernetesHostArrayList.add(kubernetesHost);
    KubernetesHost[] kubernetesHostArray=new KubernetesHost[kubernetesHostArrayList.size()];
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesHosts(kubernetesHostArrayList.toArray(kubernetesHostArray));
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostArrayList.toArray(kubernetesHostArray));
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupStored.getGroupId()));
    }
    return true;
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
}",0.3128737802958766
116597,"/** 
 * Remove a registered Kubernetes host from registry
 */
public synchronized boolean removeKubernetesHost(String kubernetesHostId) throws NonExistingKubernetesHostException {
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHostId);
    List<KubernetesHost> kubernetesHostList=new ArrayList<KubernetesHost>();
    for (    KubernetesHost kubernetesHost : kubernetesGroupStored.getKubernetesHosts()) {
      if (!kubernetesHost.getHostId().equals(kubernetesHostId)) {
        kubernetesHostList.add(kubernetesHost);
      }
    }
    KubernetesHost[] kubernetesHostsArray=new KubernetesHost[kubernetesHostList.size()];
    kubernetesHostList.toArray(kubernetesHostsArray);
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesHosts(kubernetesHostsArray);
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostsArray);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesHostId));
    }
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesHostException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Remove a registered Kubernetes host from registry
 */
public synchronized boolean removeKubernetesHost(String kubernetesHostId) throws NonExistingKubernetesHostException {
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHostId);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHostId);
    List<KubernetesHost> kubernetesHostList=new ArrayList<KubernetesHost>();
    for (    KubernetesHost kubernetesHost : kubernetesGroupStored.getKubernetesHosts()) {
      if (!kubernetesHost.getHostId().equals(kubernetesHostId)) {
        kubernetesHostList.add(kubernetesHost);
      }
    }
    KubernetesHost[] kubernetesHostsArray=new KubernetesHost[kubernetesHostList.size()];
    kubernetesHostList.toArray(kubernetesHostsArray);
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesHosts(kubernetesHostsArray);
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostsArray);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesHostId));
    }
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesHostException(e.getMessage(),e);
  }
  return false;
}",0.9662027833001988
116598,"/** 
 * Update an existing Kubernetes host
 */
public synchronized boolean updateKubernetesHost(KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesHostException {
  validateKubernetesHost(kubernetesHost);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHost);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHost.getHostId());
    for (int i=0; i < kubernetesGroupStored.getKubernetesHosts().length; i++) {
      if (kubernetesGroupStored.getKubernetesHosts()[i].getHostId().equals(kubernetesHost.getHostId())) {
        KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
        clonedObj.getKubernetesHosts()[i]=kubernetesHost;
        RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
        kubernetesGroupStored.getKubernetesHosts()[i]=kubernetesHost;
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",kubernetesHost.getHostId()));
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Update an existing Kubernetes host
 */
public synchronized boolean updateKubernetesHost(KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesHostException {
  validateKubernetesHost(kubernetesHost);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHost);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHost.getHostId());
    for (int i=0; i < kubernetesGroupStored.getKubernetesHosts().length; i++) {
      if (kubernetesGroupStored.getKubernetesHosts()[i].getHostId().equals(kubernetesHost.getHostId())) {
        kubernetesGroupStored.getKubernetesHosts()[i]=kubernetesHost;
        RegistryManager.getInstance().persistKubernetesGroup(kubernetesGroupStored);
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",kubernetesHost.getHostId()));
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
  throw new NonExistingKubernetesHostException(""String_Node_Str"" + kubernetesHost.getHostId());
}",0.8935803532959931
116599,"/** 
 * Remove a registered Kubernetes group from registry
 */
public synchronized boolean removeKubernetesGroup(String kubernetesGroupId) throws NonExistingKubernetesGroupException {
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesGroupId);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    RegistryManager.getInstance().removeKubernetesGroup(kubernetesGroupStored);
    kubernetesGroupsMap.remove(kubernetesGroupId);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupId));
    }
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesGroupException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Remove a registered Kubernetes group from registry
 */
public synchronized boolean removeKubernetesGroup(String kubernetesGroupId) throws NonExistingKubernetesGroupException {
  if (StringUtils.isEmpty(kubernetesGroupId)) {
    throw new NonExistingKubernetesGroupException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesGroupId);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    kubernetesGroupsMap.remove(kubernetesGroupId);
    RegistryManager.getInstance().removeKubernetesGroup(kubernetesGroupStored);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupId));
    }
    return true;
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesGroupException(e.getMessage(),e);
  }
}",0.8033526756931012
116600,"/** 
 * Update an existing Kubernetes master
 */
public synchronized boolean updateKubernetesMaster(KubernetesMaster kubernetesMaster) throws InvalidKubernetesMasterException, NonExistingKubernetesMasterException {
  validateKubernetesMaster(kubernetesMaster);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesMaster);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesMaster.getHostId());
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesMaster(kubernetesMaster);
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesMaster(kubernetesMaster);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesMaster.getHostId()));
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesMasterException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Update an existing Kubernetes master
 */
public synchronized boolean updateKubernetesMaster(KubernetesMaster kubernetesMaster) throws InvalidKubernetesMasterException, NonExistingKubernetesMasterException {
  validateKubernetesMaster(kubernetesMaster);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesMaster);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesMaster.getHostId());
    kubernetesGroupStored.setKubernetesMaster(kubernetesMaster);
    RegistryManager.getInstance().persistKubernetesGroup(kubernetesGroupStored);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesMaster.getHostId()));
    }
  }
 catch (  Exception e) {
    throw new InvalidKubernetesMasterException(e.getMessage(),e);
  }
  return false;
}",0.7962138084632516
116601,"private void validateKubernetesHost(KubernetesHost kubernetesHost) throws InvalidKubernetesHostException {
  if (kubernetesHost == null) {
    throw new InvalidKubernetesHostException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(kubernetesHost.getHostId())) {
    throw new InvalidKubernetesHostException(""String_Node_Str"");
  }
  if (kubernetesHost.getHostIpAddress() == null) {
    throw new InvalidKubernetesHostException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesHost.getHostId());
  }
}","private void validateKubernetesHost(KubernetesHost kubernetesHost) throws InvalidKubernetesHostException {
  if (kubernetesHost == null) {
    throw new InvalidKubernetesHostException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(kubernetesHost.getHostId())) {
    throw new InvalidKubernetesHostException(""String_Node_Str"");
  }
  if (kubernetesHost.getHostIpAddress() == null) {
    throw new InvalidKubernetesHostException(""String_Node_Str"" + ""String_Node_Str"" + kubernetesHost.getHostId());
  }
  if (!InetAddresses.isInetAddress(kubernetesHost.getHostIpAddress())) {
    throw new InvalidKubernetesHostException(""String_Node_Str"" + kubernetesHost.getHostIpAddress());
  }
}",0.8499156829679595
116602,"/** 
 * Register a new KubernetesHost to an existing KubernetesGroup.
 */
public synchronized boolean addNewKubernetesHost(String kubernetesGroupId,KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesGroupException {
  if (StringUtils.isEmpty(kubernetesGroupId) || kubernetesHost == null) {
    throw new InvalidKubernetesHostException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHost + ""String_Node_Str""+ kubernetesGroupId);
  }
  validateKubernetesHost(kubernetesHost);
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    if (kubernetesHostExists(kubernetesHost.getHostId())) {
      throw new InvalidKubernetesHostException(""String_Node_Str"" + kubernetesHost.getHostId());
    }
    ArrayList<KubernetesHost> kubernetesHostArrayList=new ArrayList<KubernetesHost>(Arrays.asList(kubernetesGroupStored.getKubernetesHosts()));
    kubernetesHostArrayList.add(kubernetesHost);
    KubernetesHost[] kubernetesHostArray=new KubernetesHost[kubernetesHostArrayList.size()];
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesHosts(kubernetesHostArrayList.toArray(kubernetesHostArray));
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostArrayList.toArray(kubernetesHostArray));
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupStored.getGroupId()));
    }
    return true;
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
}","/** 
 * Register a new KubernetesHost to an existing KubernetesGroup.
 */
public synchronized boolean addNewKubernetesHost(String kubernetesGroupId,KubernetesHost kubernetesHost) throws InvalidKubernetesHostException, NonExistingKubernetesGroupException {
  if (kubernetesHost == null) {
    throw new InvalidKubernetesHostException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(kubernetesGroupId)) {
    throw new NonExistingKubernetesGroupException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHost + ""String_Node_Str""+ kubernetesGroupId);
  }
  validateKubernetesHost(kubernetesHost);
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroup(kubernetesGroupId);
    if (kubernetesHostExists(kubernetesHost.getHostId())) {
      throw new InvalidKubernetesHostException(""String_Node_Str"" + kubernetesHost.getHostId());
    }
    ArrayList<KubernetesHost> kubernetesHostArrayList=new ArrayList<KubernetesHost>(Arrays.asList(kubernetesGroupStored.getKubernetesHosts()));
    kubernetesHostArrayList.add(kubernetesHost);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostArrayList.toArray(new KubernetesHost[kubernetesHostArrayList.size()]));
    RegistryManager.getInstance().persistKubernetesGroup(kubernetesGroupStored);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesGroupStored.getGroupId()));
    }
    return true;
  }
 catch (  Exception e) {
    throw new InvalidKubernetesHostException(e.getMessage(),e);
  }
}",0.3191025241508258
116603,"/** 
 * Remove a registered Kubernetes host from registry
 */
public synchronized boolean removeKubernetesHost(String kubernetesHostId) throws NonExistingKubernetesHostException {
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHostId);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHostId);
    List<KubernetesHost> kubernetesHostList=new ArrayList<KubernetesHost>();
    for (    KubernetesHost kubernetesHost : kubernetesGroupStored.getKubernetesHosts()) {
      if (!kubernetesHost.getHostId().equals(kubernetesHostId)) {
        kubernetesHostList.add(kubernetesHost);
      }
    }
    KubernetesHost[] kubernetesHostsArray=new KubernetesHost[kubernetesHostList.size()];
    kubernetesHostList.toArray(kubernetesHostsArray);
    KubernetesGroup clonedObj=SerializationUtils.clone(kubernetesGroupStored);
    clonedObj.setKubernetesHosts(kubernetesHostsArray);
    RegistryManager.getInstance().persistKubernetesGroup(clonedObj);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostsArray);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesHostId));
    }
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesHostException(e.getMessage(),e);
  }
  return false;
}","/** 
 * Remove a registered Kubernetes host from registry
 */
public synchronized boolean removeKubernetesHost(String kubernetesHostId) throws NonExistingKubernetesHostException {
  if (kubernetesHostId == null) {
    throw new NonExistingKubernetesHostException(""String_Node_Str"");
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + kubernetesHostId);
  }
  try {
    KubernetesGroup kubernetesGroupStored=getKubernetesGroupContainingHost(kubernetesHostId);
    if (kubernetesGroupStored.getKubernetesMaster().getHostId().equals(kubernetesHostId)) {
      throw new NonExistingKubernetesHostException(""String_Node_Str"" + kubernetesHostId);
    }
    List<KubernetesHost> kubernetesHostList=new ArrayList<KubernetesHost>();
    for (    KubernetesHost kubernetesHost : kubernetesGroupStored.getKubernetesHosts()) {
      if (!kubernetesHost.getHostId().equals(kubernetesHostId)) {
        kubernetesHostList.add(kubernetesHost);
      }
    }
    if (kubernetesHostList.size() == kubernetesGroupStored.getKubernetesHosts().length) {
      throw new NonExistingKubernetesHostException(""String_Node_Str"" + kubernetesHostId);
    }
    KubernetesHost[] kubernetesHostsArray=new KubernetesHost[kubernetesHostList.size()];
    kubernetesHostList.toArray(kubernetesHostsArray);
    kubernetesGroupStored.setKubernetesHosts(kubernetesHostsArray);
    RegistryManager.getInstance().persistKubernetesGroup(kubernetesGroupStored);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",kubernetesHostId));
    }
    return true;
  }
 catch (  Exception e) {
    throw new NonExistingKubernetesHostException(e.getMessage(),e);
  }
}",0.1791145657316661
116604,"public List<KubernetesMaster> getKubernetesMasters(){
  return kubernetesMasters;
}","public KubernetesMaster getKubernetesMasters(){
  return kubernetesMaster;
}",0.9559748427672956
116605,"public void setKubernetesMasters(List<KubernetesMaster> kubernetesMasters){
  this.kubernetesMasters=kubernetesMasters;
}","public void setKubernetesMasters(KubernetesMaster kubernetesMasters){
  this.kubernetesMaster=kubernetesMasters;
}",0.9702127659574468
116606,"static StratosAdminResponse unDeployApplication(String configCompositeApplicationAlias,ConfigurationContext ctxt,String userName,String tenantDomain) throws RestAPIException {
  log.info(""String_Node_Str"" + configCompositeApplicationAlias);
  CloudControllerServiceClient cloudControllerServiceClient=getCloudControllerServiceClient();
  if (cloudControllerServiceClient != null) {
    try {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + configCompositeApplicationAlias);
      }
      cloudControllerServiceClient.unDeployCompositeApplicationDefinition(configCompositeApplicationAlias);
    }
 catch (    RemoteException e) {
      e.printStackTrace();
      String message=""String_Node_Str"";
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    CloudControllerServiceInvalidCompositeApplicationDefinitionExceptionException e) {
      e.printStackTrace();
      String message=""String_Node_Str"";
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    CloudControllerServiceInvalidIaasProviderExceptionException e) {
      e.printStackTrace();
      String message=""String_Node_Str"";
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
  log.info(""String_Node_Str"" + configCompositeApplicationAlias);
  StratosAdminResponse stratosAdminResponse=new StratosAdminResponse();
  stratosAdminResponse.setMessage(""String_Node_Str"" + configCompositeApplicationAlias);
  return stratosAdminResponse;
}","static StratosAdminResponse unDeployApplication(String configCompositeApplicationAlias,ConfigurationContext ctxt,String userName,String tenantDomain) throws RestAPIException {
  log.info(""String_Node_Str"" + configCompositeApplicationAlias);
  CloudControllerServiceClient cloudControllerServiceClient=getCloudControllerServiceClient();
  if (cloudControllerServiceClient != null) {
    try {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + configCompositeApplicationAlias);
      }
      cloudControllerServiceClient.unDeployCompositeApplicationDefinition(configCompositeApplicationAlias);
    }
 catch (    RemoteException e) {
      e.printStackTrace();
      String message=""String_Node_Str"";
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    CloudControllerServiceInvalidCompositeApplicationDefinitionExceptionException e) {
      e.printStackTrace();
      String message=""String_Node_Str"";
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
catch (    CloudControllerServiceInvalidIaasProviderExceptionException e) {
      e.printStackTrace();
      String message=""String_Node_Str"";
      log.error(message,e);
      throw new RestAPIException(message,e);
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
  log.info(String.format(""String_Node_Str"",configCompositeApplicationAlias));
  StratosAdminResponse stratosAdminResponse=new StratosAdminResponse();
  stratosAdminResponse.setMessage(""String_Node_Str"" + configCompositeApplicationAlias);
  return stratosAdminResponse;
}",0.9941158253329204
116607,"@Override protected void onEvent(Event event){
  try {
    TopologyManager.acquireReadLock();
    ServiceRemovedEvent serviceRemovedEvent=(ServiceRemovedEvent)event;
    Service service=TopologyManager.getTopology().getService(serviceRemovedEvent.getServiceName());
    if (service != null) {
      for (      Cluster cluster : service.getClusters()) {
        LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
      }
    }
 else {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",serviceRemovedEvent.getServiceName()));
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    TopologyManager.releaseReadLock();
  }
}","@Override protected void onEvent(Event event){
  try {
    TopologyManager.acquireReadLock();
    ServiceRemovedEvent serviceRemovedEvent=(ServiceRemovedEvent)event;
    Service service=TopologyManager.getTopology().getService(serviceRemovedEvent.getServiceName());
    if (service != null) {
      for (      Cluster cluster : service.getClusters()) {
        for (        Member member : cluster.getMembers()) {
          removeMemberIpsFromMemberIpHostnameMap(member);
        }
        LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
      }
    }
 else {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",serviceRemovedEvent.getServiceName()));
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    TopologyManager.releaseReadLock();
  }
}",0.9179910998092816
116608,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    private boolean initialized;
    @Override protected void onEvent(    Event event){
      if (!initialized) {
        try {
          TopologyManager.acquireReadLock();
          for (          Service service : TopologyManager.getTopology().getServices()) {
            for (            Cluster cluster : service.getClusters()) {
              if (clusterHasActiveMembers(cluster)) {
                LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"");
                }
              }
            }
          }
          initialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
    private boolean clusterHasActiveMembers(    Cluster cluster){
      for (      Member member : cluster.getMembers()) {
        if (member.getStatus() == MemberStatus.Activated) {
          return true;
        }
      }
      return false;
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        if (LoadBalancerContext.getInstance().getClusterIdClusterMap().containsCluster(memberActivatedEvent.getClusterId())) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId()));
          }
          return;
        }
        Service service=TopologyManager.getTopology().getService(memberActivatedEvent.getServiceName());
        if (service != null) {
          Cluster cluster=service.getCluster(memberActivatedEvent.getClusterId());
          if (cluster != null) {
            LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
          }
 else {
            if (log.isErrorEnabled()) {
              log.error(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId()));
            }
          }
        }
 else {
          if (log.isErrorEnabled()) {
            log.error(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ClusterRemovedEvent clusterRemovedEvent=(ClusterRemovedEvent)event;
        Cluster cluster=LoadBalancerContext.getInstance().getClusterIdClusterMap().getCluster(clusterRemovedEvent.getClusterId());
        if (cluster != null) {
          LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ServiceRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ServiceRemovedEvent serviceRemovedEvent=(ServiceRemovedEvent)event;
        Service service=TopologyManager.getTopology().getService(serviceRemovedEvent.getServiceName());
        if (service != null) {
          for (          Cluster cluster : service.getClusters()) {
            LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
          }
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",serviceRemovedEvent.getServiceName()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    private boolean initialized;
    @Override protected void onEvent(    Event event){
      if (!initialized) {
        try {
          TopologyManager.acquireReadLock();
          for (          Service service : TopologyManager.getTopology().getServices()) {
            for (            Cluster cluster : service.getClusters()) {
              if (clusterHasActiveMembers(cluster)) {
                LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"");
                }
              }
              for (              Member member : cluster.getMembers()) {
                if (member.getStatus() == MemberStatus.Activated) {
                  addMemberIpsToMemberIpHostnameMap(cluster,member);
                }
              }
            }
          }
          initialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
    private boolean clusterHasActiveMembers(    Cluster cluster){
      for (      Member member : cluster.getMembers()) {
        if (member.getStatus() == MemberStatus.Activated) {
          return true;
        }
      }
      return false;
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        Service service=TopologyManager.getTopology().getService(memberActivatedEvent.getServiceName());
        if (service == null) {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName()));
          }
          return;
        }
        Cluster cluster=service.getCluster(memberActivatedEvent.getClusterId());
        if (cluster == null) {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId()));
          }
          return;
        }
        Member member=cluster.getMember(memberActivatedEvent.getMemberId());
        if (member == null) {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId(),memberActivatedEvent.getMemberId()));
          }
          return;
        }
        addMemberIpsToMemberIpHostnameMap(cluster,member);
        if (LoadBalancerContext.getInstance().getClusterIdClusterMap().containsCluster(member.getClusterId())) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",member.getServiceName(),member.getClusterId()));
          }
          return;
        }
        LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberMaintenanceListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberMaintenanceModeEvent memberMaintenanceModeEvent=(MemberMaintenanceModeEvent)event;
        Member member=findMember(memberMaintenanceModeEvent.getServiceName(),memberMaintenanceModeEvent.getClusterId(),memberMaintenanceModeEvent.getMemberId());
        if (member != null) {
          removeMemberIpsFromMemberIpHostnameMap(member);
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberSuspendedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberSuspendedEvent memberSuspendedEvent=(MemberSuspendedEvent)event;
        Member member=findMember(memberSuspendedEvent.getServiceName(),memberSuspendedEvent.getClusterId(),memberSuspendedEvent.getMemberId());
        if (member != null) {
          removeMemberIpsFromMemberIpHostnameMap(member);
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
        Member member=findMember(memberTerminatedEvent.getServiceName(),memberTerminatedEvent.getClusterId(),memberTerminatedEvent.getMemberId());
        if (member != null) {
          removeMemberIpsFromMemberIpHostnameMap(member);
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ClusterRemovedEvent clusterRemovedEvent=(ClusterRemovedEvent)event;
        Cluster cluster=LoadBalancerContext.getInstance().getClusterIdClusterMap().getCluster(clusterRemovedEvent.getClusterId());
        if (cluster != null) {
          for (          Member member : cluster.getMembers()) {
            removeMemberIpsFromMemberIpHostnameMap(member);
          }
          LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ServiceRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ServiceRemovedEvent serviceRemovedEvent=(ServiceRemovedEvent)event;
        Service service=TopologyManager.getTopology().getService(serviceRemovedEvent.getServiceName());
        if (service != null) {
          for (          Cluster cluster : service.getClusters()) {
            for (            Member member : cluster.getMembers()) {
              removeMemberIpsFromMemberIpHostnameMap(member);
            }
            LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
          }
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",serviceRemovedEvent.getServiceName()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
}",0.3475989890480202
116609,"private LoadBalancerConfiguration transform(Node loadBalancerNode){
  LoadBalancerConfiguration configuration=new LoadBalancerConfiguration();
  if (loadBalancerNode == null || (!loadBalancerNode.getName().equals(Constants.CONF_ELEMENT_LOADBALANCER))) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
  String defaultAlgorithm=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_ALGORITHM,defaultAlgorithm,""String_Node_Str"");
  configuration.setDefaultAlgorithmName(defaultAlgorithm);
  String failOver=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_FAILOVER);
  if (StringUtils.isNotBlank(failOver)) {
    configuration.setFailOverEnabled(Boolean.parseBoolean(failOver));
  }
  String sessionAffinity=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_AFFINITY);
  if (StringUtils.isNotBlank(sessionAffinity)) {
    configuration.setSessionAffinityEnabled(Boolean.parseBoolean(sessionAffinity));
  }
  String endpointTimeout=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_ENDPOINT_TIMEOUT);
  if (StringUtils.isNotBlank(endpointTimeout)) {
    configuration.setEndpointTimeout(Long.parseLong(endpointTimeout));
  }
 else {
    configuration.setEndpointTimeout(Constants.DEFAULT_ENDPOINT_TIMEOUT);
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",configuration.getEndpointTimeout()));
    }
  }
  String sessionTimeout=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_TIMEOUT);
  if (StringUtils.isNotBlank(sessionTimeout)) {
    configuration.setSessionTimeout(Long.parseLong(sessionTimeout));
  }
 else {
    configuration.setSessionTimeout(Constants.DEFAULT_SESSION_TIMEOUT);
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",configuration.getSessionTimeout()));
    }
  }
  String topologyEventListenerEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER,topologyEventListenerEnabled,Constants.CONF_ELEMENT_LOADBALANCER);
  configuration.setTopologyEventListenerEnabled(Boolean.parseBoolean(topologyEventListenerEnabled));
  if (configuration.isTopologyEventListenerEnabled()) {
    String topologyMemberIpType=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE,topologyMemberIpType,Constants.CONF_ELEMENT_LOADBALANCER);
    configuration.setTopologyMemberIpType(transformMemberIpType(topologyMemberIpType));
  }
  String statsPublisherEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_STATS_PUBLISHER);
  if (StringUtils.isNotBlank(statsPublisherEnabled)) {
    configuration.setCepStatsPublisherEnabled(Boolean.parseBoolean(statsPublisherEnabled));
  }
  String multiTenancyEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANCY);
  if (StringUtils.isNotBlank(multiTenancyEnabled)) {
    configuration.setMultiTenancyEnabled(Boolean.parseBoolean(multiTenancyEnabled));
  }
  if (configuration.isTopologyEventListenerEnabled() || configuration.isMultiTenancyEnabled()) {
    String mbIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_IP,mbIp,""String_Node_Str"");
    configuration.setMbIp(mbIp);
    String mbPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_PORT,mbPort,""String_Node_Str"");
    configuration.setMbPort(Integer.parseInt(mbPort));
  }
  if (configuration.isTopologyEventListenerEnabled()) {
    String serviceFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_SERVICE_FILTER);
    if (StringUtils.isNotBlank(serviceFilter)) {
      configuration.setTopologyServiceFilter(serviceFilter);
    }
    String clusterFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_CLUSTER_FILTER);
    if (StringUtils.isNotBlank(clusterFilter)) {
      configuration.setTopologyClusterFilter(clusterFilter);
    }
    String memberFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_FILTER);
    if (StringUtils.isNotBlank(memberFilter)) {
      configuration.setTopologyMemberFilter(memberFilter);
    }
  }
  if (configuration.isCepStatsPublisherEnabled()) {
    String cepIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_IP,cepIp,""String_Node_Str"");
    configuration.setCepIp(cepIp);
    String cepPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_PORT,cepPort,""String_Node_Str"");
    configuration.setCepPort(Integer.parseInt(cepPort));
    String networkPartitionId=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID,networkPartitionId,""String_Node_Str"");
    configuration.setNetworkPartitionId(networkPartitionId);
  }
  if (configuration.isMultiTenancyEnabled()) {
    String tenantIdentifierStr=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER,tenantIdentifierStr,""String_Node_Str"");
    if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_ID)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantId);
    }
 else     if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_DOMAIN)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantDomain);
    }
 else {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierStr));
    }
    String tenantIdentifierRegex=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX,tenantIdentifierRegex,""String_Node_Str"");
    try {
      Pattern.compile(tenantIdentifierRegex);
    }
 catch (    Exception e) {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierRegex),e);
    }
    configuration.setTenantIdentifierRegex(tenantIdentifierRegex);
  }
  Node algorithmsNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_ALGORITHMS);
  validateRequiredNode(loadBalancerNode,Constants.CONF_ELEMENT_ALGORITHMS);
  for (  Node algorithmNode : algorithmsNode.getChildNodes()) {
    String className=algorithmNode.getProperty(Constants.CONF_PROPERTY_CLASS_NAME);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CLASS_NAME,className,""String_Node_Str"",algorithmNode.getName());
    Algorithm algorithm=new Algorithm(algorithmNode.getName(),className);
    configuration.addAlgorithm(algorithm);
  }
  if (!configuration.isTopologyEventListenerEnabled()) {
    Node servicesNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_SERVICES);
    validateRequiredNode(servicesNode,Constants.CONF_ELEMENT_SERVICES);
    for (    Node serviceNode : servicesNode.getChildNodes()) {
      ServiceType serviceType=ServiceType.SingleTenant;
      String multiTenant=serviceNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANT);
      if (StringUtils.isNotBlank(multiTenant) && (Boolean.parseBoolean(multiTenant))) {
        serviceType=ServiceType.MultiTenant;
      }
      Service service=new Service(serviceNode.getName(),serviceType);
      Node clustersNode=serviceNode.findChildNodeByName(Constants.CONF_ELEMENT_CLUSTERS);
      for (      Node clusterNode : clustersNode.getChildNodes()) {
        String clusterId=clusterNode.getName();
        Cluster cluster=new Cluster(service.getServiceName(),clusterId,null,null);
        String tenantRange=clusterNode.getProperty(Constants.CONF_PROPERTY_TENANT_RANGE);
        if (StringUtils.isNotBlank(tenantRange)) {
          if (service.getServiceType() != ServiceType.MultiTenant) {
            throw new InvalidConfigurationException(String.format(""String_Node_Str"",Constants.CONF_PROPERTY_TENANT_RANGE,service.getServiceName(),cluster.getClusterId()));
          }
          cluster.setTenantRange(tenantRange);
        }
        String algorithm=clusterNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
        if (StringUtils.isNotBlank(algorithm)) {
          cluster.setLoadBalanceAlgorithmName(algorithm);
        }
        String hosts=clusterNode.getProperty(Constants.CONF_ELEMENT_HOSTS);
        validateRequiredPropertyInNode(Constants.CONF_ELEMENT_HOSTS,hosts,""String_Node_Str"",clusterNode.getName());
        String[] hostsArray=hosts.split(""String_Node_Str"");
        for (        String hostsName : hostsArray) {
          cluster.addHostName(hostsName.trim());
        }
        Node membersNode=clusterNode.findChildNodeByName(Constants.CONF_ELEMENT_MEMBERS);
        validateRequiredNode(membersNode,Constants.CONF_ELEMENT_MEMBERS,String.format(""String_Node_Str"",clusterId));
        for (        Node memberNode : membersNode.getChildNodes()) {
          String memberId=memberNode.getName();
          Member member=new Member(cluster.getServiceName(),cluster.getClusterId(),Constants.STATIC_NETWORK_PARTITION,Constants.STATIC_PARTITION,memberId);
          String ip=memberNode.getProperty(Constants.CONF_PROPERTY_IP);
          validateRequiredPropertyInNode(Constants.CONF_PROPERTY_IP,ip,String.format(""String_Node_Str"",memberId));
          member.setMemberIp(ip);
          Node portsNode=memberNode.findChildNodeByName(Constants.CONF_ELEMENT_PORTS);
          validateRequiredNode(portsNode,Constants.CONF_ELEMENT_PORTS,String.format(""String_Node_Str"",memberId));
          for (          Node portNode : portsNode.getChildNodes()) {
            String value=portNode.getProperty(Constants.CONF_PROPERTY_VALUE);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_VALUE,value,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            String proxy=portNode.getProperty(Constants.CONF_PROPERTY_PROXY);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_PROXY,proxy,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            Port port=new Port(portNode.getName(),Integer.valueOf(value),Integer.valueOf(proxy));
            member.addPort(port);
          }
          member.setStatus(MemberStatus.Activated);
          cluster.addMember(member);
        }
        service.addCluster(cluster);
        try {
          TopologyManager.acquireWriteLock();
          if (!TopologyManager.getTopology().serviceExists(service.getServiceName())) {
            TopologyManager.getTopology().addService(service);
          }
        }
  finally {
          TopologyManager.releaseWriteLock();
        }
        LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
      }
    }
  }
  return configuration;
}","private LoadBalancerConfiguration transform(Node loadBalancerNode){
  LoadBalancerConfiguration configuration=new LoadBalancerConfiguration();
  if (loadBalancerNode == null || (!loadBalancerNode.getName().equals(Constants.CONF_ELEMENT_LOADBALANCER))) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
  String defaultAlgorithm=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_ALGORITHM,defaultAlgorithm,""String_Node_Str"");
  configuration.setDefaultAlgorithmName(defaultAlgorithm);
  String failOver=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_FAILOVER);
  if (StringUtils.isNotBlank(failOver)) {
    configuration.setFailOverEnabled(Boolean.parseBoolean(failOver));
  }
  String sessionAffinity=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_AFFINITY);
  if (StringUtils.isNotBlank(sessionAffinity)) {
    configuration.setSessionAffinityEnabled(Boolean.parseBoolean(sessionAffinity));
  }
  String endpointTimeout=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_ENDPOINT_TIMEOUT);
  if (StringUtils.isNotBlank(endpointTimeout)) {
    configuration.setEndpointTimeout(Long.parseLong(endpointTimeout));
  }
 else {
    configuration.setEndpointTimeout(Constants.DEFAULT_ENDPOINT_TIMEOUT);
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",configuration.getEndpointTimeout()));
    }
  }
  String sessionTimeout=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_TIMEOUT);
  if (StringUtils.isNotBlank(sessionTimeout)) {
    configuration.setSessionTimeout(Long.parseLong(sessionTimeout));
  }
 else {
    configuration.setSessionTimeout(Constants.DEFAULT_SESSION_TIMEOUT);
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",configuration.getSessionTimeout()));
    }
  }
  String topologyEventListenerEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER,topologyEventListenerEnabled,Constants.CONF_ELEMENT_LOADBALANCER);
  configuration.setTopologyEventListenerEnabled(Boolean.parseBoolean(topologyEventListenerEnabled));
  if (configuration.isTopologyEventListenerEnabled()) {
    String topologyMemberIpType=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE,topologyMemberIpType,Constants.CONF_ELEMENT_LOADBALANCER);
    configuration.setTopologyMemberIpType(transformMemberIpType(topologyMemberIpType));
  }
  String statsPublisherEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_STATS_PUBLISHER);
  if (StringUtils.isNotBlank(statsPublisherEnabled)) {
    configuration.setCepStatsPublisherEnabled(Boolean.parseBoolean(statsPublisherEnabled));
  }
  String multiTenancyEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANCY);
  if (StringUtils.isNotBlank(multiTenancyEnabled)) {
    configuration.setMultiTenancyEnabled(Boolean.parseBoolean(multiTenancyEnabled));
  }
  if (configuration.isTopologyEventListenerEnabled() || configuration.isMultiTenancyEnabled()) {
    String mbIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_IP,mbIp,""String_Node_Str"");
    configuration.setMbIp(mbIp);
    String mbPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_PORT,mbPort,""String_Node_Str"");
    configuration.setMbPort(Integer.parseInt(mbPort));
  }
  if (configuration.isTopologyEventListenerEnabled()) {
    String serviceFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_SERVICE_FILTER);
    if (StringUtils.isNotBlank(serviceFilter)) {
      configuration.setTopologyServiceFilter(serviceFilter);
    }
    String clusterFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_CLUSTER_FILTER);
    if (StringUtils.isNotBlank(clusterFilter)) {
      configuration.setTopologyClusterFilter(clusterFilter);
    }
    String memberFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_FILTER);
    if (StringUtils.isNotBlank(memberFilter)) {
      configuration.setTopologyMemberFilter(memberFilter);
    }
  }
  if (configuration.isCepStatsPublisherEnabled()) {
    String cepIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_IP,cepIp,""String_Node_Str"");
    configuration.setCepIp(cepIp);
    String cepPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_PORT,cepPort,""String_Node_Str"");
    configuration.setCepPort(Integer.parseInt(cepPort));
    String networkPartitionId=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID,networkPartitionId,""String_Node_Str"");
    configuration.setNetworkPartitionId(networkPartitionId);
  }
  if (configuration.isMultiTenancyEnabled()) {
    String tenantIdentifierStr=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER,tenantIdentifierStr,""String_Node_Str"");
    if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_ID)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantId);
    }
 else     if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_DOMAIN)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantDomain);
    }
 else {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierStr));
    }
    String tenantIdentifierRegex=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX,tenantIdentifierRegex,""String_Node_Str"");
    try {
      Pattern.compile(tenantIdentifierRegex);
    }
 catch (    Exception e) {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierRegex),e);
    }
    configuration.setTenantIdentifierRegex(tenantIdentifierRegex);
  }
  Node algorithmsNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_ALGORITHMS);
  validateRequiredNode(loadBalancerNode,Constants.CONF_ELEMENT_ALGORITHMS);
  for (  Node algorithmNode : algorithmsNode.getChildNodes()) {
    String className=algorithmNode.getProperty(Constants.CONF_PROPERTY_CLASS_NAME);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CLASS_NAME,className,""String_Node_Str"",algorithmNode.getName());
    Algorithm algorithm=new Algorithm(algorithmNode.getName(),className);
    configuration.addAlgorithm(algorithm);
  }
  String rewriteLocationHeader=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_REWRITE_LOCATION_HEADER);
  if (StringUtils.isNotEmpty(rewriteLocationHeader)) {
    configuration.setRewriteLocationHeader(Boolean.parseBoolean(topologyEventListenerEnabled));
  }
  if (!configuration.isTopologyEventListenerEnabled()) {
    Node servicesNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_SERVICES);
    validateRequiredNode(servicesNode,Constants.CONF_ELEMENT_SERVICES);
    for (    Node serviceNode : servicesNode.getChildNodes()) {
      ServiceType serviceType=ServiceType.SingleTenant;
      String multiTenant=serviceNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANT);
      if (StringUtils.isNotBlank(multiTenant) && (Boolean.parseBoolean(multiTenant))) {
        serviceType=ServiceType.MultiTenant;
      }
      Service service=new Service(serviceNode.getName(),serviceType);
      Node clustersNode=serviceNode.findChildNodeByName(Constants.CONF_ELEMENT_CLUSTERS);
      for (      Node clusterNode : clustersNode.getChildNodes()) {
        String clusterId=clusterNode.getName();
        Cluster cluster=new Cluster(service.getServiceName(),clusterId,null,null);
        String tenantRange=clusterNode.getProperty(Constants.CONF_PROPERTY_TENANT_RANGE);
        if (StringUtils.isNotBlank(tenantRange)) {
          if (service.getServiceType() != ServiceType.MultiTenant) {
            throw new InvalidConfigurationException(String.format(""String_Node_Str"",Constants.CONF_PROPERTY_TENANT_RANGE,service.getServiceName(),cluster.getClusterId()));
          }
          cluster.setTenantRange(tenantRange);
        }
        String algorithm=clusterNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
        if (StringUtils.isNotBlank(algorithm)) {
          cluster.setLoadBalanceAlgorithmName(algorithm);
        }
        String hosts=clusterNode.getProperty(Constants.CONF_ELEMENT_HOSTS);
        validateRequiredPropertyInNode(Constants.CONF_ELEMENT_HOSTS,hosts,""String_Node_Str"",clusterNode.getName());
        String[] hostsArray=hosts.split(""String_Node_Str"");
        for (        String hostsName : hostsArray) {
          cluster.addHostName(hostsName.trim());
        }
        Node membersNode=clusterNode.findChildNodeByName(Constants.CONF_ELEMENT_MEMBERS);
        validateRequiredNode(membersNode,Constants.CONF_ELEMENT_MEMBERS,String.format(""String_Node_Str"",clusterId));
        for (        Node memberNode : membersNode.getChildNodes()) {
          String memberId=memberNode.getName();
          Member member=new Member(cluster.getServiceName(),cluster.getClusterId(),Constants.STATIC_NETWORK_PARTITION,Constants.STATIC_PARTITION,memberId);
          String ip=memberNode.getProperty(Constants.CONF_PROPERTY_IP);
          validateRequiredPropertyInNode(Constants.CONF_PROPERTY_IP,ip,String.format(""String_Node_Str"",memberId));
          member.setMemberIp(ip);
          Node portsNode=memberNode.findChildNodeByName(Constants.CONF_ELEMENT_PORTS);
          validateRequiredNode(portsNode,Constants.CONF_ELEMENT_PORTS,String.format(""String_Node_Str"",memberId));
          for (          Node portNode : portsNode.getChildNodes()) {
            String value=portNode.getProperty(Constants.CONF_PROPERTY_VALUE);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_VALUE,value,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            String proxy=portNode.getProperty(Constants.CONF_PROPERTY_PROXY);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_PROXY,proxy,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            Port port=new Port(portNode.getName(),Integer.valueOf(value),Integer.valueOf(proxy));
            member.addPort(port);
          }
          member.setStatus(MemberStatus.Activated);
          cluster.addMember(member);
        }
        service.addCluster(cluster);
        try {
          TopologyManager.acquireWriteLock();
          if (!TopologyManager.getTopology().serviceExists(service.getServiceName())) {
            TopologyManager.getTopology().addService(service);
          }
        }
  finally {
          TopologyManager.releaseWriteLock();
        }
        LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
      }
    }
  }
  return configuration;
}",0.9880754173603924
116610,"private LoadBalancerContext(){
  tenantIdSynapseEnvironmentServiceMap=new TenantIdSynapseEnvironmentServiceMap();
  serviceNameServiceContextMap=new ServiceNameServiceContextMap();
  clusterIdClusterContextMap=new ClusterIdClusterContextMap();
  clusterIdClusterMap=new ClusterIdClusterMap();
  hostNameClusterMap=new HostNameClusterMap();
  hostNameAppContextMap=new HostNameAppContextMap();
  multiTenantClusterMap=new MultiTenantClusterMap();
}","private LoadBalancerContext(){
  tenantIdSynapseEnvironmentServiceMap=new TenantIdSynapseEnvironmentServiceMap();
  serviceNameServiceContextMap=new ServiceNameServiceContextMap();
  clusterIdClusterContextMap=new ClusterIdClusterContextMap();
  clusterIdClusterMap=new ClusterIdClusterMap();
  hostNameClusterMap=new HostNameClusterMap();
  hostNameAppContextMap=new HostNameAppContextMap();
  multiTenantClusterMap=new MultiTenantClusterMap();
  memberIpHostnameMap=new MemberIpHostnameMap();
}",0.9480381760339344
116611,"private void addEventListeners(){
  tenantEventReceiver.addEventListener(new CompleteTenantEventListener(){
    @Override protected void onEvent(    Event event){
      CompleteTenantEvent completeTenantEvent=(CompleteTenantEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      for (      Tenant tenant : completeTenantEvent.getTenants()) {
        for (        Subscription subscription : tenant.getSubscriptions()) {
          if (isMultiTenantService(subscription.getServiceName())) {
            LoadBalancerContextUtil.addClustersAgainstHostNamesAndTenantIds(subscription.getServiceName(),tenant.getTenantId(),subscription.getClusterIds());
          }
          LoadBalancerContextUtil.addClustersAgainstDomains(subscription.getServiceName(),subscription.getClusterIds(),subscription.getDomains());
        }
      }
    }
  }
);
  tenantEventReceiver.addEventListener(new TenantSubscribedEventListener(){
    @Override protected void onEvent(    Event event){
      TenantSubscribedEvent tenantSubscribedEvent=(TenantSubscribedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",tenantSubscribedEvent.getTenantId(),tenantSubscribedEvent.getServiceName(),tenantSubscribedEvent.getClusterIds()));
      }
      if (isMultiTenantService(tenantSubscribedEvent.getServiceName())) {
        LoadBalancerContextUtil.addClustersAgainstHostNamesAndTenantIds(tenantSubscribedEvent.getServiceName(),tenantSubscribedEvent.getTenantId(),tenantSubscribedEvent.getClusterIds());
      }
      LoadBalancerContextUtil.addClustersAgainstDomains(tenantSubscribedEvent.getServiceName(),tenantSubscribedEvent.getClusterIds(),tenantSubscribedEvent.getDomains());
    }
  }
);
  tenantEventReceiver.addEventListener(new TenantUnSubscribedEventListener(){
    @Override protected void onEvent(    Event event){
      TenantUnSubscribedEvent tenantUnSubscribedEvent=(TenantUnSubscribedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",tenantUnSubscribedEvent.getTenantId(),tenantUnSubscribedEvent.getServiceName(),tenantUnSubscribedEvent.getClusterIds()));
      }
      if (isMultiTenantService(tenantUnSubscribedEvent.getServiceName())) {
        LoadBalancerContextUtil.removeClustersAgainstHostNamesAndTenantIds(tenantUnSubscribedEvent.getServiceName(),tenantUnSubscribedEvent.getTenantId(),tenantUnSubscribedEvent.getClusterIds());
      }
      LoadBalancerContextUtil.removeClustersAgainstAllDomains(tenantUnSubscribedEvent.getServiceName(),tenantUnSubscribedEvent.getTenantId(),tenantUnSubscribedEvent.getClusterIds());
    }
  }
);
  tenantEventReceiver.addEventListener(new SubscriptionDomainsAddedEventListener(){
    @Override protected void onEvent(    Event event){
      SubscriptionDomainsAddedEvent subscriptionDomainsAddedEvent=(SubscriptionDomainsAddedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",subscriptionDomainsAddedEvent.getTenantId(),subscriptionDomainsAddedEvent.getServiceName(),subscriptionDomainsAddedEvent.getClusterIds(),subscriptionDomainsAddedEvent.getDomains()));
      }
      LoadBalancerContextUtil.addClustersAgainstDomains(subscriptionDomainsAddedEvent.getServiceName(),subscriptionDomainsAddedEvent.getClusterIds(),subscriptionDomainsAddedEvent.getDomains());
    }
  }
);
  tenantEventReceiver.addEventListener(new SubscriptionDomainsRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      SubscriptionDomainsRemovedEvent subscriptionDomainsRemovedEvent=(SubscriptionDomainsRemovedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",subscriptionDomainsRemovedEvent.getTenantId(),subscriptionDomainsRemovedEvent.getServiceName(),subscriptionDomainsRemovedEvent.getClusterIds(),subscriptionDomainsRemovedEvent.getDomains()));
      }
      LoadBalancerContextUtil.removeClustersAgainstDomains(subscriptionDomainsRemovedEvent.getServiceName(),subscriptionDomainsRemovedEvent.getClusterIds(),subscriptionDomainsRemovedEvent.getDomains());
    }
  }
);
}","private void addEventListeners(){
  tenantEventReceiver.addEventListener(new CompleteTenantEventListener(){
    private boolean initialized;
    @Override protected void onEvent(    Event event){
      if (!initialized) {
        CompleteTenantEvent completeTenantEvent=(CompleteTenantEvent)event;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
        }
        for (        Tenant tenant : completeTenantEvent.getTenants()) {
          for (          Subscription subscription : tenant.getSubscriptions()) {
            if (isMultiTenantService(subscription.getServiceName())) {
              LoadBalancerContextUtil.addClustersAgainstHostNamesAndTenantIds(subscription.getServiceName(),tenant.getTenantId(),subscription.getClusterIds());
            }
            LoadBalancerContextUtil.addClustersAgainstDomains(subscription.getServiceName(),subscription.getClusterIds(),subscription.getDomains());
          }
        }
        initialized=true;
      }
    }
  }
);
  tenantEventReceiver.addEventListener(new TenantSubscribedEventListener(){
    @Override protected void onEvent(    Event event){
      TenantSubscribedEvent tenantSubscribedEvent=(TenantSubscribedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",tenantSubscribedEvent.getTenantId(),tenantSubscribedEvent.getServiceName(),tenantSubscribedEvent.getClusterIds()));
      }
      if (isMultiTenantService(tenantSubscribedEvent.getServiceName())) {
        LoadBalancerContextUtil.addClustersAgainstHostNamesAndTenantIds(tenantSubscribedEvent.getServiceName(),tenantSubscribedEvent.getTenantId(),tenantSubscribedEvent.getClusterIds());
      }
      LoadBalancerContextUtil.addClustersAgainstDomains(tenantSubscribedEvent.getServiceName(),tenantSubscribedEvent.getClusterIds(),tenantSubscribedEvent.getDomains());
    }
  }
);
  tenantEventReceiver.addEventListener(new TenantUnSubscribedEventListener(){
    @Override protected void onEvent(    Event event){
      TenantUnSubscribedEvent tenantUnSubscribedEvent=(TenantUnSubscribedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",tenantUnSubscribedEvent.getTenantId(),tenantUnSubscribedEvent.getServiceName(),tenantUnSubscribedEvent.getClusterIds()));
      }
      if (isMultiTenantService(tenantUnSubscribedEvent.getServiceName())) {
        LoadBalancerContextUtil.removeClustersAgainstHostNamesAndTenantIds(tenantUnSubscribedEvent.getServiceName(),tenantUnSubscribedEvent.getTenantId(),tenantUnSubscribedEvent.getClusterIds());
      }
      LoadBalancerContextUtil.removeClustersAgainstAllDomains(tenantUnSubscribedEvent.getServiceName(),tenantUnSubscribedEvent.getTenantId(),tenantUnSubscribedEvent.getClusterIds());
    }
  }
);
  tenantEventReceiver.addEventListener(new SubscriptionDomainsAddedEventListener(){
    @Override protected void onEvent(    Event event){
      SubscriptionDomainsAddedEvent subscriptionDomainsAddedEvent=(SubscriptionDomainsAddedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",subscriptionDomainsAddedEvent.getTenantId(),subscriptionDomainsAddedEvent.getServiceName(),subscriptionDomainsAddedEvent.getClusterIds(),subscriptionDomainsAddedEvent.getDomains()));
      }
      LoadBalancerContextUtil.addClustersAgainstDomains(subscriptionDomainsAddedEvent.getServiceName(),subscriptionDomainsAddedEvent.getClusterIds(),subscriptionDomainsAddedEvent.getDomains());
    }
  }
);
  tenantEventReceiver.addEventListener(new SubscriptionDomainsRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      SubscriptionDomainsRemovedEvent subscriptionDomainsRemovedEvent=(SubscriptionDomainsRemovedEvent)event;
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",subscriptionDomainsRemovedEvent.getTenantId(),subscriptionDomainsRemovedEvent.getServiceName(),subscriptionDomainsRemovedEvent.getClusterIds(),subscriptionDomainsRemovedEvent.getDomains()));
      }
      LoadBalancerContextUtil.removeClustersAgainstDomains(subscriptionDomainsRemovedEvent.getServiceName(),subscriptionDomainsRemovedEvent.getClusterIds(),subscriptionDomainsRemovedEvent.getDomains());
    }
  }
);
}",0.9857227138643068
116612,"private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            if (clusterHasActiveMembers(cluster)) {
              LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
            }
 else {
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
    private boolean clusterHasActiveMembers(    Cluster cluster){
      for (      Member member : cluster.getMembers()) {
        if (member.getStatus() == MemberStatus.Activated) {
          return true;
        }
      }
      return false;
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        if (LoadBalancerContext.getInstance().getClusterIdClusterMap().containsCluster(memberActivatedEvent.getClusterId())) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId()));
          }
          return;
        }
        Service service=TopologyManager.getTopology().getService(memberActivatedEvent.getServiceName());
        if (service != null) {
          Cluster cluster=service.getCluster(memberActivatedEvent.getClusterId());
          if (cluster != null) {
            LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
          }
 else {
            if (log.isErrorEnabled()) {
              log.error(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId()));
            }
          }
        }
 else {
          if (log.isErrorEnabled()) {
            log.error(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ClusterRemovedEvent clusterRemovedEvent=(ClusterRemovedEvent)event;
        Cluster cluster=LoadBalancerContext.getInstance().getClusterIdClusterMap().getCluster(clusterRemovedEvent.getClusterId());
        if (cluster != null) {
          LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ServiceRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ServiceRemovedEvent serviceRemovedEvent=(ServiceRemovedEvent)event;
        Service service=TopologyManager.getTopology().getService(serviceRemovedEvent.getServiceName());
        if (service != null) {
          for (          Cluster cluster : service.getClusters()) {
            LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
          }
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",serviceRemovedEvent.getServiceName()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
}","private void addEventListeners(){
  topologyEventReceiver.addEventListener(new CompleteTopologyEventListener(){
    private boolean initialized;
    @Override protected void onEvent(    Event event){
      if (!initialized) {
        try {
          TopologyManager.acquireReadLock();
          for (          Service service : TopologyManager.getTopology().getServices()) {
            for (            Cluster cluster : service.getClusters()) {
              if (clusterHasActiveMembers(cluster)) {
                LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
              }
 else {
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"");
                }
              }
            }
          }
          initialized=true;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
 finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
    private boolean clusterHasActiveMembers(    Cluster cluster){
      for (      Member member : cluster.getMembers()) {
        if (member.getStatus() == MemberStatus.Activated) {
          return true;
        }
      }
      return false;
    }
  }
);
  topologyEventReceiver.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
        if (LoadBalancerContext.getInstance().getClusterIdClusterMap().containsCluster(memberActivatedEvent.getClusterId())) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId()));
          }
          return;
        }
        Service service=TopologyManager.getTopology().getService(memberActivatedEvent.getServiceName());
        if (service != null) {
          Cluster cluster=service.getCluster(memberActivatedEvent.getClusterId());
          if (cluster != null) {
            LoadBalancerContextUtil.addClusterAgainstHostNames(cluster);
          }
 else {
            if (log.isErrorEnabled()) {
              log.error(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName(),memberActivatedEvent.getClusterId()));
            }
          }
        }
 else {
          if (log.isErrorEnabled()) {
            log.error(String.format(""String_Node_Str"",memberActivatedEvent.getServiceName()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ClusterRemovedEvent clusterRemovedEvent=(ClusterRemovedEvent)event;
        Cluster cluster=LoadBalancerContext.getInstance().getClusterIdClusterMap().getCluster(clusterRemovedEvent.getClusterId());
        if (cluster != null) {
          LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",clusterRemovedEvent.getServiceName(),clusterRemovedEvent.getClusterId()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  topologyEventReceiver.addEventListener(new ServiceRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        ServiceRemovedEvent serviceRemovedEvent=(ServiceRemovedEvent)event;
        Service service=TopologyManager.getTopology().getService(serviceRemovedEvent.getServiceName());
        if (service != null) {
          for (          Cluster cluster : service.getClusters()) {
            LoadBalancerContextUtil.removeClusterAgainstHostNames(cluster.getClusterId());
          }
        }
 else {
          if (log.isWarnEnabled()) {
            log.warn(String.format(""String_Node_Str"",serviceRemovedEvent.getServiceName()));
          }
        }
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"",e);
      }
 finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
}",0.9844300488691896
116613,"public MemberContext spawnAnInstance(Partition partition,String clusterId,String lbClusterId,String networkPartitionId) throws SpawningException {
  try {
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",clusterId,partition.getId(),lbClusterId,networkPartitionId));
    }
    MemberContext member=new MemberContext();
    member.setClusterId(clusterId);
    member.setPartition(partition);
    member.setLbClusterId(lbClusterId);
    member.setInitTime(System.currentTimeMillis());
    member.setNetworkPartitionId(networkPartitionId);
    long startTime=System.currentTimeMillis();
    MemberContext memberContext=stub.startInstance(member);
    if (log.isDebugEnabled()) {
      long endTime=System.currentTimeMillis();
      log.debug(String.format(""String_Node_Str"",(endTime - startTime)));
    }
    return memberContext;
  }
 catch (  CloudControllerServiceIllegalArgumentExceptionException e) {
    log.error(e.getMessage(),e);
    throw new SpawningException(e.getMessage(),e);
  }
catch (  CloudControllerServiceUnregisteredCartridgeExceptionException e) {
    String message=e.getFaultMessage().getUnregisteredCartridgeException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
catch (  RemoteException e) {
    log.error(e.getMessage(),e);
    throw new SpawningException(e.getMessage(),e);
  }
catch (  CloudControllerServiceIllegalStateExceptionException e) {
    log.error(e.getMessage(),e);
    throw new SpawningException(e.getMessage(),e);
  }
catch (  CloudControllerServiceInvalidIaasProviderExceptionException e) {
    String message=e.getFaultMessage().getInvalidIaasProviderException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
}","public MemberContext spawnAnInstance(Partition partition,String clusterId,String lbClusterId,String networkPartitionId) throws SpawningException {
  try {
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",clusterId,partition.getId(),lbClusterId,networkPartitionId));
    }
    MemberContext member=new MemberContext();
    member.setClusterId(clusterId);
    member.setPartition(partition);
    member.setLbClusterId(lbClusterId);
    member.setInitTime(System.currentTimeMillis());
    member.setNetworkPartitionId(networkPartitionId);
    long startTime=System.currentTimeMillis();
    MemberContext memberContext=stub.startInstance(member);
    if (log.isDebugEnabled()) {
      long endTime=System.currentTimeMillis();
      log.debug(String.format(""String_Node_Str"",(endTime - startTime)));
    }
    return memberContext;
  }
 catch (  CloudControllerServiceIllegalArgumentExceptionException e) {
    log.error(e.getMessage(),e);
    throw new SpawningException(e.getMessage(),e);
  }
catch (  CloudControllerServiceUnregisteredCartridgeExceptionException e) {
    String message=e.getFaultMessage().getUnregisteredCartridgeException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
catch (  RemoteException e) {
    log.error(e.getMessage(),e);
    throw new SpawningException(e.getMessage(),e);
  }
catch (  CloudControllerServiceInvalidIaasProviderExceptionException e) {
    String message=e.getFaultMessage().getInvalidIaasProviderException().getMessage();
    log.error(message,e);
    throw new SpawningException(message,e);
  }
}",0.8836934004143238
116614,"@Override public CartridgeSubscriptionInfo registerSubscription(Properties properties) throws ADCException, UnregisteredCartridgeException {
  CartridgeInfo cartridgeInfo=getCartridgeInfo();
  if (!cartridgeInfo.isMultiTenantSpecified()) {
    getLoadBalancerCategory().register(cartridgeInfo,getCluster(),getPayloadData(),getAutoscalingPolicyName(),getDeploymentPolicyName(),properties);
  }
  return ApplicationManagementUtil.createCartridgeSubscription(getCartridgeInfo(),getAutoscalingPolicyName(),getType(),getAlias(),getSubscriber().getTenantId(),getSubscriber().getTenantDomain(),getRepository(),getCluster().getHostName(),getCluster().getClusterDomain(),getCluster().getClusterSubDomain(),getCluster().getMgtClusterDomain(),getCluster().getMgtClusterSubDomain(),null,getSubscriptionStatus(),getSubscriptionKey());
}","@Override public CartridgeSubscriptionInfo registerSubscription(Properties properties) throws ADCException, UnregisteredCartridgeException {
  if (!loadBalancerCategory.isLoadBalancedServiceMultiTenant()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    getLoadBalancerCategory().register(getCartridgeInfo(),getCluster(),getPayloadData(),getAutoscalingPolicyName(),getDeploymentPolicyName(),properties);
  }
  return ApplicationManagementUtil.createCartridgeSubscription(getCartridgeInfo(),getAutoscalingPolicyName(),getType(),getAlias(),getSubscriber().getTenantId(),getSubscriber().getTenantDomain(),getRepository(),getCluster().getHostName(),getCluster().getClusterDomain(),getCluster().getClusterSubDomain(),getCluster().getMgtClusterDomain(),getCluster().getMgtClusterSubDomain(),null,getSubscriptionStatus(),getSubscriptionKey());
}",0.806146572104019
116615,"public void register(CartridgeInfo cartridgeInfo,Cluster cluster,PayloadData payloadData,String autoscalePolicyName,String deploymentPolicyName,Properties properties) throws ADCException, UnregisteredCartridgeException {
  log.info(""String_Node_Str"" + payloadData.getCompletePayloadData().toString());
  ApplicationManagementUtil.registerService(cartridgeInfo.getType(),cluster.getClusterDomain(),cluster.getClusterSubDomain(),payloadData.getCompletePayloadData(),payloadData.getBasicPayloadData().getTenantRange(),cluster.getHostName(),autoscalePolicyName,deploymentPolicyName,properties);
}","public void register(CartridgeInfo cartridgeInfo,Cluster cluster,PayloadData payloadData,String autoscalePolicyName,String deploymentPolicyName,Properties properties) throws ADCException, UnregisteredCartridgeException {
  if (payloadData != null) {
    log.info(""String_Node_Str"" + payloadData.getCompletePayloadData().toString());
  }
 else {
    log.info(""String_Node_Str"");
  }
  ApplicationManagementUtil.registerService(cartridgeInfo.getType(),cluster.getClusterDomain(),cluster.getClusterSubDomain(),payloadData.getCompletePayloadData(),payloadData.getBasicPayloadData().getTenantRange(),cluster.getHostName(),autoscalePolicyName,deploymentPolicyName,properties);
}",0.9367088607594936
116616,"private void deployLBCluster(String loadBalancedService,LBDataContext lbDataCtxt,String tenantRange) throws ADCException, UnregisteredCartridgeException {
  if (lbDataCtxt.getLbCategory() == null || lbDataCtxt.getLbCategory().equals(Constants.NO_LOAD_BALANCER)) {
    return;
  }
  LoadBalancerCategory loadBalancerCategory=null;
  if (lbDataCtxt.getLbCategory().equals(Constants.EXISTING_LOAD_BALANCERS)) {
    loadBalancerCategory=new ExistingLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.DEFAULT_LOAD_BALANCER)) {
    loadBalancerCategory=new DefaultLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.SERVICE_AWARE_LOAD_BALANCER)) {
    loadBalancerCategory=new ServiceLevelLoadBalancerCategory();
  }
  if (loadBalancerCategory == null) {
    throw new ADCException(""String_Node_Str"" + lbDataCtxt.getLbCategory() + ""String_Node_Str"");
  }
  loadBalancerCategory.setLoadBalancedServiceType(loadBalancedService);
  Service lbService=new MultiTenantLBService(lbDataCtxt.getLbCartridgeInfo().getType(),lbDataCtxt.getAutoscalePolicy(),lbDataCtxt.getDeploymentPolicy(),-1234,lbDataCtxt.getLbCartridgeInfo(),tenantRange,loadBalancerCategory);
  Properties lbProperties=null;
  if (lbDataCtxt.getLbProperperties() != null && !lbDataCtxt.getLbProperperties().isEmpty()) {
    lbProperties=new Properties();
    lbProperties.setProperties(lbDataCtxt.getLbProperperties().toArray(new Property[0]));
  }
  lbService.deploy(lbProperties);
  persist(lbService);
}","private void deployLBCluster(String loadBalancedService,LBDataContext lbDataCtxt,String tenantRange) throws ADCException, UnregisteredCartridgeException {
  if (lbDataCtxt.getLbCategory() == null || lbDataCtxt.getLbCategory().equals(Constants.NO_LOAD_BALANCER)) {
    return;
  }
  LoadBalancerCategory loadBalancerCategory=null;
  if (lbDataCtxt.getLbCategory().equals(Constants.EXISTING_LOAD_BALANCERS)) {
    loadBalancerCategory=new ExistingLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.DEFAULT_LOAD_BALANCER)) {
    loadBalancerCategory=new DefaultLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.SERVICE_AWARE_LOAD_BALANCER)) {
    loadBalancerCategory=new ServiceLevelLoadBalancerCategory();
  }
  if (loadBalancerCategory == null) {
    throw new ADCException(""String_Node_Str"" + lbDataCtxt.getLbCategory() + ""String_Node_Str"");
  }
  loadBalancerCategory.setLoadBalancedServiceType(loadBalancedService);
  loadBalancerCategory.setLoadBalancedServiceMultiTenant(true);
  log.info(""String_Node_Str"" + lbDataCtxt.getDeploymentPolicy());
  loadBalancerCategory.setDeploymentPolicyName(lbDataCtxt.getDeploymentPolicy());
  Service lbService=new MultiTenantLBService(lbDataCtxt.getLbCartridgeInfo().getType(),lbDataCtxt.getAutoscalePolicy(),lbDataCtxt.getDeploymentPolicy(),-1234,lbDataCtxt.getLbCartridgeInfo(),tenantRange,loadBalancerCategory);
  Properties lbProperties=null;
  if (lbDataCtxt.getLbProperperties() != null && !lbDataCtxt.getLbProperperties().isEmpty()) {
    lbProperties=new Properties();
    lbProperties.setProperties(lbDataCtxt.getLbProperperties().toArray(new Property[0]));
  }
  lbService.deploy(lbProperties);
  persist(lbService);
}",0.9349693251533744
116617,"public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  try {
    clusterId=AutoscalerServiceClient.getServiceClient().getDefaultLBClusterId(getDeploymentPolicyName());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new ADCException(e);
  }
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str""+ alias);
    }
    defaultLBExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName() + ""String_Node_Str""+ alias);
      }
    }
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
  }
  return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
}","public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId=null;
  try {
    clusterId=AutoscalerServiceClient.getServiceClient().getDefaultLBClusterId(getDeploymentPolicyName());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new ADCException(e);
  }
  if (clusterId != null) {
    cluster.setClusterDomain(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str""+ alias);
    }
    defaultLBExists=true;
    ClusterContext clusterContext;
    try {
      clusterContext=CloudControllerServiceClient.getServiceClient().getClusterContext(clusterId);
    }
 catch (    RemoteException e) {
      log.error(""String_Node_Str"" + e.getMessage());
      throw new ADCException(e);
    }
    if (clusterContext != null) {
      cluster.setHostName(clusterContext.getHostName());
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterContext.getHostName() + ""String_Node_Str""+ alias);
      }
    }
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
    return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
  }
}",0.9923815833057305
116618,"public void register(CartridgeInfo cartridgeInfo,Cluster cluster,PayloadData payloadData,String autoscalePolicyName,String deploymentPolicyName,Properties properties) throws ADCException, UnregisteredCartridgeException {
  if (!isDefaultLBExists()) {
    log.info(""String_Node_Str"" + payloadData.getCompletePayloadData().toString());
    super.register(cartridgeInfo,cluster,payloadData,autoscalePolicyName,deploymentPolicyName,properties);
  }
 else {
    log.info(""String_Node_Str"");
  }
}","public void register(CartridgeInfo cartridgeInfo,Cluster cluster,PayloadData payloadData,String autoscalePolicyName,String deploymentPolicyName,Properties properties) throws ADCException, UnregisteredCartridgeException {
  log.info(""String_Node_Str"" + payloadData + ""String_Node_Str"");
  if (!isDefaultLBExists()) {
    if (payloadData != null) {
      log.info(""String_Node_Str"" + payloadData.getCompletePayloadData().toString());
    }
    super.register(cartridgeInfo,cluster,payloadData,autoscalePolicyName,deploymentPolicyName,properties);
  }
 else {
    log.info(""String_Node_Str"");
  }
}",0.9042357274401474
116619,"public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId;
  if (isLoadBalancedServiceMultiTenant) {
    Service deployedLBService;
    try {
      deployedLBService=new DataInsertionAndRetrievalManager().getService(cartridgeInfo.getType());
    }
 catch (    PersistenceManagerException e) {
      String errorMsg=""String_Node_Str"";
      log.error(errorMsg,e);
      throw new ADCException(errorMsg,e);
    }
    if (deployedLBService == null) {
      String errorMsg=""String_Node_Str"" + cartridgeInfo.getType();
      log.error(errorMsg);
      throw new ADCException(errorMsg);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + deployedLBService.getClusterId());
      log.debug(""String_Node_Str"" + deployedLBService.getHostName());
    }
    cluster.setClusterDomain(deployedLBService.getClusterId());
    cluster.setHostName(deployedLBService.getHostName());
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
  }
  return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
}","public PayloadData create(String alias,Cluster cluster,Subscriber subscriber,Repository repository,CartridgeInfo cartridgeInfo,String subscriptionKey,Map<String,String> customPayloadEntries) throws ADCException, AlreadySubscribedException {
  String clusterId;
  if (isLoadBalancedServiceMultiTenant) {
    Service deployedLBService;
    try {
      deployedLBService=new DataInsertionAndRetrievalManager().getService(cartridgeInfo.getType());
    }
 catch (    PersistenceManagerException e) {
      String errorMsg=""String_Node_Str"";
      log.error(errorMsg,e);
      throw new ADCException(errorMsg,e);
    }
    if (deployedLBService == null) {
      String errorMsg=""String_Node_Str"" + cartridgeInfo.getType();
      log.error(errorMsg);
      throw new ADCException(errorMsg);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + deployedLBService.getClusterId());
      log.debug(""String_Node_Str"" + deployedLBService.getHostName());
    }
    cluster.setClusterDomain(deployedLBService.getClusterId());
    cluster.setHostName(deployedLBService.getHostName());
    return null;
  }
 else {
    cluster.setClusterDomain(generateClusterId(alias,cartridgeInfo.getType()));
    cluster.setHostName(generateHostName(alias,cartridgeInfo.getHostName()));
    return createPayload(cartridgeInfo,subscriptionKey,subscriber,cluster,repository,alias,customPayloadEntries);
  }
}",0.9917117117117116
116620,"private CartridgeSubscription subscribe(SubscriptionData subscriptionData,CartridgeInfo cartridgeInfo,String lbClusterId) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  String subscriptionKey=CartridgeSubscriptionUtils.generateSubscriptionKey();
  cartridgeSubscription.setSubscriptionKey(subscriptionKey);
  String encryptedRepoPassword;
  String repositoryPassword=subscriptionData.getRepositoryPassword();
  if (repositoryPassword != null && !repositoryPassword.isEmpty()) {
    encryptedRepoPassword=RepoPasswordMgtUtil.encryptPassword(repositoryPassword,subscriptionKey);
  }
 else {
    encryptedRepoPassword=""String_Node_Str"";
  }
  Repository repository=cartridgeSubscription.manageRepository(subscriptionData.getRepositoryURL(),subscriptionData.getRepositoryUsername(),encryptedRepoPassword,subscriptionData.isPrivateRepository());
  Subscriber subscriber=new Subscriber(subscriptionData.getTenantAdminUsername(),subscriptionData.getTenantId(),subscriptionData.getTenantDomain());
  cartridgeSubscription.setLbClusterId(lbClusterId);
  cartridgeSubscription.createSubscription(subscriber,subscriptionData.getCartridgeAlias(),subscriptionData.getAutoscalingPolicyName(),subscriptionData.getDeploymentPolicyName(),repository);
  cartridgeSubscription.getPayloadData().add(CartridgeConstants.COMMIT_ENABLED,String.valueOf(subscriptionData.isCommitsEnabled()));
  log.info(""String_Node_Str"" + subscriptionData.getTenantId() + ""String_Node_Str""+ subscriptionData.getTenantAdminUsername()+ ""String_Node_Str""+ ""String_Node_Str""+ subscriptionData.getCartridgeAlias()+ ""String_Node_Str""+ subscriptionData.getCartridgeType()+ ""String_Node_Str""+ subscriptionData.getRepositoryURL()+ ""String_Node_Str""+ subscriptionData.getAutoscalingPolicyName()+ ""String_Node_Str""+ subscriptionData.getDeploymentPolicyName());
  return cartridgeSubscription;
}","private CartridgeSubscription subscribe(SubscriptionData subscriptionData,CartridgeInfo cartridgeInfo,String lbClusterId) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  String subscriptionKey=CartridgeSubscriptionUtils.generateSubscriptionKey();
  cartridgeSubscription.setSubscriptionKey(subscriptionKey);
  String encryptedRepoPassword;
  String repositoryPassword=subscriptionData.getRepositoryPassword();
  if (repositoryPassword != null && !repositoryPassword.isEmpty()) {
    encryptedRepoPassword=RepoPasswordMgtUtil.encryptPassword(repositoryPassword,subscriptionKey);
  }
 else {
    encryptedRepoPassword=""String_Node_Str"";
  }
  Repository repository=cartridgeSubscription.manageRepository(subscriptionData.getRepositoryURL(),subscriptionData.getRepositoryUsername(),encryptedRepoPassword,subscriptionData.isPrivateRepository());
  Subscriber subscriber=new Subscriber(subscriptionData.getTenantAdminUsername(),subscriptionData.getTenantId(),subscriptionData.getTenantDomain());
  cartridgeSubscription.setLbClusterId(lbClusterId);
  cartridgeSubscription.createSubscription(subscriber,subscriptionData.getCartridgeAlias(),subscriptionData.getAutoscalingPolicyName(),subscriptionData.getDeploymentPolicyName(),repository);
  if (cartridgeSubscription.getPayloadData() != null) {
    cartridgeSubscription.getPayloadData().add(CartridgeConstants.COMMIT_ENABLED,String.valueOf(subscriptionData.isCommitsEnabled()));
  }
  log.info(""String_Node_Str"" + subscriptionData.getTenantId() + ""String_Node_Str""+ subscriptionData.getTenantAdminUsername()+ ""String_Node_Str""+ ""String_Node_Str""+ subscriptionData.getCartridgeAlias()+ ""String_Node_Str""+ subscriptionData.getCartridgeType()+ ""String_Node_Str""+ subscriptionData.getRepositoryURL()+ ""String_Node_Str""+ subscriptionData.getAutoscalingPolicyName()+ ""String_Node_Str""+ subscriptionData.getDeploymentPolicyName());
  return cartridgeSubscription;
}",0.9875451988750502
116621,"@Override public CartridgeSubscriptionInfo registerSubscription(Properties properties) throws ADCException, UnregisteredCartridgeException {
  getLoadBalancerCategory().register(getCartridgeInfo(),getCluster(),getPayloadData(),getAutoscalingPolicyName(),getDeploymentPolicyName(),properties);
  return ApplicationManagementUtil.createCartridgeSubscription(getCartridgeInfo(),getAutoscalingPolicyName(),getType(),getAlias(),getSubscriber().getTenantId(),getSubscriber().getTenantDomain(),getRepository(),getCluster().getHostName(),getCluster().getClusterDomain(),getCluster().getClusterSubDomain(),getCluster().getMgtClusterDomain(),getCluster().getMgtClusterSubDomain(),null,getSubscriptionStatus(),getSubscriptionKey());
}","@Override public CartridgeSubscriptionInfo registerSubscription(Properties properties) throws ADCException, UnregisteredCartridgeException {
  CartridgeInfo cartridgeInfo=getCartridgeInfo();
  if (!cartridgeInfo.isMultiTenantSpecified()) {
    getLoadBalancerCategory().register(cartridgeInfo,getCluster(),getPayloadData(),getAutoscalingPolicyName(),getDeploymentPolicyName(),properties);
  }
  return ApplicationManagementUtil.createCartridgeSubscription(getCartridgeInfo(),getAutoscalingPolicyName(),getType(),getAlias(),getSubscriber().getTenantId(),getSubscriber().getTenantDomain(),getRepository(),getCluster().getHostName(),getCluster().getClusterDomain(),getCluster().getClusterSubDomain(),getCluster().getMgtClusterDomain(),getCluster().getMgtClusterSubDomain(),null,getSubscriptionStatus(),getSubscriptionKey());
}",0.927554980595084
116622,"public void createSubscription(Subscriber subscriber,String alias,String autoscalingPolicy,String deploymentPolicyName,Repository repository) throws ADCException, PolicyException, UnregisteredCartridgeException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, RepositoryRequiredException, AlreadySubscribedException, RepositoryCredentialsRequiredException, InvalidRepositoryException, RepositoryTransportException {
  setSubscriber(subscriber);
  setAlias(alias);
  setAutoscalingPolicyName(autoscalingPolicy);
  setDeploymentPolicyName(deploymentPolicyName);
  setRepository(repository);
  setPayloadData(getLoadBalancerCategory().create(getAlias(),getCluster(),getSubscriber(),getRepository(),getCartridgeInfo(),getSubscriptionKey(),getCustomPayloadEntries()));
}","public void createSubscription(Subscriber subscriber,String alias,String autoscalingPolicy,String deploymentPolicyName,Repository repository) throws ADCException, PolicyException, UnregisteredCartridgeException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, RepositoryRequiredException, AlreadySubscribedException, RepositoryCredentialsRequiredException, InvalidRepositoryException, RepositoryTransportException {
  setSubscriber(subscriber);
  setAlias(alias);
  setAutoscalingPolicyName(autoscalingPolicy);
  setDeploymentPolicyName(deploymentPolicyName);
  setRepository(repository);
  if (!loadBalancerCategory.isLoadBalancedServiceMultiTenant()) {
    setPayloadData(getLoadBalancerCategory().create(getAlias(),getCluster(),getSubscriber(),getRepository(),getCartridgeInfo(),getSubscriptionKey(),getCustomPayloadEntries()));
  }
}",0.956043956043956
116623,"private void onArtifactUpdateEvent(ArtifactUpdatedEvent event){
  ArtifactUpdatedEvent artifactUpdatedEvent=event;
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",artifactUpdatedEvent.toString()));
  }
  String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
  String localRepoPath=CartridgeAgentConfiguration.getInstance().getAppPath();
  String clusterIdInMessage=artifactUpdatedEvent.getClusterId();
  String repoURL=artifactUpdatedEvent.getRepoURL();
  String repoPassword=CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
  String repoUsername=artifactUpdatedEvent.getRepoUserName();
  String tenantId=artifactUpdatedEvent.getTenantId();
  boolean isMultitenant=CartridgeAgentConfiguration.getInstance().isMultitenant();
  if (StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    repoInformation.setRepoPassword(repoPassword);
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    repoInformation.setMultitenant(isMultitenant);
    boolean cloneExists=GitBasedArtifactRepository.getInstance().cloneExists(repoInformation);
    GitBasedArtifactRepository.getInstance().checkout(repoInformation);
    ExtensionUtils.executeArtifactsUpdatedExtension();
    if (!cloneExists) {
      CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
    }
    boolean artifactUpdateEnabled=Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.ENABLE_ARTIFACT_UPDATE));
    if (artifactUpdateEnabled) {
      long artifactUpdateInterval=10;
      String artifactUpdateIntervalStr=System.getProperty(CartridgeAgentConstants.ARTIFACT_UPDATE_INTERVAL);
      if (artifactUpdateIntervalStr != null && !artifactUpdateIntervalStr.isEmpty()) {
        try {
          artifactUpdateInterval=Long.parseLong(artifactUpdateIntervalStr);
        }
 catch (        NumberFormatException e) {
          log.error(""String_Node_Str"",e);
          artifactUpdateInterval=10;
        }
      }
      log.info(""String_Node_Str"" + artifactUpdateInterval + ""String_Node_Str"");
      GitBasedArtifactRepository.getInstance().scheduleSyncTask(repoInformation,artifactUpdateInterval);
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
}","private void onArtifactUpdateEvent(ArtifactUpdatedEvent event){
  ArtifactUpdatedEvent artifactUpdatedEvent=event;
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",artifactUpdatedEvent.toString()));
  }
  String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
  String localRepoPath=CartridgeAgentConfiguration.getInstance().getAppPath();
  String clusterIdInMessage=artifactUpdatedEvent.getClusterId();
  String repoURL=artifactUpdatedEvent.getRepoURL();
  String repoPassword=CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
  String repoUsername=artifactUpdatedEvent.getRepoUserName();
  String tenantId=artifactUpdatedEvent.getTenantId();
  boolean isMultitenant=CartridgeAgentConfiguration.getInstance().isMultitenant();
  if (StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    if (repoPassword == null) {
      repoInformation.setRepoPassword(""String_Node_Str"");
    }
 else {
      repoInformation.setRepoPassword(repoPassword);
    }
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    repoInformation.setMultitenant(isMultitenant);
    boolean cloneExists=GitBasedArtifactRepository.getInstance().cloneExists(repoInformation);
    GitBasedArtifactRepository.getInstance().checkout(repoInformation);
    ExtensionUtils.executeArtifactsUpdatedExtension();
    if (!cloneExists) {
      CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
    }
    boolean artifactUpdateEnabled=Boolean.parseBoolean(System.getProperty(CartridgeAgentConstants.ENABLE_ARTIFACT_UPDATE));
    if (artifactUpdateEnabled) {
      long artifactUpdateInterval=10;
      String artifactUpdateIntervalStr=System.getProperty(CartridgeAgentConstants.ARTIFACT_UPDATE_INTERVAL);
      if (artifactUpdateIntervalStr != null && !artifactUpdateIntervalStr.isEmpty()) {
        try {
          artifactUpdateInterval=Long.parseLong(artifactUpdateIntervalStr);
        }
 catch (        NumberFormatException e) {
          log.error(""String_Node_Str"",e);
          artifactUpdateInterval=10;
        }
      }
      log.info(""String_Node_Str"" + artifactUpdateInterval + ""String_Node_Str"");
      GitBasedArtifactRepository.getInstance().scheduleSyncTask(repoInformation,artifactUpdateInterval);
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
}",0.9773946360153256
116624,"private CartridgeSubscription subscribe(SubscriptionData subscriptionData,CartridgeInfo cartridgeInfo,String lbClusterId) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  String subscriptionKey=CartridgeSubscriptionUtils.generateSubscriptionKey();
  cartridgeSubscription.setSubscriptionKey(subscriptionKey);
  String encryptedRepoPassword;
  String repositoryPassword=subscriptionData.getRepositoryPassword();
  if (repositoryPassword != null && !repositoryPassword.isEmpty()) {
    encryptedRepoPassword=RepoPasswordMgtUtil.encryptPassword(repositoryPassword,subscriptionKey);
  }
 else {
    encryptedRepoPassword=repositoryPassword;
  }
  Repository repository=cartridgeSubscription.manageRepository(subscriptionData.getRepositoryURL(),subscriptionData.getRepositoryUsername(),encryptedRepoPassword,subscriptionData.isPrivateRepository());
  Subscriber subscriber=new Subscriber(subscriptionData.getTenantAdminUsername(),subscriptionData.getTenantId(),subscriptionData.getTenantDomain());
  cartridgeSubscription.setLbClusterId(lbClusterId);
  cartridgeSubscription.createSubscription(subscriber,subscriptionData.getCartridgeAlias(),subscriptionData.getAutoscalingPolicyName(),subscriptionData.getDeploymentPolicyName(),repository);
  cartridgeSubscription.getPayloadData().add(CartridgeConstants.COMMIT_ENABLED,String.valueOf(subscriptionData.isCommitsEnabled()));
  log.info(""String_Node_Str"" + subscriptionData.getTenantId() + ""String_Node_Str""+ subscriptionData.getTenantAdminUsername()+ ""String_Node_Str""+ ""String_Node_Str""+ subscriptionData.getCartridgeAlias()+ ""String_Node_Str""+ subscriptionData.getCartridgeType()+ ""String_Node_Str""+ subscriptionData.getRepositoryURL()+ ""String_Node_Str""+ subscriptionData.getAutoscalingPolicyName()+ ""String_Node_Str""+ subscriptionData.getDeploymentPolicyName());
  return cartridgeSubscription;
}","private CartridgeSubscription subscribe(SubscriptionData subscriptionData,CartridgeInfo cartridgeInfo,String lbClusterId) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  String subscriptionKey=CartridgeSubscriptionUtils.generateSubscriptionKey();
  cartridgeSubscription.setSubscriptionKey(subscriptionKey);
  String encryptedRepoPassword;
  String repositoryPassword=subscriptionData.getRepositoryPassword();
  if (repositoryPassword != null && !repositoryPassword.isEmpty()) {
    encryptedRepoPassword=RepoPasswordMgtUtil.encryptPassword(repositoryPassword,subscriptionKey);
  }
 else {
    encryptedRepoPassword=""String_Node_Str"";
  }
  Repository repository=cartridgeSubscription.manageRepository(subscriptionData.getRepositoryURL(),subscriptionData.getRepositoryUsername(),encryptedRepoPassword,subscriptionData.isPrivateRepository());
  Subscriber subscriber=new Subscriber(subscriptionData.getTenantAdminUsername(),subscriptionData.getTenantId(),subscriptionData.getTenantDomain());
  cartridgeSubscription.setLbClusterId(lbClusterId);
  cartridgeSubscription.createSubscription(subscriber,subscriptionData.getCartridgeAlias(),subscriptionData.getAutoscalingPolicyName(),subscriptionData.getDeploymentPolicyName(),repository);
  cartridgeSubscription.getPayloadData().add(CartridgeConstants.COMMIT_ENABLED,String.valueOf(subscriptionData.isCommitsEnabled()));
  log.info(""String_Node_Str"" + subscriptionData.getTenantId() + ""String_Node_Str""+ subscriptionData.getTenantAdminUsername()+ ""String_Node_Str""+ ""String_Node_Str""+ subscriptionData.getCartridgeAlias()+ ""String_Node_Str""+ subscriptionData.getCartridgeType()+ ""String_Node_Str""+ subscriptionData.getRepositoryURL()+ ""String_Node_Str""+ subscriptionData.getAutoscalingPolicyName()+ ""String_Node_Str""+ subscriptionData.getDeploymentPolicyName());
  return cartridgeSubscription;
}",0.9928818385194224
116625,"public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException, IllegalArgumentException {
  if (cartridgeConfig == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cartridgeConfig.toString());
  }
  Cartridge cartridge=null;
  try {
    cartridge=CloudControllerUtil.toCartridge(cartridgeConfig);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new InvalidCartridgeDefinitionException(msg,e);
  }
  List<IaasProvider> iaases=cartridge.getIaases();
  if (iaases == null || iaases.isEmpty()) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str"";
    log.error(msg);
    throw new InvalidCartridgeDefinitionException(msg);
  }
  for (  IaasProvider iaasProvider : iaases) {
    CloudControllerUtil.getIaas(iaasProvider);
  }
  String cartridgeType=cartridge.getType();
  if (dataHolder.getCartridge(cartridgeType) != null) {
    if (dataHolder.getCartridges().remove(cartridge)) {
      log.info(""String_Node_Str"" + cartridgeType);
    }
  }
  dataHolder.addCartridge(cartridge);
  persist();
  List<Cartridge> cartridgeList=new ArrayList<Cartridge>();
  cartridgeList.add(cartridge);
  TopologyBuilder.handleServiceCreated(cartridgeList);
  log.info(""String_Node_Str"" + cartridgeType);
}","public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException, IllegalArgumentException {
  if (cartridgeConfig == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cartridgeConfig.toString());
  }
  Cartridge cartridge=null;
  try {
    cartridge=CloudControllerUtil.toCartridge(cartridgeConfig);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str""+ e.getMessage();
    log.error(msg,e);
    throw new InvalidCartridgeDefinitionException(msg,e);
  }
  List<IaasProvider> iaases=cartridge.getIaases();
  if (iaases == null || iaases.isEmpty()) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType() + ""String_Node_Str"";
    log.error(msg);
    throw new InvalidCartridgeDefinitionException(msg);
  }
  for (  IaasProvider iaasProvider : iaases) {
    CloudControllerUtil.getIaas(iaasProvider);
  }
  String cartridgeType=cartridge.getType();
  if (dataHolder.getCartridge(cartridgeType) != null) {
    Cartridge cartridgeToBeRemoved=dataHolder.getCartridge(cartridgeType);
    try {
      undeployCartridgeDefinition(cartridgeToBeRemoved.getType());
    }
 catch (    InvalidCartridgeTypeException e) {
    }
    populateNewCartridge(cartridge,cartridgeToBeRemoved);
  }
  dataHolder.addCartridge(cartridge);
  persist();
  List<Cartridge> cartridgeList=new ArrayList<Cartridge>();
  cartridgeList.add(cartridge);
  TopologyBuilder.handleServiceCreated(cartridgeList);
  log.info(""String_Node_Str"" + cartridgeType);
}",0.911910669975186
116626,"public void undeployCartridgeDefinition(String cartridgeType) throws InvalidCartridgeTypeException {
  Cartridge cartridge=null;
  if ((cartridge=dataHolder.getCartridge(cartridgeType)) != null) {
    if (dataHolder.getCartridges().remove(cartridge)) {
      persist();
      log.info(""String_Node_Str"" + cartridgeType);
    }
  }
  String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str"";
  log.error(msg);
  throw new InvalidCartridgeTypeException(msg);
}","public void undeployCartridgeDefinition(String cartridgeType) throws InvalidCartridgeTypeException {
  Cartridge cartridge=null;
  if ((cartridge=dataHolder.getCartridge(cartridgeType)) != null) {
    if (dataHolder.getCartridges().remove(cartridge)) {
      persist();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + cartridgeType);
      }
      return;
    }
  }
  String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str"";
  log.error(msg);
  throw new InvalidCartridgeTypeException(msg);
}",0.942366026289181
116627,"private Map<String,String> loadParametersFile(){
  Map<String,String> parameters=new HashMap<String,String>();
  try {
    File file=new File(System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH));
    if (!file.exists()) {
      log.warn(String.format(""String_Node_Str"",CartridgeAgentConstants.PARAM_FILE_PATH));
      return parameters;
    }
    Scanner scanner=new Scanner(file);
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      String[] params=line.split(""String_Node_Str"");
      for (      String string : params) {
        if (string != null) {
          String[] var=string.split(""String_Node_Str"");
          if (var.length > 2) {
            parameters.put(var[0],var[1]);
          }
        }
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    log.warn(message,e);
  }
  return parameters;
}","private Map<String,String> loadParametersFile(){
  Map<String,String> parameters=new HashMap<String,String>();
  try {
    File file=new File(System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH));
    if (!file.exists()) {
      log.warn(String.format(""String_Node_Str"",CartridgeAgentConstants.PARAM_FILE_PATH));
      return parameters;
    }
    Scanner scanner=new Scanner(file);
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      String[] params=line.split(""String_Node_Str"");
      for (      String string : params) {
        if (string != null) {
          String[] var=string.split(""String_Node_Str"");
          if (var.length >= 2) {
            parameters.put(var[0],var[1]);
          }
        }
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    log.warn(message,e);
  }
  return parameters;
}",0.9994422755158952
116628,"protected void sendToApplicationMember(MessageContext synCtx,org.apache.axis2.clustering.Member currentMember,DynamicLoadbalanceFaultHandler faultHandler,boolean newSession){
  org.apache.axis2.context.MessageContext axis2MsgCtx=((Axis2MessageContext)synCtx).getAxis2MessageContext();
  axis2MsgCtx.removeProperty(NhttpConstants.REST_URL_POSTFIX);
  String transport=axis2MsgCtx.getTransportIn().getName();
  String address=synCtx.getTo().getAddress();
  int incomingPort=extractPort(synCtx,transport);
  EndpointReference to=getEndpointReferenceAfterURLRewrite(currentMember,transport,address,incomingPort);
  synCtx.setTo(to);
  Endpoint endpoint=getEndpoint(to,currentMember,synCtx);
  if (isFailover()) {
    faultHandler.setTo(to);
    faultHandler.setCurrentMember(currentMember);
    faultHandler.setCurrentEp(endpoint);
    synCtx.pushFaultHandler(faultHandler);
    synCtx.getEnvelope().build();
  }
  if (isSessionAffinityBasedLB() && newSession) {
    prepareEndPointSequence(synCtx,endpoint);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_MEMBER,currentMember);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_DISPATCHER,dispatcher);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_FIRST_MESSAGE_IN_SESSION,Boolean.TRUE);
  }
  Map<String,String> memberHosts;
  if ((memberHosts=(Map<String,String>)currentMember.getProperties().get(HttpSessionDispatcher.HOSTS)) == null) {
    currentMember.getProperties().put(HttpSessionDispatcher.HOSTS,memberHosts=new HashMap<String,String>());
  }
  memberHosts.put(extractTargetHost(synCtx),""String_Node_Str"");
  setupTransportHeaders(synCtx);
  setupLoadBalancerContextProperties(synCtx,currentMember);
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",to.getAddress()));
    }
    endpoint.send(synCtx);
    incrementInFlightRequestCount(synCtx);
  }
 catch (  Exception e) {
    if (e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      log.fatal(""String_Node_Str"",e);
      System.exit(121);
    }
 else {
      throw new SynapseException(e);
    }
  }
}","protected void sendToApplicationMember(MessageContext synCtx,org.apache.axis2.clustering.Member currentMember,DynamicLoadbalanceFaultHandler faultHandler,boolean newSession){
  org.apache.axis2.context.MessageContext axis2MsgCtx=((Axis2MessageContext)synCtx).getAxis2MessageContext();
  axis2MsgCtx.removeProperty(NhttpConstants.REST_URL_POSTFIX);
  String transport=axis2MsgCtx.getTransportIn().getName();
  String address=synCtx.getTo().getAddress();
  int incomingPort=extractPort(synCtx,transport);
  EndpointReference to=getEndpointReferenceAfterURLRewrite(currentMember,transport,address,incomingPort);
  synCtx.setTo(to);
  Endpoint endpoint=getEndpoint(to,currentMember,synCtx);
  if (isFailover()) {
    faultHandler.setTo(to);
    faultHandler.setCurrentMember(currentMember);
    faultHandler.setCurrentEp(endpoint);
    synCtx.pushFaultHandler(faultHandler);
    synCtx.getEnvelope().build();
  }
  if (isSessionAffinityBasedLB()) {
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_DEFAULT_SESSION_TIMEOUT,getSessionTimeout());
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_DISPATCHER,dispatcher);
    if (newSession) {
      prepareEndPointSequence(synCtx,endpoint);
      synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_MEMBER,currentMember);
      synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_FIRST_MESSAGE_IN_SESSION,Boolean.TRUE);
    }
  }
  Map<String,String> memberHosts;
  if ((memberHosts=(Map<String,String>)currentMember.getProperties().get(HttpSessionDispatcher.HOSTS)) == null) {
    currentMember.getProperties().put(HttpSessionDispatcher.HOSTS,memberHosts=new HashMap<String,String>());
  }
  memberHosts.put(extractTargetHost(synCtx),""String_Node_Str"");
  setupTransportHeaders(synCtx);
  setupLoadBalancerContextProperties(synCtx,currentMember);
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",to.getAddress()));
    }
    endpoint.send(synCtx);
    incrementInFlightRequestCount(synCtx);
  }
 catch (  Exception e) {
    if (e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      log.fatal(""String_Node_Str"",e);
      System.exit(121);
    }
 else {
      throw new SynapseException(e);
    }
  }
}",0.924884792626728
116629,"@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (CompleteTopologyEvent.class.getName().equals(type)) {
    if (topology.isInitialized()) {
      return false;
    }
    CompleteTopologyEvent event=(CompleteTopologyEvent)Util.jsonToObject(message,CompleteTopologyEvent.class);
    if (TopologyServiceFilter.getInstance().isActive()) {
      for (      Service service : event.getTopology().getServices()) {
        if (TopologyServiceFilter.getInstance().serviceNameIncluded(service.getServiceName())) {
          topology.addService(service);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",service.getServiceName()));
          }
        }
      }
    }
 else {
      topology.addServices(event.getTopology().getServices());
    }
    if (TopologyClusterFilter.getInstance().isActive()) {
      for (      Service service : topology.getServices()) {
        for (        Cluster cluster : service.getClusters()) {
          if (TopologyClusterFilter.getInstance().clusterIdExcluded(cluster.getClusterId())) {
            service.removeCluster(cluster.getClusterId());
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
            }
          }
        }
      }
    }
    if (TopologyMemberFilter.getInstance().isActive()) {
      for (      Service service : topology.getServices()) {
        for (        Cluster cluster : service.getClusters()) {
          for (          Member member : cluster.getMembers()) {
            if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(member.getLbClusterId())) {
              if (log.isDebugEnabled()) {
                log.debug(String.format(""String_Node_Str"",member.getMemberId(),member.getLbClusterId()));
              }
              cluster.removeMember(member);
            }
          }
        }
      }
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    topology.setInitialized(true);
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
    return false;
  }
}","@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (CompleteTopologyEvent.class.getName().equals(type)) {
    if (topology.isInitialized()) {
      return false;
    }
    CompleteTopologyEvent event=(CompleteTopologyEvent)Util.jsonToObject(message,CompleteTopologyEvent.class);
    if (TopologyServiceFilter.getInstance().isActive()) {
      for (      Service service : event.getTopology().getServices()) {
        if (TopologyServiceFilter.getInstance().serviceNameIncluded(service.getServiceName())) {
          topology.addService(service);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",service.getServiceName()));
          }
        }
      }
    }
 else {
      topology.addServices(event.getTopology().getServices());
    }
    if (TopologyClusterFilter.getInstance().isActive()) {
      for (      Service service : topology.getServices()) {
        List<Cluster> clustersToRemove=new ArrayList<Cluster>();
        for (        Cluster cluster : service.getClusters()) {
          if (TopologyClusterFilter.getInstance().clusterIdExcluded(cluster.getClusterId())) {
            clustersToRemove.add(cluster);
          }
        }
        for (        Cluster cluster : clustersToRemove) {
          service.removeCluster(cluster);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
          }
        }
      }
    }
    if (TopologyMemberFilter.getInstance().isActive()) {
      for (      Service service : topology.getServices()) {
        for (        Cluster cluster : service.getClusters()) {
          List<Member> membersToRemove=new ArrayList<Member>();
          for (          Member member : cluster.getMembers()) {
            if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(member.getLbClusterId())) {
              membersToRemove.add(member);
            }
          }
          for (          Member member : membersToRemove) {
            cluster.removeMember(member);
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",member.getMemberId(),member.getLbClusterId()));
            }
          }
        }
      }
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    topology.setInitialized(true);
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
    return false;
  }
}",0.8878831516148941
116630,"private void deployLBCluster(String loadBalancedService,LBDataContext lbDataCtxt,String tenantRange) throws ADCException, UnregisteredCartridgeException {
  if (lbDataCtxt.getLbCategory().equals(Constants.NO_LOAD_BALANCER)) {
    return;
  }
  LoadBalancerCategory loadBalancerCategory=null;
  if (lbDataCtxt.getLbCategory().equals(Constants.EXISTING_LOAD_BALANCERS)) {
    loadBalancerCategory=new ExistingLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.DEFAULT_LOAD_BALANCER)) {
    loadBalancerCategory=new DefaultLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.SERVICE_AWARE_LOAD_BALANCER)) {
    loadBalancerCategory=new ServiceLevelLoadBalancerCategory();
  }
  if (loadBalancerCategory == null) {
    throw new ADCException(""String_Node_Str"" + lbDataCtxt.getLbCategory() + ""String_Node_Str"");
  }
  loadBalancerCategory.setLoadBalancedServiceType(loadBalancedService);
  Service lbService=new MultiTenantLBService(lbDataCtxt.getLbCartridgeInfo().getType(),lbDataCtxt.getAutoscalePolicy(),lbDataCtxt.getDeploymentPolicy(),-1234,lbDataCtxt.getLbCartridgeInfo(),tenantRange,loadBalancerCategory);
  Properties lbProperties=null;
  if (lbDataCtxt.getLbProperperties() != null && !lbDataCtxt.getLbProperperties().isEmpty()) {
    lbProperties=new Properties();
    lbProperties.setProperties(lbDataCtxt.getLbProperperties().toArray(new Property[0]));
  }
  lbService.deploy(lbProperties);
  persist(lbService);
}","private void deployLBCluster(String loadBalancedService,LBDataContext lbDataCtxt,String tenantRange) throws ADCException, UnregisteredCartridgeException {
  if (lbDataCtxt.getLbCategory() == null || lbDataCtxt.getLbCategory().equals(Constants.NO_LOAD_BALANCER)) {
    return;
  }
  LoadBalancerCategory loadBalancerCategory=null;
  if (lbDataCtxt.getLbCategory().equals(Constants.EXISTING_LOAD_BALANCERS)) {
    loadBalancerCategory=new ExistingLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.DEFAULT_LOAD_BALANCER)) {
    loadBalancerCategory=new DefaultLoadBalancerCategory();
  }
 else   if (lbDataCtxt.getLbCategory().equals(Constants.SERVICE_AWARE_LOAD_BALANCER)) {
    loadBalancerCategory=new ServiceLevelLoadBalancerCategory();
  }
  if (loadBalancerCategory == null) {
    throw new ADCException(""String_Node_Str"" + lbDataCtxt.getLbCategory() + ""String_Node_Str"");
  }
  loadBalancerCategory.setLoadBalancedServiceType(loadBalancedService);
  Service lbService=new MultiTenantLBService(lbDataCtxt.getLbCartridgeInfo().getType(),lbDataCtxt.getAutoscalePolicy(),lbDataCtxt.getDeploymentPolicy(),-1234,lbDataCtxt.getLbCartridgeInfo(),tenantRange,loadBalancerCategory);
  Properties lbProperties=null;
  if (lbDataCtxt.getLbProperperties() != null && !lbDataCtxt.getLbProperperties().isEmpty()) {
    lbProperties=new Properties();
    lbProperties.setProperties(lbDataCtxt.getLbProperperties().toArray(new Property[0]));
  }
  lbService.deploy(lbProperties);
  persist(lbService);
}",0.987375415282392
116631,"private LoadBalancerConfiguration transform(Node loadBalancerNode){
  LoadBalancerConfiguration configuration=new LoadBalancerConfiguration();
  if (loadBalancerNode == null || (!loadBalancerNode.getName().equals(Constants.CONF_ELEMENT_LOADBALANCER))) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
  String defaultAlgorithm=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_ALGORITHM,defaultAlgorithm,""String_Node_Str"");
  configuration.setDefaultAlgorithmName(defaultAlgorithm);
  String failOver=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_FAILOVER);
  if (StringUtils.isNotBlank(failOver)) {
    configuration.setFailOverEnabled(Boolean.parseBoolean(failOver));
  }
  String sessionAffinity=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_AFFINITY);
  if (StringUtils.isNotBlank(sessionAffinity)) {
    configuration.setSessionAffinityEnabled(Boolean.parseBoolean(sessionAffinity));
  }
  String sessionTimeout=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_TIMEOUT);
  if (StringUtils.isNotBlank(sessionTimeout)) {
    configuration.setSessionTimeout(Long.parseLong(sessionTimeout));
  }
 else {
    configuration.setSessionTimeout(Constants.DEFAULT_SESSION_TIMEOUT);
  }
  String topologyEventListenerEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER,topologyEventListenerEnabled,Constants.CONF_ELEMENT_LOADBALANCER);
  configuration.setTopologyEventListenerEnabled(Boolean.parseBoolean(topologyEventListenerEnabled));
  if (configuration.isTopologyEventListenerEnabled()) {
    String topologyMemberIpType=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE,topologyMemberIpType,Constants.CONF_ELEMENT_LOADBALANCER);
    configuration.setTopologyMemberIpType(transformMemberIpType(topologyMemberIpType));
  }
  String statsPublisherEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_STATS_PUBLISHER);
  if (StringUtils.isNotBlank(statsPublisherEnabled)) {
    configuration.setCepStatsPublisherEnabled(Boolean.parseBoolean(statsPublisherEnabled));
  }
  String multiTenancyEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANCY);
  if (StringUtils.isNotBlank(multiTenancyEnabled)) {
    configuration.setMultiTenancyEnabled(Boolean.parseBoolean(multiTenancyEnabled));
  }
  if (configuration.isTopologyEventListenerEnabled() || configuration.isMultiTenancyEnabled()) {
    String mbIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_IP,mbIp,""String_Node_Str"");
    configuration.setMbIp(mbIp);
    String mbPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_PORT,mbPort,""String_Node_Str"");
    configuration.setMbPort(Integer.parseInt(mbPort));
  }
  if (configuration.isTopologyEventListenerEnabled()) {
    String serviceFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_SERVICE_FILTER);
    if (StringUtils.isNotBlank(serviceFilter)) {
      configuration.setTopologyServiceFilter(serviceFilter);
    }
    String clusterFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_CLUSTER_FILTER);
    if (StringUtils.isNotBlank(clusterFilter)) {
      configuration.setTopologyClusterFilter(clusterFilter);
    }
    String memberFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_FILTER);
    if (StringUtils.isNotBlank(memberFilter)) {
      configuration.setTopologyMemberFilter(memberFilter);
    }
  }
  if (configuration.isCepStatsPublisherEnabled()) {
    String cepIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_IP,cepIp,""String_Node_Str"");
    configuration.setCepIp(cepIp);
    String cepPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_PORT,cepPort,""String_Node_Str"");
    configuration.setCepPort(Integer.parseInt(cepPort));
    String networkPartitionId=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID,networkPartitionId,""String_Node_Str"");
    configuration.setNetworkPartitionId(networkPartitionId);
  }
  if (configuration.isMultiTenancyEnabled()) {
    String tenantIdentifierStr=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER,tenantIdentifierStr,""String_Node_Str"");
    if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_ID)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantId);
    }
 else     if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_DOMAIN)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantDomain);
    }
 else {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierStr));
    }
    String tenantIdentifierRegex=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX,tenantIdentifierRegex,""String_Node_Str"");
    try {
      Pattern.compile(tenantIdentifierRegex);
    }
 catch (    Exception e) {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierRegex),e);
    }
    configuration.setTenantIdentifierRegex(tenantIdentifierRegex);
  }
  Node algorithmsNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_ALGORITHMS);
  validateRequiredNode(loadBalancerNode,Constants.CONF_ELEMENT_ALGORITHMS);
  for (  Node algorithmNode : algorithmsNode.getChildNodes()) {
    String className=algorithmNode.getProperty(Constants.CONF_PROPERTY_CLASS_NAME);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CLASS_NAME,className,""String_Node_Str"",algorithmNode.getName());
    Algorithm algorithm=new Algorithm(algorithmNode.getName(),className);
    configuration.addAlgorithm(algorithm);
  }
  if (!configuration.isTopologyEventListenerEnabled()) {
    Node servicesNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_SERVICES);
    validateRequiredNode(servicesNode,Constants.CONF_ELEMENT_SERVICES);
    for (    Node serviceNode : servicesNode.getChildNodes()) {
      ServiceType serviceType=ServiceType.SingleTenant;
      String multiTenant=serviceNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANT);
      if (StringUtils.isNotBlank(multiTenant) && (Boolean.parseBoolean(multiTenant))) {
        serviceType=ServiceType.MultiTenant;
      }
      Service service=new Service(serviceNode.getName(),serviceType);
      Node clustersNode=serviceNode.findChildNodeByName(Constants.CONF_ELEMENT_CLUSTERS);
      for (      Node clusterNode : clustersNode.getChildNodes()) {
        String clusterId=clusterNode.getName();
        Cluster cluster=new Cluster(service.getServiceName(),clusterId,null,null);
        String tenantRange=clusterNode.getProperty(Constants.CONF_PROPERTY_TENANT_RANGE);
        if (StringUtils.isNotBlank(tenantRange)) {
          if (service.getServiceType() != ServiceType.MultiTenant) {
            throw new InvalidConfigurationException(String.format(""String_Node_Str"",Constants.CONF_PROPERTY_TENANT_RANGE,service.getServiceName(),cluster.getClusterId()));
          }
          cluster.setTenantRange(tenantRange);
        }
        String algorithm=clusterNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
        if (StringUtils.isNotBlank(algorithm)) {
          cluster.setLoadBalanceAlgorithmName(algorithm);
        }
        String hosts=clusterNode.getProperty(Constants.CONF_ELEMENT_HOSTS);
        validateRequiredPropertyInNode(Constants.CONF_ELEMENT_HOSTS,hosts,""String_Node_Str"",clusterNode.getName());
        String[] hostsArray=hosts.split(""String_Node_Str"");
        for (        String hostsName : hostsArray) {
          cluster.addHostName(hostsName.trim());
        }
        Node membersNode=clusterNode.findChildNodeByName(Constants.CONF_ELEMENT_MEMBERS);
        validateRequiredNode(membersNode,Constants.CONF_ELEMENT_MEMBERS,String.format(""String_Node_Str"",clusterId));
        for (        Node memberNode : membersNode.getChildNodes()) {
          String memberId=memberNode.getName();
          Member member=new Member(cluster.getServiceName(),cluster.getClusterId(),Constants.STATIC_NETWORK_PARTITION,Constants.STATIC_PARTITION,memberId);
          String ip=memberNode.getProperty(Constants.CONF_PROPERTY_IP);
          validateRequiredPropertyInNode(Constants.CONF_PROPERTY_IP,ip,String.format(""String_Node_Str"",memberId));
          member.setMemberIp(ip);
          Node portsNode=memberNode.findChildNodeByName(Constants.CONF_ELEMENT_PORTS);
          validateRequiredNode(portsNode,Constants.CONF_ELEMENT_PORTS,String.format(""String_Node_Str"",memberId));
          for (          Node portNode : portsNode.getChildNodes()) {
            String value=portNode.getProperty(Constants.CONF_PROPERTY_VALUE);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_VALUE,value,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            String proxy=portNode.getProperty(Constants.CONF_PROPERTY_PROXY);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_PROXY,proxy,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            Port port=new Port(portNode.getName(),Integer.valueOf(value),Integer.valueOf(proxy));
            member.addPort(port);
          }
          cluster.addMember(member);
        }
        service.addCluster(cluster);
        try {
          TopologyManager.acquireWriteLock();
          if (!TopologyManager.getTopology().serviceExists(service.getServiceName())) {
            TopologyManager.getTopology().addService(service);
          }
        }
  finally {
          TopologyManager.releaseWriteLock();
        }
        LoadBalancerContextUtil.addClusterToLbContext(cluster);
      }
    }
  }
  return configuration;
}","private LoadBalancerConfiguration transform(Node loadBalancerNode){
  LoadBalancerConfiguration configuration=new LoadBalancerConfiguration();
  if (loadBalancerNode == null || (!loadBalancerNode.getName().equals(Constants.CONF_ELEMENT_LOADBALANCER))) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
  String defaultAlgorithm=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_ALGORITHM,defaultAlgorithm,""String_Node_Str"");
  configuration.setDefaultAlgorithmName(defaultAlgorithm);
  String failOver=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_FAILOVER);
  if (StringUtils.isNotBlank(failOver)) {
    configuration.setFailOverEnabled(Boolean.parseBoolean(failOver));
  }
  String sessionAffinity=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_AFFINITY);
  if (StringUtils.isNotBlank(sessionAffinity)) {
    configuration.setSessionAffinityEnabled(Boolean.parseBoolean(sessionAffinity));
  }
  String sessionTimeout=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_SESSION_TIMEOUT);
  if (StringUtils.isNotBlank(sessionTimeout)) {
    configuration.setSessionTimeout(Long.parseLong(sessionTimeout));
  }
 else {
    configuration.setSessionTimeout(Constants.DEFAULT_SESSION_TIMEOUT);
  }
  String topologyEventListenerEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER);
  validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_EVENT_LISTENER,topologyEventListenerEnabled,Constants.CONF_ELEMENT_LOADBALANCER);
  configuration.setTopologyEventListenerEnabled(Boolean.parseBoolean(topologyEventListenerEnabled));
  if (configuration.isTopologyEventListenerEnabled()) {
    String topologyMemberIpType=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_IP_TYPE,topologyMemberIpType,Constants.CONF_ELEMENT_LOADBALANCER);
    configuration.setTopologyMemberIpType(transformMemberIpType(topologyMemberIpType));
  }
  String statsPublisherEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_STATS_PUBLISHER);
  if (StringUtils.isNotBlank(statsPublisherEnabled)) {
    configuration.setCepStatsPublisherEnabled(Boolean.parseBoolean(statsPublisherEnabled));
  }
  String multiTenancyEnabled=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANCY);
  if (StringUtils.isNotBlank(multiTenancyEnabled)) {
    configuration.setMultiTenancyEnabled(Boolean.parseBoolean(multiTenancyEnabled));
  }
  if (configuration.isTopologyEventListenerEnabled() || configuration.isMultiTenancyEnabled()) {
    String mbIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_IP,mbIp,""String_Node_Str"");
    configuration.setMbIp(mbIp);
    String mbPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_MB_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_MB_PORT,mbPort,""String_Node_Str"");
    configuration.setMbPort(Integer.parseInt(mbPort));
  }
  if (configuration.isTopologyEventListenerEnabled()) {
    String serviceFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_SERVICE_FILTER);
    if (StringUtils.isNotBlank(serviceFilter)) {
      configuration.setTopologyServiceFilter(serviceFilter);
    }
    String clusterFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_CLUSTER_FILTER);
    if (StringUtils.isNotBlank(clusterFilter)) {
      configuration.setTopologyClusterFilter(clusterFilter);
    }
    String memberFilter=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TOPOLOGY_MEMBER_FILTER);
    if (StringUtils.isNotBlank(memberFilter)) {
      configuration.setTopologyMemberFilter(memberFilter);
    }
  }
  if (configuration.isCepStatsPublisherEnabled()) {
    String cepIp=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_IP);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_IP,cepIp,""String_Node_Str"");
    configuration.setCepIp(cepIp);
    String cepPort=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_CEP_PORT);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CEP_PORT,cepPort,""String_Node_Str"");
    configuration.setCepPort(Integer.parseInt(cepPort));
    String networkPartitionId=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_NETWORK_PARTITION_ID,networkPartitionId,""String_Node_Str"");
    configuration.setNetworkPartitionId(networkPartitionId);
  }
  if (configuration.isMultiTenancyEnabled()) {
    String tenantIdentifierStr=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER,tenantIdentifierStr,""String_Node_Str"");
    if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_ID)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantId);
    }
 else     if (tenantIdentifierStr.equals(Constants.CONF_PROPERTY_VALUE_TENANT_DOMAIN)) {
      configuration.setTenantIdentifier(TenantIdentifier.TenantDomain);
    }
 else {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierStr));
    }
    String tenantIdentifierRegex=loadBalancerNode.getProperty(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_TENANT_IDENTIFIER_REGEX,tenantIdentifierRegex,""String_Node_Str"");
    try {
      Pattern.compile(tenantIdentifierRegex);
    }
 catch (    Exception e) {
      throw new InvalidConfigurationException(String.format(""String_Node_Str"",tenantIdentifierRegex),e);
    }
    configuration.setTenantIdentifierRegex(tenantIdentifierRegex);
  }
  Node algorithmsNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_ALGORITHMS);
  validateRequiredNode(loadBalancerNode,Constants.CONF_ELEMENT_ALGORITHMS);
  for (  Node algorithmNode : algorithmsNode.getChildNodes()) {
    String className=algorithmNode.getProperty(Constants.CONF_PROPERTY_CLASS_NAME);
    validateRequiredPropertyInNode(Constants.CONF_PROPERTY_CLASS_NAME,className,""String_Node_Str"",algorithmNode.getName());
    Algorithm algorithm=new Algorithm(algorithmNode.getName(),className);
    configuration.addAlgorithm(algorithm);
  }
  if (!configuration.isTopologyEventListenerEnabled()) {
    Node servicesNode=loadBalancerNode.findChildNodeByName(Constants.CONF_ELEMENT_SERVICES);
    validateRequiredNode(servicesNode,Constants.CONF_ELEMENT_SERVICES);
    for (    Node serviceNode : servicesNode.getChildNodes()) {
      ServiceType serviceType=ServiceType.SingleTenant;
      String multiTenant=serviceNode.getProperty(Constants.CONF_PROPERTY_MULTI_TENANT);
      if (StringUtils.isNotBlank(multiTenant) && (Boolean.parseBoolean(multiTenant))) {
        serviceType=ServiceType.MultiTenant;
      }
      Service service=new Service(serviceNode.getName(),serviceType);
      Node clustersNode=serviceNode.findChildNodeByName(Constants.CONF_ELEMENT_CLUSTERS);
      for (      Node clusterNode : clustersNode.getChildNodes()) {
        String clusterId=clusterNode.getName();
        Cluster cluster=new Cluster(service.getServiceName(),clusterId,null,null);
        String tenantRange=clusterNode.getProperty(Constants.CONF_PROPERTY_TENANT_RANGE);
        if (StringUtils.isNotBlank(tenantRange)) {
          if (service.getServiceType() != ServiceType.MultiTenant) {
            throw new InvalidConfigurationException(String.format(""String_Node_Str"",Constants.CONF_PROPERTY_TENANT_RANGE,service.getServiceName(),cluster.getClusterId()));
          }
          cluster.setTenantRange(tenantRange);
        }
        String algorithm=clusterNode.getProperty(Constants.CONF_PROPERTY_ALGORITHM);
        if (StringUtils.isNotBlank(algorithm)) {
          cluster.setLoadBalanceAlgorithmName(algorithm);
        }
        String hosts=clusterNode.getProperty(Constants.CONF_ELEMENT_HOSTS);
        validateRequiredPropertyInNode(Constants.CONF_ELEMENT_HOSTS,hosts,""String_Node_Str"",clusterNode.getName());
        String[] hostsArray=hosts.split(""String_Node_Str"");
        for (        String hostsName : hostsArray) {
          cluster.addHostName(hostsName.trim());
        }
        Node membersNode=clusterNode.findChildNodeByName(Constants.CONF_ELEMENT_MEMBERS);
        validateRequiredNode(membersNode,Constants.CONF_ELEMENT_MEMBERS,String.format(""String_Node_Str"",clusterId));
        for (        Node memberNode : membersNode.getChildNodes()) {
          String memberId=memberNode.getName();
          Member member=new Member(cluster.getServiceName(),cluster.getClusterId(),Constants.STATIC_NETWORK_PARTITION,Constants.STATIC_PARTITION,memberId);
          String ip=memberNode.getProperty(Constants.CONF_PROPERTY_IP);
          validateRequiredPropertyInNode(Constants.CONF_PROPERTY_IP,ip,String.format(""String_Node_Str"",memberId));
          member.setMemberIp(ip);
          Node portsNode=memberNode.findChildNodeByName(Constants.CONF_ELEMENT_PORTS);
          validateRequiredNode(portsNode,Constants.CONF_ELEMENT_PORTS,String.format(""String_Node_Str"",memberId));
          for (          Node portNode : portsNode.getChildNodes()) {
            String value=portNode.getProperty(Constants.CONF_PROPERTY_VALUE);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_VALUE,value,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            String proxy=portNode.getProperty(Constants.CONF_PROPERTY_PROXY);
            validateRequiredPropertyInNode(Constants.CONF_PROPERTY_PROXY,proxy,""String_Node_Str"",String.format(""String_Node_Str"",memberId));
            Port port=new Port(portNode.getName(),Integer.valueOf(value),Integer.valueOf(proxy));
            member.addPort(port);
          }
          member.setStatus(MemberStatus.Activated);
          cluster.addMember(member);
        }
        service.addCluster(cluster);
        try {
          TopologyManager.acquireWriteLock();
          if (!TopologyManager.getTopology().serviceExists(service.getServiceName())) {
            TopologyManager.getTopology().addService(service);
          }
        }
  finally {
          TopologyManager.releaseWriteLock();
        }
        LoadBalancerContextUtil.addClusterToLbContext(cluster);
      }
    }
  }
  return configuration;
}",0.9974995191382958
116632,"public static void putCurrentMemberIndex(String serviceName,String clusterId,int currentMemberIndex){
  String key=prepareKey(serviceName,clusterId);
  LoadBalancerCache.getInstance().putInteger(Constants.ALGORITHM_CONTEXT_CACHE,key,currentMemberIndex);
}","public static void putCurrentMemberIndex(String serviceName,String clusterId,int currentMemberIndex){
  String key=prepareKey(serviceName,clusterId);
  LoadBalancerCache.putInteger(Constants.ALGORITHM_CONTEXT_CACHE,key,currentMemberIndex);
}",0.9717741935483872
116633,"public static int getCurrentMemberIndex(String serviceName,String clusterId){
  String key=prepareKey(serviceName,clusterId);
  return LoadBalancerCache.getInstance().getInteger(Constants.ALGORITHM_CONTEXT_CACHE,key);
}","public static int getCurrentMemberIndex(String serviceName,String clusterId){
  String key=prepareKey(serviceName,clusterId);
  return LoadBalancerCache.getInteger(Constants.ALGORITHM_CONTEXT_CACHE,key);
}",0.9669811320754716
116634,"void putInteger(String cacheName,String propertyName,int value){
  try {
    startSuperTenantFlow();
    Cache<String,Integer> cache=cacheManager.getCache(cacheName);
    cache.put(propertyName,value);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
  }
  finally {
    endSuperTenantFlow();
  }
}","static void putInteger(String cacheName,String propertyName,int value){
  try {
    startSuperTenantFlow();
    Cache<String,Integer> cache=getCacheManager().getCache(cacheName);
    cache.put(propertyName,value);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
  }
  finally {
    endSuperTenantFlow();
  }
}",0.9812332439678284
116635,"void putString(String cacheName,String propertyName,String value){
  try {
    startSuperTenantFlow();
    Cache<String,String> cache=cacheManager.getCache(cacheName);
    cache.put(propertyName,value);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
  }
  finally {
    endSuperTenantFlow();
  }
}","static void putString(String cacheName,String propertyName,String value){
  try {
    startSuperTenantFlow();
    Cache<String,String> cache=getCacheManager().getCache(cacheName);
    cache.put(propertyName,value);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
  }
  finally {
    endSuperTenantFlow();
  }
}",0.9812834224598932
116636,"int getInteger(String cacheName,String propertyName){
  try {
    startSuperTenantFlow();
    Cache<String,Integer> cache=cacheManager.getCache(cacheName);
    int value=cache.get(propertyName);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
    return value;
  }
  finally {
    endSuperTenantFlow();
  }
}","static int getInteger(String cacheName,String propertyName){
  try {
    startSuperTenantFlow();
    Cache<String,Integer> cache=getCacheManager().getCache(cacheName);
    int value=cache.get(propertyName);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
    return value;
  }
  finally {
    endSuperTenantFlow();
  }
}",0.9817708333333334
116637,"String getString(String cacheName,String propertyName){
  try {
    startSuperTenantFlow();
    Cache<String,String> cache=cacheManager.getCache(cacheName);
    String value=cache.get(propertyName);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
    return value;
  }
  finally {
    endSuperTenantFlow();
  }
}","static String getString(String cacheName,String propertyName){
  try {
    startSuperTenantFlow();
    Cache<String,String> cache=getCacheManager().getCache(cacheName);
    String value=cache.get(propertyName);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",cacheName,propertyName,value));
    }
    return value;
  }
  finally {
    endSuperTenantFlow();
  }
}",0.981958762886598
116638,"private void startSuperTenantFlow(){
  PrivilegedCarbonContext.startTenantFlow();
  PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
  ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
}","private static void startSuperTenantFlow(){
  PrivilegedCarbonContext.startTenantFlow();
  PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
  ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
  ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
}",0.9882747068676716
116639,"private void endSuperTenantFlow(){
  PrivilegedCarbonContext.endTenantFlow();
}","private static void endSuperTenantFlow(){
  PrivilegedCarbonContext.endTenantFlow();
}",0.9575757575757576
116640,"public void terminateObsoleteInstance(String memberId){
}","public void terminateObsoleteInstance(String memberId){
  try {
    CloudControllerClient.getInstance().terminate(memberId);
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.4523809523809524
116641,"@Override public void run(){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  String jndiPropertiesDir=System.getProperty(CartridgeAgentConstants.JNDI_PROPERTIES_DIR);
  if (StringUtils.isBlank(jndiPropertiesDir)) {
    if (log.isErrorEnabled()) {
      log.error(String.format(""String_Node_Str"",CartridgeAgentConstants.JNDI_PROPERTIES_DIR));
    }
    return;
  }
  String payloadPath=System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH);
  if (StringUtils.isBlank(payloadPath)) {
    if (log.isErrorEnabled()) {
      log.error(String.format(""String_Node_Str"",CartridgeAgentConstants.PARAM_FILE_PATH));
    }
    return;
  }
  String extensionsDir=System.getProperty(CartridgeAgentConstants.EXTENSIONS_DIR);
  if (StringUtils.isBlank(extensionsDir)) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",CartridgeAgentConstants.EXTENSIONS_DIR));
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  InstanceNotifierMessageProcessorChain processorChain=new InstanceNotifierMessageProcessorChain();
  processorChain.addEventListener(new ArtifactUpdateEventListener(){
    @Override protected void onEvent(    Event event){
      onArtifactUpdateEvent((ArtifactUpdatedEvent)event);
    }
  }
);
  processorChain.addEventListener(new InstanceCleanupMemberEventListener(){
    @Override protected void onEvent(    Event event){
      String memberIdInPayload=CartridgeAgentConfiguration.getInstance().getMemberId();
      InstanceCleanupMemberEvent instanceCleanupMemberEvent=(InstanceCleanupMemberEvent)event;
      if (memberIdInPayload.equals(instanceCleanupMemberEvent.getMemberId())) {
        onInstanceCleanupEvent();
      }
    }
  }
);
  processorChain.addEventListener(new InstanceCleanupClusterEventListener(){
    @Override protected void onEvent(    Event event){
      String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
      InstanceCleanupClusterEvent instanceCleanupClusterEvent=(InstanceCleanupClusterEvent)event;
      if (clusterIdInPayload.equals(instanceCleanupClusterEvent.getClusterId())) {
        onInstanceCleanupEvent();
      }
    }
  }
);
  InstanceNotifierEventMessageDelegator messageDelegator=new InstanceNotifierEventMessageDelegator(processorChain);
  InstanceNotifierEventMessageReceiver messageReceiver=new InstanceNotifierEventMessageReceiver(messageDelegator);
  Thread messageReceiverThread=new Thread(messageReceiver);
  messageReceiverThread.start();
  while (!messageReceiver.isSubscribed()) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
    }
  }
  CartridgeAgentEventPublisher.publishInstanceStartedEvent();
  ExtensionUtils.executeStartServersExtension();
  CartridgeAgentUtils.waitUntilPortsActive(""String_Node_Str"",CartridgeAgentConfiguration.getInstance().getPorts());
  String repoUrl=CartridgeAgentConfiguration.getInstance().getRepoUrl();
  if (""String_Node_Str"".equals(repoUrl) || StringUtils.isBlank(repoUrl)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
  }
  LogPublisherManager logPublisherManager=new LogPublisherManager();
  publishLogs(logPublisherManager);
  while (!terminated)   ;
  logPublisherManager.stop();
}","@Override public void run(){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  String jndiPropertiesDir=System.getProperty(CartridgeAgentConstants.JNDI_PROPERTIES_DIR);
  if (StringUtils.isBlank(jndiPropertiesDir)) {
    if (log.isErrorEnabled()) {
      log.error(String.format(""String_Node_Str"",CartridgeAgentConstants.JNDI_PROPERTIES_DIR));
    }
    return;
  }
  String payloadPath=System.getProperty(CartridgeAgentConstants.PARAM_FILE_PATH);
  if (StringUtils.isBlank(payloadPath)) {
    if (log.isErrorEnabled()) {
      log.error(String.format(""String_Node_Str"",CartridgeAgentConstants.PARAM_FILE_PATH));
    }
    return;
  }
  String extensionsDir=System.getProperty(CartridgeAgentConstants.EXTENSIONS_DIR);
  if (StringUtils.isBlank(extensionsDir)) {
    if (log.isWarnEnabled()) {
      log.warn(String.format(""String_Node_Str"",CartridgeAgentConstants.EXTENSIONS_DIR));
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  InstanceNotifierMessageProcessorChain processorChain=new InstanceNotifierMessageProcessorChain();
  processorChain.addEventListener(new ArtifactUpdateEventListener(){
    @Override protected void onEvent(    Event event){
      onArtifactUpdateEvent((ArtifactUpdatedEvent)event);
    }
  }
);
  processorChain.addEventListener(new InstanceCleanupMemberEventListener(){
    @Override protected void onEvent(    Event event){
      String memberIdInPayload=CartridgeAgentConfiguration.getInstance().getMemberId();
      InstanceCleanupMemberEvent instanceCleanupMemberEvent=(InstanceCleanupMemberEvent)event;
      if (memberIdInPayload.equals(instanceCleanupMemberEvent.getMemberId())) {
        onInstanceCleanupEvent();
      }
    }
  }
);
  processorChain.addEventListener(new InstanceCleanupClusterEventListener(){
    @Override protected void onEvent(    Event event){
      String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
      InstanceCleanupClusterEvent instanceCleanupClusterEvent=(InstanceCleanupClusterEvent)event;
      if (clusterIdInPayload.equals(instanceCleanupClusterEvent.getClusterId())) {
        onInstanceCleanupEvent();
      }
    }
  }
);
  InstanceNotifierEventMessageDelegator messageDelegator=new InstanceNotifierEventMessageDelegator(processorChain);
  InstanceNotifierEventMessageReceiver messageReceiver=new InstanceNotifierEventMessageReceiver(messageDelegator);
  Thread messageReceiverThread=new Thread(messageReceiver);
  messageReceiverThread.start();
  while (!messageReceiver.isSubscribed()) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
    }
  }
  CartridgeAgentEventPublisher.publishInstanceStartedEvent();
  ExtensionUtils.executeStartServersExtension();
  CartridgeAgentUtils.waitUntilPortsActive(""String_Node_Str"",CartridgeAgentConfiguration.getInstance().getPorts());
  String repoUrl=CartridgeAgentConfiguration.getInstance().getRepoUrl();
  if (""String_Node_Str"".equals(repoUrl) || StringUtils.isBlank(repoUrl)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
  }
  LogPublisherManager logPublisherManager=new LogPublisherManager();
  publishLogs(logPublisherManager);
  while (!terminated) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  logPublisherManager.stop();
}",0.985283187156236
116642,"@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") @AuthorizationAction(""String_Node_Str"") public Cartridge getAvailableSingleTenantCartridgeInfo(@PathParam(""String_Node_Str"") String cartridgeType) throws RestAPIException {
  return ServiceUtils.getAvailableCartridgeInfo(cartridgeType,false,getConfigContext());
}","@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") @Consumes(""String_Node_Str"") @AuthorizationAction(""String_Node_Str"") public Cartridge getAvailableSingleTenantCartridgeInfo(@PathParam(""String_Node_Str"") String cartridgeType) throws RestAPIException {
  return ServiceUtils.getAvailableCartridgeInfo(cartridgeType,null,getConfigContext());
}",0.9871611982881596
116643,"@Override public void run(){
  Thread tenantReceiverThread=new Thread(tenantReceiver);
  tenantReceiverThread.start();
  while (!terminated)   ;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}","@Override public void run(){
  Thread tenantReceiverThread=new Thread(tenantReceiver);
  tenantReceiverThread.start();
  while (!terminated) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}",0.8123791102514507
116644,"@Override public void run(){
  Thread thread=new Thread(topologyReceiver);
  thread.start();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  while (!terminated)   ;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}","@Override public void run(){
  Thread thread=new Thread(topologyReceiver);
  thread.start();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  while (!terminated) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}",0.8341708542713567
116645,"@Override public IaasProvider validate(String partitionId,Properties properties) throws InvalidPartitionException {
  try {
    if (properties.containsKey(Scope.region.toString())) {
      String region=properties.getProperty(Scope.region.toString());
      if (iaasProvider.getImage() != null && !iaasProvider.getImage().contains(region)) {
        String msg=""String_Node_Str"" + partitionId + ""String_Node_Str""+ region;
        log.error(msg);
        throw new InvalidPartitionException(msg);
      }
      iaas.isValidRegion(region);
      IaasProvider updatedIaasProvider=new IaasProvider(iaasProvider);
      Iaas updatedIaas=CloudControllerUtil.getIaas(updatedIaasProvider);
      updatedIaas.setIaasProvider(updatedIaasProvider);
      if (properties.containsKey(Scope.zone.toString())) {
        String zone=properties.getProperty(Scope.zone.toString());
        iaas.isValidZone(region,zone);
        updatedIaasProvider.setProperty(CloudControllerConstants.AVAILABILITY_ZONE,zone);
        updatedIaas.buildTemplate();
      }
      return updatedIaasProvider;
    }
 else {
      return iaasProvider;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + partitionId;
    log.error(msg,ex);
    throw new InvalidPartitionException(msg,ex);
  }
}","@Override public IaasProvider validate(String partitionId,Properties properties) throws InvalidPartitionException {
  try {
    if (properties.containsKey(Scope.region.toString())) {
      String region=properties.getProperty(Scope.region.toString());
      if (iaasProvider.getImage() != null && !iaasProvider.getImage().contains(region)) {
        String msg=""String_Node_Str"" + partitionId + ""String_Node_Str""+ region;
        log.error(msg);
        throw new InvalidPartitionException(msg);
      }
      iaas.isValidRegion(region);
      IaasProvider updatedIaasProvider=new IaasProvider(iaasProvider);
      Iaas updatedIaas=CloudControllerUtil.getIaas(updatedIaasProvider);
      updatedIaas.setIaasProvider(updatedIaasProvider);
      if (properties.containsKey(Scope.zone.toString())) {
        String zone=properties.getProperty(Scope.zone.toString());
        iaas.isValidZone(region,zone);
        updatedIaasProvider.setProperty(CloudControllerConstants.AVAILABILITY_ZONE,zone);
        updatedIaas=CloudControllerUtil.getIaas(updatedIaasProvider);
        updatedIaas.setIaasProvider(updatedIaasProvider);
      }
      return updatedIaasProvider;
    }
 else {
      return iaasProvider;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + partitionId;
    log.error(msg,ex);
    throw new InvalidPartitionException(msg,ex);
  }
}",0.9541492989768852
116646,"@Override public IaasProvider validate(String partitionId,Properties properties) throws InvalidPartitionException {
  try {
    if (properties.containsKey(Scope.region.toString())) {
      String region=properties.getProperty(Scope.region.toString());
      if (iaasProvider.getImage() != null && !iaasProvider.getImage().contains(region)) {
        String msg=""String_Node_Str"" + partitionId + ""String_Node_Str""+ region;
        log.error(msg);
        throw new InvalidPartitionException(msg);
      }
      iaas.isValidRegion(region);
      IaasProvider updatedIaasProvider=new IaasProvider(iaasProvider);
      Iaas updatedIaas=CloudControllerUtil.getIaas(updatedIaasProvider);
      updatedIaas.setIaasProvider(updatedIaasProvider);
      if (properties.containsKey(Scope.zone.toString())) {
        String zone=properties.getProperty(Scope.zone.toString());
        iaas.isValidZone(region,zone);
        updatedIaasProvider.setProperty(CloudControllerConstants.ZONE_ELEMENT,zone);
        updatedIaas.buildTemplate();
      }
      return updatedIaasProvider;
    }
 else {
      return iaasProvider;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + partitionId;
    log.error(msg,ex);
    throw new InvalidPartitionException(msg,ex);
  }
}","@Override public IaasProvider validate(String partitionId,Properties properties) throws InvalidPartitionException {
  try {
    if (properties.containsKey(Scope.region.toString())) {
      String region=properties.getProperty(Scope.region.toString());
      if (iaasProvider.getImage() != null && !iaasProvider.getImage().contains(region)) {
        String msg=""String_Node_Str"" + partitionId + ""String_Node_Str""+ region;
        log.error(msg);
        throw new InvalidPartitionException(msg);
      }
      iaas.isValidRegion(region);
      IaasProvider updatedIaasProvider=new IaasProvider(iaasProvider);
      Iaas updatedIaas=CloudControllerUtil.getIaas(updatedIaasProvider);
      updatedIaas.setIaasProvider(updatedIaasProvider);
      if (properties.containsKey(Scope.zone.toString())) {
        String zone=properties.getProperty(Scope.zone.toString());
        iaas.isValidZone(region,zone);
        updatedIaasProvider.setProperty(CloudControllerConstants.ZONE_ELEMENT,zone);
        updatedIaas=CloudControllerUtil.getIaas(updatedIaasProvider);
        updatedIaas.setIaasProvider(updatedIaasProvider);
      }
      return updatedIaasProvider;
    }
 else {
      return iaasProvider;
    }
  }
 catch (  Exception ex) {
    String msg=""String_Node_Str"" + partitionId;
    log.error(msg,ex);
    throw new InvalidPartitionException(msg,ex);
  }
}",0.9539748953974896
116647,"@Override public void unregisterService(String clusterId) throws UnregisteredClusterException {
  final String clusterId_=clusterId;
  Runnable r=new Runnable(){
    public void run(){
      ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
      if (ctxt == null) {
        String msg=""String_Node_Str"" + clusterId_;
        log.error(msg);
      }
      Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
      long endTime=System.currentTimeMillis() + ctxt.getTimeoutInMillis() * members.size();
      while (members.size() > 0 && System.currentTimeMillis() < endTime) {
        CloudControllerUtil.sleep(1000);
      }
      if (members.size() > 0) {
        for (        Member member : members) {
          try {
            terminateInstance(member.getMemberId());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"" + member.getMemberId(),e);
          }
        }
      }
      log.info(""String_Node_Str"" + clusterId_);
      deleteVolumes(ctxt);
      TopologyBuilder.handleClusterRemoved(ctxt);
      dataHolder.removeClusterContext(clusterId_);
      dataHolder.removeMemberContextsOfCluster(clusterId_);
      persist();
    }
    private void deleteVolumes(    ClusterContext ctxt){
      if (ctxt.isVolumeRequired()) {
        Cartridge cartridge=dataHolder.getCartridge(ctxt.getCartridgeType());
        if (cartridge != null && cartridge.getIaases() != null && !ctxt.getListOfVolumes().isEmpty()) {
          for (          Volume volume : ctxt.getListOfVolumes()) {
            if (volume.getId() != null) {
              String iaasType=volume.getIaasType();
              Iaas iaas=dataHolder.getIaasProvider(iaasType).getIaas();
              if (iaas != null) {
                try {
                  iaas.deleteVolume(volume.getId());
                }
 catch (                Exception ignore) {
                  if (log.isDebugEnabled()) {
                    log.debug(ignore);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
;
  new Thread(r).start();
}","@Override public void unregisterService(String clusterId) throws UnregisteredClusterException {
  final String clusterId_=clusterId;
  Runnable terminateInTimeout=new Runnable(){
    @Override public void run(){
      ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
      if (ctxt == null) {
        String msg=""String_Node_Str"" + clusterId_;
        log.error(msg);
      }
      Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
      long endTime=System.currentTimeMillis() + ctxt.getTimeoutInMillis() * members.size();
      while (System.currentTimeMillis() < endTime) {
        CloudControllerUtil.sleep(1000);
      }
      if (members.size() > 0) {
        for (        Member member : members) {
          try {
            terminateInstance(member.getMemberId());
          }
 catch (          Exception e) {
            log.warn(""String_Node_Str"" + member.getMemberId(),e);
          }
        }
      }
    }
  }
;
  Runnable unregister=new Runnable(){
    public void run(){
      ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
      if (ctxt == null) {
        String msg=""String_Node_Str"" + clusterId_;
        log.error(msg);
      }
      Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
      long endTime=System.currentTimeMillis() + ctxt.getTimeoutInMillis() * members.size();
      while (members.size() > 0) {
        CloudControllerUtil.sleep(1000);
      }
      log.info(""String_Node_Str"" + clusterId_);
      deleteVolumes(ctxt);
      TopologyBuilder.handleClusterRemoved(ctxt);
      dataHolder.removeClusterContext(clusterId_);
      dataHolder.removeMemberContextsOfCluster(clusterId_);
      persist();
    }
    private void deleteVolumes(    ClusterContext ctxt){
      if (ctxt.isVolumeRequired()) {
        Cartridge cartridge=dataHolder.getCartridge(ctxt.getCartridgeType());
        if (cartridge != null && cartridge.getIaases() != null && !ctxt.getListOfVolumes().isEmpty()) {
          for (          Volume volume : ctxt.getListOfVolumes()) {
            if (volume.getId() != null) {
              String iaasType=volume.getIaasType();
              Iaas iaas=dataHolder.getIaasProvider(iaasType).getIaas();
              if (iaas != null) {
                try {
                  iaas.deleteVolume(volume.getId());
                }
 catch (                Exception ignore) {
                  if (log.isDebugEnabled()) {
                    log.debug(ignore);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
;
  new Thread(terminateInTimeout).start();
  new Thread(unregister).start();
}",0.7206952303961196
116648,"public void run(){
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + clusterId_;
    log.error(msg);
  }
  Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
  long endTime=System.currentTimeMillis() + ctxt.getTimeoutInMillis() * members.size();
  while (members.size() > 0 && System.currentTimeMillis() < endTime) {
    CloudControllerUtil.sleep(1000);
  }
  if (members.size() > 0) {
    for (    Member member : members) {
      try {
        terminateInstance(member.getMemberId());
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + member.getMemberId(),e);
      }
    }
  }
  log.info(""String_Node_Str"" + clusterId_);
  deleteVolumes(ctxt);
  TopologyBuilder.handleClusterRemoved(ctxt);
  dataHolder.removeClusterContext(clusterId_);
  dataHolder.removeMemberContextsOfCluster(clusterId_);
  persist();
}","public void run(){
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + clusterId_;
    log.error(msg);
  }
  Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
  long endTime=System.currentTimeMillis() + ctxt.getTimeoutInMillis() * members.size();
  while (members.size() > 0) {
    CloudControllerUtil.sleep(1000);
  }
  log.info(""String_Node_Str"" + clusterId_);
  deleteVolumes(ctxt);
  TopologyBuilder.handleClusterRemoved(ctxt);
  dataHolder.removeClusterContext(clusterId_);
  dataHolder.removeMemberContextsOfCluster(clusterId_);
  persist();
}",0.821640903686088
116649,"@Override public void run(){
  try {
    Thread.sleep(15000);
  }
 catch (  InterruptedException ignore) {
  }
  Thread thread=new Thread(healthStatReceiver);
  thread.start();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  while (!terminated)   ;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}","@Override public void run(){
  try {
    Thread.sleep(15000);
  }
 catch (  InterruptedException ignore) {
  }
  Thread thread=new Thread(healthStatReceiver);
  thread.start();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  while (!terminated) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}",0.8705882352941177
116650,"@Override public void run(){
  Thread thread=new Thread(stratosManagerTopologyReceiver);
  thread.start();
  log.info(""String_Node_Str"");
  while (!terminate) {
  }
  log.info(""String_Node_Str"");
}","@Override public void run(){
  Thread thread=new Thread(stratosManagerTopologyReceiver);
  thread.start();
  log.info(""String_Node_Str"");
  while (!terminate) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ignore) {
    }
  }
  log.info(""String_Node_Str"");
}",0.8123711340206186
116651,"private static String subscribeToLb(String cartridgeType,String loadBalancedCartridgeType,String lbAlias,String defaultAutoscalingPolicy,String deploymentPolicy,ConfigurationContext configurationContext,String userName,String tenantDomain,Property[] props) throws ADCException {
  CartridgeSubscription cartridgeSubscription;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ lbAlias);
    }
    SubscriptionData subscriptionData=new SubscriptionData();
    subscriptionData.setCartridgeType(cartridgeType);
    subscriptionData.setLbAlias(lbAlias.trim());
    subscriptionData.setAutoscalingPolicyName(defaultAutoscalingPolicy);
    subscriptionData.setDeploymentPolicyName(deploymentPolicy);
    subscriptionData.setTenantDomain(tenantDomain);
    subscriptionData.setTenantId(ApplicationManagementUtil.getTenantId(configurationContext));
    subscriptionData.setTenantAdminUsername(userName);
    subscriptionData.setRepositoryType(""String_Node_Str"");
    subscriptionData.setPrivateRepository(false);
    cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
    cartridgeSubscription.getPayloadData().add(""String_Node_Str"",loadBalancedCartridgeType);
    Properties lbProperties=new Properties();
    lbProperties.setProperties(props);
    cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription,lbProperties);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ lbAlias);
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg,e);
    throw new ADCException(msg,e);
  }
  return cartridgeSubscription.getClusterDomain();
}","private static String subscribeToLb(String cartridgeType,String loadBalancedCartridgeType,String lbAlias,String defaultAutoscalingPolicy,String deploymentPolicy,ConfigurationContext configurationContext,String userName,String tenantDomain,Property[] props) throws ADCException {
  CartridgeSubscription cartridgeSubscription;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ lbAlias);
    }
    SubscriptionData subscriptionData=new SubscriptionData();
    subscriptionData.setCartridgeType(cartridgeType);
    subscriptionData.setCartridgeAlias(lbAlias.trim());
    subscriptionData.setAutoscalingPolicyName(defaultAutoscalingPolicy);
    subscriptionData.setDeploymentPolicyName(deploymentPolicy);
    subscriptionData.setTenantDomain(tenantDomain);
    subscriptionData.setTenantId(ApplicationManagementUtil.getTenantId(configurationContext));
    subscriptionData.setTenantAdminUsername(userName);
    subscriptionData.setRepositoryType(""String_Node_Str"");
    subscriptionData.setPrivateRepository(false);
    cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
    cartridgeSubscription.getPayloadData().add(""String_Node_Str"",loadBalancedCartridgeType);
    Properties lbProperties=new Properties();
    lbProperties.setProperties(props);
    cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription,lbProperties);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ lbAlias);
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg,e);
    throw new ADCException(msg,e);
  }
  return cartridgeSubscription.getClusterDomain();
}",0.9968847352024922
116652,"static SubscriptionInfo subscribe(CartridgeInfoBean cartridgeInfoBean,ConfigurationContext configurationContext,String tenantUsername,String tenantDomain) throws ADCException, PolicyException, UnregisteredCartridgeException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, RepositoryRequiredException, AlreadySubscribedException, RepositoryCredentialsRequiredException, InvalidRepositoryException, RepositoryTransportException {
  CartridgeSubscriptionUtils.validateCartridgeAlias(ApplicationManagementUtil.getTenantId(configurationContext),cartridgeInfoBean.getCartridgeType(),cartridgeInfoBean.getAlias());
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  CloudControllerServiceClient cloudControllerServiceClient=getCloudControllerServiceClient();
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(cartridgeInfoBean.getCartridgeType());
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeInfoBean.getCartridgeType();
    log.error(msg,e);
    throw new ADCException(msg,e);
  }
  String cartridgeType=cartridgeInfoBean.getCartridgeType();
  String deploymentPolicy=cartridgeInfoBean.getDeploymentPolicy();
  String autoscalingPolicy=cartridgeInfoBean.getAutoscalePolicy();
  String dataCartridgeAlias=cartridgeInfoBean.getDataCartridgeAlias();
  SubscriptionData subscriptionData=new SubscriptionData();
  subscriptionData.setCartridgeType(cartridgeType);
  subscriptionData.setCartridgeAlias(cartridgeInfoBean.getAlias().trim());
  subscriptionData.setDataCartridgeAlias(dataCartridgeAlias);
  subscriptionData.setAutoscalingPolicyName(autoscalingPolicy);
  subscriptionData.setDeploymentPolicyName(deploymentPolicy);
  subscriptionData.setTenantDomain(tenantDomain);
  subscriptionData.setTenantId(ApplicationManagementUtil.getTenantId(configurationContext));
  subscriptionData.setTenantAdminUsername(tenantUsername);
  subscriptionData.setRepositoryType(""String_Node_Str"");
  subscriptionData.setRepositoryURL(cartridgeInfoBean.getRepoURL());
  subscriptionData.setRepositoryUsername(cartridgeInfoBean.getRepoURL());
  subscriptionData.setRepositoryPassword(cartridgeInfoBean.getRepoPassword());
  Properties properties=new Properties();
  if (cartridgeInfoBean.isPersistanceRequired()) {
    Property persistanceRequiredProperty=new Property();
    persistanceRequiredProperty.setName(IS_VOLUME_REQUIRED);
    persistanceRequiredProperty.setValue(String.valueOf(cartridgeInfoBean.isPersistanceRequired()));
    Property sizeProperty=new Property();
    persistanceRequiredProperty.setName(VOLUME_SIZE);
    persistanceRequiredProperty.setValue(String.valueOf(cartridgeInfoBean.getSize()));
    Property deviceProperty=new Property();
    persistanceRequiredProperty.setName(DEVICE_NAME);
    persistanceRequiredProperty.setValue(String.valueOf(cartridgeInfoBean.getDevice()));
    Property deleteOnTerminationProperty=new Property();
    persistanceRequiredProperty.setName(SHOULD_DELETE_VOLUME);
    persistanceRequiredProperty.setValue(String.valueOf(cartridgeInfoBean.isRemoveOnTermination()));
    Properties props=new Properties();
    props.setProperties(new Property[]{persistanceRequiredProperty,sizeProperty,deviceProperty,deleteOnTerminationProperty});
  }
  if (cartridgeInfo != null && cartridgeInfo.getMultiTenant()) {
    log.info(""String_Node_Str"");
    subscriptionData.setPrivateRepository(false);
    subscriptionData.setLbClusterId(null);
    subscriptionData.setProperties(null);
    CartridgeSubscription cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
    log.info(""String_Node_Str"");
    return cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription,properties);
  }
  List<Property> lbRefProp=new ArrayList<Property>();
  LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
  String lbClusterId=null;
  if (lbConfig == null || lbConfig.getProperties() == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
    }
  }
 else {
    Properties lbReferenceProperties=lbConfig.getProperties();
    Property property=new Property();
    property.setName(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    for (    org.apache.stratos.cloud.controller.pojo.Property prop : lbReferenceProperties.getProperties()) {
      String name=prop.getName();
      String value=prop.getValue();
      if (Constants.NO_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          property.setValue(name);
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.EXISTING_LOAD_BALANCERS.equals(name)) {
        String clusterIdsVal=value;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ clusterIdsVal);
        }
        String[] clusterIds=clusterIdsVal.split(""String_Node_Str"");
        for (        String clusterId : clusterIds) {
          if (autoscalerServiceClient != null) {
            try {
              autoscalerServiceClient.checkLBExistenceAgainstPolicy(clusterId,deploymentPolicy);
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
        }
        property.setValue(name);
        lbRefProp.add(property);
        break;
      }
 else       if (Constants.DEFAULT_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          CartridgeInfo lbCartridgeInfo=null;
          String lbCartridgeType=lbConfig.getType();
          try {
            if (lbCartridgeType != null) {
              lbCartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(lbCartridgeType);
            }
          }
 catch (          Exception e) {
            String msg=""String_Node_Str"" + cartridgeType;
            log.error(msg,e);
            throw new ADCException(msg,e);
          }
          property.setValue(name);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          if (autoscalerServiceClient != null) {
            try {
              DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
              for (              DeploymentPolicy policy : lbCartridgeDepPolicies) {
                if (deploymentPolicy.equals(policy.getId())) {
                  if (!autoscalerServiceClient.checkDefaultLBExistenceAgainstPolicy(deploymentPolicy)) {
                    String lbAlias=""String_Node_Str"" + new Random().nextInt();
                    if (lbCartridgeInfo != null) {
                      lbCartridgeInfo.addProperties(property);
                      lbClusterId=subscribeToLb(lbCartridgeType,cartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,tenantUsername,tenantDomain,lbCartridgeInfo.getProperties());
                    }
 else {
                      String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ Constants.DEFAULT_LOAD_BALANCER;
                      log.error(msg);
                      throw new ADCException(msg);
                    }
                  }
                }
              }
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.SERVICE_AWARE_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          CartridgeInfo lbCartridgeInfo=null;
          String lbCartridgeType=lbConfig.getType();
          try {
            if (lbCartridgeType != null) {
              lbCartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(lbCartridgeType);
            }
          }
 catch (          Exception e) {
            String msg=""String_Node_Str"" + cartridgeType;
            log.error(msg,e);
            throw new ADCException(msg,e);
          }
          Property loadBalancedServiceTypeProperty=new Property();
          loadBalancedServiceTypeProperty.setName(Constants.LOAD_BALANCED_SERVICE_TYPE);
          property.setValue(name);
          loadBalancedServiceTypeProperty.setValue(cartridgeType);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          if (autoscalerServiceClient != null) {
            try {
              DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
              for (              DeploymentPolicy policy : lbCartridgeDepPolicies) {
                if (deploymentPolicy.equals(policy.getId())) {
                  if (!autoscalerServiceClient.checkServiceLBExistenceAgainstPolicy(cartridgeType,deploymentPolicy)) {
                    String lbAlias=""String_Node_Str"" + cartridgeType + new Random().nextInt();
                    if (lbCartridgeInfo != null) {
                      lbCartridgeInfo.addProperties(property);
                      lbCartridgeInfo.addProperties(loadBalancedServiceTypeProperty);
                      lbClusterId=subscribeToLb(lbCartridgeType,cartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,tenantUsername,tenantDomain,lbCartridgeInfo.getProperties());
                    }
 else {
                      String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ Constants.SERVICE_AWARE_LOAD_BALANCER;
                      log.error(msg);
                      throw new ADCException(msg);
                    }
                  }
                }
              }
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
          lbRefProp.add(property);
          break;
        }
      }
    }
  }
  subscriptionData.setPrivateRepository(cartridgeInfoBean.isPrivateRepo());
  subscriptionData.setLbClusterId(lbClusterId);
  subscriptionData.setProperties(lbRefProp.toArray(new Property[0]));
  CartridgeSubscription cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
  if (dataCartridgeAlias != null && !dataCartridgeAlias.trim().isEmpty()) {
  }
  for (  Property lbRefProperty : lbRefProp) {
    properties.addProperties(lbRefProperty);
  }
  SubscriptionInfo registerCartridgeSubscription=cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription,properties);
  return registerCartridgeSubscription;
}","static SubscriptionInfo subscribe(CartridgeInfoBean cartridgeInfoBean,ConfigurationContext configurationContext,String tenantUsername,String tenantDomain) throws ADCException, PolicyException, UnregisteredCartridgeException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, RepositoryRequiredException, AlreadySubscribedException, RepositoryCredentialsRequiredException, InvalidRepositoryException, RepositoryTransportException {
  CartridgeSubscriptionUtils.validateCartridgeAlias(ApplicationManagementUtil.getTenantId(configurationContext),cartridgeInfoBean.getCartridgeType(),cartridgeInfoBean.getAlias());
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  CloudControllerServiceClient cloudControllerServiceClient=getCloudControllerServiceClient();
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(cartridgeInfoBean.getCartridgeType());
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeInfoBean.getCartridgeType();
    log.error(msg,e);
    throw new ADCException(msg,e);
  }
  String cartridgeType=cartridgeInfoBean.getCartridgeType();
  String deploymentPolicy=cartridgeInfoBean.getDeploymentPolicy();
  String autoscalingPolicy=cartridgeInfoBean.getAutoscalePolicy();
  String dataCartridgeAlias=cartridgeInfoBean.getDataCartridgeAlias();
  SubscriptionData subscriptionData=new SubscriptionData();
  subscriptionData.setCartridgeType(cartridgeType);
  subscriptionData.setCartridgeAlias(cartridgeInfoBean.getAlias().trim());
  subscriptionData.setDataCartridgeAlias(dataCartridgeAlias);
  subscriptionData.setAutoscalingPolicyName(autoscalingPolicy);
  subscriptionData.setDeploymentPolicyName(deploymentPolicy);
  subscriptionData.setTenantDomain(tenantDomain);
  subscriptionData.setTenantId(ApplicationManagementUtil.getTenantId(configurationContext));
  subscriptionData.setTenantAdminUsername(tenantUsername);
  subscriptionData.setRepositoryType(""String_Node_Str"");
  subscriptionData.setRepositoryURL(cartridgeInfoBean.getRepoURL());
  subscriptionData.setRepositoryUsername(cartridgeInfoBean.getRepoURL());
  subscriptionData.setRepositoryPassword(cartridgeInfoBean.getRepoPassword());
  Properties properties=new Properties();
  if (cartridgeInfoBean.isPersistanceRequired()) {
    Property persistanceRequiredProperty=new Property();
    persistanceRequiredProperty.setName(IS_VOLUME_REQUIRED);
    persistanceRequiredProperty.setValue(String.valueOf(cartridgeInfoBean.isPersistanceRequired()));
    Property sizeProperty=new Property();
    sizeProperty.setName(VOLUME_SIZE);
    sizeProperty.setValue(String.valueOf(cartridgeInfoBean.getSize()));
    Property deviceProperty=new Property();
    deviceProperty.setName(DEVICE_NAME);
    deviceProperty.setValue(String.valueOf(cartridgeInfoBean.getDevice()));
    Property deleteOnTerminationProperty=new Property();
    deleteOnTerminationProperty.setName(SHOULD_DELETE_VOLUME);
    deleteOnTerminationProperty.setValue(String.valueOf(cartridgeInfoBean.isRemoveOnTermination()));
    properties.setProperties(new Property[]{persistanceRequiredProperty,sizeProperty,deviceProperty,deleteOnTerminationProperty});
  }
  if (cartridgeInfo != null && cartridgeInfo.getMultiTenant()) {
    log.info(""String_Node_Str"");
    subscriptionData.setPrivateRepository(false);
    subscriptionData.setLbClusterId(null);
    subscriptionData.setProperties(null);
    CartridgeSubscription cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
    log.info(""String_Node_Str"");
    return cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription,properties);
  }
  List<Property> lbRefProp=new ArrayList<Property>();
  LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
  String lbClusterId=null;
  if (lbConfig == null || lbConfig.getProperties() == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
    }
  }
 else {
    Properties lbReferenceProperties=lbConfig.getProperties();
    Property property=new Property();
    property.setName(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    for (    org.apache.stratos.cloud.controller.pojo.Property prop : lbReferenceProperties.getProperties()) {
      String name=prop.getName();
      String value=prop.getValue();
      if (Constants.NO_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          property.setValue(name);
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.EXISTING_LOAD_BALANCERS.equals(name)) {
        String clusterIdsVal=value;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ clusterIdsVal);
        }
        String[] clusterIds=clusterIdsVal.split(""String_Node_Str"");
        for (        String clusterId : clusterIds) {
          if (autoscalerServiceClient != null) {
            try {
              autoscalerServiceClient.checkLBExistenceAgainstPolicy(clusterId,deploymentPolicy);
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
        }
        property.setValue(name);
        lbRefProp.add(property);
        break;
      }
 else       if (Constants.DEFAULT_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          CartridgeInfo lbCartridgeInfo=null;
          String lbCartridgeType=lbConfig.getType();
          try {
            if (lbCartridgeType != null) {
              lbCartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(lbCartridgeType);
            }
          }
 catch (          Exception e) {
            String msg=""String_Node_Str"" + cartridgeType;
            log.error(msg,e);
            throw new ADCException(msg,e);
          }
          property.setValue(name);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          if (autoscalerServiceClient != null) {
            try {
              DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
              for (              DeploymentPolicy policy : lbCartridgeDepPolicies) {
                if (deploymentPolicy.equals(policy.getId())) {
                  if (!autoscalerServiceClient.checkDefaultLBExistenceAgainstPolicy(deploymentPolicy)) {
                    String lbAlias=""String_Node_Str"" + new Random().nextInt();
                    if (lbCartridgeInfo != null) {
                      lbCartridgeInfo.addProperties(property);
                      lbClusterId=subscribeToLb(lbCartridgeType,cartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,tenantUsername,tenantDomain,lbCartridgeInfo.getProperties());
                    }
 else {
                      String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ Constants.DEFAULT_LOAD_BALANCER;
                      log.error(msg);
                      throw new ADCException(msg);
                    }
                  }
                }
              }
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.SERVICE_AWARE_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          CartridgeInfo lbCartridgeInfo=null;
          String lbCartridgeType=lbConfig.getType();
          try {
            if (lbCartridgeType != null) {
              lbCartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(lbCartridgeType);
            }
          }
 catch (          Exception e) {
            String msg=""String_Node_Str"" + cartridgeType;
            log.error(msg,e);
            throw new ADCException(msg,e);
          }
          Property loadBalancedServiceTypeProperty=new Property();
          loadBalancedServiceTypeProperty.setName(Constants.LOAD_BALANCED_SERVICE_TYPE);
          property.setValue(name);
          loadBalancedServiceTypeProperty.setValue(cartridgeType);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          if (autoscalerServiceClient != null) {
            try {
              DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
              for (              DeploymentPolicy policy : lbCartridgeDepPolicies) {
                if (deploymentPolicy.equals(policy.getId())) {
                  if (!autoscalerServiceClient.checkServiceLBExistenceAgainstPolicy(cartridgeType,deploymentPolicy)) {
                    String lbAlias=""String_Node_Str"" + cartridgeType + new Random().nextInt();
                    if (lbCartridgeInfo != null) {
                      lbCartridgeInfo.addProperties(property);
                      lbCartridgeInfo.addProperties(loadBalancedServiceTypeProperty);
                      lbClusterId=subscribeToLb(lbCartridgeType,cartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,tenantUsername,tenantDomain,lbCartridgeInfo.getProperties());
                    }
 else {
                      String msg=""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ Constants.SERVICE_AWARE_LOAD_BALANCER;
                      log.error(msg);
                      throw new ADCException(msg);
                    }
                  }
                }
              }
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
          lbRefProp.add(property);
          break;
        }
      }
    }
  }
  subscriptionData.setPrivateRepository(cartridgeInfoBean.isPrivateRepo());
  subscriptionData.setLbClusterId(lbClusterId);
  subscriptionData.setProperties(lbRefProp.toArray(new Property[0]));
  CartridgeSubscription cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(subscriptionData);
  if (dataCartridgeAlias != null && !dataCartridgeAlias.trim().isEmpty()) {
  }
  for (  Property lbRefProperty : lbRefProp) {
    properties.addProperties(lbRefProperty);
  }
  SubscriptionInfo registerCartridgeSubscription=cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription,properties);
  return registerCartridgeSubscription;
}",0.9825780743211936
116653,"@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.HEALTH_STAT_TOPIC);
    topicSubscriber.setMessageListener(new HealthStatEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated)     ;
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.HEALTH_STAT_TOPIC);
    topicSubscriber.setMessageListener(new HealthStatEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.897196261682243
116654,"@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.INSTANCE_NOTIFIER_TOPIC);
    topicSubscriber.setMessageListener(new InstanceNotifierEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated)     ;
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.INSTANCE_NOTIFIER_TOPIC);
    topicSubscriber.setMessageListener(new InstanceNotifierEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.9201413427561838
116655,"@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.TENANT_TOPIC);
    topicSubscriber.setMessageListener(new TenantEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated)     ;
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.TENANT_TOPIC);
    topicSubscriber.setMessageListener(new TenantEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.8958485069191552
116656,"@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.TOPOLOGY_TOPIC);
    topicSubscriber.setMessageListener(new TopologyEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated)     ;
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    topicSubscriber=new TopicSubscriber(Constants.TOPOLOGY_TOPIC);
    topicSubscriber.setMessageListener(new TopologyEventMessageListener());
    Thread subscriberThread=new Thread(topicSubscriber);
    subscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    Thread receiverThread=new Thread(messageDelegator);
    receiverThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    while (!terminated) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.8964518464880521
116657,"@Override public void run(){
  try {
    while (true) {
      threadBarrier.pass();
      Iterator it=timeStampMap.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry pair=(Map.Entry)it.next();
        long currentTime=System.currentTimeMillis();
        InEvent event=(InEvent)pair.getValue();
        if ((currentTime - event.getTimeStamp()) / MILI_TO_MINUTE > TIME_OUT) {
          log.info(""String_Node_Str"" + pair.getKey() + ""String_Node_Str""+ ""String_Node_Str""+ TIME_OUT+ ""String_Node_Str"");
          it.remove();
          log.debug(""String_Node_Str"" + pair.getKey() + ""String_Node_Str""+ ""String_Node_Str""+ TIME_OUT+ ""String_Node_Str"");
          nextProcessor.process(event);
        }
      }
    }
  }
 catch (  Throwable t) {
    log.error(t.getMessage(),t);
  }
}","@Override public void run(){
  try {
    while (true) {
      threadBarrier.pass();
      Iterator it=timeStampMap.entrySet().iterator();
      while (it.hasNext()) {
        Map.Entry pair=(Map.Entry)it.next();
        long currentTime=System.currentTimeMillis();
        InEvent event=(InEvent)pair.getValue();
        if ((currentTime - event.getTimeStamp()) / MILI_TO_MINUTE > TIME_OUT) {
          log.info(""String_Node_Str"" + pair.getKey() + ""String_Node_Str""+ ""String_Node_Str""+ TIME_OUT+ ""String_Node_Str"");
          it.remove();
          log.debug(""String_Node_Str"" + pair.getKey() + ""String_Node_Str""+ ""String_Node_Str""+ TIME_OUT+ ""String_Node_Str"");
          nextProcessor.process(event);
        }
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
 catch (  Throwable t) {
    log.error(t.getMessage(),t);
  }
}",0.9402013025458852
116658,"public Set<Cluster> getClusters(int tenantId,String cartridgeType){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  readLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        CartridgeTypeContext cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeType != null) {
          if (cartridgeTypeContext.equals(new CartridgeTypeContext(cartridgeType))) {
            subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
            if (subscriptionAliasContextSet != null) {
              Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
              while (aliasCtxIterator.hasNext()) {
                Cluster cluster=aliasCtxIterator.next().getCluster();
                clusterSet.add(cluster);
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ cluster.toString());
                  Collection<Member> members=cluster.getMembers();
                  if (members != null && !members.isEmpty()) {
                    for (                    Member member : members) {
                      log.debug(""String_Node_Str"" + member.getServiceName() + ""String_Node_Str""+ member.getClusterId()+ ""String_Node_Str""+ member.getMemberId()+ ""String_Node_Str"");
                    }
                  }
                }
              }
            }
          }
        }
 else {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          if (subscriptionAliasContextSet != null) {
            Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
            clusterSet=new HashSet<Cluster>();
            while (aliasCtxIterator.hasNext()) {
              Cluster cluster=aliasCtxIterator.next().getCluster();
              clusterSet.add(cluster);
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ cluster.toString());
                Collection<Member> members=cluster.getMembers();
                if (members != null && !members.isEmpty()) {
                  for (                  Member member : members) {
                    log.debug(""String_Node_Str"" + member.getServiceName() + ""String_Node_Str""+ member.getClusterId()+ ""String_Node_Str""+ member.getMemberId()+ ""String_Node_Str"");
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  finally {
    readLock.unlock();
  }
  return clusterSet;
}","public Set<Cluster> getClusters(int tenantId,String cartridgeType){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  Set<Cluster> clusterSet=new HashSet<Cluster>();
  readLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        CartridgeTypeContext cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeType != null) {
          if (cartridgeTypeContext.equals(new CartridgeTypeContext(cartridgeType))) {
            subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
            if (subscriptionAliasContextSet != null) {
              Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
              while (aliasCtxIterator.hasNext()) {
                Cluster cluster=aliasCtxIterator.next().getCluster();
                clusterSet.add(cluster);
                if (log.isDebugEnabled()) {
                  log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ cluster.toString());
                  Collection<Member> members=cluster.getMembers();
                  if (members != null && !members.isEmpty()) {
                    for (                    Member member : members) {
                      log.debug(""String_Node_Str"" + member.getServiceName() + ""String_Node_Str""+ member.getClusterId()+ ""String_Node_Str""+ member.getMemberId()+ ""String_Node_Str"");
                    }
                  }
                }
              }
            }
          }
        }
 else {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          if (subscriptionAliasContextSet != null) {
            Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
            while (aliasCtxIterator.hasNext()) {
              Cluster cluster=aliasCtxIterator.next().getCluster();
              clusterSet.add(cluster);
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ cluster.toString());
                Collection<Member> members=cluster.getMembers();
                if (members != null && !members.isEmpty()) {
                  for (                  Member member : members) {
                    log.debug(""String_Node_Str"" + member.getServiceName() + ""String_Node_Str""+ member.getClusterId()+ ""String_Node_Str""+ member.getMemberId()+ ""String_Node_Str"");
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  finally {
    readLock.unlock();
  }
  return clusterSet;
}",0.9919671850965648
116659,"public void listSubscribedCartridges(final boolean full) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgesRestEndpoint,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    CartridgeList cartridgeList=gson.fromJson(resultString,CartridgeList.class);
    if (cartridgeList == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    CartridgeList applicationCartridgeList=new CartridgeList();
    List<Cartridge> allCartridges=cartridgeList.getCartridge();
    for (    Cartridge cartridge : allCartridges) {
      if (!cartridge.getProvider().equals(""String_Node_Str"")) {
        applicationCartridgeList.getCartridge().add(cartridge);
      }
    }
    Cartridge[] cartridges=new Cartridge[applicationCartridgeList.getCartridge().size()];
    cartridges=applicationCartridgeList.getCartridge().toArray(cartridges);
    if (cartridges.length == 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
      return;
    }
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      public String[] getData(      Cartridge cartridge){
        String[] data=full ? new String[11] : new String[9];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        data[3]=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
        data[4]=cartridge.getCartridgeAlias();
        data[5]=cartridge.getStatus();
        data[6]=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
        data[7]=cartridge.getLbClusterId();
        data[8]=cartridge.getHostName();
        if (full) {
          data[9]=getAccessURLs(cartridge);
          data[10]=cartridge.getRepoURL() != null ? cartridge.getRepoURL() : ""String_Node_Str"";
        }
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    if (full) {
      headers.add(""String_Node_Str"");
      headers.add(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(cartridges,cartridgeMapper,headers.toArray(new String[headers.size()]));
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public void listSubscribedCartridges(final boolean full) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgesRestEndpoint,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    CartridgeList cartridgeList=gson.fromJson(resultString,CartridgeList.class);
    if (cartridgeList == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    CartridgeList applicationCartridgeList=new CartridgeList();
    List<Cartridge> allCartridges=cartridgeList.getCartridge();
    for (    Cartridge cartridge : allCartridges) {
      if (!cartridge.isLoadBalancer()) {
        applicationCartridgeList.getCartridge().add(cartridge);
      }
    }
    Cartridge[] cartridges=new Cartridge[applicationCartridgeList.getCartridge().size()];
    cartridges=applicationCartridgeList.getCartridge().toArray(cartridges);
    if (cartridges.length == 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
      return;
    }
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      public String[] getData(      Cartridge cartridge){
        String[] data=full ? new String[10] : new String[8];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        data[3]=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
        data[4]=cartridge.getCartridgeAlias();
        data[5]=cartridge.getStatus();
        data[6]=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
        data[7]=cartridge.getHostName();
        if (full) {
          data[8]=getAccessURLs(cartridge);
          data[9]=cartridge.getRepoURL() != null ? cartridge.getRepoURL() : ""String_Node_Str"";
        }
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    if (full) {
      headers.add(""String_Node_Str"");
      headers.add(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(cartridges,cartridgeMapper,headers.toArray(new String[headers.size()]));
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.9504262709188508
116660,"private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(cluster.getClusterId());
            if (cartridgeSubscriptions != null) {
              for (              CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
                TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
              }
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterCreatedEvent clustercreatedEvent=(ClusterCreatedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clustercreatedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new InstanceSpawnedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      InstanceSpawnedEvent instanceSpawnedEvent=(InstanceSpawnedEvent)event;
      String clusterDomain=instanceSpawnedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberStartedEvent memberStartedEvent=(MemberStartedEvent)event;
      String clusterDomain=memberStartedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      String clusterDomain=memberActivatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberSuspendedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberSuspendedEvent memberSuspendedEvent=(MemberSuspendedEvent)event;
      String clusterDomain=memberSuspendedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
      String clusterDomain=memberTerminatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            Member terminatedMember=cluster.getMember(memberTerminatedEvent.getMemberId());
            cluster.removeMember(terminatedMember);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + memberTerminatedEvent.getMemberId() + ""String_Node_Str"");
            }
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  return processorChain;
}","private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(cluster.getClusterId());
            if (cartridgeSubscriptions != null) {
              for (              CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
                TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
              }
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterCreatedEvent clustercreatedEvent=(ClusterCreatedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clustercreatedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new InstanceSpawnedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      InstanceSpawnedEvent instanceSpawnedEvent=(InstanceSpawnedEvent)event;
      String clusterDomain=instanceSpawnedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberStartedEvent memberStartedEvent=(MemberStartedEvent)event;
      String clusterDomain=memberStartedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      String clusterDomain=memberActivatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberSuspendedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberSuspendedEvent memberSuspendedEvent=(MemberSuspendedEvent)event;
      String clusterDomain=memberSuspendedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
      String clusterDomain=memberTerminatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            if (cluster.memberExists(memberTerminatedEvent.getMemberId())) {
              Member terminatedMember=cluster.getMember(memberTerminatedEvent.getMemberId());
              cluster.removeMember(terminatedMember);
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + memberTerminatedEvent.getMemberId() + ""String_Node_Str"");
              }
            }
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  return processorChain;
}",0.9933304778804382
116661,"@Override protected void onEvent(Event event){
  log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
  MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
  String clusterDomain=memberTerminatedEvent.getClusterId();
  Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
  if (cartridgeSubscriptions != null) {
    Cluster cluster;
    TopologyManager.acquireReadLock();
    try {
      for (      CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
        cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
        Member terminatedMember=cluster.getMember(memberTerminatedEvent.getMemberId());
        cluster.removeMember(terminatedMember);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + memberTerminatedEvent.getMemberId() + ""String_Node_Str"");
        }
        TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
      }
    }
  finally {
      TopologyManager.releaseReadLock();
    }
  }
}","@Override protected void onEvent(Event event){
  log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
  MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
  String clusterDomain=memberTerminatedEvent.getClusterId();
  Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
  if (cartridgeSubscriptions != null) {
    Cluster cluster;
    TopologyManager.acquireReadLock();
    try {
      for (      CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
        cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
        if (cluster.memberExists(memberTerminatedEvent.getMemberId())) {
          Member terminatedMember=cluster.getMember(memberTerminatedEvent.getMemberId());
          cluster.removeMember(terminatedMember);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + memberTerminatedEvent.getMemberId() + ""String_Node_Str"");
          }
        }
        TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
      }
    }
  finally {
      TopologyManager.releaseReadLock();
    }
  }
}",0.9553050913330744
116662,"private void printLBs(String resultString){
  Cluster cluster=getClusterObjectFromString(resultString);
  if (cluster == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  Member[] members=new Member[cluster.getMember().size()];
  members=cluster.getMember().toArray(members);
  if (members.length == 0) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    return;
  }
  RowMapper<Member> memberMapper=new RowMapper<Member>(){
    public String[] getData(    Member member){
      String[] data=new String[8];
      data[0]=member.getServiceName();
      data[1]=member.getClusterId();
      data[2]=member.getNetworkPartitionId();
      data[3]=member.getPartitionId();
      data[4]=member.getMemberIp();
      data[5]=member.getStatus().toString();
      data[6]=member.getLbClusterId() != null ? member.getLbClusterId() : ""String_Node_Str"";
      data[7]=member.getMemberPublicIp().toString();
      return data;
    }
  }
;
  List<String> headers=new ArrayList<String>();
  headers.add(""String_Node_Str"");
  headers.add(""String_Node_Str"");
  headers.add(""String_Node_Str"");
  headers.add(""String_Node_Str"");
  headers.add(""String_Node_Str"");
  headers.add(""String_Node_Str"");
  headers.add(""String_Node_Str"");
  headers.add(""String_Node_Str"");
  CommandLineUtils.printTable(members,memberMapper,headers.toArray(new String[headers.size()]));
}","private void printLBs(String resultString){
  Cluster cluster=getClusterObjectFromString(resultString);
  if (cluster == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  Member[] members=new Member[cluster.getMember().size()];
  members=cluster.getMember().toArray(members);
  if (members.length == 0) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  Member member : members) {
    System.out.println(""String_Node_Str"" + member.getServiceName());
    System.out.println(""String_Node_Str"" + member.getClusterId());
    System.out.println(""String_Node_Str"" + member.getNetworkPartitionId());
    System.out.println(""String_Node_Str"" + member.getPartitionId());
    System.out.println(""String_Node_Str"" + member.getStatus());
    if (member.getLbClusterId() != null) {
      System.out.println(""String_Node_Str"" + member.getLbClusterId());
    }
    System.out.println(""String_Node_Str"" + member.getMemberIp());
    System.out.println(""String_Node_Str"" + member.getMemberPublicIp());
    System.out.println(""String_Node_Str"");
  }
}",0.4855268236202238
116663,"public void listSubscribedCartridgeInfo(String alias) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgeInfoRestEndpoint + alias,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    CartridgeList cartridgeList=gson.fromJson(resultString,CartridgeList.class);
    Cartridge cartridge=cartridgeList.getCartridge().get(0);
    if (cartridge == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    Map<String,Set<String>> lbIpMap=getLbIpList(cartridge,httpClient);
    final Set<String> lbPrivateIpSet=lbIpMap.get(""String_Node_Str"");
    final Set<String> lbFloatingIpSet=lbIpMap.get(""String_Node_Str"");
    Cartridge[] cartridges=new Cartridge[1];
    cartridges[0]=cartridge;
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      public String[] getData(      Cartridge cartridge){
        String[] data=lbFloatingIpSet != null ? new String[13] : new String[12];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        data[3]=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
        data[4]=cartridge.getCartridgeAlias();
        data[5]=cartridge.getStatus();
        data[6]=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
        data[7]=getAccessURLs(cartridge);
        data[8]=cartridge.getRepoURL() != null ? cartridge.getRepoURL() : ""String_Node_Str"";
        data[9]=lbPrivateIpSet.toString();
        if (lbFloatingIpSet != null) {
          data[10]=lbFloatingIpSet.toString();
        }
        data[11]=cartridge.getDbUserName();
        data[12]=cartridge.getPassword();
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    if (lbFloatingIpSet != null) {
      headers.add(""String_Node_Str"");
    }
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(cartridges,cartridgeMapper,headers.toArray(new String[headers.size()]));
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public void listSubscribedCartridgeInfo(String alias) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgeInfoRestEndpoint + alias,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    CartridgeList cartridgeList=gson.fromJson(resultString,CartridgeList.class);
    Cartridge cartridge=cartridgeList.getCartridge().get(0);
    if (cartridge == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    Map<String,Set<String>> lbIpMap=getLbIpList(cartridge,httpClient);
    final Set<String> lbPrivateIpSet=lbIpMap.get(""String_Node_Str"");
    final Set<String> lbFloatingIpSet=lbIpMap.get(""String_Node_Str"");
    Cartridge[] cartridges=new Cartridge[1];
    cartridges[0]=cartridge;
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + cartridge.getCartridgeType());
    System.out.println(""String_Node_Str"" + cartridge.getDisplayName());
    System.out.println(""String_Node_Str"" + cartridge.getVersion());
    String tenancy=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
    System.out.println(""String_Node_Str"" + tenancy);
    System.out.println(""String_Node_Str"" + cartridge.getCartridgeAlias());
    System.out.println(""String_Node_Str"" + cartridge.getStatus());
    String instanceCount=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
    System.out.println(""String_Node_Str"" + instanceCount);
    System.out.println(""String_Node_Str"" + getAccessURLs(cartridge));
    if (cartridge.getRepoURL() != null) {
      System.out.println(""String_Node_Str"" + cartridge.getRepoURL());
    }
    System.out.println(""String_Node_Str"" + lbPrivateIpSet.toString());
    if (lbFloatingIpSet != null) {
      System.out.println(""String_Node_Str"" + lbFloatingIpSet.toString());
    }
    if (cartridge.getProvider().equals(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + cartridge.getDbUserName());
      System.out.println(""String_Node_Str"" + cartridge.getPassword());
      System.out.println(""String_Node_Str"" + cartridge.getIp());
      if (cartridge.getPublicIp() != null) {
        System.out.println(""String_Node_Str"" + cartridge.getPublicIp());
      }
    }
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.656422248204443
116664,"private Map<String,Set<String>> getLbIpList(Cartridge cartridge,DefaultHttpClient httpClient){
  Map<String,Set<String>> privateFloatingLBIPMap=new HashMap<String,Set<String>>();
  Set<String> lbFloatingIpSet=new HashSet<String>();
  Set<String> lbPrivateIpSet=new HashSet<String>();
  Member[] members=getMembers(cartridge.getCartridgeType(),cartridge.getCartridgeAlias(),httpClient);
  Set<String> lbClusterIdSet=new HashSet<String>();
  for (  Member member : members) {
    lbClusterIdSet.add(member.getLbClusterId());
  }
  for (  String clusterId : lbClusterIdSet) {
    HttpResponse responseCluster=restClientService.doGet(httpClient,restClientService.getUrl() + listClusterRestEndpoint + ""String_Node_Str""+ clusterId,restClientService.getUsername(),restClientService.getPassword());
    String resultStringCluster=getHttpResponseString(responseCluster);
    Cluster cluster=getClusterObjectFromString(resultStringCluster);
    if (cluster == null) {
      System.out.println(""String_Node_Str"");
      return null;
    }
    Member[] lbMembers=new Member[cluster.getMember().size()];
    lbMembers=cluster.getMember().toArray(lbMembers);
    for (    Member lbMember : lbMembers) {
      lbPrivateIpSet.add(lbMember.getMemberIp());
      lbFloatingIpSet.add(lbMember.getMemberPublicIp());
    }
  }
  privateFloatingLBIPMap.put(""String_Node_Str"",lbPrivateIpSet);
  privateFloatingLBIPMap.put(""String_Node_Str"",lbFloatingIpSet);
  return privateFloatingLBIPMap;
}","private Map<String,Set<String>> getLbIpList(Cartridge cartridge,DefaultHttpClient httpClient){
  Map<String,Set<String>> privateFloatingLBIPMap=new HashMap<String,Set<String>>();
  Set<String> lbFloatingIpSet=new HashSet<String>();
  Set<String> lbPrivateIpSet=new HashSet<String>();
  Member[] members=getMembers(cartridge.getCartridgeType(),cartridge.getCartridgeAlias(),httpClient);
  Set<String> lbClusterIdSet=new HashSet<String>();
  for (  Member member : members) {
    lbClusterIdSet.add(member.getLbClusterId());
    cartridge.setIp(member.getMemberIp());
    cartridge.setPublicIp(member.getMemberPublicIp());
  }
  for (  String clusterId : lbClusterIdSet) {
    HttpResponse responseCluster=restClientService.doGet(httpClient,restClientService.getUrl() + listClusterRestEndpoint + ""String_Node_Str""+ clusterId,restClientService.getUsername(),restClientService.getPassword());
    String resultStringCluster=getHttpResponseString(responseCluster);
    Cluster cluster=getClusterObjectFromString(resultStringCluster);
    if (cluster == null) {
      System.out.println(""String_Node_Str"");
      return null;
    }
    Member[] lbMembers=new Member[cluster.getMember().size()];
    lbMembers=cluster.getMember().toArray(lbMembers);
    for (    Member lbMember : lbMembers) {
      lbPrivateIpSet.add(lbMember.getMemberIp());
      lbFloatingIpSet.add(lbMember.getMemberPublicIp());
    }
  }
  privateFloatingLBIPMap.put(""String_Node_Str"",lbPrivateIpSet);
  privateFloatingLBIPMap.put(""String_Node_Str"",lbFloatingIpSet);
  return privateFloatingLBIPMap;
}",0.9677206851119896
116665,"public void listMembersOfCluster(String cartridgeType,String alias) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    Member[] members=getMembers(cartridgeType,alias,httpClient);
    if (members.length == 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
      return;
    }
    RowMapper<Member> memberMapper=new RowMapper<Member>(){
      public String[] getData(      Member member){
        String[] data=new String[8];
        data[0]=member.getServiceName();
        data[1]=member.getClusterId();
        data[2]=member.getNetworkPartitionId();
        data[3]=member.getPartitionId();
        data[4]=member.getMemberIp();
        data[5]=member.getStatus().toString();
        data[6]=member.getLbClusterId() != null ? member.getLbClusterId() : ""String_Node_Str"";
        data[7]=member.getMemberPublicIp().toString();
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + alias);
    CommandLineUtils.printTable(members,memberMapper,headers.toArray(new String[headers.size()]));
    System.out.println(""String_Node_Str"" + ""String_Node_Str"");
    for (    Member m : members) {
      HttpResponse responseCluster=restClientService.doGet(httpClient,restClientService.getUrl() + listClusterRestEndpoint + ""String_Node_Str""+ m.getLbClusterId(),restClientService.getUsername(),restClientService.getPassword());
      String resultStringCluster=getHttpResponseString(responseCluster);
      printLBs(resultStringCluster);
    }
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public void listMembersOfCluster(String cartridgeType,String alias) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    Member[] members=getMembers(cartridgeType,alias,httpClient);
    if (members.length == 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
      return;
    }
    System.out.println(""String_Node_Str"" + alias);
    for (    Member member : members) {
      System.out.println(""String_Node_Str"" + member.getServiceName());
      System.out.println(""String_Node_Str"" + member.getClusterId());
      System.out.println(""String_Node_Str"" + member.getNetworkPartitionId());
      System.out.println(""String_Node_Str"" + member.getPartitionId());
      System.out.println(""String_Node_Str"" + member.getStatus());
      if (member.getLbClusterId() != null) {
        System.out.println(""String_Node_Str"" + member.getLbClusterId());
      }
      System.out.println(""String_Node_Str"" + member.getMemberIp());
      System.out.println(""String_Node_Str"" + member.getMemberPublicIp());
      System.out.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + alias);
    for (    Member m : members) {
      HttpResponse responseCluster=restClientService.doGet(httpClient,restClientService.getUrl() + listClusterRestEndpoint + ""String_Node_Str""+ m.getLbClusterId(),restClientService.getUsername(),restClientService.getPassword());
      String resultStringCluster=getHttpResponseString(responseCluster);
      printLBs(resultStringCluster);
    }
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.6152647975077882
116666,"public static void handleMemberSpawned(String memberId,String serviceName,String clusterId,String networkPartitionId,String partitionId,String privateIp,String lbClusterId,String publicIp){
  Topology topology=TopologyManager.getTopology();
  Service service=topology.getService(serviceName);
  Cluster cluster=service.getCluster(clusterId);
  if (cluster.memberExists(memberId)) {
    throw new RuntimeException(String.format(""String_Node_Str"",memberId));
  }
  try {
    TopologyManager.acquireWriteLock();
    Member member=new Member(serviceName,clusterId,networkPartitionId,partitionId,memberId);
    member.setStatus(MemberStatus.Created);
    member.setMemberIp(privateIp);
    member.setLbClusterId(lbClusterId);
    member.setMemberPublicIp(publicIp);
    cluster.addMember(member);
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendInstanceSpawnedEvent(serviceName,clusterId,networkPartitionId,partitionId,memberId,lbClusterId);
}","public static void handleMemberSpawned(String memberId,String serviceName,String clusterId,String networkPartitionId,String partitionId,String privateIp,String lbClusterId,String publicIp){
  Topology topology=TopologyManager.getTopology();
  Service service=topology.getService(serviceName);
  Cluster cluster=service.getCluster(clusterId);
  if (cluster.memberExists(memberId)) {
    throw new RuntimeException(String.format(""String_Node_Str"",memberId));
  }
  try {
    TopologyManager.acquireWriteLock();
    Member member=new Member(serviceName,clusterId,networkPartitionId,partitionId,memberId);
    member.setStatus(MemberStatus.Created);
    member.setMemberIp(privateIp);
    member.setLbClusterId(lbClusterId);
    member.setMemberPublicIp(publicIp);
    cluster.addMember(member);
    TopologyManager.updateTopology(topology);
  }
  finally {
    TopologyManager.releaseWriteLock();
  }
  TopologyEventPublisher.sendInstanceSpawnedEvent(serviceName,clusterId,networkPartitionId,partitionId,memberId,lbClusterId,publicIp,privateIp);
}",0.9908168197196714
116667,"public static void sendInstanceSpawnedEvent(String serviceName,String clusterId,String networkPartitionId,String partitionId,String memberId,String lbClusterId){
  InstanceSpawnedEvent instanceSpawnedEvent=new InstanceSpawnedEvent(serviceName,clusterId,networkPartitionId,partitionId,memberId);
  instanceSpawnedEvent.setLbClusterId(lbClusterId);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",serviceName,clusterId,networkPartitionId,partitionId,memberId,lbClusterId));
  }
  publishEvent(instanceSpawnedEvent);
}","public static void sendInstanceSpawnedEvent(String serviceName,String clusterId,String networkPartitionId,String partitionId,String memberId,String lbClusterId,String publicIp,String privateIp){
  InstanceSpawnedEvent instanceSpawnedEvent=new InstanceSpawnedEvent(serviceName,clusterId,networkPartitionId,partitionId,memberId);
  instanceSpawnedEvent.setLbClusterId(lbClusterId);
  instanceSpawnedEvent.setMemberIp(privateIp);
  instanceSpawnedEvent.setMemberPublicIp(publicIp);
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",serviceName,clusterId,networkPartitionId,partitionId,memberId,lbClusterId));
  }
  publishEvent(instanceSpawnedEvent);
}",0.8912685337726524
116668,"private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(cluster.getClusterId());
            if (cartridgeSubscriptions != null) {
              for (              CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
                TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
              }
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterCreatedEvent clustercreatedEvent=(ClusterCreatedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clustercreatedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterRemovedEvent clusterRemovedEvent=(ClusterRemovedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterRemovedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        for (        CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
          TopologyClusterInformationModel.getInstance().removeCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias());
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberStartedEvent memberStartedEvent=(MemberStartedEvent)event;
      String clusterDomain=memberStartedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      String clusterDomain=memberActivatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberSuspendedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberSuspendedEvent memberSuspendedEvent=(MemberSuspendedEvent)event;
      String clusterDomain=memberSuspendedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
      String clusterDomain=memberTerminatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  return processorChain;
}","private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(cluster.getClusterId());
            if (cartridgeSubscriptions != null) {
              for (              CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
                TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
              }
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterCreatedEvent clustercreatedEvent=(ClusterCreatedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clustercreatedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterRemovedEvent clusterRemovedEvent=(ClusterRemovedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterRemovedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        for (        CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
          TopologyClusterInformationModel.getInstance().removeCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias());
        }
      }
    }
  }
);
  processorChain.addEventListener(new InstanceSpawnedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      InstanceSpawnedEvent instanceSpawnedEvent=(InstanceSpawnedEvent)event;
      String clusterDomain=instanceSpawnedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberStartedEvent memberStartedEvent=(MemberStartedEvent)event;
      String clusterDomain=memberStartedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      String clusterDomain=memberActivatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberSuspendedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberSuspendedEvent memberSuspendedEvent=(MemberSuspendedEvent)event;
      String clusterDomain=memberSuspendedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
      String clusterDomain=memberTerminatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  return processorChain;
}",0.929097490949944
116669,"@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (InstanceSpawnedEvent.class.getName().equals(type)) {
    if (!topology.isInitialized())     return false;
    InstanceSpawnedEvent event=(InstanceSpawnedEvent)Util.jsonToObject(message,InstanceSpawnedEvent.class);
    if (TopologyServiceFilter.getInstance().isActive()) {
      if (TopologyServiceFilter.getInstance().serviceNameExcluded(event.getServiceName())) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getServiceName()));
        }
        return false;
      }
    }
    if (TopologyClusterFilter.getInstance().isActive()) {
      if (TopologyClusterFilter.getInstance().clusterIdExcluded(event.getClusterId())) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getClusterId()));
        }
        return false;
      }
    }
    if (TopologyMemberFilter.getInstance().isActive()) {
      if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(event.getLbClusterId())) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getLbClusterId()));
        }
        return false;
      }
    }
    Service service=topology.getService(event.getServiceName());
    if (service == null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",event.getServiceName()));
      }
      return false;
    }
    Cluster cluster=service.getCluster(event.getClusterId());
    if (cluster == null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId()));
      }
      return false;
    }
    if (cluster.memberExists(event.getMemberId())) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId(),event.getMemberId()));
      }
      return false;
    }
    Member member=new Member(event.getServiceName(),event.getClusterId(),event.getNetworkPartitionId(),event.getPartitionId(),event.getMemberId());
    member.setStatus(MemberStatus.Created);
    member.setLbClusterId(event.getLbClusterId());
    cluster.addMember(member);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId(),event.getMemberId()));
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"",type,message));
    }
  }
}","@Override public boolean process(String type,String message,Object object){
  Topology topology=(Topology)object;
  if (InstanceSpawnedEvent.class.getName().equals(type)) {
    if (!topology.isInitialized())     return false;
    InstanceSpawnedEvent event=(InstanceSpawnedEvent)Util.jsonToObject(message,InstanceSpawnedEvent.class);
    if (TopologyServiceFilter.getInstance().isActive()) {
      if (TopologyServiceFilter.getInstance().serviceNameExcluded(event.getServiceName())) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getServiceName()));
        }
        return false;
      }
    }
    if (TopologyClusterFilter.getInstance().isActive()) {
      if (TopologyClusterFilter.getInstance().clusterIdExcluded(event.getClusterId())) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getClusterId()));
        }
        return false;
      }
    }
    if (TopologyMemberFilter.getInstance().isActive()) {
      if (TopologyMemberFilter.getInstance().lbClusterIdExcluded(event.getLbClusterId())) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getLbClusterId()));
        }
        return false;
      }
    }
    Service service=topology.getService(event.getServiceName());
    if (service == null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",event.getServiceName()));
      }
      return false;
    }
    Cluster cluster=service.getCluster(event.getClusterId());
    if (cluster == null) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId()));
      }
      return false;
    }
    if (cluster.memberExists(event.getMemberId())) {
      if (log.isWarnEnabled()) {
        log.warn(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId(),event.getMemberId()));
      }
      return false;
    }
    Member member=new Member(event.getServiceName(),event.getClusterId(),event.getNetworkPartitionId(),event.getPartitionId(),event.getMemberId());
    member.setStatus(MemberStatus.Created);
    member.setMemberPublicIp(event.getMemberPublicIp());
    member.setMemberIp(event.getMemberIp());
    member.setLbClusterId(event.getLbClusterId());
    cluster.addMember(member);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",event.getServiceName(),event.getClusterId(),event.getMemberId()));
    }
    notifyEventListeners(event);
    return true;
  }
 else {
    if (nextProcessor != null) {
      return nextProcessor.process(type,message,topology);
    }
 else {
      throw new RuntimeException(String.format(""String_Node_Str"",type,message));
    }
  }
}",0.9812292970187708
116670,"@POST @Path(""String_Node_Str"") public void initialize() throws RestAPIException {
}","@POST @Path(""String_Node_Str"") @AuthorizationAction(""String_Node_Str"") public void initialize() throws RestAPIException {
}",0.8058252427184466
116671,"private org.apache.axis2.clustering.Member findNextMember(MessageContext synCtx){
  String targetHost=extractTargetHost(synCtx);
  if (!requestDelegator.isTargetHostValid(targetHost)) {
    throwSynapseException(synCtx,404,String.format(""String_Node_Str"",targetHost));
  }
  Member member=null;
  if (LoadBalancerConfiguration.getInstance().isMultiTenancyEnabled()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    String url=extractUrl(synCtx);
    int tenantId=scanUrlForTenantId(url);
    if (tenantExists(tenantId)) {
      member=requestDelegator.findNextMemberFromTenantId(targetHost,tenantId);
    }
 else {
      member=requestDelegator.findNextMemberFromHostName(targetHost);
    }
  }
 else {
    member=requestDelegator.findNextMemberFromHostName(targetHost);
  }
  if (member == null)   return null;
  String transport=extractTransport(synCtx);
  Port transportPort=member.getPort(transport);
  if (transportPort == null) {
    if (log.isErrorEnabled()) {
      log.error(String.format(""String_Node_Str"",transport,member.getMemberId()));
    }
    throwSynapseException(synCtx,500,""String_Node_Str"");
  }
  int memberPort=transportPort.getValue();
  org.apache.axis2.clustering.Member axis2Member=new org.apache.axis2.clustering.Member(getMemberIp(synCtx,member),memberPort);
  axis2Member.setDomain(member.getClusterId());
  Port httpPort=member.getPort(""String_Node_Str"");
  if (httpPort != null)   axis2Member.setHttpPort(httpPort.getValue());
  Port httpsPort=member.getPort(""String_Node_Str"");
  if (httpsPort != null)   axis2Member.setHttpsPort(httpsPort.getValue());
  axis2Member.setActive(member.isActive());
  synCtx.setProperty(Constants.CLUSTER_ID,member.getClusterId());
  return axis2Member;
}","private org.apache.axis2.clustering.Member findNextMember(MessageContext synCtx){
  String targetHost=extractTargetHost(synCtx);
  if (!requestDelegator.isTargetHostValid(targetHost)) {
    throwSynapseException(synCtx,404,String.format(""String_Node_Str"",targetHost));
  }
  Member member=null;
  if (LoadBalancerConfiguration.getInstance().isMultiTenancyEnabled()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    String url=extractUrl(synCtx);
    int tenantId=scanUrlForTenantId(url);
    if (tenantExists(tenantId)) {
      member=requestDelegator.findNextMemberFromTenantId(targetHost,tenantId);
    }
 else {
      member=requestDelegator.findNextMemberFromHostName(targetHost);
    }
  }
 else {
    member=requestDelegator.findNextMemberFromHostName(targetHost);
  }
  if (member == null)   return null;
  String transport=extractTransport(synCtx);
  Port transportPort=member.getPort(transport);
  if (transportPort == null) {
    if (log.isErrorEnabled()) {
      log.error(String.format(""String_Node_Str"",transport,member.getMemberId()));
    }
    throwSynapseException(synCtx,500,""String_Node_Str"");
  }
  int memberPort=transportPort.getValue();
  org.apache.axis2.clustering.Member axis2Member=new org.apache.axis2.clustering.Member(getMemberIp(synCtx,member),memberPort);
  axis2Member.setDomain(member.getClusterId());
  Port httpPort=member.getPort(""String_Node_Str"");
  if (httpPort != null)   axis2Member.setHttpPort(httpPort.getValue());
  Port httpsPort=member.getPort(""String_Node_Str"");
  if (httpsPort != null)   axis2Member.setHttpsPort(httpsPort.getValue());
  axis2Member.setActive(member.isActive());
  axis2Member.getProperties().setProperty(Constants.CLUSTER_ID,member.getClusterId());
  return axis2Member;
}",0.9906276625958534
116672,"protected void sendToApplicationMember(MessageContext synCtx,org.apache.axis2.clustering.Member currentMember,DynamicLoadbalanceFaultHandler faultHandler,boolean newSession){
  org.apache.axis2.context.MessageContext axis2MsgCtx=((Axis2MessageContext)synCtx).getAxis2MessageContext();
  axis2MsgCtx.removeProperty(NhttpConstants.REST_URL_POSTFIX);
  String transport=axis2MsgCtx.getTransportIn().getName();
  String address=synCtx.getTo().getAddress();
  int incomingPort=extractPort(synCtx,transport);
  EndpointReference to=getEndpointReferenceAfterURLRewrite(currentMember,transport,address,incomingPort);
  synCtx.setTo(to);
  Endpoint endpoint=getEndpoint(to,currentMember,synCtx);
  if (isFailover()) {
    faultHandler.setTo(to);
    faultHandler.setCurrentMember(currentMember);
    faultHandler.setCurrentEp(endpoint);
    synCtx.pushFaultHandler(faultHandler);
    synCtx.getEnvelope().build();
  }
  if (isSessionAffinityBasedLB() && newSession) {
    prepareEndPointSequence(synCtx,endpoint);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_MEMBER,currentMember);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_DISPATCHER,dispatcher);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_FIRST_MESSAGE_IN_SESSION,Boolean.TRUE);
  }
  Map<String,String> memberHosts;
  if ((memberHosts=(Map<String,String>)currentMember.getProperties().get(HttpSessionDispatcher.HOSTS)) == null) {
    currentMember.getProperties().put(HttpSessionDispatcher.HOSTS,memberHosts=new HashMap<String,String>());
  }
  memberHosts.put(extractTargetHost(synCtx),""String_Node_Str"");
  setupTransportHeaders(synCtx);
  setupLoadBalancerContextProperties(synCtx);
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",to.getAddress()));
    }
    endpoint.send(synCtx);
    incrementInFlightRequestCount(synCtx);
  }
 catch (  Exception e) {
    if (e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      log.fatal(""String_Node_Str"",e);
      System.exit(121);
    }
 else {
      throw new SynapseException(e);
    }
  }
}","protected void sendToApplicationMember(MessageContext synCtx,org.apache.axis2.clustering.Member currentMember,DynamicLoadbalanceFaultHandler faultHandler,boolean newSession){
  org.apache.axis2.context.MessageContext axis2MsgCtx=((Axis2MessageContext)synCtx).getAxis2MessageContext();
  axis2MsgCtx.removeProperty(NhttpConstants.REST_URL_POSTFIX);
  String transport=axis2MsgCtx.getTransportIn().getName();
  String address=synCtx.getTo().getAddress();
  int incomingPort=extractPort(synCtx,transport);
  EndpointReference to=getEndpointReferenceAfterURLRewrite(currentMember,transport,address,incomingPort);
  synCtx.setTo(to);
  Endpoint endpoint=getEndpoint(to,currentMember,synCtx);
  if (isFailover()) {
    faultHandler.setTo(to);
    faultHandler.setCurrentMember(currentMember);
    faultHandler.setCurrentEp(endpoint);
    synCtx.pushFaultHandler(faultHandler);
    synCtx.getEnvelope().build();
  }
  if (isSessionAffinityBasedLB() && newSession) {
    prepareEndPointSequence(synCtx,endpoint);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_MEMBER,currentMember);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_CURRENT_DISPATCHER,dispatcher);
    synCtx.setProperty(SynapseConstants.PROP_SAL_ENDPOINT_FIRST_MESSAGE_IN_SESSION,Boolean.TRUE);
  }
  Map<String,String> memberHosts;
  if ((memberHosts=(Map<String,String>)currentMember.getProperties().get(HttpSessionDispatcher.HOSTS)) == null) {
    currentMember.getProperties().put(HttpSessionDispatcher.HOSTS,memberHosts=new HashMap<String,String>());
  }
  memberHosts.put(extractTargetHost(synCtx),""String_Node_Str"");
  setupTransportHeaders(synCtx);
  setupLoadBalancerContextProperties(synCtx,currentMember);
  try {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",to.getAddress()));
    }
    endpoint.send(synCtx);
    incrementInFlightRequestCount(synCtx);
  }
 catch (  Exception e) {
    if (e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      log.fatal(""String_Node_Str"",e);
      System.exit(121);
    }
 else {
      throw new SynapseException(e);
    }
  }
}",0.996668253212756
116673,"/** 
 * Setup load balancer message context properties to be used by the out block of the main sequence. These values will be used to update the Location value in the response header.
 * @param synCtx
 */
private void setupLoadBalancerContextProperties(MessageContext synCtx){
  String lbHostName=extractTargetHost(synCtx);
  org.apache.axis2.context.MessageContext axis2MsgCtx=((Axis2MessageContext)synCtx).getAxis2MessageContext();
  TransportInDescription httpTransportIn=axis2MsgCtx.getConfigurationContext().getAxisConfiguration().getTransportIn(""String_Node_Str"");
  TransportInDescription httpsTransportIn=axis2MsgCtx.getConfigurationContext().getAxisConfiguration().getTransportIn(""String_Node_Str"");
  String lbHttpPort=(String)httpTransportIn.getParameter(""String_Node_Str"").getValue();
  String lbHttpsPort=(String)httpsTransportIn.getParameter(""String_Node_Str"").getValue();
  synCtx.setProperty(Constants.LB_HOST_NAME,lbHostName);
  synCtx.setProperty(Constants.LB_HTTP_PORT,lbHttpPort);
  synCtx.setProperty(Constants.LB_HTTPS_PORT,lbHttpsPort);
}","/** 
 * Setup load balancer message context properties to be used by the out block of the main sequence. These values will be used to update the Location value in the response header.
 * @param synCtx
 * @param currentMember
 */
private void setupLoadBalancerContextProperties(MessageContext synCtx,org.apache.axis2.clustering.Member currentMember){
  String lbHostName=extractTargetHost(synCtx);
  org.apache.axis2.context.MessageContext axis2MsgCtx=((Axis2MessageContext)synCtx).getAxis2MessageContext();
  TransportInDescription httpTransportIn=axis2MsgCtx.getConfigurationContext().getAxisConfiguration().getTransportIn(""String_Node_Str"");
  TransportInDescription httpsTransportIn=axis2MsgCtx.getConfigurationContext().getAxisConfiguration().getTransportIn(""String_Node_Str"");
  String lbHttpPort=(String)httpTransportIn.getParameter(""String_Node_Str"").getValue();
  String lbHttpsPort=(String)httpsTransportIn.getParameter(""String_Node_Str"").getValue();
  String clusterId=currentMember.getProperties().getProperty(Constants.CLUSTER_ID);
  synCtx.setProperty(Constants.LB_HOST_NAME,lbHostName);
  synCtx.setProperty(Constants.LB_HTTP_PORT,lbHttpPort);
  synCtx.setProperty(Constants.LB_HTTPS_PORT,lbHttpsPort);
  synCtx.setProperty(Constants.CLUSTER_ID,clusterId);
}",0.909558508358337
116674,"public static org.apache.stratos.rest.endpoint.bean.topology.Cluster getCluster(String cartridgeType,String subscriptionAlias,ConfigurationContext configurationContext){
  Cluster cluster=TopologyClusterInformationModel.getInstance().getCluster(ApplicationManagementUtil.getTenantId(configurationContext),cartridgeType,subscriptionAlias);
  return PojoConverter.populateClusterPojos(cluster);
}","public static org.apache.stratos.rest.endpoint.bean.topology.Cluster getCluster(String cartridgeType,String subscriptionAlias,ConfigurationContext configurationContext) throws RestAPIException {
  Cluster cluster=TopologyClusterInformationModel.getInstance().getCluster(ApplicationManagementUtil.getTenantId(configurationContext),cartridgeType,subscriptionAlias);
  if (cluster == null) {
    throw new RestAPIException();
  }
 else {
    return PojoConverter.populateClusterPojos(cluster);
  }
}",0.8696629213483146
116675,"/** 
 * Unsubscribe from a Cartridge
 * @param tenantDomain Tenant's domain
 * @param alias Alias given at subscription time
 * @throws ADCException
 * @throws NotSubscribedException
 */
public void unsubscribeFromCartridge(String tenantDomain,String alias) throws ADCException, NotSubscribedException {
  DataInsertionAndRetrievalManager dataInsertionAndRetrievalManager=new DataInsertionAndRetrievalManager();
  CartridgeSubscription cartridgeSubscription=dataInsertionAndRetrievalManager.getCartridgeSubscription(CarbonContext.getThreadLocalCarbonContext().getTenantId(),alias);
  if (cartridgeSubscription != null) {
    cartridgeSubscription.removeSubscription();
    try {
      dataInsertionAndRetrievalManager.removeSubscription(cartridgeSubscription.getSubscriber().getTenantId(),alias);
    }
 catch (    PersistenceManagerException e) {
      String errorMsg=""String_Node_Str"" + tenantDomain + ""String_Node_Str""+ cartridgeSubscription.getAlias();
      log.error(errorMsg);
      throw new ADCException(errorMsg,e);
    }
    CartridgeSubscriptionUtils.publishTenantUnSubscribedEvent(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getCartridgeInfo().getType());
  }
 else {
    String errorMsg=""String_Node_Str"" + alias + ""String_Node_Str""+ tenantDomain;
    log.error(errorMsg);
    throw new NotSubscribedException(errorMsg,alias);
  }
}","/** 
 * Unsubscribe from a Cartridge
 * @param tenantDomain Tenant's domain
 * @param alias Alias given at subscription time
 * @throws ADCException
 * @throws NotSubscribedException
 */
public void unsubscribeFromCartridge(String tenantDomain,String alias) throws ADCException, NotSubscribedException {
  DataInsertionAndRetrievalManager dataInsertionAndRetrievalManager=new DataInsertionAndRetrievalManager();
  CartridgeSubscription cartridgeSubscription=dataInsertionAndRetrievalManager.getCartridgeSubscription(CarbonContext.getThreadLocalCarbonContext().getTenantId(),alias);
  if (cartridgeSubscription != null) {
    cartridgeSubscription.removeSubscription();
    TopologyClusterInformationModel.getInstance().removeCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias());
    try {
      dataInsertionAndRetrievalManager.removeSubscription(cartridgeSubscription.getSubscriber().getTenantId(),alias);
    }
 catch (    PersistenceManagerException e) {
      String errorMsg=""String_Node_Str"" + tenantDomain + ""String_Node_Str""+ cartridgeSubscription.getAlias();
      log.error(errorMsg);
      throw new ADCException(errorMsg,e);
    }
    CartridgeSubscriptionUtils.publishTenantUnSubscribedEvent(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getCartridgeInfo().getType());
  }
 else {
    String errorMsg=""String_Node_Str"" + alias + ""String_Node_Str""+ tenantDomain;
    log.error(errorMsg);
    throw new NotSubscribedException(errorMsg,alias);
  }
}",0.9376915219611848
116676,"public void addCluster(int tenantId,String cartridgeType,String subscriptionAlias,Cluster cluster){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  writeLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      CartridgeTypeContext cartridgeTypeContext=null;
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeTypeContext.getType().equals(cartridgeType)) {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          break;
        }
      }
      if (subscriptionAliasContextSet == null) {
        SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
        subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
        subscriptionAliasContextSet.add(subscriptionAliasContext);
        cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
        cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
        cartridgeTypeContextSet.add(cartridgeTypeContext);
      }
 else {
        subscriptionAliasContextSet.remove(new SubscriptionAliasContext(subscriptionAlias,null));
        subscriptionAliasContextSet.add(new SubscriptionAliasContext(subscriptionAlias,cluster));
      }
    }
 else {
      SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
      subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
      subscriptionAliasContextSet.add(subscriptionAliasContext);
      CartridgeTypeContext cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
      cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
      cartridgeTypeContextSet=new HashSet<CartridgeTypeContext>();
      cartridgeTypeContextSet.add(cartridgeTypeContext);
      tenantIdToCartridgeTypeContextMap.put(tenantId,cartridgeTypeContextSet);
    }
  }
  finally {
    writeLock.unlock();
  }
}","public void addCluster(int tenantId,String cartridgeType,String subscriptionAlias,Cluster cluster){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  writeLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      CartridgeTypeContext cartridgeTypeContext=null;
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeTypeContext.getType().equals(cartridgeType)) {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          break;
        }
      }
      if (subscriptionAliasContextSet == null) {
        SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
        subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
        subscriptionAliasContextSet.add(subscriptionAliasContext);
        cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
        cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
        cartridgeTypeContextSet.add(cartridgeTypeContext);
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + cluster.toString());
        }
      }
 else {
        subscriptionAliasContextSet.remove(new SubscriptionAliasContext(subscriptionAlias,null));
        subscriptionAliasContextSet.add(new SubscriptionAliasContext(subscriptionAlias,cluster));
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + cluster.toString());
        }
      }
    }
 else {
      SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
      subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
      subscriptionAliasContextSet.add(subscriptionAliasContext);
      CartridgeTypeContext cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
      cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
      cartridgeTypeContextSet=new HashSet<CartridgeTypeContext>();
      cartridgeTypeContextSet.add(cartridgeTypeContext);
      tenantIdToCartridgeTypeContextMap.put(tenantId,cartridgeTypeContextSet);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + cluster.toString());
      }
    }
  }
  finally {
    writeLock.unlock();
  }
}",0.9346066016192652
116677,"public void removeCluster(int tenantId,String cartridgeType,String subscriptionAlias){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  writeLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      CartridgeTypeContext cartridgeTypeContext=null;
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeTypeContext.getType().equals(cartridgeType)) {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          break;
        }
      }
      if (subscriptionAliasContextSet != null) {
        Iterator<SubscriptionAliasContext> aliasIterator=subscriptionAliasContextSet.iterator();
        while (aliasIterator.hasNext()) {
          SubscriptionAliasContext subscriptionAliasContext=aliasIterator.next();
          if (subscriptionAliasContext.getSubscriptionAlias().equals(subscriptionAlias)) {
            aliasIterator.remove();
            break;
          }
        }
      }
    }
  }
  finally {
    writeLock.unlock();
  }
}","public void removeCluster(int tenantId,String cartridgeType,String subscriptionAlias){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  writeLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      CartridgeTypeContext cartridgeTypeContext=null;
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeTypeContext.getType().equals(cartridgeType)) {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          break;
        }
      }
      if (subscriptionAliasContextSet != null) {
        Iterator<SubscriptionAliasContext> aliasIterator=subscriptionAliasContextSet.iterator();
        while (aliasIterator.hasNext()) {
          SubscriptionAliasContext subscriptionAliasContext=aliasIterator.next();
          if (subscriptionAliasContext.getSubscriptionAlias().equals(subscriptionAlias)) {
            aliasIterator.remove();
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ subscriptionAlias);
            }
            break;
          }
        }
      }
    }
  }
  finally {
    writeLock.unlock();
  }
}",0.9341057204923968
116678,"public Set<Cluster> getClusters(int tenantId,String cartridgeType){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  Set<Cluster> clusterSet=null;
  readLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        CartridgeTypeContext cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeType != null) {
          if (cartridgeTypeContext.equals(new CartridgeTypeContext(cartridgeType))) {
            subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
            if (subscriptionAliasContextSet != null) {
              Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
              clusterSet=new HashSet<Cluster>();
              while (aliasCtxIterator.hasNext()) {
                clusterSet.add(aliasCtxIterator.next().getCluster());
              }
            }
          }
        }
 else {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          if (subscriptionAliasContextSet != null) {
            Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
            clusterSet=new HashSet<Cluster>();
            while (aliasCtxIterator.hasNext()) {
              clusterSet.add(aliasCtxIterator.next().getCluster());
            }
          }
        }
      }
    }
  }
  finally {
    readLock.unlock();
  }
  return clusterSet;
}","public Set<Cluster> getClusters(int tenantId,String cartridgeType){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  Set<Cluster> clusterSet=null;
  readLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        CartridgeTypeContext cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeType != null) {
          if (cartridgeTypeContext.equals(new CartridgeTypeContext(cartridgeType))) {
            subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
            if (subscriptionAliasContextSet != null) {
              Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
              clusterSet=new HashSet<Cluster>();
              while (aliasCtxIterator.hasNext()) {
                clusterSet.add(aliasCtxIterator.next().getCluster());
              }
            }
          }
        }
 else {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          if (subscriptionAliasContextSet != null) {
            Iterator<SubscriptionAliasContext> aliasCtxIterator=subscriptionAliasContextSet.iterator();
            clusterSet=new HashSet<Cluster>();
            while (aliasCtxIterator.hasNext()) {
              Cluster cluster=aliasCtxIterator.next().getCluster();
              clusterSet.add(cluster);
              if (log.isDebugEnabled()) {
                log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ cluster.toString());
              }
            }
          }
        }
      }
    }
  }
  finally {
    readLock.unlock();
  }
  return clusterSet;
}",0.9288840262582057
116679,"public int hashCode(){
  int subscriptionAliasHashCode=0;
  if (subscriptionAlias != null) {
    subscriptionAliasHashCode=subscriptionAlias.hashCode();
  }
  return (tenantId * 3 + subscriptionAliasHashCode * 5);
}","public int hashCode(){
  return subscriptionAlias.hashCode();
}",0.4172661870503597
116680,"public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (!(other instanceof TenantIdAndTypeTopologyKey)) {
    return false;
  }
  TenantIdAndTypeTopologyKey that=(TenantIdAndTypeTopologyKey)other;
  return ((this.tenantId == that.tenantId) && (this.subscriptionAlias == that.subscriptionAlias));
}","public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (!(other instanceof SubscriptionAliasContext)) {
    return false;
  }
  SubscriptionAliasContext that=(SubscriptionAliasContext)other;
  return this.subscriptionAlias.equals(that.subscriptionAlias);
}",0.5528455284552846
116681,"private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(cluster.getClusterId());
            if (cartridgeSubscriptions != null) {
              for (              CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
                TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
              }
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterCreatedEvent clustercreatedEvent=(ClusterCreatedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clustercreatedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterRemovedEvent clusterRemovedEvent=(ClusterRemovedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterRemovedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        for (        CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
          TopologyClusterInformationModel.getInstance().removeCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias());
        }
      }
    }
  }
);
  processorChain.addEventListener(new InstanceSpawnedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      InstanceSpawnedEvent instanceSpawnedEvent=(InstanceSpawnedEvent)event;
      String clusterDomain=instanceSpawnedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberStartedEvent memberStartedEvent=(MemberStartedEvent)event;
      String clusterDomain=memberStartedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      String clusterDomain=memberActivatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberSuspendedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberSuspendedEvent memberSuspendedEvent=(MemberSuspendedEvent)event;
      String clusterDomain=memberSuspendedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
      String clusterDomain=memberTerminatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  return processorChain;
}","private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(cluster.getClusterId());
            if (cartridgeSubscriptions != null) {
              for (              CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
                TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
              }
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      ClusterCreatedEvent clustercreatedEvent=(ClusterCreatedEvent)event;
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clustercreatedEvent.getClusterId());
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new InstanceSpawnedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      InstanceSpawnedEvent instanceSpawnedEvent=(InstanceSpawnedEvent)event;
      String clusterDomain=instanceSpawnedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberStartedEvent memberStartedEvent=(MemberStartedEvent)event;
      String clusterDomain=memberStartedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberActivatedEvent memberActivatedEvent=(MemberActivatedEvent)event;
      String clusterDomain=memberActivatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberSuspendedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberSuspendedEvent memberSuspendedEvent=(MemberSuspendedEvent)event;
      String clusterDomain=memberSuspendedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      log.info(""String_Node_Str"" + event.getClass() + ""String_Node_Str"");
      MemberTerminatedEvent memberTerminatedEvent=(MemberTerminatedEvent)event;
      String clusterDomain=memberTerminatedEvent.getClusterId();
      Set<CartridgeSubscription> cartridgeSubscriptions=getCartridgeSubscription(clusterDomain);
      if (cartridgeSubscriptions != null) {
        Cluster cluster;
        TopologyManager.acquireReadLock();
        try {
          for (          CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
            cluster=TopologyManager.getTopology().getService(cartridgeSubscription.getType()).getCluster(cartridgeSubscription.getClusterDomain());
            TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getType(),cartridgeSubscription.getAlias(),cluster);
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
    }
  }
);
  return processorChain;
}",0.854597595948502
116682,"public void addCluster(int tenantId,String cartridgeType,String subscriptionAlias,Cluster cluster){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  writeLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      CartridgeTypeContext cartridgeTypeContext=null;
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeTypeContext.getType().equals(cartridgeType)) {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          break;
        }
      }
      if (subscriptionAliasContextSet == null) {
        SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
        subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
        subscriptionAliasContextSet.add(subscriptionAliasContext);
        cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
        cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
        cartridgeTypeContextSet.add(cartridgeTypeContext);
      }
 else {
        subscriptionAliasContextSet.remove(new SubscriptionAliasContext(subscriptionAlias,null));
        subscriptionAliasContextSet.add(new SubscriptionAliasContext(subscriptionAlias,cluster));
      }
    }
 else {
      SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
      subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
      subscriptionAliasContextSet.add(subscriptionAliasContext);
      CartridgeTypeContext cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
      cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
      cartridgeTypeContextSet=new HashSet<CartridgeTypeContext>();
      cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
      tenantIdToCartridgeTypeContextMap.put(tenantId,cartridgeTypeContextSet);
    }
  }
  finally {
    writeLock.unlock();
  }
}","public void addCluster(int tenantId,String cartridgeType,String subscriptionAlias,Cluster cluster){
  Set<CartridgeTypeContext> cartridgeTypeContextSet=null;
  Set<SubscriptionAliasContext> subscriptionAliasContextSet=null;
  writeLock.lock();
  try {
    cartridgeTypeContextSet=tenantIdToCartridgeTypeContextMap.get(tenantId);
    if (cartridgeTypeContextSet != null) {
      CartridgeTypeContext cartridgeTypeContext=null;
      Iterator<CartridgeTypeContext> typeCtxIterator=cartridgeTypeContextSet.iterator();
      while (typeCtxIterator.hasNext()) {
        cartridgeTypeContext=typeCtxIterator.next();
        if (cartridgeTypeContext.getType().equals(cartridgeType)) {
          subscriptionAliasContextSet=cartridgeTypeContext.getSubscriptionAliasContextSet();
          break;
        }
      }
      if (subscriptionAliasContextSet == null) {
        SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
        subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
        subscriptionAliasContextSet.add(subscriptionAliasContext);
        cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
        cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
        cartridgeTypeContextSet.add(cartridgeTypeContext);
      }
 else {
        subscriptionAliasContextSet.remove(new SubscriptionAliasContext(subscriptionAlias,null));
        subscriptionAliasContextSet.add(new SubscriptionAliasContext(subscriptionAlias,cluster));
      }
    }
 else {
      SubscriptionAliasContext subscriptionAliasContext=new SubscriptionAliasContext(subscriptionAlias,cluster);
      subscriptionAliasContextSet=new HashSet<SubscriptionAliasContext>();
      subscriptionAliasContextSet.add(subscriptionAliasContext);
      CartridgeTypeContext cartridgeTypeContext=new CartridgeTypeContext(cartridgeType);
      cartridgeTypeContext.setSubscriptionAliasContextSet(subscriptionAliasContextSet);
      cartridgeTypeContextSet=new HashSet<CartridgeTypeContext>();
      cartridgeTypeContextSet.add(cartridgeTypeContext);
      tenantIdToCartridgeTypeContextMap.put(tenantId,cartridgeTypeContextSet);
    }
  }
  finally {
    writeLock.unlock();
  }
}",0.9816898301345688
116683,"public void listSubscribedCartridges(final boolean full) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgesRestEndpoint,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    CartridgeList cartridgeList=gson.fromJson(resultString,CartridgeList.class);
    if (cartridgeList == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    Cartridge[] cartridges=new Cartridge[cartridgeList.getCartridge().size()];
    cartridges=cartridgeList.getCartridge().toArray(cartridges);
    if (cartridges.length == 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
      return;
    }
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      public String[] getData(      Cartridge cartridge){
        String[] data=full ? new String[9] : new String[7];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        data[3]=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
        data[4]=cartridge.getCartridgeAlias();
        data[5]=cartridge.getStatus();
        data[6]=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
        if (full) {
          data[7]=getAccessURLs(cartridge);
          data[8]=cartridge.getRepoURL() != null ? cartridge.getRepoURL() : ""String_Node_Str"";
        }
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    if (full) {
      headers.add(""String_Node_Str"");
      headers.add(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(cartridges,cartridgeMapper,headers.toArray(new String[headers.size()]));
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public void listSubscribedCartridges(final boolean full) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgesRestEndpoint,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    CartridgeList cartridgeList=gson.fromJson(resultString,CartridgeList.class);
    if (cartridgeList == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    CartridgeList applicationCartridgeList=new CartridgeList();
    List<Cartridge> allCartridges=cartridgeList.getCartridge();
    for (    Cartridge cartridge : allCartridges) {
      if (!cartridge.getProvider().equals(""String_Node_Str"")) {
        applicationCartridgeList.getCartridge().add(cartridge);
      }
    }
    Cartridge[] cartridges=new Cartridge[applicationCartridgeList.getCartridge().size()];
    cartridges=applicationCartridgeList.getCartridge().toArray(cartridges);
    if (cartridges.length == 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
      return;
    }
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      public String[] getData(      Cartridge cartridge){
        String[] data=full ? new String[9] : new String[7];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        data[3]=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
        data[4]=cartridge.getCartridgeAlias();
        data[5]=cartridge.getStatus();
        data[6]=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
        if (full) {
          data[7]=getAccessURLs(cartridge);
          data[8]=cartridge.getRepoURL() != null ? cartridge.getRepoURL() : ""String_Node_Str"";
        }
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    if (full) {
      headers.add(""String_Node_Str"");
      headers.add(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(cartridges,cartridgeMapper,headers.toArray(new String[headers.size()]));
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.9397506925207756
116684,"public void listSubscribedCartridgeInfo(final boolean full,String alias) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgeInfoRestEndpoint + ""String_Node_Str""+ alias,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    Cartridge cartridge=gson.fromJson(resultString,Cartridge.class);
    if (cartridge == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    final Set<String> lbIpList=getLbIpList(cartridge,httpClient);
    Cartridge[] cartridges=new Cartridge[1];
    cartridges[0]=cartridge;
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      public String[] getData(      Cartridge cartridge){
        String[] data=full ? new String[10] : new String[7];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        data[3]=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
        data[4]=cartridge.getCartridgeAlias();
        data[5]=cartridge.getStatus();
        data[6]=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
        if (full) {
          data[7]=getAccessURLs(cartridge);
          data[8]=cartridge.getRepoURL() != null ? cartridge.getRepoURL() : ""String_Node_Str"";
        }
        data[9]=lbIpList.toString();
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    if (full) {
      headers.add(""String_Node_Str"");
      headers.add(""String_Node_Str"");
    }
    headers.add(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(cartridges,cartridgeMapper,headers.toArray(new String[headers.size()]));
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}","public void listSubscribedCartridgeInfo(String alias) throws CommandException {
  DefaultHttpClient httpClient=new DefaultHttpClient();
  try {
    HttpResponse response=restClientService.doGet(httpClient,restClientService.getUrl() + listSubscribedCartridgeInfoRestEndpoint + alias,restClientService.getUsername(),restClientService.getPassword());
    String responseCode=""String_Node_Str"" + response.getStatusLine().getStatusCode();
    if (!responseCode.equals(CliConstants.RESPONSE_OK)) {
      System.out.println(""String_Node_Str"");
      return;
    }
    String resultString=getHttpResponseString(response);
    GsonBuilder gsonBuilder=new GsonBuilder();
    Gson gson=gsonBuilder.create();
    CartridgeList cartridgeList=gson.fromJson(resultString,CartridgeList.class);
    Cartridge cartridge=cartridgeList.getCartridge().get(0);
    if (cartridge == null) {
      System.out.println(""String_Node_Str"");
      return;
    }
    Map<String,Set<String>> lbIpMap=getLbIpList(cartridge,httpClient);
    final Set<String> lbPrivateIpSet=lbIpMap.get(""String_Node_Str"");
    final Set<String> lbFloatingIpSet=lbIpMap.get(""String_Node_Str"");
    Cartridge[] cartridges=new Cartridge[1];
    cartridges[0]=cartridge;
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      public String[] getData(      Cartridge cartridge){
        String[] data=lbFloatingIpSet != null ? new String[13] : new String[12];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        data[3]=cartridge.isMultiTenant() ? ""String_Node_Str"" : ""String_Node_Str"";
        data[4]=cartridge.getCartridgeAlias();
        data[5]=cartridge.getStatus();
        data[6]=cartridge.isMultiTenant() ? ""String_Node_Str"" : String.valueOf(cartridge.getActiveInstances());
        data[7]=getAccessURLs(cartridge);
        data[8]=cartridge.getRepoURL() != null ? cartridge.getRepoURL() : ""String_Node_Str"";
        data[9]=lbPrivateIpSet.toString();
        if (lbFloatingIpSet != null) {
          data[10]=lbFloatingIpSet.toString();
        }
        data[11]=cartridge.getDbUserName();
        data[12]=cartridge.getPassword();
        return data;
      }
    }
;
    List<String> headers=new ArrayList<String>();
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    if (lbFloatingIpSet != null) {
      headers.add(""String_Node_Str"");
    }
    headers.add(""String_Node_Str"");
    headers.add(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(cartridges,cartridgeMapper,headers.toArray(new String[headers.size()]));
    System.out.println();
  }
 catch (  Exception e) {
    handleException(""String_Node_Str"",e);
  }
 finally {
    httpClient.getConnectionManager().shutdown();
  }
}",0.6912891986062718
116685,"private Set<String> getLbIpList(Cartridge cartridge,DefaultHttpClient httpClient){
  Set<String> lbIpSet=new HashSet<String>();
  Member[] members=getMembers(cartridge.getCartridgeType(),cartridge.getCartridgeAlias(),httpClient);
  Set<String> lbClusterIdSet=new HashSet<String>();
  for (  Member member : members) {
    lbClusterIdSet.add(member.getLbClusterId());
  }
  for (  String clusterId : lbClusterIdSet) {
    HttpResponse responseCluster=restClientService.doGet(httpClient,restClientService.getUrl() + listClusterRestEndpoint + ""String_Node_Str""+ clusterId,restClientService.getUsername(),restClientService.getPassword());
    String resultStringCluster=getHttpResponseString(responseCluster);
    Cluster cluster=getClusterObjectFromString(resultStringCluster);
    if (cluster == null) {
      System.out.println(""String_Node_Str"");
      return null;
    }
    Member[] lbMembers=new Member[cluster.getMember().size()];
    lbMembers=cluster.getMember().toArray(lbMembers);
    for (    Member lbMember : lbMembers) {
      lbIpSet.add(lbMember.getMemberPublicIp());
    }
  }
  return lbIpSet;
}","private Map<String,Set<String>> getLbIpList(Cartridge cartridge,DefaultHttpClient httpClient){
  Map<String,Set<String>> privateFloatingLBIPMap=new HashMap<String,Set<String>>();
  Set<String> lbFloatingIpSet=new HashSet<String>();
  Set<String> lbPrivateIpSet=new HashSet<String>();
  Member[] members=getMembers(cartridge.getCartridgeType(),cartridge.getCartridgeAlias(),httpClient);
  Set<String> lbClusterIdSet=new HashSet<String>();
  for (  Member member : members) {
    lbClusterIdSet.add(member.getLbClusterId());
  }
  for (  String clusterId : lbClusterIdSet) {
    HttpResponse responseCluster=restClientService.doGet(httpClient,restClientService.getUrl() + listClusterRestEndpoint + ""String_Node_Str""+ clusterId,restClientService.getUsername(),restClientService.getPassword());
    String resultStringCluster=getHttpResponseString(responseCluster);
    Cluster cluster=getClusterObjectFromString(resultStringCluster);
    if (cluster == null) {
      System.out.println(""String_Node_Str"");
      return null;
    }
    Member[] lbMembers=new Member[cluster.getMember().size()];
    lbMembers=cluster.getMember().toArray(lbMembers);
    for (    Member lbMember : lbMembers) {
      lbPrivateIpSet.add(lbMember.getMemberIp());
      lbFloatingIpSet.add(lbMember.getMemberPublicIp());
    }
  }
  privateFloatingLBIPMap.put(""String_Node_Str"",lbPrivateIpSet);
  privateFloatingLBIPMap.put(""String_Node_Str"",lbFloatingIpSet);
  return privateFloatingLBIPMap;
}",0.8217054263565892
116686,"private String getAccessURLs(Cartridge cartridge){
  String[] accessURLs=cartridge.getAccessURLs();
  StringBuilder urlBuilder=new StringBuilder();
  if (accessURLs != null) {
    for (int i=0; i < accessURLs.length; i++) {
      String url=accessURLs[i];
      if (url != null) {
        if (i > 0) {
          urlBuilder.append(""String_Node_Str"");
        }
        urlBuilder.append(url);
      }
    }
  }
  return urlBuilder.toString();
}","private String getAccessURLs(Cartridge cartridge){
  PortMapping[] portMappings=cartridge.getPortMappings();
  StringBuilder urlBuilder=new StringBuilder();
  for (  PortMapping portMapping : portMappings) {
    String url=portMapping.getProtocol() + ""String_Node_Str"" + cartridge.getHostName()+ ""String_Node_Str""+ portMapping.getProxyPort()+ ""String_Node_Str"";
    urlBuilder.append(url).append(""String_Node_Str"");
  }
  return urlBuilder.toString();
}",0.3035714285714285
116687,"private void createCommands(){
  Command<StratosCommandContext> command=new HelpCommand();
  commands.put(command.getName(),command);
  command=new ExitCommand();
  commands.put(command.getName(),command);
  command=new SubscribeCommand();
  commands.put(command.getName(),command);
  command=new UnsubscribeCommand();
  commands.put(command.getName(),command);
  command=new CartridgesCommand();
  commands.put(command.getName(),command);
  command=new AddTenantCommand();
  commands.put(command.getName(),command);
  command=new CartridgeDeploymentCommand();
  commands.put(command.getName(),command);
  command=new PartitionDeploymentCommand();
  commands.put(command.getName(),command);
  command=new AutoscalingPolicyDeploymentCommand();
  commands.put(command.getName(),command);
  command=new DeploymentPolicyDeploymentCommand();
  commands.put(command.getName(),command);
  command=new ListCommand();
  commands.put(command.getName(),command);
  command=new PartitionCommand();
  commands.put(command.getName(),command);
  command=new AutoscalePolicyCommand();
  commands.put(command.getName(),command);
  command=new DeploymentPolicyCommand();
  commands.put(command.getName(),command);
  command=new ListMemberCommand();
  commands.put(command.getName(),command);
  command=new DescribeCartridgeCommand();
  commands.put(command.getName(),command);
  command=new DescribePartitionCommand();
  commands.put(command.getName(),command);
  command=new DescribeDeploymentPolicyCommand();
  commands.put(command.getName(),command);
  command=new DescribeAutoScalingPolicyCommand();
  commands.put(command.getName(),command);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",commands.size(),commands.keySet());
  }
}","private void createCommands(){
  Command<StratosCommandContext> command=new HelpCommand();
  commands.put(command.getName(),command);
  command=new ExitCommand();
  commands.put(command.getName(),command);
  command=new SubscribeCommand();
  commands.put(command.getName(),command);
  command=new UnsubscribeCommand();
  commands.put(command.getName(),command);
  command=new CartridgesCommand();
  commands.put(command.getName(),command);
  command=new AddTenantCommand();
  commands.put(command.getName(),command);
  command=new CartridgeDeploymentCommand();
  commands.put(command.getName(),command);
  command=new PartitionDeploymentCommand();
  commands.put(command.getName(),command);
  command=new AutoscalingPolicyDeploymentCommand();
  commands.put(command.getName(),command);
  command=new DeploymentPolicyDeploymentCommand();
  commands.put(command.getName(),command);
  command=new ListCommand();
  commands.put(command.getName(),command);
  command=new PartitionCommand();
  commands.put(command.getName(),command);
  command=new AutoscalePolicyCommand();
  commands.put(command.getName(),command);
  command=new DeploymentPolicyCommand();
  commands.put(command.getName(),command);
  command=new ListMemberCommand();
  commands.put(command.getName(),command);
  command=new DescribeCartridgeCommand();
  commands.put(command.getName(),command);
  command=new DescribePartitionCommand();
  commands.put(command.getName(),command);
  command=new DescribeDeploymentPolicyCommand();
  commands.put(command.getName(),command);
  command=new DescribeAutoScalingPolicyCommand();
  commands.put(command.getName(),command);
  command=new ListCartridgeInfoCommand();
  commands.put(command.getName(),command);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",commands.size(),commands.keySet());
  }
}",0.976130300477394
116688,"public void scheduleSyncTask(RepositoryInformation repoInformation,long delay){
  int tenantId=Integer.parseInt(repoInformation.getTenantId());
  RepositoryContext repoCtxt=tenantToRepoContextMap.get(tenantId);
  if (repoCtxt == null) {
    log.error(""String_Node_Str"" + tenantId);
    return;
  }
  if (repoCtxt.getArtifactSyncSchedular() == null) {
synchronized (repoCtxt) {
      if (repoCtxt.getArtifactSyncSchedular() == null) {
        final ScheduledExecutorService artifactSyncScheduler=Executors.newScheduledThreadPool(1,new ArtifactSyncTaskThreadFactory(repoInformation));
        artifactSyncScheduler.scheduleAtFixedRate(new ArtifactSyncTask(repoInformation),delay,delay,TimeUnit.SECONDS);
        repoCtxt.setArtifactSyncSchedular(artifactSyncScheduler);
        log.info(""String_Node_Str"" + repoCtxt.getGitLocalRepoPath());
      }
 else {
        log.info(""String_Node_Str"" + repoCtxt.getGitLocalRepoPath() + ""String_Node_Str"");
      }
    }
  }
}","public void scheduleSyncTask(RepositoryInformation repoInformation,long delay){
  int tenantId=Integer.parseInt(repoInformation.getTenantId());
  RepositoryContext repoCtxt=tenantToRepoContextMap.get(tenantId);
  if (repoCtxt == null) {
    log.error(""String_Node_Str"" + tenantId);
    return;
  }
  if (repoCtxt.getArtifactSyncSchedular() == null) {
synchronized (repoCtxt) {
      if (repoCtxt.getArtifactSyncSchedular() == null) {
        final ScheduledExecutorService artifactSyncScheduler=Executors.newScheduledThreadPool(1,new ArtifactSyncTaskThreadFactory(repoCtxt.getGitLocalRepoPath()));
        artifactSyncScheduler.scheduleAtFixedRate(new ArtifactSyncTask(repoInformation),delay,delay,TimeUnit.SECONDS);
        repoCtxt.setArtifactSyncSchedular(artifactSyncScheduler);
        log.info(""String_Node_Str"" + repoCtxt.getGitLocalRepoPath());
      }
 else {
        log.info(""String_Node_Str"" + repoCtxt.getGitLocalRepoPath() + ""String_Node_Str"");
      }
    }
  }
}",0.9809376609994848
116689,"public Thread newThread(Runnable r){
  return new Thread(r,""String_Node_Str"" + repositoryInformation.getRepoPath());
}","public Thread newThread(Runnable r){
  return new Thread(r,""String_Node_Str"" + localRepoPath);
}",0.8691588785046729
116690,"/** 
 * initializes and populates the git context with relevant data
 * @param repositoryInformation id of the tenant
 */
private void initGitContext(RepositoryInformation repositoryInformation){
  log.info(""String_Node_Str"");
  int tenantId=Integer.parseInt(repositoryInformation.getTenantId());
  String gitLocalRepoPath=repositoryInformation.getRepoPath();
  RepositoryContext gitRepoCtx=new RepositoryContext();
  String gitRemoteRepoUrl=repositoryInformation.getRepoUrl();
  boolean isMultitenant=repositoryInformation.isMultitenant();
  log.info(""String_Node_Str"" + gitLocalRepoPath);
  log.info(""String_Node_Str"" + gitRemoteRepoUrl);
  log.info(""String_Node_Str"" + tenantId);
  gitRepoCtx.setTenantId(tenantId);
  gitRepoCtx.setGitLocalRepoPath(getRepoPathForTenantId(tenantId,gitLocalRepoPath,isMultitenant));
  gitRepoCtx.setGitRemoteRepoUrl(gitRemoteRepoUrl);
  gitRepoCtx.setRepoUsername(repositoryInformation.getRepoUsername());
  gitRepoCtx.setRepoPassword(repositoryInformation.getRepoPassword());
  try {
    if (isKeyBasedAuthentication(gitRemoteRepoUrl,tenantId)) {
      gitRepoCtx.setKeyBasedAuthentication(true);
      initSSHAuthentication();
    }
 else     gitRepoCtx.setKeyBasedAuthentication(false);
  }
 catch (  Exception e1) {
    log.error(""String_Node_Str"" + e1.getMessage(),e1);
  }
  FileRepository localRepo=null;
  try {
    localRepo=new FileRepository(new File(gitLocalRepoPath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  gitRepoCtx.setLocalRepo(localRepo);
  gitRepoCtx.setGit(new Git(localRepo));
  gitRepoCtx.setCloneExists(false);
  cacheGitRepoContext(tenantId,gitRepoCtx);
}","/** 
 * initializes and populates the git context with relevant data
 * @param repositoryInformation id of the tenant
 */
private void initGitContext(RepositoryInformation repositoryInformation){
  log.info(""String_Node_Str"");
  int tenantId=Integer.parseInt(repositoryInformation.getTenantId());
  String gitLocalRepoPath=repositoryInformation.getRepoPath();
  RepositoryContext gitRepoCtx=new RepositoryContext();
  String gitRemoteRepoUrl=repositoryInformation.getRepoUrl();
  boolean isMultitenant=repositoryInformation.isMultitenant();
  log.info(""String_Node_Str"" + gitLocalRepoPath);
  log.info(""String_Node_Str"" + gitRemoteRepoUrl);
  log.info(""String_Node_Str"" + tenantId);
  gitRepoCtx.setTenantId(tenantId);
  gitRepoCtx.setGitLocalRepoPath(getRepoPathForTenantId(tenantId,gitLocalRepoPath,isMultitenant));
  gitRepoCtx.setGitRemoteRepoUrl(gitRemoteRepoUrl);
  gitRepoCtx.setRepoUsername(repositoryInformation.getRepoUsername());
  gitRepoCtx.setRepoPassword(repositoryInformation.getRepoPassword());
  try {
    if (isKeyBasedAuthentication(gitRemoteRepoUrl,tenantId)) {
      gitRepoCtx.setKeyBasedAuthentication(true);
      initSSHAuthentication();
    }
 else     gitRepoCtx.setKeyBasedAuthentication(false);
  }
 catch (  Exception e1) {
    log.error(""String_Node_Str"" + e1.getMessage(),e1);
  }
  FileRepository localRepo=null;
  try {
    localRepo=new FileRepository(new File(gitRepoCtx.getGitLocalRepoPath() + ""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  gitRepoCtx.setLocalRepo(localRepo);
  gitRepoCtx.setGit(new Git(localRepo));
  gitRepoCtx.setCloneExists(false);
  cacheGitRepoContext(tenantId,gitRepoCtx);
}",0.9951951951951952
116691,"public ArtifactSyncTaskThreadFactory(RepositoryInformation repositoryInformation){
  this.repositoryInformation=repositoryInformation;
}","public ArtifactSyncTaskThreadFactory(String localRepoPath){
  this.localRepoPath=localRepoPath;
}",0.575107296137339
116692,"private void onArtifactUpdateEvent(ArtifactUpdatedEvent event){
  ArtifactUpdatedEvent artifactUpdatedEvent=event;
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",artifactUpdatedEvent.toString()));
  }
  String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
  String localRepoPath=CartridgeAgentConfiguration.getInstance().getAppPath();
  String clusterIdInMessage=artifactUpdatedEvent.getClusterId();
  String repoURL=artifactUpdatedEvent.getRepoURL();
  String repoPassword=CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
  String repoUsername=artifactUpdatedEvent.getRepoUserName();
  String tenantId=artifactUpdatedEvent.getTenantId();
  if (StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    repoInformation.setRepoPassword(repoPassword);
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    boolean cloneExists=GitBasedArtifactRepository.getInstance().cloneExists(repoInformation);
    GitBasedArtifactRepository.getInstance().checkout(repoInformation);
    ExtensionUtils.executeArtifactsUpdatedExtension();
    if (!cloneExists) {
      CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
    }
    GitBasedArtifactRepository.getInstance().scheduleSyncTask(repoInformation,10);
  }
}","private void onArtifactUpdateEvent(ArtifactUpdatedEvent event){
  ArtifactUpdatedEvent artifactUpdatedEvent=event;
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",artifactUpdatedEvent.toString()));
  }
  String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
  String localRepoPath=CartridgeAgentConfiguration.getInstance().getAppPath();
  String clusterIdInMessage=artifactUpdatedEvent.getClusterId();
  String repoURL=artifactUpdatedEvent.getRepoURL();
  String repoPassword=CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
  String repoUsername=artifactUpdatedEvent.getRepoUserName();
  String tenantId=artifactUpdatedEvent.getTenantId();
  boolean isMultitenant=CartridgeAgentConfiguration.getInstance().isMultitenant();
  if (StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    repoInformation.setRepoPassword(repoPassword);
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    repoInformation.setMultitenant(isMultitenant);
    boolean cloneExists=GitBasedArtifactRepository.getInstance().cloneExists(repoInformation);
    GitBasedArtifactRepository.getInstance().checkout(repoInformation);
    ExtensionUtils.executeArtifactsUpdatedExtension();
    if (!cloneExists) {
      CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
    }
    GitBasedArtifactRepository.getInstance().scheduleSyncTask(repoInformation,10);
  }
}",0.9605650382577988
116693,"private static String getRepoPathForTenantId(int tenantId,String gitLocalRepoPath){
  StringBuilder repoPathBuilder=new StringBuilder();
  if (tenantId == -1234) {
    repoPathBuilder.append(gitLocalRepoPath).append(SUPER_TENANT_APP_PATH);
  }
 else {
    createTenantDir(tenantId,gitLocalRepoPath);
    repoPathBuilder.append(gitLocalRepoPath).append(TENANT_PATH).append(tenantId);
  }
  String repoPath=repoPathBuilder.toString();
  log.info(""String_Node_Str"" + repoPath);
  return repoPath;
}","private static String getRepoPathForTenantId(int tenantId,String gitLocalRepoPath,boolean isMultitenant){
  StringBuilder repoPathBuilder=new StringBuilder();
  String repoPath=null;
  if (isMultitenant) {
    if (tenantId == SUPER_TENANT_ID) {
      repoPathBuilder.append(gitLocalRepoPath).append(SUPER_TENANT_APP_PATH);
    }
 else {
      createTenantDir(tenantId,gitLocalRepoPath);
      repoPathBuilder.append(gitLocalRepoPath).append(TENANT_PATH).append(tenantId);
    }
    repoPath=repoPathBuilder.toString();
  }
 else {
    repoPath=gitLocalRepoPath;
  }
  log.info(""String_Node_Str"" + repoPath);
  return repoPath;
}",0.5699020480854853
116694,"/** 
 * initializes and populates the git context with relevant data
 * @param repositoryInformation id of the tenant
 */
private void initGitContext(RepositoryInformation repositoryInformation){
  log.info(""String_Node_Str"");
  int tenantId=Integer.parseInt(repositoryInformation.getTenantId());
  String gitLocalRepoPath=repositoryInformation.getRepoPath();
  RepositoryContext gitRepoCtx=new RepositoryContext();
  String gitRemoteRepoUrl=repositoryInformation.getRepoUrl();
  log.info(""String_Node_Str"" + gitLocalRepoPath);
  log.info(""String_Node_Str"" + gitRemoteRepoUrl);
  log.info(""String_Node_Str"" + tenantId);
  gitRepoCtx.setTenantId(tenantId);
  gitRepoCtx.setGitLocalRepoPath(getRepoPathForTenantId(tenantId,gitLocalRepoPath));
  gitRepoCtx.setGitRemoteRepoUrl(gitRemoteRepoUrl);
  gitRepoCtx.setRepoUsername(repositoryInformation.getRepoUsername());
  gitRepoCtx.setRepoPassword(repositoryInformation.getRepoPassword());
  try {
    if (isKeyBasedAuthentication(gitRemoteRepoUrl,tenantId)) {
      gitRepoCtx.setKeyBasedAuthentication(true);
      initSSHAuthentication();
    }
 else     gitRepoCtx.setKeyBasedAuthentication(false);
  }
 catch (  Exception e1) {
    log.error(""String_Node_Str"" + e1.getMessage(),e1);
  }
  FileRepository localRepo=null;
  try {
    localRepo=new FileRepository(new File(gitLocalRepoPath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  gitRepoCtx.setLocalRepo(localRepo);
  gitRepoCtx.setGit(new Git(localRepo));
  gitRepoCtx.setCloneExists(false);
  cacheGitRepoContext(tenantId,gitRepoCtx);
}","/** 
 * initializes and populates the git context with relevant data
 * @param repositoryInformation id of the tenant
 */
private void initGitContext(RepositoryInformation repositoryInformation){
  log.info(""String_Node_Str"");
  int tenantId=Integer.parseInt(repositoryInformation.getTenantId());
  String gitLocalRepoPath=repositoryInformation.getRepoPath();
  RepositoryContext gitRepoCtx=new RepositoryContext();
  String gitRemoteRepoUrl=repositoryInformation.getRepoUrl();
  boolean isMultitenant=repositoryInformation.isMultitenant();
  log.info(""String_Node_Str"" + gitLocalRepoPath);
  log.info(""String_Node_Str"" + gitRemoteRepoUrl);
  log.info(""String_Node_Str"" + tenantId);
  gitRepoCtx.setTenantId(tenantId);
  gitRepoCtx.setGitLocalRepoPath(getRepoPathForTenantId(tenantId,gitLocalRepoPath,isMultitenant));
  gitRepoCtx.setGitRemoteRepoUrl(gitRemoteRepoUrl);
  gitRepoCtx.setRepoUsername(repositoryInformation.getRepoUsername());
  gitRepoCtx.setRepoPassword(repositoryInformation.getRepoPassword());
  try {
    if (isKeyBasedAuthentication(gitRemoteRepoUrl,tenantId)) {
      gitRepoCtx.setKeyBasedAuthentication(true);
      initSSHAuthentication();
    }
 else     gitRepoCtx.setKeyBasedAuthentication(false);
  }
 catch (  Exception e1) {
    log.error(""String_Node_Str"" + e1.getMessage(),e1);
  }
  FileRepository localRepo=null;
  try {
    localRepo=new FileRepository(new File(gitLocalRepoPath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  gitRepoCtx.setLocalRepo(localRepo);
  gitRepoCtx.setGit(new Git(localRepo));
  gitRepoCtx.setCloneExists(false);
  cacheGitRepoContext(tenantId,gitRepoCtx);
}",0.9762125424776028
116695,"private CartridgeAgentConfiguration(){
  serviceName=readParameterValue(CartridgeAgentConstants.SERVICE_NAME);
  clusterId=readParameterValue(CartridgeAgentConstants.CLUSTER_ID);
  networkPartitionId=readParameterValue(CartridgeAgentConstants.NETWORK_PARTITION_ID);
  partitionId=readParameterValue(CartridgeAgentConstants.PARTITION_ID);
  memberId=readParameterValue(CartridgeAgentConstants.MEMBER_ID);
  cartridgeKey=readParameterValue(CartridgeAgentConstants.CARTRIDGE_KEY);
  appPath=readParameterValue(CartridgeAgentConstants.APP_PATH);
  repoUrl=readParameterValue(CartridgeAgentConstants.REPO_URL);
  ports=readPorts();
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",serviceName));
    log.debug(String.format(""String_Node_Str"",clusterId));
    log.debug(String.format(""String_Node_Str"",networkPartitionId));
    log.debug(String.format(""String_Node_Str"",partitionId));
    log.debug(String.format(""String_Node_Str"",memberId));
    log.debug(String.format(""String_Node_Str"",cartridgeKey));
    log.debug(String.format(""String_Node_Str"",appPath));
    log.debug(String.format(""String_Node_Str"",repoUrl));
    log.debug(String.format(""String_Node_Str"",ports.toString()));
  }
}","private CartridgeAgentConfiguration(){
  serviceName=readParameterValue(CartridgeAgentConstants.SERVICE_NAME);
  clusterId=readParameterValue(CartridgeAgentConstants.CLUSTER_ID);
  networkPartitionId=readParameterValue(CartridgeAgentConstants.NETWORK_PARTITION_ID);
  partitionId=readParameterValue(CartridgeAgentConstants.PARTITION_ID);
  memberId=readParameterValue(CartridgeAgentConstants.MEMBER_ID);
  cartridgeKey=readParameterValue(CartridgeAgentConstants.CARTRIDGE_KEY);
  appPath=readParameterValue(CartridgeAgentConstants.APP_PATH);
  repoUrl=readParameterValue(CartridgeAgentConstants.REPO_URL);
  ports=readPorts();
  isMultitenant=readMultitenant(CartridgeAgentConstants.MULTITENANT);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",serviceName));
    log.debug(String.format(""String_Node_Str"",clusterId));
    log.debug(String.format(""String_Node_Str"",networkPartitionId));
    log.debug(String.format(""String_Node_Str"",partitionId));
    log.debug(String.format(""String_Node_Str"",memberId));
    log.debug(String.format(""String_Node_Str"",cartridgeKey));
    log.debug(String.format(""String_Node_Str"",appPath));
    log.debug(String.format(""String_Node_Str"",repoUrl));
    log.debug(String.format(""String_Node_Str"",ports.toString()));
  }
}",0.9733231707317072
116696,"public void deploy() throws ADCException, UnregisteredCartridgeException {
  setClusterId(type + ""String_Node_Str"" + cartridgeInfo.getHostName()+ ""String_Node_Str"");
  setHostName(cartridgeInfo.getHostName());
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(this);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  setPayloadData(payloadData);
}","public void deploy(Properties properties) throws ADCException, UnregisteredCartridgeException {
  setClusterId(type + ""String_Node_Str"" + cartridgeInfo.getHostName()+ ""String_Node_Str"");
  setHostName(cartridgeInfo.getHostName());
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(this);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  setPayloadData(payloadData);
}",0.9890681936491412
116697,"public Service deployService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId,String tenantRange,String tenantDomain,String userName) throws ADCException, UnregisteredCartridgeException, ServiceAlreadyDeployedException {
  DataInsertionAndRetrievalManager dataInsertionAndRetrievalManager=new DataInsertionAndRetrievalManager();
  Service deployedService;
  try {
    deployedService=dataInsertionAndRetrievalManager.getService(type);
  }
 catch (  PersistenceManagerException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
    throw new ADCException(errorMsg,e);
  }
  if (deployedService != null) {
    String errorMsg=""String_Node_Str"" + type;
    log.error(errorMsg);
    throw new ServiceAlreadyDeployedException(errorMsg,type);
  }
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(type);
  }
 catch (  UnregisteredCartridgeException e) {
    String message=type + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + type;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  if (!cartridgeInfo.getMultiTenant()) {
    String errorMsg=""String_Node_Str"" + type + ""String_Node_Str"";
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  List<Property> lbRefProp=new ArrayList<Property>();
  LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
  if (lbConfig == null || lbConfig.getProperties() == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
    }
  }
 else {
    Service lbService;
    CartridgeInfo lbCartridgeInfo;
    String lbCartridgeType=lbConfig.getType();
    try {
      lbCartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(lbCartridgeType);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + type;
      log.error(msg,e);
      throw new ADCException(msg,e);
    }
    Properties lbReferenceProperties=lbConfig.getProperties();
    Property property=new Property();
    property.setName(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    for (    org.apache.stratos.cloud.controller.pojo.Property prop : lbReferenceProperties.getProperties()) {
      String name=prop.getName();
      String value=prop.getValue();
      if (Constants.NO_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
          }
          property.setValue(name);
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.EXISTING_LOAD_BALANCERS.equals(name)) {
        String clusterIdsVal=value;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ""String_Node_Str"" + type + ""String_Node_Str""+ clusterIdsVal);
        }
        String[] clusterIds=clusterIdsVal.split(""String_Node_Str"");
        for (        String clusterId : clusterIds) {
          try {
            AutoscalerServiceClient.getServiceClient().checkLBExistenceAgainstPolicy(clusterId,deploymentPolicyName);
          }
 catch (          Exception ex) {
            log.error(ex.getMessage(),ex);
          }
        }
        property.setValue(name);
        lbRefProp.add(property);
        break;
      }
 else       if (Constants.DEFAULT_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          property.setValue(name);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
          }
          try {
            DeploymentPolicy[] lbCartridgeDepPolicies=AutoscalerServiceClient.getServiceClient().getDeploymentPolicies(lbCartridgeType);
            for (            DeploymentPolicy policy : lbCartridgeDepPolicies) {
              if (deploymentPolicyName.equals(policy.getId())) {
                if (!AutoscalerServiceClient.getServiceClient().checkDefaultLBExistenceAgainstPolicy(deploymentPolicyName)) {
                  lbCartridgeInfo.addProperties(property);
                  lbService=new MultiTenantLBService(lbCartridgeType,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicyName,tenantId,lbCartridgeInfo,tenantRange);
                  lbService.deploy();
                }
              }
            }
          }
 catch (          Exception ex) {
            log.error(ex.getMessage(),ex);
          }
          lbRefProp.add(property);
          break;
        }
 else         if (Constants.SERVICE_AWARE_LOAD_BALANCER.equals(name)) {
          if (""String_Node_Str"".equals(value)) {
            property.setValue(name);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
            }
            try {
              DeploymentPolicy[] lbCartridgeDepPolicies=AutoscalerServiceClient.getServiceClient().getDeploymentPolicies(lbCartridgeType);
              for (              DeploymentPolicy policy : lbCartridgeDepPolicies) {
                if (deploymentPolicyName.equals(policy.getId())) {
                  if (!AutoscalerServiceClient.getServiceClient().checkServiceLBExistenceAgainstPolicy(type,deploymentPolicyName)) {
                    lbCartridgeInfo.addProperties(property);
                    lbService=new MultiTenantLBService(lbCartridgeType,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicyName,tenantId,lbCartridgeInfo,tenantRange);
                    lbService.deploy();
                  }
                }
              }
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
            lbRefProp.add(property);
            break;
          }
        }
      }
    }
  }
  Service service=new MultiTenantService(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo,tenantRange);
  service.deploy();
  try {
    dataInsertionAndRetrievalManager.persistService(service);
  }
 catch (  PersistenceManagerException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
    throw new ADCException(errorMsg,e);
  }
  return service;
}","public Service deployService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId,String tenantRange,String tenantDomain,String userName) throws ADCException, UnregisteredCartridgeException, ServiceAlreadyDeployedException {
  DataInsertionAndRetrievalManager dataInsertionAndRetrievalManager=new DataInsertionAndRetrievalManager();
  Service deployedService;
  try {
    deployedService=dataInsertionAndRetrievalManager.getService(type);
  }
 catch (  PersistenceManagerException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
    throw new ADCException(errorMsg,e);
  }
  if (deployedService != null) {
    String errorMsg=""String_Node_Str"" + type;
    log.error(errorMsg);
    throw new ServiceAlreadyDeployedException(errorMsg,type);
  }
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(type);
  }
 catch (  UnregisteredCartridgeException e) {
    String message=type + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + type;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  if (!cartridgeInfo.getMultiTenant()) {
    String errorMsg=""String_Node_Str"" + type + ""String_Node_Str"";
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  List<Property> lbRefProp=new ArrayList<Property>();
  LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
  if (lbConfig == null || lbConfig.getProperties() == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
    }
  }
 else {
    Service lbService;
    CartridgeInfo lbCartridgeInfo;
    String lbCartridgeType=lbConfig.getType();
    try {
      lbCartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(lbCartridgeType);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + type;
      log.error(msg,e);
      throw new ADCException(msg,e);
    }
    Properties lbReferenceProperties=lbConfig.getProperties();
    Property property=new Property();
    property.setName(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    for (    org.apache.stratos.cloud.controller.pojo.Property prop : lbReferenceProperties.getProperties()) {
      String name=prop.getName();
      String value=prop.getValue();
      if (Constants.NO_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
          }
          property.setValue(name);
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.EXISTING_LOAD_BALANCERS.equals(name)) {
        String clusterIdsVal=value;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ""String_Node_Str"" + type + ""String_Node_Str""+ clusterIdsVal);
        }
        String[] clusterIds=clusterIdsVal.split(""String_Node_Str"");
        for (        String clusterId : clusterIds) {
          try {
            AutoscalerServiceClient.getServiceClient().checkLBExistenceAgainstPolicy(clusterId,deploymentPolicyName);
          }
 catch (          Exception ex) {
            log.error(ex.getMessage(),ex);
          }
        }
        property.setValue(name);
        lbRefProp.add(property);
        break;
      }
 else       if (Constants.DEFAULT_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          property.setValue(name);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
          }
          try {
            DeploymentPolicy[] lbCartridgeDepPolicies=AutoscalerServiceClient.getServiceClient().getDeploymentPolicies(lbCartridgeType);
            for (            DeploymentPolicy policy : lbCartridgeDepPolicies) {
              if (deploymentPolicyName.equals(policy.getId())) {
                if (!AutoscalerServiceClient.getServiceClient().checkDefaultLBExistenceAgainstPolicy(deploymentPolicyName)) {
                  lbService=new MultiTenantLBService(lbCartridgeType,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicyName,tenantId,lbCartridgeInfo,tenantRange);
                  Properties lbDeploymentProperties=new Properties();
                  Property[] cartridgeInfoProps=lbCartridgeInfo.getProperties();
                  if (cartridgeInfoProps != null && cartridgeInfoProps.length > 0) {
                    lbDeploymentProperties.setProperties(combine(lbCartridgeInfo.getProperties(),new Property[]{property}));
                  }
 else {
                    lbDeploymentProperties.setProperties(new Property[]{property});
                  }
                  lbService.deploy(lbDeploymentProperties);
                  persist(lbService);
                }
              }
            }
          }
 catch (          Exception ex) {
            log.error(ex.getMessage(),ex);
          }
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.SERVICE_AWARE_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          property.setValue(name);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + type);
          }
          Property loadBalancedServiceTypeProperty=new Property();
          loadBalancedServiceTypeProperty.setName(Constants.LOAD_BALANCED_SERVICE_TYPE);
          loadBalancedServiceTypeProperty.setValue(type);
          try {
            DeploymentPolicy[] lbCartridgeDepPolicies=AutoscalerServiceClient.getServiceClient().getDeploymentPolicies(lbCartridgeType);
            for (            DeploymentPolicy policy : lbCartridgeDepPolicies) {
              if (deploymentPolicyName.equals(policy.getId())) {
                if (!AutoscalerServiceClient.getServiceClient().checkServiceLBExistenceAgainstPolicy(type,deploymentPolicyName)) {
                  lbCartridgeInfo.addProperties(property);
                  lbCartridgeInfo.addProperties(loadBalancedServiceTypeProperty);
                  lbService=new MultiTenantLBService(lbCartridgeType,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicyName,tenantId,lbCartridgeInfo,tenantRange);
                  Properties lbDeploymentProperties=new Properties();
                  Property[] cartridgeInfoProps=lbCartridgeInfo.getProperties();
                  if (cartridgeInfoProps != null && cartridgeInfoProps.length > 0) {
                    lbDeploymentProperties.setProperties(combine(lbCartridgeInfo.getProperties(),new Property[]{property,loadBalancedServiceTypeProperty}));
                  }
 else {
                    lbDeploymentProperties.setProperties(new Property[]{property,loadBalancedServiceTypeProperty});
                  }
                  lbService.deploy(lbDeploymentProperties);
                  persist(lbService);
                }
              }
            }
          }
 catch (          Exception ex) {
            log.error(ex.getMessage(),ex);
          }
          lbRefProp.add(property);
          break;
        }
      }
    }
  }
  Service service=new MultiTenantService(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo,tenantRange);
  Properties serviceDeploymentProperties=new Properties();
  serviceDeploymentProperties.setProperties(lbRefProp.toArray(new Property[0]));
  service.deploy(serviceDeploymentProperties);
  persist(service);
  return service;
}",0.8484321819103483
116698,"@Override public void deploy() throws ADCException, UnregisteredCartridgeException {
  super.deploy();
  ApplicationManagementUtil.registerService(getType(),getClusterId(),CartridgeConstants.DEFAULT_SUBDOMAIN,getPayloadData().getCompletePayloadData(),getTenantRange(),getHostName(),getAutoscalingPolicyName(),getDeploymentPolicyName(),null);
}","@Override public void deploy(Properties properties) throws ADCException, UnregisteredCartridgeException {
  super.deploy(properties);
  ApplicationManagementUtil.registerService(getType(),getClusterId(),CartridgeConstants.DEFAULT_SUBDOMAIN,getPayloadData().getCompletePayloadData(),getTenantRange(),getHostName(),getAutoscalingPolicyName(),getDeploymentPolicyName(),properties);
}",0.9377593360995852
116699,"@Override public void deploy() throws ADCException, UnregisteredCartridgeException {
  super.deploy();
  ApplicationManagementUtil.registerService(getType(),getClusterId(),CartridgeConstants.DEFAULT_SUBDOMAIN,getPayloadData().getCompletePayloadData(),getTenantRange(),getHostName(),getAutoscalingPolicyName(),getDeploymentPolicyName(),null);
}","@Override public void deploy(Properties properties) throws ADCException, UnregisteredCartridgeException {
  super.deploy(properties);
  ApplicationManagementUtil.registerService(getType(),getClusterId(),CartridgeConstants.DEFAULT_SUBDOMAIN,getPayloadData().getCompletePayloadData(),getTenantRange(),getHostName(),getAutoscalingPolicyName(),getDeploymentPolicyName(),properties);
}",0.9377593360995852
116700,"@Override public void onMessage(Message message){
  TextMessage receivedMessage=(TextMessage)message;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  try {
    String type=message.getStringProperty(Constants.EVENT_CLASS_NAME);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",type));
    }
    if (InstanceStartedEvent.class.getName().equals(type)) {
      String json=receivedMessage.getText();
      InstanceStartedEvent event=(InstanceStartedEvent)Util.jsonToObject(json,InstanceStartedEvent.class);
      String clusterId=event.getClusterId();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + clusterId);
      }
      Set<CartridgeSubscription> cartridgeSubscriptions=new DataInsertionAndRetrievalManager().getCartridgeSubscription(clusterId);
      if (cartridgeSubscriptions == null || cartridgeSubscriptions.isEmpty()) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId);
        }
        return;
      }
      for (      CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
        if (!cartridgeSubscription.getCartridgeInfo().getMultiTenant() && cartridgeSubscription.getRepository() != null) {
          InstanceNotificationPublisher publisher=new InstanceNotificationPublisher();
          publisher.sendArtifactUpdateEvent(cartridgeSubscription.getRepository(),clusterId,String.valueOf(cartridgeSubscription.getSubscriber().getTenantId()));
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + cartridgeSubscription.getAlias() + ""String_Node_Str""+ cartridgeSubscription.getType()+ ""String_Node_Str"");
          }
        }
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void onMessage(Message message){
  TextMessage receivedMessage=(TextMessage)message;
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  try {
    String type=message.getStringProperty(Constants.EVENT_CLASS_NAME);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",type));
    }
    if (InstanceStartedEvent.class.getName().equals(type)) {
      String json=receivedMessage.getText();
      InstanceStartedEvent event=(InstanceStartedEvent)Util.jsonToObject(json,InstanceStartedEvent.class);
      String clusterId=event.getClusterId();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + clusterId);
      }
      Set<CartridgeSubscription> cartridgeSubscriptions=new DataInsertionAndRetrievalManager().getCartridgeSubscriptionForCluster(clusterId);
      if (cartridgeSubscriptions == null || cartridgeSubscriptions.isEmpty()) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId);
        }
        return;
      }
      for (      CartridgeSubscription cartridgeSubscription : cartridgeSubscriptions) {
        if (!cartridgeSubscription.getCartridgeInfo().getMultiTenant() && cartridgeSubscription.getRepository() != null) {
          InstanceNotificationPublisher publisher=new InstanceNotificationPublisher();
          publisher.sendArtifactUpdateEvent(cartridgeSubscription.getRepository(),clusterId,String.valueOf(cartridgeSubscription.getSubscriber().getTenantId()));
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + cartridgeSubscription.getAlias() + ""String_Node_Str""+ cartridgeSubscription.getType()+ ""String_Node_Str"");
          }
        }
      }
    }
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.9972796517954298
116701,"public void removeSubscription(String clusterId,String subscriptionAlias){
  Set<CartridgeSubscription> existingSubscriptions=clusterIdToCartridgeSubscription.get(clusterId);
  if (existingSubscriptions != null && !existingSubscriptions.isEmpty()) {
    Iterator<CartridgeSubscription> iterator=existingSubscriptions.iterator();
    while (iterator.hasNext()) {
      CartridgeSubscription cartridgeSubscription=iterator.next();
      if (cartridgeSubscription.getAlias().equals(subscriptionAlias)) {
        iterator.remove();
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
        }
        break;
      }
    }
  }
  if (existingSubscriptions != null && existingSubscriptions.isEmpty()) {
    clusterIdToCartridgeSubscription.remove(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
    }
  }
}","public void removeSubscription(String clusterId,String subscriptionAlias){
  Set<CartridgeSubscription> existingSubscriptions=clusterIdToCartridgeSubscription.get(clusterId);
  if (existingSubscriptions != null && !existingSubscriptions.isEmpty()) {
    Iterator<CartridgeSubscription> iterator=existingSubscriptions.iterator();
    while (iterator.hasNext()) {
      CartridgeSubscription cartridgeSubscription=iterator.next();
      if (cartridgeSubscription.getAlias().equals(subscriptionAlias)) {
        iterator.remove();
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
        }
        break;
      }
    }
  }
  if (existingSubscriptions == null || existingSubscriptions.isEmpty()) {
    clusterIdToCartridgeSubscription.remove(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
    }
  }
}",0.9902173913043478
116702,"public void addSubscription(CartridgeSubscription cartridgeSubscription){
  String clusterDomain=cartridgeSubscription.getClusterDomain();
  if (clusterIdToCartridgeSubscription.containsKey(clusterDomain)) {
    Set<CartridgeSubscription> existingSubscriptions=clusterIdToCartridgeSubscription.get(clusterDomain);
    if (existingSubscriptions.remove(cartridgeSubscription)) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterDomain + ""String_Node_Str"");
      }
    }
    existingSubscriptions.add(cartridgeSubscription);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterDomain + ""String_Node_Str"");
    }
  }
 else {
    Set<CartridgeSubscription> subscriptions=new HashSet<CartridgeSubscription>();
    subscriptions.add(cartridgeSubscription);
    clusterIdToCartridgeSubscription.put(clusterDomain,subscriptions);
  }
}","public void addSubscription(CartridgeSubscription cartridgeSubscription){
  String clusterDomain=cartridgeSubscription.getClusterDomain();
  if (clusterIdToCartridgeSubscription.containsKey(clusterDomain)) {
    Set<CartridgeSubscription> existingSubscriptions=clusterIdToCartridgeSubscription.get(clusterDomain);
    if (existingSubscriptions.remove(cartridgeSubscription)) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + clusterDomain + ""String_Node_Str"");
      }
    }
    existingSubscriptions.add(cartridgeSubscription);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterDomain + ""String_Node_Str"");
    }
  }
 else {
    Set<CartridgeSubscription> subscriptions=new HashSet<CartridgeSubscription>();
    subscriptions.add(cartridgeSubscription);
    clusterIdToCartridgeSubscription.put(clusterDomain,subscriptions);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterDomain + ""String_Node_Str"");
    }
  }
}",0.9411764705882352
116703,"public void putSubscription(CartridgeSubscription cartridgeSubscription){
  clusterIdToSubscription.addSubscription(cartridgeSubscription);
  SubscriptionContext existingSubscriptionCtx=tenantIdToSubscriptionContext.getSubscriptionContext(cartridgeSubscription.getSubscriber().getTenantId());
  if (existingSubscriptionCtx != null) {
    existingSubscriptionCtx.addSubscription(cartridgeSubscription);
  }
 else {
    SubscriptionContext subscriptionContext=new SubscriptionContext();
    subscriptionContext.addSubscription(cartridgeSubscription);
    tenantIdToSubscriptionContext.addSubscriptionContext(cartridgeSubscription.getSubscriber().getTenantId(),subscriptionContext);
  }
}","public void putSubscription(CartridgeSubscription cartridgeSubscription){
  clusterIdToSubscription.addSubscription(cartridgeSubscription);
  SubscriptionContext existingSubscriptionCtx=tenantIdToSubscriptionContext.getSubscriptionContext(cartridgeSubscription.getSubscriber().getTenantId());
  if (existingSubscriptionCtx != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeSubscription.getSubscriber().getTenantId());
    }
    existingSubscriptionCtx.addSubscription(cartridgeSubscription);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + cartridgeSubscription.getSubscriber().getTenantId());
    }
    SubscriptionContext subscriptionContext=new SubscriptionContext();
    subscriptionContext.addSubscription(cartridgeSubscription);
    tenantIdToSubscriptionContext.addSubscriptionContext(cartridgeSubscription.getSubscriber().getTenantId(),subscriptionContext);
  }
}",0.7675276752767528
116704,"public CartridgeSubscription getSubscriptionForAlias(int tenantId,String subscriptionAlias){
  SubscriptionContext subscriptionContext=tenantIdToSubscriptionContext.getSubscriptionContext(tenantId);
  if (subscriptionContext == null) {
    return null;
  }
  return subscriptionContext.getSubscriptionForAlias(subscriptionAlias);
}","public CartridgeSubscription getSubscriptionForAlias(int tenantId,String subscriptionAlias){
  SubscriptionContext subscriptionContext=tenantIdToSubscriptionContext.getSubscriptionContext(tenantId);
  if (subscriptionContext == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ subscriptionAlias);
    }
    return null;
  }
  return subscriptionContext.getSubscriptionForAlias(subscriptionAlias);
}",0.8142493638676844
116705,"public void deleteSubscription(String type,String subscriptionAlias){
  Set<CartridgeSubscription> existingSubscriptions=cartridgeTypeToSubscriptions.get(type);
  if (existingSubscriptions != null && !existingSubscriptions.isEmpty()) {
    Iterator<CartridgeSubscription> iterator=existingSubscriptions.iterator();
    while (iterator.hasNext()) {
      CartridgeSubscription cartridgeSubscription=iterator.next();
      if (cartridgeSubscription.getAlias().equals(subscriptionAlias)) {
        iterator.remove();
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + subscriptionAlias + ""String_Node_Str""+ type+ ""String_Node_Str"");
        }
        break;
      }
    }
  }
  if (existingSubscriptions != null && existingSubscriptions.isEmpty()) {
    cartridgeTypeToSubscriptions.remove(type);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + type + ""String_Node_Str"");
    }
  }
  if (aliasToSubscription.remove(subscriptionAlias) != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + subscriptionAlias + ""String_Node_Str"");
    }
  }
}","public void deleteSubscription(String type,String subscriptionAlias){
  Set<CartridgeSubscription> existingSubscriptions=cartridgeTypeToSubscriptions.get(type);
  if (existingSubscriptions != null && !existingSubscriptions.isEmpty()) {
    Iterator<CartridgeSubscription> iterator=existingSubscriptions.iterator();
    while (iterator.hasNext()) {
      CartridgeSubscription cartridgeSubscription=iterator.next();
      if (cartridgeSubscription.getAlias().equals(subscriptionAlias)) {
        iterator.remove();
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + subscriptionAlias + ""String_Node_Str""+ type+ ""String_Node_Str"");
        }
        break;
      }
    }
  }
  if (existingSubscriptions == null || existingSubscriptions.isEmpty()) {
    cartridgeTypeToSubscriptions.remove(type);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + type + ""String_Node_Str"");
    }
  }
  if (aliasToSubscription.remove(subscriptionAlias) != null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + subscriptionAlias + ""String_Node_Str"");
    }
  }
}",0.6853526220614828
116706,"public void removeSubscriptionContext(int tenantId,String type,String subscriptionAlias){
  if (tenantIdToSubscriptionContext.containsKey(tenantId)) {
    SubscriptionContext subscriptionContext=tenantIdToSubscriptionContext.get(tenantId);
    subscriptionContext.deleteSubscription(type,subscriptionAlias);
    if (subscriptionContext.getSubscriptionsOfType(type) == null && subscriptionContext.getSubscriptionForAlias(subscriptionAlias) == null) {
      tenantIdToSubscriptionContext.remove(tenantId);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + tenantId);
      }
    }
  }
}","public void removeSubscriptionContext(int tenantId,String type,String subscriptionAlias){
  if (tenantIdToSubscriptionContext.containsKey(tenantId)) {
    SubscriptionContext subscriptionContext=tenantIdToSubscriptionContext.get(tenantId);
    subscriptionContext.deleteSubscription(type,subscriptionAlias);
    if (subscriptionContext.isEmpty()) {
      tenantIdToSubscriptionContext.remove(tenantId);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + tenantId);
      }
    }
  }
}",0.8946894689468947
116707,"public void removeSubscription(int tenantId,String subscriptionAlias) throws PersistenceManagerException {
  CartridgeSubscription cartridgeSubscription=getCartridgeSubscription(tenantId,subscriptionAlias);
  String cartridgeType=cartridgeSubscription.getType();
  String clusterId=cartridgeSubscription.getClusterDomain();
  LookupDataHolder.getInstance().acquireWriteLock();
  try {
    try {
      persistenceManager.removeCartridgeSubscription(tenantId,cartridgeType,subscriptionAlias);
    }
 catch (    PersistenceManagerException e) {
      String errorMsg=""String_Node_Str"";
      log.error(errorMsg,e);
      throw e;
    }
    LookupDataHolder.getInstance().removeSubscription(tenantId,cartridgeType,subscriptionAlias,clusterId);
  }
  finally {
    LookupDataHolder.getInstance().releaseWriteLock();
  }
}","public void removeSubscription(int tenantId,String subscriptionAlias) throws PersistenceManagerException {
  CartridgeSubscription cartridgeSubscription=getCartridgeSubscription(tenantId,subscriptionAlias);
  if (cartridgeSubscription == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenantId + ""String_Node_Str""+ subscriptionAlias);
    }
    return;
  }
  String cartridgeType=cartridgeSubscription.getType();
  String clusterId=cartridgeSubscription.getClusterDomain();
  LookupDataHolder.getInstance().acquireWriteLock();
  try {
    try {
      persistenceManager.removeCartridgeSubscription(tenantId,cartridgeType,subscriptionAlias);
    }
 catch (    PersistenceManagerException e) {
      String errorMsg=""String_Node_Str"";
      log.error(errorMsg,e);
      throw e;
    }
    LookupDataHolder.getInstance().removeSubscription(tenantId,cartridgeType,subscriptionAlias,clusterId);
  }
  finally {
    LookupDataHolder.getInstance().releaseWriteLock();
  }
}",0.9011595803423524
116708,"public Set<CartridgeSubscription> getCartridgeSubscription(String clusterId){
  LookupDataHolder.getInstance().acquireReadLock();
  try {
    Set<CartridgeSubscription> cartridgeSubscriptions=LookupDataHolder.getInstance().getSubscription(clusterId);
    return cartridgeSubscriptions;
  }
  finally {
    LookupDataHolder.getInstance().releaseReadLock();
  }
}","public CartridgeSubscription getCartridgeSubscription(int tenantId,String subscriptionAlias){
  LookupDataHolder.getInstance().acquireReadLock();
  try {
    CartridgeSubscription cartridgeSubscription=LookupDataHolder.getInstance().getSubscriptionForAlias(tenantId,subscriptionAlias);
    return cartridgeSubscription;
  }
  finally {
    LookupDataHolder.getInstance().releaseReadLock();
  }
}",0.7962962962962963
116709,"private Set<CartridgeSubscription> getCartridgeSubscription(String clusterDomain){
  try {
    return new DataInsertionAndRetrievalManager().getCartridgeSubscription(clusterDomain);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + clusterDomain,e);
    return null;
  }
}","private Set<CartridgeSubscription> getCartridgeSubscription(String clusterDomain){
  try {
    return new DataInsertionAndRetrievalManager().getCartridgeSubscriptionForCluster(clusterDomain);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + clusterDomain,e);
    return null;
  }
}",0.9827586206896552
116710,"private void monitor(){
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionCtxts.values()) {
    for (    PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",lbReferenceType);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
      minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(minCheckKnowledgeSession,minCheckFactHandle,partitionContext);
    }
    boolean rifReset=networkPartitionContext.isRifReset();
    boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
    boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
    if (rifReset || memoryConsumptionReset || loadAverageReset) {
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",autoscalePolicy);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",rifReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",memoryConsumptionReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",loadAverageReset);
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",lbReferenceType);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
      scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(scaleCheckKnowledgeSession,scaleCheckFactHandle,networkPartitionContext);
      networkPartitionContext.setRifReset(false);
      networkPartitionContext.setMemoryConsumptionReset(false);
      networkPartitionContext.setLoadAverageReset(false);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
}","private void monitor(){
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionCtxts.values()) {
    for (    PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",lbReferenceType);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
      minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(minCheckKnowledgeSession,minCheckFactHandle,partitionContext);
    }
    boolean rifReset=networkPartitionContext.isRifReset();
    boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
    boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
    if (rifReset || memoryConsumptionReset || loadAverageReset) {
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",autoscalePolicy);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",rifReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",memoryConsumptionReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",loadAverageReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",lbReferenceType);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
      scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(scaleCheckKnowledgeSession,scaleCheckFactHandle,networkPartitionContext);
      networkPartitionContext.setRifReset(false);
      networkPartitionContext.setMemoryConsumptionReset(false);
      networkPartitionContext.setLoadAverageReset(false);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
}",0.9979899497487436
116711,"@Override public void unregisterService(String clusterId) throws UnregisteredClusterException {
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + clusterId;
    log.error(msg);
    throw new UnregisteredClusterException(msg);
  }
  TopologyBuilder.handleClusterRemoved(ctxt);
  dataHolder.removeClusterContext(clusterId);
  dataHolder.removeMemberContext(clusterId);
  persist();
}","@Override public void unregisterService(String clusterId) throws UnregisteredClusterException {
  final String clusterId_=clusterId;
  Runnable r=new Runnable(){
    public void run(){
      ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
      Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
      while (members.size() > 0) {
        CloudControllerUtil.sleep(1000);
      }
      if (ctxt == null) {
        String msg=""String_Node_Str"" + clusterId_;
        log.error(msg);
      }
      log.info(""String_Node_Str"" + clusterId_);
      TopologyBuilder.handleClusterRemoved(ctxt);
      dataHolder.removeClusterContext(clusterId_);
      dataHolder.removeMemberContext(clusterId_);
      persist();
    }
  }
;
  new Thread(r).start();
}",0.5765345765345765
116712,"@Override public void run(){
  String clusterId=memberContext.getClusterId();
  Partition partition=memberContext.getPartition();
  try {
    String autoAssignIpProp=iaasProvider.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP_PROPERTY);
    String ip=""String_Node_Str"";
    if (autoAssignIpProp == null || (autoAssignIpProp != null && autoAssignIpProp.equals(""String_Node_Str""))) {
      Iaas iaas=iaasProvider.getIaas();
      ip=iaas.associateAddress(iaasProvider,node);
      memberContext.setAllocatedIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    if (node.getPublicAddresses() != null && node.getPublicAddresses().iterator().hasNext()) {
      ip=node.getPublicAddresses().iterator().next();
      memberContext.setPublicIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    if (node.getPrivateAddresses() != null && node.getPrivateAddresses().iterator().hasNext()) {
      ip=node.getPrivateAddresses().iterator().next();
      memberContext.setPrivateIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    dataHolder.addMemberContext(memberContext);
    persist();
    String memberID=memberContext.getMemberId();
    TopologyBuilder.handleMemberSpawned(memberID,cartridgeType,clusterId,memberContext.getNetworkPartitionId(),partition.getId(),ip,memberContext.getLbClusterId());
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + node.toString());
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","public void run(){
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId_);
  Collection<Member> members=TopologyManager.getTopology().getService(ctxt.getCartridgeType()).getCluster(clusterId_).getMembers();
  while (members.size() > 0) {
    CloudControllerUtil.sleep(1000);
  }
  if (ctxt == null) {
    String msg=""String_Node_Str"" + clusterId_;
    log.error(msg);
  }
  log.info(""String_Node_Str"" + clusterId_);
  TopologyBuilder.handleClusterRemoved(ctxt);
  dataHolder.removeClusterContext(clusterId_);
  dataHolder.removeMemberContext(clusterId_);
  persist();
}",0.0771646478241363
116713,"public static String getLbClusterId(String lbRefType,PartitionContext partitionCtxt,NetworkPartitionContext nwPartitionCtxt){
  String lbClusterId=null;
  if (lbRefType != null) {
    if (lbRefType.equals(org.apache.stratos.messaging.util.Constants.DEFAULT_LOAD_BALANCER)) {
      lbClusterId=nwPartitionCtxt.getDefaultLbClusterId();
    }
 else     if (lbRefType.equals(org.apache.stratos.messaging.util.Constants.SERVICE_AWARE_LOAD_BALANCER)) {
      String serviceName=partitionCtxt.getServiceName();
      lbClusterId=nwPartitionCtxt.getLBClusterIdOfService(serviceName);
    }
 else {
      log.warn(""String_Node_Str"" + lbRefType);
    }
  }
  return lbClusterId;
}","public static String getLbClusterId(String lbRefType,PartitionContext partitionCtxt,NetworkPartitionContext nwPartitionCtxt){
  String lbClusterId=null;
  if (lbRefType != null) {
    if (lbRefType.equals(org.apache.stratos.messaging.util.Constants.DEFAULT_LOAD_BALANCER)) {
      lbClusterId=PartitionManager.getInstance().getNetworkPartition(nwPartitionCtxt.getId()).getDefaultLbClusterId();
    }
 else     if (lbRefType.equals(org.apache.stratos.messaging.util.Constants.SERVICE_AWARE_LOAD_BALANCER)) {
      String serviceName=partitionCtxt.getServiceName();
      lbClusterId=PartitionManager.getInstance().getNetworkPartition(serviceName).getLBClusterIdOfService(nwPartitionCtxt.getId());
    }
 else {
      log.warn(""String_Node_Str"" + lbRefType);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",lbRefType,partitionCtxt.getPartitionId(),nwPartitionCtxt.getId(),lbClusterId));
  }
  return lbClusterId;
}",0.7634146341463415
116714,"private void handleMemberFaultEvent(String clusterId,String memberId){
  try {
    AutoscalerContext asCtx=AutoscalerContext.getInstance();
    AbstractMonitor monitor;
    if (asCtx.moniterExist(clusterId)) {
      monitor=asCtx.getMonitor(clusterId);
    }
 else     if (asCtx.lbMoniterExist(clusterId)) {
      monitor=asCtx.getLBMonitor(clusterId);
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",clusterId));
      }
      return;
    }
    NetworkPartitionContext nwPartitionCtxt;
    try {
      TopologyManager.acquireReadLock();
      Member member=findMember(memberId);
      if (null == member) {
        return;
      }
      if (!member.isActive()) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        return;
      }
      nwPartitionCtxt=monitor.getNetworkPartitionCtxt(member);
    }
  finally {
      TopologyManager.releaseReadLock();
    }
    CloudControllerClient ccClient=CloudControllerClient.getInstance();
    ccClient.terminate(memberId);
    String partitionId=monitor.getPartitionOfMember(memberId);
    Partition partition=monitor.getDeploymentPolicy().getPartitionById(partitionId);
    PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
    partitionCtxt.removeActiveMemberById(memberId);
    String lbClusterId=AutoscalerRuleEvaluator.getLbClusterId(partitionCtxt,nwPartitionCtxt);
    partitionCtxt.addPendingMember(ccClient.spawnAnInstance(partition,clusterId,lbClusterId,nwPartitionCtxt.getId()));
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",partitionId,clusterId,lbClusterId));
    }
  }
 catch (  TerminationException e) {
    log.error(e);
  }
catch (  SpawningException e) {
    log.error(e);
  }
}","private void handleMemberFaultEvent(String clusterId,String memberId){
  try {
    AutoscalerContext asCtx=AutoscalerContext.getInstance();
    AbstractMonitor monitor;
    if (asCtx.moniterExist(clusterId)) {
      monitor=asCtx.getMonitor(clusterId);
    }
 else     if (asCtx.lbMoniterExist(clusterId)) {
      monitor=asCtx.getLBMonitor(clusterId);
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",clusterId));
      }
      return;
    }
    NetworkPartitionContext nwPartitionCtxt;
    try {
      TopologyManager.acquireReadLock();
      Member member=findMember(memberId);
      if (null == member) {
        return;
      }
      if (!member.isActive()) {
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
        }
        return;
      }
      nwPartitionCtxt=monitor.getNetworkPartitionCtxt(member);
    }
  finally {
      TopologyManager.releaseReadLock();
    }
    String partitionId=monitor.getPartitionOfMember(memberId);
    Partition partition=monitor.getDeploymentPolicy().getPartitionById(partitionId);
    PartitionContext partitionCtxt=nwPartitionCtxt.getPartitionCtxt(partitionId);
    if (!partitionCtxt.activeMemberExist(memberId)) {
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",memberId));
      }
      return;
    }
    CloudControllerClient ccClient=CloudControllerClient.getInstance();
    ccClient.terminate(memberId);
    partitionCtxt.removeActiveMemberById(memberId);
    String lbClusterId=AutoscalerRuleEvaluator.getLbClusterId(partitionCtxt,nwPartitionCtxt);
    partitionCtxt.addPendingMember(ccClient.spawnAnInstance(partition,clusterId,lbClusterId,nwPartitionCtxt.getId()));
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",memberId,partitionId,clusterId,lbClusterId));
    }
  }
 catch (  TerminationException e) {
    log.error(e);
  }
catch (  SpawningException e) {
    log.error(e);
  }
}",0.896551724137931
116715,"private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Thread th;
            if (cluster.isLbCluster()) {
              th=new Thread(new LBClusterMonitorAdder(cluster));
            }
 else {
              th=new Thread(new ClusterMonitorAdder(cluster));
            }
            th.start();
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        ClusterCreatedEvent e=(ClusterCreatedEvent)event;
        TopologyManager.acquireReadLock();
        Service service=TopologyManager.getTopology().getService(e.getServiceName());
        Cluster cluster=service.getCluster(e.getClusterId());
        if (cluster.isLbCluster()) {
          Thread th=new Thread(new LBClusterMonitorAdder(cluster));
          th.start();
        }
 else {
          Thread th=new Thread(new ClusterMonitorAdder(cluster));
          th.start();
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        ClusterRemovedEvent e=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLock();
        String serviceName=e.getServiceName();
        String clusterId=e.getClusterId();
        AbstractMonitor monitor;
        if (e.isLbCluster()) {
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        monitor.destroy();
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",clusterId));
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberTerminatedEvent e=(MemberTerminatedEvent)event;
        String networkPartitionId=e.getNetworkPartitionId();
        String clusterId=e.getClusterId();
        String partitionId=e.getPartitionId();
        AbstractMonitor monitor;
        if (AutoscalerContext.getInstance().moniterExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.removeMemberStatsContext(e.getMemberId());
        if (!partitionContext.removeTerminationPendingMember(e.getMemberId())) {
          if (log.isErrorEnabled()) {
            log.error(String.format(""String_Node_Str"",e.getMemberId()));
          }
        }
 else         if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",e.getMemberId()));
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent e=(MemberActivatedEvent)event;
        String memberId=e.getMemberId();
        String partitionId=e.getPartitionId();
        String networkPartitionId=e.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=e.getClusterId();
        AbstractMonitor monitor;
        if (AutoscalerContext.getInstance().moniterExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ServiceRemovedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  return processorChain;
}","private TopologyMessageProcessorChain createEventProcessorChain(){
  TopologyMessageProcessorChain processorChain=new TopologyMessageProcessorChain();
  processorChain.addEventListener(new CompleteTopologyEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        for (        Service service : TopologyManager.getTopology().getServices()) {
          for (          Cluster cluster : service.getClusters()) {
            Thread th;
            if (cluster.isLbCluster()) {
              th=new Thread(new LBClusterMonitorAdder(cluster));
            }
 else {
              th=new Thread(new ClusterMonitorAdder(cluster));
            }
            th.start();
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",cluster.getClusterId()));
            }
          }
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterCreatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        ClusterCreatedEvent e=(ClusterCreatedEvent)event;
        TopologyManager.acquireReadLock();
        Service service=TopologyManager.getTopology().getService(e.getServiceName());
        Cluster cluster=service.getCluster(e.getClusterId());
        if (cluster.isLbCluster()) {
          Thread th=new Thread(new LBClusterMonitorAdder(cluster));
          th.start();
        }
 else {
          Thread th=new Thread(new ClusterMonitorAdder(cluster));
          th.start();
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ClusterRemovedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        ClusterRemovedEvent e=(ClusterRemovedEvent)event;
        TopologyManager.acquireReadLock();
        String serviceName=e.getServiceName();
        String clusterId=e.getClusterId();
        AbstractMonitor monitor;
        if (e.isLbCluster()) {
          monitor=AutoscalerContext.getInstance().removeLbMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().removeMonitor(clusterId);
        }
        monitor.destroy();
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",clusterId));
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new MemberStartedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  processorChain.addEventListener(new MemberTerminatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberTerminatedEvent e=(MemberTerminatedEvent)event;
        String networkPartitionId=e.getNetworkPartitionId();
        String clusterId=e.getClusterId();
        String partitionId=e.getPartitionId();
        AbstractMonitor monitor;
        if (AutoscalerContext.getInstance().moniterExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
        }
        NetworkPartitionContext networkPartitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId);
        PartitionContext partitionContext=networkPartitionContext.getPartitionCtxt(partitionId);
        partitionContext.removeMemberStatsContext(e.getMemberId());
        if (!partitionContext.removeTerminationPendingMember(e.getMemberId())) {
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",e.getMemberId()));
          }
        }
 else         if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",e.getMemberId()));
        }
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new MemberActivatedEventListener(){
    @Override protected void onEvent(    Event event){
      try {
        TopologyManager.acquireReadLock();
        MemberActivatedEvent e=(MemberActivatedEvent)event;
        String memberId=e.getMemberId();
        String partitionId=e.getPartitionId();
        String networkPartitionId=e.getNetworkPartitionId();
        PartitionContext partitionContext;
        String clusterId=e.getClusterId();
        AbstractMonitor monitor;
        if (AutoscalerContext.getInstance().moniterExist(clusterId)) {
          monitor=AutoscalerContext.getInstance().getMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
 else {
          monitor=AutoscalerContext.getInstance().getLBMonitor(clusterId);
          partitionContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(partitionId);
        }
        partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
        if (log.isInfoEnabled()) {
          log.info(String.format(""String_Node_Str"",memberId));
        }
        partitionContext.movePendingMemberToActiveMembers(memberId);
      }
  finally {
        TopologyManager.releaseReadLock();
      }
    }
  }
);
  processorChain.addEventListener(new ServiceRemovedEventListener(){
    @Override protected void onEvent(    Event event){
    }
  }
);
  return processorChain;
}",0.9981721805885578
116716,"private void monitor(){
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionCtxts.values()) {
    for (    PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",lbReferenceType);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
      minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(minCheckKnowledgeSession,minCheckFactHandle,partitionContext);
    }
    boolean rifReset=networkPartitionContext.isRifReset();
    boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
    boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
    if (rifReset || memoryConsumptionReset || loadAverageReset) {
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",autoscalePolicy);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",rifReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",memoryConsumptionReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",loadAverageReset);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
      scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(scaleCheckKnowledgeSession,scaleCheckFactHandle,networkPartitionContext);
      networkPartitionContext.setRifReset(false);
      networkPartitionContext.setMemoryConsumptionReset(false);
      networkPartitionContext.setLoadAverageReset(false);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
}","private void monitor(){
  for (  NetworkPartitionContext networkPartitionContext : networkPartitionCtxts.values()) {
    for (    PartitionContext partitionContext : networkPartitionContext.getPartitionCtxts().values()) {
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",lbReferenceType);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
      minCheckFactHandle=AutoscalerRuleEvaluator.evaluateMinCheck(minCheckKnowledgeSession,minCheckFactHandle,partitionContext);
    }
    boolean rifReset=networkPartitionContext.isRifReset();
    boolean memoryConsumptionReset=networkPartitionContext.isMemoryConsumptionReset();
    boolean loadAverageReset=networkPartitionContext.isLoadAverageReset();
    if (rifReset || memoryConsumptionReset || loadAverageReset) {
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",clusterId);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",autoscalePolicy);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",rifReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",memoryConsumptionReset);
      scaleCheckKnowledgeSession.setGlobal(""String_Node_Str"",loadAverageReset);
      minCheckKnowledgeSession.setGlobal(""String_Node_Str"",lbReferenceType);
      if (log.isDebugEnabled()) {
        log.debug(String.format(""String_Node_Str"",networkPartitionContext.getId()));
      }
      scaleCheckFactHandle=AutoscalerRuleEvaluator.evaluateScaleCheck(scaleCheckKnowledgeSession,scaleCheckFactHandle,networkPartitionContext);
      networkPartitionContext.setRifReset(false);
      networkPartitionContext.setMemoryConsumptionReset(false);
      networkPartitionContext.setLoadAverageReset(false);
    }
 else     if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
}",0.9802614714175852
116717,"public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null || args.length > 0) {
    String admin=null;
    String firstName=null;
    String lastaName=null;
    String password=null;
    String domain=null;
    String email=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.USERNAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        admin=commandLine.getOptionValue(CliConstants.USERNAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.FIRST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        firstName=commandLine.getOptionValue(CliConstants.FIRST_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.LAST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        lastaName=commandLine.getOptionValue(CliConstants.LAST_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.PASSWORD_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        password=commandLine.getOptionValue(CliConstants.PASSWORD_OPTION);
      }
      if (commandLine.hasOption(CliConstants.DOMAIN_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        domain=commandLine.getOptionValue(CliConstants.DOMAIN_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.EMAIL_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        email=commandLine.getOptionValue(CliConstants.EMAIL_OPTION);
      }
      if (admin == null || firstName == null || lastaName == null || password == null || domain == null || email == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().addTenant(admin,firstName,lastaName,password,domain,email);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length > 0) {
    String admin=null;
    String firstName=null;
    String lastaName=null;
    String password=null;
    String domain=null;
    String email=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.USERNAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        admin=commandLine.getOptionValue(CliConstants.USERNAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.FIRST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        firstName=commandLine.getOptionValue(CliConstants.FIRST_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.LAST_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        lastaName=commandLine.getOptionValue(CliConstants.LAST_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.PASSWORD_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        password=commandLine.getOptionValue(CliConstants.PASSWORD_OPTION);
      }
      if (commandLine.hasOption(CliConstants.DOMAIN_NAME_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        domain=commandLine.getOptionValue(CliConstants.DOMAIN_NAME_OPTION);
      }
      if (commandLine.hasOption(CliConstants.EMAIL_OPTION)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        email=commandLine.getOptionValue(CliConstants.EMAIL_OPTION);
      }
      if (admin == null || firstName == null || lastaName == null || password == null || domain == null || email == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().addTenant(admin,firstName,lastaName,password,domain,email);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}",0.9992748368382888
116718,"public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null || args.length > 0) {
    String resourcePath=null;
    String autoscalingPolicyDeployment=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        autoscalingPolicyDeployment=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployAutoscalingPolicy(autoscalingPolicyDeployment);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length > 0) {
    String resourcePath=null;
    String autoscalingPolicyDeployment=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        autoscalingPolicyDeployment=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployAutoscalingPolicy(autoscalingPolicyDeployment);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}",0.9987269255251432
116719,"public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null || args.length > 0) {
    String resourcePath=null;
    String cartridgeDeploymentJSON=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        cartridgeDeploymentJSON=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployCartridgeDefinition(cartridgeDeploymentJSON);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length > 0) {
    String resourcePath=null;
    String cartridgeDeploymentJSON=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        cartridgeDeploymentJSON=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployCartridgeDefinition(cartridgeDeploymentJSON);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}",0.9987187700192184
116720,"public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null || args.length > 0) {
    String resourcePath=null;
    String deploymentPolicyDeployment=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        deploymentPolicyDeployment=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployDeploymentPolicy(deploymentPolicyDeployment);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length > 0) {
    String resourcePath=null;
    String deploymentPolicyDeployment=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        deploymentPolicyDeployment=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployDeploymentPolicy(deploymentPolicyDeployment);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}",0.9987236758136566
116721,"public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null || args.length > 0) {
    String resourcePath=null;
    String partionDeployment=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        partionDeployment=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployPartition(partionDeployment);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}","public int execute(StratosCommandContext context,String[] args) throws CommandException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName());
  }
  if (args != null && args.length > 0) {
    String resourcePath=null;
    String partionDeployment=null;
    final CommandLineParser parser=new GnuParser();
    CommandLine commandLine;
    try {
      commandLine=parser.parse(options,args);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      if (commandLine.hasOption(CliConstants.RESOURCE_PATH)) {
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"");
        }
        resourcePath=commandLine.getOptionValue(CliConstants.RESOURCE_PATH);
        partionDeployment=readResource(resourcePath);
      }
      if (resourcePath == null) {
        System.out.println(""String_Node_Str"" + getName() + ""String_Node_Str"");
        return CliConstants.BAD_ARGS_CODE;
      }
      RestCommandLineService.getInstance().deployPartition(partionDeployment);
      return CliConstants.SUCCESSFUL_CODE;
    }
 catch (    ParseException e) {
      if (logger.isErrorEnabled()) {
        logger.error(""String_Node_Str"",e);
      }
      System.out.println(e.getMessage());
      return CliConstants.BAD_ARGS_CODE;
    }
catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      return CliConstants.BAD_ARGS_CODE;
    }
  }
 else {
    context.getStratosApplication().printUsage(getName());
    return CliConstants.BAD_ARGS_CODE;
  }
}",0.9986953685583824
116722,"public CartridgeSubscription subscribeToCartridgeWithProperties(String cartridgeType,String cartridgeAlias,String autoscalingPolicyName,String deploymentPolicyName,String tenantDomain,int tenantId,String tenantAdminUsername,String repositoryType,String repositoryURL,boolean isPrivateRepository,String repositoryUsername,String repositoryPassword,Property[] props) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  CartridgeSubscriptionUtils.validateCartridgeAlias(tenantId,cartridgeType,cartridgeAlias);
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (props != null) {
      cartridgeInfo.setProperties(props);
    }
  }
 catch (  UnregisteredCartridgeException e) {
    String message=cartridgeType + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + cartridgeType;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  Repository repository=cartridgeSubscription.manageRepository(repositoryURL,repositoryUsername,repositoryPassword,isPrivateRepository,cartridgeAlias,cartridgeInfo,tenantDomain);
  Subscriber subscriber=new Subscriber(tenantAdminUsername,tenantId,tenantDomain);
  cartridgeSubscription.setSubscriptionKey(CartridgeSubscriptionUtils.generateSubscriptionKey());
  cartridgeSubscription.createSubscription(subscriber,cartridgeAlias,autoscalingPolicyName,deploymentPolicyName,repository);
  log.info(""String_Node_Str"" + tenantId + ""String_Node_Str""+ tenantAdminUsername+ ""String_Node_Str""+ ""String_Node_Str""+ cartridgeAlias+ ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ repositoryURL+ ""String_Node_Str""+ autoscalingPolicyName);
  CartridgeSubscriptionUtils.publishTenantSubscribedEvent(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getCartridgeInfo().getType());
  return cartridgeSubscription;
}","public CartridgeSubscription subscribeToCartridgeWithProperties(String cartridgeType,String cartridgeAlias,String autoscalingPolicyName,String deploymentPolicyName,String tenantDomain,int tenantId,String tenantAdminUsername,String repositoryType,String repositoryURL,boolean isPrivateRepository,String repositoryUsername,String repositoryPassword,Property[] props) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  CartridgeSubscriptionUtils.validateCartridgeAlias(tenantId,cartridgeType,cartridgeAlias);
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (props != null) {
      for (      Property property : props)       cartridgeInfo.addProperties(property);
    }
  }
 catch (  UnregisteredCartridgeException e) {
    String message=cartridgeType + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + cartridgeType;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  Repository repository=cartridgeSubscription.manageRepository(repositoryURL,repositoryUsername,repositoryPassword,isPrivateRepository,cartridgeAlias,cartridgeInfo,tenantDomain);
  Subscriber subscriber=new Subscriber(tenantAdminUsername,tenantId,tenantDomain);
  cartridgeSubscription.setSubscriptionKey(CartridgeSubscriptionUtils.generateSubscriptionKey());
  cartridgeSubscription.createSubscription(subscriber,cartridgeAlias,autoscalingPolicyName,deploymentPolicyName,repository);
  log.info(""String_Node_Str"" + tenantId + ""String_Node_Str""+ tenantAdminUsername+ ""String_Node_Str""+ ""String_Node_Str""+ cartridgeAlias+ ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ repositoryURL+ ""String_Node_Str""+ autoscalingPolicyName);
  CartridgeSubscriptionUtils.publishTenantSubscribedEvent(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getCartridgeInfo().getType());
  return cartridgeSubscription;
}",0.989310009718173
116723,"public IpAllocator(MemberContext memberContext,ComputeService computeService,Template template,IaasProvider iaasProvider,String cartridgeType,NodeMetadata node){
  this.memberContext=memberContext;
  this.computeService=computeService;
  this.template=template;
  this.iaasProvider=iaasProvider;
  this.cartridgeType=cartridgeType;
  this.node=node;
}","public IpAllocator(MemberContext memberContext,IaasProvider iaasProvider,String cartridgeType,NodeMetadata node){
  this.memberContext=memberContext;
  this.iaasProvider=iaasProvider;
  this.cartridgeType=cartridgeType;
  this.node=node;
}",0.8101694915254237
116724,"@Override public void run(){
  String clusterId=memberContext.getClusterId();
  Partition partition=memberContext.getPartition();
  String str=clusterId.substring(0,10);
  String group=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    String autoAssignIpProp=iaasProvider.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP_PROPERTY);
    String ip=""String_Node_Str"";
    if (autoAssignIpProp == null || (autoAssignIpProp != null && autoAssignIpProp.equals(""String_Node_Str""))) {
      Iaas iaas=iaasProvider.getIaas();
      ip=iaas.associateAddress(iaasProvider,node);
      memberContext.setAllocatedIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    if (node.getPublicAddresses() != null && node.getPublicAddresses().iterator().hasNext()) {
      ip=node.getPublicAddresses().iterator().next();
      memberContext.setPublicIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    if (node.getPrivateAddresses() != null && node.getPrivateAddresses().iterator().hasNext()) {
      ip=node.getPrivateAddresses().iterator().next();
      memberContext.setPrivateIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    dataHolder.addMemberContext(memberContext);
    persist();
    String memberID=memberContext.getMemberId();
    TopologyBuilder.handleMemberSpawned(memberID,cartridgeType,clusterId,memberContext.getNetworkPartitionId(),partition.getId(),ip,memberContext.getLbClusterId());
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + node.toString() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","@Override public void run(){
  String clusterId=memberContext.getClusterId();
  Partition partition=memberContext.getPartition();
  try {
    String autoAssignIpProp=iaasProvider.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP_PROPERTY);
    String ip=""String_Node_Str"";
    if (autoAssignIpProp == null || (autoAssignIpProp != null && autoAssignIpProp.equals(""String_Node_Str""))) {
      Iaas iaas=iaasProvider.getIaas();
      ip=iaas.associateAddress(iaasProvider,node);
      memberContext.setAllocatedIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    if (node.getPublicAddresses() != null && node.getPublicAddresses().iterator().hasNext()) {
      ip=node.getPublicAddresses().iterator().next();
      memberContext.setPublicIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    if (node.getPrivateAddresses() != null && node.getPrivateAddresses().iterator().hasNext()) {
      ip=node.getPrivateAddresses().iterator().next();
      memberContext.setPrivateIpAddress(ip);
      log.info(""String_Node_Str"" + memberContext.toString());
    }
    dataHolder.addMemberContext(memberContext);
    persist();
    String memberID=memberContext.getMemberId();
    TopologyBuilder.handleMemberSpawned(memberID,cartridgeType,clusterId,memberContext.getNetworkPartitionId(),partition.getId(),ip,memberContext.getLbClusterId());
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + node.toString() + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.9687137891077636
116725,"@Override public boolean validateDeploymentPolicy(String cartridgeType,Partition[] partitions) throws InvalidPartitionException, InvalidCartridgeTypeException {
  Map<String,IaasProvider> partitionToIaasProviders=new ConcurrentHashMap<String,IaasProvider>();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg);
    throw new InvalidCartridgeTypeException(msg);
  }
  for (  Partition partition : partitions) {
    String provider=partition.getProvider();
    IaasProvider iaasProvider=cartridge.getIaasProvider(provider);
    if (iaasProvider == null) {
      String msg=""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ provider;
      log.error(msg);
      throw new InvalidPartitionException(msg);
    }
    Iaas iaas=iaasProvider.getIaas();
    if (iaas == null) {
      try {
        iaas=setIaas(iaasProvider);
      }
 catch (      InvalidIaasProviderException e) {
        String msg=""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ provider;
        log.error(msg,e);
        throw new InvalidPartitionException(msg,e);
      }
    }
    PartitionValidator validator=iaas.getPartitionValidator();
    validator.setIaasProvider(iaasProvider);
    IaasProvider updatedIaasProvider=validator.validate(partition.getId(),CloudControllerUtil.toJavaUtilProperties(partition.getProperties()));
    partitionToIaasProviders.put(partition.getId(),updatedIaasProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ ""String_Node_Str""+ cartridgeType);
    }
  }
  cartridge.addIaasProviders(partitionToIaasProviders);
  log.info(""String_Node_Str"" + cartridgeType);
  return true;
}","@Override public boolean validateDeploymentPolicy(String cartridgeType,Partition[] partitions) throws InvalidPartitionException, InvalidCartridgeTypeException {
  Map<String,IaasProvider> partitionToIaasProviders=new ConcurrentHashMap<String,IaasProvider>();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg);
    throw new InvalidCartridgeTypeException(msg);
  }
  for (  Partition partition : partitions) {
    String provider=partition.getProvider();
    IaasProvider iaasProvider=cartridge.getIaasProvider(provider);
    if (iaasProvider == null) {
      String msg=""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ provider;
      log.error(msg);
      throw new InvalidPartitionException(msg);
    }
    Iaas iaas=iaasProvider.getIaas();
    if (iaas == null) {
      try {
        iaas=setIaas(iaasProvider);
      }
 catch (      InvalidIaasProviderException e) {
        String msg=""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ provider;
        log.error(msg,e);
        throw new InvalidPartitionException(msg,e);
      }
    }
    PartitionValidator validator=iaas.getPartitionValidator();
    validator.setIaasProvider(iaasProvider);
    IaasProvider updatedIaasProvider=validator.validate(partition.getId(),CloudControllerUtil.toJavaUtilProperties(partition.getProperties()));
    partitionToIaasProviders.put(partition.getId(),updatedIaasProvider);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ ""String_Node_Str""+ cartridgeType);
    }
  }
  cartridge.addIaasProviders(partitionToIaasProviders);
  log.info(""String_Node_Str"" + CloudControllerUtil.getPartitionIds(partitions) + ""String_Node_Str""+ cartridgeType);
  return true;
}",0.9809234171965716
116726,"@Override public MemberContext startInstance(MemberContext memberContext) throws IllegalArgumentException, UnregisteredCartridgeException {
  if (memberContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=memberContext.getClusterId();
  Partition partition=memberContext.getPartition();
  log.info(""String_Node_Str"" + memberContext.toString());
  ComputeService computeService=null;
  Template template=null;
  if (partition == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String partitionId=partition.getId();
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  memberContext.setCartridgeType(cartridgeType);
  IaasProvider iaasProvider=cartridge.getIaasProviderOfPartition(partitionId);
  if (iaasProvider == null) {
    String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ ""String_Node_Str""+ partitionId+ ""String_Node_Str""+ cartridgeType;
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  String type=iaasProvider.getType();
  try {
    String memberID=generateMemberId(clusterId);
    memberContext.setMemberId(memberID);
    StringBuilder payload=new StringBuilder(ctxt.getPayload());
    addToPayload(payload,""String_Node_Str"",memberID);
    addToPayload(payload,""String_Node_Str"",memberContext.getLbClusterId());
    addToPayload(payload,""String_Node_Str"",memberContext.getNetworkPartitionId());
    addToPayload(payload,""String_Node_Str"",partitionId);
    StringBuilder persistancePayload=new StringBuilder();
    if (isPersistanceMappingAvailable(cartridge)) {
      int i=0;
      for (; i < cartridge.getPeristanceMappings().size() - 1; i++) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + cartridge.getPeristanceMappings().get(i).toString());
        }
        persistancePayload.append(cartridge.getPeristanceMappings().get(i).getDevice());
        persistancePayload.append(""String_Node_Str"");
      }
      persistancePayload.append(cartridge.getPeristanceMappings().get(i).getDevice());
    }
    addToPayload(payload,""String_Node_Str"",persistancePayload.toString());
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + payload.toString());
    }
    iaasProvider.setPayload(payload.toString().getBytes());
    Iaas iaas=iaasProvider.getIaas();
    if (iaas == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + type + ""String_Node_Str"");
      }
      try {
        iaas=setIaas(iaasProvider);
      }
 catch (      InvalidIaasProviderException e) {
        String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ type;
        log.error(msg,e);
        throw new CloudControllerException(msg,e);
      }
    }
    iaas.setDynamicPayload(iaasProvider);
    computeService=iaasProvider.getComputeService();
    template=iaasProvider.getTemplate();
    if (isPersistanceMappingAvailable(cartridge)) {
      Iterator<PersistanceMapping> it=cartridge.getPeristanceMappings().iterator();
      while (it.hasNext()) {
        PersistanceMapping maping=it.next();
        template.getOptions().as(EC2TemplateOptions.class).mapEBSSnapshotToDeviceName(maping.getDevice(),maping.getSnapshotId(),maping.getSize(),maping.isRemoveOntermination());
      }
    }
    if (template == null) {
      String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      log.error(msg);
      throw new CloudControllerException(msg);
    }
    String str=clusterId.substring(0,10);
    String group=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
    NodeMetadata node;
    Set<? extends NodeMetadata> nodes=computeService.createNodesInGroup(group,1,template);
    node=nodes.iterator().next();
    ThreadExecutor exec=ThreadExecutor.getInstance();
    exec.execute(new IpAllocator(memberContext,computeService,template,iaasProvider,cartridgeType,node));
    String nodeId=node.getId();
    if (nodeId == null) {
      String msg=""String_Node_Str"" + memberContext.toString();
      log.fatal(msg);
      throw new CloudControllerException(msg);
    }
    memberContext.setNodeId(nodeId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + memberContext.toString());
    }
    log.info(""String_Node_Str"" + memberContext.toString());
    return memberContext;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","@Override public MemberContext startInstance(MemberContext memberContext) throws IllegalArgumentException, UnregisteredCartridgeException {
  if (memberContext == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String clusterId=memberContext.getClusterId();
  Partition partition=memberContext.getPartition();
  log.info(""String_Node_Str"" + memberContext.toString());
  ComputeService computeService=null;
  Template template=null;
  if (partition == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String partitionId=partition.getId();
  ClusterContext ctxt=dataHolder.getClusterContext(clusterId);
  if (ctxt == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String cartridgeType=ctxt.getCartridgeType();
  Cartridge cartridge=dataHolder.getCartridge(cartridgeType);
  if (cartridge == null) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg);
    throw new UnregisteredCartridgeException(msg);
  }
  memberContext.setCartridgeType(cartridgeType);
  IaasProvider iaasProvider=cartridge.getIaasProviderOfPartition(partitionId);
  if (iaasProvider == null) {
    String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ ""String_Node_Str""+ partitionId+ ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ ""String_Node_Str""+ cartridge.getPartitionToIaasProvider().keySet().toString();
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  String type=iaasProvider.getType();
  try {
    String memberID=generateMemberId(clusterId);
    memberContext.setMemberId(memberID);
    StringBuilder payload=new StringBuilder(ctxt.getPayload());
    addToPayload(payload,""String_Node_Str"",memberID);
    addToPayload(payload,""String_Node_Str"",memberContext.getLbClusterId());
    addToPayload(payload,""String_Node_Str"",memberContext.getNetworkPartitionId());
    addToPayload(payload,""String_Node_Str"",partitionId);
    StringBuilder persistancePayload=new StringBuilder();
    if (isPersistanceMappingAvailable(cartridge)) {
      int i=0;
      for (; i < cartridge.getPeristanceMappings().size() - 1; i++) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + cartridge.getPeristanceMappings().get(i).toString());
        }
        persistancePayload.append(cartridge.getPeristanceMappings().get(i).getDevice());
        persistancePayload.append(""String_Node_Str"");
      }
      persistancePayload.append(cartridge.getPeristanceMappings().get(i).getDevice());
    }
    addToPayload(payload,""String_Node_Str"",persistancePayload.toString());
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + payload.toString());
    }
    iaasProvider.setPayload(payload.toString().getBytes());
    Iaas iaas=iaasProvider.getIaas();
    if (iaas == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + type + ""String_Node_Str"");
      }
      try {
        iaas=setIaas(iaasProvider);
      }
 catch (      InvalidIaasProviderException e) {
        String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ type;
        log.error(msg,e);
        throw new CloudControllerException(msg,e);
      }
    }
    iaas.setDynamicPayload(iaasProvider);
    computeService=iaasProvider.getComputeService();
    template=iaasProvider.getTemplate();
    if (isPersistanceMappingAvailable(cartridge)) {
      Iterator<PersistanceMapping> it=cartridge.getPeristanceMappings().iterator();
      while (it.hasNext()) {
        PersistanceMapping maping=it.next();
        template.getOptions().as(EC2TemplateOptions.class).mapEBSSnapshotToDeviceName(maping.getDevice(),maping.getSnapshotId(),maping.getSize(),maping.isRemoveOntermination());
      }
    }
    if (template == null) {
      String msg=""String_Node_Str"" + memberContext.toString() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      log.error(msg);
      throw new CloudControllerException(msg);
    }
    String str=clusterId.length() > 10 ? clusterId.substring(0,10) : clusterId.substring(0,clusterId.length());
    String group=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
    NodeMetadata node;
    Set<? extends NodeMetadata> nodes=computeService.createNodesInGroup(group,1,template);
    node=nodes.iterator().next();
    ThreadExecutor exec=ThreadExecutor.getInstance();
    exec.execute(new IpAllocator(memberContext,iaasProvider,cartridgeType,node));
    String nodeId=node.getId();
    if (nodeId == null) {
      String msg=""String_Node_Str"" + memberContext.toString();
      log.fatal(msg);
      throw new CloudControllerException(msg);
    }
    memberContext.setNodeId(nodeId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + memberContext.toString());
    }
    log.info(""String_Node_Str"" + memberContext.toString());
    return memberContext;
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + memberContext.toString();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.9812792511700468
116727,"private LoadAverage findLoadAverage(String memberId){
  Member member=findMember(memberId);
  if (null == member) {
    if (log.isErrorEnabled()) {
      log.error(String.format(""String_Node_Str"",memberId));
    }
    return null;
  }
  String clusterId=member.getClusterId();
  AutoscalerContext asCtx=AutoscalerContext.getInstance();
  AbstractMonitor monitor;
  if (asCtx.moniterExist(clusterId)) {
    monitor=asCtx.getMonitor(clusterId);
  }
 else   if (asCtx.lbMoniterExist(clusterId)) {
    monitor=asCtx.getLBMonitor(clusterId);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",clusterId));
    }
    return null;
  }
  String networkPartitionId=findNetworkPartitionId(memberId);
  MemberStatsContext memberStatsContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(member.getPartitionId()).getMemberStatsContext(memberId);
  if (null == memberStatsContext) {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",memberId));
    }
    return null;
  }
 else   if (!member.isActive()) {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
    }
    return null;
  }
  LoadAverage loadAverage=memberStatsContext.getLoadAverage();
  return loadAverage;
}","private LoadAverage findLoadAverage(String memberId){
  Member member=findMember(memberId);
  if (null == member) {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",memberId));
    }
    return null;
  }
  String clusterId=member.getClusterId();
  AutoscalerContext asCtx=AutoscalerContext.getInstance();
  AbstractMonitor monitor;
  if (asCtx.moniterExist(clusterId)) {
    monitor=asCtx.getMonitor(clusterId);
  }
 else   if (asCtx.lbMoniterExist(clusterId)) {
    monitor=asCtx.getLBMonitor(clusterId);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",clusterId));
    }
    return null;
  }
  String networkPartitionId=findNetworkPartitionId(memberId);
  MemberStatsContext memberStatsContext=monitor.getNetworkPartitionCtxt(networkPartitionId).getPartitionCtxt(member.getPartitionId()).getMemberStatsContext(memberId);
  if (null == memberStatsContext) {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",memberId));
    }
    return null;
  }
 else   if (!member.isActive()) {
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",memberId));
    }
    return null;
  }
  LoadAverage loadAverage=memberStatsContext.getLoadAverage();
  return loadAverage;
}",0.992378048780488
116728,"@Override public void run(){
  while (!terminated) {
    try {
      try {
        Thread.sleep(statsPublisherInterval);
      }
 catch (      InterruptedException ignore) {
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      if (inFlightRequestPublisher.isEnabled()) {
        try {
          TopologyManager.acquireReadLock();
          int requestCount;
          for (          Service service : TopologyManager.getTopology().getServices()) {
            for (            Cluster cluster : service.getClusters()) {
              if (!cluster.isLbCluster()) {
                requestCount=statsReader.getInFlightRequestCount(cluster.getClusterId());
                inFlightRequestPublisher.publish(cluster.getClusterId(),networkPartitionId,requestCount);
                if (log.isDebugEnabled()) {
                  log.debug(String.format(""String_Node_Str"",cluster.getClusterId(),networkPartitionId,requestCount));
                }
              }
 else {
                if (log.isWarnEnabled()) {
                  log.warn(String.format(""String_Node_Str"",cluster.getClusterId()));
                }
              }
            }
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
 else       if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void run(){
  while (!terminated) {
    try {
      try {
        Thread.sleep(statsPublisherInterval);
      }
 catch (      InterruptedException ignore) {
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      if (inFlightRequestPublisher.isEnabled()) {
        try {
          TopologyManager.acquireReadLock();
          int requestCount;
          for (          Service service : TopologyManager.getTopology().getServices()) {
            for (            Cluster cluster : service.getClusters()) {
              if (!cluster.isLbCluster()) {
                requestCount=statsReader.getInFlightRequestCountOfSlidingWindow(cluster.getClusterId());
                inFlightRequestPublisher.publish(cluster.getClusterId(),networkPartitionId,requestCount);
                if (log.isDebugEnabled()) {
                  log.debug(String.format(""String_Node_Str"",cluster.getClusterId(),networkPartitionId,requestCount));
                }
              }
 else {
                if (log.isWarnEnabled()) {
                  log.warn(String.format(""String_Node_Str"",cluster.getClusterId()));
                }
              }
            }
          }
        }
  finally {
          TopologyManager.releaseReadLock();
        }
      }
 else       if (log.isWarnEnabled()) {
        log.warn(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      if (log.isErrorEnabled()) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
}",0.9949849548645938
116729,"private void incrementInFlightRequestCount(MessageContext messageContext){
  try {
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerStatisticsCollector.getInstance().incrementInFlightRequestCount(clusterId);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
  }
}","private void incrementInFlightRequestCount(MessageContext messageContext){
  try {
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerStatisticsCollector.getInstance().addAnInFlightRequest(clusterId);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
  }
}",0.979370249728556
116730,"public boolean mediate(MessageContext messageContext){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerStatisticsCollector.getInstance().decrementInFlightRequestCount(clusterId);
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
  return true;
}","public boolean mediate(MessageContext messageContext){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerStatisticsCollector.getInstance().removeAnInFlightRequest(clusterId);
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
  return true;
}",0.9849340866290018
116731,"private LoadBalancerStatisticsCollector(){
  inFlightRequestCountMap=new ConcurrentHashMap<String,Integer>();
}","private LoadBalancerStatisticsCollector(){
  inFlightRequestToDateListMap=new ConcurrentHashMap<String,Vector<Date>>();
}",0.8879310344827587
116732,"public void undeployService(String type) throws ADCException {
  DataInsertionAndRetrievalManager dataInsertionAndRetrievalManager=new DataInsertionAndRetrievalManager();
  Collection<CartridgeSubscription> cartridgeSubscriptions=dataInsertionAndRetrievalManager.getCartridgeSubscriptions(type);
  if (cartridgeSubscriptions != null && !cartridgeSubscriptions.isEmpty()) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  Service service;
  try {
    service=dataInsertionAndRetrievalManager.getService(type);
  }
 catch (  PersistenceManagerException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
    throw new ADCException(errorMsg,e);
  }
  if (service == null) {
    String errorMsg=""String_Node_Str"" + type;
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  service.undeploy();
  try {
    dataInsertionAndRetrievalManager.removeService(type);
  }
 catch (  PersistenceManagerException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
    throw new ADCException(errorMsg,e);
  }
}","public void undeployService(String type) throws ADCException {
  DataInsertionAndRetrievalManager dataInsertionAndRetrievalManager=new DataInsertionAndRetrievalManager();
  Collection<CartridgeSubscription> cartridgeSubscriptions=dataInsertionAndRetrievalManager.getCartridgeSubscriptions(type);
  if (cartridgeSubscriptions != null) {
    if (!cartridgeSubscriptions.isEmpty()) {
      String errorMsg=""String_Node_Str"";
      log.error(errorMsg);
      throw new ADCException(errorMsg);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + type + ""String_Node_Str"");
  }
  Service service;
  try {
    service=dataInsertionAndRetrievalManager.getService(type);
  }
 catch (  PersistenceManagerException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
    throw new ADCException(errorMsg,e);
  }
  if (service == null) {
    String errorMsg=""String_Node_Str"" + type;
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  service.undeploy();
  try {
    dataInsertionAndRetrievalManager.removeService(type);
  }
 catch (  PersistenceManagerException e) {
    String errorMsg=""String_Node_Str"";
    log.error(errorMsg,e);
    throw new ADCException(errorMsg,e);
  }
}",0.947323340471092
116733,"public MemberStatsContext getMemberStatsContext(String memberId){
  return memberStatsContexts.get(networkPartitionId);
}","public MemberStatsContext getMemberStatsContext(String memberId){
  return memberStatsContexts.get(memberId);
}",0.9224137931034484
116734,"public static FactHandle evaluateScaleCheck(StatefulKnowledgeSession ksession,FactHandle handle,Object obj){
  if (handle == null) {
    ksession.setGlobal(""String_Node_Str"",new RuleTasksDelegator());
    ksession.setGlobal(""String_Node_Str"",log);
    handle=ksession.insert(obj);
  }
 else {
    ksession.update(handle,obj);
  }
  ksession.fireAllRules();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",obj));
  }
  return handle;
}","public static FactHandle evaluateScaleCheck(StatefulKnowledgeSession ksession,FactHandle handle,Object obj){
  if (handle == null) {
    ksession.setGlobal(""String_Node_Str"",new RuleTasksDelegator());
    handle=ksession.insert(obj);
  }
 else {
    ksession.update(handle,obj);
  }
  ksession.fireAllRules();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",obj));
  }
  return handle;
}",0.5381984036488028
116735,"public void addEventListener(EventListener eventListener){
  if (eventListener instanceof ArtifactUpdateEventListener) {
    artifactUpdateMessageProcessor.addEventListener(eventListener);
  }
 else   if (eventListener instanceof InstanceCleanupMemberEventListener) {
    artifactUpdateMessageProcessor.addEventListener(eventListener);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void addEventListener(EventListener eventListener){
  if (eventListener instanceof ArtifactUpdateEventListener) {
    artifactUpdateMessageProcessor.addEventListener(eventListener);
  }
 else   if (eventListener instanceof InstanceCleanupMemberEventListener) {
    artifactUpdateMessageProcessor.addEventListener(eventListener);
  }
 else   if (eventListener instanceof InstanceCleanupClusterEventListener) {
    artifactUpdateMessageProcessor.addEventListener(eventListener);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.8451882845188284
116736,"static SubscriptionInfo subscribe(String cartridgeType,String alias,String autoscalingPolicy,String deploymentPolicy,String repoURL,boolean privateRepo,String repoUsername,String repoPassword,String dataCartridgeType,String dataCartridgeAlias,ConfigurationContext configurationContext,String userName,String tenantDomain) throws ADCException, PolicyException, UnregisteredCartridgeException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, RepositoryRequiredException, AlreadySubscribedException, RepositoryCredentialsRequiredException, InvalidRepositoryException, RepositoryTransportException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  CloudControllerServiceClient cloudControllerServiceClient=getCloudControllerServiceClient();
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(cartridgeType);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg,e);
    throw new ADCException(msg,e);
  }
  List<Property> lbRefProp=new ArrayList<Property>();
  LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
  if (lbConfig == null || lbConfig.getProperties() == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
    }
  }
 else {
    CartridgeInfo lbCartridgeInfo;
    String lbCartridgeType=lbConfig.getType();
    try {
      lbCartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(lbCartridgeType);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + cartridgeType;
      log.error(msg,e);
      throw new ADCException(msg,e);
    }
    Properties lbReferenceProperties=lbConfig.getProperties();
    Property property=new Property();
    property.setName(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    for (    org.apache.stratos.cloud.controller.pojo.Property prop : lbReferenceProperties.getProperties()) {
      String name=prop.getName();
      String value=prop.getValue();
      if (Constants.NO_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          property.setValue(name);
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.EXISTING_LOAD_BALANCERS.equals(name)) {
        String clusterIdsVal=value;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ clusterIdsVal);
        }
        String[] clusterIds=clusterIdsVal.split(""String_Node_Str"");
        for (        String clusterId : clusterIds) {
          if (autoscalerServiceClient != null) {
            try {
              autoscalerServiceClient.checkLBExistenceAgainstPolicy(clusterId,deploymentPolicy);
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
        }
        property.setValue(name);
        lbRefProp.add(property);
        break;
      }
 else       if (Constants.DEFAULT_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          property.setValue(name);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          if (autoscalerServiceClient != null) {
            try {
              DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
              for (              DeploymentPolicy policy : lbCartridgeDepPolicies) {
                if (deploymentPolicy.equals(policy.getId())) {
                  if (!autoscalerServiceClient.checkDefaultLBExistenceAgainstPolicy(deploymentPolicy)) {
                    String lbAlias=""String_Node_Str"" + new Random().nextInt();
                    lbCartridgeInfo.addProperties(property);
                    subscribeToLb(lbCartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,userName,tenantDomain,lbCartridgeInfo.getProperties());
                  }
                }
              }
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
          lbRefProp.add(property);
          break;
        }
 else         if (Constants.SERVICE_AWARE_LOAD_BALANCER.equals(name)) {
          if (""String_Node_Str"".equals(value)) {
            property.setValue(name);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
            }
            if (autoscalerServiceClient != null) {
              try {
                DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
                for (                DeploymentPolicy policy : lbCartridgeDepPolicies) {
                  if (deploymentPolicy.equals(policy.getId())) {
                    if (!autoscalerServiceClient.checkServiceLBExistenceAgainstPolicy(cartridgeType,deploymentPolicy)) {
                      String lbAlias=""String_Node_Str"" + cartridgeType + new Random().nextInt();
                      lbCartridgeInfo.addProperties(property);
                      subscribeToLb(lbCartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,userName,tenantDomain,lbCartridgeInfo.getProperties());
                    }
                  }
                }
              }
 catch (              Exception ex) {
                log.error(ex.getMessage(),ex);
              }
            }
            lbRefProp.add(property);
            break;
          }
        }
      }
    }
  }
  CartridgeSubscription cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(cartridgeType,alias.trim(),autoscalingPolicy,deploymentPolicy,tenantDomain,ApplicationManagementUtil.getTenantId(configurationContext),userName,""String_Node_Str"",repoURL,privateRepo,repoUsername,repoPassword,lbRefProp.toArray(new Property[0]));
  if (dataCartridgeAlias != null && !dataCartridgeAlias.trim().isEmpty()) {
  }
  SubscriptionInfo registerCartridgeSubscription=cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription);
  return registerCartridgeSubscription;
}","static SubscriptionInfo subscribe(String cartridgeType,String alias,String autoscalingPolicy,String deploymentPolicy,String repoURL,boolean privateRepo,String repoUsername,String repoPassword,String dataCartridgeType,String dataCartridgeAlias,ConfigurationContext configurationContext,String userName,String tenantDomain) throws ADCException, PolicyException, UnregisteredCartridgeException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, RepositoryRequiredException, AlreadySubscribedException, RepositoryCredentialsRequiredException, InvalidRepositoryException, RepositoryTransportException {
  AutoscalerServiceClient autoscalerServiceClient=getAutoscalerServiceClient();
  CloudControllerServiceClient cloudControllerServiceClient=getCloudControllerServiceClient();
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(cartridgeType);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeType;
    log.error(msg,e);
    throw new ADCException(msg,e);
  }
  if (cartridgeInfo != null && cartridgeInfo.getMultiTenant()) {
    log.info(""String_Node_Str"");
    CartridgeSubscription cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(cartridgeType,alias,autoscalingPolicy,deploymentPolicy,tenantDomain,ApplicationManagementUtil.getTenantId(configurationContext),userName,""String_Node_Str"",repoURL,false,repoUsername,repoPassword,null);
    log.info(""String_Node_Str"");
    return cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription);
  }
  List<Property> lbRefProp=new ArrayList<Property>();
  LoadbalancerConfig lbConfig=cartridgeInfo.getLbConfig();
  if (lbConfig == null || lbConfig.getProperties() == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
    }
  }
 else {
    CartridgeInfo lbCartridgeInfo;
    String lbCartridgeType=lbConfig.getType();
    try {
      lbCartridgeInfo=cloudControllerServiceClient.getCartridgeInfo(lbCartridgeType);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + cartridgeType;
      log.error(msg,e);
      throw new ADCException(msg,e);
    }
    Properties lbReferenceProperties=lbConfig.getProperties();
    Property property=new Property();
    property.setName(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    for (    org.apache.stratos.cloud.controller.pojo.Property prop : lbReferenceProperties.getProperties()) {
      String name=prop.getName();
      String value=prop.getValue();
      if (Constants.NO_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          property.setValue(name);
          lbRefProp.add(property);
          break;
        }
      }
 else       if (Constants.EXISTING_LOAD_BALANCERS.equals(name)) {
        String clusterIdsVal=value;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType + ""String_Node_Str""+ clusterIdsVal);
        }
        String[] clusterIds=clusterIdsVal.split(""String_Node_Str"");
        for (        String clusterId : clusterIds) {
          if (autoscalerServiceClient != null) {
            try {
              autoscalerServiceClient.checkLBExistenceAgainstPolicy(clusterId,deploymentPolicy);
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
        }
        property.setValue(name);
        lbRefProp.add(property);
        break;
      }
 else       if (Constants.DEFAULT_LOAD_BALANCER.equals(name)) {
        if (""String_Node_Str"".equals(value)) {
          property.setValue(name);
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
          }
          if (autoscalerServiceClient != null) {
            try {
              DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
              for (              DeploymentPolicy policy : lbCartridgeDepPolicies) {
                if (deploymentPolicy.equals(policy.getId())) {
                  if (!autoscalerServiceClient.checkDefaultLBExistenceAgainstPolicy(deploymentPolicy)) {
                    String lbAlias=""String_Node_Str"" + new Random().nextInt();
                    lbCartridgeInfo.addProperties(property);
                    subscribeToLb(lbCartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,userName,tenantDomain,lbCartridgeInfo.getProperties());
                  }
                }
              }
            }
 catch (            Exception ex) {
              log.error(ex.getMessage(),ex);
            }
          }
          lbRefProp.add(property);
          break;
        }
 else         if (Constants.SERVICE_AWARE_LOAD_BALANCER.equals(name)) {
          if (""String_Node_Str"".equals(value)) {
            property.setValue(name);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + ""String_Node_Str"" + cartridgeType);
            }
            if (autoscalerServiceClient != null) {
              try {
                DeploymentPolicy[] lbCartridgeDepPolicies=autoscalerServiceClient.getDeploymentPolicies(lbCartridgeType);
                for (                DeploymentPolicy policy : lbCartridgeDepPolicies) {
                  if (deploymentPolicy.equals(policy.getId())) {
                    if (!autoscalerServiceClient.checkServiceLBExistenceAgainstPolicy(cartridgeType,deploymentPolicy)) {
                      String lbAlias=""String_Node_Str"" + cartridgeType + new Random().nextInt();
                      lbCartridgeInfo.addProperties(property);
                      subscribeToLb(lbCartridgeType,lbAlias,lbCartridgeInfo.getDefaultAutoscalingPolicy(),deploymentPolicy,configurationContext,userName,tenantDomain,lbCartridgeInfo.getProperties());
                    }
                  }
                }
              }
 catch (              Exception ex) {
                log.error(ex.getMessage(),ex);
              }
            }
            lbRefProp.add(property);
            break;
          }
        }
      }
    }
  }
  CartridgeSubscription cartridgeSubscription=cartridgeSubsciptionManager.subscribeToCartridgeWithProperties(cartridgeType,alias.trim(),autoscalingPolicy,deploymentPolicy,tenantDomain,ApplicationManagementUtil.getTenantId(configurationContext),userName,""String_Node_Str"",repoURL,privateRepo,repoUsername,repoPassword,lbRefProp.toArray(new Property[0]));
  if (dataCartridgeAlias != null && !dataCartridgeAlias.trim().isEmpty()) {
  }
  SubscriptionInfo registerCartridgeSubscription=cartridgeSubsciptionManager.registerCartridgeSubscription(cartridgeSubscription);
  return registerCartridgeSubscription;
}",0.9597020484171322
116737,"public void persistTopology(Topology topology) throws RegistryException {
  try {
    registryService.beginTransaction();
    Resource nodeResource=registryService.newResource();
    nodeResource.setContent(Serializer.serializeToByteArray(topology));
    registryService.put(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.TOPOLOGY_RESOURCE,nodeResource);
    registryService.commitTransaction();
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"";
    registryService.rollbackTransaction();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","public void persistTopology(Topology topology) throws RegistryException {
  try {
    PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
    ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
    ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
    registryService.beginTransaction();
    Resource nodeResource=registryService.newResource();
    nodeResource.setContent(Serializer.serializeToByteArray(topology));
    registryService.put(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.TOPOLOGY_RESOURCE,nodeResource);
    registryService.commitTransaction();
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"";
    registryService.rollbackTransaction();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.8477653631284916
116738,"/** 
 * Persist an object in the local registry.
 * @param dataObj object to be persisted.
 */
public void persist(FasterLookUpDataHolder dataObj) throws RegistryException {
  try {
    registryService.beginTransaction();
    Resource nodeResource=registryService.newResource();
    nodeResource.setContent(Serializer.serializeToByteArray(dataObj));
    registryService.put(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.DATA_RESOURCE,nodeResource);
    registryService.commitTransaction();
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"";
    registryService.rollbackTransaction();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","/** 
 * Persist an object in the local registry.
 * @param dataObj object to be persisted.
 */
public void persist(FasterLookUpDataHolder dataObj) throws RegistryException {
  try {
    PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
    ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
    ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
    registryService.beginTransaction();
    Resource nodeResource=registryService.newResource();
    nodeResource.setContent(Serializer.serializeToByteArray(dataObj));
    registryService.put(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.DATA_RESOURCE,nodeResource);
    registryService.commitTransaction();
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"";
    registryService.rollbackTransaction();
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.8655980271270037
116739,"public void removeSubscription(String clusterId){
  Set<CartridgeSubscription> existingSubscriptions=clusterIdToCartridgeSubscription.get(clusterId);
  if (existingSubscriptions != null && !existingSubscriptions.isEmpty()) {
    Iterator<CartridgeSubscription> iterator=existingSubscriptions.iterator();
    while (iterator.hasNext()) {
      CartridgeSubscription cartridgeSubscription=iterator.next();
      if (cartridgeSubscription.getClusterDomain().equals(clusterId)) {
        iterator.remove();
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
        }
        break;
      }
    }
  }
  if (existingSubscriptions != null && existingSubscriptions.isEmpty()) {
    clusterIdToCartridgeSubscription.remove(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
    }
  }
}","public void removeSubscription(String clusterId,String subscriptionAlias){
  Set<CartridgeSubscription> existingSubscriptions=clusterIdToCartridgeSubscription.get(clusterId);
  if (existingSubscriptions != null && !existingSubscriptions.isEmpty()) {
    Iterator<CartridgeSubscription> iterator=existingSubscriptions.iterator();
    while (iterator.hasNext()) {
      CartridgeSubscription cartridgeSubscription=iterator.next();
      if (cartridgeSubscription.getAlias().equals(subscriptionAlias)) {
        iterator.remove();
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
        }
        break;
      }
    }
  }
  if (existingSubscriptions != null && existingSubscriptions.isEmpty()) {
    clusterIdToCartridgeSubscription.remove(clusterId);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + clusterId + ""String_Node_Str"");
    }
  }
}",0.9619834710743802
116740,"public void removeSubscription(int tenantId,String type,String subscriptionAlias,String clusterId){
  tenantIdToSubscriptionContext.removeSubscriptionContext(tenantId,type,subscriptionAlias);
  clusterIdToSubscription.removeSubscription(clusterId);
}","public void removeSubscription(int tenantId,String type,String subscriptionAlias,String clusterId){
  tenantIdToSubscriptionContext.removeSubscriptionContext(tenantId,type,subscriptionAlias);
  clusterIdToSubscription.removeSubscription(clusterId,subscriptionAlias);
}",0.9652509652509652
116741,"protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
    log.debug(""String_Node_Str"");
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}","protected void activate(ComponentContext context){
  try {
    TopicSubscriber subscriber=new TopicSubscriber(CloudControllerConstants.INSTANCE_TOPIC);
    subscriber.setMessageListener(new InstanceStatusEventMessageListener());
    Thread tsubscriber=new Thread(subscriber);
    tsubscriber.start();
    InstanceStatusEventMessageDelegator delegator=new InstanceStatusEventMessageDelegator();
    Thread tdelegator=new Thread(delegator);
    tdelegator.start();
    BundleContext bundleContext=context.getBundleContext();
    bundleContext.registerService(CloudControllerService.class.getName(),new CloudControllerServiceImpl(),null);
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9342984409799554
116742,"protected void setRegistryService(RegistryService registryService){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  try {
    ServiceReferenceHolder.getInstance().setRegistry(registryService.getGovernanceSystemRegistry());
  }
 catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","protected void setRegistryService(RegistryService registryService){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  try {
    UserRegistry registry=registryService.getGovernanceSystemRegistry();
    ServiceReferenceHolder.getInstance().setRegistry(registry);
  }
 catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.8651960784313726
116743,"public Object retrieveTopology(){
  try {
    Resource resource=registryService.get(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.TOPOLOGY_RESOURCE);
    return resource.getContent();
  }
 catch (  ResourceNotFoundException ignore) {
    return null;
  }
catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","public Object retrieveTopology(){
  try {
    PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
    ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
    ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
    Resource resource=registryService.get(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.TOPOLOGY_RESOURCE);
    return resource.getContent();
  }
 catch (  ResourceNotFoundException ignore) {
    return null;
  }
catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.7966417910447762
116744,"public Object retrieve(){
  try {
    Resource resource=registryService.get(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.DATA_RESOURCE);
    return resource.getContent();
  }
 catch (  ResourceNotFoundException ignore) {
    return null;
  }
catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}","public Object retrieve(){
  try {
    PrivilegedCarbonContext ctx=PrivilegedCarbonContext.getThreadLocalCarbonContext();
    ctx.setTenantId(MultitenantConstants.SUPER_TENANT_ID);
    ctx.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
    Resource resource=registryService.get(CloudControllerConstants.CLOUD_CONTROLLER_RESOURCE + CloudControllerConstants.DATA_RESOURCE);
    return resource.getContent();
  }
 catch (  ResourceNotFoundException ignore) {
    return null;
  }
catch (  RegistryException e) {
    String msg=""String_Node_Str"";
    log.error(msg,e);
    throw new CloudControllerException(msg,e);
  }
}",0.7919847328244275
116745,"protected void activate(ComponentContext context){
  try {
    bundleContext=context.getBundleContext();
    if (CommonUtil.getStratosConfig() == null) {
      StratosConfiguration stratosConfig=CommonUtil.loadStratosConfiguration();
      CommonUtil.setStratosConfig(stratosConfig);
    }
    if (CommonUtil.getEula() == null) {
      String eula=CommonUtil.loadTermsOfUsage();
      CommonUtil.setEula(eula);
    }
    try {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
    }
 catch (    Exception ex) {
      String msg=""String_Node_Str"";
      log.error(msg,ex);
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"" + e.toString());
  }
}","protected void activate(ComponentContext context){
  try {
    bundleContext=context.getBundleContext();
    if (CommonUtil.getStratosConfig() == null) {
      StratosConfiguration stratosConfig=CommonUtil.loadStratosConfiguration();
      CommonUtil.setStratosConfig(stratosConfig);
    }
    if (CommonUtil.getEula() == null) {
      String eula=CommonUtil.loadTermsOfUsage();
      CommonUtil.setEula(eula);
    }
    try {
      StratosConfiguration stratosConfiguration=CommonUtil.loadStratosConfiguration();
      bundleContext.registerService(StratosConfiguration.class.getName(),stratosConfiguration,null);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
    }
 catch (    Exception ex) {
      String msg=""String_Node_Str"";
      log.error(msg,ex);
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"" + e.toString());
  }
}",0.8802547770700637
116746,"public NetworkPartitionContext(String id){
  super();
  this.id=id;
  this.setServiceToLBClusterId(new HashMap<String,String>());
  this.setClusterIdToLBClusterIdMap(new HashMap<String,String>());
  partitionCtxts=new HashMap<String,PartitionContext>();
}","public NetworkPartitionContext(String id,String partitionAlgo){
  super();
  this.id=id;
  this.partitionAlgorithm=partitionAlgo;
  this.setServiceToLBClusterId(new HashMap<String,String>());
  this.setClusterIdToLBClusterIdMap(new HashMap<String,String>());
  partitionCtxts=new HashMap<String,PartitionContext>();
}",0.8916083916083916
116747,"public Partition getNextScaleUpPartition(NetworkPartitionContext networkPartitionContext,String clusterId){
  int currentPartitionIndex=networkPartitionContext.getCurrentPartitionIndex();
  List<?> partitions=Arrays.asList(networkPartitionContext.getPartitions());
  int noOfPartitions=partitions.size();
  for (int i=currentPartitionIndex; i < noOfPartitions; i++) {
    if (partitions.get(currentPartitionIndex) instanceof Partition) {
      currentPartitionIndex=networkPartitionContext.getCurrentPartitionIndex();
      Partition currentPartition=(Partition)partitions.get(currentPartitionIndex);
      String currentPartitionId=currentPartition.getId();
      if (networkPartitionContext.getMemberCountOfPartition(currentPartitionId) < currentPartition.getPartitionMax()) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + currentPartition.getId());
        return currentPartition;
      }
 else {
        if (currentPartitionIndex == noOfPartitions - 1) {
          if (log.isDebugEnabled())           log.debug(""String_Node_Str"");
          return null;
        }
        networkPartitionContext.setCurrentPartitionIndex(currentPartitionIndex + 1);
      }
    }
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + networkPartitionContext);
  return null;
}","public Partition getNextScaleUpPartition(NetworkPartitionContext networkPartitionContext,String clusterId){
  int currentPartitionIndex=networkPartitionContext.getCurrentPartitionIndex();
  List<?> partitions=Arrays.asList(networkPartitionContext.getPartitions());
  int noOfPartitions=partitions.size();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",noOfPartitions,networkPartitionContext.getId()));
  }
  for (int i=currentPartitionIndex; i < noOfPartitions; i++) {
    if (partitions.get(currentPartitionIndex) instanceof Partition) {
      currentPartitionIndex=networkPartitionContext.getCurrentPartitionIndex();
      Partition currentPartition=(Partition)partitions.get(currentPartitionIndex);
      String currentPartitionId=currentPartition.getId();
      if (networkPartitionContext.getMemberCountOfPartition(currentPartitionId) < currentPartition.getPartitionMax()) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + currentPartition.getId());
        return currentPartition;
      }
 else {
        if (currentPartitionIndex == noOfPartitions - 1) {
          if (log.isDebugEnabled())           log.debug(""String_Node_Str"");
          return null;
        }
        networkPartitionContext.setCurrentPartitionIndex(currentPartitionIndex + 1);
      }
    }
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + networkPartitionContext);
  return null;
}",0.9185454545454546
116748,"public Partition getNextScaleUpPartition(NetworkPartitionContext networkPartitionContext,String clusterId){
  List<?> partitions=Arrays.asList(networkPartitionContext.getPartitions());
  int noOfPartitions=partitions.size();
  for (int i=0; i < noOfPartitions; i++) {
    int currentPartitionIndex=networkPartitionContext.getCurrentPartitionIndex();
    if (partitions.get(currentPartitionIndex) instanceof Partition) {
      Partition currentPartition=(Partition)partitions.get(currentPartitionIndex);
      String currentPartitionId=currentPartition.getId();
      int nextPartitionIndex=currentPartitionIndex == noOfPartitions - 1 ? 0 : currentPartitionIndex + 1;
      networkPartitionContext.setCurrentPartitionIndex(nextPartitionIndex);
      if (networkPartitionContext.getMemberCountOfPartition(currentPartitionId) < currentPartition.getPartitionMax()) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + currentPartition.getId());
        return currentPartition;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + currentPartition.getId());
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + networkPartitionContext);
  }
  return null;
}","public Partition getNextScaleUpPartition(NetworkPartitionContext networkPartitionContext,String clusterId){
  List<?> partitions=Arrays.asList(networkPartitionContext.getPartitions());
  int noOfPartitions=partitions.size();
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"" + ""String_Node_Str"",noOfPartitions,networkPartitionContext.getId()));
  }
  for (int i=0; i < noOfPartitions; i++) {
    int currentPartitionIndex=networkPartitionContext.getCurrentPartitionIndex();
    if (partitions.get(currentPartitionIndex) instanceof Partition) {
      Partition currentPartition=(Partition)partitions.get(currentPartitionIndex);
      String currentPartitionId=currentPartition.getId();
      int nextPartitionIndex=currentPartitionIndex == noOfPartitions - 1 ? 0 : currentPartitionIndex + 1;
      networkPartitionContext.setCurrentPartitionIndex(nextPartitionIndex);
      if (networkPartitionContext.getMemberCountOfPartition(currentPartitionId) < currentPartition.getPartitionMax()) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + currentPartition.getId());
        return currentPartition;
      }
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + currentPartition.getId());
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + networkPartitionContext);
  }
  return null;
}",0.9419953596287703
116749,"public void deployNewNetworkPartitions(DeploymentPolicy depPolicy){
  for (  PartitionGroup partitionGroup : depPolicy.getPartitionGroups()) {
    String id=partitionGroup.getId();
    if (!networkPartitionContexts.containsKey(id)) {
      NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(id);
      addNetworkPartitionContext(networkPartitionContext);
      RegistryManager.getInstance().persistNetworkPartition(networkPartitionContext);
    }
  }
}","public void deployNewNetworkPartitions(DeploymentPolicy depPolicy){
  for (  PartitionGroup partitionGroup : depPolicy.getPartitionGroups()) {
    String id=partitionGroup.getId();
    if (!networkPartitionContexts.containsKey(id)) {
      NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(id,partitionGroup.getPartitionAlgo());
      addNetworkPartitionContext(networkPartitionContext);
      RegistryManager.getInstance().persistNetworkPartition(networkPartitionContext);
    }
  }
}",0.9655870445344128
116750,"public AutoscaleAlgorithm getAutoscaleAlgorithm(String partitionAlgorithm){
  AutoscaleAlgorithm autoscaleAlgorithm=null;
  if (Constants.ROUND_ROBIN_ALGORITHM_ID.equals(partitionAlgorithm)) {
    autoscaleAlgorithm=new RoundRobin();
  }
 else   if (Constants.ONE_AFTER_ANOTHER_ALGORITHM_ID.equals(partitionAlgorithm)) {
    autoscaleAlgorithm=new OneAfterAnother();
  }
  return autoscaleAlgorithm;
}","public AutoscaleAlgorithm getAutoscaleAlgorithm(String partitionAlgorithm){
  AutoscaleAlgorithm autoscaleAlgorithm=null;
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",partitionAlgorithm));
  }
  if (Constants.ROUND_ROBIN_ALGORITHM_ID.equals(partitionAlgorithm)) {
    autoscaleAlgorithm=new RoundRobin();
  }
 else   if (Constants.ONE_AFTER_ANOTHER_ALGORITHM_ID.equals(partitionAlgorithm)) {
    autoscaleAlgorithm=new OneAfterAnother();
  }
  return autoscaleAlgorithm;
}",0.8871681415929203
116751,"/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
            partitionContext.incrementCurrentActiveMemberCount(1);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
            partitionContext.addFaultyMember(memberId);
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  java.util.Properties props=cluster.getProperties();
  if (props.containsKey(Constants.LOAD_BALANCER_REF)) {
    String value=props.getProperty(Constants.LOAD_BALANCER_REF);
    clusterMonitor.setLbReferenceType(value);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + value);
    }
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}","/** 
 * Updates ClusterContext for given cluster
 * @param cluster
 * @return ClusterMonitor - Updated ClusterContext
 * @throws PolicyValidationException
 * @throws PartitionValidationException
 */
public static ClusterMonitor getClusterMonitor(Cluster cluster) throws PolicyValidationException, PartitionValidationException {
  if (null == cluster) {
    return null;
  }
  String autoscalePolicyName=cluster.getAutoscalePolicyName();
  String deploymentPolicyName=cluster.getDeploymentPolicyName();
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + deploymentPolicyName);
    log.debug(""String_Node_Str"" + autoscalePolicyName);
  }
  AutoscalePolicy policy=PolicyManager.getInstance().getAutoscalePolicy(autoscalePolicyName);
  DeploymentPolicy deploymentPolicy=PolicyManager.getInstance().getDeploymentPolicy(deploymentPolicyName);
  if (deploymentPolicy == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  Partition[] allPartitions=deploymentPolicy.getAllPartitions();
  if (allPartitions == null) {
    String msg=""String_Node_Str"" + deploymentPolicyName;
    log.error(msg);
    throw new PolicyValidationException(msg);
  }
  CloudControllerClient.getInstance().validateDeploymentPolicy(cluster.getServiceName(),deploymentPolicy);
  ClusterMonitor clusterMonitor=new ClusterMonitor(cluster.getClusterId(),cluster.getServiceName(),deploymentPolicy,policy);
  for (  PartitionGroup partitionGroup : deploymentPolicy.getPartitionGroups()) {
    NetworkPartitionContext networkPartitionContext=new NetworkPartitionContext(partitionGroup.getId(),partitionGroup.getPartitionAlgo());
    for (    Partition partition : partitionGroup.getPartitions()) {
      PartitionContext partitionContext=new PartitionContext(partition);
      partitionContext.setServiceName(cluster.getServiceName());
      partitionContext.setProperties(cluster.getProperties());
      partitionContext.setNetworkPartitionId(partitionGroup.getId());
      for (      Member member : cluster.getMembers()) {
        String memberId=member.getMemberId();
        if (member.getPartitionId().equalsIgnoreCase(partition.getId())) {
          MemberContext memberContext=new MemberContext();
          memberContext.setClusterId(member.getClusterId());
          memberContext.setMemberId(memberId);
          memberContext.setPartition(partition);
          if (MemberStatus.Activated.equals(member.getStatus())) {
            partitionContext.addActiveMember(memberContext);
            partitionContext.incrementCurrentActiveMemberCount(1);
          }
 else           if (MemberStatus.Created.equals(member.getStatus()) || MemberStatus.Starting.equals(member.getStatus())) {
            partitionContext.addPendingMember(memberContext);
          }
 else           if (MemberStatus.Suspended.equals(member.getStatus())) {
            partitionContext.addFaultyMember(memberId);
          }
          partitionContext.addMemberStatsContext(new MemberStatsContext(memberId));
          if (log.isInfoEnabled()) {
            log.info(String.format(""String_Node_Str"",memberId));
          }
        }
      }
      networkPartitionContext.addPartitionContext(partitionContext);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",partitionContext.getPartitionId()));
      }
    }
    clusterMonitor.addNetworkPartitionCtxt(networkPartitionContext);
    if (log.isInfoEnabled()) {
      log.info(String.format(""String_Node_Str"",networkPartitionContext.getId()));
    }
  }
  java.util.Properties props=cluster.getProperties();
  if (props.containsKey(Constants.LOAD_BALANCER_REF)) {
    String value=props.getProperty(Constants.LOAD_BALANCER_REF);
    clusterMonitor.setLbReferenceType(value);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + value);
    }
  }
  log.info(""String_Node_Str"" + clusterMonitor.toString());
  return clusterMonitor;
}",0.9956972918248544
116752,"@Override public void run(){
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    topologyReceiver=new TopologyReceiver(createMessageDelegator());
    Thread topologyReceiverThread=new Thread(topologyReceiver);
    topologyReceiverThread.start();
    inFlightRequestCountNotifier=new LoadBalancerInFlightRequestCountNotifier(statsReader);
    Thread statsNotifierThread=new Thread(inFlightRequestCountNotifier);
    statsNotifierThread.start();
    while (!terminated)     ;
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    topologyReceiver=new TopologyReceiver(createMessageDelegator());
    Thread topologyReceiverThread=new Thread(topologyReceiver);
    topologyReceiverThread.start();
    statisticsNotifier=new LoadBalancerStatisticsNotifier(statsReader);
    Thread statsNotifierThread=new Thread(statisticsNotifier);
    statsNotifierThread.start();
    while (!terminated)     ;
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.7870216306156406
116753,"public LoadBalancerExtension(LoadBalancer loadBalancer,LoadBalancerStatsReader statsReader){
  this.loadBalancer=loadBalancer;
  this.statsReader=statsReader;
}","public LoadBalancerExtension(LoadBalancer loadBalancer,LoadBalancerStatisticsReader statsReader){
  this.loadBalancer=loadBalancer;
  this.statsReader=statsReader;
}",0.9846153846153848
116754,"public void terminate(){
  topologyReceiver.terminate();
  inFlightRequestCountNotifier.terminate();
  terminated=true;
}","public void terminate(){
  topologyReceiver.terminate();
  statisticsNotifier.terminate();
  terminated=true;
}",0.896551724137931
116755,"private void incrementInFlightRequestCount(MessageContext messageContext){
  try {
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerInFlightRequestCountCollector.getInstance().incrementInFlightRequestCount(clusterId);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
  }
}","private void incrementInFlightRequestCount(MessageContext messageContext){
  try {
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerStatisticsCollector.getInstance().incrementInFlightRequestCount(clusterId);
  }
 catch (  Exception e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",e);
    }
  }
}",0.9680851063829788
116756,"protected void deactivate(ComponentContext context){
  try {
    Set<Map.Entry<Integer,SynapseEnvironmentService>> entrySet=LoadBalancerContext.getInstance().getTenantIdSynapseEnvironmentServiceMap().getTenantIdSynapseEnvironmentServiceMap().entrySet();
    for (    Map.Entry<Integer,SynapseEnvironmentService> entry : entrySet) {
      unregisterDeployer(entry.getValue().getConfigurationContext().getAxisConfiguration(),entry.getValue().getSynapseEnvironment());
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"");
  }
  tenantReceiver.terminate();
  topologyReceiver.terminate();
}","protected void deactivate(ComponentContext context){
  try {
    Set<Map.Entry<Integer,SynapseEnvironmentService>> entrySet=LoadBalancerContext.getInstance().getTenantIdSynapseEnvironmentServiceMap().getTenantIdSynapseEnvironmentServiceMap().entrySet();
    for (    Map.Entry<Integer,SynapseEnvironmentService> entry : entrySet) {
      unregisterDeployer(entry.getValue().getConfigurationContext().getAxisConfiguration(),entry.getValue().getSynapseEnvironment());
    }
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"");
  }
  tenantReceiver.terminate();
  topologyReceiver.terminate();
  statisticsNotifier.terminate();
}",0.9724919093851132
116757,"protected void activate(ComponentContext ctxt){
  try {
    SynapseEnvironmentService synEnvService=LoadBalancerContext.getInstance().getTenantIdSynapseEnvironmentServiceMap().getSynapseEnvironmentService(MultitenantConstants.SUPER_TENANT_ID);
    registerDeployer(LoadBalancerContext.getInstance().getAxisConfiguration(),synEnvService.getSynapseEnvironment());
    LoadBalancerConfiguration configuration=LoadBalancerConfiguration.getInstance();
    SynapseConfigurator.configure(configuration);
    CEPConfigurator.configure(configuration);
    TopologyFilterConfigurator.configure(configuration);
    if (configuration.isMultiTenancyEnabled()) {
      JndiConfigurator.configure(configuration);
      tenantReceiver=new LoadBalancerTenantReceiver();
      Thread tenantReceiverThread=new Thread(tenantReceiver);
      tenantReceiverThread.start();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
    }
    if (configuration.isTopologyEventListenerEnabled()) {
      if (!JndiConfigurator.isConfigured()) {
        JndiConfigurator.configure(configuration);
      }
      topologyReceiver=new LoadBalancerTopologyReceiver();
      Thread topologyReceiverThread=new Thread(topologyReceiver);
      topologyReceiverThread.start();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
      if (log.isInfoEnabled()) {
        if (TopologyServiceFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String serviceName : TopologyServiceFilter.getInstance().getIncludedServiceNames()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(serviceName);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
        if (TopologyClusterFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String clusterId : TopologyClusterFilter.getInstance().getIncludedClusterIds()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(clusterId);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
        if (TopologyMemberFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String clusterId : TopologyMemberFilter.getInstance().getIncludedLbClusterIds()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(clusterId);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
      }
    }
    activated=true;
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    if (log.isFatalEnabled()) {
      log.fatal(""String_Node_Str"",e);
    }
  }
}","protected void activate(ComponentContext ctxt){
  try {
    SynapseEnvironmentService synEnvService=LoadBalancerContext.getInstance().getTenantIdSynapseEnvironmentServiceMap().getSynapseEnvironmentService(MultitenantConstants.SUPER_TENANT_ID);
    registerDeployer(LoadBalancerContext.getInstance().getAxisConfiguration(),synEnvService.getSynapseEnvironment());
    LoadBalancerConfiguration configuration=LoadBalancerConfiguration.getInstance();
    SynapseConfigurator.configure(configuration);
    CEPConfigurator.configure(configuration);
    TopologyFilterConfigurator.configure(configuration);
    if (configuration.isMultiTenancyEnabled()) {
      JndiConfigurator.configure(configuration);
      tenantReceiver=new LoadBalancerTenantReceiver();
      Thread tenantReceiverThread=new Thread(tenantReceiver);
      tenantReceiverThread.start();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
    }
    if (configuration.isTopologyEventListenerEnabled()) {
      if (!JndiConfigurator.isConfigured()) {
        JndiConfigurator.configure(configuration);
      }
      topologyReceiver=new LoadBalancerTopologyReceiver();
      Thread topologyReceiverThread=new Thread(topologyReceiver);
      topologyReceiverThread.start();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
      if (log.isInfoEnabled()) {
        if (TopologyServiceFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String serviceName : TopologyServiceFilter.getInstance().getIncludedServiceNames()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(serviceName);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
        if (TopologyClusterFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String clusterId : TopologyClusterFilter.getInstance().getIncludedClusterIds()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(clusterId);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
        if (TopologyMemberFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String clusterId : TopologyMemberFilter.getInstance().getIncludedLbClusterIds()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(clusterId);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
      }
    }
    if (configuration.isCepStatsPublisherEnabled()) {
      LoadBalancerStatisticsReader statsReader=LoadBalancerStatisticsCollector.getInstance();
      statisticsNotifier=new LoadBalancerStatisticsNotifier(statsReader);
      Thread statsNotifierThread=new Thread(statisticsNotifier);
      statsNotifierThread.start();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
    }
    activated=true;
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    if (log.isFatalEnabled()) {
      log.fatal(""String_Node_Str"",e);
    }
  }
}",0.92513714101323
116758,"public boolean mediate(MessageContext messageContext){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerInFlightRequestCountCollector.getInstance().decrementInFlightRequestCount(clusterId);
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
  return true;
}","public boolean mediate(MessageContext messageContext){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    String clusterId=(String)messageContext.getProperty(Constants.CLUSTER_ID);
    if (StringUtils.isBlank(clusterId)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    LoadBalancerStatisticsCollector.getInstance().decrementInFlightRequestCount(clusterId);
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(""String_Node_Str"",e);
    }
  }
  return true;
}",0.9721706864564008
116759,"@SuppressWarnings(""String_Node_Str"") public Partition[] getAllPartitions(){
  ArrayList<Partition> partitionslist=new ArrayList<Partition>();
  for (  PartitionGroup partitionGroup : this.getPartitionGroups()) {
    Partition[] partitions=partitionGroup.getPartitions();
    if (partitions != null) {
      partitionslist.addAll(Arrays.asList(partitions));
    }
  }
  return partitionslist.toArray(new Partition[0]);
}","public Partition[] getAllPartitions(){
  ArrayList<Partition> partitionslist=new ArrayList<Partition>();
  for (  PartitionGroup partitionGroup : this.getPartitionGroups()) {
    Partition[] partitions=partitionGroup.getPartitions();
    if (partitions != null) {
      partitionslist.addAll(Arrays.asList(partitions));
    }
  }
  return partitionslist.toArray(new Partition[0]);
}",0.9538077403245944
116760,"public String toString(){
  return ""String_Node_Str"" + this.id;
}","public String toString(){
  return ""String_Node_Str"" + this.id + ""String_Node_Str""+ Arrays.toString(this.getAllPartitions());
}",0.6770833333333334
116761,"public List<DeploymentPolicy> retrieveDeploymentPolicies(){
  List<DeploymentPolicy> depPolicyList=new ArrayList<DeploymentPolicy>();
  RegistryManager registryManager=RegistryManager.getInstance();
  String[] depPolicyResourceList=(String[])registryManager.retrieve(AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.DEPLOYMENT_POLICY_RESOURCE);
  if (depPolicyResourceList != null) {
    DeploymentPolicy depPolicy;
    for (    String resourcePath : depPolicyResourceList) {
      Object serializedObj=registryManager.retrieve(resourcePath);
      if (serializedObj != null) {
        try {
          Object dataObj=Deserializer.deserializeFromByteArray((byte[])serializedObj);
          if (dataObj instanceof DeploymentPolicy) {
            depPolicy=(DeploymentPolicy)dataObj;
            if (log.isDebugEnabled()) {
              log.debug(String.format(""String_Node_Str"",depPolicy.getId(),depPolicy.getAllPartitions()));
            }
            depPolicyList.add(depPolicy);
          }
 else {
            return null;
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"";
          log.warn(msg,e);
        }
      }
    }
  }
  return depPolicyList;
}","public List<DeploymentPolicy> retrieveDeploymentPolicies(){
  List<DeploymentPolicy> depPolicyList=new ArrayList<DeploymentPolicy>();
  RegistryManager registryManager=RegistryManager.getInstance();
  String[] depPolicyResourceList=(String[])registryManager.retrieve(AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.DEPLOYMENT_POLICY_RESOURCE);
  if (depPolicyResourceList != null) {
    DeploymentPolicy depPolicy;
    for (    String resourcePath : depPolicyResourceList) {
      Object serializedObj=registryManager.retrieve(resourcePath);
      if (serializedObj != null) {
        try {
          Object dataObj=Deserializer.deserializeFromByteArray((byte[])serializedObj);
          if (dataObj instanceof DeploymentPolicy) {
            depPolicy=(DeploymentPolicy)dataObj;
            if (log.isDebugEnabled()) {
              log.debug(depPolicy.toString());
            }
            depPolicyList.add(depPolicy);
          }
 else {
            return null;
          }
        }
 catch (        Exception e) {
          String msg=""String_Node_Str"";
          log.warn(msg,e);
        }
      }
    }
  }
  return depPolicyList;
}",0.9641198818066696
116762,"public void persistDeploymentPolicy(DeploymentPolicy deploymentPolicy){
  String resourcePath=AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.DEPLOYMENT_POLICY_RESOURCE + ""String_Node_Str""+ deploymentPolicy.getId();
  persist(deploymentPolicy,resourcePath);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",deploymentPolicy.getId(),deploymentPolicy.getAllPartitions()));
  }
}","public void persistDeploymentPolicy(DeploymentPolicy deploymentPolicy){
  String resourcePath=AutoScalerConstants.AUTOSCALER_RESOURCE + AutoScalerConstants.DEPLOYMENT_POLICY_RESOURCE + ""String_Node_Str""+ deploymentPolicy.getId();
  persist(deploymentPolicy,resourcePath);
  if (log.isDebugEnabled()) {
    log.debug(deploymentPolicy.toString());
  }
}",0.8463541666666666
116763,"@Override public void run(){
  log.info(""String_Node_Str"");
  while (true) {
    try {
      TextMessage message=HealthEventQueue.getInstance().take();
      String messageText=message.getText();
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + messageText);
      Event event=jsonToEvent(messageText);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",event.getEventName()));
      }
      if (Constants.AVERAGE_REQUESTS_IN_FLIGHT.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String networkPartitionId=event.getProperties().get(""String_Node_Str"");
        String value=event.getProperties().get(""String_Node_Str"");
        Float floatValue=Float.parseFloat(value);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getEventName(),clusterId,networkPartitionId,value));
        }
        AutoscalerContext.getInstance().getMonitor(clusterId).getNetworkPartitionCtxt(networkPartitionId).setAverageRequestsInFlight(floatValue);
      }
 else       if (Constants.GRADIENT_OF_REQUESTS_IN_FLIGHT.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String networkPartitionId=event.getProperties().get(""String_Node_Str"");
        String value=event.getProperties().get(""String_Node_Str"");
        Float floatValue=Float.parseFloat(value);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getEventName(),clusterId,networkPartitionId,value));
        }
        AutoscalerContext.getInstance().getMonitor(clusterId).getNetworkPartitionCtxt(networkPartitionId).setRequestsInFlightGradient(floatValue);
      }
 else       if (Constants.SECOND_DERIVATIVE_OF_REQUESTS_IN_FLIGHT.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String networkPartitionId=event.getProperties().get(""String_Node_Str"");
        String value=event.getProperties().get(""String_Node_Str"");
        Float floatValue=Float.parseFloat(value);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getEventName(),clusterId,networkPartitionId,value));
        }
        AutoscalerContext.getInstance().getMonitor(clusterId).getNetworkPartitionCtxt(networkPartitionId).setRequestsInFlightSecondDerivative(floatValue);
      }
 else       if (Constants.MEMBER_FAULT_EVENT_NAME.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String memberId=event.getProperties().get(""String_Node_Str"");
        if (memberId == null || memberId.isEmpty()) {
          if (log.isErrorEnabled()) {
            log.error(""String_Node_Str"");
          }
        }
 else {
          handleMemberFaultEvent(clusterId,memberId);
        }
      }
 else       if (Constants.MEMBER_AVERAGE_LOAD_AVERAGE.equals(event.getEventName())) {
        LoadAverage loadAverage=findLoadAverage(event);
        if (loadAverage != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          loadAverage.setAverage(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_SECOND_DERIVATIVE_OF_LOAD_AVERAGE.equals(event.getEventName())) {
        LoadAverage loadAverage=findLoadAverage(event);
        if (loadAverage != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          loadAverage.setSecondDerivative(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_GRADIENT_LOAD_AVERAGE.equals(event.getEventName())) {
        LoadAverage loadAverage=findLoadAverage(event);
        if (loadAverage != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          loadAverage.setGradient(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_AVERAGE_MEMORY_CONSUMPTION.equals(event.getEventName())) {
        MemoryConsumption memoryConsumption=findMemoryConsumption(event);
        if (memoryConsumption != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          memoryConsumption.setAverage(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_SECOND_DERIVATIVE_OF_MEMORY_CONSUMPTION.equals(event.getEventName())) {
        MemoryConsumption memoryConsumption=findMemoryConsumption(event);
        if (memoryConsumption != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          memoryConsumption.setSecondDerivative(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_GRADIENT_MEMORY_CONSUMPTION.equals(event.getEventName())) {
        MemoryConsumption memoryConsumption=findMemoryConsumption(event);
        if (memoryConsumption != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          memoryConsumption.setGradient(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.AVERAGE_LOAD_AVERAGE.equals(event.getEventName())) {
      }
 else       if (Constants.SECOND_DERIVATIVE_OF_LOAD_AVERAGE.equals(event.getEventName())) {
      }
 else       if (Constants.GRADIENT_LOAD_AVERAGE.equals(event.getEventName())) {
      }
 else       if (Constants.AVERAGE_MEMORY_CONSUMPTION.equals(event.getEventName())) {
      }
 else       if (Constants.SECOND_DERIVATIVE_OF_MEMORY_CONSUMPTION.equals(event.getEventName())) {
      }
 else       if (Constants.GRADIENT_MEMORY_CONSUMPTION.equals(event.getEventName())) {
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  log.info(""String_Node_Str"");
  while (true) {
    try {
      TextMessage message=HealthEventQueue.getInstance().take();
      String messageText=message.getText();
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + messageText);
      Event event=jsonToEvent(messageText);
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",event.getEventName()));
      }
      if (Constants.AVERAGE_REQUESTS_IN_FLIGHT.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String networkPartitionId=event.getProperties().get(""String_Node_Str"");
        String value=event.getProperties().get(""String_Node_Str"");
        Float floatValue=Float.parseFloat(value);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getEventName(),clusterId,networkPartitionId,value));
        }
        AutoscalerContext.getInstance().getMonitor(clusterId).getNetworkPartitionCtxt(networkPartitionId).setAverageRequestsInFlight(floatValue);
      }
 else       if (Constants.GRADIENT_OF_REQUESTS_IN_FLIGHT.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String networkPartitionId=event.getProperties().get(""String_Node_Str"");
        String value=event.getProperties().get(""String_Node_Str"");
        Float floatValue=Float.parseFloat(value);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getEventName(),clusterId,networkPartitionId,value));
        }
        AutoscalerContext.getInstance().getMonitor(clusterId).getNetworkPartitionCtxt(networkPartitionId).setRequestsInFlightGradient(floatValue);
      }
 else       if (Constants.SECOND_DERIVATIVE_OF_REQUESTS_IN_FLIGHT.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String networkPartitionId=event.getProperties().get(""String_Node_Str"");
        String value=event.getProperties().get(""String_Node_Str"");
        Float floatValue=Float.parseFloat(value);
        if (log.isDebugEnabled()) {
          log.debug(String.format(""String_Node_Str"",event.getEventName(),clusterId,networkPartitionId,value));
        }
        AutoscalerContext.getInstance().getMonitor(clusterId).getNetworkPartitionCtxt(networkPartitionId).setRequestsInFlightSecondDerivative(floatValue);
      }
 else       if (Constants.MEMBER_FAULT_EVENT_NAME.equals(event.getEventName())) {
        String clusterId=event.getProperties().get(""String_Node_Str"");
        String memberId=event.getProperties().get(""String_Node_Str"");
        if (memberId == null || memberId.isEmpty()) {
          if (log.isErrorEnabled()) {
            log.error(""String_Node_Str"");
          }
        }
 else {
          handleMemberFaultEvent(clusterId,memberId);
        }
      }
 else       if (Constants.MEMBER_AVERAGE_LOAD_AVERAGE.equals(event.getEventName())) {
        LoadAverage loadAverage=findLoadAverage(event);
        if (loadAverage != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          loadAverage.setAverage(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event,event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_SECOND_DERIVATIVE_OF_LOAD_AVERAGE.equals(event.getEventName())) {
        LoadAverage loadAverage=findLoadAverage(event);
        if (loadAverage != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          loadAverage.setSecondDerivative(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event,event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_GRADIENT_LOAD_AVERAGE.equals(event.getEventName())) {
        LoadAverage loadAverage=findLoadAverage(event);
        if (loadAverage != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          loadAverage.setGradient(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event,event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_AVERAGE_MEMORY_CONSUMPTION.equals(event.getEventName())) {
        MemoryConsumption memoryConsumption=findMemoryConsumption(event);
        if (memoryConsumption != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          memoryConsumption.setAverage(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event,event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_SECOND_DERIVATIVE_OF_MEMORY_CONSUMPTION.equals(event.getEventName())) {
        MemoryConsumption memoryConsumption=findMemoryConsumption(event);
        if (memoryConsumption != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          memoryConsumption.setSecondDerivative(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event,event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.MEMBER_GRADIENT_MEMORY_CONSUMPTION.equals(event.getEventName())) {
        MemoryConsumption memoryConsumption=findMemoryConsumption(event);
        if (memoryConsumption != null) {
          String value=event.getProperties().get(""String_Node_Str"");
          Float floatValue=Float.parseFloat(value);
          memoryConsumption.setGradient(floatValue);
          if (log.isDebugEnabled()) {
            log.debug(String.format(""String_Node_Str"",event,event.getProperties().get(""String_Node_Str""),value));
          }
        }
      }
 else       if (Constants.AVERAGE_LOAD_AVERAGE.equals(event.getEventName())) {
      }
 else       if (Constants.SECOND_DERIVATIVE_OF_LOAD_AVERAGE.equals(event.getEventName())) {
      }
 else       if (Constants.GRADIENT_LOAD_AVERAGE.equals(event.getEventName())) {
      }
 else       if (Constants.AVERAGE_MEMORY_CONSUMPTION.equals(event.getEventName())) {
      }
 else       if (Constants.SECOND_DERIVATIVE_OF_MEMORY_CONSUMPTION.equals(event.getEventName())) {
      }
 else       if (Constants.GRADIENT_MEMORY_CONSUMPTION.equals(event.getEventName())) {
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.9973730297723292
116764,"private void onArtifactUpdateEvent(ArtifactUpdatedEvent event){
  ArtifactUpdatedEvent artifactUpdatedEvent=(ArtifactUpdatedEvent)event;
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",artifactUpdatedEvent.toString()));
  }
  String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
  String localRepoPath=CartridgeAgentConfiguration.getInstance().getAppPath();
  String clusterIdInMessage=artifactUpdatedEvent.getClusterId();
  String repoURL=artifactUpdatedEvent.getRepoURL();
  String repoPassword=CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
  String repoUsername=artifactUpdatedEvent.getRepoUserName();
  String tenantId=artifactUpdatedEvent.getTenantId();
  if (StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    repoInformation.setRepoPassword(repoPassword);
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    boolean cloneExists=GitBasedArtifactRepository.cloneExists(repoInformation);
    GitBasedArtifactRepository.checkout(repoInformation);
    if (!cloneExists) {
      CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
    }
  }
}","private void onArtifactUpdateEvent(ArtifactUpdatedEvent event){
  ArtifactUpdatedEvent artifactUpdatedEvent=(ArtifactUpdatedEvent)event;
  if (log.isInfoEnabled()) {
    log.info(String.format(""String_Node_Str"",artifactUpdatedEvent.toString()));
  }
  String clusterIdInPayload=CartridgeAgentConfiguration.getInstance().getClusterId();
  String localRepoPath=CartridgeAgentConfiguration.getInstance().getAppPath();
  String clusterIdInMessage=artifactUpdatedEvent.getClusterId();
  String repoURL=artifactUpdatedEvent.getRepoURL();
  String repoPassword=CartridgeAgentUtils.decryptPassword(artifactUpdatedEvent.getRepoPassword());
  String repoUsername=artifactUpdatedEvent.getRepoUserName();
  String tenantId=artifactUpdatedEvent.getTenantId();
  if (StringUtils.isNotEmpty(repoURL) && (clusterIdInPayload != null) && clusterIdInPayload.equals(clusterIdInMessage)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    repoInformation.setRepoPassword(repoPassword);
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    boolean cloneExists=GitBasedArtifactRepository.cloneExists(repoInformation);
    GitBasedArtifactRepository.checkout(repoInformation);
    if (!cloneExists) {
      CartridgeAgentEventPublisher.publishInstanceActivatedEvent();
    }
  }
}",0.9838926174496644
116765,"public static void main(String[] args){
  try {
    PropertyConfigurator.configure(System.getProperty(""String_Node_Str""));
    JndiConfigurator.configure();
    cartridgeAgent=new CartridgeAgent();
    Thread thread=new Thread(cartridgeAgent);
    thread.start();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(e);
    }
    if (cartridgeAgent != null) {
      cartridgeAgent.terminate();
    }
  }
}","public static void main(String[] args){
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    PropertyConfigurator.configure(System.getProperty(""String_Node_Str""));
    JndiConfigurator.configure();
    cartridgeAgent=new CartridgeAgent();
    Thread thread=new Thread(cartridgeAgent);
    thread.start();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(e);
    }
    if (cartridgeAgent != null) {
      cartridgeAgent.terminate();
    }
  }
}",0.9207708779443254
116766,"private List<Integer> readPorts(){
  List<Integer> ports=new ArrayList<Integer>();
  String portsStr=readParameterValue(CartridgeAgentConstants.PORTS);
  List<String> portsStrList=CartridgeAgentUtils.splitUsingTokenizer(portsStr,""String_Node_Str"");
  for (  String portStr : portsStrList) {
    ports.add(Integer.parseInt(portsStr));
  }
  return ports;
}","private List<Integer> readPorts(){
  List<Integer> ports=new ArrayList<Integer>();
  String portsStr=readParameterValue(CartridgeAgentConstants.PORTS);
  List<String> portsStrList=CartridgeAgentUtils.splitUsingTokenizer(portsStr,""String_Node_Str"");
  for (  String port : portsStrList) {
    ports.add(Integer.parseInt(port));
  }
  return ports;
}",0.9900426742532006
116767,"public static void configure(){
  generateJndiPropertiesFile();
  configured=true;
}","public static void configure(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  generateJndiPropertiesFile();
}",0.5990783410138248
116768,"private static void generateJndiPropertiesFile(){
  String mbIp=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(mbIp)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String mbPort=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(mbPort)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String templateFilePath=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(templateFilePath)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String jndiFileDir=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(jndiFileDir)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String jndiFilePath=null;
  if (jndiFileDir.endsWith(""String_Node_Str"")) {
    jndiFilePath=jndiFileDir + ""String_Node_Str"";
  }
 else {
    jndiFilePath=jndiFileDir=""String_Node_Str"" + ""String_Node_Str"";
  }
  File templateFile=new File(templateFilePath);
  if (!templateFile.exists()) {
    throw new RuntimeException(String.format(""String_Node_Str"",templateFilePath));
  }
  try {
    String content=readFileContent(templateFilePath);
    content=content.replace(""String_Node_Str"",mbIp);
    content=content.replace(""String_Node_Str"",mbPort);
    writeFileContent(content,jndiFilePath);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","private static void generateJndiPropertiesFile(){
  String mbIp=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(mbIp)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String mbPort=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(mbPort)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String templateFilePath=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(templateFilePath)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String jndiFileDir=System.getProperty(""String_Node_Str"");
  if (StringUtils.isBlank(jndiFileDir)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String jndiFilePath=null;
  if (jndiFileDir.endsWith(""String_Node_Str"")) {
    jndiFilePath=jndiFileDir + ""String_Node_Str"";
  }
 else {
    jndiFilePath=jndiFileDir + ""String_Node_Str"" + ""String_Node_Str"";
  }
  File templateFile=new File(templateFilePath);
  if (!templateFile.exists()) {
    throw new RuntimeException(String.format(""String_Node_Str"",templateFilePath));
  }
  try {
    String content=readFileContent(templateFilePath);
    content=content.replace(""String_Node_Str"",mbIp);
    content=content.replace(""String_Node_Str"",mbPort);
    writeFileContent(content,jndiFilePath);
    if (log.isDebugEnabled()) {
      log.debug(String.format(""String_Node_Str"",jndiFilePath));
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9620071684587812
116769,"public static void publishInstanceStartedEvent(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  InstanceStartedEvent event=new InstanceStartedEvent(CartridgeAgentConfiguration.getInstance().getServiceName(),CartridgeAgentConfiguration.getInstance().getClusterId(),CartridgeAgentConfiguration.getInstance().getNetworkPartitionId(),CartridgeAgentConfiguration.getInstance().getPartitionId(),CartridgeAgentConfiguration.getInstance().getMemberId());
  EventPublisher eventPublisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
  eventPublisher.publish(event);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}","public static void publishInstanceStartedEvent(){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  InstanceStartedEvent event=new InstanceStartedEvent(CartridgeAgentConfiguration.getInstance().getServiceName(),CartridgeAgentConfiguration.getInstance().getClusterId(),CartridgeAgentConfiguration.getInstance().getNetworkPartitionId(),CartridgeAgentConfiguration.getInstance().getPartitionId(),CartridgeAgentConfiguration.getInstance().getMemberId());
  EventPublisher eventPublisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
  eventPublisher.publish(event);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}",0.972560975609756
116770,"public static void publishInstanceActivatedEvent(){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  InstanceActivatedEvent event=new InstanceActivatedEvent(CartridgeAgentConfiguration.getInstance().getServiceName(),CartridgeAgentConfiguration.getInstance().getClusterId(),CartridgeAgentConfiguration.getInstance().getNetworkPartitionId(),CartridgeAgentConfiguration.getInstance().getPartitionId(),CartridgeAgentConfiguration.getInstance().getMemberId());
  EventPublisher eventPublisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
  eventPublisher.publish(event);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
}","public static void publishInstanceActivatedEvent(){
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
  InstanceActivatedEvent event=new InstanceActivatedEvent(CartridgeAgentConfiguration.getInstance().getServiceName(),CartridgeAgentConfiguration.getInstance().getClusterId(),CartridgeAgentConfiguration.getInstance().getNetworkPartitionId(),CartridgeAgentConfiguration.getInstance().getPartitionId(),CartridgeAgentConfiguration.getInstance().getMemberId());
  EventPublisher eventPublisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
  eventPublisher.publish(event);
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"");
  }
}",0.972809667673716
116771,"@Override public void onMessage(Message message){
  TextMessage receivedMessage=(TextMessage)message;
  log.info(""String_Node_Str"");
  String json=null;
  try {
    json=receivedMessage.getText();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage(),e);
  }
  ArtifactUpdatedEvent event=(ArtifactUpdatedEvent)Util.jsonToObject(json,ArtifactUpdatedEvent.class);
  String clusterIdInPayload=LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.CLUSTER_ID);
  String localRepoPath=LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.APP_PATH);
  String clusterIdInMessage=event.getClusterId();
  String repoURL=event.getRepoURL();
  String repoPassword=decryptPassword(event.getRepoPassword());
  String repoUsername=event.getRepoUserName();
  String tenantId=event.getTenantId();
  log.info(""String_Node_Str"" + clusterIdInPayload);
  log.info(""String_Node_Str"" + clusterIdInMessage);
  if (clusterIdInPayload != null && clusterIdInPayload.equals(clusterIdInMessage)) {
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    repoInformation.setRepoPassword(repoPassword);
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    boolean cloneExists=GitBasedArtifactRepository.cloneExists(repoInformation);
    GitBasedArtifactRepository.checkout(repoInformation);
    if (!cloneExists) {
      log.info(""String_Node_Str"");
      InstanceActivatedEvent instanceActivatedEvent=new InstanceActivatedEvent(LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.SERVICE_NAME),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.CLUSTER_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.NETWORK_PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.MEMBER_ID));
      EventPublisher publisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
      publisher.publish(instanceActivatedEvent);
      log.info(""String_Node_Str"");
    }
  }
}","@Override public void onMessage(Message message){
  TextMessage receivedMessage=(TextMessage)message;
  log.info(""String_Node_Str"");
  String json=null;
  try {
    json=receivedMessage.getText();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage(),e);
  }
  ArtifactUpdatedEvent event=(ArtifactUpdatedEvent)Util.jsonToObject(json,ArtifactUpdatedEvent.class);
  String clusterIdInPayload=LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.CLUSTER_ID);
  String localRepoPath=LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.APP_PATH);
  String clusterIdInMessage=event.getClusterId();
  String repoURL=event.getRepoURL();
  String repoPassword=decryptPassword(event.getRepoPassword());
  String repoUsername=event.getRepoUserName();
  String tenantId=event.getTenantId();
  log.info(""String_Node_Str"" + clusterIdInPayload);
  log.info(""String_Node_Str"" + clusterIdInMessage);
  log.info(""String_Node_Str"" + repoURL);
  if (StringUtils.isNotEmpty(repoURL) && clusterIdInPayload != null && clusterIdInPayload.equals(clusterIdInMessage)) {
    RepositoryInformation repoInformation=new RepositoryInformation();
    repoInformation.setRepoUsername(repoUsername);
    repoInformation.setRepoPassword(repoPassword);
    repoInformation.setRepoUrl(repoURL);
    repoInformation.setRepoPath(localRepoPath);
    repoInformation.setTenantId(tenantId);
    boolean cloneExists=GitBasedArtifactRepository.cloneExists(repoInformation);
    GitBasedArtifactRepository.checkout(repoInformation);
    if (!cloneExists) {
      log.info(""String_Node_Str"");
      InstanceActivatedEvent instanceActivatedEvent=new InstanceActivatedEvent(LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.SERVICE_NAME),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.CLUSTER_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.NETWORK_PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.MEMBER_ID));
      EventPublisher publisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
      publisher.publish(instanceActivatedEvent);
      log.info(""String_Node_Str"");
    }
  }
}",0.9816143497757848
116772,"public static void main(String[] args){
  log.info(""String_Node_Str"");
  System.setProperty(CartridgeAgentConstants.JNDI_PROPERTIES_DIR,args[0]);
  System.setProperty(CartridgeAgentConstants.PARAM_FILE_PATH,args[1]);
  TopicSubscriber subscriber=new TopicSubscriber(Constants.ARTIFACT_SYNCHRONIZATION_TOPIC);
  subscriber.setMessageListener(new ArtifactListener());
  Thread tsubscriber=new Thread(subscriber);
  tsubscriber.start();
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""String_Node_Str"");
  InstanceStartedEvent event=new InstanceStartedEvent(LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.SERVICE_NAME),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.CLUSTER_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.NETWORK_PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.MEMBER_ID));
  EventPublisher publisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
  publisher.publish(event);
  log.info(""String_Node_Str"");
  ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(1);
  scheduler.scheduleWithFixedDelay(new RepositoryFileListener(),0,10,TimeUnit.SECONDS);
}","public static void main(String[] args){
  log.info(""String_Node_Str"");
  System.setProperty(CartridgeAgentConstants.JNDI_PROPERTIES_DIR,args[0]);
  System.setProperty(CartridgeAgentConstants.PARAM_FILE_PATH,args[1]);
  TopicSubscriber subscriber=new TopicSubscriber(Constants.ARTIFACT_SYNCHRONIZATION_TOPIC);
  subscriber.setMessageListener(new ArtifactListener());
  Thread tsubscriber=new Thread(subscriber);
  tsubscriber.start();
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""String_Node_Str"");
  InstanceStartedEvent event=new InstanceStartedEvent(LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.SERVICE_NAME),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.CLUSTER_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.NETWORK_PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.MEMBER_ID));
  EventPublisher publisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
  publisher.publish(event);
  log.info(""String_Node_Str"");
  String repoURL=LaunchParamsUtil.readParamValueFromPayload(""String_Node_Str"");
  if (""String_Node_Str"".equals(repoURL) || repoURL == null) {
    log.info(""String_Node_Str"");
    InstanceActivatedEvent instanceActivatedEvent=new InstanceActivatedEvent(LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.SERVICE_NAME),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.CLUSTER_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.NETWORK_PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.PARTITION_ID),LaunchParamsUtil.readParamValueFromPayload(CartridgeAgentConstants.MEMBER_ID));
    EventPublisher instanceStatusPublisher=new EventPublisher(Constants.INSTANCE_STATUS_TOPIC);
    instanceStatusPublisher.publish(instanceActivatedEvent);
    log.info(""String_Node_Str"");
  }
  ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(1);
  scheduler.scheduleWithFixedDelay(new RepositoryFileListener(),0,10,TimeUnit.SECONDS);
}",0.7569562748438388
116773,"public AutoscalerServiceClient(String epr) throws AxisFault {
  String autosclaerSocketTimeout=(System.getProperty(CartridgeConstants.AUTOSCALER_SOCKET_TIMEOUT) == null) ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.AUTOSCALER_SOCKET_TIMEOUT);
  String autosclaerConnectionTimeout=(System.getProperty(CartridgeConstants.AUTOSCALER_CONNECTION_TIMEOUT) == null) ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.AUTOSCALER_CONNECTION_TIMEOUT);
  ConfigurationContext clientConfigContext=DataHolder.getClientConfigContext();
  try {
    stub=new AutoScalerServiceStub(clientConfigContext,epr);
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.SO_TIMEOUT,autosclaerSocketTimeout);
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.CONNECTION_TIMEOUT,autosclaerConnectionTimeout);
  }
 catch (  AxisFault axisFault) {
    String msg=""String_Node_Str"" + axisFault.getMessage();
    log.error(msg,axisFault);
    throw new AxisFault(msg,axisFault);
  }
}","public AutoscalerServiceClient(String epr) throws AxisFault {
  String autosclaerSocketTimeout=System.getProperty(CartridgeConstants.AUTOSCALER_SOCKET_TIMEOUT) == null ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.AUTOSCALER_SOCKET_TIMEOUT);
  String autosclaerConnectionTimeout=System.getProperty(CartridgeConstants.AUTOSCALER_CONNECTION_TIMEOUT) == null ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.AUTOSCALER_CONNECTION_TIMEOUT);
  ConfigurationContext clientConfigContext=DataHolder.getClientConfigContext();
  try {
    stub=new AutoScalerServiceStub(clientConfigContext,epr);
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.SO_TIMEOUT,new Integer(autosclaerSocketTimeout));
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.CONNECTION_TIMEOUT,new Integer(autosclaerConnectionTimeout));
  }
 catch (  AxisFault axisFault) {
    String msg=""String_Node_Str"" + axisFault.getMessage();
    log.error(msg,axisFault);
    throw new AxisFault(msg,axisFault);
  }
}",0.985279685966634
116774,"public CloudControllerServiceClient(String epr) throws AxisFault {
  String ccSocketTimeout=System.getProperty(CartridgeConstants.CC_SOCKET_TIMEOUT) == null ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.CC_SOCKET_TIMEOUT);
  String ccConnectionTimeout=System.getProperty(CartridgeConstants.CC_CONNECTION_TIMEOUT) == null ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.CC_CONNECTION_TIMEOUT);
  ConfigurationContext clientConfigContext=DataHolder.getClientConfigContext();
  try {
    stub=new CloudControllerServiceStub(clientConfigContext,epr);
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.SO_TIMEOUT,ccSocketTimeout);
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.CONNECTION_TIMEOUT,ccConnectionTimeout);
  }
 catch (  AxisFault axisFault) {
    String msg=""String_Node_Str"" + axisFault.getMessage();
    log.error(msg,axisFault);
    throw new AxisFault(msg,axisFault);
  }
}","public CloudControllerServiceClient(String epr) throws AxisFault {
  String ccSocketTimeout=System.getProperty(CartridgeConstants.CC_SOCKET_TIMEOUT) == null ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.CC_SOCKET_TIMEOUT);
  String ccConnectionTimeout=System.getProperty(CartridgeConstants.CC_CONNECTION_TIMEOUT) == null ? ""String_Node_Str"" : System.getProperty(CartridgeConstants.CC_CONNECTION_TIMEOUT);
  ConfigurationContext clientConfigContext=DataHolder.getClientConfigContext();
  try {
    stub=new CloudControllerServiceStub(clientConfigContext,epr);
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.SO_TIMEOUT,new Integer(ccSocketTimeout));
    stub._getServiceClient().getOptions().setProperty(HTTPConstants.CONNECTION_TIMEOUT,new Integer(ccConnectionTimeout));
  }
 catch (  AxisFault axisFault) {
    String msg=""String_Node_Str"" + axisFault.getMessage();
    log.error(msg,axisFault);
    throw new AxisFault(msg,axisFault);
  }
}",0.9667705088265836
116775,"public Service(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId,CartridgeInfo cartridgeInfo){
  this.type=type;
  this.autoscalingPolicyName=autoscalingPolicyName;
  this.deploymentPolicyName=deploymentPolicyName;
  this.tenantId=tenantId;
  this.cartridgeInfo=cartridgeInfo;
  this.tenantRange=""String_Node_Str"";
  this.subscriptionKey=CartridgeSubscriptionUtils.generateSubscriptionKey();
}","public Service(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId,CartridgeInfo cartridgeInfo,String tenantRange){
  this.type=type;
  this.autoscalingPolicyName=autoscalingPolicyName;
  this.deploymentPolicyName=deploymentPolicyName;
  this.tenantId=tenantId;
  this.cartridgeInfo=cartridgeInfo;
  this.tenantRange=tenantRange;
  this.subscriptionKey=CartridgeSubscriptionUtils.generateSubscriptionKey();
}",0.9455388180764774
116776,"public Service deployService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId) throws ADCException, UnregisteredCartridgeException {
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(type);
  }
 catch (  UnregisteredCartridgeException e) {
    String message=type + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + type;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  if (!cartridgeInfo.getMultiTenant()) {
    String errorMsg=""String_Node_Str"" + type + ""String_Node_Str"";
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  Service service=new MultiTenantService(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo);
  service.setClusterId(type + ""String_Node_Str"" + cartridgeInfo.getHostName()+ ""String_Node_Str"");
  service.setHostName(cartridgeInfo.getHostName());
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(service);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  service.setPayloadData(payloadData);
  service.deploy();
  return service;
}","public Service deployService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId,String tenantRange) throws ADCException, UnregisteredCartridgeException {
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(type);
  }
 catch (  UnregisteredCartridgeException e) {
    String message=type + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + type;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  if (!cartridgeInfo.getMultiTenant()) {
    String errorMsg=""String_Node_Str"" + type + ""String_Node_Str"";
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  Service service=new MultiTenantService(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo,tenantRange);
  service.setClusterId(type + ""String_Node_Str"" + cartridgeInfo.getHostName()+ ""String_Node_Str"");
  service.setHostName(cartridgeInfo.getHostName());
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(service);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  service.setPayloadData(payloadData);
  service.deploy();
  try {
    PersistenceManager.persistService(service);
  }
 catch (  Exception e) {
    String message=""String_Node_Str"" + type;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  return service;
}",0.9398535564853556
116777,"public MultiTenantService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId,CartridgeInfo cartridgeInfo){
  super(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo);
}","public MultiTenantService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId,CartridgeInfo cartridgeInfo,String tenantRange){
  super(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo,tenantRange);
}",0.9341825902335456
116778,"public CartridgeSubscription subscribeToCartridgeWithProperties(String cartridgeType,String cartridgeAlias,String autoscalingPolicyName,String deploymentPolicyName,String tenantDomain,int tenantId,String tenantAdminUsername,String repositoryType,String repositoryURL,boolean isPrivateRepository,String repositoryUsername,String repositoryPassword,Property[] props) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  ApplicationManagementUtil.validateCartridgeAlias(cartridgeAlias,cartridgeType);
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (props != null) {
      cartridgeInfo.setProperties(props);
    }
  }
 catch (  UnregisteredCartridgeException e) {
    String message=cartridgeType + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + cartridgeType;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  Repository repository=cartridgeSubscription.manageRepository(repositoryURL,repositoryUsername,repositoryPassword,isPrivateRepository,cartridgeAlias,cartridgeInfo,tenantDomain);
  Subscriber subscriber=new Subscriber(tenantAdminUsername,tenantId,tenantDomain);
  cartridgeSubscription.createSubscription(subscriber,cartridgeAlias,autoscalingPolicyName,deploymentPolicyName,repository);
  cartridgeSubscription.setSubscriptionKey(CartridgeSubscriptionUtils.generateSubscriptionKey());
  log.info(""String_Node_Str"" + tenantId + ""String_Node_Str""+ tenantAdminUsername+ ""String_Node_Str""+ ""String_Node_Str""+ cartridgeAlias+ ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ repositoryURL+ ""String_Node_Str""+ autoscalingPolicyName);
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(cartridgeSubscription);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  if (cartridgeSubscription.getCustomPayloadEntries() != null) {
    Map<String,String> customPayloadEntries=cartridgeSubscription.getCustomPayloadEntries();
    Set<Map.Entry<String,String>> entrySet=customPayloadEntries.entrySet();
    for (    Map.Entry<String,String> entry : entrySet) {
      payloadData.add(entry.getKey(),entry.getValue());
    }
  }
  cartridgeSubscription.setPayloadData(payloadData);
  CartridgeSubscriptionUtils.publishTenantSubscribedEvent(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getCartridgeInfo().getType());
  return cartridgeSubscription;
}","public CartridgeSubscription subscribeToCartridgeWithProperties(String cartridgeType,String cartridgeAlias,String autoscalingPolicyName,String deploymentPolicyName,String tenantDomain,int tenantId,String tenantAdminUsername,String repositoryType,String repositoryURL,boolean isPrivateRepository,String repositoryUsername,String repositoryPassword,Property[] props) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  ApplicationManagementUtil.validateCartridgeAlias(cartridgeAlias,cartridgeType);
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (props != null) {
      cartridgeInfo.setProperties(props);
    }
  }
 catch (  UnregisteredCartridgeException e) {
    String message=cartridgeType + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + cartridgeType;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  Repository repository=cartridgeSubscription.manageRepository(repositoryURL,repositoryUsername,repositoryPassword,isPrivateRepository,cartridgeAlias,cartridgeInfo,tenantDomain);
  Subscriber subscriber=new Subscriber(tenantAdminUsername,tenantId,tenantDomain);
  cartridgeSubscription.createSubscription(subscriber,cartridgeAlias,autoscalingPolicyName,deploymentPolicyName,repository);
  cartridgeSubscription.setSubscriptionKey(CartridgeSubscriptionUtils.generateSubscriptionKey());
  log.info(""String_Node_Str"" + tenantId + ""String_Node_Str""+ tenantAdminUsername+ ""String_Node_Str""+ ""String_Node_Str""+ cartridgeAlias+ ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ repositoryURL+ ""String_Node_Str""+ autoscalingPolicyName);
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(cartridgeSubscription);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  if (cartridgeSubscription.getCustomPayloadEntries() != null) {
    Map<String,String> customPayloadEntries=cartridgeSubscription.getCustomPayloadEntries();
    Set<Map.Entry<String,String>> entrySet=customPayloadEntries.entrySet();
    for (    Map.Entry<String,String> entry : entrySet) {
      payloadData.add(entry.getKey(),entry.getValue());
    }
  }
  cartridgeSubscription.setPayloadData(payloadData);
  CartridgeSubscriptionUtils.publishTenantSubscribedEvent(cartridgeSubscription.getSubscriber().getTenantId(),cartridgeSubscription.getCartridgeInfo().getType());
  if (cartridgeInfo.getMultiTenant()) {
    log.info(""String_Node_Str"");
    ArtifactUpdatePublisher publisher=new ArtifactUpdatePublisher(cartridgeSubscription.getRepository(),cartridgeSubscription.getClusterDomain(),String.valueOf(cartridgeSubscription.getSubscriber().getTenantId()));
    publisher.publish();
  }
  return cartridgeSubscription;
}",0.9513499413068996
116779,"/** 
 * Super tenant will deploy multitenant service.  get domain , subdomain as well..
 * @param clusterDomain 
 * @param clusterSubdomain 
 */
static void deployService(String cartridgeType,String alias,String autoscalingPolicy,String deploymentPolicy,String tenantDomain,int tenantId,String clusterDomain,String clusterSubdomain,String tenantRange){
  CartridgeSubscription cartridgeSubscription=null;
  try {
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Super tenant will deploy multitenant service.  get domain , subdomain as well..
 * @param clusterDomain 
 * @param clusterSubdomain 
 */
static void deployService(String cartridgeType,String alias,String autoscalingPolicy,String deploymentPolicy,String tenantDomain,int tenantId,String clusterDomain,String clusterSubdomain,String tenantRange){
  log.info(""String_Node_Str"");
  try {
    serviceDeploymentManager.deployService(cartridgeType,autoscalingPolicy,deploymentPolicy,tenantId,tenantRange);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8169556840077071
116780,"public Service deployService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId) throws ADCException, UnregisteredCartridgeException {
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(type);
  }
 catch (  UnregisteredCartridgeException e) {
    String message=type + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + type;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  if (!cartridgeInfo.getMultiTenant()) {
    String errorMsg=""String_Node_Str"" + type + ""String_Node_Str"";
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  Service service=new MultiTenantService(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo);
  service.setClusterId(type + ""String_Node_Str"" + cartridgeInfo.getHostName()+ ""String_Node_Str"");
  service.setHostName(cartridgeInfo.getHostName());
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(service);
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  service.setPayloadData(payloadData);
  service.deploy();
  return service;
}","public Service deployService(String type,String autoscalingPolicyName,String deploymentPolicyName,int tenantId) throws ADCException, UnregisteredCartridgeException {
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(type);
  }
 catch (  UnregisteredCartridgeException e) {
    String message=type + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + type;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  if (!cartridgeInfo.getMultiTenant()) {
    String errorMsg=""String_Node_Str"" + type + ""String_Node_Str"";
    log.error(errorMsg);
    throw new ADCException(errorMsg);
  }
  Service service=new MultiTenantService(type,autoscalingPolicyName,deploymentPolicyName,tenantId,cartridgeInfo);
  service.setClusterId(type + ""String_Node_Str"" + cartridgeInfo.getHostName()+ ""String_Node_Str"");
  service.setHostName(cartridgeInfo.getHostName());
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(service);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  service.setPayloadData(payloadData);
  service.deploy();
  return service;
}",0.9893138357705288
116781,"public CartridgeSubscription subscribeToCartridgeWithProperties(String cartridgeType,String cartridgeAlias,String autoscalingPolicyName,String deploymentPolicyName,String tenantDomain,int tenantId,String tenantAdminUsername,String repositoryType,String repositoryURL,boolean isPrivateRepository,String repositoryUsername,String repositoryPassword,Property[] props) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  ApplicationManagementUtil.validateCartridgeAlias(cartridgeAlias,cartridgeType);
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (props != null) {
      cartridgeInfo.setProperties(props);
    }
  }
 catch (  UnregisteredCartridgeException e) {
    String message=cartridgeType + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + cartridgeType;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  Repository repository=cartridgeSubscription.manageRepository(repositoryURL,repositoryUsername,repositoryPassword,isPrivateRepository,cartridgeAlias,cartridgeInfo,tenantDomain);
  Subscriber subscriber=new Subscriber(tenantAdminUsername,tenantId,tenantDomain);
  cartridgeSubscription.createSubscription(subscriber,cartridgeAlias,autoscalingPolicyName,deploymentPolicyName,repository);
  cartridgeSubscription.setSubscriptionKey(CartridgeSubscriptionUtils.generateSubscriptionKey());
  log.info(""String_Node_Str"" + tenantId + ""String_Node_Str""+ tenantAdminUsername+ ""String_Node_Str""+ ""String_Node_Str""+ cartridgeAlias+ ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ repositoryURL+ ""String_Node_Str""+ autoscalingPolicyName);
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(cartridgeSubscription);
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  if (cartridgeSubscription.getCustomPayloadEntries() != null) {
    Map<String,String> customPayloadEntries=cartridgeSubscription.getCustomPayloadEntries();
    Set<Map.Entry<String,String>> entrySet=customPayloadEntries.entrySet();
    for (    Map.Entry<String,String> entry : entrySet) {
      payloadData.add(entry.getKey(),entry.getValue());
    }
  }
  cartridgeSubscription.setPayloadData(payloadData);
  return cartridgeSubscription;
}","public CartridgeSubscription subscribeToCartridgeWithProperties(String cartridgeType,String cartridgeAlias,String autoscalingPolicyName,String deploymentPolicyName,String tenantDomain,int tenantId,String tenantAdminUsername,String repositoryType,String repositoryURL,boolean isPrivateRepository,String repositoryUsername,String repositoryPassword,Property[] props) throws ADCException, InvalidCartridgeAliasException, DuplicateCartridgeAliasException, PolicyException, UnregisteredCartridgeException, RepositoryRequiredException, RepositoryCredentialsRequiredException, RepositoryTransportException, AlreadySubscribedException, InvalidRepositoryException {
  ApplicationManagementUtil.validateCartridgeAlias(cartridgeAlias,cartridgeType);
  CartridgeInfo cartridgeInfo;
  try {
    cartridgeInfo=CloudControllerServiceClient.getServiceClient().getCartridgeInfo(cartridgeType);
    if (props != null) {
      cartridgeInfo.setProperties(props);
    }
  }
 catch (  UnregisteredCartridgeException e) {
    String message=cartridgeType + ""String_Node_Str"";
    log.error(message);
    throw e;
  }
catch (  Exception e) {
    String message=""String_Node_Str"" + cartridgeType;
    log.error(message,e);
    throw new ADCException(message,e);
  }
  SubscriptionTenancyBehaviour tenancyBehaviour;
  if (cartridgeInfo.getMultiTenant()) {
    tenancyBehaviour=new SubscriptionMultiTenantBehaviour();
  }
 else {
    tenancyBehaviour=new SubscriptionSingleTenantBehaviour();
  }
  CartridgeSubscription cartridgeSubscription=CartridgeSubscriptionFactory.getCartridgeSubscriptionInstance(cartridgeInfo,tenancyBehaviour);
  Repository repository=cartridgeSubscription.manageRepository(repositoryURL,repositoryUsername,repositoryPassword,isPrivateRepository,cartridgeAlias,cartridgeInfo,tenantDomain);
  Subscriber subscriber=new Subscriber(tenantAdminUsername,tenantId,tenantDomain);
  cartridgeSubscription.createSubscription(subscriber,cartridgeAlias,autoscalingPolicyName,deploymentPolicyName,repository);
  cartridgeSubscription.setSubscriptionKey(CartridgeSubscriptionUtils.generateSubscriptionKey());
  log.info(""String_Node_Str"" + tenantId + ""String_Node_Str""+ tenantAdminUsername+ ""String_Node_Str""+ ""String_Node_Str""+ cartridgeAlias+ ""String_Node_Str""+ cartridgeType+ ""String_Node_Str""+ repositoryURL+ ""String_Node_Str""+ autoscalingPolicyName);
  BasicPayloadData basicPayloadData=CartridgeSubscriptionUtils.createBasicPayload(cartridgeSubscription);
  basicPayloadData.populatePayload();
  PayloadData payloadData=PayloadFactory.getPayloadDataInstance(cartridgeInfo.getProvider(),cartridgeInfo.getType(),basicPayloadData);
  if (cartridgeInfo.getProperties() != null && cartridgeInfo.getProperties().length != 0) {
    for (    Property property : cartridgeInfo.getProperties()) {
      if (property.getName().startsWith(CartridgeConstants.CUSTOM_PAYLOAD_PARAM_NAME_PREFIX)) {
        String payloadParamName=property.getName();
        payloadData.add(payloadParamName.substring(payloadParamName.indexOf(""String_Node_Str"") + 1),property.getValue());
      }
    }
  }
  if (cartridgeSubscription.getCustomPayloadEntries() != null) {
    Map<String,String> customPayloadEntries=cartridgeSubscription.getCustomPayloadEntries();
    Set<Map.Entry<String,String>> entrySet=customPayloadEntries.entrySet();
    for (    Map.Entry<String,String> entry : entrySet) {
      payloadData.add(entry.getKey(),entry.getValue());
    }
  }
  cartridgeSubscription.setPayloadData(payloadData);
  return cartridgeSubscription;
}",0.99456054967077
116782,"public BasicPayloadData(){
  payloadBuilder=new StringBuilder();
  createBasicPayloadData();
}","public BasicPayloadData(){
}",0.4590163934426229
116783,"public BasicPayloadData(){
  payloadBuilder=new StringBuilder();
}","public BasicPayloadData(){
  payloadBuilder=new StringBuilder();
  createBasicPayloadData();
}",0.825
116784,"public StringBuilder getPayloadData(){
  payloadBuilder.append(""String_Node_Str"" + getServiceName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getHostName());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getMultitenant());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getTenantId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getTenantRange());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getSubscriptionAlias());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getClusterId());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getSubscriptionKey());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getDeployment());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getApplicationPath());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getGitRepositoryUrl());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + getPortMappings());
  payloadBuilder.append(""String_Node_Str"");
  payloadBuilder.append(""String_Node_Str"" + System.getProperty(CartridgeConstants.PUPPET_IP));
  return payloadBuilder;
}","public StringBuilder getPayloadData(){
  return payloadBuilder;
}",0.0855263157894736
116785,"public void add(String payloadDataName,String payloadDataValue){
  if (additionalPayloadDataBuilder.length() > 0) {
    additionalPayloadDataBuilder.append(""String_Node_Str"");
  }
  additionalPayloadDataBuilder.append(payloadDataName + ""String_Node_Str"" + payloadDataValue);
}","public void add(String payloadDataName,String payloadDataValue){
  if (completePayloadDataBuilder.length() > 0) {
    completePayloadDataBuilder.append(""String_Node_Str"");
  }
  completePayloadDataBuilder.append(payloadDataName + ""String_Node_Str"" + payloadDataValue);
}",0.9010989010989012
116786,"public PayloadData(BasicPayloadData basicPayloadData){
  this.setBasicPayloadData(basicPayloadData);
  additionalPayloadDataBuilder=new StringBuilder();
}","public PayloadData(BasicPayloadData basicPayloadData){
  this.setBasicPayloadData(basicPayloadData);
  completePayloadDataBuilder=new StringBuilder(basicPayloadData.getPayloadData());
}",0.855457227138643
116787,"public StringBuilder getCompletePayloadData(){
  if (additionalPayloadDataBuilder.length() > 0) {
    return getBasicPayloadData().getPayloadData().append(""String_Node_Str"").append(additionalPayloadDataBuilder);
  }
 else {
    return getBasicPayloadData().getPayloadData();
  }
}","public StringBuilder getCompletePayloadData(){
  return completePayloadDataBuilder;
}",0.3945205479452054
116788,"@Override public boolean validatePartition(Partition partition) throws InvalidPartitionException {
  String provider=partition.getProvider();
  IaasProvider iaasProvider=dataHolder.getIaasProvider(provider);
  if (iaasProvider == null) {
    String msg=""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ provider;
    log.error(msg);
    throw new InvalidPartitionException(msg);
  }
  Iaas iaas=iaasProvider.getIaas();
  if (iaas == null) {
    try {
      iaas=(Iaas)Class.forName(iaasProvider.getClassName()).newInstance();
      ComputeServiceBuilderUtil.buildDefaultComputeService(iaasProvider);
      iaasProvider.setIaas(iaas);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + iaasProvider.getClassName();
      log.error(msg,e);
      throw new InvalidPartitionException(msg,e);
    }
  }
  PartitionValidator validator=iaas.getPartitionValidator();
  validator.setIaasProvider(iaasProvider);
  validator.validate(partition.getId(),CloudControllerUtil.toJavaUtilProperties(partition.getProperties()));
  return true;
}","@Override public boolean validatePartition(Partition partition) throws InvalidPartitionException {
  String provider=partition.getProvider();
  IaasProvider iaasProvider=dataHolder.getIaasProvider(provider);
  if (iaasProvider == null) {
    String msg=""String_Node_Str"" + partition.toString() + ""String_Node_Str""+ ""String_Node_Str""+ provider;
    log.error(msg);
    throw new InvalidPartitionException(msg);
  }
  Iaas iaas=iaasProvider.getIaas();
  if (iaas == null) {
    try {
      iaas=(Iaas)Class.forName(iaasProvider.getClassName()).newInstance();
      ComputeServiceBuilderUtil.buildDefaultComputeService(iaasProvider);
      iaasProvider.setIaas(iaas);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + iaasProvider.getClassName();
      log.error(msg,e);
      throw new InvalidPartitionException(msg,e);
    }
  }
  PartitionValidator validator=iaas.getPartitionValidator();
  validator.setIaasProvider(iaasProvider);
  validator.validate(partition.getId(),CloudControllerUtil.toJavaUtilProperties(partition.getProperties()));
  return true;
}",0.9911007025761124
116789,"protected void activate(ComponentContext componentContext) throws Exception {
  try {
    Thread topologyTopicSubscriberThread=new Thread(new AutoscalerTopologyReceiver());
    topologyTopicSubscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    TopicSubscriber healthStatTopicSubscriber=new TopicSubscriber(Constants.HEALTH_STAT_TOPIC);
    healthStatTopicSubscriber.setMessageListener(new HealthEventMessageReceiver());
    Thread healthStatTopicSubscriberThread=new Thread(healthStatTopicSubscriber);
    healthStatTopicSubscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    HealthEventMessageDelegator healthEventMessageDelegator=new HealthEventMessageDelegator();
    Thread healthDelegatorThread=new Thread(healthEventMessageDelegator);
    healthDelegatorThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    this.registryManager=RegistryManager.getInstance();
    ArrayList<Partition> partitions=this.retreivePartitions();
    Iterator<Partition> it=partitions.iterator();
    while (it.hasNext()) {
      Partition par=it.next();
      PartitionManager.getInstance().addPartitionToInformationModel(par);
    }
    ArrayList<AutoscalePolicy> asPolicies=this.retreiveASPolicies();
    Iterator<AutoscalePolicy> asItr=asPolicies.iterator();
    while (asItr.hasNext()) {
      AutoscalePolicy asPolicy=asItr.next();
      PolicyManager.getInstance().addASPolicyToInformationModel(asPolicy);
    }
    ArrayList<DeploymentPolicy> depPolicies=this.retreiveDeploymentPolicies();
    Iterator<DeploymentPolicy> depItr=depPolicies.iterator();
    while (depItr.hasNext()) {
      DeploymentPolicy depPolicy=depItr.next();
      PolicyManager.getInstance().addDeploymentPolicyToInformationModel(depPolicy);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"" + e.getStackTrace());
  }
}","protected void activate(ComponentContext componentContext) throws Exception {
  try {
    Thread topologyTopicSubscriberThread=new Thread(new AutoscalerTopologyReceiver());
    topologyTopicSubscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    TopicSubscriber healthStatTopicSubscriber=new TopicSubscriber(Constants.HEALTH_STAT_TOPIC);
    healthStatTopicSubscriber.setMessageListener(new HealthEventMessageReceiver());
    Thread healthStatTopicSubscriberThread=new Thread(healthStatTopicSubscriber);
    healthStatTopicSubscriberThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    HealthEventMessageDelegator healthEventMessageDelegator=new HealthEventMessageDelegator();
    Thread healthDelegatorThread=new Thread(healthEventMessageDelegator);
    healthDelegatorThread.start();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    this.registryManager=RegistryManager.getInstance();
    ArrayList<Partition> partitions=this.retreivePartitions();
    Iterator<Partition> it=partitions.iterator();
    while (it.hasNext()) {
      Partition par=it.next();
      PartitionManager.getInstance().addPartitionToInformationModel(par);
    }
    ArrayList<AutoscalePolicy> asPolicies=this.retreiveASPolicies();
    Iterator<AutoscalePolicy> asItr=asPolicies.iterator();
    while (asItr.hasNext()) {
      AutoscalePolicy asPolicy=asItr.next();
      PolicyManager.getInstance().addASPolicyToInformationModel(asPolicy);
    }
    ArrayList<DeploymentPolicy> depPolicies=this.retreiveDeploymentPolicies();
    Iterator<DeploymentPolicy> depItr=depPolicies.iterator();
    while (depItr.hasNext()) {
      DeploymentPolicy depPolicy=depItr.next();
      PolicyManager.getInstance().addDeploymentPolicyToInformationModel(depPolicy);
    }
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9945027486256872
116790,"private PartitionManager(){
}","private PartitionManager(){
  networkPartitionContexts=new HashMap<String,NetworkPartitionContext>();
}",0.4393939393939394
116791,"@SuppressWarnings(""String_Node_Str"") public static Cartridge toCartridge(CartridgeConfig config){
  if (config == null) {
    return null;
  }
  Cartridge cartridge=new Cartridge();
  cartridge.setType(config.getType());
  cartridge.setDisplayName(config.getDisplayName());
  cartridge.setDescription(config.getDescription());
  cartridge.setHostName(config.getHostName());
  String[] deploymentDirs=config.getDeploymentDirs();
  if (deploymentDirs != null) {
    cartridge.setDeploymentDirs(Arrays.asList(deploymentDirs));
  }
  cartridge.setProvider(config.getProvider());
  cartridge.setVersion(config.getVersion());
  cartridge.setBaseDir(config.getBaseDir());
  cartridge.setPortMappings(Arrays.asList(config.getPortMappings()));
  cartridge.setMultiTenant(config.isMultiTenant());
  cartridge.setDefaultAutoscalingPolicy(config.getDefaultAutoscalingPolicy());
  org.apache.stratos.cloud.controller.pojo.Properties props=config.getProperties();
  if (props != null) {
    for (    Property prop : props.getProperties()) {
      cartridge.addProperty(prop.getName(),prop.getValue());
    }
  }
  cartridge.setLbConfig(config.getLbConfig());
  List<IaasProvider> iaases=FasterLookUpDataHolder.getInstance().getIaasProviders();
  IaasConfig[] iaasConfigs=config.getIaasConfigs();
  if (iaasConfigs != null) {
    for (    IaasConfig iaasConfig : iaasConfigs) {
      if (iaasConfig != null) {
        IaasProvider iaasProvider=null;
        if (iaases != null) {
          for (          IaasProvider iaas : iaases) {
            if (iaas.getType().equals(iaasConfig.getType())) {
              iaasProvider=new IaasProvider(iaas);
              break;
            }
          }
        }
        if (iaasProvider == null) {
          iaasProvider=new IaasProvider();
          iaasProvider.setType(iaasConfig.getType());
        }
        String className=iaasConfig.getClassName();
        if (className != null) {
          iaasProvider.setClassName(className);
        }
        String name=iaasConfig.getName();
        if (name != null) {
          iaasProvider.setName(name);
        }
        String identity=iaasConfig.getIdentity();
        if (identity != null) {
          iaasProvider.setIdentity(identity);
        }
        String credential=iaasConfig.getCredential();
        if (credential != null) {
          iaasProvider.setCredential(credential);
        }
        String provider=iaasConfig.getProvider();
        if (provider != null) {
          iaasProvider.setProvider(provider);
        }
        String imageId=iaasConfig.getImageId();
        if (imageId != null) {
          iaasProvider.setImage(imageId);
        }
        byte[] payload=iaasConfig.getPayload();
        if (payload != null) {
          iaasProvider.setPayload(payload);
        }
        org.apache.stratos.cloud.controller.pojo.Properties props1=config.getProperties();
        if (props1 != null) {
          for (          Property prop : props1.getProperties()) {
            iaasProvider.addProperty(prop.getName(),prop.getValue());
          }
        }
      }
    }
  }
  return cartridge;
}","@SuppressWarnings(""String_Node_Str"") public static Cartridge toCartridge(CartridgeConfig config){
  if (config == null) {
    return null;
  }
  Cartridge cartridge=new Cartridge();
  cartridge.setType(config.getType());
  cartridge.setDisplayName(config.getDisplayName());
  cartridge.setDescription(config.getDescription());
  cartridge.setHostName(config.getHostName());
  String[] deploymentDirs=config.getDeploymentDirs();
  if ((deploymentDirs != null) && (deploymentDirs.length > 0)) {
    cartridge.setDeploymentDirs(Arrays.asList(deploymentDirs));
  }
  cartridge.setProvider(config.getProvider());
  cartridge.setVersion(config.getVersion());
  cartridge.setBaseDir(config.getBaseDir());
  cartridge.setPortMappings(Arrays.asList(config.getPortMappings()));
  cartridge.setMultiTenant(config.isMultiTenant());
  cartridge.setDefaultAutoscalingPolicy(config.getDefaultAutoscalingPolicy());
  org.apache.stratos.cloud.controller.pojo.Properties props=config.getProperties();
  if (props != null) {
    for (    Property prop : props.getProperties()) {
      cartridge.addProperty(prop.getName(),prop.getValue());
    }
  }
  cartridge.setLbConfig(config.getLbConfig());
  List<IaasProvider> iaases=FasterLookUpDataHolder.getInstance().getIaasProviders();
  IaasConfig[] iaasConfigs=config.getIaasConfigs();
  if (iaasConfigs != null) {
    for (    IaasConfig iaasConfig : iaasConfigs) {
      if (iaasConfig != null) {
        IaasProvider iaasProvider=null;
        if (iaases != null) {
          for (          IaasProvider iaas : iaases) {
            if (iaas.getType().equals(iaasConfig.getType())) {
              iaasProvider=new IaasProvider(iaas);
              break;
            }
          }
        }
        if (iaasProvider == null) {
          iaasProvider=new IaasProvider();
          iaasProvider.setType(iaasConfig.getType());
        }
        String className=iaasConfig.getClassName();
        if (className != null) {
          iaasProvider.setClassName(className);
        }
        String name=iaasConfig.getName();
        if (name != null) {
          iaasProvider.setName(name);
        }
        String identity=iaasConfig.getIdentity();
        if (identity != null) {
          iaasProvider.setIdentity(identity);
        }
        String credential=iaasConfig.getCredential();
        if (credential != null) {
          iaasProvider.setCredential(credential);
        }
        String provider=iaasConfig.getProvider();
        if (provider != null) {
          iaasProvider.setProvider(provider);
        }
        String imageId=iaasConfig.getImageId();
        if (imageId != null) {
          iaasProvider.setImage(imageId);
        }
        byte[] payload=iaasConfig.getPayload();
        if (payload != null) {
          iaasProvider.setPayload(payload);
        }
        org.apache.stratos.cloud.controller.pojo.Properties props1=config.getProperties();
        if (props1 != null) {
          for (          Property prop : props1.getProperties()) {
            iaasProvider.addProperty(prop.getName(),prop.getValue());
          }
        }
      }
    }
  }
  return cartridge;
}",0.9947089947089948
116792,"/** 
 * Handle http post request. Return String
 * @param resourcePath This should be REST endpoint
 * @param jsonParamString The json string which should be executed from the post request
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public String doPost(String resourcePath,String jsonParamString,String userName,String passWord) throws Exception ;","/** 
 * Handle http post request. Return String
 * @param resourcePath This should be REST endpoint
 * @param jsonParamString The json string which should be executed from the post request
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public HttpResponse doPost(String resourcePath,String jsonParamString,String userName,String passWord) throws Exception ;",0.9840425531914894
116793,"/** 
 * Handle http get request. Return String
 * @param resourcePath This should be REST endpoint
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public String doGet(String resourcePath,String userName,String passWord);","/** 
 * Handle http get request. Return String
 * @param resourcePath This should be REST endpoint
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public HttpResponse doGet(String resourcePath,String userName,String passWord);",0.9791666666666666
116794,"/** 
 * Handle http post request. Return String
 * @param resourcePath This should be REST endpoint
 * @param jsonParamString The json string which should be executed from the post request
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public String doPost(String resourcePath,String jsonParamString,String userName,String passWord) throws Exception {
  try {
    DefaultHttpClient httpClient=new DefaultHttpClient();
    HttpPost postRequest=new HttpPost(resourcePath);
    StringEntity input=new StringEntity(jsonParamString);
    input.setContentType(""String_Node_Str"");
    postRequest.setEntity(input);
    String userPass=userName + ""String_Node_Str"" + passWord;
    String basicAuth=""String_Node_Str"" + javax.xml.bind.DatatypeConverter.printBase64Binary(userPass.getBytes(""String_Node_Str""));
    postRequest.addHeader(""String_Node_Str"",basicAuth);
    httpClient=(DefaultHttpClient)WebClientWrapper.wrapClient(httpClient);
    HttpResponse response=httpClient.execute(postRequest);
    int responseCode=response.getStatusLine().getStatusCode();
    if (responseCode == CliConstants.RESPONSE_AUTHORIZATION_FAIL) {
      return ""String_Node_Str"" + CliConstants.RESPONSE_AUTHORIZATION_FAIL;
    }
 else     if (responseCode == CliConstants.RESPONSE_NO_CONTENT) {
      return ""String_Node_Str"" + CliConstants.RESPONSE_NO_CONTENT;
    }
 else     if (responseCode == CliConstants.RESPONSE_INTERNAL_SERVER_ERROR) {
      return ""String_Node_Str"" + CliConstants.RESPONSE_INTERNAL_SERVER_ERROR;
    }
 else     if (response.getStatusLine().getStatusCode() != 200) {
      throw new RuntimeException(""String_Node_Str"" + response.getStatusLine().getStatusCode());
    }
    BufferedReader br=new BufferedReader(new InputStreamReader((response.getEntity().getContent())));
    String output;
    String result=""String_Node_Str"";
    while ((output=br.readLine()) != null) {
      result+=output;
    }
    httpClient.getConnectionManager().shutdown();
    return result;
  }
 catch (  ClientProtocolException e) {
    throw new ClientProtocolException();
  }
catch (  ConnectException e) {
    throw new ConnectException();
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Handle http post request. Return String
 * @param resourcePath This should be REST endpoint
 * @param jsonParamString The json string which should be executed from the post request
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public HttpResponse doPost(String resourcePath,String jsonParamString,String userName,String passWord) throws Exception {
  try {
    DefaultHttpClient httpClient=new DefaultHttpClient();
    HttpPost postRequest=new HttpPost(resourcePath);
    StringEntity input=new StringEntity(jsonParamString);
    input.setContentType(""String_Node_Str"");
    postRequest.setEntity(input);
    String userPass=userName + ""String_Node_Str"" + passWord;
    String basicAuth=""String_Node_Str"" + javax.xml.bind.DatatypeConverter.printBase64Binary(userPass.getBytes(""String_Node_Str""));
    postRequest.addHeader(""String_Node_Str"",basicAuth);
    httpClient=(DefaultHttpClient)WebClientWrapper.wrapClient(httpClient);
    HttpResponse response=httpClient.execute(postRequest);
    httpClient.getConnectionManager().shutdown();
    return response;
  }
 catch (  ClientProtocolException e) {
    throw new ClientProtocolException();
  }
catch (  ConnectException e) {
    throw new ConnectException();
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}",0.7344228804902962
116795,"/** 
 * Handle http get request. Return String
 * @param resourcePath This should be REST endpoint
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public String doGet(String resourcePath,String userName,String passWord){
  try {
    DefaultHttpClient httpClient=new DefaultHttpClient();
    HttpGet getRequest=new HttpGet(resourcePath);
    getRequest.addHeader(""String_Node_Str"",""String_Node_Str"");
    String userPass=userName + ""String_Node_Str"" + passWord;
    String basicAuth=""String_Node_Str"" + javax.xml.bind.DatatypeConverter.printBase64Binary(userPass.getBytes(""String_Node_Str""));
    getRequest.addHeader(""String_Node_Str"",basicAuth);
    httpClient=(DefaultHttpClient)WebClientWrapper.wrapClient(httpClient);
    HttpResponse response=httpClient.execute(getRequest);
    if (response.getStatusLine().getStatusCode() != 200) {
      throw new RuntimeException(""String_Node_Str"" + response.getStatusLine().getStatusCode());
    }
    BufferedReader br=new BufferedReader(new InputStreamReader((response.getEntity().getContent())));
    String output;
    String result=""String_Node_Str"";
    while ((output=br.readLine()) != null) {
      result+=output;
    }
    httpClient.getConnectionManager().shutdown();
    return result;
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}","/** 
 * Handle http get request. Return String
 * @param resourcePath This should be REST endpoint
 * @param userName User name for basic auth
 * @param passWord Password for basic auth
 * @return The status of the executed request
 * @throws org.apache.http.client.ClientProtocolException and IOExceptionif any errors occur when executing the request
 */
public HttpResponse doGet(String resourcePath,String userName,String passWord){
  try {
    DefaultHttpClient httpClient=new DefaultHttpClient();
    HttpGet getRequest=new HttpGet(resourcePath);
    getRequest.addHeader(""String_Node_Str"",""String_Node_Str"");
    String userPass=userName + ""String_Node_Str"" + passWord;
    String basicAuth=""String_Node_Str"" + javax.xml.bind.DatatypeConverter.printBase64Binary(userPass.getBytes(""String_Node_Str""));
    getRequest.addHeader(""String_Node_Str"",basicAuth);
    httpClient=(DefaultHttpClient)WebClientWrapper.wrapClient(httpClient);
    HttpResponse response=httpClient.execute(getRequest);
    httpClient.getConnectionManager().shutdown();
    return response;
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
}",0.8119718309859155
116796,"public NetworkPartitionContext getNetworkPartition(String partitionGroupId){
  return networkPartitionContexts.get(partitionGroupId);
}","public NetworkPartitionContext getNetworkPartition(String networkPartitionId){
  return this.networkPartitionContexts.get(networkPartitionId);
}",0.8817204301075269
116797,"public void delegateSpawn(PartitionContext partitionContext,String clusterId){
  try {
    String nwPartitionId=partitionContext.getNetworkPartitionId();
    NetworkPartitionContext ctxt=PartitionManager.getInstance().getNetworkPartition(nwPartitionId);
    Properties props=partitionContext.getProperties();
    String value=(String)props.get(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    String lbClusterId;
    if (value.equals(org.apache.stratos.messaging.util.Constants.DEFAULT_LOAD_BALANCER)) {
      lbClusterId=ctxt.getDefaultLbClusterId();
    }
 else     if (value.equals(org.apache.stratos.messaging.util.Constants.SERVICE_AWARE_LOAD_BALANCER)) {
      String serviceName=partitionContext.getServiceName();
      lbClusterId=ctxt.getLBClusterIdOfService(serviceName);
    }
    MemberContext memberContext=CloudControllerClient.getInstance().spawnAnInstance(partitionContext.getPartition(),clusterId,lbClusterId);
    if (memberContext != null) {
      partitionContext.addPendingMember(memberContext);
    }
  }
 catch (  Throwable e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new RuntimeException(message,e);
  }
}","public void delegateSpawn(PartitionContext partitionContext,String clusterId){
  try {
    String nwPartitionId=partitionContext.getNetworkPartitionId();
    NetworkPartitionContext ctxt=PartitionManager.getInstance().getNetworkPartition(nwPartitionId);
    Properties props=partitionContext.getProperties();
    String value=(String)props.get(org.apache.stratos.messaging.util.Constants.LOAD_BALANCER_REF);
    String lbClusterId=null;
    if (value.equals(org.apache.stratos.messaging.util.Constants.DEFAULT_LOAD_BALANCER)) {
      lbClusterId=ctxt.getDefaultLbClusterId();
    }
 else     if (value.equals(org.apache.stratos.messaging.util.Constants.SERVICE_AWARE_LOAD_BALANCER)) {
      String serviceName=partitionContext.getServiceName();
      lbClusterId=ctxt.getLBClusterIdOfService(serviceName);
    }
    MemberContext memberContext=CloudControllerClient.getInstance().spawnAnInstance(partitionContext.getPartition(),clusterId,lbClusterId);
    if (memberContext != null) {
      partitionContext.addPendingMember(memberContext);
    }
  }
 catch (  Throwable e) {
    String message=""String_Node_Str"";
    log.error(message,e);
    throw new RuntimeException(message,e);
  }
}",0.9978911851539436
116798,"private void doProcessing(Message message){
  String messageType=null;
  try {
    messageType=message.getStringProperty(Constants.EVENT_CLASS_NAME);
  }
 catch (  JMSException e) {
    log.error(""String_Node_Str"" + message.getClass().toString(),e);
    return;
  }
  log.info(""String_Node_Str"" + messageType);
  if (ClusterRemovedEvent.class.getName().equals(messageType)) {
    log.info(""String_Node_Str"" + messageType);
    ClusterRemovedEvent event=getClusterRemovedEvent(message);
    CartridgeSubscriptionInfo cartridgeSubscriptionInfo=getCartridgeSubscriptionInfo(event.getClusterId());
    if (cartridgeSubscriptionInfo != null) {
      Cluster cluster=TopologyManager.getTopology().getService(cartridgeSubscriptionInfo.getCartridge()).getCluster(event.getClusterId());
      TopologyClusterInformationModel.getInstance().addCluster(cartridgeSubscriptionInfo.getTenantId(),cartridgeSubscriptionInfo.getCartridge(),cartridgeSubscriptionInfo.getAlias(),cluster);
    }
  }
}","private void doProcessing(Message message){
  String messageType=null;
  try {
    messageType=message.getStringProperty(Constants.EVENT_CLASS_NAME);
  }
 catch (  JMSException e) {
    log.error(""String_Node_Str"" + message.getClass().toString(),e);
    return;
  }
  log.info(""String_Node_Str"" + messageType);
  if (ClusterRemovedEvent.class.getName().equals(messageType)) {
    log.info(""String_Node_Str"" + messageType);
    ClusterRemovedEvent event=getClusterRemovedEvent(message);
    CartridgeSubscriptionInfo cartridgeSubscriptionInfo=getCartridgeSubscriptionInfo(event.getClusterId());
    if (cartridgeSubscriptionInfo != null) {
      TopologyClusterInformationModel.getInstance().removeCluster(cartridgeSubscriptionInfo.getTenantId(),cartridgeSubscriptionInfo.getCartridge(),cartridgeSubscriptionInfo.getAlias());
    }
  }
}",0.7874449339207048
116799,"public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException {
  if (cartridgeConfig == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  Cartridge cartridge=null;
  try {
    cartridge=CloudControllerUtil.toCartridge(cartridgeConfig);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType();
    log.error(msg,e);
    throw new InvalidCartridgeDefinitionException(msg,e);
  }
  for (  IaasProvider iaasProvider : cartridge.getIaases()) {
    try {
      Iaas iaas=(Iaas)Class.forName(iaasProvider.getClassName()).newInstance();
      iaas.buildComputeServiceAndTemplate(iaasProvider);
      iaasProvider.setIaas(iaas);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + ""String_Node_Str"" + iaasProvider.getType();
      log.error(msg,e);
      throw new InvalidIaasProviderException(msg,e);
    }
  }
  dataHolder.addCartridge(cartridge);
  List<Cartridge> cartridgeList=new ArrayList<Cartridge>();
  cartridgeList.add(cartridge);
  TopologyBuilder.handleServiceCreated(cartridgeList);
  log.info(""String_Node_Str"" + cartridge.getType());
}","public void deployCartridgeDefinition(CartridgeConfig cartridgeConfig) throws InvalidCartridgeDefinitionException, InvalidIaasProviderException {
  if (cartridgeConfig == null) {
    String msg=""String_Node_Str"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + cartridgeConfig.toString());
  }
  Cartridge cartridge=null;
  try {
    cartridge=CloudControllerUtil.toCartridge(cartridgeConfig);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + cartridgeConfig.getType();
    log.error(msg,e);
    throw new InvalidCartridgeDefinitionException(msg,e);
  }
  for (  IaasProvider iaasProvider : cartridge.getIaases()) {
    try {
      Iaas iaas=(Iaas)Class.forName(iaasProvider.getClassName()).newInstance();
      iaas.buildComputeServiceAndTemplate(iaasProvider);
      iaasProvider.setIaas(iaas);
    }
 catch (    Exception e) {
      String msg=""String_Node_Str"" + ""String_Node_Str"" + iaasProvider.getType();
      log.error(msg,e);
      throw new InvalidIaasProviderException(msg,e);
    }
  }
  dataHolder.addCartridge(cartridge);
  List<Cartridge> cartridgeList=new ArrayList<Cartridge>();
  cartridgeList.add(cartridge);
  TopologyBuilder.handleServiceCreated(cartridgeList);
  log.info(""String_Node_Str"" + cartridge.getType());
}",0.962359332557237
116800,"private String getDeploymentDetails(){
  StringBuilder deploymentDetailBuilder=new StringBuilder();
  deploymentDetailBuilder.append(""String_Node_Str"" + baseDir);
  if (deploymentDirs.length > 0) {
    deploymentDetailBuilder.append(""String_Node_Str"");
    for (    String directory : deploymentDirs) {
      deploymentDetailBuilder.append(directory + ""String_Node_Str"");
    }
  }
  return deploymentDetailBuilder.toString();
}","private String getDeploymentDetails(){
  StringBuilder deploymentDetailBuilder=new StringBuilder();
  deploymentDetailBuilder.append(""String_Node_Str"" + baseDir);
  if (deploymentDirs != null) {
    if (deploymentDirs.length > 0) {
      deploymentDetailBuilder.append(""String_Node_Str"");
      for (      String directory : deploymentDirs) {
        deploymentDetailBuilder.append(directory + ""String_Node_Str"");
      }
    }
  }
  return deploymentDetailBuilder.toString();
}",0.9448123620309052
116801,"private String getPortMappingDetails(){
  StringBuilder portMappingDetailBuilder=new StringBuilder();
  if (portMappings.length > 0) {
    for (    PortMapping portMapping : portMappings) {
      portMappingDetailBuilder.append(portMapping.toString() + ""String_Node_Str"");
    }
  }
  return portMappingDetailBuilder.toString();
}","private String getPortMappingDetails(){
  StringBuilder portMappingDetailBuilder=new StringBuilder();
  if (portMappings != null) {
    if (portMappings.length > 0) {
      for (      PortMapping portMapping : portMappings) {
        portMappingDetailBuilder.append(portMapping.toString() + ""String_Node_Str"");
      }
    }
  }
  return portMappingDetailBuilder.toString();
}",0.9348441926345608
116802,"private String getIaasConfigDetails(){
  StringBuilder iaasConfigDetailBuilder=new StringBuilder();
  if (iaasConfigs.length > 0) {
    for (    IaasConfig iaasConfig : iaasConfigs) {
      iaasConfigDetailBuilder.append(iaasConfig.toString() + ""String_Node_Str"");
    }
  }
  return iaasConfigDetailBuilder.toString();
}","private String getIaasConfigDetails(){
  StringBuilder iaasConfigDetailBuilder=new StringBuilder();
  if (iaasConfigs != null) {
    if (iaasConfigs.length > 0) {
      for (      IaasConfig iaasConfig : iaasConfigs) {
        iaasConfigDetailBuilder.append(iaasConfig.toString() + ""String_Node_Str"");
      }
    }
  }
  return iaasConfigDetailBuilder.toString();
}",0.9199417758369725
116803,"public String toString(){
  return ""String_Node_Str"" + type + ""String_Node_Str""+ imageId+ ""String_Node_Str""+ maxInstanceLimit+ ""String_Node_Str""+ getIaasProperties()+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + type + ""String_Node_Str""+ name+ ""String_Node_Str""+ className+ ""String_Node_Str""+ imageId+ ""String_Node_Str""+ maxInstanceLimit+ ""String_Node_Str""+ provider+ ""String_Node_Str""+ identity+ ""String_Node_Str""+ credential+ ""String_Node_Str""+ getIaasProperties()+ ""String_Node_Str"";
}",0.722007722007722
116804,"public WSO2CEPStatsPublisher(){
  ip=System.getProperty(""String_Node_Str"");
  port=System.getProperty(""String_Node_Str"");
  String enabledStr=System.getProperty(""String_Node_Str"");
  if (StringUtils.isNotBlank(enabledStr)) {
    enabled=Boolean.getBoolean(enabledStr);
  }
  if (enabled) {
    init();
  }
}","public WSO2CEPStatsPublisher(){
  ip=System.getProperty(""String_Node_Str"");
  port=System.getProperty(""String_Node_Str"");
  enabled=Boolean.getBoolean(""String_Node_Str"");
  if (enabled) {
    init();
  }
}",0.62109375
116805,"@Override public void publish(Map<String,Integer> stats){
  if (!isEnabled()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  for (  Map.Entry<String,Integer> entry : stats.entrySet()) {
    Object[] payload=new Object[]{entry.getKey(),entry.getValue()};
    Event event=eventObject(null,null,payload,new HashMap<String,String>());
    try {
      asyncDataPublisher.publish(CALL_CENTER_DATA_STREAM,VERSION,event);
    }
 catch (    AgentException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  stats=null;
}","@Override public void publish(Map<String,Integer> stats){
  if (!isEnabled()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  for (  Map.Entry<String,Integer> entry : stats.entrySet()) {
    Object[] payload=new Object[]{entry.getKey(),entry.getValue()};
    Event event=eventObject(null,null,payload,new HashMap<String,String>());
    try {
      if (log.isInfoEnabled()) {
        log.info(String.format(""String_Node_Str"",CALL_CENTER_DATA_STREAM,VERSION,Arrays.toString(payload)));
      }
      asyncDataPublisher.publish(CALL_CENTER_DATA_STREAM,VERSION,event);
    }
 catch (    AgentException e) {
      log.error(""String_Node_Str"",e);
    }
  }
  stats=null;
}",0.8305647840531561
116806,"protected void activate(ComponentContext ctxt){
  try {
    SynapseEnvironmentService synEnvService=LoadBalancerContext.getInstance().getSynapseEnvironmentService(MultitenantConstants.SUPER_TENANT_ID);
    registerDeployer(LoadBalancerContext.getInstance().getAxisConfiguration(),synEnvService.getSynapseEnvironment());
    LoadBalancerConfiguration configuration=LoadBalancerConfiguration.getInstance();
    SynapseConfigurator.configure(configuration);
    if (configuration.isTopologyEventListenerEnabled()) {
      JndiConfigurator.configure(configuration);
      topologyReceiver=new LoadBalancerTopologyReceiver();
      Thread topologyReceiverThread=new Thread(topologyReceiver);
      topologyReceiverThread.start();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
      if (log.isInfoEnabled()) {
        if (ServiceFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String serviceName : ServiceFilter.getInstance().getIncludedServiceNames()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(serviceName);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
        if (ClusterFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String clusterId : ClusterFilter.getInstance().getIncludedClusterIds()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(clusterId);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
      }
    }
    if (configuration.isCepStatsPublisherEnabled()) {
      CEPConfigurator.configure(configuration);
    }
    activated=true;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}","protected void activate(ComponentContext ctxt){
  try {
    SynapseEnvironmentService synEnvService=LoadBalancerContext.getInstance().getSynapseEnvironmentService(MultitenantConstants.SUPER_TENANT_ID);
    registerDeployer(LoadBalancerContext.getInstance().getAxisConfiguration(),synEnvService.getSynapseEnvironment());
    LoadBalancerConfiguration configuration=LoadBalancerConfiguration.getInstance();
    SynapseConfigurator.configure(configuration);
    CEPConfigurator.configure(configuration);
    if (configuration.isTopologyEventListenerEnabled()) {
      JndiConfigurator.configure(configuration);
      topologyReceiver=new LoadBalancerTopologyReceiver();
      Thread topologyReceiverThread=new Thread(topologyReceiver);
      topologyReceiverThread.start();
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"");
      }
      if (log.isInfoEnabled()) {
        if (ServiceFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String serviceName : ServiceFilter.getInstance().getIncludedServiceNames()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(serviceName);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
        if (ClusterFilter.getInstance().isActive()) {
          StringBuilder sb=new StringBuilder();
          for (          String clusterId : ClusterFilter.getInstance().getIncludedClusterIds()) {
            if (sb.length() > 0) {
              sb.append(""String_Node_Str"");
            }
            sb.append(clusterId);
          }
          log.info(String.format(""String_Node_Str"",sb.toString()));
        }
      }
    }
    activated=true;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",e);
  }
}",0.3202276254526642
116807,"public Partition getNextScaleDownPartition(String clusterId){
  String policyId;
  int nextPartitionIndex;
  ClusterContext clusterContext=AutoscalerContext.getInstance().getClusterContext(clusterId);
  int currentPartitionIndex=clusterContext.getCurrentPartitionIndex();
  String serviceId=AutoscalerContext.getInstance().getClusterContext(clusterId).getServiceId();
  policyId=TopologyManager.getTopology().getService(serviceId).getCluster(clusterId).getAutoscalePolicyName();
  int noOfPartitions=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().size();
  if (currentPartitionIndex - 1 >= noOfPartitions) {
    nextPartitionIndex=0;
  }
 else {
    nextPartitionIndex=currentPartitionIndex--;
  }
  AutoscalerContext.getInstance().getClusterContext(clusterId).setCurrentPartitionIndex(nextPartitionIndex);
  Partition nextPartition=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().get(nextPartitionIndex);
  String nextPartitionId=nextPartition.getId();
  if (clusterContext.partitionCountExists(nextPartitionId) && (clusterContext.getPartitionCount(nextPartitionId) <= nextPartition.getPartitionMembersMin())) {
    nextPartition=getNextScaleDownPartition(clusterId);
  }
  return nextPartition;
}","public Partition getNextScaleDownPartition(String clusterId){
  String policyId;
  int previousPartitionIndex;
  ClusterContext clusterContext=AutoscalerContext.getInstance().getClusterContext(clusterId);
  int currentPartitionIndex=clusterContext.getCurrentPartitionIndex();
  String serviceId=AutoscalerContext.getInstance().getClusterContext(clusterId).getServiceId();
  policyId=TopologyManager.getTopology().getService(serviceId).getCluster(clusterId).getAutoscalePolicyName();
  int noOfPartitions=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().size();
  for (int i=0; i < noOfPartitions; i++) {
    if (currentPartitionIndex == 0) {
      previousPartitionIndex=noOfPartitions - 1;
    }
 else {
      previousPartitionIndex=currentPartitionIndex - 1;
    }
    AutoscalerContext.getInstance().getClusterContext(clusterId).setCurrentPartitionIndex(previousPartitionIndex);
    Partition previousPartition=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().get(previousPartitionIndex);
    String previousPartitionId=previousPartition.getId();
    if (clusterContext.partitionCountExists(previousPartitionId) && (clusterContext.getPartitionCount(previousPartitionId) > previousPartition.getPartitionMembersMin())) {
      return previousPartition;
    }
  }
  return null;
}",0.7785906815556412
116808,"public Partition getNextScaleUpPartition(String clusterId){
  String policyId;
  int nextPartitionIndex;
  ClusterContext clusterContext=AutoscalerContext.getInstance().getClusterContext(clusterId);
  int currentPartitionIndex=clusterContext.getCurrentPartitionIndex();
  String serviceId=AutoscalerContext.getInstance().getClusterContext(clusterId).getServiceId();
  policyId=TopologyManager.getTopology().getService(serviceId).getCluster(clusterId).getAutoscalePolicyName();
  int noOfPartitions=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().size();
  if (currentPartitionIndex + 1 >= noOfPartitions) {
    nextPartitionIndex=0;
  }
 else {
    nextPartitionIndex=currentPartitionIndex++;
  }
  AutoscalerContext.getInstance().getClusterContext(clusterId).setCurrentPartitionIndex(nextPartitionIndex);
  Partition nextPartition=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().get(nextPartitionIndex);
  String nextPartitionId=nextPartition.getId();
  if (clusterContext.partitionCountExists(nextPartitionId)) {
    if (clusterContext.getPartitionCount(nextPartitionId) >= nextPartition.getPartitionMembersMax()) {
      nextPartition=getNextScaleUpPartition(clusterId);
    }
  }
 else {
    AutoscalerContext.getInstance().getClusterContext(clusterId).addPartitionCount(nextPartitionId,1);
  }
  return nextPartition;
}","public Partition getNextScaleUpPartition(String clusterId){
  ClusterContext clusterContext=AutoscalerContext.getInstance().getClusterContext(clusterId);
  String serviceId=AutoscalerContext.getInstance().getClusterContext(clusterId).getServiceId();
  String policyId=TopologyManager.getTopology().getService(serviceId).getCluster(clusterId).getAutoscalePolicyName();
  int noOfPartitions=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().size();
  for (int i=0; i < noOfPartitions; i++) {
    int currentPartitionIndex=clusterContext.getCurrentPartitionIndex();
    Partition currentPartition=PolicyManager.getInstance().getPolicy(policyId).getHAPolicy().getPartitions().get(currentPartitionIndex);
    String currentPartitionId=currentPartition.getId();
    currentPartitionIndex=currentPartitionIndex + 1 == noOfPartitions ? 0 : currentPartitionIndex + 1;
    AutoscalerContext.getInstance().getClusterContext(clusterId).setCurrentPartitionIndex(currentPartitionIndex);
    if (clusterContext.getPartitionCount(currentPartitionId) < currentPartition.getPartitionMembersMax()) {
      AutoscalerContext.getInstance().getClusterContext(clusterId).addPartitionCount(currentPartitionId,1);
      return currentPartition;
    }
  }
  return null;
}",0.5981941309255079
116809,"private Partition getPartition(final OMNode item,Collection<Partition> partitions){
  Partition partition=null;
  String id=null;
  String type=null;
  if (item.getType() == OMNode.ELEMENT_NODE) {
    OMElement iaasElt=(OMElement)item;
    Iterator<?> it=iaasElt.getChildrenWithName(new QName(CloudControllerConstants.ID_ELEMENT));
    if (it.hasNext()) {
      OMElement providerElt=(OMElement)it.next();
      id=providerElt.getText();
    }
    if (it.hasNext()) {
      log.warn(xmlSource + ""String_Node_Str"" + CloudControllerConstants.ID_ELEMENT+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (id == null) {
      String msg=""String_Node_Str"" + CloudControllerConstants.ID_ELEMENT + ""String_Node_Str""+ ""String_Node_Str""+ xmlSource;
      handleException(msg);
    }
    Iterator<?> it1=iaasElt.getChildrenWithName(new QName(CloudControllerConstants.SCOPE_ELEMENT));
    if (it1.hasNext()) {
      OMElement providerElt=(OMElement)it1.next();
      type=providerElt.getText();
    }
    if (it1.hasNext()) {
      log.warn(xmlSource + ""String_Node_Str"" + CloudControllerConstants.SCOPE_ELEMENT+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (type == null) {
      String msg=""String_Node_Str"" + CloudControllerConstants.SCOPE_ELEMENT + ""String_Node_Str""+ ""String_Node_Str""+ xmlSource;
      handleException(msg);
    }
    if (partitions != null) {
      for (      Partition partition1 : partitions) {
        if (partition1.getId().equals(id)) {
          partition=partition1;
          break;
        }
      }
    }
    if (partition == null) {
      partition=new Partition();
      partition.setId(id);
      partition.setScope(type);
      loadProperties(iaasElt,partition.getProperties());
    }
 else {
      Partition partition1=new Partition();
      partition1.setId(id);
      partition1.setScope(type);
      loadProperties(iaasElt,partition1.getProperties());
      Gson gson=new Gson();
      String partitionS=gson.toJson(partition);
      String partition1S=gson.toJson(partition1);
      if (!partitionS.endsWith(partition1S)) {
        partition.setId(id);
        partition.setScope(type);
        loadProperties(iaasElt,partition.getProperties());
      }
    }
  }
  return partition;
}","private Partition getPartition(final OMNode item){
  Partition partition=null;
  Partition oldPartition=null;
  String id=null;
  String type=null;
  if (item.getType() == OMNode.ELEMENT_NODE) {
    OMElement iaasElt=(OMElement)item;
    Iterator<?> it=iaasElt.getChildrenWithName(new QName(CloudControllerConstants.ID_ELEMENT));
    if (it.hasNext()) {
      OMElement providerElt=(OMElement)it.next();
      id=providerElt.getText();
    }
    if (it.hasNext()) {
      log.warn(xmlSource + ""String_Node_Str"" + CloudControllerConstants.ID_ELEMENT+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (id == null) {
      String msg=""String_Node_Str"" + CloudControllerConstants.ID_ELEMENT + ""String_Node_Str""+ ""String_Node_Str""+ xmlSource;
      handleException(msg);
    }
    oldPartition=TopologyManager.getInstance().getTopology().getPartition(id);
    Iterator<?> it1=iaasElt.getChildrenWithName(new QName(CloudControllerConstants.SCOPE_ELEMENT));
    if (it1.hasNext()) {
      OMElement providerElt=(OMElement)it1.next();
      type=providerElt.getText();
    }
    if (it1.hasNext()) {
      log.warn(xmlSource + ""String_Node_Str"" + CloudControllerConstants.SCOPE_ELEMENT+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (type == null) {
      String msg=""String_Node_Str"" + CloudControllerConstants.SCOPE_ELEMENT + ""String_Node_Str""+ ""String_Node_Str""+ xmlSource;
      handleException(msg);
    }
    if (oldPartition != null) {
      if (oldPartition.getId().equals(id)) {
        partition=oldPartition;
      }
    }
    if (partition == null) {
      partition=new Partition();
      partition.setId(id);
      partition.setScope(type);
      loadProperties(iaasElt,partition.getProperties());
      TopologyBuilder.handlePartitionCreated(partition);
    }
 else {
      Partition partition1=new Partition();
      partition1.setId(id);
      partition1.setScope(type);
      loadProperties(iaasElt,partition1.getProperties());
      Gson gson=new Gson();
      String partitionS=gson.toJson(partition);
      String partition1S=gson.toJson(partition1);
      if (!partitionS.endsWith(partition1S)) {
        partition.setId(id);
        partition.setScope(type);
        loadProperties(iaasElt,partition.getProperties());
        TopologyBuilder.handlePartitionUpdated(partition,oldPartition);
      }
    }
  }
  return partition;
}",0.6079930115745796
116810,"public void setPartitionsList(){
  Collection<Partition> partitions=TopologyManager.getInstance().getTopology().getPartitions();
  List<OMNode> nodeList=getMatchingNodes(CloudControllerConstants.PARTITION_XPATH);
  if (nodeList == null || nodeList.isEmpty()) {
    return;
  }
  for (  OMNode node : nodeList) {
    partitions.add(getPartition(node,partitions));
  }
}","public void setPartitionsList(){
  Set<String> partitionIds=TopologyManager.getInstance().getTopology().getPartitionMap().keySet();
  List<String> ids=new ArrayList<String>();
  List<OMNode> nodeList=getMatchingNodes(CloudControllerConstants.PARTITION_XPATH);
  if (nodeList == null || nodeList.isEmpty()) {
    return;
  }
  for (  OMNode node : nodeList) {
    ids.add(getPartition(node).getId());
  }
  boolean isFound;
  for (  String parId : partitionIds) {
    isFound=false;
    for (    String id : ids) {
      if (parId.equals(id)) {
        isFound=true;
        break;
      }
    }
    if (!isFound) {
      TopologyBuilder.handlePartitionRemoved(TopologyManager.getInstance().getTopology().getPartition(parId));
    }
  }
}",0.5936651583710407
116811,"@Override public String startInstance(String clusterId,LocationScope locationScope){
  ComputeService computeService;
  Template template;
  String ip;
  String cloud=locationScope.getCloud();
  String region=locationScope.getRegion();
  final Lock lock=new ReentrantLock();
  log.info(""String_Node_Str"" + clusterId);
  ServiceContext serviceCtxt=dataHolder.getServiceContextFromDomain(clusterId);
  if (serviceCtxt == null) {
    String msg=""String_Node_Str"" + clusterId;
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  serviceCtxt.setCartridge(loadCartridge(serviceCtxt.getCartridgeType(),dataHolder.getCartridges()));
  if (serviceCtxt.getCartridge() == null) {
    String msg=""String_Node_Str"" + clusterId;
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  if (serviceCtxt.getCartridge().getIaases().isEmpty()) {
    String msg=""String_Node_Str"" + serviceCtxt.getCartridge().getType();
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  for (  IaasProvider iaas : serviceCtxt.getCartridge().getIaases()) {
    if (cloud == null) {
      String msg=""String_Node_Str"" + clusterId + ""String_Node_Str"";
      log.fatal(msg);
      throw new CloudControllerException(msg);
    }
    if (region == null) {
      log.info(""String_Node_Str"");
    }
    if (iaas.getType().equals(cloud)) {
      IaasContext ctxt;
      if ((ctxt=serviceCtxt.getIaasContext(iaas.getType())) == null) {
        ctxt=serviceCtxt.addIaasContext(iaas.getType());
      }
      try {
        String memberID=generateMemberId(clusterId);
        serviceCtxt.getPayload().append(""String_Node_Str"");
        serviceCtxt.getPayload().append(""String_Node_Str"" + memberID);
        reloadPayload(serviceCtxt.getCartridge(),serviceCtxt.generatePayload());
        iaas.getIaas().setDynamicPayload(iaas);
        computeService=iaas.getComputeService();
        template=iaas.getTemplate();
        if (template == null) {
          String msg=""String_Node_Str"" + iaas.getType() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
          log.error(msg);
          continue;
        }
        String str=clusterId.substring(0,10);
        String group=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
        NodeMetadata node;
        Set<? extends NodeMetadata> nodes=computeService.createNodesInGroup(group,1,template);
        node=nodes.iterator().next();
        String autoAssignIpProp=iaas.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP_PROPERTY);
        lock.lock();
        try {
          ip=""String_Node_Str"";
          if (autoAssignIpProp == null || (autoAssignIpProp != null && autoAssignIpProp.equals(""String_Node_Str""))) {
            ip=iaas.getIaas().associateAddress(iaas,node);
          }
          if (ip.isEmpty() && node.getPublicAddresses() != null && node.getPublicAddresses().iterator().hasNext()) {
            ip=node.getPublicAddresses().iterator().next();
          }
          String privateIp=null;
          if (node.getPrivateAddresses() != null && node.getPrivateAddresses().iterator().hasNext()) {
            privateIp=node.getPrivateAddresses().iterator().next();
          }
          log.info(""String_Node_Str"" + privateIp);
          if (ip.isEmpty() && node.getPrivateAddresses() != null && node.getPrivateAddresses().iterator().hasNext()) {
            ip=node.getPrivateAddresses().iterator().next();
          }
          if (node.getId() == null) {
            String msg=""String_Node_Str"" + node.toString();
            log.fatal(msg);
            throw new CloudControllerException(msg);
          }
          ctxt.addNodeId(node.getId());
          ctxt.addNodeToPublicIp(node.getId(),ip);
          dataHolder.addNodeId(node.getId(),serviceCtxt);
          serviceCtxt.getCartridge().setLastlyUsedIaas(iaas);
          appendToPublicIpProperty(ip,serviceCtxt);
          dataHolder.updateActiveInstanceCount(iaas.getType(),1);
          persist();
          TopologyBuilder.handleMemberSpawned(memberID,serviceCtxt.getCartridgeType(),clusterId,node.getId(),locationScope,privateIp);
          CartridgeInstanceDataPublisherTask.publish();
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + node.toString() + ""String_Node_Str"");
          }
          log.info(""String_Node_Str"" + iaas.getType() + ""String_Node_Str""+ ip+ ""String_Node_Str""+ node.getId());
          return ip;
        }
  finally {
          lock.unlock();
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + iaas.getType() + ""String_Node_Str"",e);
      }
    }
 else {
      if (region != null) {
        log.error(""String_Node_Str"" + cloud + ""String_Node_Str""+ region+ ""String_Node_Str""+ clusterId);
      }
    }
  }
  return null;
}","@Override() public String startInstance(String clusterId,LocationScope locationScope){
  ComputeService computeService;
  Template template;
  String ip;
  String cloud=locationScope.getCloud();
  String region=locationScope.getRegion();
  final Lock lock=new ReentrantLock();
  log.info(""String_Node_Str"" + clusterId);
  ServiceContext serviceCtxt=dataHolder.getServiceContextFromDomain(clusterId);
  if (serviceCtxt == null) {
    String msg=""String_Node_Str"" + clusterId;
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  serviceCtxt.setCartridge(loadCartridge(serviceCtxt.getCartridgeType(),dataHolder.getCartridges()));
  if (serviceCtxt.getCartridge() == null) {
    String msg=""String_Node_Str"" + clusterId;
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  if (serviceCtxt.getCartridge().getIaases().isEmpty()) {
    String msg=""String_Node_Str"" + serviceCtxt.getCartridge().getType();
    log.fatal(msg);
    throw new CloudControllerException(msg);
  }
  for (  IaasProvider iaas : serviceCtxt.getCartridge().getIaases()) {
    if (cloud == null) {
      String msg=""String_Node_Str"" + clusterId + ""String_Node_Str"";
      log.fatal(msg);
      throw new CloudControllerException(msg);
    }
    if (region == null) {
      log.info(""String_Node_Str"");
    }
    if (iaas.getType().equals(cloud)) {
      IaasContext ctxt;
      if ((ctxt=serviceCtxt.getIaasContext(iaas.getType())) == null) {
        ctxt=serviceCtxt.addIaasContext(iaas.getType());
      }
      try {
        String memberID=generateMemberId(clusterId);
        serviceCtxt.getPayload().append(""String_Node_Str"");
        serviceCtxt.getPayload().append(""String_Node_Str"" + memberID);
        reloadPayload(serviceCtxt.getCartridge(),serviceCtxt.generatePayload());
        iaas.getIaas().setDynamicPayload(iaas);
        computeService=iaas.getComputeService();
        template=iaas.getTemplate();
        if (template == null) {
          String msg=""String_Node_Str"" + iaas.getType() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
          log.error(msg);
          continue;
        }
        String str=clusterId.substring(0,10);
        String group=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
        NodeMetadata node;
        Set<? extends NodeMetadata> nodes=computeService.createNodesInGroup(group,1,template);
        node=nodes.iterator().next();
        String autoAssignIpProp=iaas.getProperty(CloudControllerConstants.AUTO_ASSIGN_IP_PROPERTY);
        lock.lock();
        try {
          ip=""String_Node_Str"";
          if (autoAssignIpProp == null || (autoAssignIpProp != null && autoAssignIpProp.equals(""String_Node_Str""))) {
            ip=iaas.getIaas().associateAddress(iaas,node);
          }
          if (ip.isEmpty() && node.getPublicAddresses() != null && node.getPublicAddresses().iterator().hasNext()) {
            ip=node.getPublicAddresses().iterator().next();
          }
          String privateIp=null;
          if (node.getPrivateAddresses() != null && node.getPrivateAddresses().iterator().hasNext()) {
            privateIp=node.getPrivateAddresses().iterator().next();
          }
          log.info(""String_Node_Str"" + privateIp);
          if (ip.isEmpty() && node.getPrivateAddresses() != null && node.getPrivateAddresses().iterator().hasNext()) {
            ip=node.getPrivateAddresses().iterator().next();
          }
          if (node.getId() == null) {
            String msg=""String_Node_Str"" + node.toString();
            log.fatal(msg);
            throw new CloudControllerException(msg);
          }
          ctxt.addNodeId(node.getId());
          ctxt.addNodeToPublicIp(node.getId(),ip);
          dataHolder.addNodeId(node.getId(),serviceCtxt);
          serviceCtxt.getCartridge().setLastlyUsedIaas(iaas);
          appendToPublicIpProperty(ip,serviceCtxt);
          dataHolder.updateActiveInstanceCount(iaas.getType(),1);
          persist();
          TopologyBuilder.handleMemberSpawned(memberID,serviceCtxt.getCartridgeType(),clusterId,node.getId(),locationScope,privateIp);
          CartridgeInstanceDataPublisherTask.publish();
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + node.toString() + ""String_Node_Str"");
          }
          log.info(""String_Node_Str"" + iaas.getType() + ""String_Node_Str""+ ip+ ""String_Node_Str""+ node.getId());
          return ip;
        }
  finally {
          lock.unlock();
        }
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + iaas.getType() + ""String_Node_Str"",e);
      }
    }
 else {
      if (region != null) {
        log.error(""String_Node_Str"" + cloud + ""String_Node_Str""+ region+ ""String_Node_Str""+ clusterId);
      }
    }
  }
  return null;
}",0.999790004199916
116812,"public static void handlePartitionCreated(Partition partition){
  Topology topology=TopologyManager.getInstance().getTopology();
  if (partition == null) {
    throw new RuntimeException(String.format(""String_Node_Str""));
  }
  try {
    TopologyManager.getInstance().acquireWriteLock();
    topology.addPartition(partition);
  }
  finally {
    TopologyManager.getInstance().releaseWriteLock();
  }
  TopologyEventSender.sendPartitionCreatedEvent(partition);
}","public static void handlePartitionCreated(Partition partition){
  Topology topology=TopologyManager.getInstance().getTopology();
  if (partition == null) {
    throw new RuntimeException(String.format(""String_Node_Str""));
  }
  try {
    TopologyManager.getInstance().acquireWriteLock();
    topology.addPartition(partition);
    TopologyManager.getInstance().updateTopology(topology);
  }
  finally {
    TopologyManager.getInstance().releaseWriteLock();
  }
  TopologyEventSender.sendPartitionCreatedEvent(partition);
}",0.9389002036659878
116813,"public static void handlePartitionRemoved(Partition partition){
  Topology topology=TopologyManager.getInstance().getTopology();
  if (partition == null) {
    throw new RuntimeException(String.format(""String_Node_Str""));
  }
  try {
    TopologyManager.getInstance().acquireWriteLock();
    topology.removePartition(partition);
  }
  finally {
    TopologyManager.getInstance().releaseWriteLock();
  }
  TopologyEventSender.sendPartitionRemovedEvent(partition);
}","public static void handlePartitionRemoved(Partition partition){
  Topology topology=TopologyManager.getInstance().getTopology();
  if (partition == null) {
    throw new RuntimeException(String.format(""String_Node_Str""));
  }
  try {
    TopologyManager.getInstance().acquireWriteLock();
    topology.removePartition(partition);
    TopologyManager.getInstance().updateTopology(topology);
  }
  finally {
    TopologyManager.getInstance().releaseWriteLock();
  }
  TopologyEventSender.sendPartitionRemovedEvent(partition);
}",0.9392712550607288
116814,"public static void handlePartitionUpdated(Partition newPartition,Partition oldPartition){
  Topology topology=TopologyManager.getInstance().getTopology();
  if (newPartition == null || oldPartition == null) {
    throw new RuntimeException(String.format(""String_Node_Str""));
  }
  try {
    TopologyManager.getInstance().acquireWriteLock();
    topology.removePartition(oldPartition);
    topology.addPartition(newPartition);
  }
  finally {
    TopologyManager.getInstance().releaseWriteLock();
  }
  TopologyEventSender.sendPartitionUpdatedEvent(newPartition,oldPartition.getId());
}","public static void handlePartitionUpdated(Partition newPartition,Partition oldPartition){
  Topology topology=TopologyManager.getInstance().getTopology();
  if (newPartition == null || oldPartition == null) {
    throw new RuntimeException(String.format(""String_Node_Str""));
  }
  try {
    TopologyManager.getInstance().acquireWriteLock();
    topology.removePartition(oldPartition);
    topology.addPartition(newPartition);
    TopologyManager.getInstance().updateTopology(topology);
  }
  finally {
    TopologyManager.getInstance().releaseWriteLock();
  }
  TopologyEventSender.sendPartitionUpdatedEvent(newPartition,oldPartition.getId());
}",0.951219512195122
116815,"/** 
 * Add the user defined payload String (if any). This should be of the format <key_1>=<value_1>,<key_2>=<value_2>,....<key_n>=<value_n>
 * @param payloadString String object with payload information
 */
public void populatePayload(String payloadString){
  if (payloadBuilder.toString().isEmpty()) {
    if (payloadString.startsWith(""String_Node_Str"")) {
      payloadBuilder.append(payloadString.substring(1));
    }
  }
 else {
    if (!payloadBuilder.toString().endsWith(""String_Node_Str"") && !payloadString.startsWith(""String_Node_Str"")) {
      payloadBuilder.append(""String_Node_Str"");
      payloadBuilder.append(payloadString);
    }
 else     if (payloadBuilder.toString().endsWith(""String_Node_Str"") && payloadString.startsWith(""String_Node_Str"")) {
      payloadBuilder.append(payloadString.substring(1));
    }
 else {
      payloadBuilder.append(payloadString);
    }
  }
}","/** 
 * Add the user defined payload String (if any). This should be of the format <key_1>=<value_1>,<key_2>=<value_2>,....<key_n>=<value_n>
 * @param payloadString String object with payload information
 */
public void populatePayload(String payloadString){
  if (payloadBuilder.toString().isEmpty()) {
    if (payloadString.startsWith(""String_Node_Str"")) {
      payloadBuilder.append(payloadString.substring(1));
    }
 else {
      payloadBuilder.append(payloadString);
    }
  }
 else {
    if (!payloadBuilder.toString().endsWith(""String_Node_Str"") && !payloadString.startsWith(""String_Node_Str"")) {
      payloadBuilder.append(""String_Node_Str"");
      payloadBuilder.append(payloadString);
    }
 else     if (payloadBuilder.toString().endsWith(""String_Node_Str"") && payloadString.startsWith(""String_Node_Str"")) {
      payloadBuilder.append(payloadString.substring(1));
    }
 else {
      payloadBuilder.append(payloadString);
    }
  }
}",0.9684439608269858
116816,"public void listAvailableCartridges() throws CommandException {
  try {
    Cartridge[] multiTenantCatridges=stub.getAvailableCartridges(true);
    if (multiTenantCatridges == null) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
    }
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      @Override public String[] getData(      Cartridge cartridge){
        String[] data=new String[3];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        return data;
      }
    }
;
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(multiTenantCatridges,cartridgeMapper,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    System.out.println();
    Cartridge[] singleTenantCatridges=stub.getAvailableCartridges(false);
    if (multiTenantCatridges == null) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(singleTenantCatridges,cartridgeMapper,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    System.out.println();
  }
 catch (  ApplicationManagementServiceADCExceptionException e) {
    handleException(""String_Node_Str"",e);
  }
catch (  RemoteException e) {
    handleException(e);
  }
}","public void listAvailableCartridges() throws CommandException {
  try {
    Cartridge[] multiTenantCatridges=stub.getAvailableCartridges(true);
    if (multiTenantCatridges == null) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
    }
    RowMapper<Cartridge> cartridgeMapper=new RowMapper<Cartridge>(){
      @Override public String[] getData(      Cartridge cartridge){
        String[] data=new String[3];
        data[0]=cartridge.getCartridgeType();
        data[1]=cartridge.getDisplayName();
        data[2]=cartridge.getVersion();
        return data;
      }
    }
;
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(multiTenantCatridges,cartridgeMapper,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    System.out.println();
    Cartridge[] singleTenantCatridges=stub.getAvailableCartridges(false);
    if (singleTenantCatridges == null) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      System.out.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    CommandLineUtils.printTable(singleTenantCatridges,cartridgeMapper,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    System.out.println();
  }
 catch (  ApplicationManagementServiceADCExceptionException e) {
    handleException(""String_Node_Str"",e);
  }
catch (  RemoteException e) {
    handleException(e);
  }
}",0.9962749746020996
116817,"public String getUsagePlanName(String tenantDomain) throws Exception {
  Subscription subscription;
  try {
    subscription=stub.getActiveSubscriptionOfCustomerByTenant();
    if (subscription != null) {
      return subscription.getSubscriptionPlan();
    }
 else {
      return ""String_Node_Str"";
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + tenantDomain;
    log.error(msg,e);
    throw new Exception(msg,e);
  }
}","public String getUsagePlanName(String tenantDomain) throws Exception {
  try {
    return ""String_Node_Str"";
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + tenantDomain;
    log.error(msg,e);
    throw new Exception(msg,e);
  }
}",0.6763425253991292
116818,"@Override public FrameLayout createView(LayerManager layerManager){
  this.layerManager=layerManager;
  LayoutInflater inflater=layerManager.getActivity().getLayoutInflater();
  view=(FrameLayout)inflater.inflate(R.layout.playback_control_layer,null);
  setupView();
  originalContainerLayoutParams=layerManager.getContainer().getLayoutParams();
  layerManager.getControl().addCallback(this);
  textColor=DEFAULT_TEXT_COLOR;
  chromeColor=DEFAULT_CHROME_COLOR;
  controlColor=DEFAULT_CONTROL_TINT_COLOR;
  seekbarColor=DEFAULT_TEXT_COLOR;
  if (logoDrawable != null) {
    logoImageView.setImageDrawable(logoDrawable);
  }
  getLayerManager().getContainer().setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isVisible) {
        hide();
      }
 else {
        show();
      }
    }
  }
);
  playbackControlRootView.setVisibility(View.INVISIBLE);
  return view;
}","@Override public FrameLayout createView(LayerManager layerManager){
  this.layerManager=layerManager;
  LayoutInflater inflater=layerManager.getActivity().getLayoutInflater();
  view=(FrameLayout)inflater.inflate(R.layout.playback_control_layer,null);
  setupView();
  originalContainerLayoutParams=layerManager.getContainer().getLayoutParams();
  layerManager.getControl().addCallback(this);
  savedOrientation=layerManager.getActivity().getResources().getConfiguration().orientation;
  textColor=DEFAULT_TEXT_COLOR;
  chromeColor=DEFAULT_CHROME_COLOR;
  controlColor=DEFAULT_CONTROL_TINT_COLOR;
  seekbarColor=DEFAULT_TEXT_COLOR;
  if (logoDrawable != null) {
    logoImageView.setImageDrawable(logoDrawable);
  }
  getLayerManager().getContainer().setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isVisible) {
        hide();
      }
 else {
        show();
      }
    }
  }
);
  playbackControlRootView.setVisibility(View.INVISIBLE);
  return view;
}",0.9518882565959648
116819,"/** 
 * Fullscreen mode will rotate to landscape mode, hide the action bar, hide the navigation bar, hide the system tray, and make the video player take up the full size of the display. The developer who is using this function must ensure the following: <p>1) Inside the android manifest, the activity that uses the video player has the attribute android:configChanges=""orientation"". <p>2) Other views in the activity (or fragment) are hidden (or made visible) when this method is called.
 */
public void doToggleFullscreen(){
  if (fullscreenCallback == null) {
    return;
  }
  PlayerControl playerControl=getLayerManager().getControl();
  if (playerControl == null) {
    return;
  }
  Activity activity=getLayerManager().getActivity();
  FrameLayout container=getLayerManager().getContainer();
  if (isFullscreen) {
    fullscreenCallback.onReturnFromFullscreen();
    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    activity.getWindow().getDecorView().setSystemUiVisibility(0);
    container.setLayoutParams(originalContainerLayoutParams);
    fullscreenButton.setImageResource(R.drawable.ic_action_full_screen);
    isFullscreen=false;
  }
 else {
    fullscreenCallback.onGoToFullscreen();
    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN);
    activity.getWindow().getDecorView().setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener(){
      @Override public void onSystemUiVisibilityChange(      int i){
        if ((i & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
          show();
        }
      }
    }
);
    container.setLayoutParams(Util.getLayoutParamsBasedOnParent(container,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
    fullscreenButton.setImageResource(R.drawable.ic_action_return_from_full_screen);
    isFullscreen=true;
  }
}","/** 
 * Fullscreen mode will rotate to landscape mode, hide the action bar, hide the navigation bar, hide the system tray, and make the video player take up the full size of the display. The developer who is using this function must ensure the following: <p>1) Inside the android manifest, the activity that uses the video player has the attribute android:configChanges=""orientation"". <p>2) Other views in the activity (or fragment) are hidden (or made visible) when this method is called.
 */
public void doToggleFullscreen(){
  if (fullscreenCallback == null) {
    return;
  }
  PlayerControl playerControl=getLayerManager().getControl();
  if (playerControl == null) {
    return;
  }
  Activity activity=getLayerManager().getActivity();
  FrameLayout container=getLayerManager().getContainer();
  if (isFullscreen) {
    fullscreenCallback.onReturnFromFullscreen();
    activity.setRequestedOrientation(savedOrientation);
    activity.getWindow().getDecorView().setSystemUiVisibility(0);
    container.setLayoutParams(originalContainerLayoutParams);
    fullscreenButton.setImageResource(R.drawable.ic_action_full_screen);
    isFullscreen=false;
  }
 else {
    fullscreenCallback.onGoToFullscreen();
    savedOrientation=activity.getResources().getConfiguration().orientation;
    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN);
    activity.getWindow().getDecorView().setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener(){
      @Override public void onSystemUiVisibilityChange(      int i){
        if ((i & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
          show();
        }
      }
    }
);
    container.setLayoutParams(Util.getLayoutParamsBasedOnParent(container,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
    fullscreenButton.setImageResource(R.drawable.ic_action_return_from_full_screen);
    isFullscreen=true;
  }
}",0.8095590046809559
116820,"/** 
 * When you are finished using this   {@link ImaPlayer}, make sure to call this method.
 */
public void release(){
  if (adPlayer != null) {
    adPlayer.release();
  }
  adsLoader.contentComplete();
  contentPlayer.release();
}","/** 
 * When you are finished using this   {@link ImaPlayer}, make sure to call this method.
 */
public void release(){
  if (adPlayer != null) {
    adPlayer.release();
    adPlayer=null;
  }
  if (adsManager != null) {
    adsManager.destroy();
    adsManager=null;
  }
  adsLoader.contentComplete();
  contentPlayer.release();
}",0.8262411347517731
116821,"/** 
 * Destroy the   {@link SimpleVideoPlayer} responsible for playing the ad and rmeove it.
 */
private void destroyAdPlayer(){
  if (adPlayerContainer != null) {
    container.removeView(adPlayerContainer);
  }
  if (adUiContainer != null) {
    container.removeView(adUiContainer);
  }
  if (adPlayer != null) {
    contentPlayer.setFullscreen(adPlayer.isFullscreen());
    adPlayer.release();
  }
  adPlayerContainer=null;
  adPlayer=null;
  setFullscreenCallback(fullscreenCallback);
}","/** 
 * Destroy the   {@link SimpleVideoPlayer} responsible for playing the ad and remove it.
 */
private void destroyAdPlayer(){
  if (adPlayerContainer != null) {
    container.removeView(adPlayerContainer);
  }
  if (adUiContainer != null) {
    container.removeView(adUiContainer);
  }
  if (adPlayer != null) {
    contentPlayer.setFullscreen(adPlayer.isFullscreen());
    adPlayer.release();
  }
  adPlayerContainer=null;
  adPlayer=null;
  setFullscreenCallback(fullscreenCallback);
}",0.9979633401221996
116822,"@Override public void onManifest(String contentId,MediaPresentationDescription manifest){
  Handler mainHandler=player.getMainHandler();
  LoadControl loadControl=new DefaultLoadControl(new BufferPool(BUFFER_SEGMENT_SIZE));
  DefaultBandwidthMeter bandwidthMeter=new DefaultBandwidthMeter(mainHandler,player);
  int maxDecodableFrameSize=MediaCodecUtil.maxH264DecodableFrameSize();
  ArrayList<Representation> audioRepresentationsList=new ArrayList<Representation>();
  ArrayList<Representation> videoRepresentationsList=new ArrayList<Representation>();
  Period period=manifest.periods.get(0);
  boolean hasContentProtection=false;
  for (int i=0; i < period.adaptationSets.size(); i++) {
    AdaptationSet adaptationSet=period.adaptationSets.get(i);
    hasContentProtection|=adaptationSet.hasContentProtection();
    int adaptationSetType=adaptationSet.type;
    for (int j=0; j < adaptationSet.representations.size(); j++) {
      Representation representation=adaptationSet.representations.get(j);
      if (adaptationSetType == AdaptationSet.TYPE_AUDIO) {
        audioRepresentationsList.add(representation);
      }
 else       if (adaptationSetType == AdaptationSet.TYPE_VIDEO) {
        Format format=representation.format;
        if (format.width * format.height <= maxDecodableFrameSize) {
          videoRepresentationsList.add(representation);
        }
 else {
        }
      }
    }
  }
  Representation[] videoRepresentations=new Representation[videoRepresentationsList.size()];
  videoRepresentationsList.toArray(videoRepresentations);
  DrmSessionManager drmSessionManager=null;
  if (hasContentProtection) {
    if (Util.SDK_INT < 18) {
      callback.onRenderersError(new UnsupportedOperationException(""String_Node_Str"" + Util.SDK_INT));
      return;
    }
    try {
      Pair<DrmSessionManager,Boolean> drmSessionManagerData=V18Compat.getDrmSessionManagerData(player,drmCallback);
      drmSessionManager=drmSessionManagerData.first;
      if (!drmSessionManagerData.second) {
        videoRepresentations=getSdRepresentations(videoRepresentations);
      }
    }
 catch (    Exception e) {
      callback.onRenderersError(e);
      return;
    }
  }
  DataSource videoDataSource=new HttpDataSource(userAgent,HttpDataSource.REJECT_PAYWALL_TYPES,bandwidthMeter);
  ChunkSource videoChunkSource;
  String mimeType=videoRepresentations[0].format.mimeType;
  if (mimeType.equals(MimeTypes.VIDEO_MP4)) {
    videoChunkSource=new DashMp4ChunkSource(videoDataSource,new AdaptiveEvaluator(bandwidthMeter),videoRepresentations);
  }
 else   if (mimeType.equals(MimeTypes.VIDEO_WEBM)) {
    videoRepresentations=getSdRepresentations(videoRepresentations);
    videoChunkSource=new DashWebmChunkSource(videoDataSource,new AdaptiveEvaluator(bandwidthMeter),videoRepresentations);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + mimeType);
  }
  ChunkSampleSource videoSampleSource=new ChunkSampleSource(videoChunkSource,loadControl,VIDEO_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE,true,mainHandler,player,ExoplayerWrapper.TYPE_VIDEO);
  MediaCodecVideoTrackRenderer videoRenderer=new MediaCodecVideoTrackRenderer(videoSampleSource,drmSessionManager,true,MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT,ALLOWED_JOINING_TIME_MS,mainHandler,player,MAX_DROPPED_FRAME_COUNT_TO_NOTIFY);
  final String[] audioTrackNames;
  final MultiTrackChunkSource audioChunkSource;
  final MediaCodecAudioTrackRenderer audioRenderer;
  if (audioRepresentationsList.isEmpty()) {
    audioTrackNames=null;
    audioChunkSource=null;
    audioRenderer=null;
  }
 else {
    DataSource audioDataSource=new HttpDataSource(userAgent,HttpDataSource.REJECT_PAYWALL_TYPES,bandwidthMeter);
    audioTrackNames=new String[audioRepresentationsList.size()];
    ChunkSource[] audioChunkSources=new ChunkSource[audioRepresentationsList.size()];
    FormatEvaluator audioEvaluator=new FormatEvaluator.FixedEvaluator();
    for (int i=0; i < audioRepresentationsList.size(); i++) {
      Representation representation=audioRepresentationsList.get(i);
      Format format=representation.format;
      audioTrackNames[i]=format.id + ""String_Node_Str"" + format.numChannels+ ""String_Node_Str""+ format.audioSamplingRate+ ""String_Node_Str"";
      audioChunkSources[i]=new DashMp4ChunkSource(audioDataSource,audioEvaluator,representation);
    }
    audioChunkSource=new MultiTrackChunkSource(audioChunkSources);
    SampleSource audioSampleSource=new ChunkSampleSource(audioChunkSource,loadControl,AUDIO_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE,true,mainHandler,player,ExoplayerWrapper.TYPE_AUDIO);
    audioRenderer=new MediaCodecAudioTrackRenderer(audioSampleSource,drmSessionManager,true,mainHandler,player);
  }
  String[][] trackNames=new String[ExoplayerWrapper.RENDERER_COUNT][];
  trackNames[ExoplayerWrapper.TYPE_AUDIO]=audioTrackNames;
  MultiTrackChunkSource[] multiTrackChunkSources=new MultiTrackChunkSource[ExoplayerWrapper.RENDERER_COUNT];
  multiTrackChunkSources[ExoplayerWrapper.TYPE_AUDIO]=audioChunkSource;
  TrackRenderer[] renderers=new TrackRenderer[ExoplayerWrapper.RENDERER_COUNT];
  renderers[ExoplayerWrapper.TYPE_VIDEO]=videoRenderer;
  renderers[ExoplayerWrapper.TYPE_AUDIO]=audioRenderer;
  callback.onRenderersBuilt(trackNames,multiTrackChunkSources,renderers);
}","@Override public void onManifest(String contentId,MediaPresentationDescription manifest){
  Handler mainHandler=player.getMainHandler();
  LoadControl loadControl=new DefaultLoadControl(new BufferPool(BUFFER_SEGMENT_SIZE));
  DefaultBandwidthMeter bandwidthMeter=new DefaultBandwidthMeter(mainHandler,player);
  int maxDecodableFrameSize=MediaCodecUtil.maxH264DecodableFrameSize();
  ArrayList<Representation> audioRepresentationsList=new ArrayList<Representation>();
  ArrayList<Representation> videoRepresentationsList=new ArrayList<Representation>();
  Period period=manifest.periods.get(0);
  boolean hasContentProtection=false;
  for (int i=0; i < period.adaptationSets.size(); i++) {
    AdaptationSet adaptationSet=period.adaptationSets.get(i);
    hasContentProtection|=adaptationSet.hasContentProtection();
    int adaptationSetType=adaptationSet.type;
    for (int j=0; j < adaptationSet.representations.size(); j++) {
      Representation representation=adaptationSet.representations.get(j);
      if (adaptationSetType == AdaptationSet.TYPE_AUDIO) {
        audioRepresentationsList.add(representation);
      }
 else       if (adaptationSetType == AdaptationSet.TYPE_VIDEO) {
        Format format=representation.format;
        if (format.width * format.height <= maxDecodableFrameSize) {
          videoRepresentationsList.add(representation);
        }
 else {
        }
      }
    }
  }
  Representation[] videoRepresentations=new Representation[videoRepresentationsList.size()];
  videoRepresentationsList.toArray(videoRepresentations);
  DrmSessionManager drmSessionManager=null;
  if (hasContentProtection) {
    if (Util.SDK_INT < 18) {
      callback.onRenderersError(new UnsupportedOperationException(""String_Node_Str"" + Util.SDK_INT));
      return;
    }
    try {
      Pair<DrmSessionManager,Boolean> drmSessionManagerData=V18Compat.getDrmSessionManagerData(player,drmCallback);
      drmSessionManager=drmSessionManagerData.first;
      if (!drmSessionManagerData.second) {
        videoRepresentations=getSdRepresentations(videoRepresentations);
      }
    }
 catch (    Exception e) {
      callback.onRenderersError(e);
      return;
    }
  }
  DataSource videoDataSource=new HttpDataSource(userAgent,null,bandwidthMeter);
  ChunkSource videoChunkSource;
  String mimeType=videoRepresentations[0].format.mimeType;
  if (mimeType.equals(MimeTypes.VIDEO_MP4)) {
    videoChunkSource=new DashMp4ChunkSource(videoDataSource,new AdaptiveEvaluator(bandwidthMeter),videoRepresentations);
  }
 else   if (mimeType.equals(MimeTypes.VIDEO_WEBM)) {
    videoRepresentations=getSdRepresentations(videoRepresentations);
    videoChunkSource=new DashWebmChunkSource(videoDataSource,new AdaptiveEvaluator(bandwidthMeter),videoRepresentations);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + mimeType);
  }
  ChunkSampleSource videoSampleSource=new ChunkSampleSource(videoChunkSource,loadControl,VIDEO_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE,true,mainHandler,player,ExoplayerWrapper.TYPE_VIDEO);
  MediaCodecVideoTrackRenderer videoRenderer=new MediaCodecVideoTrackRenderer(videoSampleSource,drmSessionManager,true,MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT,ALLOWED_JOINING_TIME_MS,mainHandler,player,MAX_DROPPED_FRAME_COUNT_TO_NOTIFY);
  final String[] audioTrackNames;
  final MultiTrackChunkSource audioChunkSource;
  final MediaCodecAudioTrackRenderer audioRenderer;
  if (audioRepresentationsList.isEmpty()) {
    audioTrackNames=null;
    audioChunkSource=null;
    audioRenderer=null;
  }
 else {
    DataSource audioDataSource=new HttpDataSource(userAgent,HttpDataSource.REJECT_PAYWALL_TYPES,bandwidthMeter);
    audioTrackNames=new String[audioRepresentationsList.size()];
    ChunkSource[] audioChunkSources=new ChunkSource[audioRepresentationsList.size()];
    FormatEvaluator audioEvaluator=new FormatEvaluator.FixedEvaluator();
    for (int i=0; i < audioRepresentationsList.size(); i++) {
      Representation representation=audioRepresentationsList.get(i);
      Format format=representation.format;
      audioTrackNames[i]=format.id + ""String_Node_Str"" + format.numChannels+ ""String_Node_Str""+ format.audioSamplingRate+ ""String_Node_Str"";
      audioChunkSources[i]=new DashMp4ChunkSource(audioDataSource,audioEvaluator,representation);
    }
    audioChunkSource=new MultiTrackChunkSource(audioChunkSources);
    SampleSource audioSampleSource=new ChunkSampleSource(audioChunkSource,loadControl,AUDIO_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE,true,mainHandler,player,ExoplayerWrapper.TYPE_AUDIO);
    audioRenderer=new MediaCodecAudioTrackRenderer(audioSampleSource,drmSessionManager,true,mainHandler,player);
  }
  String[][] trackNames=new String[ExoplayerWrapper.RENDERER_COUNT][];
  trackNames[ExoplayerWrapper.TYPE_AUDIO]=audioTrackNames;
  MultiTrackChunkSource[] multiTrackChunkSources=new MultiTrackChunkSource[ExoplayerWrapper.RENDERER_COUNT];
  multiTrackChunkSources[ExoplayerWrapper.TYPE_AUDIO]=audioChunkSource;
  TrackRenderer[] renderers=new TrackRenderer[ExoplayerWrapper.RENDERER_COUNT];
  renderers[ExoplayerWrapper.TYPE_VIDEO]=videoRenderer;
  renderers[ExoplayerWrapper.TYPE_AUDIO]=audioRenderer;
  callback.onRenderersBuilt(trackNames,multiTrackChunkSources,renderers);
}",0.9962917181705808
116823,"public TrackState getStateForTrackType(int type){
  return trackStateForType[type];
}","public int getStateForTrackType(int type){
  return trackStateForType[type];
}",0.9325153374233128
116824,"public void selectTrack(int type,TrackState state){
  if (trackStateForType[type] == state) {
    return;
  }
  trackStateForType[type]=state;
  if (type == TYPE_VIDEO) {
    pushSurfaceAndVideoTrack(false);
  }
 else {
    pushTrackSelection(type,true);
  }
}","public void selectTrack(int type,int state){
  if (trackStateForType[type] == state) {
    return;
  }
  trackStateForType[type]=state;
  if (type == TYPE_VIDEO) {
    pushSurfaceAndVideoTrack(false);
  }
 else {
    pushTrackSelection(type,true);
  }
}",0.9746588693957114
116825,"/** 
 * Send the renderer at trackIndex to the underlying player.
 * @param type The index of the video type (it must be one of the TYPE_* constants).
 * @param allowRendererEnable If true, the renderer is enabled.
 */
private void pushTrackSelection(int type,boolean allowRendererEnable){
  if (rendererBuildingState != RENDERER_BUILDING_STATE_BUILT) {
    return;
  }
  TrackState trackState=trackStateForType[type];
  if (trackState == TrackState.DISABLED) {
    player.setRendererEnabled(type,false);
  }
 else   if (multiTrackSources[type] == null) {
    player.setRendererEnabled(type,allowRendererEnable);
  }
 else {
    boolean playWhenReady=player.getPlayWhenReady();
    player.setPlayWhenReady(false);
    player.setRendererEnabled(type,false);
    player.sendMessage(multiTrackSources[type],MultiTrackChunkSource.MSG_SELECT_TRACK,trackState);
    player.setRendererEnabled(type,allowRendererEnable);
    player.setPlayWhenReady(playWhenReady);
  }
}","/** 
 * Send the renderer at trackIndex to the underlying player.
 * @param type The index of the video type (it must be one of the TYPE_* constants).
 * @param allowRendererEnable If true, the renderer is enabled.
 */
private void pushTrackSelection(int type,boolean allowRendererEnable){
  if (rendererBuildingState != RENDERER_BUILDING_STATE_BUILT) {
    return;
  }
  int trackState=trackStateForType[type];
  if (trackState == DISABLED_TRACK) {
    player.setRendererEnabled(type,false);
  }
 else   if (multiTrackSources[type] == null) {
    player.setRendererEnabled(type,allowRendererEnable);
  }
 else {
    boolean playWhenReady=player.getPlayWhenReady();
    player.setPlayWhenReady(false);
    player.setRendererEnabled(type,false);
    player.sendMessage(multiTrackSources[type],MultiTrackChunkSource.MSG_SELECT_TRACK,trackState);
    player.setRendererEnabled(type,allowRendererEnable);
    player.setPlayWhenReady(playWhenReady);
  }
}",0.9843096234309624
116826,"public ExoplayerWrapper(RendererBuilder rendererBuilder){
  this.rendererBuilder=rendererBuilder;
  player=ExoPlayer.Factory.newInstance(RENDERER_COUNT,1000,5000);
  player.addListener(this);
  playerControl=new ObservablePlayerControl(player);
  mainHandler=new Handler();
  playbackListeners=new CopyOnWriteArrayList<PlaybackListener>();
  lastReportedPlaybackState=ExoPlayer.STATE_IDLE;
  rendererBuildingState=RENDERER_BUILDING_STATE_IDLE;
  trackStateForType=new TrackState[RENDERER_COUNT];
  trackStateForType[TYPE_TEXT]=TrackState.DISABLED;
}","public ExoplayerWrapper(RendererBuilder rendererBuilder){
  this.rendererBuilder=rendererBuilder;
  player=ExoPlayer.Factory.newInstance(RENDERER_COUNT,1000,5000);
  player.addListener(this);
  playerControl=new ObservablePlayerControl(player);
  mainHandler=new Handler();
  playbackListeners=new CopyOnWriteArrayList<PlaybackListener>();
  lastReportedPlaybackState=ExoPlayer.STATE_IDLE;
  rendererBuildingState=RENDERER_BUILDING_STATE_IDLE;
  trackStateForType=new int[RENDERER_COUNT];
  trackStateForType[TYPE_TEXT]=DISABLED_TRACK;
}",0.9723756906077348
116827,"@Override public void surfaceCreated(SurfaceHolder surfaceHolder){
  ExoplayerWrapper wrapper=layerManager.getExoplayerWrapper();
  if (wrapper != null) {
    wrapper.setSurface(surfaceHolder.getSurface());
    if (wrapper.getSurface().isValid() || wrapper.getStateForTrackType(ExoplayerWrapper.TYPE_VIDEO) == TrackState.DISABLED) {
      wrapper.setPlayWhenReady(autoplay);
    }
  }
}","@Override public void surfaceCreated(SurfaceHolder surfaceHolder){
  ExoplayerWrapper wrapper=layerManager.getExoplayerWrapper();
  if (wrapper != null) {
    wrapper.setSurface(surfaceHolder.getSurface());
    if (wrapper.getSurface().isValid() || wrapper.getStateForTrackType(ExoplayerWrapper.TYPE_VIDEO) == ExoplayerWrapper.DISABLED_TRACK) {
      wrapper.setPlayWhenReady(autoplay);
    }
  }
}",0.9591836734693876
116828,"void socketServerLoop() throws JsonGenerationException, JsonMappingException, IOException {
  BufferedReader br;
  Socket clientSocket=null;
  String commandstr=null;
  initializeSocketServer();
  while (true) {
    commandstr=null;
    try {
      clientSocket=getSocketConnection();
      br=new BufferedReader(new InputStreamReader(new DataInputStream(clientSocket.getInputStream())));
      commandstr=br.readLine();
    }
 catch (    IOException e) {
      e.printStackTrace();
      continue;
    }
    JsonNode result=parseAndRunCommand(commandstr);
    writeResultToStream(result,clientSocket.getOutputStream());
    checkTimings();
  }
}","void socketServerLoop() throws JsonGenerationException, JsonMappingException, IOException {
  BufferedReader br;
  Socket clientSocket=null;
  String commandstr=null;
  initializeSocketServer();
  while (true) {
    commandstr=null;
    try {
      clientSocket=getSocketConnection();
      br=new BufferedReader(new InputStreamReader(new DataInputStream(clientSocket.getInputStream())));
      commandstr=br.readLine();
    }
 catch (    IOException e) {
      e.printStackTrace();
      continue;
    }
    if (commandstr == null) {
      continue;
    }
    JsonNode result=parseAndRunCommand(commandstr);
    writeResultToStream(result,clientSocket.getOutputStream());
    checkTimings();
  }
}",0.9613095238095238
116829,"private DBObject populateDocument(DocumentFieldDefinition fd,String document){
  DBObject dbObject=null;
  final String delimiter=fd.getDelimiter();
  if (!StringUtils.isEmpty(delimiter)) {
    String[] documentAsArrray=document.split(delimiter);
    dbObject=new BasicDBObject();
    Map<String,FieldDefinition> documentMapping=new LinkedHashMap<String,FieldDefinition>(fd.getDocumentMapping());
    int i=0;
    for (    Map.Entry<String,FieldDefinition> documentField : documentMapping.entrySet()) {
      if (DOCUMENT_TYPE.equalsIgnoreCase(documentField.getValue().getType().name())) {
        dbObject.put(documentField.getKey(),parseValue(documentField.getValue(),StringUtils.join(Arrays.copyOfRange(documentAsArrray,i,documentAsArrray.length),""String_Node_Str"")));
        i+=((DocumentFieldDefinition)documentField.getValue()).getDocumentMapping().size();
      }
 else {
        dbObject.put(documentField.getKey(),parseValue(documentField.getValue(),documentAsArrray[i++]));
      }
    }
  }
 else {
    throw new MongoSinkException(""String_Node_Str"");
  }
  return dbObject;
}","private DBObject populateDocument(DocumentFieldDefinition fd,String document){
  DBObject dbObject=null;
  final String delimiter=fd.getDelimiter();
  if (!StringUtils.isEmpty(delimiter)) {
    String[] documentAsArrray=document.split(delimiter);
    dbObject=new BasicDBObject();
    Map<String,FieldDefinition> documentMapping=new LinkedHashMap<String,FieldDefinition>(fd.getDocumentMapping());
    int i=0;
    for (    Map.Entry<String,FieldDefinition> documentField : documentMapping.entrySet()) {
      if (DOCUMENT_TYPE.equalsIgnoreCase(documentField.getValue().getType().name())) {
        dbObject.put(documentField.getKey(),parseValue(documentField.getValue(),StringUtils.join(Arrays.copyOfRange(documentAsArrray,i,documentAsArrray.length),fd.getDelimiter())));
        i+=((DocumentFieldDefinition)documentField.getValue()).getDocumentMapping().size();
      }
 else {
        dbObject.put(documentField.getKey(),parseValue(documentField.getValue(),documentAsArrray[i++]));
      }
    }
  }
 else {
    throw new MongoSinkException(""String_Node_Str"");
  }
  return dbObject;
}",0.984375
116830,"@Before public void setUpES() throws IOException {
  FileUtils.deleteDirectory(new File(""String_Node_Str""));
  String jsonMapping=IOUtils.toString(this.getClass().getResourceAsStream(MAPPING_PATH));
  expectedESMapping=trimAllWhitespace(""String_Node_Str"" + INDEX_TYPE + ""String_Node_Str""+ jsonMapping+ ""String_Node_Str"");
  conf=ConfigFactory.load();
  LOGGER.debug(""String_Node_Str"" + conf.getStringList(""String_Node_Str"").toString());
  List<String> elasticSearchHosts=conf.getStringList(""String_Node_Str"");
  String elasticSearchClusterName=conf.getString(""String_Node_Str"");
}","@Before public void setUpES() throws IOException {
  FileUtils.deleteDirectory(new File(""String_Node_Str""));
  String jsonMapping=IOUtils.toString(this.getClass().getResourceAsStream(MAPPING_PATH));
  expectedESMapping=trimAllWhitespace(""String_Node_Str"" + INDEX_TYPE + ""String_Node_Str""+ jsonMapping+ ""String_Node_Str"");
  conf=ConfigFactory.load();
  List<String> elasticSearchHosts=conf.getStringList(""String_Node_Str"");
  String elasticSearchClusterName=conf.getString(""String_Node_Str"");
}",0.9199255121042832
116831,"@Test public void checkProcess() throws EventDeliveryException {
  rest.configure(contextSource);
  rest.start();
  PollableSource.Status status=rest.process();
  rest.stop();
  Assert.assertEquals(status,""String_Node_Str"");
}","@Test public void checkProcess() throws EventDeliveryException {
  rest.configure(contextSource);
  rest.start();
  PollableSource.Status status=rest.process();
  rest.stop();
  Assert.assertEquals(status,PollableSource.Status.READY);
}",0.9047619047619048
116832,"/** 
 * {@inheritDoc}
 */
@Override public Status process() throws EventDeliveryException {
  Status status=Status.BACKOFF;
  Transaction transaction=this.getChannel().getTransaction();
  try {
    transaction.begin();
    List<Event> eventList=this.takeEventsFromChannel(this.getChannel(),this.batchSize);
    status=Status.READY;
    if (!eventList.isEmpty()) {
      if (eventList.size() == this.batchSize) {
        this.sinkCounter.incrementBatchCompleteCount();
      }
 else {
        this.sinkCounter.incrementBatchUnderflowCount();
      }
      for (      Event event : eventList) {
        final DBObject document=this.eventParser.parse(event);
        getDBCollection(event).save(document);
      }
      this.sinkCounter.addToEventDrainSuccessCount(eventList.size());
    }
 else {
      this.sinkCounter.incrementBatchEmptyCount();
    }
    transaction.commit();
    status=Status.READY;
  }
 catch (  ChannelException e) {
    e.printStackTrace();
    transaction.rollback();
    status=Status.BACKOFF;
    this.sinkCounter.incrementConnectionFailedCount();
  }
catch (  Throwable t) {
    t.printStackTrace();
    transaction.rollback();
    status=Status.BACKOFF;
    if (t instanceof Error) {
      throw new MongoSinkException(t);
    }
  }
 finally {
    transaction.close();
  }
  return status;
}","/** 
 * {@inheritDoc}
 */
@Override public Status process() throws EventDeliveryException {
  Status status=Status.BACKOFF;
  Transaction transaction=this.getChannel().getTransaction();
  log.debug(""String_Node_Str"");
  try {
    transaction.begin();
    List<Event> eventList=this.takeEventsFromChannel(this.getChannel(),this.batchSize);
    status=Status.BACKOFF;
    if (!eventList.isEmpty()) {
      if (eventList.size() == this.batchSize) {
        this.sinkCounter.incrementBatchCompleteCount();
      }
 else {
        this.sinkCounter.incrementBatchUnderflowCount();
      }
      for (      Event event : eventList) {
        final DBObject document=this.eventParser.parse(event);
        getDBCollection(event).save(document);
      }
      this.sinkCounter.addToEventDrainSuccessCount(eventList.size());
    }
 else {
      this.sinkCounter.incrementBatchEmptyCount();
    }
    transaction.commit();
    status=Status.READY;
  }
 catch (  ChannelException e) {
    log.error(""String_Node_Str"",e);
    transaction.rollback();
    status=Status.BACKOFF;
    this.sinkCounter.incrementConnectionFailedCount();
  }
catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
    transaction.rollback();
    status=Status.BACKOFF;
    if (t instanceof Error) {
      throw new MongoSinkException(t);
    }
  }
 finally {
    transaction.close();
  }
  return status;
}",0.5285820341499629
116833,"@Before public void setUpES() throws IOException {
  FileUtils.deleteDirectory(new File(""String_Node_Str""));
  String jsonMapping=IOUtils.toString(this.getClass().getResourceAsStream(MAPPING_PATH));
  expectedESMapping=trimAllWhitespace(""String_Node_Str"" + INDEX_TYPE + ""String_Node_Str""+ jsonMapping+ ""String_Node_Str"");
  conf=ConfigFactory.load();
  LOGGER.debug(""String_Node_Str"" + conf.getString(""String_Node_Str"").toString());
  String elasticSearchHosts=conf.getString(""String_Node_Str"");
  String elasticSearchClusterName=conf.getString(""String_Node_Str"");
}","@Before public void setUpES() throws IOException {
  FileUtils.deleteDirectory(new File(""String_Node_Str""));
  String jsonMapping=IOUtils.toString(this.getClass().getResourceAsStream(MAPPING_PATH));
  expectedESMapping=trimAllWhitespace(""String_Node_Str"" + INDEX_TYPE + ""String_Node_Str""+ jsonMapping+ ""String_Node_Str"");
  conf=ConfigFactory.load();
  LOGGER.debug(""String_Node_Str"" + conf.getStringList(""String_Node_Str"").toString());
  List<String> elasticSearchHosts=conf.getStringList(""String_Node_Str"");
  String elasticSearchClusterName=conf.getString(""String_Node_Str"");
}",0.9162303664921466
116834,"private void init(){
  try {
    JedisPoolConfig poolConfig=new JedisPoolConfig();
    String prop;
    if ((prop=poolProps.get(CONF_TESTONBORROW)) == null) {
      poolConfig.setTestOnBorrow(DEFAULT_TESTONBORROW);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTestOnBorrow(Boolean.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MAXTOTAL)) == null) {
      poolConfig.setMaxTotal(DEFAULT_MAXTOTAL);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMaxTotal(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MAXIDLE)) == null) {
      poolConfig.setMaxTotal(DEFAULT_MAXIDLE);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMaxIdle(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MINIDLE)) == null) {
      poolConfig.setMinIdle(DEFAULT_MINIDLE);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMinIdle(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MAXWAITINMILLIS)) == null) {
      poolConfig.setMaxWaitMillis(DEFAULT_MAXWAITINMILLIS);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMaxWaitMillis(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_TESTWHILEIDLE)) == null) {
      poolConfig.setTestWhileIdle(DEFAULT_TESTWHILEIDLE);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTestWhileIdle(Boolean.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_TESTONRETURN)) == null) {
      poolConfig.setTestOnReturn(DEFAULT_TESTONRETURN);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTestOnReturn(Boolean.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MINEVICTABLEIDLETIMEINMILLIS)) == null) {
      poolConfig.setMinEvictableIdleTimeMillis(DEFAULT_MINEVICTABLEIDLETIMEINMILLIS);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMinEvictableIdleTimeMillis(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_TIMEBETWEETNEVICTIONRUNSMILLIS)) == null) {
      poolConfig.setTimeBetweenEvictionRunsMillis(DEFAULT_TIMEBETWEETNEVICTIONRUNSMILLIS);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTimeBetweenEvictionRunsMillis(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_NUMTESTSPEREVICTIONRUN)) == null) {
      poolConfig.setNumTestsPerEvictionRun(DEFAULT_NUMTESTSPEREVICTIONRUN);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setNumTestsPerEvictionRun(Integer.valueOf(prop));
    }
    this.jedisPool=new JedisPool(poolConfig,host,port);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(-1);
  }
}","private void init(){
  try {
    JedisPoolConfig poolConfig=new JedisPoolConfig();
    String prop;
    if ((prop=poolProps.get(CONF_TESTONBORROW)).equals(null)) {
      poolConfig.setTestOnBorrow(DEFAULT_TESTONBORROW);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTestOnBorrow(Boolean.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MAXTOTAL)).equals(null)) {
      poolConfig.setMaxTotal(DEFAULT_MAXTOTAL);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMaxTotal(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MAXIDLE)).equals(null)) {
      poolConfig.setMaxTotal(DEFAULT_MAXIDLE);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMaxIdle(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MINIDLE)).equals(null)) {
      poolConfig.setMinIdle(DEFAULT_MINIDLE);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMinIdle(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MAXWAITINMILLIS)).equals(null)) {
      poolConfig.setMaxWaitMillis(DEFAULT_MAXWAITINMILLIS);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMaxWaitMillis(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_TESTWHILEIDLE)).equals(null)) {
      poolConfig.setTestWhileIdle(DEFAULT_TESTWHILEIDLE);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTestWhileIdle(Boolean.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_TESTONRETURN)).equals(null)) {
      poolConfig.setTestOnReturn(DEFAULT_TESTONRETURN);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTestOnReturn(Boolean.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_MINEVICTABLEIDLETIMEINMILLIS)).equals(null)) {
      poolConfig.setMinEvictableIdleTimeMillis(DEFAULT_MINEVICTABLEIDLETIMEINMILLIS);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setMinEvictableIdleTimeMillis(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_TIMEBETWEETNEVICTIONRUNSMILLIS)).equals(null)) {
      poolConfig.setTimeBetweenEvictionRunsMillis(DEFAULT_TIMEBETWEETNEVICTIONRUNSMILLIS);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setTimeBetweenEvictionRunsMillis(Integer.valueOf(prop));
    }
    if ((prop=poolProps.get(CONF_NUMTESTSPEREVICTIONRUN)).equals(null)) {
      poolConfig.setNumTestsPerEvictionRun(DEFAULT_NUMTESTSPEREVICTIONRUN);
    }
 else {
      log.info(""String_Node_Str"" + prop);
      poolConfig.setNumTestsPerEvictionRun(Integer.valueOf(prop));
    }
    this.jedisPool=new JedisPool(poolConfig,host,port);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(-1);
  }
}",0.9615102639296188
116835,"/** 
 * {@inheritDoc}
 */
@Override public void start(){
  this.jobDetail=JobBuilder.newJob(RequestJob.class).withIdentity(DEFAULT_JOBNAME).build();
  Trigger trigger=TriggerBuilder.newTrigger().withIdentity(DEFAULT_JOBNAME).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(frequency).repeatForever()).build();
  try {
    scheduler=new StdSchedulerFactory().getScheduler();
    scheduler.getContext().put(""String_Node_Str"",client);
    scheduler.getContext().put(""String_Node_Str"",queue);
    scheduler.getContext().put(""String_Node_Str"",properties);
    scheduler.getContext().put(""String_Node_Str"",restSourceHandler);
    scheduler.getContext().put(""String_Node_Str"",urlHandler);
    scheduler.start();
    scheduler.scheduleJob(jobDetail,trigger);
  }
 catch (  SchedulerException e) {
    e.printStackTrace();
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void start(){
  this.jobDetail=JobBuilder.newJob(RequestJob.class).withIdentity(DEFAULT_JOBNAME).build();
  Trigger trigger=TriggerBuilder.newTrigger().withIdentity(DEFAULT_JOBNAME).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(frequency).repeatForever()).build();
  try {
    scheduler=new StdSchedulerFactory().getScheduler();
    scheduler.getContext().put(""String_Node_Str"",client);
    scheduler.getContext().put(""String_Node_Str"",queue);
    scheduler.getContext().put(""String_Node_Str"",properties);
    scheduler.getContext().put(""String_Node_Str"",restSourceHandler);
    scheduler.getContext().put(""String_Node_Str"",urlHandler);
    scheduler.start();
    scheduler.scheduleJob(jobDetail,trigger);
  }
 catch (  SchedulerException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
}",0.9638694638694638
116836,"private UrlHandler initUrlHandler(Context context){
  UrlHandler handler=null;
  try {
    handler=(UrlHandler)Class.forName((String)properties.get(""String_Node_Str"")).newInstance();
    handler.configure(context);
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  return handler;
}","private UrlHandler initUrlHandler(Context context){
  UrlHandler handler=null;
  try {
    handler=(UrlHandler)Class.forName((String)properties.get(URL_HANDLER)).newInstance();
    handler.configure(context);
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
  return handler;
}",0.6955602536997886
116837,"/** 
 * Look at the queue and poll and   {@code Event}
 * @return an {@code Event} or null if is empty.
 */
private Event poll(){
  if (!queue.isEmpty()) {
    return queue.poll();
  }
 else {
    try {
      Thread.sleep(frequency * 1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  return null;
}","/** 
 * Look at the queue and poll and   {@code Event}
 * @return an {@code Event} or null if is empty.
 */
private Event poll(){
  if (!queue.isEmpty()) {
    return queue.poll();
  }
 else {
    try {
      Thread.sleep(frequency * 1000);
    }
 catch (    InterruptedException e) {
      log.error(""String_Node_Str"" + e.getMessage());
    }
  }
  return null;
}",0.9173789173789174
116838,"/** 
 * {@inheritDoc}
 */
@Override public void stop(){
  client.destroy();
  try {
    scheduler.interrupt(jobDetail.getKey());
  }
 catch (  UnableToInterruptJobException e) {
    e.printStackTrace();
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void stop(){
  client.destroy();
  try {
    scheduler.interrupt(jobDetail.getKey());
  }
 catch (  UnableToInterruptJobException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
}",0.8687782805429864
116839,"private RestSourceHandler initRestSourceHandler(Context context){
  RestSourceHandler handler=null;
  try {
    handler=(RestSourceHandler)Class.forName((String)properties.get(CONF_HANDLER)).newInstance();
    handler.configure(context);
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return handler;
}","private RestSourceHandler initRestSourceHandler(Context context){
  RestSourceHandler handler=null;
  try {
    handler=(RestSourceHandler)Class.forName((String)properties.get(CONF_HANDLER)).newInstance();
    handler.configure(context);
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
catch (  ClassNotFoundException e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
  return handler;
}",0.8136272545090181
116840,"@Test public void test() throws EventDeliveryException, UnsupportedEncodingException {
  Transaction tx=channel.getTransaction();
  tx.begin();
  ObjectNode jsonBody=new ObjectNode(JsonNodeFactory.instance);
  jsonBody.put(""String_Node_Str"",""String_Node_Str"");
  jsonBody.put(""String_Node_Str"",32);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  Event event=EventBuilder.withBody(jsonBody.toString().getBytes(Charsets.UTF_8),headers);
  channel.put(event);
  tx.commit();
  tx.close();
  kafkaSink.process();
  kafka.api.FetchRequest req=new FetchRequestBuilder().clientId(CLIENT_ID).addFetch(""String_Node_Str"",0,0L,100).build();
  FetchResponse fetchResponse=simpleConsumer.fetch(req);
  ByteBufferMessageSet messageSet=fetchResponse.messageSet(""String_Node_Str"",0);
  Assert.assertTrue(messageSet.sizeInBytes() > 0);
  for (  MessageAndOffset messageAndOffset : messageSet) {
    ByteBuffer payload=messageAndOffset.message().payload();
    byte[] bytes=new byte[payload.limit()];
    payload.get(bytes);
    String message=new String(bytes,""String_Node_Str"");
    Assert.assertNotNull(message);
    Assert.assertEquals(message,""String_Node_Str"");
  }
}","@Test public void test() throws EventDeliveryException, UnsupportedEncodingException {
  Transaction tx=channel.getTransaction();
  tx.begin();
  ObjectNode jsonBody=new ObjectNode(JsonNodeFactory.instance);
  jsonBody.put(""String_Node_Str"",""String_Node_Str"");
  jsonBody.put(""String_Node_Str"",32);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  headers.put(""String_Node_Str"",""String_Node_Str"");
  Event event=EventBuilder.withBody(jsonBody.toString().getBytes(Charsets.UTF_8),headers);
  channel.put(event);
  tx.commit();
  tx.close();
  kafkaSink.process();
  kafka.api.FetchRequest req=new FetchRequestBuilder().clientId(CLIENT_ID).addFetch(""String_Node_Str"",0,0L,100).build();
  FetchResponse fetchResponse=simpleConsumer.fetch(req);
  ByteBufferMessageSet messageSet=fetchResponse.messageSet(""String_Node_Str"",0);
  for (  MessageAndOffset messageAndOffset : messageSet) {
    ByteBuffer payload=messageAndOffset.message().payload();
    byte[] bytes=new byte[payload.limit()];
    payload.get(bytes);
    String message=new String(bytes,""String_Node_Str"");
    Assert.assertNotNull(message);
    Assert.assertEquals(message,""String_Node_Str"");
  }
}",0.9818311364446028
116841,"/** 
 * Loads the context configured in the parameter 'checkpointConfiguration'
 * @param context
 * @return
 * @throws Exception
 */
private Map<String,String> loadCheckpointContext(Map<String,String> context){
  Map<String,String> checkpointContext=null;
  JsonNode jsonNode;
  final String string=context.get(FILTER_CONF);
  if (StringUtils.isNotBlank(string)) {
    try {
      File checkpointFile=new File(context.get(FILTER_CONF));
      if (checkpointFile.exists()) {
        checkpointContext=new HashMap<String,String>();
        ObjectMapper mapper=new ObjectMapper();
        jsonNode=mapper.readTree(checkpointFile);
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
      }
 else {
        throw new RestSourceException(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      throw new RestSourceException(""String_Node_Str"",e);
    }
  }
  return checkpointContext;
}","/** 
 * Loads the context configured in the parameter 'checkpointConfiguration'
 * @param context
 * @return
 * @throws Exception
 */
protected Map<String,String> loadCheckpointContext(Map<String,String> context){
  Map<String,String> checkpointContext=null;
  JsonNode jsonNode;
  final String string=context.get(FILTER_CONF);
  if (StringUtils.isNotBlank(string)) {
    try {
      File checkpointFile=new File(string);
      if (checkpointFile.exists()) {
        checkpointContext=new HashMap<String,String>();
        ObjectMapper mapper=new ObjectMapper();
        jsonNode=mapper.readTree(checkpointFile);
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
        checkpointContext.put(""String_Node_Str"",jsonNode.findValue(""String_Node_Str"").asText());
      }
 else {
        throw new RestSourceException(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      throw new RestSourceException(""String_Node_Str"",e);
    }
  }
  return checkpointContext;
}",0.9828009828009828
116842,"@Override public List<Event> getEvents(String body,Map<String,String> headers){
  List<Event> events=new ArrayList<Event>(0);
  ObjectMapper mapper=new ObjectMapper();
  try {
    JsonNode jsonNode=mapper.readTree(body);
    if (jsonNode.isObject()) {
      events.add(buildSingleEvent(headers,findValue(jsonNode,path)));
    }
    if (jsonNode.isArray()) {
      final Iterator<JsonNode> elements=jsonNode.getElements();
      JsonNode element;
      while (elements.hasNext()) {
        element=elements.next();
        events.add(buildSingleEvent(headers,findValue(element,path)));
      }
    }
  }
 catch (  Exception e) {
    throw new RestSourceException(""String_Node_Str"",e);
  }
  return events;
}","@Override public List<Event> getEvents(String body,Map<String,String> headers){
  List<Event> events=new ArrayList<Event>(0);
  ObjectMapper mapper=new ObjectMapper();
  try {
    JsonNode jsonNode=mapper.readTree(body);
    if (jsonNode.isObject()) {
      events.add(buildSingleEvent(headers,findValue(jsonNode,path)));
    }
    if (jsonNode.isArray()) {
      final Iterator<JsonNode> elements=jsonNode.getElements();
      JsonNode element;
      while (elements.hasNext()) {
        element=elements.next();
        events.add(buildSingleEvent(headers,findValue(element,path)));
      }
    }
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + body);
  }
  return events;
}",0.9699140401146132
116843,"@Override public void configure(Context context){
  String table=context.getString(CONF_TABLE,DEFAULT_TABLE);
  String host=context.getString(CONF_HOST,DEFAULT_HOST);
  String keyspace=context.getString(CONF_KEYSPACE,DEFAULT_KEYSPACE);
  int port=context.getInteger(CONF_PORT,DEFAULT_PORT);
  String username=context.getString(CONF_USERNAME);
  String password=context.getString(CONF_PASSWORD);
  String clusterName=context.getString(CONF_CLUSTER,DEFAULT_CLUSTER);
  String consistency=context.getString(CONF_CONSISTENCY_LEVEL,DEFAULT_CONSISTENCY_LEVEL);
  String columnDefinitionFile=context.getString(CONF_COLUMN_DEFINITION_FILE);
  if (!Strings.isNullOrEmpty(columnDefinitionFile)) {
    this.parser=new EventParser(readJsonFromFile(new File(columnDefinitionFile)));
  }
  ColumnDefinition definition=this.parser == null ? null : this.parser.getDefinition();
  if (Strings.isNullOrEmpty(username) && Strings.isNullOrEmpty(password)) {
    this.repository=new CassandraRepository(host,table,keyspace,port,clusterName,consistency,definition);
  }
 else {
    this.repository=new CassandraRepository(username,password,host,table,keyspace,port,clusterName,consistency,definition);
  }
  setOptionalRepoConfiguration(context);
  this.batchsize=context.getInteger(CONF_BATCH_SIZE,DEFAULT_BATCH_SIZE);
  this.sinkCounter=new SinkCounter(this.getName());
  this.dateFormat=context.getString(CONF_DATE_FORMAT,DEFAULT_DATE_FORMAT);
  this.itemSeparator=context.getString(CONF_ITEM_SEPARATOR,DEFAULT_ITEM_SEPARATOR);
  this.mapValueSeparator=context.getString(CONF_MAP_VALUE_SEPARATOR,DEFAULT_MAP_VALUE_SEPARATOR);
  this.mapKeyType=context.getString(CONF_MAP_KEY_TYPE,DEFAULT_MAP_KEY_TYPE);
  this.mapValueType=context.getString(CONF_MAP_VALUE_TYPE,DEFAULT_MAP_VALUE_TYPE);
  this.listValueType=context.getString(CONF_LIST_VALUE_TYPE,DEFAULT_LIST_VALUE_TYPE);
}","@Override public void configure(Context context){
  String table=context.getString(CONF_TABLE,DEFAULT_TABLE);
  String host=context.getString(CONF_HOST,DEFAULT_HOST);
  String keyspace=context.getString(CONF_KEYSPACE,DEFAULT_KEYSPACE);
  int port=context.getInteger(CONF_PORT,DEFAULT_PORT);
  String username=context.getString(CONF_USERNAME);
  String password=context.getString(CONF_PASSWORD);
  String clusterName=context.getString(CONF_CLUSTER,DEFAULT_CLUSTER);
  String consistency=context.getString(CONF_CONSISTENCY_LEVEL,DEFAULT_CONSISTENCY_LEVEL);
  String columnDefinitionFile=context.getString(CONF_COLUMN_DEFINITION_FILE);
  if (!Strings.isNullOrEmpty(columnDefinitionFile)) {
    this.parser=new EventParser(readJsonFromFile(new File(columnDefinitionFile)));
  }
  ColumnDefinition definition=this.parser == null ? null : this.parser.getDefinition();
  if (Strings.isNullOrEmpty(username) || Strings.isNullOrEmpty(password)) {
    this.repository=new CassandraRepository(host,table,keyspace,port,clusterName,consistency,definition);
  }
 else {
    this.repository=new CassandraRepository(username,password,host,table,keyspace,port,clusterName,consistency,definition);
  }
  setOptionalRepoConfiguration(context);
  this.batchsize=context.getInteger(CONF_BATCH_SIZE,DEFAULT_BATCH_SIZE);
  this.sinkCounter=new SinkCounter(this.getName());
  this.dateFormat=context.getString(CONF_DATE_FORMAT,DEFAULT_DATE_FORMAT);
  this.itemSeparator=context.getString(CONF_ITEM_SEPARATOR,DEFAULT_ITEM_SEPARATOR);
  this.mapValueSeparator=context.getString(CONF_MAP_VALUE_SEPARATOR,DEFAULT_MAP_VALUE_SEPARATOR);
  this.mapKeyType=context.getString(CONF_MAP_KEY_TYPE,DEFAULT_MAP_KEY_TYPE);
  this.mapValueType=context.getString(CONF_MAP_VALUE_TYPE,DEFAULT_MAP_VALUE_TYPE);
  this.listValueType=context.getString(CONF_LIST_VALUE_TYPE,DEFAULT_LIST_VALUE_TYPE);
}",0.9989212513484358
116844,"/** 
 * Map raw Json to an object and add each key-value to a headers request.
 * @param request Current REST request.
 * @param jsonHeaders raw json.
 * @return
 */
private Builder addHeaders(Builder request,String jsonHeaders){
  ObjectMapper mapper=new ObjectMapper();
  try {
    Map<String,Object> headers=mapper.readValue(jsonHeaders,Map.class);
    for (    Map.Entry<String,Object> entry : headers.entrySet()) {
      request.header(entry.getKey(),entry.getKey());
    }
  }
 catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  JsonMappingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return request;
}","/** 
 * Map raw Json to an object and add each key-value to a headers request.
 * @param request Current REST request.
 * @param jsonHeaders raw json.
 * @return
 */
private Builder addHeaders(Builder request,String jsonHeaders){
  ObjectMapper mapper=new ObjectMapper();
  try {
    Map<String,Object> headers=mapper.readValue(jsonHeaders,Map.class);
    for (    Map.Entry<String,Object> entry : headers.entrySet()) {
      request.header(entry.getKey(),entry.getValue());
    }
  }
 catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  JsonMappingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return request;
}",0.994160583941606
116845,"/** 
 * Initialize properties that are received in the   {@code SchedulerContext}.
 * @param context
 */
@SuppressWarnings(""String_Node_Str"") public void initProperties(SchedulerContext context){
  queue=(LinkedBlockingQueue<Event>)context.get(""String_Node_Str"");
  properties=(Map<String,Object>)context.get(""String_Node_Str"");
  client=(Client)context.get(""String_Node_Str"");
}","/** 
 * Initialize properties that are received in the   {@code SchedulerContext}.
 * @param context
 */
@SuppressWarnings(""String_Node_Str"") public void initProperties(SchedulerContext context){
  queue=(LinkedBlockingQueue<Event>)context.get(""String_Node_Str"");
  properties=(Map<String,String>)context.get(""String_Node_Str"");
  client=(Client)context.get(""String_Node_Str"");
}",0.9841688654353562
116846,"/** 
 * Set an Application Type to the request depending on a parameter and its corresponding  {@code MediaType}.
 * @param targetURL Current target url.
 * @param applicationType ApplicationType to set.
 * @return
 */
public Builder setApplicationType(WebTarget targetURL,String applicationType){
  Builder builder=null;
  if (""String_Node_Str"".equals(applicationType)) {
    mediaType=MediaType.TEXT_PLAIN_TYPE;
  }
 else {
    mediaType=MediaType.APPLICATION_JSON_TYPE;
  }
  builder=targetURL.request(mediaType);
  return builder;
}","/** 
 * Set an Application Type to the request depending on a parameter and its corresponding  {@code MediaType}.
 * @param targetURL Current target url.
 * @param applicationType ApplicationType to set.
 * @return
 */
public Builder setApplicationType(WebTarget targetURL,String applicationType){
  Builder builder;
  if (""String_Node_Str"".equals(applicationType)) {
    mediaType=MediaType.TEXT_PLAIN_TYPE;
  }
 else {
    mediaType=MediaType.APPLICATION_JSON_TYPE;
  }
  builder=targetURL.request(mediaType);
  return builder;
}",0.9953139643861292
116847,"/** 
 * {@inheritDoc}
 * @param context
 */
@Override public void execute(JobExecutionContext context) throws JobExecutionException {
  SchedulerContext schedulerContext=null;
  try {
    schedulerContext=context.getScheduler().getContext();
    initProperties(schedulerContext);
    WebTarget target=client.target((String)properties.get(URL));
    Builder request=setApplicationType(target,(String)properties.get(APPLICATION_TYPE));
    request=addHeaders(request,(String)properties.get(HEADERS));
    Response response=null;
    final String method=(String)properties.get(METHOD);
    if (""String_Node_Str"".equals(method)) {
      response=request.post(Entity.entity((String)properties.get(APPLICATION_TYPE),mediaType));
    }
 else {
      response=request.get();
    }
    if (response != null) {
      String responseString=response.readEntity(String.class);
      queue.add(EventBuilder.withBody(responseString,Charsets.UTF_8));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * {@inheritDoc}
 * @param context
 */
@Override public void execute(JobExecutionContext context) throws JobExecutionException {
  this.context=context;
  SchedulerContext schedulerContext=null;
  try {
    log.debug(""String_Node_Str"");
    schedulerContext=context.getScheduler().getContext();
    initProperties(schedulerContext);
    WebTarget target=client.target(properties.get(URL));
    Builder request=setApplicationType(target,properties.get(APPLICATION_TYPE));
    request=addHeaders(request,properties.get(HEADERS));
    Response response=null;
    final String method=properties.get(METHOD);
    if (""String_Node_Str"".equals(method)) {
      response=request.post(Entity.entity(properties.get(APPLICATION_TYPE),mediaType));
    }
 else {
      response=request.get();
    }
    if (response != null) {
      String responseString=response.readEntity(String.class);
      queue.add(EventBuilder.withBody(responseString,Charsets.UTF_8,responseToHeaders(response.getStringHeaders())));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9297820823244553
116848,"/** 
 * {@inheritDoc}
 */
@Override public void stop(){
  client.close();
}","/** 
 * {@inheritDoc}
 */
@Override public void stop(){
  client.close();
  try {
    scheduler.interrupt(jobDetail.getKey());
  }
 catch (  UnableToInterruptJobException e) {
    e.printStackTrace();
  }
}",0.5266903914590747
116849,"/** 
 * {@inheritDoc}
 */
@Override public void start(){
  client=ClientBuilder.newClient();
  JobDetail job=JobBuilder.newJob(RequestJob.class).withIdentity(DEFAULT_JOBNAME).build();
  Trigger trigger=TriggerBuilder.newTrigger().withIdentity(DEFAULT_JOBNAME).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(frequency).repeatForever()).build();
  Scheduler scheduler;
  try {
    scheduler=new StdSchedulerFactory().getScheduler();
    scheduler.getContext().put(""String_Node_Str"",client);
    scheduler.getContext().put(""String_Node_Str"",queue);
    scheduler.getContext().put(""String_Node_Str"",properties);
    scheduler.start();
    scheduler.scheduleJob(job,trigger);
  }
 catch (  SchedulerException e) {
    e.printStackTrace();
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void start(){
  this.jobDetail=JobBuilder.newJob(RequestJob.class).withIdentity(DEFAULT_JOBNAME).build();
  Trigger trigger=TriggerBuilder.newTrigger().withIdentity(DEFAULT_JOBNAME).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(frequency).repeatForever()).build();
  try {
    scheduler=new StdSchedulerFactory().getScheduler();
    scheduler.getContext().put(""String_Node_Str"",client);
    scheduler.getContext().put(""String_Node_Str"",queue);
    scheduler.getContext().put(""String_Node_Str"",properties);
    scheduler.start();
    scheduler.scheduleJob(jobDetail,trigger);
  }
 catch (  SchedulerException e) {
    e.printStackTrace();
  }
}",0.9486486486486486
116850,"/** 
 * {@inheritDoc}
 * @param context
 */
@Override public void configure(Context context){
  frequency=context.getInteger(CONF_FREQUENCY,DEFAULT_FREQUENCY);
  properties.put(CONF_URL,context.getString(CONF_URL));
  properties.put(CONF_METHOD,context.getString(CONF_METHOD,DEFAULT_METHOD).toUpperCase());
  properties.put(CONF_APPLICATION_TYPE,context.getString(CONF_APPLICATION_TYPE,DEFAULT_APPLICATION_TYPE).toUpperCase());
  properties.put(CONF_HEADERS,context.getString(CONF_HEADERS,DEFAULT_HEADERS));
  properties.put(CONF_BODY,context.getString(CONF_BODY,DEFAULT_BODY));
  if (queue != null) {
    log.error(""String_Node_Str"");
  }
}","/** 
 * {@inheritDoc}
 * @param context
 */
@Override public void configure(Context context){
  frequency=context.getInteger(CONF_FREQUENCY,DEFAULT_FREQUENCY);
  properties.put(CONF_URL,context.getString(CONF_URL));
  properties.put(CONF_METHOD,context.getString(CONF_METHOD,DEFAULT_METHOD).toUpperCase());
  properties.put(CONF_APPLICATION_TYPE,context.getString(CONF_APPLICATION_TYPE,DEFAULT_APPLICATION_TYPE).toUpperCase());
  properties.put(CONF_HEADERS,context.getString(CONF_HEADERS,DEFAULT_HEADERS));
  properties.put(CONF_BODY,context.getString(CONF_BODY,DEFAULT_BODY));
}",0.95004095004095
116851,"@Override public void reset() throws IOException {
  ensureOpen();
  int index=markIt.previousIndex();
  currentIt=index >= 0 ? list.listIterator(markIt.previousIndex()) : list.listIterator(0);
  currentIt.next();
}","@Override public void reset() throws IOException {
  ensureOpen();
  int index=markIt.previousIndex();
  currentIt=index >= 0 ? list.listIterator(markIt.previousIndex()) : list.listIterator(0);
  if (currentIt.hasNext()) {
    currentIt.next();
  }
}",0.8473118279569892
116852,"@Override public void mark() throws IOException {
  ensureOpen();
  int index=currentIt.previousIndex();
  markIt=index >= 0 ? list.listIterator(currentIt.previousIndex()) : list.listIterator(0);
  markIt.next();
}","@Override public void mark() throws IOException {
  ensureOpen();
  int index=currentIt.previousIndex();
  markIt=index >= 0 ? list.listIterator(currentIt.previousIndex()) : list.listIterator(0);
  if (markIt.hasNext()) {
    markIt.next();
  }
}",0.8652173913043478
116853,"@Override public Object getMetadata(){
  return null;
}","@Override public Object getMetadata(){
  try {
    Object[] ports=_state.snapshot().keySet().toArray();
    return PersistentVector.create(ports);
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}",0.3781818181818182
116854,"public Drawer(final DrawerProxy proxy){
  super(proxy);
  try {
    drawable_ic_drawer=TiRHelper.getResource(""String_Node_Str"");
    string_drawer_open=TiRHelper.getResource(""String_Node_Str"");
    string_drawer_close=TiRHelper.getResource(""String_Node_Str"");
    layout_content_fragment=TiRHelper.getResource(""String_Node_Str"");
    layout_drawer_main=TiRHelper.getResource(""String_Node_Str"");
    id_content_frame=TiRHelper.getResource(""String_Node_Str"");
  }
 catch (  ResourceNotFoundException e) {
    Log.e(TAG,""String_Node_Str"");
  }
  ActionBarActivity activity=(ActionBarActivity)proxy.getActivity();
  LayoutInflater inflater=LayoutInflater.from(activity);
  layout=(DrawerLayout)inflater.inflate(layout_drawer_main,null,false);
  setNativeView(layout);
  activity.getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  activity.getSupportActionBar().setHomeButtonEnabled(false);
  mDrawerToggle=new ActionBarDrawerToggle(activity,layout,drawable_ic_drawer,string_drawer_open,string_drawer_close){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        if (drawerView == menu) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (drawerView == filter) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        if (drawerView == menu) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (drawerView == filter) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      super.onDrawerSlide(drawerView,slideOffset);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        options.put(""String_Node_Str"",slideOffset);
        if (drawerView == menu) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (drawerView == filter) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
    @Override public void onDrawerStateChanged(    int newState){
      super.onDrawerStateChanged(newState);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        options.put(""String_Node_Str"",newState);
        options.put(""String_Node_Str"",(newState == 0 ? 1 : 0));
        options.put(""String_Node_Str"",(newState == 1 ? 1 : 0));
        options.put(""String_Node_Str"",(newState == 2 ? 1 : 0));
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
  }
;
  layout.setDrawerListener(mDrawerToggle);
  layout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
}","public Drawer(final DrawerProxy proxy){
  super(proxy);
  try {
    drawable_ic_drawer=TiRHelper.getResource(""String_Node_Str"");
    string_drawer_open=TiRHelper.getResource(""String_Node_Str"");
    string_drawer_close=TiRHelper.getResource(""String_Node_Str"");
    layout_content_fragment=TiRHelper.getResource(""String_Node_Str"");
    layout_drawer_main=TiRHelper.getResource(""String_Node_Str"");
    id_content_frame=TiRHelper.getResource(""String_Node_Str"");
  }
 catch (  ResourceNotFoundException e) {
    Log.e(TAG,""String_Node_Str"");
  }
  ActionBarActivity activity=(ActionBarActivity)proxy.getActivity();
  LayoutInflater inflater=LayoutInflater.from(activity);
  layout=(DrawerLayout)inflater.inflate(layout_drawer_main,null,false);
  setNativeView(layout);
  activity.getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  activity.getSupportActionBar().setHomeButtonEnabled(true);
  mDrawerToggle=new ActionBarDrawerToggle(activity,layout,drawable_ic_drawer,string_drawer_open,string_drawer_close){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        if (drawerView == menu) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (drawerView == filter) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        if (drawerView == menu) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (drawerView == filter) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      super.onDrawerSlide(drawerView,slideOffset);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        options.put(""String_Node_Str"",slideOffset);
        if (drawerView == menu) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (drawerView == filter) {
          options.put(""String_Node_Str"",""String_Node_Str"");
        }
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
    @Override public void onDrawerStateChanged(    int newState){
      super.onDrawerStateChanged(newState);
      if (proxy.hasListeners(""String_Node_Str"")) {
        KrollDict options=new KrollDict();
        options.put(""String_Node_Str"",newState);
        options.put(""String_Node_Str"",(newState == 0 ? 1 : 0));
        options.put(""String_Node_Str"",(newState == 1 ? 1 : 0));
        options.put(""String_Node_Str"",(newState == 2 ? 1 : 0));
        proxy.fireEvent(""String_Node_Str"",options);
      }
    }
  }
;
  layout.setDrawerListener(mDrawerToggle);
  layout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
}",0.9989064208717388
116855,"@Override public void propertyChanged(String key,Object oldValue,Object newValue,KrollProxy proxy){
  Log.d(TAG,""String_Node_Str"" + key + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ newValue);
  if (key.equals(PROPERTY_LEFT_VIEW)) {
    if (newValue == this.leftView)     return;
    TiViewProxy newProxy=null;
    int index=0;
    if (this.leftView != null) {
      index=this.menu.indexOfChild(this.leftView.getOrCreateView().getNativeView());
    }
    if (newValue != null && newValue instanceof TiViewProxy) {
      if (newValue instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      newProxy=(TiViewProxy)newValue;
      initLeftDrawer();
      this.menu.addView(newProxy.getOrCreateView().getOuterView(),index);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
    if (this.leftView != null) {
      this.menu.removeView(this.leftView.getOrCreateView().getNativeView());
    }
    this.leftView=newProxy;
  }
 else   if (key.equals(PROPERTY_RIGHT_VIEW)) {
    if (newValue == this.rightView)     return;
    TiViewProxy newProxy=null;
    int index=0;
    if (this.rightView != null) {
      index=this.menu.indexOfChild(this.rightView.getOrCreateView().getNativeView());
    }
    if (newValue != null && newValue instanceof TiViewProxy) {
      if (newValue instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      newProxy=(TiViewProxy)newValue;
      initRightDrawer();
      this.filter.addView(newProxy.getOrCreateView().getOuterView(),index);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
    if (this.rightView != null) {
      this.filter.removeView(this.rightView.getOrCreateView().getNativeView());
    }
    this.rightView=newProxy;
  }
 else   if (key.equals(PROPERTY_CENTER_VIEW)) {
    TiViewProxy newProxy=(TiViewProxy)newValue;
    replaceCenterView(newProxy);
  }
 else   if (key.equals(PROPERTY_LEFT_VIEW_WIDTH)) {
    menuWidth=getDevicePixels(newValue);
    Log.d(TAG,""String_Node_Str"" + newValue + ""String_Node_Str""+ menuWidth);
    initLeftDrawer();
    LayoutParams menuLayout=new LayoutParams(menuWidth,LayoutParams.MATCH_PARENT);
    menuLayout.gravity=Gravity.LEFT;
    this.menu.setLayoutParams(menuLayout);
  }
 else   if (key.equals(PROPERTY_RIGHT_VIEW_WIDTH)) {
    filterWidth=getDevicePixels(newValue);
    Log.d(TAG,""String_Node_Str"" + newValue + ""String_Node_Str""+ filterWidth);
    initRightDrawer();
    LayoutParams filterLayout=new LayoutParams(filterWidth,LayoutParams.MATCH_PARENT);
    filterLayout.gravity=Gravity.RIGHT;
    this.filter.setLayoutParams(filterLayout);
  }
 else {
    super.propertyChanged(key,oldValue,newValue,proxy);
  }
}","@Override public void propertyChanged(String key,Object oldValue,Object newValue,KrollProxy proxy){
  Log.d(TAG,""String_Node_Str"" + key + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ newValue);
  if (key.equals(PROPERTY_LEFT_VIEW)) {
    if (newValue == this.leftView)     return;
    TiViewProxy newProxy=null;
    int index=0;
    if (this.leftView != null) {
      index=this.menu.indexOfChild(this.leftView.getOrCreateView().getNativeView());
    }
    if (newValue != null && newValue instanceof TiViewProxy) {
      if (newValue instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      newProxy=(TiViewProxy)newValue;
      initLeftDrawer();
      this.menu.addView(newProxy.getOrCreateView().getOuterView(),index);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
    if (this.leftView != null) {
      this.menu.removeView(this.leftView.getOrCreateView().getNativeView());
    }
    this.leftView=newProxy;
  }
 else   if (key.equals(PROPERTY_RIGHT_VIEW)) {
    if (newValue == this.rightView)     return;
    TiViewProxy newProxy=null;
    int index=0;
    if (this.rightView != null) {
      index=this.filter.indexOfChild(this.rightView.getOrCreateView().getNativeView());
    }
    if (newValue != null && newValue instanceof TiViewProxy) {
      if (newValue instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      newProxy=(TiViewProxy)newValue;
      initRightDrawer();
      this.filter.addView(newProxy.getOrCreateView().getOuterView(),index);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
    if (this.rightView != null) {
      this.filter.removeView(this.rightView.getOrCreateView().getNativeView());
    }
    this.rightView=newProxy;
  }
 else   if (key.equals(PROPERTY_CENTER_VIEW)) {
    TiViewProxy newProxy=(TiViewProxy)newValue;
    replaceCenterView(newProxy);
  }
 else   if (key.equals(PROPERTY_LEFT_VIEW_WIDTH)) {
    menuWidth=getDevicePixels(newValue);
    Log.d(TAG,""String_Node_Str"" + newValue + ""String_Node_Str""+ menuWidth);
    initLeftDrawer();
    LayoutParams menuLayout=new LayoutParams(menuWidth,LayoutParams.MATCH_PARENT);
    menuLayout.gravity=Gravity.LEFT;
    this.menu.setLayoutParams(menuLayout);
  }
 else   if (key.equals(PROPERTY_RIGHT_VIEW_WIDTH)) {
    filterWidth=getDevicePixels(newValue);
    Log.d(TAG,""String_Node_Str"" + newValue + ""String_Node_Str""+ filterWidth);
    initRightDrawer();
    LayoutParams filterLayout=new LayoutParams(filterWidth,LayoutParams.MATCH_PARENT);
    filterLayout.gravity=Gravity.RIGHT;
    this.filter.setLayoutParams(filterLayout);
  }
 else {
    super.propertyChanged(key,oldValue,newValue,proxy);
  }
}",0.99813223757938
116856,"@Override public void processProperties(KrollDict d){
  if (d.containsKey(PROPERTY_LEFT_VIEW)) {
    Object leftView=d.get(PROPERTY_LEFT_VIEW);
    if (leftView != null && leftView instanceof TiViewProxy) {
      if (leftView instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      this.leftView=(TiViewProxy)leftView;
      this.menu.addView(this.leftView.getOrCreateView().getOuterView());
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  if (d.containsKey(PROPERTY_CENTER_VIEW)) {
    Object centerView=d.get(PROPERTY_CENTER_VIEW);
    if (centerView != null && centerView instanceof TiViewProxy) {
      if (centerView instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      this.centerView=(TiViewProxy)centerView;
      this.content.addView(this.centerView.getOrCreateView().getOuterView());
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  if (d.containsKey(PROPERTY_LEFT_VIEW_WIDTH)) {
    menuWidth=getDevicePixels(d.get(PROPERTY_LEFT_VIEW_WIDTH));
    Log.e(TAG,""String_Node_Str"" + d.get(PROPERTY_LEFT_VIEW_WIDTH) + ""String_Node_Str""+ menuWidth);
    menu.getLayoutParams().width=menuWidth;
  }
  super.processProperties(d);
}","@Override public void processProperties(KrollDict d){
  if (d.containsKey(PROPERTY_LEFT_VIEW)) {
    Object leftView=d.get(PROPERTY_LEFT_VIEW);
    if (leftView != null && leftView instanceof TiViewProxy) {
      if (leftView instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      this.leftView=(TiViewProxy)leftView;
      this.menu.addView(this.leftView.getOrCreateView().getOuterView());
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  if (d.containsKey(PROPERTY_CENTER_VIEW)) {
    Object centerView=d.get(PROPERTY_CENTER_VIEW);
    if (centerView != null && centerView instanceof TiViewProxy) {
      if (centerView instanceof WindowProxy)       throw new IllegalStateException(""String_Node_Str"");
      this.centerView=(TiViewProxy)centerView;
      this.content.addView(this.centerView.getOrCreateView().getOuterView());
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  if (d.containsKey(PROPERTY_LEFT_VIEW_WIDTH)) {
    menuWidth=getDevicePixels(d.get(PROPERTY_LEFT_VIEW_WIDTH));
    Log.d(TAG,""String_Node_Str"" + d.get(PROPERTY_LEFT_VIEW_WIDTH) + ""String_Node_Str""+ menuWidth);
    menu.getLayoutParams().width=menuWidth;
  }
  super.processProperties(d);
}",0.9991843393148452
116857,"Php_srl_itm_ary Parse_array(int bgn,int subs_len){
  Php_srl_itm_ary rv=factory.Ary(bgn,bgn);
  for (int i=0; i < subs_len; i++) {
    Php_srl_itm_kv kv=factory.Kv();
    Php_srl_itm key_itm=Parse_itm(pos);
    kv.Key_(key_itm);
    Php_srl_itm val_itm=Parse_itm(pos);
    kv.Val_(val_itm);
    rv.Subs_add(kv);
  }
  return rv;
}","Php_srl_itm_ary Parse_array(int bgn,int subs_len){
  Php_srl_itm_ary rv=factory.Ary(bgn,bgn);
  for (int i=0; i < subs_len; i++) {
    Php_srl_itm_kv kv=factory.Kv();
    Php_srl_itm key_itm=Parse_itm(pos);
    if (key_itm.Tid() == Php_srl_itm_.Tid_string && String_.Eq(Php_srl_parser.NULL_ARRAY_ITEM,(String)key_itm.Val())) {
      rv.Subs_add(null);
      continue;
    }
    kv.Key_(key_itm);
    Php_srl_itm val_itm=Parse_itm(pos);
    kv.Val_(val_itm);
    rv.Subs_add(kv);
  }
  return rv;
}",0.7980652962515115
116858,"Keyval Xto_kv(Php_srl_itm_kv itm){
  Php_srl_itm itm_key=itm.Key();
  Object key=itm_key == null ? null : itm_key.Val();
  Php_srl_itm itm_val=itm.Val();
  Object val=null;
switch (itm_val.Tid()) {
case Php_srl_itm_.Tid_array:
    Php_srl_itm_ary ary=(Php_srl_itm_ary)itm_val;
  val=Xto_kv_ary(ary);
break;
case Php_srl_itm_.Tid_function:
val=new gplx.xowa.xtns.scribunto.Scrib_lua_proc(Object_.Xto_str_strict_or_null_mark(key),Int_.Cast(itm_val.Val()));
break;
default :
val=itm_val.Val();
break;
}
return Keyval_.obj_(key,val);
}","Keyval Xto_kv(Php_srl_itm_kv itm){
  if (itm == null)   return null;
  Php_srl_itm itm_key=itm.Key();
  Object key=itm_key == null ? null : itm_key.Val();
  Php_srl_itm itm_val=itm.Val();
  Object val=null;
switch (itm_val.Tid()) {
case Php_srl_itm_.Tid_array:
    Php_srl_itm_ary ary=(Php_srl_itm_ary)itm_val;
  val=Xto_kv_ary(ary);
break;
case Php_srl_itm_.Tid_function:
val=new gplx.xowa.xtns.scribunto.Scrib_lua_proc(Object_.Xto_str_strict_or_null_mark(key),Int_.Cast(itm_val.Val()));
break;
default :
val=itm_val.Val();
break;
}
return Keyval_.obj_(key,val);
}",0.968978102189781
116859,"public static Xot_invk_mock new_(byte defn_tid,int idx_adj,byte[] frame_ttl,Keyval... args){
  Xot_invk_mock rv=new Xot_invk_mock(defn_tid,idx_adj,frame_ttl);
  int len=args.length;
  for (int i=0; i < len; i++) {
    Keyval kv=args[i];
    String kv_key_str=kv.Key();
    Object kv_key_obj=kv.Key_as_obj();
    Arg_nde_tkn_mock nde_tkn=null;
    if (Type_.Eq_by_obj(kv_key_obj,Int_.Cls_ref_type))     nde_tkn=new Arg_nde_tkn_mock(null,kv.Val_to_str_or_empty());
 else     if (Type_.Eq_by_obj(kv.Val(),Bool_.Cls_ref_type)) {
      boolean kv_val_bool=Bool_.Cast(kv.Val());
      if (kv_val_bool)       nde_tkn=new Arg_nde_tkn_mock(kv_key_str,""String_Node_Str"");
 else       continue;
    }
 else     nde_tkn=new Arg_nde_tkn_mock(kv_key_str,kv.Val_to_str_or_empty());
    rv.args.Add_if_dupe_use_nth(Bry_.new_u8(kv_key_str),nde_tkn);
  }
  return rv;
}","public static Xot_invk_mock new_(byte defn_tid,int idx_adj,byte[] frame_ttl,Keyval... args){
  Xot_invk_mock rv=new Xot_invk_mock(defn_tid,idx_adj,frame_ttl);
  int len=args.length;
  for (int i=0; i < len; i++) {
    Keyval kv=args[i];
    if (kv == null)     continue;
    String kv_key_str=kv.Key();
    Object kv_key_obj=kv.Key_as_obj();
    Arg_nde_tkn_mock nde_tkn=null;
    if (Type_.Eq_by_obj(kv_key_obj,Int_.Cls_ref_type))     nde_tkn=new Arg_nde_tkn_mock(null,kv.Val_to_str_or_empty());
 else     if (Type_.Eq_by_obj(kv.Val(),Bool_.Cls_ref_type)) {
      boolean kv_val_bool=Bool_.Cast(kv.Val());
      if (kv_val_bool)       nde_tkn=new Arg_nde_tkn_mock(kv_key_str,""String_Node_Str"");
 else       continue;
    }
 else     nde_tkn=new Arg_nde_tkn_mock(kv_key_str,kv.Val_to_str_or_empty());
    rv.args.Add_if_dupe_use_nth(Bry_.new_u8(kv_key_str),nde_tkn);
  }
  return rv;
}",0.9804147465437788
116860,"private void Bld_kv_ary(Bry_bfr bfr,Keyval[] ary){
  int len=ary.length;
  bfr.Add_str_a7(""String_Node_Str"").Add_int_variable(len).Add_str_a7(""String_Node_Str"");
  for (int i=0; i < len; i++) {
    Keyval kv=ary[i];
    Bld_obj(bfr,kv.Key_as_obj());
    Bld_obj(bfr,kv.Val());
  }
  bfr.Add_byte(Byte_ascii.Curly_end);
}","private void Bld_kv_ary(Bry_bfr bfr,Keyval[] ary){
  int len=ary.length;
  bfr.Add_str_a7(""String_Node_Str"").Add_int_variable(len).Add_str_a7(""String_Node_Str"");
  for (int i=0; i < len; i++) {
    Keyval kv=ary[i];
    if (kv == null) {
      Bld_obj(bfr,gplx.langs.phps.Php_srl_parser.NULL_ARRAY_ITEM);
    }
 else {
      Bld_obj(bfr,kv.Key_as_obj());
      Bld_obj(bfr,kv.Val());
    }
  }
  bfr.Add_byte(Byte_ascii.Curly_end);
}",0.849933598937583
116861,"public int compare(Object lhsObj,Object rhsObj){
  Keyval lhs=(Keyval)lhsObj;
  Keyval rhs=(Keyval)rhsObj;
  Object lhs_key=lhs.Key_as_obj();
  Object rhs_key=rhs.Key_as_obj();
  boolean lhs_is_int=Type_.Eq(lhs_key.getClass(),Int_.Cls_ref_type);
  boolean rhs_is_int=Type_.Eq(rhs_key.getClass(),Int_.Cls_ref_type);
  if (lhs_is_int != rhs_is_int)   return lhs_is_int ? CompareAble_.Less : CompareAble_.More;
  if (lhs_is_int)   return Int_.Compare(Int_.Cast(lhs_key),Int_.Cast(rhs_key));
 else   return String_.Compare(String_.cast(lhs_key),String_.cast(rhs_key));
}","public int compare(Object lhsObj,Object rhsObj){
  Keyval lhs=(Keyval)lhsObj;
  Keyval rhs=(Keyval)rhsObj;
  if (lhs == null && rhs == null)   return CompareAble_.Same;
 else   if (lhs == null)   return CompareAble_.More;
 else   if (rhs == null)   return CompareAble_.Less;
  Object lhs_key=lhs.Key_as_obj();
  Object rhs_key=rhs.Key_as_obj();
  boolean lhs_is_int=Type_.Eq(lhs_key.getClass(),Int_.Cls_ref_type);
  boolean rhs_is_int=Type_.Eq(rhs_key.getClass(),Int_.Cls_ref_type);
  if (lhs_is_int != rhs_is_int)   return lhs_is_int ? CompareAble_.Less : CompareAble_.More;
  if (lhs_is_int)   return Int_.Compare(Int_.Cast(lhs_key),Int_.Cast(rhs_key));
 else   return String_.Compare(String_.cast(lhs_key),String_.cast(rhs_key));
}",0.8707692307692307
116862,"public static byte[] Mid_safe(byte[] src,int bgn,int end){
  if (src == null)   return null;
  int src_len=src.length;
  if (bgn < 0)   bgn=0;
  if (end >= src_len)   end=src_len;
  if (bgn > end)   bgn=end;
 else   if (end < bgn)   end=bgn;
  return Mid(src,bgn,end);
}","public static byte[] Mid_safe(byte[] src,int bgn,int end){
  if (src == null)   return null;
  int src_len=src.length;
  if (bgn < 0)   bgn=0;
 else   if (bgn >= src_len)   bgn=src_len;
  if (end < 0)   end=0;
 else   if (end >= src_len)   end=src_len;
  if (bgn > end)   bgn=end;
 else   if (end < bgn)   end=bgn;
  return Mid(src,bgn,end);
}",0.7830342577487766
116863,"private static void Ary__to_str__nest(Bry_bfr bfr,int indent,Keyval[] ary){
  int len=ary.length;
  for (int i=0; i < len; ++i) {
    Keyval itm=ary[i];
    if (indent > 0)     bfr.Add_byte_repeat(Byte_ascii.Space,indent * 2);
    bfr.Add_str_u8(Object_.Xto_str_strict_or_empty(itm.Key())).Add_byte_eq();
    Object val=itm.Val();
    if (val == null)     bfr.Add_str_a7(String_.Null_mark);
 else {
      Class<?> val_type=Type_.Type_by_obj(val);
      if (Type_.Eq(val_type,Keyval[].class)) {
        bfr.Add_byte_nl();
        Ary__to_str__nest(bfr,indent + 1,(Keyval[])val);
        continue;
      }
 else       if (Type_.Eq(val_type,Bool_.Cls_ref_type)) {
        boolean val_as_bool=Bool_.Cast(val);
        bfr.Add(val_as_bool ? Bool_.True_bry : Bool_.False_bry);
      }
 else       bfr.Add_str_u8(Object_.Xto_str_strict_or_null_mark(val));
    }
    bfr.Add_byte_nl();
  }
}","public static String Ary__to_str__nest(Keyval... ary){
  Bry_bfr bfr=Bry_bfr_.New();
  Ary__to_str__nest__obj(bfr,0,true,ary);
  return bfr.To_str_and_clear();
}",0.210727969348659
116864,"public Xow_xtn_mgr Ctor_by_app(Xoae_app app){
  Add(app,new Cite_xtn_mgr());
  Add(app,new Imap_xtn_mgr());
  Add(app,new Sites_xtn_mgr());
  Add(app,new Insider_xtn_mgr());
  Add(app,new Indicator_xtn_mgr());
  Add(app,new Pp_xtn_mgr());
  Add(app,new Wdata_xtn_mgr());
  Add(app,new Pgbnr_xtn_mgr());
  Add(app,new gplx.xowa.xtns.scribunto.Scrib_xtn_mgr());
  Add(app,new gplx.xowa.xtns.gallery.Gallery_xtn_mgr());
  Add(app,new gplx.xowa.xtns.poems.Poem_xtn_mgr());
  Add(app,new gplx.xowa.xtns.hieros.Hiero_xtn_mgr());
  Add(app,new gplx.xowa.xtns.scores.Score_xtn_mgr());
  Add(app,new gplx.xowa.xtns.listings.Listing_xtn_mgr());
  Add(app,new gplx.xowa.xtns.titleBlacklists.Blacklist_xtn_mgr());
  Add(app,new gplx.xowa.xtns.pfuncs.scribunto.Pfunc_xtn_mgr());
  Add(app,new gplx.xowa.xtns.flaggedRevs.Flagged_revs_xtn_mgr());
  return this;
}","public Xow_xtn_mgr Ctor_by_app(Xoae_app app){
  Add(app,new Cite_xtn_mgr());
  Add(app,new Imap_xtn_mgr());
  Add(app,new Sites_xtn_mgr());
  Add(app,new Insider_xtn_mgr());
  Add(app,new Indicator_xtn_mgr());
  Add(app,new Pp_xtn_mgr());
  Add(app,new Wdata_xtn_mgr());
  Add(app,new Pgbnr_xtn_mgr());
  Add(app,new gplx.xowa.xtns.scribunto.Scrib_xtn_mgr());
  Add(app,new gplx.xowa.xtns.gallery.Gallery_xtn_mgr());
  Add(app,new gplx.xowa.xtns.poems.Poem_xtn_mgr());
  Add(app,new gplx.xowa.xtns.hieros.Hiero_xtn_mgr());
  Add(app,new gplx.xowa.xtns.scores.Score_xtn_mgr());
  Add(app,new gplx.xowa.xtns.listings.Listing_xtn_mgr());
  Add(app,new gplx.xowa.xtns.titleBlacklists.Blacklist_xtn_mgr());
  Add(app,new gplx.xowa.xtns.pfuncs.scribunto.Pfunc_xtn_mgr());
  Add(app,new gplx.xowa.xtns.flaggedRevs.Flagged_revs_xtn_mgr());
  Add(app,new gplx.xowa.xtns.jsonConfigs.scribunto.Jscfg_xtn_mgr());
  return this;
}",0.9575070821529744
116865,"public static LuaValue Obj_to_lua_val(Luaj_server server,Object o){
  if (o == null)   return LuaValue.NIL;
  Class<?> c=Type_.Type_by_obj(o);
  if (Object_.Eq(c,Bool_.Cls_ref_type))   return LuaValue.valueOf((Boolean)o);
 else   if (Object_.Eq(c,Byte_.Cls_ref_type))   return LuaValue.valueOf((Byte)o);
 else   if (Object_.Eq(c,Int_.Cls_ref_type))   return LuaValue.valueOf((Integer)o);
 else   if (Object_.Eq(c,String_.Cls_ref_type))   return LuaValue.valueOf((String)o);
 else   if (Object_.Eq(c,Double_.Cls_ref_type))   return LuaValue.valueOf((Double)o);
 else   if (Object_.Eq(c,byte[].class))   return LuaValue.valueOf(String_.new_u8((byte[])o));
 else   if (Object_.Eq(c,Keyval.class))   return Kv_ary_to_lua_tbl(server,(Keyval)o);
 else   if (Object_.Eq(c,Keyval[].class))   return Kv_ary_to_lua_tbl(server,(Keyval[])o);
 else   if (Object_.Eq(c,Long_.Cls_ref_type))   return LuaValue.valueOf((Long)o);
 else   if (Object_.Eq(c,Scrib_lua_proc.class))   return server.Get_closure_by_id(((Scrib_lua_proc)o).Id());
 else   if (Object_.Eq(c,Float_.Cls_ref_type))   return LuaValue.valueOf((Float)o);
 else   if (Object_.Eq(c,Char_.Cls_ref_type))   return LuaValue.valueOf((Character)o);
 else   if (Object_.Eq(c,Short_.Cls_ref_type))   return LuaValue.valueOf((Short)o);
 else   if (Object_.Eq(c,Decimal_adp.class))   return LuaValue.valueOf(((Decimal_adp)o).To_double());
 else   return LuaValue.NIL;
}","public static LuaValue Obj_to_lua_val(Luaj_server server,Object o){
  if (o == null)   return LuaValue.NIL;
  Class<?> c=Type_.Type_by_obj(o);
  if (Object_.Eq(c,Bool_.Cls_ref_type))   return LuaValue.valueOf((Boolean)o);
 else   if (Object_.Eq(c,Byte_.Cls_ref_type))   return LuaValue.valueOf((Byte)o);
 else   if (Object_.Eq(c,Int_.Cls_ref_type))   return LuaValue.valueOf((Integer)o);
 else   if (Object_.Eq(c,String_.Cls_ref_type))   return LuaValue.valueOf((String)o);
 else   if (Object_.Eq(c,Double_.Cls_ref_type))   return LuaValue.valueOf((Double)o);
 else   if (Object_.Eq(c,byte[].class))   return LuaValue.valueOf(String_.new_u8((byte[])o));
 else   if (Object_.Eq(c,Keyval.class))   return Make_lua_tbl_by_kv_ary(server,(Keyval)o);
 else   if (Object_.Eq(c,Keyval[].class))   return Make_lua_tbl_by_kv_ary(server,(Keyval[])o);
 else   if (Object_.Eq(c,Object[].class))   return Make_lua_tbl_by_obj_ary(server,((Object[])o));
 else   if (Object_.Eq(c,Long_.Cls_ref_type))   return LuaValue.valueOf((Long)o);
 else   if (Object_.Eq(c,Scrib_lua_proc.class))   return server.Get_closure_by_id(((Scrib_lua_proc)o).Id());
 else   if (Object_.Eq(c,Float_.Cls_ref_type))   return LuaValue.valueOf((Float)o);
 else   if (Object_.Eq(c,Char_.Cls_ref_type))   return LuaValue.valueOf((Character)o);
 else   if (Object_.Eq(c,Short_.Cls_ref_type))   return LuaValue.valueOf((Short)o);
 else   if (Object_.Eq(c,Decimal_adp.class))   return LuaValue.valueOf(((Decimal_adp)o).To_double());
 else   return LuaValue.NIL;
}",0.902872777017784
116866,"public boolean GetEntity(Scrib_proc_args args,Scrib_proc_rslt rslt){
  Wdata_doc wdoc=Get_wdoc_or_null(args,core);
  if (wdoc == null)   return rslt.Init_ary_empty();
  Wbase_prop_mgr prop_mgr=core.Wiki().Appe().Wiki_mgr().Wdata_mgr().Prop_mgr();
  return rslt.Init_obj(Scrib_lib_wikibase_srl.Srl(prop_mgr,wdoc,true,false));
}","public boolean GetEntity(Scrib_proc_args args,Scrib_proc_rslt rslt){
  Wdata_doc wdoc=Get_wdoc_or_null(args,core);
  if (wdoc == null)   return rslt.Init_obj(Keyval_.Ary_empty);
  Wbase_prop_mgr prop_mgr=core.Wiki().Appe().Wiki_mgr().Wdata_mgr().Prop_mgr();
  return rslt.Init_obj(Scrib_lib_wikibase_srl.Srl(prop_mgr,wdoc,true,false));
}",0.9592760180995475
116867,"public static String Ary_to_str(Keyval... ary){
  String_bldr sb=String_bldr_.new_();
  int len=ary.length;
  for (int i=0; i < len; i++) {
    Keyval itm=ary[i];
    sb.Add(itm.Key()).Add(""String_Node_Str"");
    Object itm_val=itm.Val();
    if (Type_adp_.Eq_typeSafe(itm_val,Keyval[].class))     sb.Add(Ary_to_str((Keyval[])itm_val));
 else     sb.Add(Object_.Xto_str_strict_or_null_mark(itm_val));
    sb.Add_char_nl();
  }
  return sb.To_str();
}","public static String Ary_to_str(Keyval... ary){
  String_bldr sb=String_bldr_.new_();
  int len=ary.length;
  for (int i=0; i < len; i++) {
    Keyval itm=ary[i];
    if (itm == null) {
      sb.Add(""String_Node_Str"");
      continue;
    }
    sb.Add(itm.Key()).Add(""String_Node_Str"");
    Object itm_val=itm.Val();
    if (Type_adp_.Eq_typeSafe(itm_val,Keyval[].class))     sb.Add(Ary_to_str((Keyval[])itm_val));
 else     sb.Add(Object_.Xto_str_strict_or_null_mark(itm_val));
    sb.Add_char_nl();
  }
  return sb.To_str();
}",0.9202453987730062
116868,"public Keyval[] Pull_kv_ary_safe(int idx){
  Keyval[] rv=(Keyval[])Get_or_fail(idx);
  int rv_len=rv.length;
  List_adp list=null;
  int prv_key=-1;
  for (int i=0; i < rv_len; ++i) {
    Keyval kv=rv[i];
    if (kv.Key_tid() == Type_adp_.Tid__int || kv.Key_tid() == Type_adp_.Tid__obj) {
      Object key_obj=kv.Key_as_obj();
      if (key_obj.getClass() == Int_.Cls_ref_type) {
        int expd_key=i + List_adp_.Base1;
        int actl_key=Int_.cast(kv.Key_as_obj());
        if (actl_key != expd_key) {
          if (list == null) {
            list=List_adp_.New();
            for (int j=0; j < i; ++j)             list.Add(rv[j]);
            prv_key=i + 1;
          }
          for (int j=prv_key; j < actl_key; ++j)           list.Add(Keyval_.int_(j,null));
          prv_key=actl_key + 1;
        }
      }
    }
    if (list != null)     list.Add(kv);
  }
  return (list == null) ? rv : (Keyval[])list.To_ary(Keyval.class);
}","public Keyval[] Pull_kv_ary_safe(int idx){
  Keyval[] rv=(Keyval[])Get_or_fail(idx);
  int rv_len=rv.length;
  List_adp list=null;
  int prv_key=-1;
  for (int i=0; i < rv_len; ++i) {
    Keyval kv=rv[i];
    if (kv == null)     continue;
    if (kv.Key_tid() == Type_adp_.Tid__int || kv.Key_tid() == Type_adp_.Tid__obj) {
      Object key_obj=kv.Key_as_obj();
      if (key_obj.getClass() == Int_.Cls_ref_type) {
        int expd_key=i + List_adp_.Base1;
        int actl_key=Int_.cast(kv.Key_as_obj());
        if (actl_key != expd_key) {
          if (list == null) {
            list=List_adp_.New();
            for (int j=0; j < i; ++j)             list.Add(rv[j]);
            prv_key=i + 1;
          }
          for (int j=prv_key; j < actl_key; ++j)           list.Add(Keyval_.int_(j,null));
          prv_key=actl_key + 1;
        }
      }
    }
    if (list != null)     list.Add(kv);
  }
  return (list == null) ? rv : (Keyval[])list.To_ary(Keyval.class);
}",0.9821802935010482
116869,"public boolean ExpandTemplate(Scrib_proc_args args,Scrib_proc_rslt rslt){
  String ttl_str=args.Pull_str(1);
  byte[] ttl_bry=Bry_.new_u8(ttl_str);
  Xoa_ttl ttl=Xoa_ttl.Parse(cur_wiki,ttl_bry);
  if (ttl == null)   return rslt.Init_ary_empty();
  if (!ttl.ForceLiteralLink() && ttl.Ns().Id_is_main())   ttl=Xoa_ttl.Parse(cur_wiki,Bry_.Add(cur_wiki.Ns_mgr().Ns_template().Name_db_w_colon(),ttl_bry));
  Keyval[] args_ary=args.Pull_kv_ary_safe(2);
  byte[] sub_src=null;
  if (ttl.Ns().Id_is_tmpl()) {
    Xot_defn_tmpl tmpl=(Xot_defn_tmpl)core.Wiki().Cache_mgr().Defn_cache().Get_by_key(ttl.Page_db());
    if (tmpl != null)     sub_src=tmpl.Data_raw();
  }
  if (sub_src == null)   sub_src=core.Wiki().Cache_mgr().Page_cache().Get_or_load_as_src(ttl);
  if (sub_src != null) {
    Xot_invk_mock sub_frame=Xot_invk_mock.new_(core.Frame_current().Defn_tid(),0,ttl.Full_txt_w_ttl_case(),args_ary);
    Xot_defn_tmpl transclude_tmpl=ctx.Wiki().Parser_mgr().Main().Parse_text_to_defn_obj(ctx,ctx.Tkn_mkr(),ttl.Ns(),ttl.Page_db(),sub_src);
    Bry_bfr sub_bfr=cur_wiki.Utl__bfr_mkr().Get_k004();
    transclude_tmpl.Tmpl_evaluate(ctx,sub_frame,sub_bfr);
    return rslt.Init_obj(sub_bfr.To_str_and_rls());
  }
 else {
    return rslt.Init_fail(""String_Node_Str"" + ttl_str + ""String_Node_Str"");
  }
}","public boolean ExpandTemplate(Scrib_proc_args args,Scrib_proc_rslt rslt){
  String ttl_str=args.Pull_str(1);
  byte[] ttl_bry=Bry_.new_u8(ttl_str);
  Xoa_ttl ttl=Xoa_ttl.Parse(cur_wiki,ttl_bry);
  if (ttl == null) {
    return rslt.Init_fail(""String_Node_Str"" + ttl_str + ""String_Node_Str"");
  }
  if (!ttl.ForceLiteralLink() && ttl.Ns().Id_is_main())   ttl=Xoa_ttl.Parse(cur_wiki,Bry_.Add(cur_wiki.Ns_mgr().Ns_template().Name_db_w_colon(),ttl_bry));
  Keyval[] args_ary=args.Pull_kv_ary_safe(2);
  byte[] sub_src=null;
  if (ttl.Ns().Id_is_tmpl()) {
    Xot_defn_tmpl tmpl=(Xot_defn_tmpl)core.Wiki().Cache_mgr().Defn_cache().Get_by_key(ttl.Page_db());
    if (tmpl != null)     sub_src=tmpl.Data_raw();
  }
  if (sub_src == null)   sub_src=core.Wiki().Cache_mgr().Page_cache().Get_or_load_as_src(ttl);
  if (sub_src != null) {
    Xot_invk_mock sub_frame=Xot_invk_mock.new_(core.Frame_current().Defn_tid(),0,ttl.Full_txt_w_ttl_case(),args_ary);
    Xot_defn_tmpl transclude_tmpl=ctx.Wiki().Parser_mgr().Main().Parse_text_to_defn_obj(ctx,ctx.Tkn_mkr(),ttl.Ns(),ttl.Page_db(),sub_src);
    Bry_bfr sub_bfr=cur_wiki.Utl__bfr_mkr().Get_k004();
    transclude_tmpl.Tmpl_evaluate(ctx,sub_frame,sub_bfr);
    return rslt.Init_obj(sub_bfr.To_str_and_rls());
  }
 else {
    return rslt.Init_fail(""String_Node_Str"" + ttl_str + ""String_Node_Str"");
  }
}",0.9719484457922668
116870,"@Test public void ExpandTemplate__missing_template(){
  fxt.Init_page(""String_Node_Str"");
  fxt.Test_scrib_proc_err(lib,Scrib_lib_mw.Invk_expandTemplate,Object_.Ary(""String_Node_Str"",""String_Node_Str"",Scrib_kv_utl_.flat_many_(1,""String_Node_Str"")),""String_Node_Str"");
}","@Test public void ExpandTemplate__missing_template(){
  fxt.Init_page(""String_Node_Str"");
  fxt.Test_scrib_proc_err(lib,Scrib_lib_mw.Invk_expandTemplate,Object_.Ary(""String_Node_Str"",""String_Node_Str"",Scrib_kv_utl_.flat_many_(2,""String_Node_Str"")),""String_Node_Str"");
}",0.9962825278810408
116871,"@Override public boolean Tmpl_evaluate(Xop_ctx ctx,byte[] src,Xot_invk caller,Bry_bfr bfr){
  int subs_len=this.Subs_len();
switch (tag.Id()) {
case Xop_xnde_tag_.Tid__noinclude:
    break;
case Xop_xnde_tag_.Tid__includeonly:
  if (!ctx.Only_include_evaluate()) {
    for (int i=0; i < subs_len; i++)     this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,bfr);
  }
break;
case Xop_xnde_tag_.Tid__nowiki:
bfr.Add_byte(Byte_ascii.Lt).Add(Xop_xnde_tag_.Tag__nowiki.Name_bry()).Add_byte(Byte_ascii.Gt);
for (int i=0; i < subs_len; i++) this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,bfr);
bfr.Add_byte(Byte_ascii.Lt).Add_byte(Byte_ascii.Slash).Add(Xop_xnde_tag_.Tag__nowiki.Name_bry()).Add_byte(Byte_ascii.Gt);
break;
case Xop_xnde_tag_.Tid__onlyinclude:
for (int i=0; i < subs_len; i++) this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,bfr);
break;
default :
if (tag.Xtn()) {
Bry_bfr cur_bfr=bfr;
boolean is_tmpl_mode=ctx.Wiki().Parser_mgr().Ctx().Parse_tid() == Xop_parser_tid_.Tid__tmpl;
if (is_tmpl_mode) {
cur_bfr=ctx.Wiki().Utl__bfr_mkr().Get_m001().Reset_if_gt(Io_mgr.Len_mb);
}
cur_bfr.Add_mid(src,tag_open_bgn,tag_open_end);
for (int i=0; i < subs_len; i++) this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,cur_bfr);
cur_bfr.Add_mid(src,tag_close_bgn,tag_close_end);
if (tag_close_bgn == Int_.Min_value) {
cur_bfr.Add(tag.Xtn_end_tag());
cur_bfr.Add(Byte_ascii.Gt_bry);
}
if (is_tmpl_mode) {
byte[] val=cur_bfr.To_bry_and_clear();
byte[] key=ctx.Wiki().Parser_mgr().Uniq_mgr().Add(tag.Name_bry(),val);
bfr.Add(key);
}
}
break;
}
return true;
}","@Override public boolean Tmpl_evaluate(Xop_ctx ctx,byte[] src,Xot_invk caller,Bry_bfr bfr){
  int subs_len=this.Subs_len();
switch (tag.Id()) {
case Xop_xnde_tag_.Tid__noinclude:
    break;
case Xop_xnde_tag_.Tid__includeonly:
  if (!ctx.Only_include_evaluate()) {
    for (int i=0; i < subs_len; i++)     this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,bfr);
  }
break;
case Xop_xnde_tag_.Tid__nowiki:
bfr.Add_byte(Byte_ascii.Lt).Add(Xop_xnde_tag_.Tag__nowiki.Name_bry()).Add_byte(Byte_ascii.Gt);
for (int i=0; i < subs_len; i++) this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,bfr);
bfr.Add_byte(Byte_ascii.Lt).Add_byte(Byte_ascii.Slash).Add(Xop_xnde_tag_.Tag__nowiki.Name_bry()).Add_byte(Byte_ascii.Gt);
break;
case Xop_xnde_tag_.Tid__onlyinclude:
for (int i=0; i < subs_len; i++) this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,bfr);
break;
default :
if (tag.Xtn()) {
Bry_bfr cur_bfr=bfr;
boolean is_tmpl_mode=ctx.Wiki().Parser_mgr().Ctx().Parse_tid() == Xop_parser_tid_.Tid__tmpl;
if (is_tmpl_mode) {
cur_bfr=ctx.Wiki().Utl__bfr_mkr().Get_m001().Reset_if_gt(Io_mgr.Len_mb);
}
cur_bfr.Add_mid(src,tag_open_bgn,tag_open_end);
for (int i=0; i < subs_len; i++) this.Subs_get(i).Tmpl_evaluate(ctx,src,caller,cur_bfr);
cur_bfr.Add_mid(src,tag_close_bgn,tag_close_end);
if (tag_close_bgn == Int_.Min_value && closeMode != Xop_xnde_tkn.CloseMode_inline) {
cur_bfr.Add(tag.Xtn_end_tag());
cur_bfr.Add(Byte_ascii.Gt_bry);
}
if (is_tmpl_mode) {
byte[] val=cur_bfr.To_bry_and_clear();
byte[] key=ctx.Wiki().Parser_mgr().Uniq_mgr().Add(tag.Name_bry(),val);
bfr.Add(key);
}
}
break;
}
return true;
}",0.9852658552210122
116872,"@Test public void Encode_decode(){
  fxt.Test_encode_decode(150370,240,164,173,162);
}","@Test public void Encode_decode(){
  fxt.Test_encode_decode(150370,240,164,173,162);
  fxt.Test_encode_decode(143489,240,163,130,129);
}",0.7747747747747747
116873,"public boolean Find(Scrib_proc_args args,Scrib_proc_rslt rslt){
  String text_str=args.Xstr_str_or_null(0);
  String regx=args.Pull_str(1);
  int bgn_char_idx=args.Cast_int_or(2,1);
  boolean plain=args.Cast_bool_or_n(3);
synchronized (surrogate_utl) {
    byte[] text_bry=Bry_.new_u8(text_str);
    int text_bry_len=text_bry.length;
    bgn_char_idx=Bgn_adjust(text_str,bgn_char_idx);
    int bgn_adj=surrogate_utl.Count_surrogates__char_idx(text_bry,text_bry_len,0,bgn_char_idx);
    int bgn_codepoint_idx=bgn_char_idx + bgn_adj;
    int bgn_byte_pos=surrogate_utl.Byte_pos();
    if (String_.Len_eq_0(regx))     return rslt.Init_many_objs(bgn_codepoint_idx + Scrib_lib_ustring.Base1,bgn_codepoint_idx + Scrib_lib_ustring.Base1 - 1);
    if (plain) {
      int pos=String_.FindFwd(text_str,regx,bgn_codepoint_idx);
      boolean found=pos != Bry_find_.Not_found;
      return found ? rslt.Init_many_objs(pos + Scrib_lib_ustring.Base1,pos + Scrib_lib_ustring.Base1 + String_.Len(regx) - Scrib_lib_ustring.End_adj) : rslt.Init_ary_empty();
    }
    regx=regx_converter.Parse(Bry_.new_u8(regx),Scrib_regx_converter.Anchor_G);
    Regx_adp regx_adp=Scrib_lib_ustring.RegxAdp_new_(core.Ctx(),regx);
    Regx_match[] regx_rslts=regx_adp.Match_all(text_str,bgn_codepoint_idx);
    int len=regx_rslts.length;
    if (len == 0)     return rslt.Init_ary_empty();
    List_adp tmp_list=List_adp_.New();
    Regx_match match=regx_rslts[0];
    int match_find_bgn_codepoint=match.Find_bgn();
    int match_find_bgn_adj=-surrogate_utl.Count_surrogates__codepoint_idx1(text_bry,text_bry_len,bgn_byte_pos,match_find_bgn_codepoint - bgn_codepoint_idx);
    tmp_list.Add(match_find_bgn_codepoint + match_find_bgn_adj + -bgn_adj+ Scrib_lib_ustring.Base1);
    tmp_list.Add(match.Find_end() + match_find_bgn_adj + -bgn_adj+ Scrib_lib_ustring.Base1 - Scrib_lib_ustring.End_adj);
    AddCapturesFromMatch(tmp_list,match,text_str,regx_converter.Capt_ary(),false);
    return rslt.Init_many_list(tmp_list);
  }
}","public boolean Find(Scrib_proc_args args,Scrib_proc_rslt rslt){
  String text_str=args.Xstr_str_or_null(0);
  String regx=args.Pull_str(1);
  int bgn_char_idx=args.Cast_int_or(2,1);
  boolean plain=args.Cast_bool_or_n(3);
synchronized (surrogate_utl) {
    byte[] text_bry=Bry_.new_u8(text_str);
    int text_bry_len=text_bry.length;
    bgn_char_idx=Bgn_adjust(text_str,bgn_char_idx);
    int bgn_adj=0;
    int bgn_codepoint_idx=bgn_char_idx + bgn_adj;
    int bgn_byte_pos=surrogate_utl.Byte_pos();
    if (String_.Len_eq_0(regx))     return rslt.Init_many_objs(bgn_codepoint_idx + Scrib_lib_ustring.Base1,bgn_codepoint_idx + Scrib_lib_ustring.Base1 - 1);
    if (plain) {
      int pos=String_.FindFwd(text_str,regx,bgn_codepoint_idx);
      boolean found=pos != Bry_find_.Not_found;
      return found ? rslt.Init_many_objs(pos + Scrib_lib_ustring.Base1,pos + Scrib_lib_ustring.Base1 + String_.Len(regx) - Scrib_lib_ustring.End_adj) : rslt.Init_ary_empty();
    }
    regx=regx_converter.Parse(Bry_.new_u8(regx),Scrib_regx_converter.Anchor_G);
    Regx_adp regx_adp=Scrib_lib_ustring.RegxAdp_new_(core.Ctx(),regx);
    Regx_match[] regx_rslts=regx_adp.Match_all(text_str,bgn_codepoint_idx);
    int len=regx_rslts.length;
    if (len == 0)     return rslt.Init_ary_empty();
    List_adp tmp_list=List_adp_.New();
    Regx_match match=regx_rslts[0];
    int match_find_bgn_codepoint=match.Find_bgn();
    int match_find_bgn_adj=-surrogate_utl.Count_surrogates__codepoint_idx1(text_bry,text_bry_len,bgn_byte_pos,match_find_bgn_codepoint - bgn_codepoint_idx);
    tmp_list.Add(match_find_bgn_codepoint + match_find_bgn_adj + -bgn_adj+ Scrib_lib_ustring.Base1);
    tmp_list.Add(match.Find_end() + match_find_bgn_adj + -bgn_adj+ Scrib_lib_ustring.Base1 - Scrib_lib_ustring.End_adj);
    AddCapturesFromMatch(tmp_list,match,text_str,regx_converter.Capt_ary(),false);
    return rslt.Init_many_list(tmp_list);
  }
}",0.9802816901408452
116874,"public void Select_catlinks_by_page(Xow_wiki wiki,Db_conn cat_link_conn,Xoctg_pagebox_hash hash,int page_id){
  Db_attach_mgr attach_mgr=new Db_attach_mgr(cat_link_conn,new Db_attach_itm(""String_Node_Str"",wiki.Data__core_mgr().Db__core().Conn()));
  String sql=String_.Concat_lines_nl_skip_last(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + Int_.To_str(page_id));
  sql=attach_mgr.Resolve_sql(sql);
  attach_mgr.Attach();
  Db_rdr rdr=cat_link_conn.Stmt_sql(sql).Exec_select__rls_auto();
  try {
    while (rdr.Move_next()) {
      Xoa_ttl ttl=wiki.Ttl_parse(rdr.Read_int(""String_Node_Str""),rdr.Read_bry_by_str(""String_Node_Str""));
      Xoctg_pagebox_itm itm=(Xoctg_pagebox_itm)hash.Get_by_ttl(ttl.Full_db());
      if (itm == null)       itm=hash.Add_by_ttl(ttl);
      itm.Load_by_db(rdr.Read_int(""String_Node_Str""),DateAdp_.unixtime_utc_ms_(rdr.Read_long(""String_Node_Str"")));
    }
  }
  finally {
    rdr.Rls();
    attach_mgr.Detach();
  }
  hash.Sort_and_fill_ids();
}","public void Select_catlinks_by_page(Xow_wiki wiki,Db_conn cat_link_conn,Xoctg_pagebox_hash hash,int page_id){
  Db_attach_mgr attach_mgr=new Db_attach_mgr(cat_link_conn,new Db_attach_itm(""String_Node_Str"",wiki.Data__core_mgr().Db__core().Conn()));
  String sql=String_.Concat_lines_nl_skip_last(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + Int_.To_str(page_id));
  sql=attach_mgr.Resolve_sql(sql);
  attach_mgr.Attach();
  Db_rdr rdr=Db_rdr_.Empty;
  try {
    rdr=cat_link_conn.Stmt_sql(sql).Exec_select__rls_auto();
    while (rdr.Move_next()) {
      Xoa_ttl ttl=wiki.Ttl_parse(rdr.Read_int(""String_Node_Str""),rdr.Read_bry_by_str(""String_Node_Str""));
      Xoctg_pagebox_itm itm=(Xoctg_pagebox_itm)hash.Get_by_ttl(ttl.Full_db());
      if (itm == null)       itm=hash.Add_by_ttl(ttl);
      itm.Load_by_db(rdr.Read_int(""String_Node_Str""),DateAdp_.unixtime_utc_ms_(rdr.Read_long(""String_Node_Str"")));
    }
  }
 catch (  Exception e) {
    Gfo_usr_dlg_.Instance.Warn_many(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",page_id,Err_.Message_gplx_log(e));
  }
 finally {
    rdr.Rls();
    attach_mgr.Detach();
  }
  hash.Sort_and_fill_ids();
}",0.9109947643979056
116875,"public byte[] Convert(byte[] src){
  if (general_trie.Count() == 0)   return src;
  Bry_bfr dirty_bfr=null;
  int cur=0;
  int len=src.length;
  while (cur < len) {
    int uniq_bgn=Bry_find_.Find_fwd(src,Bry__uniq__add__bgn,cur);
    if (uniq_bgn == Bry_find_.Not_found)     break;
    int uniq_end=Bry_find_.Find_fwd(src,Bry__uniq__add__end,uniq_bgn);
    if (uniq_end == Bry_find_.Not_found) {
      Gfo_usr_dlg_.Instance.Warn_many(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",src);
      return src;
    }
    uniq_end+=Bry__uniq__add__end.length;
    if (dirty_bfr == null)     dirty_bfr=key_bfr;
    dirty_bfr.Add_mid(src,0,uniq_bgn);
    dirty_bfr.Add((byte[])general_trie.Match_exact(src,uniq_bgn,uniq_end));
    cur=uniq_end;
  }
  if (dirty_bfr != null) {
    dirty_bfr.Add_mid(src,cur,len);
  }
  return dirty_bfr == null ? src : dirty_bfr.To_bry_and_clear();
}","public byte[] Convert(byte[] src){
  if (general_trie.Count() == 0)   return src;
  Bry_bfr dirty_bfr=null;
  int cur=0;
  int len=src.length;
  while (cur < len) {
    int uniq_bgn=Bry_find_.Find_fwd(src,Bry__uniq__add__bgn,cur);
    if (uniq_bgn == Bry_find_.Not_found)     break;
    int uniq_end=Bry_find_.Find_fwd(src,Bry__uniq__add__end,uniq_bgn);
    if (uniq_end == Bry_find_.Not_found) {
      Gfo_usr_dlg_.Instance.Warn_many(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",src);
      return src;
    }
    uniq_end+=Bry__uniq__add__end.length;
    if (dirty_bfr == null)     dirty_bfr=key_bfr;
    dirty_bfr.Add_mid(src,cur,uniq_bgn);
    dirty_bfr.Add((byte[])general_trie.Match_exact(src,uniq_bgn,uniq_end));
    cur=uniq_end;
  }
  if (dirty_bfr != null) {
    dirty_bfr.Add_mid(src,cur,len);
  }
  return dirty_bfr == null ? src : dirty_bfr.To_bry_and_clear();
}",0.9977324263038548
116876,"public Xop_mediawiki_wkr Make(String domain_str,Xop_mediawiki_loader loader){
  Xowe_wiki wiki=(Xowe_wiki)app.Wiki_mgr().Make(Bry_.new_u8(domain_str),app.Fsys_mgr().Wiki_dir());
  if (mode_is_prod)   wiki.Init_by_wiki();
  return new Xop_mediawiki_wkr(wiki,loader);
}","public Xop_mediawiki_wkr Make(String domain_str,Xop_mediawiki_loader loader){
  Xowe_wiki wiki=(Xowe_wiki)app.Wiki_mgr().Make(Bry_.new_u8(domain_str),app.Fsys_mgr().Wiki_dir());
  if (mode_is_prod) {
    wiki.Init_by_wiki();
    wiki.File_mgr().Fsdb_mode().Tid__v2__mp__y_();
  }
  return new Xop_mediawiki_wkr(wiki,loader);
}",0.9005059021922428
116877,"public Xop_mediawiki_mgr(String root_str,boolean mode_is_prod){
  Gfo_usr_dlg usr_dlg=Xoa_app_.New__usr_dlg__console();
  Gfo_usr_dlg_.Instance=usr_dlg;
  Io_url root_dir=Io_url_.new_dir_(root_str);
  this.mode_is_prod=mode_is_prod;
  if (mode_is_prod)   gplx.dbs.Db_conn_bldr.Instance.Reg_default_sqlite();
  this.app=new Xoae_app(usr_dlg,gplx.xowa.apps.Xoa_app_mode.Itm_cmd,root_dir,root_dir.GenSubDir(""String_Node_Str""),root_dir.GenSubDir(""String_Node_Str""),root_dir.GenSubDir(""String_Node_Str""),root_dir.GenSubDir_nest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),gplx.xowa.apps.boots.Xoa_cmd_arg_mgr.Bin_dir_name());
  if (mode_is_prod)   app.Init_by_app();
}","public Xop_mediawiki_mgr(String root_str,boolean mode_is_prod){
  Gfo_usr_dlg usr_dlg=Xoa_app_.New__usr_dlg__console();
  Gfo_usr_dlg_.Instance=usr_dlg;
  Io_url root_dir=Io_url_.new_dir_(root_str);
  this.mode_is_prod=mode_is_prod;
  if (mode_is_prod) {
    gplx.dbs.Db_conn_bldr.Instance.Reg_default_sqlite();
    gplx.core.envs.Env_.Init_swt(String_.Ary_empty,Type_adp_.ClassOf_obj(this));
  }
  this.app=new Xoae_app(usr_dlg,gplx.xowa.apps.Xoa_app_mode.Itm_cmd,root_dir,root_dir.GenSubDir(""String_Node_Str""),root_dir.GenSubDir(""String_Node_Str""),root_dir.GenSubDir(""String_Node_Str""),root_dir.GenSubDir_nest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),gplx.xowa.apps.boots.Xoa_cmd_arg_mgr.Bin_dir_name());
  if (mode_is_prod)   app.Init_by_app();
}",0.9380654140570632
116878,"private Xot_defn Match_bgn(byte[] src,int bgn,int end){
  Object cs_obj=cs_trie.Match_bgn(src,bgn,end);
  Xot_defn rv=null;
  if (cs_obj != null) {
    rv=(Xot_defn)cs_obj;
    if (rv.Name().length == end - bgn)     return rv;
  }
  LowerAry(src,bgn,end);
  byte[] ary=lang.Case_mgr().Case_build_lower(lower_ary,0,end - bgn);
  Xot_defn rv_alt=(Xot_defn)ci_trie.Match_bgn(ary,0,end - bgn);
  return (rv != null && rv_alt == null) ? rv : rv_alt;
}","private Xot_defn Match_bgn(byte[] src,int bgn,int end){
  Object cs_obj=cs_trie.Match_bgn(src,bgn,end);
  Xot_defn rv=null;
  if (cs_obj != null) {
    rv=(Xot_defn)cs_obj;
    if (rv.Name().length == end - bgn)     return rv;
  }
  byte[] ary=lang.Case_mgr().Case_build_lower(src,bgn,end);
  Xot_defn rv_alt=(Xot_defn)ci_trie.Match_bgn(ary,0,ary.length);
  return (rv != null && rv_alt == null) ? rv : rv_alt;
}",0.7995337995337995
116879,"@Override public boolean DownloadFil(IoEngine_xrg_downloadFil xrg){
  IoStream trg_stream=null;
  java.io.BufferedInputStream src_stream=null;
  java.net.URL src_url=null;
  HttpURLConnection src_conn=null;
  if (user_agent_needs_resetting) {
    user_agent_needs_resetting=false;
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  boolean exists=Io_mgr.Instance.ExistsDir(xrg.Trg().OwnerDir());
  Gfo_usr_dlg prog_dlg=null;
  String src_str=xrg.Src();
  Io_download_fmt xfer_fmt=xrg.Download_fmt();
  prog_dlg=xfer_fmt.Usr_dlg();
  if (!Web_access_enabled) {
    if (prog_dlg != null) {
      if (session_fil == null)       session_fil=prog_dlg.Log_wkr().Session_dir().GenSubFil(""String_Node_Str"");
      prog_dlg.Log_wkr().Log_msg_to_url_fmt(session_fil,""String_Node_Str"",xrg.Src(),xrg.Trg().Raw());
    }
    return false;
  }
  try {
    trg_stream=Io_mgr.Instance.OpenStreamWrite(xrg.Trg());
    src_url=new java.net.URL(src_str);
    src_conn=(HttpURLConnection)src_url.openConnection();
    String user_agent=xrg.User_agent();
    if (user_agent != null)     src_conn.setRequestProperty(""String_Node_Str"",user_agent);
    long content_length=Long_.parse_or(src_conn.getHeaderField(""String_Node_Str""),IoItmFil.Size_invalid_int);
    xrg.Src_content_length_(content_length);
    if (xrg.Src_last_modified_query())     xrg.Src_last_modified_(DateAdp_.unixtime_lcl_ms_(src_conn.getLastModified()));
    if (xrg.Exec_meta_only())     return true;
    src_stream=new java.io.BufferedInputStream(src_conn.getInputStream());
    if (!exists) {
      Io_mgr.Instance.CreateDir(xrg.Trg().OwnerDir());
    }
    byte[] download_bfr=new byte[Download_bfr_len];
    xfer_fmt.Bgn(content_length);
    int count=0;
    while ((count=src_stream.read(download_bfr,0,Download_bfr_len)) != -1) {
      if (xrg.Prog_cancel()) {
        src_stream.close();
        trg_stream.Rls();
        Io_mgr.Instance.DeleteFil(xrg.Trg());
      }
      xfer_fmt.Prog(count);
      trg_stream.Write(download_bfr,0,count);
    }
    if (prog_dlg != null) {
      xfer_fmt.Term();
      if (session_fil == null)       session_fil=prog_dlg.Log_wkr().Session_dir().GenSubFil(""String_Node_Str"");
      prog_dlg.Log_wkr().Log_msg_to_url_fmt(session_fil,""String_Node_Str"",src_str,xrg.Trg().Raw());
    }
    return true;
  }
 catch (  Exception exc) {
    xrg.Rslt_err_(exc);
    if (Type_adp_.Eq_typeSafe(exc,java.net.UnknownHostException.class))     xrg.Rslt_(IoEngine_xrg_downloadFil.Rslt_fail_host_not_found);
 else     if (Type_adp_.Eq_typeSafe(exc,java.io.FileNotFoundException.class))     xrg.Rslt_(IoEngine_xrg_downloadFil.Rslt_fail_file_not_found);
 else     xrg.Rslt_(IoEngine_xrg_downloadFil.Rslt_fail_unknown);
    if (prog_dlg != null && !xrg.Prog_cancel()) {
      if (session_fil == null)       session_fil=prog_dlg.Log_wkr().Session_dir().GenSubFil(""String_Node_Str"");
      prog_dlg.Log_wkr().Log_msg_to_url_fmt(session_fil,""String_Node_Str"",src_str,xrg.Trg().Raw(),Err_.Message_lang(exc));
    }
    if (trg_stream != null) {
      try {
        trg_stream.Rls();
        DeleteFil_api(IoEngine_xrg_deleteFil.new_(xrg.Trg()));
      }
 catch (      Exception e2) {
        Err_.Noop(e2);
      }
    }
    return false;
  }
 finally {
    xrg.Prog_running_(false);
    try {
      if (src_stream != null)       src_stream.close();
      if (src_conn != null)       src_conn.disconnect();
      src_conn.getInputStream().close();
    }
 catch (    Exception exc) {
      Err_.Noop(exc);
    }
    if (trg_stream != null)     trg_stream.Rls();
  }
}","@Override public boolean DownloadFil(IoEngine_xrg_downloadFil xrg){
  IoStream trg_stream=null;
  java.io.BufferedInputStream src_stream=null;
  java.net.URL src_url=null;
  HttpURLConnection src_conn=null;
  if (user_agent_needs_resetting) {
    user_agent_needs_resetting=false;
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  boolean exists=Io_mgr.Instance.ExistsDir(xrg.Trg().OwnerDir());
  Gfo_usr_dlg prog_dlg=null;
  String src_str=xrg.Src();
  Io_download_fmt xfer_fmt=xrg.Download_fmt();
  prog_dlg=xfer_fmt.Usr_dlg();
  if (!Web_access_enabled) {
    if (prog_dlg != null) {
      if (session_fil == null)       session_fil=prog_dlg.Log_wkr().Session_dir().GenSubFil(""String_Node_Str"");
      prog_dlg.Log_wkr().Log_msg_to_url_fmt(session_fil,""String_Node_Str"",xrg.Src(),xrg.Trg().Raw());
    }
    return false;
  }
  try {
    trg_stream=Io_mgr.Instance.OpenStreamWrite(xrg.Trg());
    src_url=new java.net.URL(src_str);
    src_conn=(HttpURLConnection)src_url.openConnection();
    String user_agent=xrg.User_agent();
    if (user_agent != null)     src_conn.setRequestProperty(""String_Node_Str"",user_agent);
    long content_length=Long_.parse_or(src_conn.getHeaderField(""String_Node_Str""),IoItmFil.Size_invalid_int);
    xrg.Src_content_length_(content_length);
    if (xrg.Src_last_modified_query())     xrg.Src_last_modified_(DateAdp_.unixtime_lcl_ms_(src_conn.getLastModified()));
    if (xrg.Exec_meta_only())     return true;
    src_stream=new java.io.BufferedInputStream(src_conn.getInputStream());
    if (!exists) {
      Io_mgr.Instance.CreateDir(xrg.Trg().OwnerDir());
    }
    byte[] download_bfr=new byte[Download_bfr_len];
    xfer_fmt.Bgn(content_length);
    int count=0;
    while ((count=src_stream.read(download_bfr,0,Download_bfr_len)) != -1) {
      if (xrg.Prog_cancel()) {
        src_stream.close();
        trg_stream.Rls();
        Io_mgr.Instance.DeleteFil(xrg.Trg());
      }
      xfer_fmt.Prog(count);
      trg_stream.Write(download_bfr,0,count);
    }
    if (prog_dlg != null) {
      xfer_fmt.Term();
      if (session_fil == null)       session_fil=prog_dlg.Log_wkr().Session_dir().GenSubFil(""String_Node_Str"");
      prog_dlg.Log_wkr().Log_msg_to_url_fmt(session_fil,""String_Node_Str"",src_str,xrg.Trg().Raw());
    }
    return true;
  }
 catch (  Exception exc) {
    xrg.Rslt_err_(exc);
    if (Type_adp_.Eq_typeSafe(exc,java.net.UnknownHostException.class))     xrg.Rslt_(IoEngine_xrg_downloadFil.Rslt_fail_host_not_found);
 else     if (Type_adp_.Eq_typeSafe(exc,java.io.FileNotFoundException.class))     xrg.Rslt_(IoEngine_xrg_downloadFil.Rslt_fail_file_not_found);
 else     xrg.Rslt_(IoEngine_xrg_downloadFil.Rslt_fail_unknown);
    if (prog_dlg != null && !xrg.Prog_cancel()) {
      if (session_fil == null)       session_fil=prog_dlg.Log_wkr().Session_dir().GenSubFil(""String_Node_Str"");
      prog_dlg.Log_wkr().Log_msg_to_url_fmt(session_fil,""String_Node_Str"",src_str,xrg.Trg().Raw(),Err_.Message_lang(exc));
    }
    if (trg_stream != null) {
      try {
        trg_stream.Rls();
        DeleteFil_api(IoEngine_xrg_deleteFil.new_(xrg.Trg()));
      }
 catch (      Exception e2) {
        Err_.Noop(e2);
      }
    }
    return false;
  }
 finally {
    xrg.Prog_running_(false);
    try {
      if (src_stream != null)       src_stream.close();
      if (src_conn != null) {
        src_conn.disconnect();
        src_conn.getInputStream().close();
      }
    }
 catch (    Exception exc) {
      Err_.Noop(exc);
    }
    if (trg_stream != null)     trg_stream.Rls();
  }
}",0.9898762654668166
116880,"public Object Get_by_or_null(int key){
  return hash.Get_by(tmp_key.Val_(key));
}","public Object Get_by_or_null(int key){
synchronized (tmp_key) {
    return hash.Get_by(tmp_key.Val_(key));
  }
}",0.8393782383419689
116881,"public Object Get_by_or_fail(int key){
  return hash.Get_by_or_fail(tmp_key.Val_(key));
}","public Object Get_by_or_fail(int key){
synchronized (tmp_key) {
    return hash.Get_by_or_fail(tmp_key.Val_(key));
  }
}",0.8516746411483254
116882,"public GfoMsg Bld(byte[] src){
  Gfs_nde nde=parser.Parse(src);
  return Bld_msg(src,nde);
}","public GfoMsg Bld(byte[] src){
synchronized (thread_lock) {
    Gfs_nde nde=parser.Parse(src);
    return Bld_msg(src,nde);
  }
}",0.832579185520362
116883,"private static void Load_sortkey(Xow_wiki wiki,Xoctg_catpage_grp grp,Xoctg_catpage_itm zth_itm){
  Xowd_page_itm tmp_pg=new Xowd_page_itm();
  wiki.Data__core_mgr().Tbl__page().Select_by_id(tmp_pg,zth_itm.Page_id());
  Xoa_ttl zth_ttl=wiki.Ttl_parse(tmp_pg.Ns_id(),tmp_pg.Ttl_page_db());
  zth_itm.Page_ttl_(zth_ttl);
  byte[] prv_sortkey=grp.Itms__len() == 0 ? Bry_.Empty : grp.Itms__get_at(grp.Itms__len() - 1).Sortkey_handle();
  zth_itm.Sortkey_handle_make(Bry_bfr_.New(),prv_sortkey);
}","private static void Load_sortkey(Xow_wiki wiki,Xoctg_catpage_grp grp,Xoctg_catpage_itm zth_itm){
  Xowd_page_itm tmp_pg=new Xowd_page_itm();
  wiki.Data__core_mgr().Tbl__page().Select_by_id(tmp_pg,zth_itm.Page_id());
  if (tmp_pg.Exists()) {
    Xoa_ttl zth_ttl=wiki.Ttl_parse(tmp_pg.Ns_id(),tmp_pg.Ttl_page_db());
    zth_itm.Page_ttl_(zth_ttl);
  }
  byte[] prv_sortkey=grp.Itms__len() == 0 ? Bry_.Empty : grp.Itms__get_at(grp.Itms__len() - 1).Sortkey_handle();
  zth_itm.Sortkey_handle_make(Bry_bfr_.New(),prv_sortkey);
}",0.967487684729064
116884,"public static int Find_fwd_or(byte[] src,byte lkp,int cur,int end,int or){
  int rv=Find_fwd(src,lkp,cur,end);
  return rv == Bry_find_.Not_found ? or : rv;
}","public static int Find_fwd_or(byte[] src,byte[] lkp,int cur,int end,int or){
  int rv=Find_fwd(src,lkp,cur,end);
  return rv == Bry_find_.Not_found ? or : rv;
}",0.9937106918238994
116885,"public Ordered_hash Parse(byte[] raw){
  Ordered_hash rv=Ordered_hash_.New_bry();
  int bgn=Bry_find_.Find_fwd(raw,Tkn__create_table);
  if (bgn == Bry_find_.Not_found)   throw Err_.new_wo_type(""String_Node_Str"");
  bgn=Bry_find_.Find_fwd(raw,Byte_ascii.Nl,bgn);
  if (bgn == Bry_find_.Not_found)   throw Err_.new_wo_type(""String_Node_Str"");
  bgn+=1;
  int end=Bry_find_.Find_fwd(raw,Tkn__primary_key);
  if (end == Bry_find_.Not_found) {
    end=Bry_find_.Find_fwd(raw,Tkn__unique_index);
    if (end == Bry_find_.Not_found)     throw Err_.new_wo_type(""String_Node_Str"");
  }
  end=Bry_find_.Find_bwd(raw,Byte_ascii.Nl,end);
  if (bgn == Bry_find_.Not_found)   throw Err_.new_wo_type(""String_Node_Str"");
  Parse_flds(rv,Bry_.Mid(raw,bgn,end));
  return rv;
}","public Ordered_hash Parse(byte[] raw){
  Ordered_hash rv=Ordered_hash_.New_bry();
  Parse_flds(rv,Extract_flds(raw));
  return rv;
}",0.2757847533632287
116886,"@Test public void Primary_key(){
  fxt.Exec__parse(String_.Concat_lines_nl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  fxt.Test__count(3);
  fxt.Test__get(""String_Node_Str"",2);
  fxt.Test__get(""String_Node_Str"",1);
  fxt.Test__get(""String_Node_Str"",0);
  fxt.Test__get(""String_Node_Str"",-1);
}","@Test public void Primary_key(){
  fxt.Test__extract(String_.Concat_lines_nl(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),String_.Concat_lines_nl(""String_Node_Str""));
}",0.5353535353535354
116887,"public Xowd_html_tbl Tbls__get_or_new(int ns_id,long html_len){
  long len_new=len_cur + html_len;
  boolean not_inited=html_tbl == null, out_of_space=len_new > len_max;
  boolean is_all_or_few=db_mgr.Props().Layout_html().Tid_is_all_or_few();
  boolean ns_changed=ns_id != prv_ns_id;
  if (not_inited || out_of_space || ns_changed) {
    Commit();
    if (is_all_or_few && not_inited) {
      this.html_db=wiki.Data__core_mgr().Dbs__get_by_tid_or_null(Xow_db_file_.Tid__html_data);
      if (html_db == null)       Make_html_db(is_all_or_few,ns_id);
    }
 else     Make_html_db(is_all_or_few,ns_id);
    this.html_tbl=new Xowd_html_tbl(html_db.Conn());
    html_tbl.Create_tbl();
    html_db.Conn().Txn_bgn(""String_Node_Str"");
    len_cur=html_len;
  }
 else   len_cur=len_new;
  return html_tbl;
}","public Xowd_html_tbl Tbls__get_or_new(int ns_id,long html_len){
  long len_new=len_cur + html_len;
  boolean not_inited=html_tbl == null, out_of_space=len_new > len_max;
  boolean is_all_or_few=db_mgr.Props().Layout_html().Tid_is_all_or_few();
  boolean ns_changed=ns_id != prv_ns_id;
  if (not_inited || out_of_space || (ns_changed && !is_all_or_few)) {
    Commit();
    if (is_all_or_few && not_inited) {
      this.html_db=wiki.Data__core_mgr().Dbs__get_by_tid_or_null(Xow_db_file_.Tid__html_data);
      if (html_db == null)       Make_html_db(is_all_or_few,ns_id);
    }
 else     Make_html_db(is_all_or_few,ns_id);
    this.html_tbl=new Xowd_html_tbl(html_db.Conn());
    html_tbl.Create_tbl();
    html_db.Conn().Txn_bgn(""String_Node_Str"");
    len_cur=html_len;
  }
 else   len_cur=len_new;
  return html_tbl;
}",0.9395061728395062
116888,"protected Window.Callback getWindowCallback(){
  if (_windowCallback == null) {
    _windowCallback=window.getCallback();
  }
  return _windowCallback;
}","protected Window.Callback getWindowCallback(){
  return window.getCallback();
}",0.6293103448275862
116889,"/** 
 * Decreases the priority of an overrideId
 * @param overrideId Id of override to edit
 * @param pathId ID of path containing override
 * @param clientUUID ID of client
 */
public void decreasePriority(int overrideId,int pathId,String clientUUID){
  logger.info(""String_Node_Str"");
  int origPriority=-1;
  int newPriority=-1;
  PreparedStatement queryStatement=null;
  ResultSet results=null;
  try (Connection sqlConnection=sqlService.getConnection()){
    queryStatement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY);
    queryStatement.setInt(1,pathId);
    queryStatement.setString(2,clientUUID);
    results=queryStatement.executeQuery();
    boolean gotOrig=false;
    while (results.next()) {
      if (results.getInt(Constants.ENABLED_OVERRIDES_OVERRIDE_ID) == overrideId) {
        origPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
        gotOrig=true;
      }
 else {
        newPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
        if (gotOrig) {
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (results != null) {
        results.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (queryStatement != null) {
        queryStatement.close();
      }
    }
 catch (    Exception e) {
    }
  }
  PreparedStatement statement=null;
  try (Connection sqlConnection=sqlService.getConnection()){
    if (origPriority != -1 && newPriority != -1) {
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str"");
      statement.setInt(1,origPriority);
      statement.setInt(2,newPriority);
      statement.setInt(3,pathId);
      statement.setString(4,clientUUID);
      statement.executeUpdate();
      statement.close();
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_OVERRIDE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str"");
      statement.setInt(1,newPriority);
      statement.setInt(2,overrideId);
      statement.setInt(3,pathId);
      statement.setString(4,clientUUID);
      statement.executeUpdate();
    }
  }
 catch (  Exception e) {
  }
 finally {
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Decreases the priority of an overrideId
 * @param overrideId Id of override to edit
 * @param pathId ID of path containing override
 * @param clientUUID ID of client
 */
public void decreasePriority(int overrideId,int ordinal,int pathId,String clientUUID){
  logger.info(""String_Node_Str"");
  int origPriority=-1;
  int newPriority=-1;
  int origId=0;
  int newId=0;
  PreparedStatement queryStatement=null;
  ResultSet results=null;
  try (Connection sqlConnection=sqlService.getConnection()){
    queryStatement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY);
    queryStatement.setInt(1,pathId);
    queryStatement.setString(2,clientUUID);
    results=queryStatement.executeQuery();
    boolean gotOrig=false;
    int ordinalCount=0;
    while (results.next()) {
      if (results.getInt(Constants.ENABLED_OVERRIDES_OVERRIDE_ID) == overrideId) {
        ordinalCount++;
        if (ordinalCount == ordinal) {
          origPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
          origId=results.getInt(Constants.GENERIC_ID);
          gotOrig=true;
          continue;
        }
      }
      newPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
      newId=results.getInt(Constants.GENERIC_ID);
      if (gotOrig) {
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (results != null) {
        results.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (queryStatement != null) {
        queryStatement.close();
      }
    }
 catch (    Exception e) {
    }
  }
  PreparedStatement statement=null;
  try (Connection sqlConnection=sqlService.getConnection()){
    if (origPriority != -1 && newPriority != -1) {
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_ID+ ""String_Node_Str"");
      statement.setInt(1,origPriority);
      statement.setInt(2,newId);
      statement.executeUpdate();
      statement.close();
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_ID+ ""String_Node_Str"");
      statement.setInt(1,newPriority);
      statement.setInt(2,origId);
      statement.executeUpdate();
    }
  }
 catch (  Exception e) {
  }
 finally {
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    Exception e) {
    }
  }
}",0.8691588785046729
116890,"/** 
 * Increase the priority of an overrideId
 * @param overrideId ID of override
 * @param pathId ID of path containing override
 * @param clientUUID UUID of client
 */
public void increasePriority(int overrideId,int pathId,String clientUUID){
  logger.info(""String_Node_Str"");
  int origPriority=-1;
  int newPriority=-1;
  PreparedStatement statement=null;
  ResultSet results=null;
  try (Connection sqlConnection=sqlService.getConnection()){
    results=null;
    statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY);
    statement.setInt(1,pathId);
    statement.setString(2,clientUUID);
    results=statement.executeQuery();
    while (results.next()) {
      if (results.getInt(Constants.ENABLED_OVERRIDES_OVERRIDE_ID) == overrideId) {
        origPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
        break;
      }
 else {
        newPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (results != null) {
        results.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    Exception e) {
    }
  }
  try (Connection sqlConnection=sqlService.getConnection()){
    if (origPriority != -1 && newPriority != -1) {
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str"");
      statement.setInt(1,origPriority);
      statement.setInt(2,newPriority);
      statement.setInt(3,pathId);
      statement.setString(4,clientUUID);
      statement.executeUpdate();
      statement.close();
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_OVERRIDE_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str"");
      statement.setInt(1,newPriority);
      statement.setInt(2,overrideId);
      statement.setInt(3,pathId);
      statement.setString(4,clientUUID);
      statement.executeUpdate();
    }
  }
 catch (  Exception e) {
  }
 finally {
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    Exception e) {
    }
  }
}","/** 
 * Increase the priority of an overrideId
 * @param overrideId ID of override
 * @param pathId ID of path containing override
 * @param clientUUID UUID of client
 */
public void increasePriority(int overrideId,int ordinal,int pathId,String clientUUID){
  logger.info(""String_Node_Str"");
  int origPriority=-1;
  int newPriority=-1;
  int origId=0;
  int newId=0;
  PreparedStatement statement=null;
  ResultSet results=null;
  try (Connection sqlConnection=sqlService.getConnection()){
    results=null;
    statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PATH_ID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_CLIENT_UUID+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY);
    statement.setInt(1,pathId);
    statement.setString(2,clientUUID);
    results=statement.executeQuery();
    int ordinalCount=0;
    while (results.next()) {
      if (results.getInt(Constants.ENABLED_OVERRIDES_OVERRIDE_ID) == overrideId) {
        ordinalCount++;
        if (ordinalCount == ordinal) {
          origPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
          origId=results.getInt(Constants.GENERIC_ID);
          break;
        }
      }
      newPriority=results.getInt(Constants.ENABLED_OVERRIDES_PRIORITY);
      newId=results.getInt(Constants.GENERIC_ID);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (results != null) {
        results.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    Exception e) {
    }
  }
  try (Connection sqlConnection=sqlService.getConnection()){
    if (origPriority != -1 && newPriority != -1) {
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_ID+ ""String_Node_Str"");
      statement.setInt(1,origPriority);
      statement.setInt(2,newId);
      statement.executeUpdate();
      statement.close();
      statement=sqlConnection.prepareStatement(""String_Node_Str"" + Constants.DB_TABLE_ENABLED_OVERRIDE + ""String_Node_Str""+ Constants.ENABLED_OVERRIDES_PRIORITY+ ""String_Node_Str""+ ""String_Node_Str""+ Constants.GENERIC_ID+ ""String_Node_Str"");
      statement.setInt(1,newPriority);
      statement.setInt(2,origId);
      statement.executeUpdate();
    }
  }
 catch (  Exception e) {
  }
 finally {
    try {
      if (statement != null) {
        statement.close();
      }
    }
 catch (    Exception e) {
    }
  }
}",0.8685413005272408
116891,"protected long proxyPlainTextRequest(final URL url,String pathInContext,String pathParams,HttpRequest request,final HttpResponse response) throws IOException {
  try {
    String urlStr=url.toString();
    if (urlStr.toLowerCase().startsWith(Constants.ODO_INTERNAL_WEBAPP_URL)) {
      urlStr=""String_Node_Str"" + com.groupon.odo.proxylib.Utils.getSystemPort(Constants.SYS_HTTP_PORT) + ""String_Node_Str"";
    }
    OkHttpClient okHttpClient=getUnsafeOkHttpClient();
    okHttpClient.setFollowRedirects(false);
    okHttpClient.setFollowSslRedirects(false);
    Request.Builder okRequestBuilder=new Request.Builder();
    if (urlStr.startsWith(""String_Node_Str"")) {
      int httpPort=com.groupon.odo.proxylib.Utils.getSystemPort(Constants.SYS_HTTP_PORT);
      urlStr=urlStr.replace(getHostNameFromURL(urlStr),localIP + ""String_Node_Str"" + httpPort);
    }
    okRequestBuilder=okRequestBuilder.url(urlStr);
    Enumeration<?> enm=request.getFieldNames();
    boolean isGet=""String_Node_Str"".equals(request.getMethod());
    boolean hasContent=false;
    boolean usedContentLength=false;
    long contentLength=0;
    while (enm.hasMoreElements()) {
      String hdr=(String)enm.nextElement();
      if (!isGet && HttpFields.__ContentType.equals(hdr)) {
        hasContent=true;
      }
      if (!isGet && HttpFields.__ContentLength.equals(hdr)) {
        contentLength=Long.parseLong(request.getField(hdr));
        usedContentLength=true;
      }
      Enumeration<?> vals=request.getFieldValues(hdr);
      while (vals.hasMoreElements()) {
        String val=(String)vals.nextElement();
        if (val != null) {
          if (!isGet && HttpFields.__ContentLength.equals(hdr) && Integer.parseInt(val) > 0) {
            hasContent=true;
          }
          if (!_DontProxyHeaders.containsKey(hdr)) {
            okRequestBuilder=okRequestBuilder.addHeader(hdr,val);
          }
        }
      }
    }
    if (""String_Node_Str"".equals(request.getMethod())) {
    }
 else     if (""String_Node_Str"".equals(request.getMethod()) || ""String_Node_Str"".equals(request.getMethod()) || ""String_Node_Str"".equals(request.getMethod())) {
      RequestBody okRequestBody=null;
      if (hasContent) {
        final String contentType=request.getContentType();
        final byte[] bytes=IOUtils.toByteArray(request.getInputStream());
        okRequestBody=new RequestBody(){
          @Override public MediaType contentType(){
            MediaType.parse(contentType);
            return null;
          }
          @Override public void writeTo(          BufferedSink bufferedSink) throws IOException {
            bufferedSink.write(bytes);
          }
        }
;
        if (usedContentLength) {
          okRequestBuilder=okRequestBuilder.addHeader(""String_Node_Str"",""String_Node_Str"" + contentLength);
        }
      }
 else {
        okRequestBody=RequestBody.create(null,new byte[0]);
      }
      if (""String_Node_Str"".equals(request.getMethod())) {
        okRequestBuilder=okRequestBuilder.post(okRequestBody);
      }
 else       if (""String_Node_Str"".equals(request.getMethod())) {
        okRequestBuilder=okRequestBuilder.put(okRequestBody);
      }
 else       if (""String_Node_Str"".equals(request.getMethod())) {
        okRequestBuilder=okRequestBuilder.delete(okRequestBody);
      }
    }
 else     if (""String_Node_Str"".equals(request.getMethod())) {
    }
 else     if (""String_Node_Str"".equals(request.getMethod())) {
      okRequestBuilder=okRequestBuilder.head();
    }
 else {
      LOG.warn(""String_Node_Str"",request.getMethod());
      request.setHandled(true);
      return -1;
    }
    Request okRequest=okRequestBuilder.build();
    Response okResponse=okHttpClient.newCall(okRequest).execute();
    response.setStatus(okResponse.code());
    response.setReason(okResponse.message());
    for (int headerNum=0; headerNum < okResponse.headers().size(); headerNum++) {
      String headerName=okResponse.headers().name(headerNum);
      if (!_DontProxyHeaders.containsKey(headerName) && !_ProxyAuthHeaders.containsKey(headerName)) {
        response.addField(headerName,okResponse.headers().value(headerNum));
      }
    }
    try {
      IOUtils.copy(okResponse.body().byteStream(),response.getOutputStream());
    }
 catch (    Exception e) {
    }
    request.setHandled(true);
    return okResponse.body().contentLength();
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    reportError(e,url,response);
    request.setHandled(true);
    return -1;
  }
}","protected long proxyPlainTextRequest(final URL url,String pathInContext,String pathParams,HttpRequest request,final HttpResponse response) throws IOException {
  try {
    String urlStr=url.toString();
    if (urlStr.toLowerCase().startsWith(Constants.ODO_INTERNAL_WEBAPP_URL)) {
      urlStr=""String_Node_Str"" + com.groupon.odo.proxylib.Utils.getSystemPort(Constants.SYS_HTTP_PORT) + ""String_Node_Str"";
    }
    OkHttpClient okHttpClient=getUnsafeOkHttpClient();
    okHttpClient.setFollowRedirects(false);
    okHttpClient.setFollowSslRedirects(false);
    Request.Builder okRequestBuilder=new Request.Builder();
    if (urlStr.startsWith(""String_Node_Str"") && urlStr.indexOf(""String_Node_Str"") == urlStr.lastIndexOf(""String_Node_Str"")) {
      int httpPort=com.groupon.odo.proxylib.Utils.getSystemPort(Constants.SYS_HTTP_PORT);
      urlStr=urlStr.replace(getHostNameFromURL(urlStr),localIP + ""String_Node_Str"" + httpPort);
    }
    okRequestBuilder=okRequestBuilder.url(urlStr);
    Enumeration<?> enm=request.getFieldNames();
    boolean isGet=""String_Node_Str"".equals(request.getMethod());
    boolean hasContent=false;
    boolean usedContentLength=false;
    long contentLength=0;
    while (enm.hasMoreElements()) {
      String hdr=(String)enm.nextElement();
      if (!isGet && HttpFields.__ContentType.equals(hdr)) {
        hasContent=true;
      }
      if (!isGet && HttpFields.__ContentLength.equals(hdr)) {
        contentLength=Long.parseLong(request.getField(hdr));
        usedContentLength=true;
      }
      Enumeration<?> vals=request.getFieldValues(hdr);
      while (vals.hasMoreElements()) {
        String val=(String)vals.nextElement();
        if (val != null) {
          if (!isGet && HttpFields.__ContentLength.equals(hdr) && Integer.parseInt(val) > 0) {
            hasContent=true;
          }
          if (!_DontProxyHeaders.containsKey(hdr)) {
            okRequestBuilder=okRequestBuilder.addHeader(hdr,val);
          }
        }
      }
    }
    if (""String_Node_Str"".equals(request.getMethod())) {
    }
 else     if (""String_Node_Str"".equals(request.getMethod()) || ""String_Node_Str"".equals(request.getMethod()) || ""String_Node_Str"".equals(request.getMethod())) {
      RequestBody okRequestBody=null;
      if (hasContent) {
        final String contentType=request.getContentType();
        final byte[] bytes=IOUtils.toByteArray(request.getInputStream());
        okRequestBody=new RequestBody(){
          @Override public MediaType contentType(){
            MediaType.parse(contentType);
            return null;
          }
          @Override public void writeTo(          BufferedSink bufferedSink) throws IOException {
            bufferedSink.write(bytes);
          }
        }
;
        if (usedContentLength) {
          okRequestBuilder=okRequestBuilder.addHeader(""String_Node_Str"",""String_Node_Str"" + contentLength);
        }
      }
 else {
        okRequestBody=RequestBody.create(null,new byte[0]);
      }
      if (""String_Node_Str"".equals(request.getMethod())) {
        okRequestBuilder=okRequestBuilder.post(okRequestBody);
      }
 else       if (""String_Node_Str"".equals(request.getMethod())) {
        okRequestBuilder=okRequestBuilder.put(okRequestBody);
      }
 else       if (""String_Node_Str"".equals(request.getMethod())) {
        okRequestBuilder=okRequestBuilder.delete(okRequestBody);
      }
    }
 else     if (""String_Node_Str"".equals(request.getMethod())) {
    }
 else     if (""String_Node_Str"".equals(request.getMethod())) {
      okRequestBuilder=okRequestBuilder.head();
    }
 else {
      LOG.warn(""String_Node_Str"",request.getMethod());
      request.setHandled(true);
      return -1;
    }
    Request okRequest=okRequestBuilder.build();
    Response okResponse=okHttpClient.newCall(okRequest).execute();
    response.setStatus(okResponse.code());
    response.setReason(okResponse.message());
    for (int headerNum=0; headerNum < okResponse.headers().size(); headerNum++) {
      String headerName=okResponse.headers().name(headerNum);
      if (!_DontProxyHeaders.containsKey(headerName) && !_ProxyAuthHeaders.containsKey(headerName)) {
        response.addField(headerName,okResponse.headers().value(headerNum));
      }
    }
    try {
      IOUtils.copy(okResponse.body().byteStream(),response.getOutputStream());
    }
 catch (    Exception e) {
    }
    request.setHandled(true);
    return okResponse.body().contentLength();
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    reportError(e,url,response);
    request.setHandled(true);
    return -1;
  }
}",0.991407799074686
116892,"/** 
 * Create a client for a clientId that already exists in Odo
 * @param profileName name of existing profile to create client for
 * @param clientId clientId of existing Odo client
 * @throws Exception
 */
public Client(String profileName,String clientId) throws Exception {
  new Client(profileName,clientId,null);
}","/** 
 * Create a client for a clientId that already exists in Odo
 * @param profileName name of existing profile to create client for
 * @param clientId clientId of existing Odo client
 * @throws Exception
 */
public Client(String profileName,String clientId) throws Exception {
  this(profileName,clientId,null);
}",0.9779874213836478
116893,"/** 
 * Create a client for a clientId that already exists in Odo
 * @param profileName name of existing profile to create client for
 * @param clientId clientId of existing Odo client
 * @throws Exception
 */
public Client(String profileName,String clientId) throws Exception {
  new Client(profileName,clientId,null);
}","/** 
 * Create a client for a clientId that already exists in Odo
 * @param profileName name of existing profile to create client for
 * @param clientId clientId of existing Odo client
 * @throws Exception
 */
public Client(String profileName,String clientId) throws Exception {
  this(profileName,clientId,null);
}",0.9779874213836478
116894,"@Test public void getHistory() throws Exception {
  History[] histories=HistoryService.getInstance().getHistory(newProfile.getId(),""String_Node_Str"",0,100,true,null);
  History latest=histories[histories.length - 1];
  assertTrue(latest.getOriginalRequestHeaders().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalRequestParams().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalRequestPostData().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalRequestURL().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseCode().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseContentType().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseData().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseHeaders().equals(""String_Node_Str""));
  assertTrue(latest.getRequestHeaders().equals(""String_Node_Str""));
  assertTrue(latest.getRequestParams().equals(""String_Node_Str""));
  assertTrue(latest.getRequestPostData().equals(""String_Node_Str""));
  assertTrue(latest.getRequestType().equals(""String_Node_Str""));
  assertTrue(latest.getRequestURL().equals(""String_Node_Str""));
  assertTrue(latest.getResponseCode().equals(""String_Node_Str""));
  assertTrue(latest.getResponseContentType().equals(""String_Node_Str""));
  assertTrue(latest.getResponseData().equals(""String_Node_Str""));
  assertTrue(latest.getResponseHeaders().equals(""String_Node_Str""));
}","@Test public void getHistory() throws Exception {
  History[] histories=HistoryService.getInstance().getHistory(newProfile.getId(),""String_Node_Str"",0,100,true,null,false);
  History latest=histories[histories.length - 1];
  assertTrue(latest.getOriginalRequestHeaders().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalRequestParams().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalRequestPostData().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalRequestURL().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseCode().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseContentType().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseData().equals(""String_Node_Str""));
  assertTrue(latest.getOriginalResponseHeaders().equals(""String_Node_Str""));
  assertTrue(latest.getRequestHeaders().equals(""String_Node_Str""));
  assertTrue(latest.getRequestParams().equals(""String_Node_Str""));
  assertTrue(latest.getRequestPostData().equals(""String_Node_Str""));
  assertTrue(latest.getRequestType().equals(""String_Node_Str""));
  assertTrue(latest.getRequestURL().equals(""String_Node_Str""));
  assertTrue(latest.getResponseCode().equals(""String_Node_Str""));
  assertTrue(latest.getResponseContentType().equals(""String_Node_Str""));
  assertTrue(latest.getResponseData().equals(""String_Node_Str""));
  assertTrue(latest.getResponseHeaders().equals(""String_Node_Str""));
}",0.997907949790795
116895,"/** 
 * Handles update requests for specific paths
 * @param model
 * @param pathIdentifier
 * @param profileIdentifier
 * @param clientUUID
 * @param responseEnabled
 * @param requestEnabled
 * @param addOverride
 * @param enabledMoveUp
 * @param enabledMoveDown
 * @param pathName
 * @param path
 * @param bodyFilter
 * @param customResponse
 * @param customRequest
 * @param resetResponse
 * @param resetRequest
 * @param contentType
 * @param repeatNumber
 * @param global
 * @return
 * @throws Exception
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public @ResponseBody String setPath(Model model,@PathVariable String pathIdentifier,@RequestParam(value=""String_Node_Str"",required=false) String profileIdentifier,@RequestParam(value=""String_Node_Str"",defaultValue=Constants.PROFILE_CLIENT_DEFAULT_ID) String clientUUID,@RequestParam(required=false) Boolean responseEnabled,@RequestParam(required=false) Boolean requestEnabled,@RequestParam(value=""String_Node_Str"",required=false) Integer addOverride,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveUp,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveDown,@RequestParam(required=false) String pathName,@RequestParam(required=false) String path,@RequestParam(required=false) String bodyFilter,@RequestParam(required=false) String customResponse,@RequestParam(required=false) String customRequest,@RequestParam(required=false) Boolean resetResponse,@RequestParam(required=false) Boolean resetRequest,@RequestParam(required=false) String contentType,@RequestParam(required=false) Integer repeatNumber,@RequestParam(required=false) Boolean global,@RequestParam(value=""String_Node_Str"",required=false) Integer[] groups,HttpServletResponse response) throws Exception {
  String decodedProfileIdentifier=null;
  if (profileIdentifier != null)   decodedProfileIdentifier=URLDecoder.decode(profileIdentifier,""String_Node_Str"");
  Identifiers identifiers=ControllerUtils.convertProfileAndPathIdentifier(decodedProfileIdentifier,pathIdentifier);
  Integer pathId=identifiers.getPathId();
  if (responseEnabled != null) {
    PathOverrideService.getInstance().setResponseEnabled(pathId,responseEnabled,clientUUID);
  }
  if (requestEnabled != null) {
    PathOverrideService.getInstance().setRequestEnabled(pathId,requestEnabled,clientUUID);
  }
  if (addOverride != null) {
    OverrideService.getInstance().enableOverride(addOverride,pathId,clientUUID);
  }
  if (enabledMoveUp != null) {
    String[] parts=enabledMoveUp.split(""String_Node_Str"");
    OverrideService.getInstance().increasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (enabledMoveDown != null) {
    String[] parts=enabledMoveDown.split(""String_Node_Str"");
    OverrideService.getInstance().decreasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (pathName != null) {
    if (pathName.equals(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    if (pathName.contains(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    PathOverrideService.getInstance().setName(pathId,pathName);
  }
  if (path != null) {
    try {
      Pattern.compile(path);
    }
 catch (    PatternSyntaxException pse) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    PathOverrideService.getInstance().setPath(pathId,path);
  }
  if (bodyFilter != null) {
    PathOverrideService.getInstance().setBodyFilter(pathId,bodyFilter);
  }
  if (customResponse != null) {
    PathOverrideService.getInstance().setCustomResponse(pathId,customResponse,clientUUID);
  }
  if (customRequest != null) {
    PathOverrideService.getInstance().setCustomRequest(pathId,customRequest,clientUUID);
  }
  if (resetResponse != null) {
    PathOverrideService.getInstance().clearResponseSettings(pathId,clientUUID);
  }
  if (resetRequest != null) {
    PathOverrideService.getInstance().clearRequestSettings(pathId,clientUUID);
  }
  if (contentType != null) {
    PathOverrideService.getInstance().setContentType(pathId,contentType);
  }
  if (global != null) {
    PathOverrideService.getInstance().setGlobal(pathId,global);
  }
  if (repeatNumber != null) {
    EditService.getInstance().updateRepeatNumber(repeatNumber,pathId,clientUUID);
  }
  if (groups != null) {
    pathOverrideService.setGroupsForPath(groups,pathId);
  }
  ObjectMapper objectMapper=new ObjectMapper();
  ObjectWriter writer=objectMapper.writer();
  return writer.writeValueAsString(PathOverrideService.getInstance().getPath(pathId,clientUUID,null));
}","/** 
 * Handles update requests for specific paths
 * @param model
 * @param pathIdentifier
 * @param profileIdentifier
 * @param clientUUID
 * @param responseEnabled
 * @param requestEnabled
 * @param addOverride
 * @param enabledMoveUp
 * @param enabledMoveDown
 * @param pathName
 * @param path
 * @param bodyFilter
 * @param customResponse
 * @param customRequest
 * @param resetResponse
 * @param resetRequest
 * @param contentType
 * @param repeatNumber
 * @param global
 * @return
 * @throws Exception
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public @ResponseBody String setPath(Model model,@PathVariable String pathIdentifier,@RequestParam(value=""String_Node_Str"",required=false) String profileIdentifier,@RequestParam(value=""String_Node_Str"",defaultValue=Constants.PROFILE_CLIENT_DEFAULT_ID) String clientUUID,@RequestParam(required=false) Boolean responseEnabled,@RequestParam(required=false) Boolean requestEnabled,@RequestParam(value=""String_Node_Str"",required=false) Integer addOverride,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveUp,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveDown,@RequestParam(required=false) String pathName,@RequestParam(required=false) String path,@RequestParam(required=false) String bodyFilter,@RequestParam(required=false) String customResponse,@RequestParam(required=false) String customRequest,@RequestParam(required=false) Boolean resetResponse,@RequestParam(required=false) Boolean resetRequest,@RequestParam(required=false) String contentType,@RequestParam(required=false) Integer repeatNumber,@RequestParam(required=false) Boolean global,@RequestParam(required=false) Integer requestType,@RequestParam(value=""String_Node_Str"",required=false) Integer[] groups,HttpServletResponse response) throws Exception {
  String decodedProfileIdentifier=null;
  if (profileIdentifier != null)   decodedProfileIdentifier=URLDecoder.decode(profileIdentifier,""String_Node_Str"");
  Identifiers identifiers=ControllerUtils.convertProfileAndPathIdentifier(decodedProfileIdentifier,pathIdentifier);
  Integer pathId=identifiers.getPathId();
  if (responseEnabled != null) {
    PathOverrideService.getInstance().setResponseEnabled(pathId,responseEnabled,clientUUID);
  }
  if (requestEnabled != null) {
    PathOverrideService.getInstance().setRequestEnabled(pathId,requestEnabled,clientUUID);
  }
  if (addOverride != null) {
    OverrideService.getInstance().enableOverride(addOverride,pathId,clientUUID);
  }
  if (enabledMoveUp != null) {
    String[] parts=enabledMoveUp.split(""String_Node_Str"");
    OverrideService.getInstance().increasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (enabledMoveDown != null) {
    String[] parts=enabledMoveDown.split(""String_Node_Str"");
    OverrideService.getInstance().decreasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (pathName != null) {
    if (pathName.equals(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    if (pathName.contains(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    PathOverrideService.getInstance().setName(pathId,pathName);
  }
  if (path != null) {
    try {
      Pattern.compile(path);
    }
 catch (    PatternSyntaxException pse) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    PathOverrideService.getInstance().setPath(pathId,path);
  }
  if (bodyFilter != null) {
    PathOverrideService.getInstance().setBodyFilter(pathId,bodyFilter);
  }
  if (customResponse != null) {
    PathOverrideService.getInstance().setCustomResponse(pathId,customResponse,clientUUID);
  }
  if (customRequest != null) {
    PathOverrideService.getInstance().setCustomRequest(pathId,customRequest,clientUUID);
  }
  if (resetResponse != null) {
    PathOverrideService.getInstance().clearResponseSettings(pathId,clientUUID);
  }
  if (resetRequest != null) {
    PathOverrideService.getInstance().clearRequestSettings(pathId,clientUUID);
  }
  if (contentType != null) {
    PathOverrideService.getInstance().setContentType(pathId,contentType);
  }
  if (global != null) {
    PathOverrideService.getInstance().setGlobal(pathId,global);
  }
  if (repeatNumber != null) {
    EditService.getInstance().updateRepeatNumber(repeatNumber,pathId,clientUUID);
  }
  if (requestType != null) {
    PathOverrideService.getInstance().setRequestType(pathId,requestType);
  }
  if (groups != null) {
    pathOverrideService.setGroupsForPath(groups,pathId);
  }
  ObjectMapper objectMapper=new ObjectMapper();
  ObjectWriter writer=objectMapper.writer();
  return writer.writeValueAsString(PathOverrideService.getInstance().getPath(pathId,clientUUID,null));
}",0.9835825577747568
116896,"/** 
 * Sets up the given   {@link org.apache.commons.httpclient.methods.PostMethod} to send the same multipart POST dataas was sent in the given  {@link HttpServletRequest}
 * @param postMethodProxyRequest The {@link org.apache.commons.httpclient.methods.PostMethod} that we are configuring to send amultipart POST request
 * @param httpServletRequest     The {@link HttpServletRequest} that contains the multipartPOST data to be sent via the  {@link org.apache.commons.httpclient.methods.PostMethod}
 */
@SuppressWarnings(""String_Node_Str"") public static void handleMultipartPost(EntityEnclosingMethod postMethodProxyRequest,HttpServletRequest httpServletRequest,DiskFileItemFactory diskFileItemFactory) throws ServletException {
  ServletFileUpload servletFileUpload=new ServletFileUpload(diskFileItemFactory);
  try {
    List<FileItem> listFileItems=(List<FileItem>)servletFileUpload.parseRequest(httpServletRequest);
    List<Part> listParts=new ArrayList<Part>();
    for (    FileItem fileItemCurrent : listFileItems) {
      if (fileItemCurrent.isFormField()) {
        StringPart stringPart=new StringPart(fileItemCurrent.getFieldName(),fileItemCurrent.getString());
        listParts.add(stringPart);
      }
 else {
        FilePart filePart=new FilePart(fileItemCurrent.getFieldName(),new ByteArrayPartSource(fileItemCurrent.getName(),fileItemCurrent.get()));
        listParts.add(filePart);
      }
    }
    MultipartRequestEntity multipartRequestEntity=new MultipartRequestEntity(listParts.toArray(new Part[listParts.size()]),postMethodProxyRequest.getParams());
    postMethodProxyRequest.setRequestEntity(multipartRequestEntity);
    postMethodProxyRequest.setRequestHeader(STRING_CONTENT_TYPE_HEADER_NAME,multipartRequestEntity.getContentType());
  }
 catch (  FileUploadException fileUploadException) {
    throw new ServletException(fileUploadException);
  }
}","/** 
 * Sets up the given   {@link org.apache.commons.httpclient.methods.PostMethod} to send the same multipart POST dataas was sent in the given  {@link HttpServletRequest}
 * @param postMethodProxyRequest The {@link org.apache.commons.httpclient.methods.PostMethod} that we are configuring to send amultipart POST request
 * @param httpServletRequest     The {@link HttpServletRequest} that contains the multipartPOST data to be sent via the  {@link org.apache.commons.httpclient.methods.PostMethod}
 */
@SuppressWarnings(""String_Node_Str"") public static void handleMultipartPost(EntityEnclosingMethod postMethodProxyRequest,HttpServletRequest httpServletRequest,DiskFileItemFactory diskFileItemFactory) throws ServletException {
  try {
    InputStreamRequestEntity ire=new InputStreamRequestEntity(httpServletRequest.getInputStream());
    postMethodProxyRequest.setRequestEntity(ire);
    postMethodProxyRequest.setRequestHeader(STRING_CONTENT_TYPE_HEADER_NAME,httpServletRequest.getHeader(STRING_CONTENT_TYPE_HEADER_NAME));
  }
 catch (  Exception e) {
    throw new ServletException(e);
  }
}",0.5984568936598457
116897,"/** 
 * Sets up the given   {@link org.apache.commons.httpclient.methods.PostMethod} to send the same standard POST dataas was sent in the given  {@link HttpServletRequest}
 * @param methodProxyRequest The {@link org.apache.commons.httpclient.methods.PostMethod} that we are configuring to send astandard POST request
 * @param httpServletRequest The {@link HttpServletRequest} that contains the POST data tobe sent via the  {@link org.apache.commons.httpclient.methods.PostMethod}
 * @param history            The {@link com.groupon.odo.proxylib.models.History} log for this request
 */
@SuppressWarnings(""String_Node_Str"") public static void handleStandardPost(EntityEnclosingMethod methodProxyRequest,HttpServletRequest httpServletRequest,History history) throws Exception {
  String deserialisedMessages=""String_Node_Str"";
  byte[] requestByteArray=null;
  StringBuilder requestBody=new StringBuilder();
  InputStream body=httpServletRequest.getInputStream();
  java.util.Scanner s=new java.util.Scanner(body).useDelimiter(""String_Node_Str"");
  if (httpServletRequest.getContentType() != null && httpServletRequest.getContentType().contains(STRING_CONTENT_TYPE_FORM_URLENCODED)) {
    Map<String,String[]> mapPostParameters=HttpUtilities.mapUrlEncodedParameters(httpServletRequest);
    for (    String stringParameterName : mapPostParameters.keySet()) {
      String[] stringArrayParameterValues=mapPostParameters.get(stringParameterName);
      for (      String stringParameterValue : stringArrayParameterValues) {
        if (requestBody.length() > 0) {
          requestBody.append(""String_Node_Str"");
        }
        requestBody.append(stringParameterName);
        if (stringParameterValue.length() > 0) {
          requestBody.append(""String_Node_Str"");
          requestBody.append(stringParameterValue);
        }
      }
    }
  }
 else   if (httpServletRequest.getContentType() != null && httpServletRequest.getContentType().contains(STRING_CONTENT_TYPE_MESSAGEPACK)) {
    MessagePack msgpack=new MessagePack();
    requestByteArray=IOUtils.toByteArray(body);
    ByteArrayInputStream byteArrayIS=new ByteArrayInputStream(requestByteArray);
    Unpacker unpacker=msgpack.createUnpacker(byteArrayIS);
    for (    Value message : unpacker) {
      deserialisedMessages+=message;
      deserialisedMessages+=""String_Node_Str"";
    }
  }
 else {
    if (s.hasNext()) {
      requestBody.append(s.next());
    }
  }
  StringRequestEntity stringEntity=new StringRequestEntity(requestBody.toString(),null,null);
  history.setRequestPostData(requestBody.toString());
  methodProxyRequest.setRequestEntity(stringEntity);
  if (httpServletRequest.getContentType() != null && httpServletRequest.getContentType().contains(STRING_CONTENT_TYPE_MESSAGEPACK)) {
    history.setRequestPostData(deserialisedMessages);
    ByteArrayRequestEntity byteRequestEntity=new ByteArrayRequestEntity(requestByteArray);
    methodProxyRequest.setRequestEntity(byteRequestEntity);
  }
}","/** 
 * Sets up the given   {@link org.apache.commons.httpclient.methods.PostMethod} to send the same standard POST dataas was sent in the given  {@link HttpServletRequest}
 * @param methodProxyRequest The {@link org.apache.commons.httpclient.methods.PostMethod} that we are configuring to send astandard POST request
 * @param httpServletRequest The {@link HttpServletRequest} that contains the POST data tobe sent via the  {@link org.apache.commons.httpclient.methods.PostMethod}
 * @param history            The {@link com.groupon.odo.proxylib.models.History} log for this request
 */
@SuppressWarnings(""String_Node_Str"") public static void handleStandardPost(EntityEnclosingMethod methodProxyRequest,HttpServletRequest httpServletRequest,History history) throws Exception {
  String deserialisedMessages=""String_Node_Str"";
  byte[] requestByteArray=null;
  StringBuilder requestBody=new StringBuilder();
  InputStream body=httpServletRequest.getInputStream();
  RequestEntity requestEntity=null;
  if (httpServletRequest.getContentType() != null && httpServletRequest.getContentType().contains(STRING_CONTENT_TYPE_FORM_URLENCODED) && httpServletRequest.getHeader(""String_Node_Str"") == null) {
    java.util.Scanner s=new java.util.Scanner(body).useDelimiter(""String_Node_Str"");
    Map<String,String[]> mapPostParameters=HttpUtilities.mapUrlEncodedParameters(httpServletRequest);
    for (    String stringParameterName : mapPostParameters.keySet()) {
      String[] stringArrayParameterValues=mapPostParameters.get(stringParameterName);
      for (      String stringParameterValue : stringArrayParameterValues) {
        if (requestBody.length() > 0) {
          requestBody.append(""String_Node_Str"");
        }
        requestBody.append(stringParameterName);
        if (stringParameterValue.length() > 0) {
          requestBody.append(""String_Node_Str"");
          requestBody.append(stringParameterValue);
        }
      }
    }
    StringRequestEntity stringEntity=new StringRequestEntity(requestBody.toString(),null,null);
    requestEntity=stringEntity;
  }
 else   if (httpServletRequest.getContentType() != null && httpServletRequest.getContentType().contains(STRING_CONTENT_TYPE_MESSAGEPACK)) {
    MessagePack msgpack=new MessagePack();
    requestByteArray=IOUtils.toByteArray(body);
    ByteArrayInputStream byteArrayIS=new ByteArrayInputStream(requestByteArray);
    Unpacker unpacker=msgpack.createUnpacker(byteArrayIS);
    for (    Value message : unpacker) {
      deserialisedMessages+=message;
      deserialisedMessages+=""String_Node_Str"";
    }
  }
 else   if (httpServletRequest.getHeader(""String_Node_Str"") != null) {
    InputStreamRequestEntity ire=new InputStreamRequestEntity(body);
    requestEntity=ire;
    requestBody.append(""String_Node_Str"");
  }
 else {
    java.util.Scanner s=new java.util.Scanner(body).useDelimiter(""String_Node_Str"");
    if (s.hasNext()) {
      requestBody.append(s.next());
    }
    StringRequestEntity stringEntity=new StringRequestEntity(requestBody.toString(),null,null);
    requestEntity=stringEntity;
  }
  history.setRequestPostData(requestBody.toString());
  methodProxyRequest.setRequestEntity(requestEntity);
  if (httpServletRequest.getContentType() != null && httpServletRequest.getContentType().contains(STRING_CONTENT_TYPE_MESSAGEPACK)) {
    history.setRequestPostData(deserialisedMessages);
    ByteArrayRequestEntity byteRequestEntity=new ByteArrayRequestEntity(requestByteArray);
    methodProxyRequest.setRequestEntity(byteRequestEntity);
  }
}",0.8504687259873982
116898,"/** 
 * Execute a request
 * @param httpMethodProxyRequest
 * @param httpServletRequest
 * @param httpServletResponse
 * @param history
 * @throws Exception
 */
private void executeRequest(HttpMethod httpMethodProxyRequest,HttpServletRequest httpServletRequest,PluginResponse httpServletResponse,History history) throws Exception {
  int intProxyResponseCode=999;
  try {
    HttpClient httpClient=new HttpClient();
    httpMethodProxyRequest.setFollowRedirects(false);
    ArrayList<String> headersToRemove=getRemoveHeaders();
    httpClient.getParams().setSoTimeout(60000);
    httpServletRequest.setAttribute(""String_Node_Str"",headersToRemove);
    HttpMethodRetryHandler noretryhandler=new HttpMethodRetryHandler(){
      public boolean retryMethod(      final HttpMethod method,      final IOException exception,      int executionCount){
        return false;
      }
    }
;
    httpMethodProxyRequest.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,noretryhandler);
    intProxyResponseCode=httpClient.executeMethod(httpMethodProxyRequest);
  }
 catch (  Exception e) {
    httpServletResponse.setStatus(504);
    httpServletResponse.setHeader(Constants.HEADER_STATUS,""String_Node_Str"");
    httpServletResponse.flushBuffer();
    return;
  }
  logger.info(""String_Node_Str"",intProxyResponseCode,HttpUtilities.getURL(httpMethodProxyRequest.getURI().toString()));
  if (intProxyResponseCode >= HttpServletResponse.SC_MULTIPLE_CHOICES && intProxyResponseCode < HttpServletResponse.SC_NOT_MODIFIED) {
    String stringStatusCode=Integer.toString(intProxyResponseCode);
    processRedirect(stringStatusCode,httpMethodProxyRequest,httpServletRequest,httpServletResponse);
  }
 else {
    httpServletResponse.setStatus(intProxyResponseCode);
    Header[] headerArrayResponse=httpMethodProxyRequest.getResponseHeaders();
    for (    Header header : headerArrayResponse) {
      httpServletResponse.setHeader(header.getName(),header.getValue());
    }
    if (intProxyResponseCode != HttpServletResponse.SC_NOT_MODIFIED) {
      InputStream inputStreamProxyResponse=httpMethodProxyRequest.getResponseBodyAsStream();
      BufferedInputStream bufferedInputStream=new BufferedInputStream(inputStreamProxyResponse);
      int intNextByte;
      httpServletResponse.resetBuffer();
      while ((intNextByte=bufferedInputStream.read()) != -1) {
        httpServletResponse.getOutputStream().write(intNextByte);
      }
    }
  }
}","/** 
 * Execute a request
 * @param httpMethodProxyRequest
 * @param httpServletRequest
 * @param httpServletResponse
 * @param history
 * @throws Exception
 */
private void executeRequest(HttpMethod httpMethodProxyRequest,HttpServletRequest httpServletRequest,PluginResponse httpServletResponse,History history) throws Exception {
  int intProxyResponseCode=999;
  HttpClient httpClient=new HttpClient();
  HttpState state=new HttpState();
  try {
    httpMethodProxyRequest.setFollowRedirects(false);
    ArrayList<String> headersToRemove=getRemoveHeaders();
    httpClient.getParams().setSoTimeout(60000);
    httpServletRequest.setAttribute(""String_Node_Str"",headersToRemove);
    HttpMethodRetryHandler noretryhandler=new HttpMethodRetryHandler(){
      public boolean retryMethod(      final HttpMethod method,      final IOException exception,      int executionCount){
        return false;
      }
    }
;
    httpMethodProxyRequest.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,noretryhandler);
    intProxyResponseCode=httpClient.executeMethod(httpMethodProxyRequest.getHostConfiguration(),httpMethodProxyRequest,state);
  }
 catch (  Exception e) {
    httpServletResponse.setStatus(504);
    httpServletResponse.setHeader(Constants.HEADER_STATUS,""String_Node_Str"");
    httpServletResponse.flushBuffer();
    return;
  }
  logger.info(""String_Node_Str"",intProxyResponseCode,HttpUtilities.getURL(httpMethodProxyRequest.getURI().toString()));
  httpServletResponse.setStatus(intProxyResponseCode);
  Header[] headerArrayResponse=httpMethodProxyRequest.getResponseHeaders();
  for (  Header header : headerArrayResponse) {
    httpServletResponse.setHeader(header.getName(),header.getValue());
  }
  if (intProxyResponseCode != HttpServletResponse.SC_NOT_MODIFIED) {
    InputStream inputStreamProxyResponse=httpMethodProxyRequest.getResponseBodyAsStream();
    BufferedInputStream bufferedInputStream=new BufferedInputStream(inputStreamProxyResponse);
    int intNextByte;
    httpServletResponse.resetBuffer();
    while ((intNextByte=bufferedInputStream.read()) != -1) {
      httpServletResponse.getOutputStream().write(intNextByte);
    }
    for (    Cookie cookie : state.getCookies()) {
      javax.servlet.http.Cookie servletCookie=new javax.servlet.http.Cookie(cookie.getName(),cookie.getValue());
      if (cookie.getPath() != null)       servletCookie.setPath(cookie.getPath());
      if (cookie.getDomain() != null)       servletCookie.setDomain(cookie.getDomain());
      if (cookie.getExpiryDate() != null)       servletCookie.setMaxAge((int)((cookie.getExpiryDate().getTime() - System.currentTimeMillis()) / 1000));
      servletCookie.setSecure(cookie.getSecure());
      servletCookie.setVersion(cookie.getVersion());
      if (cookie.getComment() != null)       servletCookie.setComment(cookie.getComment());
      httpServletResponse.addCookie(servletCookie);
    }
  }
}",0.543311506080449
116899,"/** 
 * Obtain matching paths for a request
 * @param overrideType
 * @param client
 * @param profile
 * @param uri
 * @param requestType
 * @param pathTest - If true this will also match disabled paths
 * @return
 * @throws Exception
 */
public List<EndpointOverride> getSelectedPaths(int overrideType,Client client,Profile profile,String uri,Integer requestType,boolean pathTest) throws Exception {
  List<EndpointOverride> selectPaths=new ArrayList<EndpointOverride>();
  List<EndpointOverride> paths=new ArrayList<EndpointOverride>();
  if (client.getIsActive()) {
    paths=getPaths(profile.getId(),client.getUUID(),null);
  }
  boolean foundRealPath=false;
  logger.info(""String_Node_Str"",uri);
  for (  EndpointOverride path : paths) {
    if (requestType != -1 && path.getRequestType() != requestType && path.getRequestType() != Constants.REQUEST_TYPE_ALL)     continue;
    Pattern pattern=Pattern.compile(path.getPath());
    Matcher matcher=pattern.matcher(uri);
    if (matcher.find()) {
      if (pathTest || (path.getEnabledEndpoints().size() > 0 && ((overrideType == Constants.OVERRIDE_TYPE_RESPONSE && path.getResponseEnabled()) || (overrideType == Constants.OVERRIDE_TYPE_REQUEST && path.getRequestEnabled())))) {
        if (!foundRealPath || path.getGlobal())         selectPaths.add(path);
      }
      if (!path.getGlobal()) {
        foundRealPath=true;
      }
    }
  }
  return selectPaths;
}","/** 
 * Obtain matching paths for a request
 * @param overrideType
 * @param client
 * @param profile
 * @param uri
 * @param requestType
 * @param pathTest - If true this will also match disabled paths
 * @return
 * @throws Exception
 */
public List<EndpointOverride> getSelectedPaths(int overrideType,Client client,Profile profile,String uri,Integer requestType,boolean pathTest) throws Exception {
  List<EndpointOverride> selectPaths=new ArrayList<EndpointOverride>();
  List<EndpointOverride> paths=new ArrayList<EndpointOverride>();
  if (client.getIsActive()) {
    paths=getPaths(profile.getId(),client.getUUID(),null);
  }
  boolean foundRealPath=false;
  logger.info(""String_Node_Str"",uri);
  for (  EndpointOverride path : paths) {
    if (requestType != -1 && path.getRequestType() != requestType && path.getRequestType() != Constants.REQUEST_TYPE_ALL)     continue;
    try {
      Pattern pattern=Pattern.compile(path.getPath());
      Matcher matcher=pattern.matcher(uri);
      if (matcher.find()) {
        if (pathTest || (path.getEnabledEndpoints().size() > 0 && ((overrideType == Constants.OVERRIDE_TYPE_RESPONSE && path.getResponseEnabled()) || (overrideType == Constants.OVERRIDE_TYPE_REQUEST && path.getRequestEnabled())))) {
          if (!foundRealPath || path.getGlobal())           selectPaths.add(path);
        }
        if (!path.getGlobal()) {
          foundRealPath=true;
        }
      }
    }
 catch (    PatternSyntaxException pse) {
    }
  }
  return selectPaths;
}",0.97056810403833
116900,"/** 
 * Handles update requests for specific paths
 * @param model
 * @param pathIdentifier
 * @param profileIdentifier
 * @param clientUUID
 * @param responseEnabled
 * @param requestEnabled
 * @param addOverride
 * @param enabledMoveUp
 * @param enabledMoveDown
 * @param pathName
 * @param path
 * @param bodyFilter
 * @param customResponse
 * @param customRequest
 * @param resetResponse
 * @param resetRequest
 * @param contentType
 * @param repeatNumber
 * @param global
 * @return
 * @throws Exception
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public @ResponseBody String setPath(Model model,@PathVariable String pathIdentifier,@RequestParam(value=""String_Node_Str"",required=false) String profileIdentifier,@RequestParam(value=""String_Node_Str"",defaultValue=Constants.PROFILE_CLIENT_DEFAULT_ID) String clientUUID,@RequestParam(required=false) Boolean responseEnabled,@RequestParam(required=false) Boolean requestEnabled,@RequestParam(value=""String_Node_Str"",required=false) Integer addOverride,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveUp,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveDown,@RequestParam(required=false) String pathName,@RequestParam(required=false) String path,@RequestParam(required=false) String bodyFilter,@RequestParam(required=false) String customResponse,@RequestParam(required=false) String customRequest,@RequestParam(required=false) Boolean resetResponse,@RequestParam(required=false) Boolean resetRequest,@RequestParam(required=false) String contentType,@RequestParam(required=false) Integer repeatNumber,@RequestParam(required=false) Boolean global,@RequestParam(value=""String_Node_Str"",required=false) Integer[] groups,HttpServletResponse response) throws Exception {
  String decodedProfileIdentifier=null;
  if (profileIdentifier != null)   decodedProfileIdentifier=URLDecoder.decode(profileIdentifier,""String_Node_Str"");
  Identifiers identifiers=ControllerUtils.convertProfileAndPathIdentifier(decodedProfileIdentifier,pathIdentifier);
  Integer pathId=identifiers.getPathId();
  if (responseEnabled != null) {
    PathOverrideService.getInstance().setResponseEnabled(pathId,responseEnabled,clientUUID);
  }
  if (requestEnabled != null) {
    PathOverrideService.getInstance().setRequestEnabled(pathId,requestEnabled,clientUUID);
  }
  if (addOverride != null) {
    OverrideService.getInstance().enableOverride(addOverride,pathId,clientUUID);
  }
  if (enabledMoveUp != null) {
    String[] parts=enabledMoveUp.split(""String_Node_Str"");
    OverrideService.getInstance().increasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (enabledMoveDown != null) {
    String[] parts=enabledMoveDown.split(""String_Node_Str"");
    OverrideService.getInstance().decreasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (pathName != null) {
    if (pathName.equals(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    if (pathName.contains(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    PathOverrideService.getInstance().setName(pathId,pathName);
  }
  if (path != null) {
    PathOverrideService.getInstance().setPath(pathId,path);
  }
  if (bodyFilter != null) {
    PathOverrideService.getInstance().setBodyFilter(pathId,bodyFilter);
  }
  if (customResponse != null) {
    PathOverrideService.getInstance().setCustomResponse(pathId,customResponse,clientUUID);
  }
  if (customRequest != null) {
    PathOverrideService.getInstance().setCustomRequest(pathId,customRequest,clientUUID);
  }
  if (resetResponse != null) {
    PathOverrideService.getInstance().clearResponseSettings(pathId,clientUUID);
  }
  if (resetRequest != null) {
    PathOverrideService.getInstance().clearRequestSettings(pathId,clientUUID);
  }
  if (contentType != null) {
    PathOverrideService.getInstance().setContentType(pathId,contentType);
  }
  if (global != null) {
    PathOverrideService.getInstance().setGlobal(pathId,global);
  }
  if (repeatNumber != null) {
    EditService.getInstance().updateRepeatNumber(repeatNumber,pathId,clientUUID);
  }
  if (groups != null) {
    pathOverrideService.setGroupsForPath(groups,pathId);
  }
  ObjectMapper objectMapper=new ObjectMapper();
  ObjectWriter writer=objectMapper.writer();
  return writer.writeValueAsString(PathOverrideService.getInstance().getPath(pathId,clientUUID,null));
}","/** 
 * Handles update requests for specific paths
 * @param model
 * @param pathIdentifier
 * @param profileIdentifier
 * @param clientUUID
 * @param responseEnabled
 * @param requestEnabled
 * @param addOverride
 * @param enabledMoveUp
 * @param enabledMoveDown
 * @param pathName
 * @param path
 * @param bodyFilter
 * @param customResponse
 * @param customRequest
 * @param resetResponse
 * @param resetRequest
 * @param contentType
 * @param repeatNumber
 * @param global
 * @return
 * @throws Exception
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public @ResponseBody String setPath(Model model,@PathVariable String pathIdentifier,@RequestParam(value=""String_Node_Str"",required=false) String profileIdentifier,@RequestParam(value=""String_Node_Str"",defaultValue=Constants.PROFILE_CLIENT_DEFAULT_ID) String clientUUID,@RequestParam(required=false) Boolean responseEnabled,@RequestParam(required=false) Boolean requestEnabled,@RequestParam(value=""String_Node_Str"",required=false) Integer addOverride,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveUp,@RequestParam(value=""String_Node_Str"",required=false) String enabledMoveDown,@RequestParam(required=false) String pathName,@RequestParam(required=false) String path,@RequestParam(required=false) String bodyFilter,@RequestParam(required=false) String customResponse,@RequestParam(required=false) String customRequest,@RequestParam(required=false) Boolean resetResponse,@RequestParam(required=false) Boolean resetRequest,@RequestParam(required=false) String contentType,@RequestParam(required=false) Integer repeatNumber,@RequestParam(required=false) Boolean global,@RequestParam(value=""String_Node_Str"",required=false) Integer[] groups,HttpServletResponse response) throws Exception {
  String decodedProfileIdentifier=null;
  if (profileIdentifier != null)   decodedProfileIdentifier=URLDecoder.decode(profileIdentifier,""String_Node_Str"");
  Identifiers identifiers=ControllerUtils.convertProfileAndPathIdentifier(decodedProfileIdentifier,pathIdentifier);
  Integer pathId=identifiers.getPathId();
  if (responseEnabled != null) {
    PathOverrideService.getInstance().setResponseEnabled(pathId,responseEnabled,clientUUID);
  }
  if (requestEnabled != null) {
    PathOverrideService.getInstance().setRequestEnabled(pathId,requestEnabled,clientUUID);
  }
  if (addOverride != null) {
    OverrideService.getInstance().enableOverride(addOverride,pathId,clientUUID);
  }
  if (enabledMoveUp != null) {
    String[] parts=enabledMoveUp.split(""String_Node_Str"");
    OverrideService.getInstance().increasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (enabledMoveDown != null) {
    String[] parts=enabledMoveDown.split(""String_Node_Str"");
    OverrideService.getInstance().decreasePriority(Integer.parseInt(parts[0]),pathId,clientUUID);
  }
  if (pathName != null) {
    if (pathName.equals(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    if (pathName.contains(""String_Node_Str"")) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    PathOverrideService.getInstance().setName(pathId,pathName);
  }
  if (path != null) {
    try {
      Pattern.compile(path);
    }
 catch (    PatternSyntaxException pse) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      return ""String_Node_Str"";
    }
    PathOverrideService.getInstance().setPath(pathId,path);
  }
  if (bodyFilter != null) {
    PathOverrideService.getInstance().setBodyFilter(pathId,bodyFilter);
  }
  if (customResponse != null) {
    PathOverrideService.getInstance().setCustomResponse(pathId,customResponse,clientUUID);
  }
  if (customRequest != null) {
    PathOverrideService.getInstance().setCustomRequest(pathId,customRequest,clientUUID);
  }
  if (resetResponse != null) {
    PathOverrideService.getInstance().clearResponseSettings(pathId,clientUUID);
  }
  if (resetRequest != null) {
    PathOverrideService.getInstance().clearRequestSettings(pathId,clientUUID);
  }
  if (contentType != null) {
    PathOverrideService.getInstance().setContentType(pathId,contentType);
  }
  if (global != null) {
    PathOverrideService.getInstance().setGlobal(pathId,global);
  }
  if (repeatNumber != null) {
    EditService.getInstance().updateRepeatNumber(repeatNumber,pathId,clientUUID);
  }
  if (groups != null) {
    pathOverrideService.setGroupsForPath(groups,pathId);
  }
  ObjectMapper objectMapper=new ObjectMapper();
  ObjectWriter writer=objectMapper.writer();
  return writer.writeValueAsString(PathOverrideService.getInstance().getPath(pathId,clientUUID,null));
}",0.9797158043171712
116901,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public @ResponseBody String addPath(Model model,String profileIdentifier,@RequestParam(value=""String_Node_Str"") String pathName,@RequestParam(value=""String_Node_Str"") String path,@RequestParam(value=""String_Node_Str"",required=false) String bodyFilter,@RequestParam(value=""String_Node_Str"",required=false) String contentType,@RequestParam(value=""String_Node_Str"",required=false) Integer requestType,@RequestParam(value=""String_Node_Str"",required=false) Integer[] groups,@RequestParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") Boolean global,HttpServletResponse response) throws Exception {
  int profileId=ControllerUtils.convertProfileIdentifier(profileIdentifier);
  if (pathName.equals(""String_Node_Str"")) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    return ""String_Node_Str"";
  }
  if (pathName.contains(""String_Node_Str"")) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    return ""String_Node_Str"";
  }
  int pathId=pathOverrideService.addPathnameToProfile(profileId,pathName,path);
  if (groups != null) {
    for (int j=0; j < groups.length; j++)     pathOverrideService.AddGroupByNumber(profileId,pathId,groups[j]);
  }
  pathOverrideService.setContentType(pathId,contentType);
  pathOverrideService.setRequestType(pathId,requestType);
  pathOverrideService.setGlobal(pathId,global);
  if (bodyFilter != null) {
    pathOverrideService.setBodyFilter(pathId,bodyFilter);
  }
  ObjectMapper objectMapper=new ObjectMapper();
  ObjectWriter writer=objectMapper.writer();
  return writer.writeValueAsString(pathOverrideService.getPath(pathId));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public @ResponseBody String addPath(Model model,String profileIdentifier,@RequestParam(value=""String_Node_Str"") String pathName,@RequestParam(value=""String_Node_Str"") String path,@RequestParam(value=""String_Node_Str"",required=false) String bodyFilter,@RequestParam(value=""String_Node_Str"",required=false) String contentType,@RequestParam(value=""String_Node_Str"",required=false) Integer requestType,@RequestParam(value=""String_Node_Str"",required=false) Integer[] groups,@RequestParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") Boolean global,HttpServletResponse response) throws Exception {
  int profileId=ControllerUtils.convertProfileIdentifier(profileIdentifier);
  if (pathName.equals(""String_Node_Str"")) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    return ""String_Node_Str"";
  }
  if (pathName.contains(""String_Node_Str"")) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    return ""String_Node_Str"";
  }
  try {
    Pattern pattern=Pattern.compile(path);
  }
 catch (  PatternSyntaxException pse) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    return ""String_Node_Str"";
  }
  int pathId=pathOverrideService.addPathnameToProfile(profileId,pathName,path);
  if (groups != null) {
    for (int j=0; j < groups.length; j++)     pathOverrideService.AddGroupByNumber(profileId,pathId,groups[j]);
  }
  pathOverrideService.setContentType(pathId,contentType);
  pathOverrideService.setRequestType(pathId,requestType);
  pathOverrideService.setGlobal(pathId,global);
  if (bodyFilter != null) {
    pathOverrideService.setBodyFilter(pathId,bodyFilter);
  }
  ObjectMapper objectMapper=new ObjectMapper();
  ObjectWriter writer=objectMapper.writer();
  return writer.writeValueAsString(pathOverrideService.getPath(pathId));
}",0.9463220675944334
116902,"/** 
 * Returns a X509 binary certificate for a given domain name if a certificate has been generated for it
 * @param locale
 * @param model
 * @param response
 * @param hostname
 * @throws Exception
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET,RequestMethod.HEAD}) public @ResponseBody void getCert(Locale locale,Model model,HttpServletResponse response,@PathVariable String hostname) throws Exception {
  if (hostname.equals(""String_Node_Str"")) {
    hostname=""String_Node_Str"";
  }
  response.reset();
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"" + hostname + ""String_Node_Str"");
  if (hostname.equals(""String_Node_Str"")) {
    File root=new File(""String_Node_Str"");
    com.groupon.odo.proxylib.Utils.copyResourceToLocalFile(hostname + ""String_Node_Str"",root.getAbsolutePath() + File.separator + hostname+ ""String_Node_Str"");
    Files.copy(new File(root.getAbsolutePath() + File.separator + ""String_Node_Str"").toPath(),response.getOutputStream());
    response.flushBuffer();
  }
 else {
    KeyStoreManager keyStoreManager=com.groupon.odo.bmp.Utils.getKeyStoreManager(hostname);
    response.getOutputStream().write(keyStoreManager.getCertificateByAlias(hostname).getEncoded());
    response.flushBuffer();
  }
}","/** 
 * Returns a X509 binary certificate for a given domain name if a certificate has been generated for it
 * @param locale
 * @param model
 * @param response
 * @param hostname
 * @throws Exception
 */
@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET,RequestMethod.HEAD}) public @ResponseBody void getCert(Locale locale,Model model,HttpServletResponse response,@PathVariable String hostname) throws Exception {
  response.reset();
  response.setContentType(""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"" + hostname + ""String_Node_Str"");
  if (hostname.equals(""String_Node_Str"")) {
    hostname=""String_Node_Str"";
    response.setContentType(""String_Node_Str"");
  }
  KeyStoreManager keyStoreManager=com.groupon.odo.bmp.Utils.getKeyStoreManager(hostname);
  if (hostname.equals(""String_Node_Str"")) {
    File root=new File(""String_Node_Str"" + File.separator + hostname);
    Files.copy(new File(root.getAbsolutePath() + File.separator + hostname+ ""String_Node_Str"").toPath(),response.getOutputStream());
    response.flushBuffer();
  }
 else {
    response.getOutputStream().write(keyStoreManager.getCertificateByAlias(hostname).getEncoded());
    response.flushBuffer();
  }
}",0.7183544303797469
116903,"/** 
 * Obtain database connection
 * @return
 * @throws SQLException
 */
public Connection getConnection() throws SQLException {
  try {
    if (_connection != null) {
      if (_connection.isValid(1)) {
        _connection=null;
        try {
          startServer();
        }
 catch (        Exception e) {
        }
      }
    }
    if (_connection == null) {
      String connectString=""String_Node_Str"" + databaseHost + ""String_Node_Str""+ String.valueOf(port)+ ""String_Node_Str""+ this.databaseName+ ""String_Node_Str"";
      _connection=DriverManager.getConnection(connectString,""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e.getClass());
  }
  return _connection;
}","/** 
 * Obtain database connection
 * @return
 * @throws SQLException
 */
public Connection getConnection() throws SQLException {
  try {
    if (_connection != null) {
      if (!_connection.isValid(1)) {
        _connection=null;
        try {
          startServer();
        }
 catch (        Exception e) {
        }
      }
    }
    if (_connection == null) {
      String connectString=""String_Node_Str"" + databaseHost + ""String_Node_Str""+ String.valueOf(port)+ ""String_Node_Str""+ this.databaseName+ ""String_Node_Str"";
      _connection=DriverManager.getConnection(connectString,""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e.getClass());
  }
  return _connection;
}",0.9993201903467028
116904,"public String getAttribute(String name){
  return attributes.containsKey(name) ? attributes.get(name) : null;
}","public Object getAttribute(String name){
  return attributes.containsKey(name) ? attributes.get(name) : null;
}",0.954954954954955
116905,"private void populateAttributes(HttpServletRequest request){
  Enumeration attributeNames=request.getAttributeNames();
  this.attributes=new HashMap<String,String>();
  while (attributeNames.hasMoreElements()) {
    String headerName=(String)attributeNames.nextElement();
    String value=request.getHeader(headerName);
    this.headers.put(headerName,value);
  }
}","private void populateAttributes(HttpServletRequest request){
  Enumeration attributeNames=request.getAttributeNames();
  this.attributes=new HashMap<String,Object>();
  while (attributeNames.hasMoreElements()) {
    String attrName=(String)attributeNames.nextElement();
    Object value=request.getAttribute(attrName);
    this.attributes.put(attrName,value);
  }
}",0.8273972602739726
116906,"public HttpRequestInfo(HttpServletRequest request){
  this.authType=request.getAuthType();
  this.contextPath=request.getContextPath();
  populateHeaders(request);
  this.method=request.getMethod();
  this.pathInfo=request.getPathInfo();
  this.queryString=request.getQueryString();
  this.requestURI=request.getRequestURI();
  this.servletPath=request.getServletPath();
  this.contentType=request.getContentType();
  this.characterEncoding=request.getCharacterEncoding();
  this.contentLength=request.getContentLength();
  this.localName=request.getLocalName();
  this.localPort=request.getLocalPort();
  this.parameterMap=request.getParameterMap();
  this.protocol=request.getProtocol();
  this.remoteAddr=request.getRemoteAddr();
  this.remoteHost=request.getRemoteHost();
  this.remotePort=request.getRemotePort();
  this.serverName=request.getServerName();
  this.secure=request.isSecure();
  populateAttributes(request);
}","public HttpRequestInfo(HttpServletRequest request,String postContent){
  this(request);
  this.postContent=postContent;
}",0.1887511916110581
116907,"/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  requestInformation.set(new RequestInformation());
  RequestInformation requestInfo=requestInformation.get();
  History history=new History();
  logOriginalRequestHistory(""String_Node_Str"",request,history);
  requestInfo.originalRequestInfo=new HttpRequestInfo(request);
  try {
    PostMethod postMethodProxyRequest=new PostMethod(this.getProxyURL(request,history,Constants.REQUEST_TYPE_POST));
    setProxyRequestHeaders(request,postMethodProxyRequest);
    if (ServletFileUpload.isMultipartContent(request)) {
      logger.info(""String_Node_Str"");
      DiskFileItemFactory diskFactory=createDiskFactory();
      HttpUtilities.handleMultipartPost(postMethodProxyRequest,request,diskFactory);
    }
 else {
      logger.info(""String_Node_Str"");
      HttpUtilities.handleStandardPost(postMethodProxyRequest,request,history);
    }
    this.cullPathsByBodyFilter(history);
    this.executeProxyRequest(postMethodProxyRequest,request,response,history);
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e.getMessage());
  }
}","/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  requestInformation.set(new RequestInformation());
  RequestInformation requestInfo=requestInformation.get();
  History history=new History();
  logOriginalRequestHistory(""String_Node_Str"",request,history);
  try {
    PostMethod postMethodProxyRequest=new PostMethod(this.getProxyURL(request,history,Constants.REQUEST_TYPE_POST));
    setProxyRequestHeaders(request,postMethodProxyRequest);
    if (ServletFileUpload.isMultipartContent(request)) {
      logger.info(""String_Node_Str"");
      DiskFileItemFactory diskFactory=createDiskFactory();
      HttpUtilities.handleMultipartPost(postMethodProxyRequest,request,diskFactory);
    }
 else {
      logger.info(""String_Node_Str"");
      HttpUtilities.handleStandardPost(postMethodProxyRequest,request,history);
    }
    this.cullPathsByBodyFilter(history);
    requestInfo.originalRequestInfo=new HttpRequestInfo(request,history.getOriginalRequestPostData());
    this.executeProxyRequest(postMethodProxyRequest,request,response,history);
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e.getMessage());
  }
}",0.934226073257188
116908,"/** 
 * @see HttpServlet#doPut(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPut(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  requestInformation.set(new RequestInformation());
  RequestInformation requestInfo=requestInformation.get();
  History history=new History();
  logOriginalRequestHistory(""String_Node_Str"",request,history);
  requestInfo.originalRequestInfo=new HttpRequestInfo(request);
  try {
    PutMethod putMethodProxyRequest=new PutMethod(this.getProxyURL(request,history,Constants.REQUEST_TYPE_PUT));
    setProxyRequestHeaders(request,putMethodProxyRequest);
    if (ServletFileUpload.isMultipartContent(request)) {
      logger.info(""String_Node_Str"");
      DiskFileItemFactory diskFactory=createDiskFactory();
      HttpUtilities.handleMultipartPost(putMethodProxyRequest,request,diskFactory);
    }
 else {
      logger.info(""String_Node_Str"");
      HttpUtilities.handleStandardPost(putMethodProxyRequest,request,history);
    }
    this.cullPathsByBodyFilter(history);
    this.executeProxyRequest(putMethodProxyRequest,request,response,history);
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e.getMessage());
  }
}","/** 
 * @see HttpServlet#doPut(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPut(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  requestInformation.set(new RequestInformation());
  RequestInformation requestInfo=requestInformation.get();
  History history=new History();
  logOriginalRequestHistory(""String_Node_Str"",request,history);
  try {
    PutMethod putMethodProxyRequest=new PutMethod(this.getProxyURL(request,history,Constants.REQUEST_TYPE_PUT));
    setProxyRequestHeaders(request,putMethodProxyRequest);
    if (ServletFileUpload.isMultipartContent(request)) {
      logger.info(""String_Node_Str"");
      DiskFileItemFactory diskFactory=createDiskFactory();
      HttpUtilities.handleMultipartPost(putMethodProxyRequest,request,diskFactory);
    }
 else {
      logger.info(""String_Node_Str"");
      HttpUtilities.handleStandardPost(putMethodProxyRequest,request,history);
    }
    this.cullPathsByBodyFilter(history);
    requestInfo.originalRequestInfo=new HttpRequestInfo(request,history.getOriginalRequestPostData());
    this.executeProxyRequest(putMethodProxyRequest,request,response,history);
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"",e.getMessage());
  }
}",0.9337038507344184
116909,"public static String removePortFromHostHeaderString(String host){
  String hostName=""String_Node_Str"";
  int portPos=host.indexOf(""String_Node_Str"");
  if (portPos != -1)   hostName=host.substring(0,portPos);
  return hostName;
}","public static String removePortFromHostHeaderString(String host){
  String hostName=host;
  int portPos=host.indexOf(""String_Node_Str"");
  if (portPos != -1)   hostName=host.substring(0,portPos);
  return hostName;
}",0.952808988764045
116910,"public void reduce(Text key,Iterable<Text> values,Context context) throws IOException, InterruptedException {
  for (  Text value : values) {
    String logRecord=value.toString();
    Matcher logRecordMatcher=logRecordPattern.matcher(logRecord);
    DateTime timestamp=DateTime.parse(logRecordMatcher.group(2),TIMESTAMP_FORMATTER);
    if (lastTimeStamp == null || (timestamp.getMillis() - lastTimeStamp.getMillis() > SESSION_TIMEOUT_IN_MS)) {
      sessionId++;
    }
    lastTimeStamp=timestamp;
    result.set(logRecord + ""String_Node_Str"" + sessionId);
    context.write(null,result);
  }
}","public void reduce(IpTimestampKey key,Iterable<Text> values,Context context) throws IOException, InterruptedException {
  for (  Text value : values) {
    String logRecord=value.toString();
    if (lastTimeStamp == null || (key.getUnixTimestamp() - lastTimeStamp > SESSION_TIMEOUT_IN_MS)) {
      sessionId++;
    }
    lastTimeStamp=key.getUnixTimestamp();
    result.set(logRecord + ""String_Node_Str"" + sessionId);
    context.write(null,result);
  }
}",0.7676190476190476
116911,"public void map(Object key,Text value,Context context) throws IOException, InterruptedException {
  logRecordMatcher=logRecordPattern.matcher(value.toString());
  if (logRecordMatcher.matches()) {
    String ip=logRecordMatcher.group(1);
    Long unixTimestamp=Long.parseLong(logRecordMatcher.group(2));
    IpTimestampKey outputKey=new IpTimestampKey(ip,unixTimestamp);
    context.write(outputKey,value);
  }
}","public void map(Object key,Text value,Context context) throws IOException, InterruptedException {
  logRecordMatcher=logRecordPattern.matcher(value.toString());
  if (logRecordMatcher.matches()) {
    String ip=logRecordMatcher.group(1);
    DateTime timestamp=DateTime.parse(logRecordMatcher.group(2),TIMESTAMP_FORMATTER);
    Long unixTimestamp=timestamp.getMillis();
    IpTimestampKey outputKey=new IpTimestampKey(ip,unixTimestamp);
    context.write(outputKey,value);
  }
}",0.8359550561797753
116912,"@Override public void onClick(View v){
  if (!currentRoom.isFree())   return;
  TimeSpan limits=currentRoom.getNextFreeTime();
  if (limits == null)   return;
  DateTime now=new DateTime();
  TimeSpan suggested=new TimeSpan(now,now.add(Calendar.MINUTE,DEFAULT_BOOK_NOW_DURATION));
  if (limits.getEnd().before(suggested.getEnd())) {
    suggested=limits;
  }
  final RoomReservationPopup d=new RoomReservationPopup(RoomActivity.this,limits,suggested,currentRoom);
  d.setOnReserveCallback(new OnReserveListener(){
    @Override public void call(    LobbyReservationRowView v){
      d.dismiss();
      refreshData();
    }
  }
);
  RoomActivity.this.trafficLights.disable();
  d.setOnDismissListener(new OnDismissListener(){
    @Override public void onDismiss(    DialogInterface dialog){
      RoomActivity.this.trafficLights.enable();
    }
  }
);
  d.show();
}","@Override public void onClick(View v){
  if (!currentRoom.isFree())   return;
  TimeSpan limits=currentRoom.getNextFreeTime();
  DateTime now=new DateTime();
  TimeSpan suggested=new TimeSpan(now,now.add(Calendar.MINUTE,DEFAULT_BOOK_NOW_DURATION));
  if (limits == null) {
    limits=suggested;
  }
 else   if (limits.getEnd().before(suggested.getEnd())) {
    suggested=limits;
  }
  final RoomReservationPopup d=new RoomReservationPopup(RoomActivity.this,limits,suggested,currentRoom);
  d.setOnReserveCallback(new OnReserveListener(){
    @Override public void call(    LobbyReservationRowView v){
      d.dismiss();
      refreshData();
    }
  }
);
  RoomActivity.this.trafficLights.disable();
  d.setOnDismissListener(new OnDismissListener(){
    @Override public void onDismiss(    DialogInterface dialog){
      RoomActivity.this.trafficLights.enable();
    }
  }
);
  d.show();
}",0.9497716894977168
116913,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.room_activity);
  this.weekView=(WeekView)findViewById(R.id.weekView1);
  this.roomNameLabel=(TextView)findViewById(R.id.roomNameLabel);
  this.trafficLights=(RoomTrafficLights)findViewById(R.id.roomTrafficLights);
  try {
    currentRoom=(Room)getIntent().getSerializableExtra(ROOM_EXTRA);
  }
 catch (  ClassCastException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + ROOM_EXTRA);
  }
  if (currentRoom == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ROOM_EXTRA);
  }
  findViewById(R.id.seeAllRoomsButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      RoomActivity.this.finish();
    }
  }
);
  weekView.setOnFreeTimeClickListener(new OnFreeTimeClickListener(){
    @Override public void onFreeTimeClick(    View v,    TimeSpan timeSpan,    DateTime touch){
      TimeSpan reservationTimeSpan=timeSpan;
      if (timeSpan.getLength() > 60 * 60000) {
        DateTime start=timeSpan.getStart();
        DateTime end=timeSpan.getEnd();
        DateTime now=new DateTime();
        touch=touch.stripMinutes();
        if (touch.before(start)) {
          touch=start;
        }
        if (touch.before(now) && now.before(end)) {
          touch=now;
        }
        reservationTimeSpan=new TimeSpan(touch,Calendar.HOUR,1);
        DateTime touchend=reservationTimeSpan.getEnd();
        touchend=touchend.set(Calendar.MINUTE,(touchend.get(Calendar.MINUTE) / 15) * 15);
        if (touchend.after(end)) {
          reservationTimeSpan.setEnd(end);
        }
      }
      final RoomReservationPopup d=new RoomReservationPopup(RoomActivity.this,timeSpan,reservationTimeSpan,currentRoom);
      d.setOnReserveCallback(new OnReserveListener(){
        @Override public void call(        LobbyReservationRowView v){
          d.dismiss();
          refreshData();
        }
      }
);
      RoomActivity.this.trafficLights.disable();
      d.setOnDismissListener(new OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          RoomActivity.this.trafficLights.enable();
        }
      }
);
      d.show();
    }
  }
);
  trafficLights.setBookNowListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!currentRoom.isFree())       return;
      TimeSpan limits=currentRoom.getNextFreeTime();
      if (limits == null)       return;
      DateTime now=new DateTime();
      TimeSpan suggested=new TimeSpan(now,now.add(Calendar.MINUTE,DEFAULT_BOOK_NOW_DURATION));
      if (limits.getEnd().before(suggested.getEnd())) {
        suggested=limits;
      }
      final RoomReservationPopup d=new RoomReservationPopup(RoomActivity.this,limits,suggested,currentRoom);
      d.setOnReserveCallback(new OnReserveListener(){
        @Override public void call(        LobbyReservationRowView v){
          d.dismiss();
          refreshData();
        }
      }
);
      RoomActivity.this.trafficLights.disable();
      d.setOnDismissListener(new OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          RoomActivity.this.trafficLights.enable();
        }
      }
);
      d.show();
    }
  }
);
  weekView.setOnReservationClickListener(new OnReservationClickListener(){
    @Override public void onReservationClick(    View v,    Reservation reservation){
      final EditReservationPopup d=new EditReservationPopup(RoomActivity.this,reservation,currentRoom,new EditReservationPopup.OnReservationCancelledListener(){
        @Override public void onReservationCancelled(        Reservation r){
          refreshData();
        }
      }
);
      RoomActivity.this.trafficLights.disable();
      d.setOnDismissListener(new OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          RoomActivity.this.trafficLights.enable();
        }
      }
);
      d.show();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.room_activity);
  this.weekView=(WeekView)findViewById(R.id.weekView1);
  this.roomNameLabel=(TextView)findViewById(R.id.roomNameLabel);
  this.trafficLights=(RoomTrafficLights)findViewById(R.id.roomTrafficLights);
  try {
    currentRoom=(Room)getIntent().getSerializableExtra(ROOM_EXTRA);
  }
 catch (  ClassCastException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + ROOM_EXTRA);
  }
  if (currentRoom == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ROOM_EXTRA);
  }
  findViewById(R.id.seeAllRoomsButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      RoomActivity.this.finish();
    }
  }
);
  weekView.setOnFreeTimeClickListener(new OnFreeTimeClickListener(){
    @Override public void onFreeTimeClick(    View v,    TimeSpan timeSpan,    DateTime touch){
      TimeSpan reservationTimeSpan=timeSpan;
      if (timeSpan.getLength() > 60 * 60000) {
        DateTime start=timeSpan.getStart();
        DateTime end=timeSpan.getEnd();
        DateTime now=new DateTime();
        touch=touch.stripMinutes();
        if (touch.before(start)) {
          touch=start;
        }
        if (touch.before(now) && now.before(end)) {
          touch=now;
        }
        reservationTimeSpan=new TimeSpan(touch,Calendar.HOUR,1);
        DateTime touchend=reservationTimeSpan.getEnd();
        touchend=touchend.set(Calendar.MINUTE,(touchend.get(Calendar.MINUTE) / 15) * 15);
        if (touchend.after(end)) {
          reservationTimeSpan.setEnd(end);
        }
      }
      final RoomReservationPopup d=new RoomReservationPopup(RoomActivity.this,timeSpan,reservationTimeSpan,currentRoom);
      d.setOnReserveCallback(new OnReserveListener(){
        @Override public void call(        LobbyReservationRowView v){
          d.dismiss();
          refreshData();
        }
      }
);
      RoomActivity.this.trafficLights.disable();
      d.setOnDismissListener(new OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          RoomActivity.this.trafficLights.enable();
        }
      }
);
      d.show();
    }
  }
);
  trafficLights.setBookNowListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!currentRoom.isFree())       return;
      TimeSpan limits=currentRoom.getNextFreeTime();
      DateTime now=new DateTime();
      TimeSpan suggested=new TimeSpan(now,now.add(Calendar.MINUTE,DEFAULT_BOOK_NOW_DURATION));
      if (limits == null) {
        limits=suggested;
      }
 else       if (limits.getEnd().before(suggested.getEnd())) {
        suggested=limits;
      }
      final RoomReservationPopup d=new RoomReservationPopup(RoomActivity.this,limits,suggested,currentRoom);
      d.setOnReserveCallback(new OnReserveListener(){
        @Override public void call(        LobbyReservationRowView v){
          d.dismiss();
          refreshData();
        }
      }
);
      RoomActivity.this.trafficLights.disable();
      d.setOnDismissListener(new OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          RoomActivity.this.trafficLights.enable();
        }
      }
);
      d.show();
    }
  }
);
  weekView.setOnReservationClickListener(new OnReservationClickListener(){
    @Override public void onReservationClick(    View v,    Reservation reservation){
      final EditReservationPopup d=new EditReservationPopup(RoomActivity.this,reservation,currentRoom,new EditReservationPopup.OnReservationCancelledListener(){
        @Override public void onReservationCancelled(        Reservation r){
          refreshData();
        }
      }
);
      RoomActivity.this.trafficLights.disable();
      d.setOnDismissListener(new OnDismissListener(){
        @Override public void onDismiss(        DialogInterface dialog){
          RoomActivity.this.trafficLights.enable();
        }
      }
);
      d.show();
    }
  }
);
}",0.9868645098516176
116914,"public void update(Room room){
  roomTitleView.setText(room.getName());
  if (room.isBookable(QUICK_BOOK_THRESHOLD)) {
    roomStatusView.setText(""String_Node_Str"");
    if (room.isFreeRestOfDay()) {
      roomStatusInfoView.setText(""String_Node_Str"");
      this.setBackgroundColor(getResources().getColor(R.color.TrafficLightFree));
      bookNowView.setBackground(getResources().getDrawable(R.drawable.traffic_lights_button_green));
      bookNowView.setTextColor(getResources().getColorStateList(R.color.traffic_lights_button_green));
    }
 else {
      int freeMinutes=room.minutesFreeFromNow();
      roomStatusView.setText(""String_Node_Str"");
      roomStatusInfoView.setText(""String_Node_Str"" + Helpers.humanizeTimeSpan2(freeMinutes));
      if (freeMinutes >= Room.RESERVED_THRESHOLD_MINUTES) {
        this.setBackgroundColor(getResources().getColor(R.color.TrafficLightFree));
        bookNowView.setBackground(getResources().getDrawable(R.drawable.traffic_lights_button_green));
        bookNowView.setTextColor(getResources().getColorStateList(R.color.traffic_lights_button_green));
      }
 else {
        this.setBackgroundColor(getResources().getColor(R.color.TrafficLightYellow));
        bookNowView.setBackground(getResources().getDrawable(R.drawable.traffic_lights_button_yellow));
        bookNowView.setTextColor(getResources().getColorStateList(R.color.traffic_lights_button_yellow));
      }
    }
    reservationInfoView.setVisibility(GONE);
    roomStatusInfoView.setVisibility(VISIBLE);
    bookNowView.setVisibility(VISIBLE);
  }
 else {
    this.setBackgroundColor(getResources().getColor(R.color.TrafficLightReserved));
    roomStatusView.setText(""String_Node_Str"");
    bookNowView.setVisibility(GONE);
    setReservationInfo(room.getCurrentReservation(),room.getNextFreeSlot());
  }
}","public void update(Room room){
  roomTitleView.setText(room.getName());
  if (room.isBookable(QUICK_BOOK_THRESHOLD)) {
    roomStatusView.setText(""String_Node_Str"");
    if (room.isFreeRestOfDay()) {
      roomStatusInfoView.setText(""String_Node_Str"");
      this.setBackgroundColor(getResources().getColor(R.color.TrafficLightFree));
      bookNowView.setBackgroundDrawable(getResources().getDrawable(R.drawable.traffic_lights_button_green));
      bookNowView.setTextColor(getResources().getColorStateList(R.color.traffic_lights_button_green));
    }
 else {
      int freeMinutes=room.minutesFreeFromNow();
      roomStatusView.setText(""String_Node_Str"");
      roomStatusInfoView.setText(""String_Node_Str"" + Helpers.humanizeTimeSpan2(freeMinutes));
      if (freeMinutes >= Room.RESERVED_THRESHOLD_MINUTES) {
        this.setBackgroundColor(getResources().getColor(R.color.TrafficLightFree));
        bookNowView.setBackgroundDrawable(getResources().getDrawable(R.drawable.traffic_lights_button_green));
        bookNowView.setTextColor(getResources().getColorStateList(R.color.traffic_lights_button_green));
      }
 else {
        this.setBackgroundColor(getResources().getColor(R.color.TrafficLightYellow));
        bookNowView.setBackgroundDrawable(getResources().getDrawable(R.drawable.traffic_lights_button_yellow));
        bookNowView.setTextColor(getResources().getColorStateList(R.color.traffic_lights_button_yellow));
      }
    }
    reservationInfoView.setVisibility(GONE);
    roomStatusInfoView.setVisibility(VISIBLE);
    bookNowView.setVisibility(VISIBLE);
  }
 else {
    this.setBackgroundColor(getResources().getColor(R.color.TrafficLightReserved));
    roomStatusView.setText(""String_Node_Str"");
    bookNowView.setVisibility(GONE);
    setReservationInfo(room.getCurrentReservation(),room.getNextFreeSlot());
  }
}",0.9934390377255332
116915,"private boolean login(String username,String password){
  DataProxy dataProxy=((ReservatorApplication)getApplication()).getDataProxy();
  try {
    username=""String_Node_Str"";
    password=""String_Node_Str"";
    dataProxy.setCredentials(username,password);
    dataProxy.getRooms();
    SharedPreferences preferences=getSharedPreferences(this.getString(R.string.PREFERENCES_NAME),0);
    Editor editor=preferences.edit();
    editor.putString(""String_Node_Str"",username);
    editor.putString(""String_Node_Str"",password);
    editor.commit();
    Intent i=new Intent(this,LobbyActivity.class);
    startActivityForResult(i,0);
    return true;
  }
 catch (  ReservatorException ex) {
    Toast err=Toast.makeText(this,ex.getMessage(),Toast.LENGTH_LONG);
    err.show();
    return false;
  }
}","private boolean login(String username,String password){
  DataProxy dataProxy=((ReservatorApplication)getApplication()).getDataProxy();
  try {
    dataProxy.setCredentials(username,password);
    dataProxy.getRooms();
    SharedPreferences preferences=getSharedPreferences(this.getString(R.string.PREFERENCES_NAME),0);
    Editor editor=preferences.edit();
    editor.putString(""String_Node_Str"",username);
    editor.putString(""String_Node_Str"",password);
    editor.commit();
    Intent i=new Intent(this,LobbyActivity.class);
    startActivityForResult(i,0);
    return true;
  }
 catch (  ReservatorException ex) {
    Toast err=Toast.makeText(this,ex.getMessage(),Toast.LENGTH_LONG);
    err.show();
    return false;
  }
}",0.9579500657030224
116916,"private void startAutoGoToFavouriteRoom(){
  if (prehensible) {
    handler.postDelayed(goToFavouriteRoomRunable,100000);
  }
}","private void startAutoGoToFavouriteRoom(){
  if (prehensible) {
    handler.postDelayed(goToFavouriteRoomRunable,60000);
  }
}",0.9881422924901184
116917,"private void startAutoRefreshData(){
  handler.postDelayed(refreshDataRunnable,100000);
}","private void startAutoRefreshData(){
  handler.postDelayed(refreshDataRunnable,60000);
}",0.9830508474576272
116918,"@Override public void refreshFailed(ReservatorException e){
  Builder alertBuilder=new AlertDialog.Builder(this);
  alertBuilder.setTitle(""String_Node_Str"").setMessage(e.getMessage()).show();
  hideLoading();
}","@Override public void refreshFailed(ReservatorException e){
  hideLoading();
  stopAutoRefreshData();
  Toast err=Toast.makeText(this,e.getMessage(),Toast.LENGTH_LONG);
  err.show();
  startAutoRefreshData();
  return;
}",0.3813953488372093
116919,"@Override public void onPause(){
  String serverAddress=serverAddressView.getText().toString().trim();
  String roomName=roomNameView.getSelectedItem().toString().trim();
  editor.putString(getString(R.string.PREFERENCES_SERVER_ADDRESS),serverAddress);
  editor.putString(getString(R.string.PREFERENCES_ROOM_NAME),roomName);
  editor.commit();
  proxy.setServer(serverAddress);
  super.onPause();
}","@Override public void onPause(){
  String serverAddress=serverAddressView.getText().toString().trim();
  Object selectedRoomName=roomNameView.getSelectedItem();
  String roomName=""String_Node_Str"";
  if (selectedRoomName != null) {
    roomName=selectedRoomName.toString().trim();
  }
  editor.putString(getString(R.string.PREFERENCES_SERVER_ADDRESS),serverAddress);
  editor.putString(getString(R.string.PREFERENCES_ROOM_NAME),roomName);
  editor.commit();
  proxy.setServer(serverAddress);
  super.onPause();
}",0.8153846153846154
116920,"@Override public void onResume(){
  super.onResume();
  settings=getSharedPreferences(getString(R.string.PREFERENCES_NAME),0);
  editor=settings.edit();
  serverAddressView=(EditText)findViewById(R.id.serverAddressEdit);
  serverAddressView.setText(settings.getString(getString(R.string.PREFERENCES_SERVER_ADDRESS),""String_Node_Str""));
  roomNameView=(Spinner)findViewById(R.id.roomNameSpinner);
  String roomName=settings.getString(getString(R.string.PREFERENCES_ROOM_NAME),""String_Node_Str"");
  ArrayAdapter<String> adapter=(ArrayAdapter<String>)roomNameView.getAdapter();
  int spinnerPosition=adapter.getPosition(roomName);
  roomNameView.setSelection(spinnerPosition);
  findViewById(R.id.removeUserDataButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      editor.remove(getString(R.string.PREFERENCES_USERNAME)).remove(getString(R.string.PREFERENCES_PASSWORD));
      Toast.makeText(SettingsActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
  Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(getString(R.string.doNotModify));
  builder.setMessage(getString(R.string.onlyItTeamShouldModify));
  builder.setCancelable(false);
  DialogInterface.OnClickListener listener=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (which == AlertDialog.BUTTON_NEGATIVE) {
        dialog.dismiss();
        finish();
      }
 else {
        dialog.dismiss();
      }
    }
  }
;
  builder.setPositiveButton(getString(R.string.continueBtn),listener);
  builder.setNegativeButton(getString(R.string.goBackBtn),listener);
  builder.show();
}","@Override public void onResume(){
  super.onResume();
  settings=getSharedPreferences(getString(R.string.PREFERENCES_NAME),0);
  editor=settings.edit();
  serverAddressView=(EditText)findViewById(R.id.serverAddressEdit);
  serverAddressView.setText(settings.getString(getString(R.string.PREFERENCES_SERVER_ADDRESS),""String_Node_Str""));
  roomNameView=(Spinner)findViewById(R.id.roomNameSpinner);
  String roomName=settings.getString(getString(R.string.PREFERENCES_ROOM_NAME),""String_Node_Str"");
  ArrayAdapter<String> adapter=(ArrayAdapter<String>)roomNameView.getAdapter();
  int spinnerPosition=0;
  if (adapter != null) {
    spinnerPosition=adapter.getPosition(roomName);
  }
  roomNameView.setSelection(spinnerPosition);
  findViewById(R.id.removeUserDataButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      editor.remove(getString(R.string.PREFERENCES_USERNAME)).remove(getString(R.string.PREFERENCES_PASSWORD));
      Toast.makeText(SettingsActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
  Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(getString(R.string.doNotModify));
  builder.setMessage(getString(R.string.onlyItTeamShouldModify));
  builder.setCancelable(false);
  DialogInterface.OnClickListener listener=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (which == AlertDialog.BUTTON_NEGATIVE) {
        dialog.dismiss();
        finish();
      }
 else {
        dialog.dismiss();
      }
    }
  }
;
  builder.setPositiveButton(getString(R.string.continueBtn),listener);
  builder.setNegativeButton(getString(R.string.goBackBtn),listener);
  builder.show();
}",0.9761489237929027
116921,"/** 
 * Time in minutes the room is free Precondition: room is free
 * @param from
 * @return Integer.MAX_VALUE if no reservations in future
 */
public int minutesFreeFrom(DateTime from){
  for (  Reservation r : reservations) {
    if (r.getStartTime().after(from)) {
      return (int)(r.getStartTime().getTimeInMillis() - from.getTimeInMillis()) / 60000;
    }
  }
  return Integer.MAX_VALUE;
}","/** 
 * Time in minutes the room is free Precondition: room is free
 * @param from
 * @return Integer.MAX_VALUE if no reservations in future
 */
public int minutesFreeFrom(DateTime from){
  for (  Reservation r : reservations) {
    if (r.getStartTime().after(from)) {
      return (int)((r.getStartTime().getTimeInMillis() - from.getTimeInMillis()) / 60000);
    }
  }
  return Integer.MAX_VALUE;
}",0.9974874371859296
116922,"public void run(){
  while (Math.abs(startDelta) < animStep || Math.abs(endDelta) < animStep) {
    TimeBarView.this.span=new TimeSpan(TimeBarView.this.span.getStart().add(Calendar.MILLISECOND,(int)Math.signum(startDelta) * animStep),TimeBarView.this.span.getEnd().add(Calendar.MILLISECOND,(int)Math.signum(endDelta) * animStep));
    startDelta-=Math.signum(startDelta) * animStep;
    endDelta-=Math.signum(endDelta) * animStep;
    postInvalidate();
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  TimeBarView.this.span=targetTimeSpan;
  postInvalidate();
  animatorThread=null;
}","public void run(){
  while (Math.abs(startDelta) > animStep || Math.abs(endDelta) > animStep) {
    TimeBarView.this.span=new TimeSpan(TimeBarView.this.span.getStart().add(Calendar.MILLISECOND,(int)Math.signum(startDelta) * animStep),TimeBarView.this.span.getEnd().add(Calendar.MILLISECOND,(int)Math.signum(endDelta) * animStep));
    startDelta-=Math.signum(startDelta) * animStep;
    endDelta-=Math.signum(endDelta) * animStep;
    postInvalidate();
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  TimeBarView.this.span=targetTimeSpan;
  postInvalidate();
  animatorThread=null;
}",0.9969325153374232
116923,"public void setSpan(TimeSpan span){
  if (this.span == null || !animationEnabled) {
    this.span=span;
    this.targetTimeSpan=span;
    return;
  }
  targetTimeSpan=span;
  startDelta=span.getStart().getTimeInMillis() - this.span.getStart().getTimeInMillis();
  endDelta=span.getEnd().getTimeInMillis() - this.span.getEnd().getTimeInMillis();
  animStep=(int)Math.max(Math.max(Math.abs(endDelta),Math.abs(startDelta)) / 10,60000);
  if (animatorThread == null) {
    animatorThread=new Thread(){
      public void run(){
        while (Math.abs(startDelta) < animStep || Math.abs(endDelta) < animStep) {
          TimeBarView.this.span=new TimeSpan(TimeBarView.this.span.getStart().add(Calendar.MILLISECOND,(int)Math.signum(startDelta) * animStep),TimeBarView.this.span.getEnd().add(Calendar.MILLISECOND,(int)Math.signum(endDelta) * animStep));
          startDelta-=Math.signum(startDelta) * animStep;
          endDelta-=Math.signum(endDelta) * animStep;
          postInvalidate();
          try {
            Thread.sleep(10);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
        TimeBarView.this.span=targetTimeSpan;
        postInvalidate();
        animatorThread=null;
      }
    }
;
    animatorThread.start();
  }
  invalidate();
}","public void setSpan(TimeSpan span){
  if (this.span == null || !animationEnabled) {
    this.span=span;
    this.targetTimeSpan=span;
    return;
  }
  targetTimeSpan=span;
  startDelta=span.getStart().getTimeInMillis() - this.span.getStart().getTimeInMillis();
  endDelta=span.getEnd().getTimeInMillis() - this.span.getEnd().getTimeInMillis();
  animStep=(int)Math.max(Math.max(Math.abs(endDelta),Math.abs(startDelta)) / 10,60000);
  if (animatorThread == null) {
    animatorThread=new Thread(){
      public void run(){
        while (Math.abs(startDelta) > animStep || Math.abs(endDelta) > animStep) {
          TimeBarView.this.span=new TimeSpan(TimeBarView.this.span.getStart().add(Calendar.MILLISECOND,(int)Math.signum(startDelta) * animStep),TimeBarView.this.span.getEnd().add(Calendar.MILLISECOND,(int)Math.signum(endDelta) * animStep));
          startDelta-=Math.signum(startDelta) * animStep;
          endDelta-=Math.signum(endDelta) * animStep;
          postInvalidate();
          try {
            Thread.sleep(10);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
        TimeBarView.this.span=targetTimeSpan;
        postInvalidate();
        animatorThread=null;
      }
    }
;
    animatorThread.start();
  }
  invalidate();
}",0.998473282442748
116924,"@Override public void roomListUpdated(Vector<Room> rooms){
  for (  Room r : rooms) {
    RoomsInfo info=RoomsInfo.getRoomsInfo(r);
    if (info.isProjectRoom()) {
      return;
    }
    showLoading();
    proxy.refreshRoomReservations(r);
  }
  hideLoading();
}","@Override public void roomListUpdated(Vector<Room> rooms){
  for (  Room r : rooms) {
    RoomsInfo info=RoomsInfo.getRoomsInfo(r);
    if (info.isProjectRoom()) {
      continue;
    }
    showLoading();
    proxy.refreshRoomReservations(r);
  }
  hideLoading();
}",0.9772727272727272
116925,"@Override public void dispatchDraw(Canvas c){
  super.dispatchDraw(c);
  Paint p=new Paint();
  p.setColor(getResources().getColor(R.color.ReserveLine));
  int startCenterX=getWidth() / 4;
  int endCenterX=getWidth() / 4 * 3;
  int w=10;
  int left=0;
  int bottom=durationLabel.getTop();
  int right=getWidth();
  int y=0;
  final int padding=durationLabel.getTop() / 6;
  c.drawLine(startCenterX - w,y,startCenterX + w,y,p);
  c.drawLine(endCenterX - w,y,endCenterX + w,y,p);
  c.drawLine(startCenterX,y,startCenterX,y + padding + 1,p);
  c.drawLine(endCenterX,y,endCenterX,y + padding * 2 + 1,p);
  y+=padding;
  int width=getWidth();
  int startX=(int)(width * getProportional(span.getStart()));
  int endX=(int)(width * getProportional(span.getEnd()));
  c.drawLine(startCenterX,y,startX,y,p);
  c.drawLine(endCenterX,y + padding,endX,y + padding,p);
  c.drawLine(startX,y,startX,bottom,p);
  c.drawLine(endX,y + padding,endX,bottom,p);
  y+=2 * padding;
  background.setBounds(left,y,right,bottom);
  background.draw(c);
  reservationOwn.setBounds(startX,y,endX,bottom);
  reservationOwn.draw(c);
  if (span.getLength() < MIN_SPAN_LENGTH) {
    reservationOther.setBounds((int)(width * getProportional(limits.getEnd())),y,width,bottom);
    reservationOther.draw(c);
  }
  p.setStyle(Style.STROKE);
  p.setColor(tickColor);
  DateTime time=limits.getStart();
  DateTime end=getMaximum();
  while (time.before(end)) {
    if (time.get(Calendar.MINUTE) % 30 != 0) {
      time=time.add(Calendar.MINUTE,30 - time.get(Calendar.MINUTE) % 30);
    }
    int x=(int)(width * getProportional(time));
    c.drawLine(x,y,x,bottom,p);
    time=time.add(Calendar.MINUTE,30);
  }
  durationLabel.setText(span.getLength() / 60000 + ""String_Node_Str"");
}","@Override public void dispatchDraw(Canvas c){
  super.dispatchDraw(c);
  int startCenterX=getWidth() / 4;
  int endCenterX=getWidth() / 4 * 3;
  int w=10;
  int left=0;
  int bottom=durationLabel.getTop();
  int right=getWidth() - 1;
  int y=0;
  final int padding=durationLabel.getTop() / 6;
  Paint p=new Paint();
  p.setColor(getResources().getColor(R.color.ReserveLine));
  c.drawLine(startCenterX - w,y,startCenterX + w,y,p);
  c.drawLine(endCenterX - w,y,endCenterX + w,y,p);
  c.drawLine(startCenterX,y,startCenterX,y + padding + 1,p);
  c.drawLine(endCenterX,y,endCenterX,y + padding * 2 + 1,p);
  y+=padding;
  int width=getWidth() - 1;
  int startX=(int)(width * getProportional(span.getStart()));
  int endX=(int)(width * getProportional(span.getEnd()));
  c.drawLine(startCenterX,y,startX,y,p);
  c.drawLine(endCenterX,y + padding,endX,y + padding,p);
  c.drawLine(startX,y,startX,bottom,p);
  c.drawLine(endX,y + padding,endX,bottom,p);
  y+=2 * padding;
  background.setBounds(left,y,right,bottom);
  background.draw(c);
  reservationOwn.setBounds(startX,y,endX,bottom);
  reservationOwn.draw(c);
  if (span.getLength() < MIN_SPAN_LENGTH) {
    reservationOther.setBounds((int)(width * getProportional(limits.getEnd())),y,width,bottom);
    reservationOther.draw(c);
  }
  p.setStyle(Style.STROKE);
  p.setColor(tickColor);
  DateTime time=limits.getStart();
  DateTime end=getMaximum();
  if (time.get(Calendar.MINUTE) % 30 == 0) {
    time=time.set(Calendar.MINUTE,(time.get(Calendar.MINUTE) % 30) * 30);
  }
  time=time.add(Calendar.MINUTE,30);
  while (time.before(end)) {
    int x=(int)(width * getProportional(time));
    c.drawLine(x,y,x,bottom,p);
    time=time.add(Calendar.MINUTE,30);
  }
  durationLabel.setText(span.getLength() / 60000 + ""String_Node_Str"");
}",0.8598130841121495
116926,"public List<com.futurice.android.reservator.model.Reservation> getReservations(com.futurice.android.reservator.model.Room room) throws ReservatorException {
  GetUserAvailabilityResponse response=body.getGetUserAvailabilityResponse();
  if (response == null || !response.getResponseCode().equals(""String_Node_Str"") || !response.getResponseClass().equals(""String_Node_Str"")) {
    throw new ReservatorException(""String_Node_Str"");
  }
  List<com.futurice.android.reservator.model.Reservation> reservations=new ArrayList<com.futurice.android.reservator.model.Reservation>();
  if (response.getCalendarEventArray() == null)   return reservations;
  Calendar startTime=Calendar.getInstance();
  Calendar endTime=Calendar.getInstance();
  for (  CalendarEvent event : response.getCalendarEventArray()) {
    try {
      startTime.setTime(SoapDataProxy.dateFormat.parse(event.getStartTime()));
      endTime.setTime(SoapDataProxy.dateFormat.parse(event.getEndTime()));
    }
 catch (    ParseException e) {
      throw new ReservatorException(e);
    }
    reservations.add(new com.futurice.android.reservator.model.Reservation(room,event.subject,startTime,endTime));
  }
  return reservations;
}","public List<com.futurice.android.reservator.model.Reservation> getReservations(com.futurice.android.reservator.model.Room room) throws ReservatorException {
  GetUserAvailabilityResponse response=body.getGetUserAvailabilityResponse();
  if (response == null || !response.getResponseCode().equals(""String_Node_Str"") || !response.getResponseClass().equals(""String_Node_Str"")) {
    throw new ReservatorException(""String_Node_Str"");
  }
  List<com.futurice.android.reservator.model.Reservation> reservations=new ArrayList<com.futurice.android.reservator.model.Reservation>();
  if (response.getCalendarEventArray() == null)   return reservations;
  Calendar startTime=Calendar.getInstance();
  Calendar endTime=Calendar.getInstance();
  for (  CalendarEvent event : response.getCalendarEventArray()) {
    try {
      startTime.setTime(SoapDataProxy.dateFormat.parse(event.getStartTime()));
      endTime.setTime(SoapDataProxy.dateFormat.parse(event.getEndTime()));
    }
 catch (    ParseException e) {
      throw new ReservatorException(e);
    }
    reservations.add(new com.futurice.android.reservator.model.Reservation(room,event.subject,(Calendar)startTime.clone(),(Calendar)endTime.clone()));
  }
  return reservations;
}",0.9850993377483444
116927,"public CalendarView(Context context,AttributeSet attrs){
  super(context,attrs);
  gridPaint=new Paint();
  gridPaint.setColor(Color.argb(255,209,211,212));
  innerLayout=new LinearLayout(context);
  this.addView(innerLayout,LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
  hourColumn=new LinearLayout(getContext());
  hourColumn.setPadding(0,0,0,BOTTOM_PADDING);
  hourColumn.setOrientation(LinearLayout.VERTICAL);
  hourColumn.addView(new TextView(getContext()));
  hourColumn.addView(new TextView(getContext()));
  for (int i=startHour.get(Calendar.HOUR_OF_DAY); i < endHour.get(Calendar.HOUR_OF_DAY); i++) {
    TextView tv=new TextView(getContext());
    tv.setText(Html.fromHtml(i + ""String_Node_Str""));
    tv.setGravity(Gravity.TOP | Gravity.RIGHT);
    LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,1,1);
    lp.weight=1;
    hourColumn.addView(tv,lp);
  }
  innerLayout.addView(hourColumn,LayoutParams.WRAP_CONTENT,LayoutParams.FILL_PARENT);
  addVerticalDelimeter(THIN_DELIM,innerLayout);
  inflate(context,R.layout.calendar_view,this);
  scrollView=(LinearLayout)findViewById(R.id.linearLayout1);
}","public CalendarView(Context context,AttributeSet attrs){
  super(context,attrs);
  gridPaint=new Paint();
  gridPaint.setColor(Color.argb(255,209,211,212));
  hourColumn=new LinearLayout(getContext());
  hourColumn.setPadding(0,0,0,BOTTOM_PADDING);
  hourColumn.setOrientation(LinearLayout.VERTICAL);
  hourColumn.addView(new TextView(getContext()));
  hourColumn.addView(new TextView(getContext()));
  for (int i=startHour.get(Calendar.HOUR_OF_DAY); i < endHour.get(Calendar.HOUR_OF_DAY); i++) {
    TextView tv=new TextView(getContext());
    tv.setText(Html.fromHtml(i + ""String_Node_Str""));
    tv.setGravity(Gravity.TOP | Gravity.RIGHT);
    LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,1,1);
    lp.weight=1;
    hourColumn.addView(tv,lp);
  }
  addView(hourColumn,LayoutParams.WRAP_CONTENT,LayoutParams.FILL_PARENT);
  addVerticalDelimeter(THIN_DELIM,this);
  inflate(context,R.layout.calendar_view,this);
  scrollView=(LinearLayout)findViewById(R.id.linearLayout1);
}",0.9321642824180896
116928,"@Override public void onClick(View v){
  if (v == startMinus) {
    int start=currentTimeStart - timeStep;
    currentTimeStart=Math.max(start,minimumTime);
    refreshLabels();
  }
 else   if (v == startPlus) {
    int start=currentTimeStart + timeStep;
    currentTimeStart=Math.min(start,currentTimeEnd - minimumDuration);
    refreshLabels();
  }
 else   if (v == endMinus) {
  }
 else   if (v == endPlus) {
  }
}","@Override public void onClick(View v){
  if (v == startMinus) {
    int start=quantize(currentTimeStart - timeStep);
    currentTimeStart=Math.max(start,minimumTime);
    refreshLabels();
  }
 else   if (v == startPlus) {
    int start=quantize(currentTimeStart + timeStep);
    currentTimeStart=Math.min(start,currentTimeEnd - minimumDuration);
    refreshLabels();
  }
 else   if (v == endMinus) {
    int end=quantize(currentTimeEnd - timeStep);
    currentTimeEnd=Math.max(end,currentTimeStart + minimumDuration);
    refreshLabels();
  }
 else   if (v == endPlus) {
    int end=quantize(currentTimeEnd + timeStep);
    currentTimeEnd=Math.min(end,maximumTime);
    refreshLabels();
  }
}",0.7520288548241659
116929,"public Calendar getEndTime(){
  throw new RuntimeException(""String_Node_Str"");
}","public Calendar getEndTime(){
  Calendar ret=(Calendar)currentDay.clone();
  ret.set(Calendar.HOUR_OF_DAY,currentTimeEnd / 60);
  ret.set(Calendar.MINUTE,currentTimeEnd % 60);
  ret.set(Calendar.SECOND,0);
  ret.set(Calendar.MILLISECOND,0);
  return ret;
}",0.2619047619047619
116930,"public Calendar getStartTime(){
  Calendar ret=(Calendar)currentDay.clone();
  ret.set(Calendar.HOUR_OF_DAY,currentTimeStart / 60);
  ret.set(Calendar.MINUTE,currentTimeEnd % 60);
  ret.set(Calendar.SECOND,0);
  ret.set(Calendar.MILLISECOND,0);
  return ret;
}","public Calendar getStartTime(){
  Calendar ret=(Calendar)currentDay.clone();
  ret.set(Calendar.HOUR_OF_DAY,currentTimeStart / 60);
  ret.set(Calendar.MINUTE,currentTimeStart % 60);
  ret.set(Calendar.SECOND,0);
  ret.set(Calendar.MILLISECOND,0);
  return ret;
}",0.9846743295019156
116931,"public void setMinimumTime(Calendar cal){
  currentDay=(Calendar)cal.clone();
  int min=cal.get(Calendar.HOUR_OF_DAY) * 60 + cal.get(Calendar.MINUTE);
  if (min > maximumTime)   throw new IllegalArgumentException(""String_Node_Str"");
  minimumTime=min;
  if (currentTimeStart < minimumTime) {
    currentTimeStart=minimumTime;
  }
  if (currentTimeEnd < minimumTime) {
    currentTimeEnd=Math.min(maximumTime,minimumTime + minimumDuration);
  }
  refreshLabels();
}","public void setMinimumTime(Calendar cal){
  int min=cal.get(Calendar.HOUR_OF_DAY) * 60 + cal.get(Calendar.MINUTE);
  if (min > maximumTime)   throw new IllegalArgumentException(""String_Node_Str"");
  minimumTime=min;
  if (currentTimeStart < minimumTime) {
    currentTimeStart=minimumTime;
  }
  if (currentTimeEnd < minimumTime) {
    currentTimeEnd=Math.min(maximumTime,minimumTime + minimumDuration);
  }
  refreshLabels();
  currentDay=(Calendar)cal.clone();
}",0.9224137931034484
116932,"public void setMaximumTime(Calendar cal){
  throw new RuntimeException(""String_Node_Str"");
}","public void setMaximumTime(Calendar cal){
  int max=cal.get(Calendar.HOUR_OF_DAY) * 60 + cal.get(Calendar.MINUTE);
  if (max < minimumTime)   throw new IllegalArgumentException(""String_Node_Str"");
  maximumTime=max;
  if (currentTimeEnd > maximumTime) {
    currentTimeEnd=maximumTime;
  }
  if (currentTimeStart > maximumTime) {
    currentTimeStart=Math.max(minimumTime,maximumTime - minimumDuration);
  }
  currentDay=(Calendar)cal.clone();
}",0.3165735567970205
116933,"public void setMaxTime(Calendar time){
  this.maxTime=time;
}","public void setMaxTime(Calendar time){
  timePicker2.setMaximumTime(time);
}",0.8321167883211679
116934,"protected void setReserveMode(){
  refreshData();
  this.setBackgroundColor(getResources().getColor(R.color.FutuLightGreen));
  reserveButton.setEnabled(false);
  bookingMode.setVisibility(View.VISIBLE);
  normalMode.setVisibility(View.GONE);
}","protected void setReserveMode(){
  this.setBackgroundColor(getResources().getColor(R.color.FutuLightGreen));
  reserveButton.setEnabled(false);
  bookingMode.setVisibility(View.VISIBLE);
  normalMode.setVisibility(View.GONE);
}",0.9639065817409768
116935,"private void refreshData(){
  if (maxTime == null || minTime == null) {
    Reservation nextFreeTime=room.getNextFreeTime();
    timePicker.setMinTime(nextFreeTime.getBeginTime());
    timePicker.setMaxTime(nextFreeTime.getEndTime());
  }
 else {
    timePicker.setMinTime(minTime);
    timePicker.setMaxTime(maxTime);
  }
  Reservation nextFreeTime=room.getNextFreeTime();
  timePicker.setMinTime(nextFreeTime.getBeginTime());
  timePicker.setMaxTime(nextFreeTime.getEndTime());
  RoomsInfo info=RoomsInfo.getRoomsInfo(room);
  roomNameView.setText(info.getRoomName());
  if (info.getRoomNumber() == 0) {
    roomInfoView.setText(""String_Node_Str"" + info.getRoomSize());
  }
 else {
    roomInfoView.setText(Integer.toString(info.getRoomNumber()) + ""String_Node_Str"" + info.getRoomSize());
  }
  boolean bookable=false;
  if (room.isFree()) {
    int freeMinutes=room.minutesFreeFromNow();
    bookable=true;
    if (freeMinutes > 180) {
      roomStatusView.setText(""String_Node_Str"");
    }
 else     if (freeMinutes < 15) {
      roomStatusView.setText(""String_Node_Str"");
      bookable=false;
    }
 else {
      roomStatusView.setText(""String_Node_Str"" + Helpers.humanizeTimeSpan(freeMinutes));
    }
  }
 else {
    roomStatusView.setText(""String_Node_Str"");
  }
  if (bookable) {
    roomStatusView.setTextColor(getResources().getColor(R.color.StatusFreeColor));
    bookNowButton.setVisibility(View.VISIBLE);
  }
 else {
    roomStatusView.setTextColor(getResources().getColor(R.color.StatusReservedColor));
    bookNowButton.setVisibility(View.INVISIBLE);
  }
}","private void refreshData(){
  Reservation nextFreeTime=room.getNextFreeTime();
  timePicker.setMinTime(nextFreeTime.getBeginTime());
  timePicker.setMaxTime(nextFreeTime.getEndTime());
  timePicker2.setMinimumTime(nextFreeTime.getBeginTime());
  timePicker2.setMaximumTime(nextFreeTime.getEndTime());
  timePicker2.setEndTimeRelatively(60);
  RoomsInfo info=RoomsInfo.getRoomsInfo(room);
  roomNameView.setText(info.getRoomName());
  if (info.getRoomNumber() == 0) {
    roomInfoView.setText(""String_Node_Str"" + info.getRoomSize());
  }
 else {
    roomInfoView.setText(Integer.toString(info.getRoomNumber()) + ""String_Node_Str"" + info.getRoomSize());
  }
  boolean bookable=false;
  if (room.isFree()) {
    int freeMinutes=room.minutesFreeFromNow();
    bookable=true;
    if (freeMinutes > 180) {
      roomStatusView.setText(""String_Node_Str"");
    }
 else     if (freeMinutes < 15) {
      roomStatusView.setText(""String_Node_Str"");
      bookable=false;
    }
 else {
      roomStatusView.setText(""String_Node_Str"" + Helpers.humanizeTimeSpan(freeMinutes));
    }
  }
 else {
    roomStatusView.setText(""String_Node_Str"");
  }
  if (bookable) {
    roomStatusView.setTextColor(getResources().getColor(R.color.StatusFreeColor));
    bookNowButton.setVisibility(View.VISIBLE);
  }
 else {
    roomStatusView.setTextColor(getResources().getColor(R.color.StatusReservedColor));
    bookNowButton.setVisibility(View.INVISIBLE);
  }
}",0.8765391014975041
116936,"public void setMinTime(Calendar time){
  this.minTime=time;
}","public void setMinTime(Calendar time){
  timePicker2.setMinimumTime(time);
}",0.8321167883211679
116937,"public RoomReservationView(Context context,AttributeSet attrs){
  super(context,attrs);
  inflate(context,R.layout.lobby_reservation_row,this);
  cancelButton=findViewById(R.id.cancelButton);
  cancelButton.setOnClickListener(this);
  bookNowButton=findViewById(R.id.bookNowButton);
  bookNowButton.setOnClickListener(this);
  titleView=findViewById(R.id.titleLayout);
  titleView.setOnClickListener(this);
  reserveButton=findViewById(R.id.reserveButton);
  reserveButton.setOnClickListener(this);
  calendarButton=findViewById(R.id.calendarButton);
  calendarButton.setOnClickListener(this);
  bookingMode=findViewById(R.id.bookingMode);
  normalMode=findViewById(R.id.normalMode);
  nameField=(AutoCompleteTextView)findViewById(R.id.autoCompleteTextView1);
  nameField.setOnItemClickListener(this);
  nameField.setAdapter(new FumAddressBookAdapter(context));
  nameField.setOnFocusChangeListener(userNameFocusChangeListener);
  timePicker=(CustomTimeSpanPicker)findViewById(R.id.timeSpanPicker1);
  roomNameView=(TextView)findViewById(R.id.roomNameLabel);
  roomInfoView=(TextView)findViewById(R.id.roomInfoLabel);
  roomStatusView=(TextView)findViewById(R.id.roomStatusLabel);
}","public RoomReservationView(Context context,AttributeSet attrs){
  super(context,attrs);
  inflate(context,R.layout.lobby_reservation_row,this);
  cancelButton=findViewById(R.id.cancelButton);
  cancelButton.setOnClickListener(this);
  bookNowButton=findViewById(R.id.bookNowButton);
  bookNowButton.setOnClickListener(this);
  titleView=findViewById(R.id.titleLayout);
  titleView.setOnClickListener(this);
  reserveButton=findViewById(R.id.reserveButton);
  reserveButton.setOnClickListener(this);
  calendarButton=findViewById(R.id.calendarButton);
  calendarButton.setOnClickListener(this);
  bookingMode=findViewById(R.id.bookingMode);
  normalMode=findViewById(R.id.normalMode);
  nameField=(AutoCompleteTextView)findViewById(R.id.autoCompleteTextView1);
  nameField.setOnItemClickListener(this);
  nameField.setAdapter(new FumAddressBookAdapter(context));
  nameField.setOnFocusChangeListener(userNameFocusChangeListener);
  timePicker=(CustomTimeSpanPicker)findViewById(R.id.timeSpanPicker1);
  timePicker2=(CustomTimeSpanPicker2)findViewById(R.id.timeSpanPicker2);
  roomNameView=(TextView)findViewById(R.id.roomNameLabel);
  roomInfoView=(TextView)findViewById(R.id.roomInfoLabel);
  roomStatusView=(TextView)findViewById(R.id.roomStatusLabel);
}",0.9700451374640952
116938,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public JSONObject enrich(String metadataIn){
  String metadata=tldex.extract2LD(metadataIn);
  LOG.trace(""String_Node_Str"" + metadata);
  JSONObject output=new JSONObject();
  JSONObject payload=new JSONObject();
  Get get=new Get(metadata.getBytes());
  Result rs;
  try {
    rs=table.get(get);
    for (    KeyValue kv : rs.raw())     payload.put(metadata,new String(kv.getValue()));
    output.put(""String_Node_Str"",payload);
  }
 catch (  IOException e) {
    output.put(metadata,""String_Node_Str"");
    e.printStackTrace();
  }
  return output;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public JSONObject enrich(String metadataIn){
  String metadata=tldex.extract2LD(metadataIn);
  LOG.trace(""String_Node_Str"" + metadata);
  JSONObject output=new JSONObject();
  JSONObject payload=new JSONObject();
  Get get=new Get(metadata.getBytes());
  Result rs;
  try {
    rs=table.get(get);
    for (    KeyValue kv : rs.raw())     payload.put(metadata,new String(kv.getValue()));
    output.put(""String_Node_Str"",payload);
  }
 catch (  IOException e) {
    payload.put(metadata,""String_Node_Str"");
    output.put(""String_Node_Str"",payload);
    e.printStackTrace();
  }
  return output;
}",0.9556259904912836
116939,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public JSONObject parse(byte[] msg){
  JSONObject payload=new JSONObject();
  String toParse=""String_Node_Str"";
  try {
    toParse=new String(msg,""String_Node_Str"");
    _LOG.debug(""String_Node_Str"" + toParse);
    String tmp=toParse.substring(toParse.lastIndexOf(""String_Node_Str""));
    payload.put(""String_Node_Str"",tmp);
    String protocol=tmp.substring(tmp.indexOf(""String_Node_Str"") + 1,tmp.indexOf(""String_Node_Str"")).toLowerCase();
    String source=tmp.substring(tmp.indexOf(""String_Node_Str"") + 1,tmp.indexOf(""String_Node_Str"")).trim();
    String dest=tmp.substring(tmp.indexOf(""String_Node_Str"") + 2,tmp.length()).trim();
    payload.put(""String_Node_Str"",protocol);
    String source_ip=""String_Node_Str"";
    String dest_ip=""String_Node_Str"";
    if (source.contains(""String_Node_Str"")) {
      String parts[]=source.split(""String_Node_Str"");
      payload.put(""String_Node_Str"",parts[0]);
      payload.put(""String_Node_Str"",parts[1]);
      source_ip=parts[0];
    }
 else {
      payload.put(""String_Node_Str"",source);
      source_ip=source;
    }
    if (dest.contains(""String_Node_Str"")) {
      String parts[]=dest.split(""String_Node_Str"");
      payload.put(""String_Node_Str"",parts[0]);
      payload.put(""String_Node_Str"",parts[1]);
      dest_ip=parts[0];
    }
 else {
      payload.put(""String_Node_Str"",dest);
      dest_ip=dest;
    }
    payload.put(""String_Node_Str"",System.currentTimeMillis());
    Matcher sidMatcher=sidPattern.matcher(toParse);
    String originalString=null;
    if (sidMatcher.find()) {
      originalString=sidMatcher.group(2);
    }
 else {
      _LOG.warn(""String_Node_Str"" + toParse);
      originalString=toParse;
    }
    payload.put(""String_Node_Str"",originalString);
    return payload;
  }
 catch (  Exception e) {
    e.printStackTrace();
    _LOG.error(""String_Node_Str"" + toParse);
    return null;
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public JSONObject parse(byte[] msg){
  JSONObject payload=new JSONObject();
  String toParse=""String_Node_Str"";
  try {
    toParse=new String(msg,""String_Node_Str"");
    _LOG.debug(""String_Node_Str"" + toParse);
    String tmp=toParse.substring(toParse.lastIndexOf(""String_Node_Str""));
    payload.put(""String_Node_Str"",tmp);
    String protocol=tmp.substring(tmp.indexOf(""String_Node_Str"") + 1,tmp.indexOf(""String_Node_Str"")).toLowerCase();
    String source=tmp.substring(tmp.indexOf(""String_Node_Str"") + 1,tmp.indexOf(""String_Node_Str"")).trim();
    String dest=tmp.substring(tmp.indexOf(""String_Node_Str"") + 2,tmp.length()).trim();
    payload.put(""String_Node_Str"",protocol);
    String source_ip=""String_Node_Str"";
    String dest_ip=""String_Node_Str"";
    if (source.contains(""String_Node_Str"")) {
      String parts[]=source.split(""String_Node_Str"");
      payload.put(""String_Node_Str"",parts[0]);
      payload.put(""String_Node_Str"",parts[1]);
      source_ip=parts[0];
    }
 else {
      payload.put(""String_Node_Str"",source);
      source_ip=source;
    }
    if (dest.contains(""String_Node_Str"")) {
      String parts[]=dest.split(""String_Node_Str"");
      payload.put(""String_Node_Str"",parts[0]);
      payload.put(""String_Node_Str"",parts[1]);
      dest_ip=parts[0];
    }
 else {
      payload.put(""String_Node_Str"",dest);
      dest_ip=dest;
    }
    payload.put(""String_Node_Str"",System.currentTimeMillis());
    Matcher sidMatcher=sidPattern.matcher(toParse);
    String originalString=null;
    String signatureId=""String_Node_Str"";
    if (sidMatcher.find()) {
      signatureId=sidMatcher.group(2);
      originalString=sidMatcher.group(1) + ""String_Node_Str"" + sidMatcher.group(2)+ ""String_Node_Str""+ sidMatcher.group(3);
    }
 else {
      _LOG.warn(""String_Node_Str"" + toParse);
      originalString=toParse;
    }
    payload.put(""String_Node_Str"",originalString);
    payload.put(""String_Node_Str"",signatureId);
    return payload;
  }
 catch (  Exception e) {
    e.printStackTrace();
    _LOG.error(""String_Node_Str"" + toParse);
    return null;
  }
}",0.9412343250553232
116940,"private long getTimeStamp(String toParse,String delimiter) throws ParseException {
  String[] tokens=toParse.split(""String_Node_Str"");
  String timeStamp=""String_Node_Str"";
  String month=tokens[0].replace(delimiter,""String_Node_Str"");
  String day=tokens[1];
  String time=tokens[2];
  long ts=convertToEpoch(month,day,time,true);
  return ts;
}","private long getTimeStamp(String toParse,String delimiter) throws ParseException {
  long ts=0;
  String month=null;
  String day=null;
  String time=null;
  Matcher tsMatcher=tsPattern.matcher(toParse);
  if (tsMatcher.find()) {
    month=tsMatcher.group(1);
    day=tsMatcher.group(2);
    time=tsMatcher.group(3);
  }
 else {
    _LOG.warn(""String_Node_Str"" + toParse);
    ts=convertToEpoch(month,day,time,true);
  }
  return ts;
}",0.381562099871959
116941,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public JSONObject parse(byte[] msg){
  JSONObject outputMessage=new JSONObject();
  String toParse=""String_Node_Str"";
  try {
    toParse=new String(msg,""String_Node_Str"");
    _LOG.debug(""String_Node_Str"" + toParse);
    parseMessage(toParse,outputMessage);
    outputMessage.put(""String_Node_Str"",System.currentTimeMillis());
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    return outputMessage;
  }
 catch (  Exception e) {
    e.printStackTrace();
    _LOG.error(""String_Node_Str"" + toParse);
    return null;
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public JSONObject parse(byte[] msg){
  JSONObject outputMessage=new JSONObject();
  String toParse=""String_Node_Str"";
  try {
    toParse=new String(msg,""String_Node_Str"");
    _LOG.debug(""String_Node_Str"" + toParse);
    parseMessage(toParse,outputMessage);
    outputMessage.put(""String_Node_Str"",System.currentTimeMillis());
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",outputMessage.remove(""String_Node_Str""));
    outputMessage.put(""String_Node_Str"",toParse);
    return outputMessage;
  }
 catch (  Exception e) {
    e.printStackTrace();
    _LOG.error(""String_Node_Str"" + toParse);
    return null;
  }
}",0.9741468459152016
116942,"@Override public JSONObject parse(byte[] raw_message){
  String toParse=""String_Node_Str"";
  JSONObject toReturn;
  try {
    toParse=new String(raw_message,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + toParse);
    Match gm=grok.match(toParse);
    gm.captures();
    toReturn=new JSONObject();
    toReturn.putAll(gm.toMap());
    String str=toReturn.get(""String_Node_Str"").toString();
    String pattern=patternMap.get(str);
    Map<String,Object> response=getMap(pattern,toParse);
    toReturn.putAll(response);
    toReturn.put(""String_Node_Str"",convertToEpoch(toReturn.get(""String_Node_Str"").toString(),toReturn.get(""String_Node_Str"").toString(),toReturn.get(""String_Node_Str"").toString(),true));
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.put(""String_Node_Str"",toReturn.remove(""String_Node_Str""));
    return toReturn;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","@Override public JSONObject parse(byte[] raw_message){
  String toParse=""String_Node_Str"";
  JSONObject toReturn;
  try {
    toParse=new String(raw_message,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + toParse);
    Match gm=grok.match(toParse);
    gm.captures();
    toReturn=new JSONObject();
    toReturn.putAll(gm.toMap());
    String str=toReturn.get(""String_Node_Str"").toString();
    String pattern=patternMap.get(str);
    Map<String,Object> response=getMap(pattern,toParse);
    toReturn.putAll(response);
    toReturn.put(""String_Node_Str"",convertToEpoch(toReturn.get(""String_Node_Str"").toString(),toReturn.get(""String_Node_Str"").toString(),toReturn.get(""String_Node_Str"").toString(),true));
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.remove(""String_Node_Str"");
    toReturn.put(""String_Node_Str"",toReturn.remove(""String_Node_Str""));
    toReturn.put(""String_Node_Str"",toParse);
    return toReturn;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.980477223427332
116943,"private boolean initializeAlertIndexing(String name){
  try {
    String messageUpstreamComponent=alertComponents.get(alertComponents.size() - 1);
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ messageUpstreamComponent);
    Class loaded_class=Class.forName(config.getString(""String_Node_Str""));
    IndexAdapter adapter=(IndexAdapter)loaded_class.newInstance();
    TelemetryIndexingBolt indexing_bolt=new TelemetryIndexingBolt().withIndexIP(config.getString(""String_Node_Str"")).withIndexPort(config.getInt(""String_Node_Str"")).withClusterName(config.getString(""String_Node_Str"")).withIndexName(config.getString(""String_Node_Str"")).withDocumentName(config.getString(""String_Node_Str"")).withBulk(config.getInt(""String_Node_Str"")).withIndexAdapter(adapter).withMetricConfiguration(config);
    String alerts_name=config.getString(""String_Node_Str"");
    builder.setBolt(alerts_name,indexing_bolt,config.getInt(""String_Node_Str"")).shuffleGrouping(messageUpstreamComponent,""String_Node_Str"").setNumTasks(config.getInt(""String_Node_Str""));
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
  return true;
}","private boolean initializeAlertIndexing(String name){
  try {
    String messageUpstreamComponent=alertComponents.get(alertComponents.size() - 1);
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ messageUpstreamComponent);
    Class loaded_class=Class.forName(config.getString(""String_Node_Str""));
    IndexAdapter adapter=(IndexAdapter)loaded_class.newInstance();
    String dateFormat=""String_Node_Str"";
    if (config.containsKey(""String_Node_Str"")) {
      dateFormat=config.getString(""String_Node_Str"");
    }
    TelemetryIndexingBolt indexing_bolt=new TelemetryIndexingBolt().withIndexIP(config.getString(""String_Node_Str"")).withIndexPort(config.getInt(""String_Node_Str"")).withClusterName(config.getString(""String_Node_Str"")).withIndexName(config.getString(""String_Node_Str"")).withDocumentName(config.getString(""String_Node_Str"")).withIndexTimestamp(dateFormat).withBulk(config.getInt(""String_Node_Str"")).withIndexAdapter(adapter).withMetricConfiguration(config);
    String alerts_name=config.getString(""String_Node_Str"");
    builder.setBolt(alerts_name,indexing_bolt,config.getInt(""String_Node_Str"")).shuffleGrouping(messageUpstreamComponent,""String_Node_Str"").setNumTasks(config.getInt(""String_Node_Str""));
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0.926986688180718
116944,"private boolean initializeErrorIndexBolt(String component_name){
  try {
    Class loaded_class=Class.forName(config.getString(""String_Node_Str""));
    IndexAdapter adapter=(IndexAdapter)loaded_class.newInstance();
    TelemetryIndexingBolt indexing_bolt=new TelemetryIndexingBolt().withIndexIP(config.getString(""String_Node_Str"")).withIndexPort(config.getInt(""String_Node_Str"")).withClusterName(config.getString(""String_Node_Str"")).withIndexName(config.getString(""String_Node_Str"")).withDocumentName(config.getString(""String_Node_Str"")).withBulk(config.getInt(""String_Node_Str"")).withIndexAdapter(adapter).withMetricConfiguration(config);
    BoltDeclarer declarer=builder.setBolt(component_name,indexing_bolt,config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str""));
    for (    String component : errorComponents)     declarer.shuffleGrouping(component,""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}","private boolean initializeErrorIndexBolt(String component_name){
  try {
    Class loaded_class=Class.forName(config.getString(""String_Node_Str""));
    IndexAdapter adapter=(IndexAdapter)loaded_class.newInstance();
    String dateFormat=""String_Node_Str"";
    if (config.containsKey(""String_Node_Str"")) {
      dateFormat=config.getString(""String_Node_Str"");
    }
    TelemetryIndexingBolt indexing_bolt=new TelemetryIndexingBolt().withIndexIP(config.getString(""String_Node_Str"")).withIndexPort(config.getInt(""String_Node_Str"")).withClusterName(config.getString(""String_Node_Str"")).withIndexName(config.getString(""String_Node_Str"")).withDocumentName(config.getString(""String_Node_Str"")).withIndexTimestamp(dateFormat).withBulk(config.getInt(""String_Node_Str"")).withIndexAdapter(adapter).withMetricConfiguration(config);
    BoltDeclarer declarer=builder.setBolt(component_name,indexing_bolt,config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str""));
    for (    String component : errorComponents)     declarer.shuffleGrouping(component,""String_Node_Str"");
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}",0.9165514061779622
116945,"public void prepare(Map stormConf,TopologyContext context,OutputCollector collector){
  this.collector=collector;
  this.conf=stormConf;
  if (conf.containsKey(""String_Node_Str"")) {
    this.numberOfCharsToUseForShuffleGrouping=Integer.valueOf(conf.get(""String_Node_Str"").toString());
  }
  Grouping._Fields a;
  if (conf.containsKey(""String_Node_Str"")) {
    String timePrecision=conf.get(""String_Node_Str"").toString();
    if (timePrecision.equalsIgnoreCase(""String_Node_Str"")) {
      timePrecisonDivisor=1000000L;
    }
 else     if (timePrecision.equalsIgnoreCase(""String_Node_Str"")) {
      timePrecisonDivisor=1000L;
    }
 else     if (timePrecision.equalsIgnoreCase(""String_Node_Str"")) {
      timePrecisonDivisor=1L;
    }
  }
}","public void prepare(Map stormConf,TopologyContext context,OutputCollector collector){
  this.collector=collector;
  this.conf=stormConf;
  if (conf.containsKey(""String_Node_Str"")) {
    this.numberOfCharsToUseForShuffleGrouping=Integer.valueOf(conf.get(""String_Node_Str"").toString());
  }
  Grouping._Fields a;
}",0.5942857142857143
116946,"/** 
 * Processes each input tuple and emits tuple which holds the following information about a network packet : group_key : first 3 digits of the pcap_id pcap_id : generated from network packet srcIp, dstIp, protocol, srcPort, dstPort header_json : contains global header, ipv4 header, tcp header(if the n/w protocol is tcp), udp header (if the n/w protocol is udp) timestamp : the n/w packet capture timestamp pcap : tuple in binary array.
 * @param input Tuple
 * @see backtype.storm.task.IBolt#execute(Tuple)
 */
@SuppressWarnings(""String_Node_Str"") public void execute(Tuple input){
  List<PacketInfo> packetInfoList=null;
  try {
    packetInfoList=PcapParser.parse(input.getBinary(0));
    if (packetInfoList != null) {
      for (      PacketInfo packetInfo : packetInfoList) {
        String string_pcap=packetInfo.getJsonIndexDoc();
        Object obj=JSONValue.parse(string_pcap);
        JSONObject header=(JSONObject)obj;
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",header);
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),message));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getJsonDoc(),packetInfo.getKey()));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),packetInfo.getPacketTimeInNanos() / timePrecisonDivisor,input.getBinary(0)));
      }
    }
  }
 catch (  Exception e) {
    collector.fail(input);
    e.printStackTrace();
    LOG.error(""String_Node_Str"",e);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + input.getBinary(0),error_as_string);
    collector.emit(""String_Node_Str"",new Values(error));
    return;
  }
  collector.ack(input);
}","/** 
 * Processes each input tuple and emits tuple which holds the following information about a network packet : group_key : first 3 digits of the pcap_id pcap_id : generated from network packet srcIp, dstIp, protocol, srcPort, dstPort header_json : contains global header, ipv4 header, tcp header(if the n/w protocol is tcp), udp header (if the n/w protocol is udp) timestamp : the n/w packet capture timestamp pcap : tuple in binary array.
 * @param input Tuple
 * @see backtype.storm.task.IBolt#execute(Tuple)
 */
@SuppressWarnings(""String_Node_Str"") public void execute(Tuple input){
  List<PacketInfo> packetInfoList=null;
  try {
    packetInfoList=PcapParser.parse(input.getBinary(0));
    if (packetInfoList != null) {
      for (      PacketInfo packetInfo : packetInfoList) {
        String string_pcap=packetInfo.getJsonIndexDoc();
        Object obj=JSONValue.parse(string_pcap);
        JSONObject header=(JSONObject)obj;
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",header);
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),message));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getJsonDoc(),packetInfo.getKey()));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),packetInfo.getPacketTimeInNanos() / timePrecisionDivisor,input.getBinary(0)));
      }
    }
  }
 catch (  Exception e) {
    collector.fail(input);
    e.printStackTrace();
    LOG.error(""String_Node_Str"",e);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + input.getBinary(0),error_as_string);
    collector.emit(""String_Node_Str"",new Values(error));
    return;
  }
  collector.ack(input);
}",0.9997218358831712
116947,"@Override boolean initializeParsingBolt(String topology_name,String name){
  try {
    String messageUpstreamComponent=messageComponents.get(messageComponents.size() - 1);
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ messageUpstreamComponent);
    builder.setBolt(name,new PcapParserBolt(),config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str"")).shuffleGrouping(messageUpstreamComponent);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  return true;
}","@Override boolean initializeParsingBolt(String topology_name,String name){
  try {
    String messageUpstreamComponent=messageComponents.get(messageComponents.size() - 1);
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ messageUpstreamComponent);
    PcapParserBolt pcapParser=new PcapParserBolt().withTsPrecision(config.getString(""String_Node_Str""));
    builder.setBolt(name,pcapParser,config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str"")).shuffleGrouping(messageUpstreamComponent);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  return true;
}",0.8833189282627485
116948,"protected void setUp() throws Exception {
  super.setUp();
  Properties prop=super.getTestProperties();
  assertNotNull(prop);
  System.out.println(""String_Node_Str"" + (String)prop.get(""String_Node_Str""));
  this.setMode(""String_Node_Str"");
  if (skipTests(this.getMode())) {
    System.out.println(getClass().getName() + ""String_Node_Str"");
    return;
  }
 else {
    GeoMysqlAdapterTest.setGeoMySqlAdapter(new GeoMysqlAdapter((String)prop.get(""String_Node_Str""),(new Integer((String)prop.get(""String_Node_Str""))).intValue(),(String)prop.get(""String_Node_Str""),(String)prop.get(""String_Node_Str""),(String)prop.get(""String_Node_Str"")));
    connected=geoMySqlAdapter.initializeAdapter();
    assertTrue(connected);
    URL schema_url=getClass().getClassLoader().getResource(""String_Node_Str"");
    super.setSchemaJsonString(super.readSchemaFromFile(schema_url));
  }
}","protected void setUp() throws Exception {
  super.setUp();
  Properties prop=super.getTestProperties();
  assertNotNull(prop);
  System.out.println(""String_Node_Str"" + (String)prop.get(""String_Node_Str""));
  if (skipTests(this.getMode())) {
    System.out.println(getClass().getName() + ""String_Node_Str"");
    return;
  }
 else {
    GeoMysqlAdapterTest.setGeoMySqlAdapter(new GeoMysqlAdapter((String)prop.get(""String_Node_Str""),(new Integer((String)prop.get(""String_Node_Str""))).intValue(),(String)prop.get(""String_Node_Str""),(String)prop.get(""String_Node_Str""),(String)prop.get(""String_Node_Str"")));
    connected=geoMySqlAdapter.initializeAdapter();
    assertTrue(connected);
    URL schema_url=getClass().getClassLoader().getResource(""String_Node_Str"");
    super.setSchemaJsonString(super.readSchemaFromFile(schema_url));
  }
}",0.9794480328831474
116949,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    original_message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(""String_Node_Str"",new Values(key,original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    original_message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    if (key == null)     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(""String_Node_Str"",new Values(key,original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9865396562435288
116950,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    in_json=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(""String_Node_Str"",new Values(key,in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    in_json=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    if (key == null)     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(""String_Node_Str"",new Values(key,in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9870492129906356
116951,"public void declareOutputFields(OutputFieldsDeclarer declarer){
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}","public void declareOutputFields(OutputFieldsDeclarer declarer){
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.9789719626168224
116952,"/** 
 * Processes each input tuple and emits tuple which holds the following information about a network packet : group_key : first 3 digits of the pcap_id pcap_id : generated from network packet srcIp, dstIp, protocol, srcPort, dstPort header_json : contains global header, ipv4 header, tcp header(if the n/w protocol is tcp), udp header (if the n/w protocol is udp) timestamp : the n/w packet capture timestamp pcap : tuple in binary array.
 * @param input Tuple
 * @see backtype.storm.task.IBolt#execute(Tuple)
 */
public void execute(Tuple input){
  List<PacketInfo> packetInfoList=null;
  try {
    packetInfoList=PcapParser.parse(input.getBinary(0));
    if (packetInfoList != null) {
      for (      PacketInfo packetInfo : packetInfoList) {
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",packetInfo.getKey());
        message.put(""String_Node_Str"",packetInfo.getJsonIndexDoc());
        collector.emit(""String_Node_Str"",new Values(message));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getJsonDoc(),packetInfo.getKey()));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),(packetInfo.getPacketHeader().getTsSec() * secMultiplier + packetInfo.getPacketHeader().getTsUsec() * microSecMultiplier),input.getBinary(0)));
      }
    }
  }
 catch (  Exception e) {
    collector.fail(input);
    e.printStackTrace();
    LOG.error(""String_Node_Str"",e);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + input.getBinary(0),error_as_string);
    collector.emit(""String_Node_Str"",new Values(error));
    return;
  }
  collector.ack(input);
}","/** 
 * Processes each input tuple and emits tuple which holds the following information about a network packet : group_key : first 3 digits of the pcap_id pcap_id : generated from network packet srcIp, dstIp, protocol, srcPort, dstPort header_json : contains global header, ipv4 header, tcp header(if the n/w protocol is tcp), udp header (if the n/w protocol is udp) timestamp : the n/w packet capture timestamp pcap : tuple in binary array.
 * @param input Tuple
 * @see backtype.storm.task.IBolt#execute(Tuple)
 */
public void execute(Tuple input){
  List<PacketInfo> packetInfoList=null;
  try {
    packetInfoList=PcapParser.parse(input.getBinary(0));
    if (packetInfoList != null) {
      for (      PacketInfo packetInfo : packetInfoList) {
        String string_pcap=packetInfo.getJsonIndexDoc();
        Object obj=JSONValue.parse(string_pcap);
        JSONObject header=(JSONObject)obj;
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",packetInfo.getKey());
        if (header.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (header.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (header.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (message.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (message.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        message.put(""String_Node_Str"",header);
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),message));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getJsonDoc(),packetInfo.getKey()));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),(packetInfo.getPacketHeader().getTsSec() * secMultiplier + packetInfo.getPacketHeader().getTsUsec() * microSecMultiplier),input.getBinary(0)));
      }
    }
  }
 catch (  Exception e) {
    collector.fail(input);
    e.printStackTrace();
    LOG.error(""String_Node_Str"",e);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + input.getBinary(0),error_as_string);
    collector.emit(""String_Node_Str"",new Values(error));
    return;
  }
  collector.ack(input);
}",0.7022543598468737
116953,"public boolean initializeHbaseBolt(String name,String shuffleType){
  try {
    String tableName=config.getString(""String_Node_Str"").toString();
    TupleTableConfig hbaseBoltConfig=new TupleTableConfig(tableName,config.getString(""String_Node_Str"").toString(),config.getString(""String_Node_Str"").toString());
    String allColumnFamiliesColumnQualifiers=config.getString(""String_Node_Str"").toString();
    String[] tokenizedColumnFamiliesWithColumnQualifiers=StringUtils.split(allColumnFamiliesColumnQualifiers,""String_Node_Str"");
    for (    String tokenizedColumnFamilyWithColumnQualifiers : tokenizedColumnFamiliesWithColumnQualifiers) {
      String[] cfCqTokens=StringUtils.split(tokenizedColumnFamilyWithColumnQualifiers,""String_Node_Str"");
      String columnFamily=cfCqTokens[0];
      String[] columnQualifiers=StringUtils.split(cfCqTokens[1],""String_Node_Str"");
      for (      String columnQualifier : columnQualifiers) {
        hbaseBoltConfig.addColumn(columnFamily,columnQualifier);
      }
      hbaseBoltConfig.setBatch(Boolean.valueOf(config.getString(""String_Node_Str"").toString()));
      BoltDeclarer declarer=builder.setBolt(name,new HBaseBolt(hbaseBoltConfig),config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str""));
      if (Grouping._Fields.CUSTOM_OBJECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.customGrouping(component,""String_Node_Str"",new HBaseStreamPartitioner(hbaseBoltConfig.getTableName(),0,Integer.parseInt(conf.get(""String_Node_Str"").toString())));
      }
 else       if (Grouping._Fields.DIRECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.fieldsGrouping(component,""String_Node_Str"",new Fields(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  return true;
}","public boolean initializeHbaseBolt(String name,String shuffleType){
  try {
    String tableName=config.getString(""String_Node_Str"").toString();
    TupleTableConfig hbaseBoltConfig=new TupleTableConfig(tableName,config.getString(""String_Node_Str"").toString(),config.getString(""String_Node_Str"").toString());
    String allColumnFamiliesColumnQualifiers=config.getString(""String_Node_Str"").toString();
    String[] tokenizedColumnFamiliesWithColumnQualifiers=StringUtils.split(allColumnFamiliesColumnQualifiers,""String_Node_Str"");
    for (    String tokenizedColumnFamilyWithColumnQualifiers : tokenizedColumnFamiliesWithColumnQualifiers) {
      String[] cfCqTokens=StringUtils.split(tokenizedColumnFamilyWithColumnQualifiers,""String_Node_Str"");
      String columnFamily=cfCqTokens[0];
      String[] columnQualifiers=StringUtils.split(cfCqTokens[1],""String_Node_Str"");
      for (      String columnQualifier : columnQualifiers) {
        hbaseBoltConfig.addColumn(columnFamily,columnQualifier);
      }
      hbaseBoltConfig.setBatch(Boolean.valueOf(config.getString(""String_Node_Str"").toString()));
      HBaseBolt hbase_bolt=new HBaseBolt(hbaseBoltConfig);
      hbase_bolt.setAutoAck(true);
      BoltDeclarer declarer=builder.setBolt(name,hbase_bolt,config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str""));
      if (Grouping._Fields.CUSTOM_OBJECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.customGrouping(parserName,""String_Node_Str"",new HBaseStreamPartitioner(hbaseBoltConfig.getTableName(),0,Integer.parseInt(conf.get(""String_Node_Str"").toString())));
      }
 else       if (Grouping._Fields.DIRECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.fieldsGrouping(parserName,""String_Node_Str"",new Fields(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  return true;
}",0.939817302525524
116954,"public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declare(new Fields(this.OutputFieldName));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}","public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.8615384615384616
116955,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  try {
    original_message=(JSONObject)tuple.getValue(0);
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(new Values(original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    original_message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(""String_Node_Str"",new Values(key,original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9735426973542696
116956,"@SuppressWarnings(""String_Node_Str"") public Map<String,JSONObject> alert(JSONObject raw_message){
  Map<String,JSONObject> alerts=new HashMap<String,JSONObject>();
  JSONObject content=(JSONObject)raw_message.get(""String_Node_Str"");
  if (!content.containsKey(""String_Node_Str"") || !content.containsKey(""String_Node_Str"")) {
    int alert_type=0;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    String alert_id=UUID.randomUUID().toString();
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String source_ip=content.get(""String_Node_Str"").toString();
  String dst_ip=content.get(""String_Node_Str"").toString();
  if (source_ip == null && dst_ip == null) {
    int alert_type=0;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (!ipvalidator.isValidInet4Address(source_ip) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=1;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String designated_host=null;
  if (loaded_whitelist.contains(source_ip))   designated_host=source_ip;
 else   if (loaded_whitelist.contains(dst_ip))   designated_host=dst_ip;
  if (designated_host == null) {
    int alert_type=3;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (source_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=4;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (dst_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(source_ip)) {
    int alert_type=5;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(source_ip)) {
    int alert_type=6;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(dst_ip)) {
    int alert_type=7;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (alerts.isEmpty())   return null;
 else   return alerts;
}","@SuppressWarnings(""String_Node_Str"") public Map<String,JSONObject> alert(JSONObject raw_message){
  Map<String,JSONObject> alerts=new HashMap<String,JSONObject>();
  JSONObject content=(JSONObject)raw_message.get(""String_Node_Str"");
  if (!content.containsKey(""String_Node_Str"") || !content.containsKey(""String_Node_Str"")) {
    int alert_type=0;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    String alert_id=UUID.randomUUID().toString();
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String source_ip=content.get(""String_Node_Str"").toString();
  String dst_ip=content.get(""String_Node_Str"").toString();
  if (source_ip == null && dst_ip == null) {
    int alert_type=1;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (!ipvalidator.isValidInet4Address(source_ip) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=2;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String designated_host=null;
  if (loaded_whitelist.contains(source_ip))   designated_host=source_ip;
 else   if (loaded_whitelist.contains(dst_ip))   designated_host=dst_ip;
  if (designated_host == null) {
    int alert_type=3;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (source_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=4;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (dst_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(source_ip)) {
    int alert_type=5;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(source_ip)) {
    int alert_type=6;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(dst_ip)) {
    int alert_type=7;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (alerts.isEmpty())   return null;
 else   return alerts;
}",0.9996659428762318
116957,"public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declare(new Fields(""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}","public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.8976744186046511
116958,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  try {
    in_json=(JSONObject)tuple.getValue(0);
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(new Values(in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    in_json=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(""String_Node_Str"",new Values(key,in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9716883653647448
116959,"public void execute(Tuple tuple){
  JSONObject message=null;
  try {
    LOG.trace(""String_Node_Str"" + message);
    message=(JSONObject)tuple.getValue(0);
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"");
    int result_code=_adapter.bulkIndex(message);
    if (result_code == 0) {
      tuple_queue.add(tuple);
    }
 else     if (result_code == 1) {
      tuple_queue.add(tuple);
      Iterator<Tuple> iterator=tuple_queue.iterator();
      while (iterator.hasNext()) {
        Tuple setElement=iterator.next();
        _collector.ack(setElement);
        ackCounter.inc();
      }
      tuple_queue.clear();
    }
 else     if (result_code == 2) {
      throw new Exception(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Iterator<Tuple> iterator=tuple_queue.iterator();
    while (iterator.hasNext()) {
      Tuple setElement=iterator.next();
      _collector.fail(setElement);
      failCounter.inc();
      String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
      JSONObject error=ErrorGenerator.generateErrorMessage(new String(""String_Node_Str""),error_as_string);
      _collector.emit(""String_Node_Str"",new Values(error));
    }
    tuple_queue.clear();
  }
}","public void execute(Tuple tuple){
  JSONObject message=null;
  try {
    LOG.trace(""String_Node_Str"" + message);
    message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"");
    int result_code=_adapter.bulkIndex(message);
    if (result_code == 0) {
      tuple_queue.add(tuple);
    }
 else     if (result_code == 1) {
      tuple_queue.add(tuple);
      Iterator<Tuple> iterator=tuple_queue.iterator();
      while (iterator.hasNext()) {
        Tuple setElement=iterator.next();
        _collector.ack(setElement);
        ackCounter.inc();
      }
      tuple_queue.clear();
    }
 else     if (result_code == 2) {
      throw new Exception(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Iterator<Tuple> iterator=tuple_queue.iterator();
    while (iterator.hasNext()) {
      Tuple setElement=iterator.next();
      _collector.fail(setElement);
      failCounter.inc();
      String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
      JSONObject error=ErrorGenerator.generateErrorMessage(new String(""String_Node_Str""),error_as_string);
      _collector.emit(""String_Node_Str"",new Values(error));
    }
    tuple_queue.clear();
  }
}",0.9895712630359212
116960,"/** 
 * @param parser  The parser class for parsing the incoming raw message byte stream
 * @return      Instance of this class
 */
public boolean checkForSchemaCorrectness(JSONObject message){
  int correct=0;
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (correct == 0) {
    LOG.trace(""String_Node_Str"" + message);
    return false;
  }
 else {
    LOG.trace(""String_Node_Str"" + message);
    return true;
  }
}","/** 
 * @param parser The parser class for parsing the incoming raw message byte stream
 * @return Instance of this class
 */
public boolean checkForSchemaCorrectness(JSONObject message){
  int correct=0;
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (correct == 0) {
    LOG.trace(""String_Node_Str"" + message);
    return false;
  }
 else {
    LOG.trace(""String_Node_Str"" + message);
    return true;
  }
}",0.9965714285714286
116961,"public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declare(new Fields(this.OutputFieldName));
  declearer.declareStream(""String_Node_Str"",new Fields(this.OutputFieldName));
}","public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.7293577981651376
116962,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  byte[] original_message=null;
  try {
    original_message=tuple.getBinary(0);
    LOG.trace(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    e.printStackTrace();
    _collector.fail(tuple);
    if (metricConfiguration != null)     failCounter.inc();
  }
  try {
    LOG.trace(""String_Node_Str"");
    if (original_message == null || original_message.length == 0) {
      LOG.error(""String_Node_Str"");
      throw new Exception(""String_Node_Str"");
    }
    LOG.trace(""String_Node_Str"");
    JSONObject transformed_message=_parser.parse(original_message);
    LOG.debug(""String_Node_Str"" + transformed_message);
    if (transformed_message == null || transformed_message.isEmpty())     throw new Exception(""String_Node_Str"");
    JSONObject new_message=new JSONObject();
    LOG.trace(""String_Node_Str"");
    if (!checkForSchemaCorrectness(transformed_message)) {
      _collector.fail(tuple);
      if (metricConfiguration != null)       failCounter.inc();
      throw new Exception(""String_Node_Str"" + transformed_message);
    }
    LOG.trace(""String_Node_Str"");
    new_message.put(""String_Node_Str"",transformed_message);
    _collector.ack(tuple);
    if (metricConfiguration != null)     ackCounter.inc();
    if (_filter != null) {
      if (_filter.emitTuple(transformed_message)) {
        LOG.debug(""String_Node_Str"" + transformed_message);
        _collector.emit(new Values(new_message));
        if (metricConfiguration != null)         emitCounter.inc();
      }
 else {
        LOG.debug(""String_Node_Str"" + transformed_message);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    _collector.fail(tuple);
    if (metricConfiguration != null)     failCounter.inc();
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + new String(original_message),e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  byte[] original_message=null;
  try {
    original_message=tuple.getBinary(0);
    LOG.trace(""String_Node_Str"");
    if (original_message == null || original_message.length == 0) {
      LOG.error(""String_Node_Str"");
      throw new Exception(""String_Node_Str"");
    }
    LOG.trace(""String_Node_Str"");
    JSONObject transformed_message=_parser.parse(original_message);
    LOG.debug(""String_Node_Str"" + transformed_message);
    if (transformed_message == null || transformed_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"");
    if (!checkForSchemaCorrectness(transformed_message)) {
      throw new Exception(""String_Node_Str"" + transformed_message);
    }
 else {
      LOG.trace(""String_Node_Str"");
      boolean filtered=false;
      if (_filter != null) {
        if (!_filter.emitTuple(transformed_message)) {
          filtered=true;
        }
      }
      if (!filtered) {
        String ip1=null;
        if (transformed_message.containsKey(""String_Node_Str""))         ip1=transformed_message.get(""String_Node_Str"").toString();
        String ip2=null;
        if (transformed_message.containsKey(""String_Node_Str""))         ip2=transformed_message.get(""String_Node_Str"").toString();
        String key=generateTopologyKey(ip1,ip2);
        JSONObject new_message=new JSONObject();
        new_message.put(""String_Node_Str"",transformed_message);
        _collector.emit(""String_Node_Str"",new Values(key,new_message));
      }
      _collector.ack(tuple);
      if (metricConfiguration != null)       ackCounter.inc();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    _collector.fail(tuple);
    if (metricConfiguration != null)     failCounter.inc();
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + new String(original_message),e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.3076181292189007
116963,"public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declare(new Fields(this.OutputFieldName));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}","public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.8615384615384616
116964,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  try {
    original_message=(JSONObject)tuple.getValue(0);
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(new Values(original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    original_message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(""String_Node_Str"",new Values(key,original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9735426973542696
116965,"@SuppressWarnings(""String_Node_Str"") public Map<String,JSONObject> alert(JSONObject raw_message){
  Map<String,JSONObject> alerts=new HashMap<String,JSONObject>();
  JSONObject content=(JSONObject)raw_message.get(""String_Node_Str"");
  if (!content.containsKey(""String_Node_Str"") || !content.containsKey(""String_Node_Str"")) {
    int alert_type=0;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    String alert_id=UUID.randomUUID().toString();
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String source_ip=content.get(""String_Node_Str"").toString();
  String dst_ip=content.get(""String_Node_Str"").toString();
  if (source_ip == null && dst_ip == null) {
    int alert_type=0;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (!ipvalidator.isValidInet4Address(source_ip) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=1;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String designated_host=null;
  if (loaded_whitelist.contains(source_ip))   designated_host=source_ip;
 else   if (loaded_whitelist.contains(dst_ip))   designated_host=dst_ip;
  if (designated_host == null) {
    int alert_type=3;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (source_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=4;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (dst_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(source_ip)) {
    int alert_type=5;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(source_ip)) {
    int alert_type=6;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(dst_ip)) {
    int alert_type=7;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (alerts.isEmpty())   return null;
 else   return alerts;
}","@SuppressWarnings(""String_Node_Str"") public Map<String,JSONObject> alert(JSONObject raw_message){
  Map<String,JSONObject> alerts=new HashMap<String,JSONObject>();
  JSONObject content=(JSONObject)raw_message.get(""String_Node_Str"");
  if (!content.containsKey(""String_Node_Str"") || !content.containsKey(""String_Node_Str"")) {
    int alert_type=0;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    String alert_id=UUID.randomUUID().toString();
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String source_ip=content.get(""String_Node_Str"").toString();
  String dst_ip=content.get(""String_Node_Str"").toString();
  if (source_ip == null && dst_ip == null) {
    int alert_type=1;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (!ipvalidator.isValidInet4Address(source_ip) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=2;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  String designated_host=null;
  if (loaded_whitelist.contains(source_ip))   designated_host=source_ip;
 else   if (loaded_whitelist.contains(dst_ip))   designated_host=dst_ip;
  if (designated_host == null) {
    int alert_type=3;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
    return alerts;
  }
  if (source_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(dst_ip)) {
    int alert_type=4;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (dst_ip.equals(designated_host) && !ipvalidator.isValidInet4Address(source_ip)) {
    int alert_type=5;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(source_ip)) {
    int alert_type=6;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (loaded_blacklist.contains(dst_ip)) {
    int alert_type=7;
    JSONObject alert=new JSONObject();
    alert.put(""String_Node_Str"",""String_Node_Str"" + alert_type);
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",""String_Node_Str"");
    alert.put(""String_Node_Str"",designated_host);
    alert.put(""String_Node_Str"",source_ip);
    alert.put(""String_Node_Str"",dst_ip);
    alert.put(""String_Node_Str"",""String_Node_Str"" + source_ip + ""String_Node_Str""+ dst_ip);
    String alert_id=generateAlertId(source_ip,dst_ip,alert_type);
    alert.put(""String_Node_Str"",alert_id);
    alerts.put(alert_id,alert);
  }
  if (alerts.isEmpty())   return null;
 else   return alerts;
}",0.9996659428762318
116966,"public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declare(new Fields(""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}","public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.8976744186046511
116967,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  try {
    in_json=(JSONObject)tuple.getValue(0);
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(new Values(in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    in_json=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(""String_Node_Str"",new Values(key,in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9716883653647448
116968,"public void execute(Tuple tuple){
  JSONObject message=null;
  try {
    LOG.trace(""String_Node_Str"" + message);
    message=(JSONObject)tuple.getValue(0);
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"");
    int result_code=_adapter.bulkIndex(message);
    if (result_code == 0) {
      tuple_queue.add(tuple);
    }
 else     if (result_code == 1) {
      tuple_queue.add(tuple);
      Iterator<Tuple> iterator=tuple_queue.iterator();
      while (iterator.hasNext()) {
        Tuple setElement=iterator.next();
        _collector.ack(setElement);
        ackCounter.inc();
      }
      tuple_queue.clear();
    }
 else     if (result_code == 2) {
      throw new Exception(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Iterator<Tuple> iterator=tuple_queue.iterator();
    while (iterator.hasNext()) {
      Tuple setElement=iterator.next();
      _collector.fail(setElement);
      failCounter.inc();
      String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
      JSONObject error=ErrorGenerator.generateErrorMessage(new String(""String_Node_Str""),error_as_string);
      _collector.emit(""String_Node_Str"",new Values(error));
    }
    tuple_queue.clear();
  }
}","public void execute(Tuple tuple){
  JSONObject message=null;
  try {
    LOG.trace(""String_Node_Str"" + message);
    message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"");
    int result_code=_adapter.bulkIndex(message);
    if (result_code == 0) {
      tuple_queue.add(tuple);
    }
 else     if (result_code == 1) {
      tuple_queue.add(tuple);
      Iterator<Tuple> iterator=tuple_queue.iterator();
      while (iterator.hasNext()) {
        Tuple setElement=iterator.next();
        _collector.ack(setElement);
        ackCounter.inc();
      }
      tuple_queue.clear();
    }
 else     if (result_code == 2) {
      throw new Exception(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Iterator<Tuple> iterator=tuple_queue.iterator();
    while (iterator.hasNext()) {
      Tuple setElement=iterator.next();
      _collector.fail(setElement);
      failCounter.inc();
      String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
      JSONObject error=ErrorGenerator.generateErrorMessage(new String(""String_Node_Str""),error_as_string);
      _collector.emit(""String_Node_Str"",new Values(error));
    }
    tuple_queue.clear();
  }
}",0.9895712630359212
116969,"/** 
 * @param parser  The parser class for parsing the incoming raw message byte stream
 * @return      Instance of this class
 */
public boolean checkForSchemaCorrectness(JSONObject message){
  int correct=0;
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (correct == 0) {
    LOG.trace(""String_Node_Str"" + message);
    return false;
  }
 else {
    LOG.trace(""String_Node_Str"" + message);
    return true;
  }
}","/** 
 * @param parser The parser class for parsing the incoming raw message byte stream
 * @return Instance of this class
 */
public boolean checkForSchemaCorrectness(JSONObject message){
  int correct=0;
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (message.containsKey(""String_Node_Str"")) {
    correct++;
    LOG.trace(""String_Node_Str"");
  }
  if (correct == 0) {
    LOG.trace(""String_Node_Str"" + message);
    return false;
  }
 else {
    LOG.trace(""String_Node_Str"" + message);
    return true;
  }
}",0.9965714285714286
116970,"public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declare(new Fields(this.OutputFieldName));
  declearer.declareStream(""String_Node_Str"",new Fields(this.OutputFieldName));
}","public void declareOutputFields(OutputFieldsDeclarer declearer){
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declearer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.7293577981651376
116971,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  byte[] original_message=null;
  try {
    original_message=tuple.getBinary(0);
    LOG.trace(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    e.printStackTrace();
    _collector.fail(tuple);
    if (metricConfiguration != null)     failCounter.inc();
  }
  try {
    LOG.trace(""String_Node_Str"");
    if (original_message == null || original_message.length == 0) {
      LOG.error(""String_Node_Str"");
      throw new Exception(""String_Node_Str"");
    }
    LOG.trace(""String_Node_Str"");
    JSONObject transformed_message=_parser.parse(original_message);
    LOG.debug(""String_Node_Str"" + transformed_message);
    if (transformed_message == null || transformed_message.isEmpty())     throw new Exception(""String_Node_Str"");
    JSONObject new_message=new JSONObject();
    LOG.trace(""String_Node_Str"");
    if (!checkForSchemaCorrectness(transformed_message)) {
      _collector.fail(tuple);
      if (metricConfiguration != null)       failCounter.inc();
      throw new Exception(""String_Node_Str"" + transformed_message);
    }
    LOG.trace(""String_Node_Str"");
    new_message.put(""String_Node_Str"",transformed_message);
    _collector.ack(tuple);
    if (metricConfiguration != null)     ackCounter.inc();
    if (_filter != null) {
      if (_filter.emitTuple(transformed_message)) {
        LOG.debug(""String_Node_Str"" + transformed_message);
        _collector.emit(new Values(new_message));
        if (metricConfiguration != null)         emitCounter.inc();
      }
 else {
        LOG.debug(""String_Node_Str"" + transformed_message);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    _collector.fail(tuple);
    if (metricConfiguration != null)     failCounter.inc();
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + new String(original_message),e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  byte[] original_message=null;
  try {
    original_message=tuple.getBinary(0);
    LOG.trace(""String_Node_Str"");
    if (original_message == null || original_message.length == 0) {
      LOG.error(""String_Node_Str"");
      throw new Exception(""String_Node_Str"");
    }
    LOG.trace(""String_Node_Str"");
    JSONObject transformed_message=_parser.parse(original_message);
    LOG.debug(""String_Node_Str"" + transformed_message);
    if (transformed_message == null || transformed_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"");
    if (!checkForSchemaCorrectness(transformed_message)) {
      throw new Exception(""String_Node_Str"" + transformed_message);
    }
 else {
      LOG.trace(""String_Node_Str"");
      boolean filtered=false;
      if (_filter != null) {
        if (!_filter.emitTuple(transformed_message)) {
          filtered=true;
        }
      }
      if (!filtered) {
        String ip1=null;
        if (transformed_message.containsKey(""String_Node_Str""))         ip1=transformed_message.get(""String_Node_Str"").toString();
        String ip2=null;
        if (transformed_message.containsKey(""String_Node_Str""))         ip2=transformed_message.get(""String_Node_Str"").toString();
        String key=generateTopologyKey(ip1,ip2);
        JSONObject new_message=new JSONObject();
        new_message.put(""String_Node_Str"",transformed_message);
        _collector.emit(""String_Node_Str"",new Values(key,new_message));
      }
      _collector.ack(tuple);
      if (metricConfiguration != null)       ackCounter.inc();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    _collector.fail(tuple);
    if (metricConfiguration != null)     failCounter.inc();
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + new String(original_message),e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.3076181292189007
116972,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    original_message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(""String_Node_Str"",new Values(key,original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject original_message=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    original_message=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (original_message == null || original_message.isEmpty())     throw new Exception(""String_Node_Str"");
    if (key == null)     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + original_message);
    JSONObject alerts_tag=new JSONObject();
    Map<String,JSONObject> alerts_list=_adapter.alert(original_message);
    JSONArray uuid_list=new JSONArray();
    if (alerts_list == null || alerts_list.isEmpty()) {
      LOG.trace(""String_Node_Str"" + original_message);
      _collector.ack(tuple);
      _collector.emit(new Values(original_message));
    }
 else {
      for (      String alert : alerts_list.keySet()) {
        uuid_list.add(alert);
        System.out.println(""String_Node_Str"" + alert);
        if (cache.getIfPresent(alert) == null) {
          System.out.println(""String_Node_Str"" + alert);
          JSONObject global_alert=new JSONObject();
          global_alert.putAll(_identifier);
          global_alert.put(""String_Node_Str"",alerts_list.get(alert));
          _collector.emit(""String_Node_Str"",new Values(global_alert));
          cache.put(alert,""String_Node_Str"");
        }
 else         System.out.println(""String_Node_Str"" + alert);
        LOG.trace(""String_Node_Str"" + alerts_list);
        if (original_message.containsKey(""String_Node_Str"")) {
          JSONArray already_triggered=(JSONArray)original_message.get(""String_Node_Str"");
          uuid_list.addAll(already_triggered);
          LOG.trace(""String_Node_Str"");
        }
        original_message.put(""String_Node_Str"",uuid_list);
        LOG.debug(""String_Node_Str"" + alerts_tag);
        _collector.ack(tuple);
        _collector.emit(""String_Node_Str"",new Values(key,original_message));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    LOG.error(""String_Node_Str"" + original_message);
    e.printStackTrace();
    _collector.fail(tuple);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + original_message,error_as_string);
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9865396562435288
116973,"@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    in_json=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(""String_Node_Str"",new Values(key,in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}","@SuppressWarnings(""String_Node_Str"") public void execute(Tuple tuple){
  LOG.trace(""String_Node_Str"");
  JSONObject in_json=null;
  String key=null;
  try {
    key=tuple.getStringByField(""String_Node_Str"");
    in_json=(JSONObject)tuple.getValueByField(""String_Node_Str"");
    if (in_json == null || in_json.isEmpty())     throw new Exception(""String_Node_Str"");
    if (key == null)     throw new Exception(""String_Node_Str"");
    LOG.trace(""String_Node_Str"" + in_json);
    JSONObject message=(JSONObject)in_json.get(""String_Node_Str"");
    if (message == null || message.isEmpty())     throw new Exception(""String_Node_Str"" + in_json);
    LOG.trace(""String_Node_Str"" + message);
    for (    String jsonkey : _jsonKeys) {
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
      String jsonvalue=(String)message.get(jsonkey);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ jsonvalue);
      if (null == jsonvalue) {
        LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ message);
        continue;
      }
      JSONObject enrichment=cache.getUnchecked(jsonvalue);
      LOG.trace(""String_Node_Str"" + jsonkey + ""String_Node_Str""+ enrichment);
      if (enrichment == null)       throw new Exception(""String_Node_Str"" + jsonvalue);
      if (!in_json.containsKey(""String_Node_Str"")) {
        in_json.put(""String_Node_Str"",new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      JSONObject enr1=(JSONObject)in_json.get(""String_Node_Str"");
      if (enr1 == null)       throw new Exception(""String_Node_Str"");
      if (!enr1.containsKey(_enrichment_tag)) {
        enr1.put(_enrichment_tag,new JSONObject());
        LOG.trace(""String_Node_Str"");
      }
      LOG.trace(""String_Node_Str"" + enr1);
      JSONObject enr2=(JSONObject)enr1.get(_enrichment_tag);
      enr2.put(jsonkey,enrichment);
      LOG.trace(""String_Node_Str"" + enr2);
      enr1.put(_enrichment_tag,enr2);
      in_json.put(""String_Node_Str"",enr1);
    }
    LOG.debug(""String_Node_Str"" + in_json);
    _collector.emit(""String_Node_Str"",new Values(key,in_json));
    _collector.ack(tuple);
    if (_reporter != null) {
      emitCounter.inc();
      ackCounter.inc();
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + in_json);
    _collector.fail(tuple);
    if (_reporter != null) {
      failCounter.inc();
    }
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + in_json,e.toString());
    _collector.emit(""String_Node_Str"",new Values(error));
  }
}",0.9870492129906356
116974,"public void declareOutputFields(OutputFieldsDeclarer declarer){
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}","public void declareOutputFields(OutputFieldsDeclarer declarer){
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  declarer.declareStream(""String_Node_Str"",new Fields(""String_Node_Str""));
}",0.9789719626168224
116975,"/** 
 * Processes each input tuple and emits tuple which holds the following information about a network packet : group_key : first 3 digits of the pcap_id pcap_id : generated from network packet srcIp, dstIp, protocol, srcPort, dstPort header_json : contains global header, ipv4 header, tcp header(if the n/w protocol is tcp), udp header (if the n/w protocol is udp) timestamp : the n/w packet capture timestamp pcap : tuple in binary array.
 * @param input Tuple
 * @see backtype.storm.task.IBolt#execute(Tuple)
 */
public void execute(Tuple input){
  List<PacketInfo> packetInfoList=null;
  try {
    packetInfoList=PcapParser.parse(input.getBinary(0));
    if (packetInfoList != null) {
      for (      PacketInfo packetInfo : packetInfoList) {
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",packetInfo.getKey());
        message.put(""String_Node_Str"",packetInfo.getJsonIndexDoc());
        collector.emit(""String_Node_Str"",new Values(message));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getJsonDoc(),packetInfo.getKey()));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),(packetInfo.getPacketHeader().getTsSec() * secMultiplier + packetInfo.getPacketHeader().getTsUsec() * microSecMultiplier),input.getBinary(0)));
      }
    }
  }
 catch (  Exception e) {
    collector.fail(input);
    e.printStackTrace();
    LOG.error(""String_Node_Str"",e);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + input.getBinary(0),error_as_string);
    collector.emit(""String_Node_Str"",new Values(error));
    return;
  }
  collector.ack(input);
}","/** 
 * Processes each input tuple and emits tuple which holds the following information about a network packet : group_key : first 3 digits of the pcap_id pcap_id : generated from network packet srcIp, dstIp, protocol, srcPort, dstPort header_json : contains global header, ipv4 header, tcp header(if the n/w protocol is tcp), udp header (if the n/w protocol is udp) timestamp : the n/w packet capture timestamp pcap : tuple in binary array.
 * @param input Tuple
 * @see backtype.storm.task.IBolt#execute(Tuple)
 */
public void execute(Tuple input){
  List<PacketInfo> packetInfoList=null;
  try {
    packetInfoList=PcapParser.parse(input.getBinary(0));
    if (packetInfoList != null) {
      for (      PacketInfo packetInfo : packetInfoList) {
        String string_pcap=packetInfo.getJsonIndexDoc();
        Object obj=JSONValue.parse(string_pcap);
        JSONObject header=(JSONObject)obj;
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",packetInfo.getKey());
        if (header.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (header.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (header.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (message.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        if (message.containsKey(""String_Node_Str"")) {
          String tmp=header.get(""String_Node_Str"").toString();
          header.remove(""String_Node_Str"");
          header.put(""String_Node_Str"",tmp);
        }
        message.put(""String_Node_Str"",header);
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),message));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getJsonDoc(),packetInfo.getKey()));
        collector.emit(""String_Node_Str"",new Values(packetInfo.getKey(),(packetInfo.getPacketHeader().getTsSec() * secMultiplier + packetInfo.getPacketHeader().getTsUsec() * microSecMultiplier),input.getBinary(0)));
      }
    }
  }
 catch (  Exception e) {
    collector.fail(input);
    e.printStackTrace();
    LOG.error(""String_Node_Str"",e);
    String error_as_string=org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(e);
    JSONObject error=ErrorGenerator.generateErrorMessage(""String_Node_Str"" + input.getBinary(0),error_as_string);
    collector.emit(""String_Node_Str"",new Values(error));
    return;
  }
  collector.ack(input);
}",0.7022543598468737
116976,"public boolean initializeHbaseBolt(String name,String shuffleType){
  try {
    String tableName=config.getString(""String_Node_Str"").toString();
    TupleTableConfig hbaseBoltConfig=new TupleTableConfig(tableName,config.getString(""String_Node_Str"").toString(),config.getString(""String_Node_Str"").toString());
    String allColumnFamiliesColumnQualifiers=config.getString(""String_Node_Str"").toString();
    String[] tokenizedColumnFamiliesWithColumnQualifiers=StringUtils.split(allColumnFamiliesColumnQualifiers,""String_Node_Str"");
    for (    String tokenizedColumnFamilyWithColumnQualifiers : tokenizedColumnFamiliesWithColumnQualifiers) {
      String[] cfCqTokens=StringUtils.split(tokenizedColumnFamilyWithColumnQualifiers,""String_Node_Str"");
      String columnFamily=cfCqTokens[0];
      String[] columnQualifiers=StringUtils.split(cfCqTokens[1],""String_Node_Str"");
      for (      String columnQualifier : columnQualifiers) {
        hbaseBoltConfig.addColumn(columnFamily,columnQualifier);
      }
      hbaseBoltConfig.setBatch(Boolean.valueOf(config.getString(""String_Node_Str"").toString()));
      BoltDeclarer declarer=builder.setBolt(name,new HBaseBolt(hbaseBoltConfig),config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str""));
      if (Grouping._Fields.CUSTOM_OBJECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.customGrouping(component,""String_Node_Str"",new HBaseStreamPartitioner(hbaseBoltConfig.getTableName(),0,Integer.parseInt(conf.get(""String_Node_Str"").toString())));
      }
 else       if (Grouping._Fields.DIRECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.fieldsGrouping(component,""String_Node_Str"",new Fields(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  return true;
}","public boolean initializeHbaseBolt(String name,String shuffleType){
  try {
    String tableName=config.getString(""String_Node_Str"").toString();
    TupleTableConfig hbaseBoltConfig=new TupleTableConfig(tableName,config.getString(""String_Node_Str"").toString(),config.getString(""String_Node_Str"").toString());
    String allColumnFamiliesColumnQualifiers=config.getString(""String_Node_Str"").toString();
    String[] tokenizedColumnFamiliesWithColumnQualifiers=StringUtils.split(allColumnFamiliesColumnQualifiers,""String_Node_Str"");
    for (    String tokenizedColumnFamilyWithColumnQualifiers : tokenizedColumnFamiliesWithColumnQualifiers) {
      String[] cfCqTokens=StringUtils.split(tokenizedColumnFamilyWithColumnQualifiers,""String_Node_Str"");
      String columnFamily=cfCqTokens[0];
      String[] columnQualifiers=StringUtils.split(cfCqTokens[1],""String_Node_Str"");
      for (      String columnQualifier : columnQualifiers) {
        hbaseBoltConfig.addColumn(columnFamily,columnQualifier);
      }
      hbaseBoltConfig.setBatch(Boolean.valueOf(config.getString(""String_Node_Str"").toString()));
      HBaseBolt hbase_bolt=new HBaseBolt(hbaseBoltConfig);
      hbase_bolt.setAutoAck(true);
      BoltDeclarer declarer=builder.setBolt(name,hbase_bolt,config.getInt(""String_Node_Str"")).setNumTasks(config.getInt(""String_Node_Str""));
      if (Grouping._Fields.CUSTOM_OBJECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.customGrouping(parserName,""String_Node_Str"",new HBaseStreamPartitioner(hbaseBoltConfig.getTableName(),0,Integer.parseInt(conf.get(""String_Node_Str"").toString())));
      }
 else       if (Grouping._Fields.DIRECT.toString().equalsIgnoreCase(shuffleType)) {
        declarer.fieldsGrouping(parserName,""String_Node_Str"",new Fields(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(0);
  }
  return true;
}",0.939817302525524
116977,"/** 
 * Return BroPaser JSON String
 */
public static String getBroJsonString(){
  return broJsonString;
}","/** 
 * Return BroPaser JSON String
 */
public static String getBroJsonString(){
  return BroParserTest.broJsonString;
}",0.9380530973451328
116978,"/** 
 * @throws java.lang.Exception
 */
public static void setUpBeforeClass() throws Exception {
  setBroJsonString(""String_Node_Str"");
}","/** 
 * @throws java.lang.Exception
 */
public static void setUpBeforeClass() throws Exception {
}",0.8340425531914893
116979,"/** 
 * @throws java.lang.Exception
 */
public void setUp() throws Exception {
  assertNotNull(getBroJsonString());
  BroParserTest.setBroParser(new BasicBroParser());
}","/** 
 * @throws java.lang.Exception
 */
public void setUp() throws Exception {
  setBroJsonString(""String_Node_Str"");
  assertNotNull(getBroJsonString());
  BroParserTest.setBroParser(new BasicBroParser());
}",0.896551724137931
116980,"/** 
 * @throws ParseException Tests for Parse Method Parses Static json Stirng and checks if any spl chars are present in parsed string.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testParse() throws ParseException {
  BasicBroParser broparser=new BasicBroParser();
  JSONObject cleanJson=broparser.parse(getBroJsonString().getBytes());
  System.out.println(cleanJson);
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  JSONParser parser=new JSONParser();
  Map json=(Map)cleanJson;
  Map output=new HashMap();
  Iterator iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String key=(String)entry.getKey();
    Matcher m=p.matcher(key);
    boolean b=m.find();
    assertFalse(b);
  }
}","/** 
 * @throws ParseException Tests for Parse Method Parses Static json String and checks if any spl chars are present in parsed string.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testParse() throws ParseException {
  BasicBroParser broparser=new BasicBroParser();
  assertNotNull(getBroJsonString());
  JSONObject cleanJson=broparser.parse(getBroJsonString().getBytes());
  assertNotNull(cleanJson);
  System.out.println(cleanJson);
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  JSONParser parser=new JSONParser();
  Map json=(Map)cleanJson;
  Map output=new HashMap();
  Iterator iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String key=(String)entry.getKey();
    Matcher m=p.matcher(key);
    boolean b=m.find();
    assertFalse(b);
  }
}",0.9585087191822008
116981,"/** 
 * Return BroPaser JSON String
 */
public static String getBroJsonString(){
  return broJsonString;
}","/** 
 * Return BroPaser JSON String
 */
public static String getBroJsonString(){
  return BroParserTest.broJsonString;
}",0.9380530973451328
116982,"/** 
 * @throws java.lang.Exception
 */
public static void setUpBeforeClass() throws Exception {
  setBroJsonString(""String_Node_Str"");
}","/** 
 * @throws java.lang.Exception
 */
public static void setUpBeforeClass() throws Exception {
}",0.8340425531914893
116983,"/** 
 * @throws java.lang.Exception
 */
public void setUp() throws Exception {
  assertNotNull(getBroJsonString());
  BroParserTest.setBroParser(new BasicBroParser());
}","/** 
 * @throws java.lang.Exception
 */
public void setUp() throws Exception {
  setBroJsonString(""String_Node_Str"");
  assertNotNull(getBroJsonString());
  BroParserTest.setBroParser(new BasicBroParser());
}",0.896551724137931
116984,"/** 
 * @throws ParseException Tests for Parse Method Parses Static json Stirng and checks if any spl chars are present in parsed string.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testParse() throws ParseException {
  BasicBroParser broparser=new BasicBroParser();
  JSONObject cleanJson=broparser.parse(getBroJsonString().getBytes());
  System.out.println(cleanJson);
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  JSONParser parser=new JSONParser();
  Map json=(Map)cleanJson;
  Map output=new HashMap();
  Iterator iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String key=(String)entry.getKey();
    Matcher m=p.matcher(key);
    boolean b=m.find();
    assertFalse(b);
  }
}","/** 
 * @throws ParseException Tests for Parse Method Parses Static json String and checks if any spl chars are present in parsed string.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void testParse() throws ParseException {
  BasicBroParser broparser=new BasicBroParser();
  assertNotNull(getBroJsonString());
  JSONObject cleanJson=broparser.parse(getBroJsonString().getBytes());
  assertNotNull(cleanJson);
  System.out.println(cleanJson);
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  JSONParser parser=new JSONParser();
  Map json=(Map)cleanJson;
  Map output=new HashMap();
  Iterator iter=json.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    String key=(String)entry.getKey();
    Matcher m=p.matcher(key);
    boolean b=m.find();
    assertFalse(b);
  }
}",0.9585087191822008
116985,"@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  GoNativeApplication application=(GoNativeApplication)getApplication();
  setScreenOrientationPreference();
  if (appConfig.keepScreenOn) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
  this.hideWebviewAlpha=appConfig.hideWebviewAlpha;
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    boolean isFromLauncher=getIntent().hasCategory(Intent.CATEGORY_LAUNCHER);
    boolean isFromRecents=(getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0;
    boolean noSplash=getIntent().getBooleanExtra(""String_Node_Str"",false);
    if (!noSplash && isFromLauncher && !isFromRecents) {
      showSplashScreen(appConfig.showSplashMaxTime,appConfig.showSplashForceTime);
    }
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    if (!cachePath.mkdirs()) {
      Log.v(TAG,""String_Node_Str"" + cachePath.toString() + ""String_Node_Str"");
    }
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    if (databasePath.mkdirs()) {
      Log.v(TAG,""String_Node_Str"" + databasePath.toString() + ""String_Node_Str"");
    }
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.registerEvent();
    this.registrationManager=application.getRegistrationManager();
  }
  this.loginManager=application.getLoginManager();
  application.getWebViewPool().init(this);
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=findViewById(R.id.progress);
  this.fullScreenLayout=findViewById(R.id.fullscreen);
  swipeRefresh=findViewById(R.id.swipe_refresh);
  swipeRefresh.setEnabled(appConfig.pullToRefresh);
  swipeRefresh.setOnRefreshListener(this);
  swipeRefresh.setCanChildScrollUpCallback(new MySwipeRefreshLayout.CanChildScrollUpCallback(){
    @Override public boolean canSwipeRefreshChildScrollUp(){
      return mWebview.getScrollY() > 0;
    }
  }
);
  if (appConfig.pullToRefreshColor != null) {
    swipeRefresh.setColorSchemeColors(appConfig.pullToRefreshColor);
  }
  this.webviewOverlay=findViewById(R.id.webviewOverlay);
  this.mWebview=findViewById(R.id.webview);
  setupWebview(this.mWebview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner profileSpinner=findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,profileSpinner);
    Spinner segmentedSpinner=findViewById(R.id.segmented_control);
    new SegmentedController(this,segmentedSpinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  this.postLoadJavascriptForRefresh=this.postLoadJavascript;
  this.previousWebviewStates=new Stack<>();
  ViewPager pager=findViewById(R.id.view_pager);
  this.slidingTabStrip=findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  if (!appConfig.showActionBar && getSupportActionBar() != null) {
    getSupportActionBar().hide();
  }
  this.actionManager=new ActionManager(this);
  Intent intent=getIntent();
  String url=null;
  String targetUrl=intent.getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (Intent.ACTION_VIEW.equals(intent.getAction())) {
    Uri uri=intent.getData();
    if (uri != null && (uri.getScheme().endsWith(""String_Node_Str"") || uri.getScheme().endsWith(""String_Node_Str""))) {
      Uri.Builder builder=uri.buildUpon();
      if (uri.getScheme().endsWith(""String_Node_Str"")) {
        builder.scheme(""String_Node_Str"");
      }
 else       if (uri.getScheme().endsWith(""String_Node_Str"")) {
        builder.scheme(""String_Node_Str"");
      }
      url=builder.build().toString();
    }
 else {
      url=intent.getDataString();
    }
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=intent.getStringExtra(""String_Node_Str"");
  if (url != null) {
    if (LeanWebView.isCrosswalk() && appConfig.usesGeolocation) {
      final String urlLoadAfterLocation=url;
      this.getRuntimeGeolocationPermission(new GeolocationPermissionCallback(){
        @Override public void onResult(        boolean granted){
          mWebview.loadUrl(urlLoadAfterLocation);
        }
      }
);
    }
 else {
      this.mWebview.loadUrl(url);
    }
  }
 else   if (intent.getBooleanExtra(EXTRA_WEBVIEW_WINDOW_OPEN,false)) {
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.facebookEnabled) {
    AppLinkData.fetchDeferredAppLinkData(this,new AppLinkData.CompletionHandler(){
      @Override public void onDeferredAppLinkDataFetched(      AppLinkData appLinkData){
        if (appLinkData == null)         return;
        Uri uri=appLinkData.getTargetUri();
        if (uri == null)         return;
        String url;
        if (uri.getScheme().endsWith(""String_Node_Str"") || uri.getScheme().endsWith(""String_Node_Str"")) {
          Uri.Builder builder=uri.buildUpon();
          if (uri.getScheme().endsWith(""String_Node_Str"")) {
            builder.scheme(""String_Node_Str"");
          }
 else           if (uri.getScheme().endsWith(""String_Node_Str"")) {
            builder.scheme(""String_Node_Str"");
          }
          url=builder.build().toString();
        }
 else {
          url=uri.toString();
        }
        if (url != null) {
          final String finalUrl=url;
          new Handler(MainActivity.this.getMainLooper()).post(new Runnable(){
            @Override public void run(){
              mWebview.loadUrl(finalUrl);
            }
          }
);
        }
      }
    }
);
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.addDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      this.loginManager.addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || appConfig.showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
  LocalBroadcastManager.getInstance(this).registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (AppConfig.PROCESSED_NAVIGATION_TITLES.equals(intent.getAction())) {
        String url=mWebview.getUrl();
        if (url == null)         return;
        String title=titleForUrl(mWebview.getUrl());
        if (title == null)         return;
        setTitle(title);
      }
    }
  }
,new IntentFilter(AppConfig.PROCESSED_NAVIGATION_TITLES));
}","@Override protected void onCreate(Bundle savedInstanceState){
  AppConfig appConfig=AppConfig.getInstance(this);
  GoNativeApplication application=(GoNativeApplication)getApplication();
  setScreenOrientationPreference();
  if (appConfig.keepScreenOn) {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
  this.hideWebviewAlpha=appConfig.hideWebviewAlpha;
  super.onCreate(savedInstanceState);
  isRoot=getIntent().getBooleanExtra(""String_Node_Str"",true);
  parentUrlLevel=getIntent().getIntExtra(""String_Node_Str"",-1);
  if (isRoot) {
    boolean isFromLauncher=getIntent().hasCategory(Intent.CATEGORY_LAUNCHER);
    boolean isFromRecents=(getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0;
    boolean noSplash=getIntent().getBooleanExtra(""String_Node_Str"",false);
    if (!noSplash && isFromLauncher && !isFromRecents) {
      showSplashScreen(appConfig.showSplashMaxTime,appConfig.showSplashForceTime);
    }
    File cachePath=new File(getCacheDir(),webviewCacheSubdir);
    if (!cachePath.mkdirs()) {
      Log.v(TAG,""String_Node_Str"" + cachePath.toString() + ""String_Node_Str"");
    }
    File databasePath=new File(getCacheDir(),webviewDatabaseSubdir);
    if (databasePath.mkdirs()) {
      Log.v(TAG,""String_Node_Str"" + databasePath.toString() + ""String_Node_Str"");
    }
    UrlInspector.getInstance().init(this);
    ConfigUpdater configUpdater=new ConfigUpdater(this);
    configUpdater.registerEvent();
    this.registrationManager=application.getRegistrationManager();
  }
  this.loginManager=application.getLoginManager();
  application.getWebViewPool().init(this);
  cm=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu)   setContentView(R.layout.activity_gonative);
 else   setContentView(R.layout.activity_gonative_nonav);
  mProgress=findViewById(R.id.progress);
  this.fullScreenLayout=findViewById(R.id.fullscreen);
  swipeRefresh=findViewById(R.id.swipe_refresh);
  swipeRefresh.setEnabled(appConfig.pullToRefresh);
  swipeRefresh.setOnRefreshListener(this);
  swipeRefresh.setCanChildScrollUpCallback(new MySwipeRefreshLayout.CanChildScrollUpCallback(){
    @Override public boolean canSwipeRefreshChildScrollUp(){
      return mWebview.getScrollY() > 0;
    }
  }
);
  if (appConfig.pullToRefreshColor != null) {
    swipeRefresh.setColorSchemeColors(appConfig.pullToRefreshColor);
  }
  this.webviewOverlay=findViewById(R.id.webviewOverlay);
  this.mWebview=findViewById(R.id.webview);
  setupWebview(this.mWebview);
  if (isRoot && AppConfig.getInstance(this).showNavigationMenu) {
    Spinner profileSpinner=findViewById(R.id.profile_picker);
    profilePicker=new ProfilePicker(this,profileSpinner);
    Spinner segmentedSpinner=findViewById(R.id.segmented_control);
    new SegmentedController(this,segmentedSpinner);
  }
  CookieSyncManager.createInstance(getApplicationContext());
  CookieHandler.setDefault(new WebkitCookieManagerProxy());
  this.postLoadJavascript=getIntent().getStringExtra(""String_Node_Str"");
  this.postLoadJavascriptForRefresh=this.postLoadJavascript;
  this.previousWebviewStates=new Stack<>();
  ViewPager pager=findViewById(R.id.view_pager);
  this.slidingTabStrip=findViewById(R.id.tabs);
  this.tabManager=new TabManager(this,pager);
  pager.setAdapter(this.tabManager);
  this.slidingTabStrip.setViewPager(pager);
  this.slidingTabStrip.setTabClickListener(this.tabManager);
  if (appConfig.tabBarBackgroundColor != null)   this.slidingTabStrip.setBackgroundColor(appConfig.tabBarBackgroundColor);
  if (appConfig.tabBarTextColor != null)   this.slidingTabStrip.setTextColor(appConfig.tabBarTextColor);
  if (appConfig.tabBarIndicatorColor != null)   this.slidingTabStrip.setIndicatorColor(appConfig.tabBarIndicatorColor);
  hideTabs();
  if (!appConfig.showActionBar && getSupportActionBar() != null) {
    getSupportActionBar().hide();
  }
  this.actionManager=new ActionManager(this);
  Intent intent=getIntent();
  String url=null;
  String targetUrl=intent.getStringExtra(INTENT_TARGET_URL);
  if (targetUrl != null && !targetUrl.isEmpty()) {
    url=targetUrl;
  }
  if (Intent.ACTION_VIEW.equals(intent.getAction())) {
    Uri uri=intent.getData();
    if (uri != null && (uri.getScheme().endsWith(""String_Node_Str"") || uri.getScheme().endsWith(""String_Node_Str""))) {
      Uri.Builder builder=uri.buildUpon();
      if (uri.getScheme().endsWith(""String_Node_Str"")) {
        builder.scheme(""String_Node_Str"");
      }
 else       if (uri.getScheme().endsWith(""String_Node_Str"")) {
        builder.scheme(""String_Node_Str"");
      }
      url=builder.build().toString();
    }
 else {
      url=intent.getDataString();
    }
  }
  if (url == null && savedInstanceState != null)   url=savedInstanceState.getString(""String_Node_Str"");
  if (url == null && isRoot)   url=appConfig.initialUrl;
  if (url == null)   url=intent.getStringExtra(""String_Node_Str"");
  if (url != null) {
    if (LeanWebView.isCrosswalk() && appConfig.usesGeolocation) {
      final String urlLoadAfterLocation=url;
      this.getRuntimeGeolocationPermission(new GeolocationPermissionCallback(){
        @Override public void onResult(        boolean granted){
          mWebview.loadUrl(urlLoadAfterLocation);
        }
      }
);
    }
 else {
      this.mWebview.loadUrl(url);
    }
  }
 else   if (intent.getBooleanExtra(EXTRA_WEBVIEW_WINDOW_OPEN,false)) {
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  if (isRoot && appConfig.facebookEnabled) {
    AppLinkData.fetchDeferredAppLinkData(this,new AppLinkData.CompletionHandler(){
      @Override public void onDeferredAppLinkDataFetched(      AppLinkData appLinkData){
        if (appLinkData == null)         return;
        Uri uri=appLinkData.getTargetUri();
        if (uri == null)         return;
        String url;
        if (uri.getScheme().endsWith(""String_Node_Str"") || uri.getScheme().endsWith(""String_Node_Str"")) {
          Uri.Builder builder=uri.buildUpon();
          if (uri.getScheme().endsWith(""String_Node_Str"")) {
            builder.scheme(""String_Node_Str"");
          }
 else           if (uri.getScheme().endsWith(""String_Node_Str"")) {
            builder.scheme(""String_Node_Str"");
          }
          url=builder.build().toString();
        }
 else {
          url=uri.toString();
        }
        if (url != null) {
          final String finalUrl=url;
          new Handler(MainActivity.this.getMainLooper()).post(new Runnable(){
            @Override public void run(){
              mWebview.loadUrl(finalUrl);
            }
          }
);
        }
      }
    }
);
  }
  if (isRoot && appConfig.showNavigationMenu) {
    mDrawerLayout=findViewById(R.id.drawer_layout);
    mDrawerView=findViewById(R.id.left_drawer);
    mDrawerList=findViewById(R.id.drawer_list);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        invalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.addDrawerListener(mDrawerToggle);
    setupMenu();
    if (appConfig.loginDetectionUrl != null) {
      this.loginManager.addObserver(this);
    }
  }
  if (getSupportActionBar() != null) {
    if (!isRoot || appConfig.showNavigationMenu) {
      getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }
    showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
  }
  if (mDrawerView != null && AppConfig.getInstance(this).sidebarBackgroundColor != null) {
    mDrawerView.setBackgroundColor(AppConfig.getInstance(this).sidebarBackgroundColor);
  }
  this.navigationTitlesChangedReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (AppConfig.PROCESSED_NAVIGATION_TITLES.equals(intent.getAction())) {
        String url=mWebview.getUrl();
        if (url == null)         return;
        String title=titleForUrl(mWebview.getUrl());
        if (title == null)         return;
        setTitle(title);
      }
    }
  }
;
  LocalBroadcastManager.getInstance(this).registerReceiver(this.navigationTitlesChangedReceiver,new IntentFilter(AppConfig.PROCESSED_NAVIGATION_TITLES));
}",0.9895353704478862
116986,"@Override protected void onDestroy(){
  super.onDestroy();
  if (this.mWebview != null) {
    this.mWebview.stopLoading();
    ViewGroup parent=(ViewGroup)this.mWebview.getParent();
    if (parent != null) {
      parent.removeView((View)this.mWebview);
    }
    if (!this.isPoolWebview)     this.mWebview.destroy();
  }
  this.loginManager.deleteObserver(this);
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (this.mWebview != null) {
    this.mWebview.stopLoading();
    ViewGroup parent=(ViewGroup)this.mWebview.getParent();
    if (parent != null) {
      parent.removeView((View)this.mWebview);
    }
    if (!this.isPoolWebview)     this.mWebview.destroy();
  }
  this.loginManager.deleteObserver(this);
  if (this.navigationTitlesChangedReceiver != null) {
    LocalBroadcastManager.getInstance(this).unregisterReceiver(this.navigationTitlesChangedReceiver);
  }
}",0.8202247191011236
116987,"@SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") public static void setupWebview(GoNativeWebviewInterface webview,Context context){
  if (!(webview instanceof LeanWebView)) {
    Log.e(TAG,""String_Node_Str"" + webview.getClass().getName());
    return;
  }
  AppConfig appConfig=AppConfig.getInstance(context);
  LeanWebView wv=(LeanWebView)webview;
  WebSettings webSettings=wv.getSettings();
  if (AppConfig.getInstance(context).allowZoom) {
    webSettings.setBuiltInZoomControls(true);
  }
 else {
    webSettings.setBuiltInZoomControls(false);
  }
  webSettings.setDisplayZoomControls(false);
  webSettings.setLoadWithOverviewMode(true);
  webSettings.setUseWideViewPort(true);
  webSettings.setJavaScriptEnabled(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE);
    CookieManager.getInstance().setAcceptThirdPartyCookies(wv,true);
  }
  webSettings.setDomStorageEnabled(true);
  File cachePath=new File(context.getCacheDir(),MainActivity.webviewCacheSubdir);
  webSettings.setAppCachePath(cachePath.getAbsolutePath());
  webSettings.setAppCacheEnabled(true);
  webSettings.setDatabaseEnabled(true);
  webSettings.setSaveFormData(false);
  webSettings.setSavePassword(false);
  webSettings.setUserAgentString(appConfig.userAgent);
  webSettings.setSupportMultipleWindows(appConfig.enableWindowOpen);
  webSettings.setGeolocationEnabled(appConfig.usesGeolocation);
}","@SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") public static void setupWebview(GoNativeWebviewInterface webview,Context context){
  if (!(webview instanceof LeanWebView)) {
    Log.e(TAG,""String_Node_Str"" + webview.getClass().getName());
    return;
  }
  AppConfig appConfig=AppConfig.getInstance(context);
  LeanWebView wv=(LeanWebView)webview;
  WebSettings webSettings=wv.getSettings();
  if (AppConfig.getInstance(context).allowZoom) {
    webSettings.setBuiltInZoomControls(true);
  }
 else {
    webSettings.setBuiltInZoomControls(false);
  }
  webSettings.setDisplayZoomControls(false);
  webSettings.setLoadWithOverviewMode(true);
  webSettings.setUseWideViewPort(true);
  webSettings.setJavaScriptEnabled(true);
  webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
  webSettings.setMinimumFontSize(1);
  webSettings.setMinimumLogicalFontSize(1);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE);
    CookieManager.getInstance().setAcceptThirdPartyCookies(wv,true);
  }
  webSettings.setDomStorageEnabled(true);
  File cachePath=new File(context.getCacheDir(),MainActivity.webviewCacheSubdir);
  webSettings.setAppCachePath(cachePath.getAbsolutePath());
  webSettings.setAppCacheEnabled(true);
  webSettings.setDatabaseEnabled(true);
  webSettings.setSaveFormData(false);
  webSettings.setSavePassword(false);
  webSettings.setUserAgentString(appConfig.userAgent);
  webSettings.setSupportMultipleWindows(appConfig.enableWindowOpen);
  webSettings.setGeolocationEnabled(appConfig.usesGeolocation);
}",0.9746161078031964
116988,"public WebResourceResponse interceptHtml(GoNativeWebviewInterface view,String url){
  AppConfig appConfig=AppConfig.getInstance(context);
  if (!appConfig.interceptHtml)   return null;
  if (!hasIntercepted) {
    interceptUrl=url;
    hasIntercepted=true;
  }
  if (!urlMatches(interceptUrl,url))   return null;
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    URL parsedUrl=new URL(url);
    String protocol=parsedUrl.getProtocol();
    if (!protocol.equalsIgnoreCase(""String_Node_Str"") && !protocol.equalsIgnoreCase(""String_Node_Str""))     return null;
    HttpURLConnection connection;
    boolean wasRedirected=false;
    int numRedirects=0;
    do {
      connection=(HttpURLConnection)parsedUrl.openConnection();
      connection.setInstanceFollowRedirects(false);
      String customUserAgent=appConfig.userAgentForUrl(parsedUrl.toString());
      if (customUserAgent != null) {
        connection.setRequestProperty(""String_Node_Str"",customUserAgent);
      }
 else {
        connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
      }
      connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      connection.connect();
      int responseCode=connection.getResponseCode();
      if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {
        wasRedirected=true;
        numRedirects++;
        parsedUrl=new URL(parsedUrl,connection.getHeaderField(""String_Node_Str""));
        if (urlNavigation != null && urlNavigation.shouldOverrideUrlLoadingNoIntercept(view,parsedUrl.toString(),true)) {
          urlNavigation.showWebViewImmediately();
          connection.disconnect();
          return null;
        }
      }
 else {
        wasRedirected=false;
      }
    }
 while (wasRedirected && numRedirects < 10);
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      try {
        is=new BufferedInputStream(connection.getInputStream());
      }
 catch (      IOException e) {
        is=new BufferedInputStream(connection.getErrorStream());
      }
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null) {
      try {
        is=new BufferedInputStream(connection.getInputStream());
      }
 catch (      IOException e) {
        is=new BufferedInputStream(connection.getErrorStream());
      }
      if (is == null)       return null;
    }
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=UrlNavigation.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        if (appConfig.zoomableForceViewport) {
          builder.append(String.format(""String_Node_Str"",appConfig.forceViewportWidth));
        }
 else {
          double webViewWidth=view.getWidth() / context.getResources().getDisplayMetrics().density;
          double viewportWidth=appConfig.forceViewportWidth;
          double scale=webViewWidth / viewportWidth;
          builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
        }
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return new WebResourceResponse(""String_Node_Str"",""String_Node_Str"",new ByteArrayInputStream(newString.getBytes(""String_Node_Str"")));
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}","public WebResourceResponse interceptHtml(GoNativeWebviewInterface view,String url){
  AppConfig appConfig=AppConfig.getInstance(context);
  if (!appConfig.interceptHtml)   return null;
  if (!hasIntercepted) {
    interceptUrl=url;
    hasIntercepted=true;
  }
  if (!urlMatches(interceptUrl,url))   return null;
  InputStream is=null;
  ByteArrayOutputStream baos=null;
  try {
    URL parsedUrl=new URL(url);
    String protocol=parsedUrl.getProtocol();
    if (!protocol.equalsIgnoreCase(""String_Node_Str"") && !protocol.equalsIgnoreCase(""String_Node_Str""))     return null;
    HttpURLConnection connection=(HttpURLConnection)parsedUrl.openConnection();
    connection.setInstanceFollowRedirects(false);
    String customUserAgent=appConfig.userAgentForUrl(parsedUrl.toString());
    if (customUserAgent != null) {
      connection.setRequestProperty(""String_Node_Str"",customUserAgent);
    }
 else {
      connection.setRequestProperty(""String_Node_Str"",appConfig.userAgent);
    }
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.connect();
    int responseCode=connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER || responseCode == 307) {
      String location=connection.getHeaderField(""String_Node_Str"");
      if (location != null) {
        String webpage=""String_Node_Str"" + LeanUtils.jsWrapString(location) + ""String_Node_Str"";
        return new WebResourceResponse(""String_Node_Str"",""String_Node_Str"",new ByteArrayInputStream(webpage.getBytes(""String_Node_Str"")));
      }
    }
    String mimetype=connection.getContentType();
    if (mimetype == null) {
      try {
        is=new BufferedInputStream(connection.getInputStream());
      }
 catch (      IOException e) {
        is=new BufferedInputStream(connection.getErrorStream());
      }
      mimetype=HttpURLConnection.guessContentTypeFromStream(is);
    }
    if (mimetype == null || !mimetype.startsWith(""String_Node_Str""))     return null;
    String encoding=connection.getContentEncoding();
    if (encoding == null)     encoding=""String_Node_Str"";
    if (is == null) {
      try {
        is=new BufferedInputStream(connection.getInputStream());
      }
 catch (      IOException e) {
        is=new BufferedInputStream(connection.getErrorStream());
      }
      if (is == null)       return null;
    }
    int initialLength=connection.getContentLength();
    if (initialLength < 0)     initialLength=UrlNavigation.DEFAULT_HTML_SIZE;
    baos=new ByteArrayOutputStream(initialLength);
    IOUtils.copy(is,baos);
    String origString;
    try {
      origString=baos.toString(encoding);
    }
 catch (    UnsupportedEncodingException e) {
      origString=baos.toString(""String_Node_Str"");
    }
    String newString=null;
    int insertPoint=origString.indexOf(""String_Node_Str"");
    if (insertPoint >= 0) {
      StringBuilder builder=new StringBuilder(initialLength);
      builder.append(origString.substring(0,insertPoint));
      if (appConfig.customCSS != null) {
        builder.append(""String_Node_Str"");
        builder.append(appConfig.customCSS);
        builder.append(""String_Node_Str"");
      }
      if (appConfig.stringViewport != null) {
        builder.append(""String_Node_Str"");
        builder.append(TextUtils.htmlEncode(appConfig.stringViewport));
        builder.append(""String_Node_Str"");
      }
      if (!Double.isNaN(appConfig.forceViewportWidth)) {
        if (appConfig.zoomableForceViewport) {
          builder.append(String.format(""String_Node_Str"",appConfig.forceViewportWidth));
        }
 else {
          double webViewWidth=view.getWidth() / context.getResources().getDisplayMetrics().density;
          double viewportWidth=appConfig.forceViewportWidth;
          double scale=webViewWidth / viewportWidth;
          builder.append(String.format(""String_Node_Str"",viewportWidth,scale,scale,scale));
        }
      }
      builder.append(origString.substring(insertPoint));
      newString=builder.toString();
    }
 else {
      Log.d(TAG,""String_Node_Str"");
      newString=origString;
    }
    return new WebResourceResponse(""String_Node_Str"",""String_Node_Str"",new ByteArrayInputStream(newString.getBytes(""String_Node_Str"")));
  }
 catch (  Exception e) {
    Log.e(TAG,e.toString(),e);
    return null;
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(baos);
  }
}",0.8918622504935293
116989,"public static void setupWebviewGlobals(Context context){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(context);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      XWalkPreferences.setValue(XWalkPreferences.REMOTE_DEBUGGING,true);
    }
  }
}","public static void setupWebviewGlobals(Context context){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Map<String,Object> installation=Installation.getInfo(context);
    String dist=(String)installation.get(""String_Node_Str"");
    if (dist != null && (dist.equals(""String_Node_Str"") || dist.equals(""String_Node_Str""))) {
      XWalkPreferences.setValue(XWalkPreferences.REMOTE_DEBUGGING,true);
    }
  }
  XWalkPreferences.setValue(XWalkPreferences.ANIMATABLE_XWALK_VIEW,true);
}",0.9197396963123644
116990,"@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  UrlInspector.getInstance().inspectUrl(url);
  Uri uri=Uri.parse(url);
  if (AppConfig.getInstance(mainActivity).loginDetectionUrl != null && isInternalUri(uri)) {
    mainActivity.updateMenu();
  }
  super.onPageStarted(view,url,favicon);
  mainActivity.startCheckingReadyStatus();
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.STARTED_LOADING_MESSAGE));
}","@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  UrlInspector.getInstance().inspectUrl(url);
  Uri uri=Uri.parse(url);
  if (AppConfig.getInstance(mainActivity).loginDetectionUrl != null && isInternalUri(uri)) {
    mainActivity.updateMenu();
  }
  super.onPageStarted(view,url,favicon);
  mainActivity.startCheckingReadyStatus();
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.STARTED_LOADING_MESSAGE));
}",0.9779179810725552
116991,"@Override public void onPageFinished(WebView view,String url){
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  UrlInspector.getInstance().inspectUrl(url);
  super.onPageFinished(view,url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.analyticsExec);
  }
  mainActivity.checkNavigationForPage(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
}","@Override public void onPageFinished(WebView view,String url){
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showWebview();
    }
  }
);
  UrlInspector.getInstance().inspectUrl(url);
  super.onPageFinished(view,url);
  Uri uri=Uri.parse(url);
  if (isInternalUri(uri)) {
    CookieSyncManager.getInstance().sync();
  }
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.loginDetectionUrl != null) {
    if (mVisitedLoginOrSignup) {
      mainActivity.updateMenu();
    }
    mVisitedLoginOrSignup=LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl) || LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl);
  }
  if (this.dynamicUpdateExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.dynamicUpdateExec);
  }
  if (this.profilePickerExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.profilePickerExec);
  }
  if (this.analyticsExec != null) {
    LeanUtils.runJavascriptOnWebView(view,this.analyticsExec);
  }
  mainActivity.checkNavigationForPage(url);
  if (mainActivity.postLoadJavascript != null) {
    String js=mainActivity.postLoadJavascript;
    mainActivity.postLoadJavascript=null;
    mainActivity.runJavascript(js);
  }
  LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
}",0.9921845924823224
116992,"public boolean shouldOverrideUrlLoading(WebView view,String url,boolean isReload){
  boolean shouldOverride=shouldOverrideUrlLoadingNoIntercept(view,url);
  if (shouldOverride)   return shouldOverride;
  if (AppConfig.getInstance(mainActivity).interceptHtml) {
    try {
      URL parsedUrl=new URL(url);
      if (parsedUrl.getProtocol().equals(""String_Node_Str"") || parsedUrl.getProtocol().equals(""String_Node_Str"")) {
        mainActivity.setProgress(0);
        new WebviewInterceptTask(this.mainActivity,this).execute(new WebviewInterceptTask.WebviewInterceptParams(view,parsedUrl,isReload));
        mainActivity.hideWebview();
        return true;
      }
    }
 catch (    Exception e) {
      Log.e(TAG,e.getMessage(),e);
    }
  }
  mainActivity.hideWebview();
  return false;
}","public boolean shouldOverrideUrlLoading(WebView view,String url,boolean isReload){
  if (url == null)   return false;
  boolean shouldOverride=shouldOverrideUrlLoadingNoIntercept(view,url);
  if (shouldOverride)   return true;
  if (AppConfig.getInstance(mainActivity).interceptHtml) {
    try {
      URL parsedUrl=new URL(url);
      if (parsedUrl.getProtocol().equals(""String_Node_Str"") || parsedUrl.getProtocol().equals(""String_Node_Str"")) {
        mainActivity.setProgress(0);
        new WebviewInterceptTask(this.mainActivity,this).execute(new WebviewInterceptTask.WebviewInterceptParams(view,parsedUrl,isReload));
        mainActivity.hideWebview();
        return true;
      }
    }
 catch (    Exception e) {
      Log.e(TAG,e.getMessage(),e);
    }
  }
  mainActivity.hideWebview();
  return false;
}",0.9681449094316052
116993,"public LeanWebviewClient(MainActivity activity){
  super();
  this.mainActivity=activity;
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.profilePickerJS != null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(LeanUtils.jsWrapString(appConfig.profilePickerJS));
    sb.append(""String_Node_Str"");
    this.profilePickerExec=sb.toString();
  }
  if (appConfig.analytics) {
    String distribution=(String)Installation.getInfo(mainActivity).get(""String_Node_Str"");
    int idsite;
    if (distribution != null && (distribution.equals(""String_Node_Str"") || distribution.equals(""String_Node_Str"")))     idsite=appConfig.idsite_prod;
 else     idsite=appConfig.idsite_test;
    this.analyticsExec=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",idsite);
  }
  if (appConfig.updateConfigJS != null) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    sb.append(LeanUtils.jsWrapString(appConfig.updateConfigJS));
    sb.append(""String_Node_Str"");
    this.dynamicUpdateExec=sb.toString();
  }
}","public LeanWebviewClient(MainActivity activity){
  super();
  this.mainActivity=activity;
  AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (appConfig.profilePickerJS != null) {
    this.profilePickerExec=""String_Node_Str"" + LeanUtils.jsWrapString(appConfig.profilePickerJS) + ""String_Node_Str"";
  }
  if (appConfig.analytics) {
    String distribution=(String)Installation.getInfo(mainActivity).get(""String_Node_Str"");
    int idsite;
    if (distribution != null && (distribution.equals(""String_Node_Str"") || distribution.equals(""String_Node_Str"")))     idsite=appConfig.idsite_prod;
 else     idsite=appConfig.idsite_test;
    this.analyticsExec=String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",idsite);
  }
  if (appConfig.updateConfigJS != null) {
    this.dynamicUpdateExec=""String_Node_Str"" + LeanUtils.jsWrapString(appConfig.updateConfigJS) + ""String_Node_Str"";
  }
}",0.7580786026200873
116994,"public boolean shouldOverrideUrlLoadingNoIntercept(WebView view,final String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  final AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
    }
  }
);
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(this.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,view.getUrl())) {
    this.mainActivity.switchToWebview(poolWebview,true);
    this.mainActivity.checkNavigationForPage(url);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}","public boolean shouldOverrideUrlLoadingNoIntercept(final WebView view,final String url){
  if (url == null)   return false;
  boolean checkLoginSignup=((LeanWebView)view).checkLoginSignup();
  ((LeanWebView)view).setCheckLoginSignup(true);
  Uri uri=Uri.parse(url);
  final AppConfig appConfig=AppConfig.getInstance(mainActivity);
  if (checkLoginSignup && appConfig.loginUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.loginUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
 else   if (checkLoginSignup && appConfig.signupUrl != null && LeanUtils.urlsMatchOnPath(url,appConfig.signupUrl)) {
    mainActivity.launchWebForm(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  if (!isInternalUri(uri)) {
    Intent intent=new Intent(Intent.ACTION_VIEW,uri);
    try {
      view.getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Log.e(TAG,e.getMessage(),e);
    }
    return true;
  }
  int currentLevel=mainActivity.getUrlLevel();
  int newLevel=mainActivity.urlLevelForUrl(url);
  if (currentLevel >= 0 && newLevel >= 0) {
    if (newLevel > currentLevel) {
      Intent intent=new Intent(mainActivity.getBaseContext(),MainActivity.class);
      intent.putExtra(""String_Node_Str"",false);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",currentLevel);
      intent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.startActivityForResult(intent,MainActivity.REQUEST_WEB_ACTIVITY);
      return true;
    }
 else     if (newLevel < currentLevel && newLevel <= mainActivity.getParentUrlLevel()) {
      Intent returnIntent=new Intent();
      returnIntent.putExtra(""String_Node_Str"",url);
      returnIntent.putExtra(""String_Node_Str"",newLevel);
      returnIntent.putExtra(""String_Node_Str"",mainActivity.postLoadJavascript);
      mainActivity.setResult(Activity.RESULT_OK,returnIntent);
      mainActivity.finish();
      return true;
    }
  }
  if (newLevel >= 0) {
    mainActivity.setUrlLevel(newLevel);
  }
  final String newTitle=mainActivity.titleForUrl(url);
  if (newTitle != null) {
    mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.setTitle(newTitle);
      }
    }
);
  }
  mainActivity.runOnUiThread(new Runnable(){
    @Override public void run(){
      mainActivity.showLogoInActionBar(appConfig.shouldShowNavigationTitleImageForUrl(url));
    }
  }
);
  Pair<LeanWebView,WebViewPoolDisownPolicy> pair=WebViewPool.getInstance().webviewForUrl(url);
  final LeanWebView poolWebview=pair.first;
  WebViewPoolDisownPolicy poolDisownPolicy=pair.second;
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Always) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    WebViewPool.getInstance().disownWebview(poolWebview);
    LocalBroadcastManager.getInstance(mainActivity).sendBroadcast(new Intent(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Never) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (poolWebview != null && poolDisownPolicy == WebViewPoolDisownPolicy.Reload && !LeanUtils.urlsMatchOnPath(url,view.getUrl())) {
    this.mainActivity.runOnUiThread(new Runnable(){
      @Override public void run(){
        mainActivity.switchToWebview(poolWebview,true);
        mainActivity.checkNavigationForPage(url);
      }
    }
);
    return true;
  }
  if (this.mainActivity.isPoolWebview) {
    WebViewPool.getInstance().disownWebview(view);
    this.mainActivity.isPoolWebview=false;
  }
  return false;
}",0.952071697623068
116995,"@Override protected void onDestroy(){
  super.onDestroy();
  if (this.mWebview != null) {
    this.mWebview.stopLoading();
    ViewGroup parent=(ViewGroup)this.mWebview.getParent();
    if (parent != null) {
      parent.removeView(this.mWebview);
    }
    this.mWebview.destroy();
  }
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (this.mWebview != null) {
    this.mWebview.stopLoading();
    ViewGroup parent=(ViewGroup)this.mWebview.getParent();
    if (parent != null) {
      parent.removeView(this.mWebview);
    }
    if (!this.isPoolWebview)     this.mWebview.destroy();
  }
}",0.9520661157024792
116996,"private void resumeLoading(){
  if (this.isMainActivityLoading || this.isLoading)   return;
  if (this.currentLoadingWebview != null && this.currentLoadingUrl != null) {
    this.currentLoadingWebview.loadUrl(this.currentLoadingUrl);
    this.isLoading=true;
    return;
  }
  if (!this.urlsToLoad.isEmpty()) {
    String urlString=this.urlsToLoad.iterator().next();
    this.currentLoadingUrl=urlString;
    LeanWebView webview=new LeanWebView(this.context);
    LeanUtils.setupWebview(webview,this.context);
    WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
    Display display=wm.getDefaultDisplay();
    Point size=new Point();
    display.getSize(size);
    webview.layout(0,0,size.x,size.y);
    webview.setWebViewClient(this.webviewClient);
    this.currentLoadingWebview=webview;
    this.urlsToLoad.remove(urlString);
    this.currentLoadingWebview.loadUrl(urlString);
  }
}","private void resumeLoading(){
  if (this.isMainActivityLoading || this.isLoading)   return;
  if (this.currentLoadingWebview != null && this.currentLoadingUrl != null) {
    context.runOnUiThread(new Runnable(){
      @Override public void run(){
        currentLoadingWebview.loadUrl(currentLoadingUrl);
      }
    }
);
    this.isLoading=true;
    return;
  }
  if (!this.urlsToLoad.isEmpty()) {
    final String urlString=this.urlsToLoad.iterator().next();
    this.currentLoadingUrl=urlString;
    context.runOnUiThread(new Runnable(){
      @Override public void run(){
        LeanWebView webview=new LeanWebView(context);
        currentLoadingWebview=webview;
        urlsToLoad.remove(urlString);
        LeanUtils.setupWebview(webview,context);
        WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
        Display display=wm.getDefaultDisplay();
        Point size=new Point();
        display.getSize(size);
        webview.layout(0,0,size.x,size.y);
        webview.setWebViewClient(webviewClient);
        currentLoadingWebview=webview;
        urlsToLoad.remove(urlString);
        currentLoadingWebview.loadUrl(urlString);
      }
    }
);
  }
}",0.8313651393481342
116997,"public void init(Activity activity){
  if (this.isInitialized)   return;
  this.isInitialized=true;
  this.context=activity;
  this.urlToWebview=new HashMap<String,LeanWebView>();
  this.urlToDisownPolicy=new HashMap<String,WebViewPoolDisownPolicy>();
  this.urlSets=new ArrayList<Set<String>>();
  this.urlsToLoad=new HashSet<String>();
  this.messageReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent == null || intent.getAction() == null)       return;
      if (intent.getAction().equals(LeanWebviewClient.STARTED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=true;
        if (pool.currentLoadingWebview != null) {
          pool.currentLoadingWebview.stopLoading();
          pool.isLoading=false;
        }
      }
 else       if (intent.getAction().equals(LeanWebviewClient.FINISHED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=false;
        pool.resumeLoading();
      }
 else       if (intent.getAction().equals(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE)) {
        processConfig();
      }
    }
  }
;
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.STARTED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE));
  this.webviewClient=new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      WebViewPool pool=WebViewPool.this;
      view.setWebViewClient(null);
      pool.urlToWebview.put(pool.currentLoadingUrl,pool.currentLoadingWebview);
      pool.currentLoadingUrl=null;
      pool.currentLoadingWebview=null;
      pool.isLoading=false;
      pool.resumeLoading();
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      WebViewPool pool=WebViewPool.this;
      if (AppConfig.getInstance(pool.context).interceptHtml) {
        try {
          URL parsedUrl=new URL(url);
          if (parsedUrl.getProtocol().equals(""String_Node_Str"") || parsedUrl.getProtocol().equals(""String_Node_Str"")) {
            new WebviewInterceptTask(pool.context,null).execute(new WebviewInterceptTask.WebviewInterceptParams(view,parsedUrl,true));
            return true;
          }
        }
 catch (        Exception e) {
          Log.e(TAG,e.getMessage(),e);
        }
      }
      return false;
    }
  }
;
  processConfig();
}","public void init(Activity activity){
  if (this.isInitialized)   return;
  this.isInitialized=true;
  this.context=activity;
  this.urlToWebview=new HashMap<String,LeanWebView>();
  this.urlToDisownPolicy=new HashMap<String,WebViewPoolDisownPolicy>();
  this.urlSets=new ArrayList<Set<String>>();
  this.urlsToLoad=new HashSet<String>();
  this.messageReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent == null || intent.getAction() == null)       return;
      if (intent.getAction().equals(LeanWebviewClient.STARTED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=true;
        if (pool.currentLoadingWebview != null) {
          pool.currentLoadingWebview.stopLoading();
          pool.isLoading=false;
        }
      }
 else       if (intent.getAction().equals(LeanWebviewClient.FINISHED_LOADING_MESSAGE)) {
        WebViewPool pool=WebViewPool.this;
        pool.isMainActivityLoading=false;
        pool.resumeLoading();
      }
 else       if (intent.getAction().equals(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE)) {
        processConfig();
      }
    }
  }
;
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.STARTED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(LeanWebviewClient.FINISHED_LOADING_MESSAGE));
  LocalBroadcastManager.getInstance(this.context).registerReceiver(this.messageReceiver,new IntentFilter(AppConfig.PROCESSED_WEBVIEW_POOLS_MESSAGE));
  this.webviewClient=new WebViewClient(){
    @Override public void onPageFinished(    final WebView view,    String url){
      super.onPageFinished(view,url);
      WebViewPool pool=WebViewPool.this;
      context.runOnUiThread(new Runnable(){
        @Override public void run(){
          view.setWebViewClient(null);
        }
      }
);
      pool.urlToWebview.put(pool.currentLoadingUrl,pool.currentLoadingWebview);
      pool.currentLoadingUrl=null;
      pool.currentLoadingWebview=null;
      pool.isLoading=false;
      pool.resumeLoading();
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      WebViewPool pool=WebViewPool.this;
      if (AppConfig.getInstance(pool.context).interceptHtml) {
        try {
          URL parsedUrl=new URL(url);
          if (parsedUrl.getProtocol().equals(""String_Node_Str"") || parsedUrl.getProtocol().equals(""String_Node_Str"")) {
            new WebviewInterceptTask(pool.context,null).execute(new WebviewInterceptTask.WebviewInterceptParams(view,parsedUrl,true));
            return true;
          }
        }
 catch (        Exception e) {
          Log.e(TAG,e.getMessage(),e);
        }
      }
      return false;
    }
  }
;
  processConfig();
}",0.980246913580247
116998,"@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  WebViewPool pool=WebViewPool.this;
  view.setWebViewClient(null);
  pool.urlToWebview.put(pool.currentLoadingUrl,pool.currentLoadingWebview);
  pool.currentLoadingUrl=null;
  pool.currentLoadingWebview=null;
  pool.isLoading=false;
  pool.resumeLoading();
}","@Override public void onPageFinished(final WebView view,String url){
  super.onPageFinished(view,url);
  WebViewPool pool=WebViewPool.this;
  context.runOnUiThread(new Runnable(){
    @Override public void run(){
      view.setWebViewClient(null);
    }
  }
);
  pool.urlToWebview.put(pool.currentLoadingUrl,pool.currentLoadingWebview);
  pool.currentLoadingUrl=null;
  pool.currentLoadingWebview=null;
  pool.isLoading=false;
  pool.resumeLoading();
}",0.8811881188118812
116999,"@Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {
  if ((uri == null) || (responseHeaders == null))   return;
  String url=uri.toString();
  String expiryString=null;
  int sessionExpiry=AppConfig.getInstance(null).forceSessionCookieExpiry;
  for (  String headerKey : responseHeaders.keySet()) {
    if ((headerKey == null) || !(headerKey.equalsIgnoreCase(""String_Node_Str"") || headerKey.equalsIgnoreCase(""String_Node_Str"")))     continue;
    for (    String headerValue : responseHeaders.get(headerKey)) {
      boolean passOriginalHeader=true;
      if (sessionExpiry > 0) {
        List<HttpCookie> cookies=HttpCookie.parse(headerValue);
        for (        HttpCookie cookie : cookies) {
          if (cookie.getMaxAge() < 0 || cookie.getDiscard()) {
            cookie.setMaxAge(sessionExpiry);
            cookie.setDiscard(false);
            if (expiryString == null) {
              Calendar calendar=Calendar.getInstance();
              calendar.add(Calendar.SECOND,sessionExpiry);
              Date expiryDate=calendar.getTime();
              expiryString=String.format(""String_Node_Str"",DateUtils.formatDate(expiryDate),sessionExpiry);
            }
            StringBuilder newHeader=new StringBuilder();
            newHeader.append(cookie.toString());
            newHeader.append(expiryString);
            if (cookie.getPath() != null) {
              newHeader.append(""String_Node_Str"");
              newHeader.append(cookie.getPath());
            }
            if (cookie.getDomain() != null) {
              newHeader.append(""String_Node_Str"");
              newHeader.append(cookie.getDomain());
            }
            if (cookie.getSecure()) {
              newHeader.append(""String_Node_Str"");
            }
            this.webkitCookieManager.setCookie(url,newHeader.toString());
            passOriginalHeader=false;
          }
        }
      }
      if (passOriginalHeader)       this.webkitCookieManager.setCookie(url,headerValue);
    }
  }
}","@Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {
  if ((uri == null) || (responseHeaders == null))   return;
  String url=uri.toString();
  String expiryString=null;
  int sessionExpiry=AppConfig.getInstance(null).forceSessionCookieExpiry;
  for (  String headerKey : responseHeaders.keySet()) {
    if ((headerKey == null) || !(headerKey.equalsIgnoreCase(""String_Node_Str"") || headerKey.equalsIgnoreCase(""String_Node_Str"")))     continue;
    for (    String headerValue : responseHeaders.get(headerKey)) {
      boolean passOriginalHeader=true;
      if (sessionExpiry > 0) {
        List<HttpCookie> cookies=HttpCookie.parse(headerValue);
        for (        HttpCookie cookie : cookies) {
          if (cookie.getMaxAge() < 0 || cookie.getDiscard()) {
            cookie.setMaxAge(sessionExpiry);
            cookie.setDiscard(false);
            if (expiryString == null) {
              Calendar calendar=Calendar.getInstance();
              calendar.add(Calendar.SECOND,sessionExpiry);
              Date expiryDate=calendar.getTime();
              expiryString=""String_Node_Str"" + DateUtils.formatDate(expiryDate) + ""String_Node_Str""+ Integer.toString(sessionExpiry);
            }
            StringBuilder newHeader=new StringBuilder();
            newHeader.append(cookie.toString());
            newHeader.append(expiryString);
            if (cookie.getPath() != null) {
              newHeader.append(""String_Node_Str"");
              newHeader.append(cookie.getPath());
            }
            if (cookie.getDomain() != null) {
              newHeader.append(""String_Node_Str"");
              newHeader.append(cookie.getDomain());
            }
            if (cookie.getSecure()) {
              newHeader.append(""String_Node_Str"");
            }
            this.webkitCookieManager.setCookie(url,newHeader.toString());
            passOriginalHeader=false;
          }
        }
      }
      if (passOriginalHeader)       this.webkitCookieManager.setCookie(url,headerValue);
    }
  }
}",0.9858190709046456
117000,"private AppConfig(Context context){
  this.context=context;
  this.appConfigJsBridge=new AppConfigJsBridge();
  InputStream is=null;
  InputStream jsonIs=null;
  try {
    if (fileForOTAconfig().exists()) {
      InputStream otaIS=null;
      try {
        otaIS=new BufferedInputStream(new FileInputStream(fileForOTAconfig()));
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        IOUtils.copy(otaIS,baos);
        baos.close();
        this.json=new JSONObject(baos.toString(""String_Node_Str""));
      }
 catch (      Exception e) {
        Log.e(TAG,e.getMessage(),e);
        IOUtils.close(otaIS);
      }
    }
    if (this.json == null) {
      jsonIs=context.getAssets().open(""String_Node_Str"");
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy(jsonIs,baos);
      IOUtils.close(baos);
      this.json=new JSONObject(baos.toString(""String_Node_Str""));
    }
    this.regexInternalExternal=new ArrayList<Pattern>();
    this.regexIsInternal=new ArrayList<Boolean>();
    JSONObject general=this.json.optJSONObject(""String_Node_Str"");
    if (general != null) {
      this.initialUrl=optString(general,""String_Node_Str"");
      initialHost=Uri.parse(this.initialUrl).getHost();
      if (initialHost.startsWith(""String_Node_Str"")) {
        initialHost=initialHost.substring(""String_Node_Str"".length());
      }
      this.appName=optString(general,""String_Node_Str"");
      String forceUserAgent=optString(general,""String_Node_Str"");
      if (forceUserAgent != null && !forceUserAgent.isEmpty()) {
        this.userAgent=forceUserAgent;
      }
 else {
        String userAgentAdd=optString(general,""String_Node_Str"");
        if (userAgentAdd == null)         userAgentAdd=""String_Node_Str"";
        WebView wv=new WebView(context);
        StringBuilder sb=new StringBuilder(wv.getSettings().getUserAgentString());
        sb.append(""String_Node_Str"");
        sb.append(userAgentAdd);
        this.userAgent=sb.toString();
      }
      this.publicKey=optString(general,""String_Node_Str"");
      this.deviceRegKey=optString(general,""String_Node_Str"");
      this.forceSessionCookieExpiry=general.optInt(""String_Node_Str"",0);
      if (this.forceSessionCookieExpiry > 0)       this.interceptHtml=true;
      processUserAgentRegexes(general.optJSONArray(""String_Node_Str""));
    }
    JSONObject forms=this.json.optJSONObject(""String_Node_Str"");
    if (forms != null) {
      JSONObject search=forms.optJSONObject(""String_Node_Str"");
      if (search != null && search.optBoolean(""String_Node_Str"",false)) {
        this.searchTemplateUrl=optString(search,""String_Node_Str"");
      }
      JSONObject loginConfig=forms.optJSONObject(""String_Node_Str"");
      if (loginConfig != null && loginConfig.optBoolean(""String_Node_Str"",false)) {
        this.loginConfig=loginConfig;
        this.loginUrl=optString(loginConfig,""String_Node_Str"");
        this.loginIsFirstPage=loginConfig.optBoolean(""String_Node_Str"",false);
      }
      JSONObject signupConfig=forms.optJSONObject(""String_Node_Str"");
      if (signupConfig != null && signupConfig.optBoolean(""String_Node_Str"",false)) {
        this.signupConfig=signupConfig;
        this.signupUrl=optString(signupConfig,""String_Node_Str"");
      }
    }
    JSONObject navigation=this.json.optJSONObject(""String_Node_Str"");
    if (navigation != null) {
      JSONObject sidebarNav=navigation.optJSONObject(""String_Node_Str"");
      processSidebarNavigation(sidebarNav);
      JSONObject navigationLevels=navigation.optJSONObject(""String_Node_Str"");
      processNavigationLevels(navigationLevels);
      JSONObject navigationTitles=navigation.optJSONObject(""String_Node_Str"");
      processNavigationTitles(navigationTitles);
      this.profilePickerJS=optString(navigation,""String_Node_Str"");
      JSONObject regexInternalExternal=navigation.optJSONObject(""String_Node_Str"");
      if (regexInternalExternal != null) {
        JSONArray rules=regexInternalExternal.optJSONArray(""String_Node_Str"");
        if (rules != null) {
          for (int i=0; i < rules.length(); i++) {
            JSONObject entry=rules.optJSONObject(i);
            if (entry != null && entry.has(""String_Node_Str"") && entry.has(""String_Node_Str"")) {
              String regex=optString(entry,""String_Node_Str"");
              boolean internal=entry.optBoolean(""String_Node_Str"",true);
              if (regex != null) {
                this.regexInternalExternal.add(Pattern.compile(regex));
                this.regexIsInternal.add(internal);
              }
            }
          }
        }
      }
      JSONObject tabNavigation=navigation.optJSONObject(""String_Node_Str"");
      processTabNavigation(tabNavigation);
      JSONObject actionConfig=navigation.optJSONObject(""String_Node_Str"");
      processActions(actionConfig);
      this.showRefreshButton=navigation.optBoolean(""String_Node_Str"",true);
    }
    JSONObject styling=this.json.optJSONObject(""String_Node_Str"");
    this.customCSS=optString(styling,""String_Node_Str"");
    if (this.customCSS != null)     this.interceptHtml=true;
    this.forceViewportWidth=styling.optDouble(""String_Node_Str"",Double.NaN);
    if (!Double.isNaN(this.forceViewportWidth))     this.interceptHtml=true;
    this.showActionBar=styling.optBoolean(""String_Node_Str"",true);
    this.androidTheme=optString(styling,""String_Node_Str"");
    String sideBackColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarBackgroundColor=LeanUtils.parseColor(sideBackColor);
    String sideForeColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarForegroundColor=LeanUtils.parseColor(sideForeColor);
    String tintColor=AppConfig.optString(styling,""String_Node_Str"");
    this.tintColor=LeanUtils.parseColor(tintColor);
    this.tabBarBackgroundColor=LeanUtils.parseColor(AppConfig.optString(styling,""String_Node_Str""));
    this.tabBarTextColor=LeanUtils.parseColor(AppConfig.optString(styling,""String_Node_Str""));
    this.tabBarIndicatorColor=LeanUtils.parseColor(AppConfig.optString(styling,""String_Node_Str""));
    this.interactiveDelay=styling.optDouble(""String_Node_Str"",Double.NaN);
    this.hideTitleInActionBar=styling.optBoolean(""String_Node_Str"",false);
    this.showLogoInActionBar=styling.optBoolean(""String_Node_Str"",this.hideTitleInActionBar);
    String actionBarForegroundColor=AppConfig.optString(styling,""String_Node_Str"");
    this.actionbarForegroundColor=LeanUtils.parseColor(actionBarForegroundColor);
    if (this.actionbarForegroundColor == null) {
      if (this.androidTheme == null)       this.actionbarForegroundColor=Color.WHITE;
 else       if (this.androidTheme.equalsIgnoreCase(""String_Node_Str""))       this.actionbarForegroundColor=Color.BLACK;
 else       this.actionbarForegroundColor=Color.WHITE;
    }
    processNavigationTitleImage(styling.opt(""String_Node_Str""));
    JSONObject permissions=this.json.optJSONObject(""String_Node_Str"");
    if (permissions != null) {
      this.usesGeolocation=permissions.optBoolean(""String_Node_Str"",false);
    }
    JSONObject services=this.json.optJSONObject(""String_Node_Str"");
    if (services != null) {
      JSONObject push=services.optJSONObject(""String_Node_Str"");
      this.pushNotifications=push != null && push.optBoolean(""String_Node_Str"",false);
      JSONObject analytics=services.optJSONObject(""String_Node_Str"");
      if (analytics != null && analytics.optBoolean(""String_Node_Str"",false)) {
        this.idsite_test=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        this.idsite_prod=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        if (this.idsite_test == Integer.MIN_VALUE || this.idsite_prod == Integer.MIN_VALUE) {
          Log.w(TAG,""String_Node_Str"");
          this.analytics=false;
        }
 else {
          this.analytics=true;
        }
      }
    }
    JSONObject performance=this.json.optJSONObject(""String_Node_Str"");
    if (performance != null) {
      processWebViewPools(performance.optJSONArray(""String_Node_Str""));
    }
    this.allowZoom=this.json.optBoolean(""String_Node_Str"",true);
    this.updateConfigJS=optString(this.json,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(jsonIs);
  }
}","private AppConfig(Context context){
  this.context=context;
  this.appConfigJsBridge=new AppConfigJsBridge();
  InputStream is=null;
  InputStream jsonIs=null;
  try {
    if (fileForOTAconfig().exists()) {
      InputStream otaIS=null;
      try {
        otaIS=new BufferedInputStream(new FileInputStream(fileForOTAconfig()));
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        IOUtils.copy(otaIS,baos);
        baos.close();
        this.json=new JSONObject(baos.toString(""String_Node_Str""));
      }
 catch (      Exception e) {
        Log.e(TAG,e.getMessage(),e);
        IOUtils.close(otaIS);
      }
    }
    if (this.json == null) {
      jsonIs=context.getAssets().open(""String_Node_Str"");
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy(jsonIs,baos);
      IOUtils.close(baos);
      this.json=new JSONObject(baos.toString(""String_Node_Str""));
    }
    this.regexInternalExternal=new ArrayList<Pattern>();
    this.regexIsInternal=new ArrayList<Boolean>();
    JSONObject general=this.json.optJSONObject(""String_Node_Str"");
    if (general != null) {
      this.initialUrl=optString(general,""String_Node_Str"");
      initialHost=Uri.parse(this.initialUrl).getHost();
      if (initialHost.startsWith(""String_Node_Str"")) {
        initialHost=initialHost.substring(""String_Node_Str"".length());
      }
      this.appName=optString(general,""String_Node_Str"");
      String forceUserAgent=optString(general,""String_Node_Str"");
      if (forceUserAgent != null && !forceUserAgent.isEmpty()) {
        this.userAgent=forceUserAgent;
      }
 else {
        String userAgentAdd=optString(general,""String_Node_Str"");
        if (userAgentAdd == null)         userAgentAdd=""String_Node_Str"";
        WebView wv=new WebView(context);
        StringBuilder sb=new StringBuilder(wv.getSettings().getUserAgentString());
        sb.append(""String_Node_Str"");
        sb.append(userAgentAdd);
        this.userAgent=sb.toString();
      }
      this.publicKey=optString(general,""String_Node_Str"");
      this.deviceRegKey=optString(general,""String_Node_Str"");
      this.forceSessionCookieExpiry=general.optInt(""String_Node_Str"",0);
      if (this.forceSessionCookieExpiry > 0)       this.interceptHtml=true;
      processUserAgentRegexes(general.optJSONArray(""String_Node_Str""));
    }
    JSONObject forms=this.json.optJSONObject(""String_Node_Str"");
    if (forms != null) {
      JSONObject search=forms.optJSONObject(""String_Node_Str"");
      if (search != null && search.optBoolean(""String_Node_Str"",false)) {
        this.searchTemplateUrl=optString(search,""String_Node_Str"");
      }
      JSONObject loginConfig=forms.optJSONObject(""String_Node_Str"");
      if (loginConfig != null && loginConfig.optBoolean(""String_Node_Str"",false)) {
        this.loginConfig=loginConfig;
        this.loginUrl=optString(loginConfig,""String_Node_Str"");
        this.loginIsFirstPage=loginConfig.optBoolean(""String_Node_Str"",false);
      }
      JSONObject signupConfig=forms.optJSONObject(""String_Node_Str"");
      if (signupConfig != null && signupConfig.optBoolean(""String_Node_Str"",false)) {
        this.signupConfig=signupConfig;
        this.signupUrl=optString(signupConfig,""String_Node_Str"");
      }
    }
    JSONObject navigation=this.json.optJSONObject(""String_Node_Str"");
    if (navigation != null) {
      JSONObject sidebarNav=navigation.optJSONObject(""String_Node_Str"");
      processSidebarNavigation(sidebarNav);
      JSONObject navigationLevels=navigation.optJSONObject(""String_Node_Str"");
      processNavigationLevels(navigationLevels);
      JSONObject navigationTitles=navigation.optJSONObject(""String_Node_Str"");
      processNavigationTitles(navigationTitles);
      this.profilePickerJS=optString(navigation,""String_Node_Str"");
      JSONObject regexInternalExternal=navigation.optJSONObject(""String_Node_Str"");
      if (regexInternalExternal != null) {
        JSONArray rules=regexInternalExternal.optJSONArray(""String_Node_Str"");
        if (rules != null) {
          for (int i=0; i < rules.length(); i++) {
            JSONObject entry=rules.optJSONObject(i);
            if (entry != null && entry.has(""String_Node_Str"") && entry.has(""String_Node_Str"")) {
              String regex=optString(entry,""String_Node_Str"");
              boolean internal=entry.optBoolean(""String_Node_Str"",true);
              if (regex != null) {
                this.regexInternalExternal.add(Pattern.compile(regex));
                this.regexIsInternal.add(internal);
              }
            }
          }
        }
      }
      JSONObject tabNavigation=navigation.optJSONObject(""String_Node_Str"");
      processTabNavigation(tabNavigation);
      JSONObject actionConfig=navigation.optJSONObject(""String_Node_Str"");
      processActions(actionConfig);
      this.showRefreshButton=navigation.optBoolean(""String_Node_Str"",true);
      JSONArray ignorePageFinished=navigation.optJSONArray(""String_Node_Str"");
      this.ignorePageFinishedRegexes=new ArrayList<Pattern>();
      if (ignorePageFinished != null) {
        for (int i=0; i < ignorePageFinished.length(); i++) {
          if (!ignorePageFinished.isNull(i)) {
            String entry=ignorePageFinished.optString(i);
            if (entry != null) {
              try {
                Pattern pattern=Pattern.compile(entry);
                this.ignorePageFinishedRegexes.add(pattern);
              }
 catch (              PatternSyntaxException e) {
                Log.e(TAG,""String_Node_Str"" + entry,e);
              }
            }
          }
        }
      }
    }
    JSONObject styling=this.json.optJSONObject(""String_Node_Str"");
    this.customCSS=optString(styling,""String_Node_Str"");
    if (this.customCSS != null)     this.interceptHtml=true;
    this.forceViewportWidth=styling.optDouble(""String_Node_Str"",Double.NaN);
    if (!Double.isNaN(this.forceViewportWidth))     this.interceptHtml=true;
    this.zoomableForceViewport=styling.optBoolean(""String_Node_Str"",false);
    this.showActionBar=styling.optBoolean(""String_Node_Str"",true);
    this.androidTheme=optString(styling,""String_Node_Str"");
    String sideBackColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarBackgroundColor=LeanUtils.parseColor(sideBackColor);
    String sideForeColor=AppConfig.optString(styling,""String_Node_Str"");
    this.sidebarForegroundColor=LeanUtils.parseColor(sideForeColor);
    String tintColor=AppConfig.optString(styling,""String_Node_Str"");
    this.tintColor=LeanUtils.parseColor(tintColor);
    this.tabBarBackgroundColor=LeanUtils.parseColor(AppConfig.optString(styling,""String_Node_Str""));
    this.tabBarTextColor=LeanUtils.parseColor(AppConfig.optString(styling,""String_Node_Str""));
    this.tabBarIndicatorColor=LeanUtils.parseColor(AppConfig.optString(styling,""String_Node_Str""));
    this.interactiveDelay=styling.optDouble(""String_Node_Str"",Double.NaN);
    this.hideTitleInActionBar=styling.optBoolean(""String_Node_Str"",false);
    this.showLogoInActionBar=styling.optBoolean(""String_Node_Str"",this.hideTitleInActionBar);
    String actionBarForegroundColor=AppConfig.optString(styling,""String_Node_Str"");
    this.actionbarForegroundColor=LeanUtils.parseColor(actionBarForegroundColor);
    if (this.actionbarForegroundColor == null) {
      if (this.androidTheme == null)       this.actionbarForegroundColor=Color.WHITE;
 else       if (this.androidTheme.equalsIgnoreCase(""String_Node_Str""))       this.actionbarForegroundColor=Color.BLACK;
 else       this.actionbarForegroundColor=Color.WHITE;
    }
    processNavigationTitleImage(styling.opt(""String_Node_Str""));
    JSONObject permissions=this.json.optJSONObject(""String_Node_Str"");
    if (permissions != null) {
      this.usesGeolocation=permissions.optBoolean(""String_Node_Str"",false);
    }
    JSONObject services=this.json.optJSONObject(""String_Node_Str"");
    if (services != null) {
      JSONObject push=services.optJSONObject(""String_Node_Str"");
      this.pushNotifications=push != null && push.optBoolean(""String_Node_Str"",false);
      JSONObject analytics=services.optJSONObject(""String_Node_Str"");
      if (analytics != null && analytics.optBoolean(""String_Node_Str"",false)) {
        this.idsite_test=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        this.idsite_prod=analytics.optInt(""String_Node_Str"",Integer.MIN_VALUE);
        if (this.idsite_test == Integer.MIN_VALUE || this.idsite_prod == Integer.MIN_VALUE) {
          Log.w(TAG,""String_Node_Str"");
          this.analytics=false;
        }
 else {
          this.analytics=true;
        }
      }
    }
    JSONObject performance=this.json.optJSONObject(""String_Node_Str"");
    if (performance != null) {
      processWebViewPools(performance.optJSONArray(""String_Node_Str""));
    }
    this.allowZoom=this.json.optBoolean(""String_Node_Str"",true);
    this.updateConfigJS=optString(this.json,""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    IOUtils.close(is);
    IOUtils.close(jsonIs);
  }
}",0.9552135569773474
