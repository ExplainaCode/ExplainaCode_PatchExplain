record_number,buggy_code,fixed_code,code_similarity
147001,"public void clearLogs(){
  Vector ids=new Vector();
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    ids.addElement(new Integer(li.nextID()));
  }
  for (int i=0; i < ids.size(); i++) {
    int id=((Integer)ids.elementAt(i)).intValue();
    logStorage.remove(id);
  }
}","public void clearLogs(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return;
    }
    Vector ids=new Vector();
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      ids.addElement(new Integer(li.nextID()));
    }
    for (int i=0; i < ids.size(); i++) {
      int id=((Integer)ids.elementAt(i)).intValue();
      logStorage.remove(id);
    }
  }
}",0.8433382137628112
147002,"public void log(String type,String message,Date logDate){
  LogEntry log=new LogEntry(type,message,logDate);
  try {
    logStorage.add(log);
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void log(String type,String message,Date logDate){
synchronized (logStorage) {
    LogEntry log=new LogEntry(type,message,logDate);
    try {
      logStorage.add(log);
    }
 catch (    StorageFullException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}",0.8773946360153256
147003,"public boolean serializeLogs(IAtomicLogSerializer serializer){
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    if (!serializer.serializeLog((LogEntry)li.nextRecord()))     ;
    return false;
  }
  return true;
}","public boolean serializeLogs(IAtomicLogSerializer serializer){
synchronized (logStorage) {
    if (!checkStorage()) {
      return false;
    }
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      if (!serializer.serializeLog((LogEntry)li.nextRecord()))       ;
      return false;
    }
    return true;
  }
}",0.774869109947644
147004,"public int logSize(){
  return logStorage.getNumRecords();
}","public int logSize(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return -1;
    }
    return logStorage.getNumRecords();
  }
}",0.5882352941176471
147005,"public void clearLogs(){
  Vector ids=new Vector();
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    ids.addElement(new Integer(li.nextID()));
  }
  for (int i=0; i < ids.size(); i++) {
    int id=((Integer)ids.elementAt(i)).intValue();
    logStorage.remove(id);
  }
}","public void clearLogs(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return;
    }
    Vector ids=new Vector();
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      ids.addElement(new Integer(li.nextID()));
    }
    for (int i=0; i < ids.size(); i++) {
      int id=((Integer)ids.elementAt(i)).intValue();
      logStorage.remove(id);
    }
  }
}",0.8433382137628112
147006,"public void log(String type,String message,Date logDate){
  LogEntry log=new LogEntry(type,message,logDate);
  try {
    logStorage.add(log);
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void log(String type,String message,Date logDate){
synchronized (logStorage) {
    LogEntry log=new LogEntry(type,message,logDate);
    try {
      logStorage.add(log);
    }
 catch (    StorageFullException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}",0.8773946360153256
147007,"public boolean serializeLogs(IAtomicLogSerializer serializer){
  IStorageIterator li=logStorage.iterate();
  while (li.hasMore()) {
    if (!serializer.serializeLog((LogEntry)li.nextRecord()))     ;
    return false;
  }
  return true;
}","public boolean serializeLogs(IAtomicLogSerializer serializer){
synchronized (logStorage) {
    if (!checkStorage()) {
      return false;
    }
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore()) {
      if (!serializer.serializeLog((LogEntry)li.nextRecord()))       ;
      return false;
    }
    return true;
  }
}",0.774869109947644
147008,"public int logSize(){
  return logStorage.getNumRecords();
}","public int logSize(){
synchronized (logStorage) {
    if (!checkStorage()) {
      return -1;
    }
    return logStorage.getNumRecords();
  }
}",0.5882352941176471
147009,"private static String formatDateColloquial(DateFields f){
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ (new Integer(f.year)).toString().substring(2,4);
}","private static String formatDateColloquial(DateFields f){
  String year=new Integer(f.year).toString();
  if (year.length() == 4) {
    year=year.substring(2,4);
  }
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ year;
}",0.647450110864745
147010,"/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    boolean isIntegral=Math.abs(d - (int)d) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || isIntegral) {
      return new IntegerData((int)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    return new DateData((Date)val);
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}","/** 
 * convert the data object returned by the xpath expression into an IAnswerData suitable for storage in the FormInstance
 */
private static IAnswerData wrapData(Object val,int dataType){
  if ((val instanceof String && ((String)val).length() == 0) || (val instanceof Double && ((Double)val).isNaN())) {
    return null;
  }
  if (Constants.DATATYPE_BOOLEAN == dataType || val instanceof Boolean) {
    boolean b;
    if (val instanceof Boolean) {
      b=((Boolean)val).booleanValue();
    }
 else     if (val instanceof Double) {
      Double d=(Double)val;
      b=Math.abs(d.doubleValue()) > 1.0e-12 && !Double.isNaN(d);
    }
 else     if (val instanceof String) {
      String s=(String)val;
      b=s.length() > 0;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
    return new BooleanData(b);
  }
 else   if (val instanceof Double) {
    double d=((Double)val).doubleValue();
    boolean isIntegral=Math.abs(d - (int)d) < 1.0e-9;
    if (Constants.DATATYPE_INTEGER == dataType || isIntegral) {
      return new IntegerData((int)d);
    }
 else {
      return new DecimalData(d);
    }
  }
 else   if (val instanceof String) {
    return new StringData((String)val);
  }
 else   if (val instanceof Date) {
    return (dataType == Constants.DATATYPE_DATE_TIME ? new DateTimeData((Date)val) : new DateData((Date)val));
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + val.getClass().getName());
  }
}",0.9634881247784474
147011,"public void setValue(Object o){
  if (o == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  d=new Date(((Date)o).getTime());
}","public void setValue(Object o){
  if (o == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  d=DateUtils.roundDate((Date)o);
}",0.8934707903780069
147012,"private static String formatDateColloquial(DateFields f){
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ (new Integer(f.year)).toString().substring(2,4);
}","private static String formatDateColloquial(DateFields f){
  String year=new Integer(f.year).toString();
  if (year.length() == 4) {
    year=year.substring(2,4);
  }
  return intPad(f.day,2) + ""String_Node_Str"" + intPad(f.month,2)+ ""String_Node_Str""+ year;
}",0.647450110864745
147013,"public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue()];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}","public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue() - 1];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}",0.9946666666666668
147014,"public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue()];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}","public Object getSortKey(String fieldKey){
  if (fieldKey.equals(""String_Node_Str"")) {
    return new Integer(this.getRecordID());
  }
 else {
    try {
      return getShortFields()[Integer.valueOf(fieldKey).intValue() - 1];
    }
 catch (    NumberFormatException nfe) {
      nfe.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + fieldKey);
    }
  }
}",0.9946666666666668
147015,"protected String getFormOrDefault(String textID,String form){
  String t=null;
  if (textID == null) {
    return this.getText(null,null);
  }
  try {
    t=getText(textID,form);
  }
 catch (  NoLocalizedTextException nlte) {
    System.out.println(""String_Node_Str"" + form + ""String_Node_Str""+ textID+ ""String_Node_Str"");
    t=getDefaultText(textID);
  }
  return t;
}","protected String getFormOrDefault(String textID,String form){
  String t=null;
  if (textID == null) {
    return this.getText(null,null);
  }
  try {
    t=getText(textID,form);
  }
 catch (  NoLocalizedTextException nlte) {
    System.out.println(""String_Node_Str"" + form + ""String_Node_Str""+ textID+ ""String_Node_Str"");
    t=getDefaultText(textID);
  }
catch (  IllegalArgumentException iae) {
    System.out.println(""String_Node_Str"" + textID + ""String_Node_Str"");
    t=getDefaultText(textID);
  }
  return t;
}",0.8072153325817362
147016,"/** 
 * Convenience method Get shortText form of text for THIS element (if available) 
 * @return shortText form 
 */
public String getShortText(){
  return getFormOrDefault(getTextID(),TEXT_FORM_SHORT);
}","/** 
 * Convenience method System.out.println(""Warning, Short text form requested for [""+textID+""] but doesn't exist. (Falling back to Default form).""); t = getDefaultText(textID); }catch(IllegalArgumentException iae){ Get shortText form of text for THIS element (if available) 
 * @return shortText form 
 */
public String getShortText(){
  return getFormOrDefault(getTextID(),TEXT_FORM_SHORT);
}",0.6810631229235881
147017,"private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  Vector usedAtts=new Vector();
  Vector labelUA=new Vector();
  Vector valueUA=new Vector();
  Vector copyUA=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  labelUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  copyUA.addElement(""String_Node_Str"");
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.contextRef=getFormElementRef(qparent);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),itemset.contextRef));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (XFormUtils.showUnusedAttributeWarning(child,labelUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,labelUA));
      }
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,copyUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,copyUA));
      }
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,valueUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,valueUA));
      }
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  if (itemset.copyRef != null) {
    if (itemset.valueRef == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (!itemset.copyRef.isParentOf(itemset.valueRef,false)) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}","private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  Vector usedAtts=new Vector();
  Vector labelUA=new Vector();
  Vector valueUA=new Vector();
  Vector copyUA=new Vector();
  usedAtts.addElement(""String_Node_Str"");
  labelUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  valueUA.addElement(""String_Node_Str"");
  copyUA.addElement(""String_Node_Str"");
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  if (nodesetStr == null)   throw new RuntimeException(""String_Node_Str"" + e.getName() + ""String_Node_Str""+ XFormSerializer.elementToString(e)+ ""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.contextRef=getFormElementRef(qparent);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),itemset.contextRef));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (XFormUtils.showUnusedAttributeWarning(child,labelUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,labelUA));
      }
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,copyUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,copyUA));
      }
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (XFormUtils.showUnusedAttributeWarning(child,valueUA)) {
        System.out.println(XFormUtils.unusedAttWarning(child,valueUA));
      }
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  if (itemset.copyRef != null) {
    if (itemset.valueRef == null) {
      System.err.println(""String_Node_Str"");
    }
 else     if (!itemset.copyRef.isParentOf(itemset.valueRef,false)) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
}",0.9790816326530613
147018,"private static void listQuestion(FormDef f,QuestionDef q,FormEntryController fec,int indent,StringBuffer sb){
  FormEntryModel femodel=fec.getModel();
  TreeElement instanceNode=getInstanceNode(f.getInstance(),q.getBind());
  String caption=""String_Node_Str"";
  FormEntryPrompt fep=femodel.getQuestionPrompt();
  caption=getAppropriateTextForm(fep,fep.getTextID());
  int type=instanceNode.dataType;
  if (q.getControlType() != Constants.CONTROL_TRIGGER) {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
    println(sb,indent + 1,""String_Node_Str"" + printType(type));
  }
 else {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
  }
  if (q.getControlType() == Constants.CONTROL_SELECT_ONE || q.getControlType() == Constants.CONTROL_SELECT_MULTI) {
    printChoices(f,q,fec,indent + 1,sb);
  }
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  String defaultValue=printDefault(instanceNode);
  if (defaultValue != null) {
    println(sb,indent + 1,""String_Node_Str"" + defaultValue);
  }
  if (instanceNode.getConstraint() != null) {
    println(sb,indent + 1,""String_Node_Str"" + printCondition(instanceNode.getConstraint().constraint));
  }
  println(sb);
}","private static void listQuestion(FormDef f,QuestionDef q,FormEntryController fec,int indent,StringBuffer sb){
  FormEntryModel femodel=fec.getModel();
  TreeElement instanceNode=getInstanceNode(f.getInstance(),q.getBind());
  String caption=""String_Node_Str"";
  FormEntryPrompt fep=femodel.getQuestionPrompt();
  caption=fep.getLongText();
  int type=instanceNode.dataType;
  if (q.getControlType() != Constants.CONTROL_TRIGGER) {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
    println(sb,indent + 1,""String_Node_Str"" + printType(type));
  }
 else {
    println(sb,indent,""String_Node_Str"" + caption + ""String_Node_Str"");
  }
  if (q.getControlType() == Constants.CONTROL_SELECT_ONE || q.getControlType() == Constants.CONTROL_SELECT_MULTI) {
    printChoices(f,q,fec,indent + 1,sb);
  }
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  printProperty(""String_Node_Str"",f,instanceNode,indent + 1,sb);
  String defaultValue=printDefault(instanceNode);
  if (defaultValue != null) {
    println(sb,indent + 1,""String_Node_Str"" + defaultValue);
  }
  if (instanceNode.getConstraint() != null) {
    println(sb,indent + 1,""String_Node_Str"" + printCondition(instanceNode.getConstraint().constraint));
  }
  println(sb);
}",0.9813293502613892
147019,"/** 
 * Get the Itext for a specific SelectChoice and specific itext form
 * @param s
 * @param form
 * @return
 */
public String getSelectChoiceText(SelectChoice sel,String form){
  return getText(sel.getTextID(),form);
}","/** 
 * Get the Itext for a specific SelectChoice and specific itext form, returns null if the form requested is not available for the select choice
 * @param s
 * @param form
 * @return
 */
public String getSelectChoiceText(SelectChoice sel,String form){
  if (getSelectTextForms(sel).contains(form)) {
    return getText(sel.getTextID(),form);
  }
 else {
    return null;
  }
}",0.7375415282392026
147020,"public XPathNodeset eval(FormInstance m,EvaluationContext evalContext){
  TreeReference genericRef=getReference();
  if (m.getTemplatePath(genericRef) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  TreeReference ref=genericRef.contextualize(evalContext.getContextRef());
  Vector<TreeReference> nodesetRefs=m.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,evalContext);
}","public XPathNodeset eval(FormInstance m,EvaluationContext evalContext){
  TreeReference genericRef=getReference();
  if (genericRef.isAbsolute() && m.getTemplatePath(genericRef) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  TreeReference ref=genericRef.contextualize(evalContext.getContextRef());
  Vector<TreeReference> nodesetRefs=m.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,evalContext);
}",0.9797145003756574
147021,"private static String getLabel(Element e,FormDef f){
  boolean outputFound=false;
  boolean otherStuffFound=false;
  Vector outputs=new Vector();
  for (int i=0; i < e.getChildCount(); i++) {
    if (e.getType(i) != Node.TEXT) {
      if (e.getType(i) == Node.ELEMENT && ""String_Node_Str"".equals(e.getElement(i).getName())) {
        outputFound=true;
        outputs.addElement(new Integer(i));
      }
 else {
        otherStuffFound=true;
      }
    }
  }
  if (outputFound && !otherStuffFound) {
    StringBuffer sb=new StringBuffer();
    for (int i=0; i < outputs.size() + 1; i++) {
      int ixStart=(i == 0 ? 0 : ((Integer)outputs.elementAt(i - 1)).intValue() + 1);
      if (ixStart < e.getChildCount()) {
        String piece=getXMLText(e,ixStart,false);
        if (piece != null) {
          sb.append(piece);
        }
      }
      if (i < outputs.size()) {
        int ix=((Integer)outputs.elementAt(i)).intValue();
        sb.append(""String_Node_Str"" + parseOutput(e.getElement(ix),f) + ""String_Node_Str"");
      }
    }
    return sb.toString().trim();
  }
 else {
    return getXMLText(e,true);
  }
}","private static String getLabel(Element e,FormDef f){
  if (e.getChildCount() == 0)   return null;
  recurseForOutput(e,f);
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < e.getChildCount(); i++) {
    if (e.getType(i) != Node.TEXT && !(e.getChild(i) instanceof String)) {
      Object b=e.getChild(i);
      if (b instanceof String)       System.out.println(""String_Node_Str"");
      sb.append(XFormSerializer.elementToString((Element)b));
    }
 else {
      sb.append(e.getText(i));
    }
  }
  String s=sb.toString().trim();
  return s;
}",0.2347305389221557
147022,"/** 
 * get value of attribute with namespace:name' in the vector
 * @param index
 * @return String
 */
public String getAttributeValue(String namespace,String name){
  return getAttributeValue(getAttribute(namespace,name));
}","/** 
 * get value of attribute with namespace:name' in the vector
 * @param index
 * @return String
 */
public String getAttributeValue(String namespace,String name){
  TreeElement element=getAttribute(namespace,name);
  return element == null ? null : getAttributeValue(element);
}",0.7874015748031497
147023,"/** 
 * Sets the given attribute; a value of null removes the attribute
 */
public void setAttribute(String namespace,String name,String value){
  if (namespace == null)   namespace=""String_Node_Str"";
  for (int i=attributes.size() - 1; i >= 0; i--) {
    TreeElement attribut=attributes.elementAt(i);
    if (attribut.name.equals(name) && namespace == null || namespace.equals(attribut.namespace)) {
      if (value == null) {
        attributes.removeElementAt(i);
      }
 else {
        attribut.setValue(new UncastData(value));
      }
      return;
    }
  }
  TreeElement attr=TreeElement.constructAttributeElement(namespace,name);
  attr.setValue(new UncastData(value));
  attr.setParent(this);
  attributes.addElement(attr);
}","/** 
 * Sets the given attribute; a value of null removes the attribute
 */
public void setAttribute(String namespace,String name,String value){
  for (int i=attributes.size() - 1; i >= 0; i--) {
    TreeElement attribut=attributes.elementAt(i);
    if (attribut.name.equals(name) && (namespace == null || namespace.equals(attribut.namespace))) {
      if (value == null) {
        attributes.removeElementAt(i);
      }
 else {
        attribut.setValue(new UncastData(value));
      }
      return;
    }
  }
  if (namespace == null) {
    namespace=""String_Node_Str"";
  }
  TreeElement attr=TreeElement.constructAttributeElement(namespace,name);
  attr.setValue(new UncastData(value));
  attr.setParent(this);
  attributes.addElement(attr);
}",0.504054054054054
147024,"/** 
 * Retrieves the TreeElement representing the attribute at the provided namespace and name, or null if none exists. If 'null' is provided for the namespace, it will match the first attribute with the matching name.
 * @param index
 * @return TreeElement
 */
public TreeElement getAttribute(String namespace,String name){
  for (  TreeElement attribute : attributes) {
    if (attribute.getName().equals(name) && namespace == null || namespace.equals(attribute)) {
      return attribute;
    }
  }
  return null;
}","/** 
 * Retrieves the TreeElement representing the attribute at the provided namespace and name, or null if none exists. If 'null' is provided for the namespace, it will match the first attribute with the matching name.
 * @param index
 * @return TreeElement
 */
public TreeElement getAttribute(String namespace,String name){
  for (  TreeElement attribute : attributes) {
    if (attribute.getName().equals(name) && (namespace == null || namespace.equals(attribute.namespace))) {
      return attribute;
    }
  }
  return null;
}",0.9885714285714284
147025,"/** 
 * true if the answer to this question yields xml tree data, not a simple string value
 */
public boolean isComplex(){
  return (dynamicChoices != null && dynamicChoices.copyMode);
}","/** 
 * true if the answer to this question yields xml tree data, not a simple string value
 */
public boolean isComplex(){
  System.out.println(""String_Node_Str"" + dynamicChoices);
  if (dynamicChoices != null)   System.out.println(""String_Node_Str"" + dynamicChoices.copyMode);
  return (dynamicChoices != null && dynamicChoices.copyMode);
}",0.6843100189035917
147026,"/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent() != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}","/** 
 * Attempts to save the answer at the specified FormIndex into the datamodel.
 * @param index
 * @param data
 * @return OK if save was successful, error if a constraint was violated.
 */
public int answerQuestion(FormIndex index,IAnswerData data){
  QuestionDef q=model.getQuestionPrompt(index).getQuestion();
  if (model.getEvent() != FormEntryController.EVENT_QUESTION) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TreeElement element=model.getTreeElement(index);
  boolean complexQuestion=q.isComplex();
  if (element.required && data == null) {
    return ANSWER_REQUIRED_BUT_EMPTY;
  }
 else   if (!complexQuestion && !model.getForm().evaluateConstraint(index.getReference(),data)) {
    return ANSWER_CONSTRAINT_VIOLATED;
  }
 else   if (!complexQuestion) {
    commitAnswer(element,index,data);
    return ANSWER_OK;
  }
 else   if (complexQuestion) {
    throw new RuntimeException(""String_Node_Str"");
  }
 else {
    try {
      model.getForm().copyItemsetAnswer(q,element,data);
    }
 catch (    InvalidReferenceException ire) {
      ire.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
    }
    return ANSWER_OK;
  }
}",0.8598615916955017
147027,"public Externalizable getRecordForValue(String fieldName,Object value) throws NoSuchElementException, InvalidIndexException {
  return indexedStorage().getRecordForValue(fieldName,value);
}","public Externalizable getRecordForValue(String fieldName,Object value) throws NoSuchElementException, InvalidIndexException {
  return ((SerializationWrapper)indexedStorage().getRecordForValue(fieldName,value)).getData();
}",0.9174757281553398
147028,"public void configureApp(MIDlet m){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  J2MEDisplay.init(m);
  loadModules();
  setProperties();
  registerAddtlStorage();
  StorageManager.repairAll();
  manager=new CommCareManager();
  manager.init(CommCareUtil.getProfileReference());
  UserUtility.populateAdminUser();
  inDemoMode=false;
  purgeScheduler();
  manager.initialize();
  LanguageUtils.initializeLanguage(true,""String_Node_Str"");
}","public void configureApp(MIDlet m){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  J2MEDisplay.init(m);
  loadModules();
  setProperties();
  registerAddtlStorage();
  StorageManager.repairAll();
  manager=new CommCareManager();
  manager.init(CommCareUtil.getProfileReference());
  UserUtility.populateAdminUser();
  inDemoMode=false;
  purgeScheduler();
  Localization.setLocale(""String_Node_Str"");
  manager.initialize();
  LanguageUtils.initializeLanguage(true,""String_Node_Str"");
}",0.9159248269040554
147029,"public CommCareHomeScreen(CommCareHomeController controller,Vector<Suite> suites,boolean adminMode,boolean reviewEnabled){
  super(""String_Node_Str"",List.IMPLICIT);
  this.controller=controller;
  Enumeration en=suites.elements();
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      if (""String_Node_Str"".equals(m.getId())) {
        for (        String id : m.getCommandIds()) {
          Entry e=suite.getEntries().get(id);
          int location=append(e.getText().evaluate(),null);
          suiteTable.put(new Integer(location),suite);
          entryTable.put(new Integer(location),e);
        }
      }
 else       if (m.getRoot().equals(""String_Node_Str"")) {
        int location=append(m.getName().evaluate(),null);
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
  if (reviewEnabled) {
    append(reviewRecent);
  }
  append(sendAllUnsent);
  setSendUnsent();
  setCommandListener(controller);
  setSelectCommand(select);
  addCommand(exit);
  if (adminMode) {
    addCommand(admSettings);
    addCommand(admNewUser);
    addCommand(admEditUsers);
    addCommand(admBackupRestore);
    addCommand(admResetDemo);
    addCommand(admUpgrade);
  }
}","public CommCareHomeScreen(CommCareHomeController controller,Vector<Suite> suites,boolean adminMode,boolean reviewEnabled){
  super(""String_Node_Str"",List.IMPLICIT);
  this.controller=controller;
  Enumeration en=suites.elements();
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      if (""String_Node_Str"".equals(m.getId())) {
        for (        String id : m.getCommandIds()) {
          Entry e=suite.getEntries().get(id);
          int location=append(e.getText().evaluate(),null);
          suiteTable.put(new Integer(location),suite);
          entryTable.put(new Integer(location),e);
        }
      }
 else       if (m.getRoot().equals(""String_Node_Str"")) {
        int location=append(m.getName().evaluate(),null);
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
  if (reviewEnabled) {
    reviewRecent=new ChoiceItem(Localization.get(""String_Node_Str""),null,List.IMPLICIT);
    append(reviewRecent);
  }
  append(sendAllUnsent);
  setSendUnsent();
  setCommandListener(controller);
  setSelectCommand(select);
  addCommand(exit);
  if (adminMode) {
    addCommand(admSettings);
    addCommand(admNewUser);
    addCommand(admEditUsers);
    addCommand(admBackupRestore);
    addCommand(admResetDemo);
    addCommand(admUpgrade);
  }
}",0.9615814994405072
147030,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.write(out,filter);
  ExtUtil.write(out,context);
  ExtUtil.write(out,new ExtWrapList(headers));
  ExtUtil.write(out,new ExtWrapList(templates));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.write(out,filter);
  ExtUtil.write(out,context);
  ExtUtil.write(out,new ExtWrapList(headers));
  ExtUtil.write(out,new ExtWrapList(templates));
  ExtUtil.writeInts(out,headerHints);
  ExtUtil.writeInts(out,templateHints);
}",0.8792569659442725
147031,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  filter=(Filter)ExtUtil.read(in,Filter.class,pf);
  context=(FormInstance)ExtUtil.read(in,FormInstance.class,pf);
  headers=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
  templates=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  filter=(Filter)ExtUtil.read(in,Filter.class,pf);
  context=(FormInstance)ExtUtil.read(in,FormInstance.class,pf);
  headers=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
  templates=(Vector<Text>)ExtUtil.read(in,new ExtWrapList(Text.class),pf);
  headerHints=(int[])ExtUtil.readInts(in);
  templateHints=(int[])ExtUtil.readInts(in);
}",0.9111111111111112
147032,"public Detail(String id,Text title,FormInstance context,Vector<Text> headers,Vector<Text> templates,Filter filter){
  this.id=id;
  this.title=title;
  this.context=context;
  this.headers=headers;
  this.templates=templates;
  this.filter=filter;
}","public Detail(String id,Text title,FormInstance context,Vector<Text> headers,Vector<Text> templates,Filter filter,int[] headerHints,int[] templateHints){
  this.id=id;
  this.title=title;
  this.context=context;
  this.headers=headers;
  this.templates=templates;
  this.filter=filter;
  this.headerHints=headerHints;
  this.templateHints=templateHints;
}",0.8245033112582781
147033,"public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  ;
  Vector<Text> templates=new Vector<Text>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter);
  return d;
}","public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  getNextTagInBlock(""String_Node_Str"");
  Filter filter=Filter.EmptyFilter();
  if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
    filter=new FilterParser(parser).parse();
    getNextTagInBlock(""String_Node_Str"");
  }
  FormInstance model=parseModel();
  Vector<Text> headers=new Vector<Text>();
  Vector<Text> templates=new Vector<Text>();
  Vector<Integer> headerHints=new Vector<Integer>();
  Vector<Integer> templateHints=new Vector<Integer>();
  while (nextTagInBlock(""String_Node_Str"")) {
    checkNode(""String_Node_Str"");
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      headerHints.addElement(new Integer(getWidth()));
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text header=new TextParser(parser).parse();
      headers.addElement(header);
    }
    if (nextTagInBlock(""String_Node_Str"")) {
      checkNode(""String_Node_Str"");
      templateHints.addElement(new Integer(getWidth()));
      parser.nextTag();
      checkNode(""String_Node_Str"");
      Text template=new TextParser(parser).parse();
      templates.addElement(template);
    }
  }
  Detail d=new Detail(id,title,model,headers,templates,filter,toArray(headerHints),toArray(templateHints));
  return d;
}",0.8956343792633015
147034,"public void populateDynamicChoices(ItemsetBinding itemset,TreeElement questionElement){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  TreeReference contextRef=questionElement.getParent().getRef();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getInstance(),new EvaluationContext(exprEvalContext,contextRef));
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
 else {
      value=itemset.valueExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  itemset.setChoices(choices,this.getLocalizer());
}","public void populateDynamicChoices(ItemsetBinding itemset){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getInstance(),new EvaluationContext(exprEvalContext,itemset.contextRef));
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
 else {
      value=itemset.valueExpr.evalReadable(this.getInstance(),new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  if (choices.size() == 0) {
    throw new RuntimeException(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
  }
  itemset.setChoices(choices,this.getLocalizer());
}",0.9018245004344048
147035,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,nodesetRef);
  ExtUtil.write(out,new ExtWrapTagged(nodesetExpr));
  ExtUtil.write(out,labelRef);
  ExtUtil.write(out,new ExtWrapTagged(labelExpr));
  ExtUtil.write(out,new ExtWrapNullable(valueRef));
  ExtUtil.write(out,new ExtWrapNullable(valueExpr == null ? null : new ExtWrapTagged(valueExpr)));
  ExtUtil.write(out,new ExtWrapNullable(copyRef));
  ExtUtil.writeBool(out,labelIsItext);
  ExtUtil.writeBool(out,copyMode);
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,nodesetRef);
  ExtUtil.write(out,new ExtWrapTagged(nodesetExpr));
  ExtUtil.write(out,contextRef);
  ExtUtil.write(out,labelRef);
  ExtUtil.write(out,new ExtWrapTagged(labelExpr));
  ExtUtil.write(out,new ExtWrapNullable(valueRef));
  ExtUtil.write(out,new ExtWrapNullable(valueExpr == null ? null : new ExtWrapTagged(valueExpr)));
  ExtUtil.write(out,new ExtWrapNullable(copyRef));
  ExtUtil.writeBool(out,labelIsItext);
  ExtUtil.writeBool(out,copyMode);
}",0.9688972667295004
147036,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  nodesetRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  nodesetExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  labelRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  labelExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  valueRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  valueExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapNullable(new ExtWrapTagged()),pf);
  copyRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  labelIsItext=ExtUtil.readBool(in);
  copyMode=ExtUtil.readBool(in);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  nodesetRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  nodesetExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  contextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  labelRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  labelExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  valueRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  valueExpr=(IConditionExpr)ExtUtil.read(in,new ExtWrapNullable(new ExtWrapTagged()),pf);
  copyRef=(TreeReference)ExtUtil.read(in,new ExtWrapNullable(TreeReference.class),pf);
  labelIsItext=ExtUtil.readBool(in);
  copyMode=ExtUtil.readBool(in);
}",0.954515491100857
147037,"public Vector<SelectChoice> getSelectChoices(){
  QuestionDef q=getQuestion();
  ItemsetBinding itemset=q.getDynamicChoices();
  if (itemset != null) {
    if (!dynamicChoicesPopulated) {
      form.populateDynamicChoices(itemset,mTreeElement);
      dynamicChoicesPopulated=true;
    }
    Vector<SelectChoice> choices=itemset.getChoices();
    if (choices.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    return choices;
  }
 else {
    return getQuestion().getChoices();
  }
}","public Vector<SelectChoice> getSelectChoices(){
  QuestionDef q=getQuestion();
  ItemsetBinding itemset=q.getDynamicChoices();
  if (itemset != null) {
    if (!dynamicChoicesPopulated) {
      form.populateDynamicChoices(itemset);
      dynamicChoicesPopulated=true;
    }
    return itemset.getChoices();
  }
 else {
    return getQuestion().getChoices();
  }
}",0.7072330654420207
147038,"private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),qparent));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
}","private static void parseItemset(FormDef f,QuestionDef q,Element e,IFormElement qparent){
  ItemsetBinding itemset=new ItemsetBinding();
  String nodesetStr=e.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  XPathPathExpr path=XPathReference.getPathExpr(nodesetStr);
  itemset.nodesetExpr=new XPathConditional(path);
  itemset.contextRef=getFormElementRef(qparent);
  itemset.nodesetRef=FormInstance.unpackReference(getAbsRef(new XPathReference(path.getReference(true)),itemset.contextRef));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (""String_Node_Str"".equals(childName)) {
      String labelXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      boolean labelItext=false;
      if (labelXpath != null) {
        if (labelXpath.startsWith(""String_Node_Str"") && labelXpath.endsWith(""String_Node_Str"")) {
          labelXpath=labelXpath.substring(""String_Node_Str"".length(),labelXpath.indexOf(""String_Node_Str""));
          labelItext=true;
        }
      }
 else {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr labelPath=XPathReference.getPathExpr(labelXpath);
      itemset.labelRef=FormInstance.unpackReference(getAbsRef(new XPathReference(labelPath),itemset.nodesetRef));
      itemset.labelExpr=new XPathConditional(labelPath);
      itemset.labelIsItext=labelItext;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String copyRef=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (copyRef == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      itemset.copyRef=FormInstance.unpackReference(getAbsRef(new XPathReference(copyRef),itemset.nodesetRef));
      itemset.copyMode=true;
    }
 else     if (""String_Node_Str"".equals(childName)) {
      String valueXpath=child.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      if (valueXpath == null) {
        throw new XFormParseException(""String_Node_Str"");
      }
      XPathPathExpr valuePath=XPathReference.getPathExpr(valueXpath);
      itemset.valueRef=FormInstance.unpackReference(getAbsRef(new XPathReference(valuePath),itemset.nodesetRef));
      itemset.valueExpr=new XPathConditional(valuePath);
      itemset.copyMode=false;
    }
  }
  if (itemset.labelRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
 else   if (itemset.copyRef == null && itemset.valueRef == null) {
    throw new XFormParseException(""String_Node_Str"");
  }
  q.setDynamicChoices(itemset);
  itemsets.addElement(itemset);
}",0.9819548872180452
147039,"public String[] getHeaders(boolean detailed){
  Text[] text;
  text=shortDetail.getHeaders();
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(instance);
  }
  return output;
}","public String[] getHeaders(boolean detailed){
  Text[] text;
  if (!detailed) {
    text=shortDetail.getHeaders();
  }
 else {
    text=longDetail.getHeaders();
  }
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(instance);
  }
  return output;
}",0.8725314183123878
147040,"public String[] getLongFields(E e){
  Text[] text=shortDetail.getTemplates();
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(instance);
  }
  return output;
}","public String[] getLongFields(E e){
  loader.prepare(e);
  FormInstance specificInstance=loader.loadInstance(longDetail.getInstance());
  Text[] text=longDetail.getTemplates();
  String[] output=new String[text.length];
  for (int i=0; i < output.length; ++i) {
    output[i]=text[i].evaluate(specificInstance);
  }
  return output;
}",0.7878787878787878
147041,"public void prepare(PatientReferral r){
  this.r=r;
  this.c=null;
}","public void prepare(PatientReferral r){
  this.r=r;
  preloader=new PatientReferralPreloader(r);
  this.c=null;
}",0.7513812154696132
147042,"protected Object resolveReferenceData(String reference,String key){
  String refType=references.get(reference).toLowerCase();
  if (refType.equals(""String_Node_Str"")) {
  }
 else   if (refType.equals(""String_Node_Str"")) {
    return getCase().getProperty(key);
  }
  return null;
}","protected Object resolveReferenceData(String reference,String key){
  String refType=references.get(reference).toLowerCase();
  if (refType.equals(""String_Node_Str"")) {
    return preloader.handlePreload(key);
  }
 else   if (refType.equals(""String_Node_Str"")) {
    return getCase().getProperty(key);
  }
  return null;
}",0.9320066334991708
147043,"public String evaluate(FormInstance context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument == null) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
XPathExpression expression=XPathParseTool.parseXPath(argument);
EvaluationContext temp=new EvaluationContext(new EvaluationContext(),context.getRoot().getRef());
return (String)expression.eval(context,temp);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (Enumeration en=arguments.elements(); en.hasMoreElements(); ) {
ret+=((Text)en.nextElement()).evaluate() + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}","public String evaluate(FormInstance context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument.equals(""String_Node_Str"")) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
XPathExpression expression=XPathParseTool.parseXPath(argument);
EvaluationContext temp=new EvaluationContext(new EvaluationContext(),context.getRoot().getRef());
for (Enumeration en=arguments.keys(); en.hasMoreElements(); ) {
String key=(String)en.nextElement();
temp.setVariable(key,arguments.get(key));
}
return (String)expression.eval(context,temp);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (Enumeration en=arguments.elements(); en.hasMoreElements(); ) {
ret+=((Text)en.nextElement()).evaluate() + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}",0.8988128886376484
147044,"public static Long toInt(Object o){
  Double val=toNumeric(o);
  return new Long((long)Math.floor(val.doubleValue()));
}","public static Double toInt(Object o){
  Double val=toNumeric(o);
  if (val.isInfinite() || val.isNaN()) {
    return val;
  }
 else   if (val.doubleValue() >= Long.MAX_VALUE || val.doubleValue() <= Long.MIN_VALUE) {
    return val;
  }
 else {
    long l=val.longValue();
    Double dbl=new Double(l);
    if (l == 0 && (val.doubleValue() < 0. || val.equals(new Double(-0.)))) {
      dbl=new Double(-0.);
    }
    return dbl;
  }
}",0.104882459312839
147045,"public static Date toDate(Object o){
  if (o instanceof Double) {
    double d=((Double)o).doubleValue();
    if (Math.abs(d - (int)d) > 1.0e-12) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    o=toInt(o);
  }
  if (o instanceof Long) {
    Date dt=DateUtils.getDate(1970,1,1);
    dt.setTime(dt.getTime() + ((Long)o).longValue() * 86400000l + 43200000l);
    return DateUtils.roundDate(dt);
  }
 else   if (o instanceof String) {
    Date d=DateUtils.parseDate((String)o);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}","public static Date toDate(Object o){
  if (o instanceof Double) {
    Double n=toInt(o);
    if (n.isInfinite() || n.isNaN() || n.doubleValue() > Integer.MAX_VALUE || n.doubleValue() < Integer.MIN_VALUE) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
    return DateUtils.dateAdd(DateUtils.getDate(1970,1,1),n.intValue());
  }
 else   if (o instanceof String) {
    Date d=DateUtils.parseDate((String)o);
    if (d == null) {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
 else {
      return d;
    }
  }
 else   if (o instanceof Date) {
    return DateUtils.roundDate((Date)o);
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}",0.7678812415654521
147046,"public TreeReference getRef(){
  TreeElement elem=this;
  TreeReference ref=TreeReference.selfRef();
  while (elem != null) {
    TreeReference step;
    if (name != null) {
      step=TreeReference.selfRef();
      step.add(this.name,this.multiplicity);
    }
 else {
      step=TreeReference.rootRef();
    }
    ref=ref.parent(step);
    elem=elem.parent;
  }
  return ref;
}","public TreeReference getRef(){
  TreeElement elem=this;
  TreeReference ref=TreeReference.selfRef();
  while (elem != null) {
    TreeReference step;
    if (elem.name != null) {
      step=TreeReference.selfRef();
      step.add(elem.name,elem.multiplicity);
    }
 else {
      step=TreeReference.rootRef();
    }
    ref=ref.parent(step);
    elem=elem.parent;
  }
  return ref;
}",0.9724047306176083
147047,"public static Object getRefValue(FormInstance model,TreeReference ref){
  TreeElement node=((FormInstance)model).resolveReference(ref);
  if (node == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString() + ""String_Node_Str"");
  }
  return unpackValue(node.isRelevant() ? node.getValue() : null);
}","public static Object getRefValue(FormInstance model,TreeReference ref){
  TreeElement node=model.resolveReference(ref);
  if (node == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString() + ""String_Node_Str"");
  }
  return unpackValue(node.isRelevant() ? node.getValue() : null);
}",0.9592476489028212
147048,"public String substituteStringArgs(String templateStr){
  return form.fillTemplateString(templateStr,index.getReference());
}","public String substituteStringArgs(String templateStr){
  if (templateStr == null) {
    return null;
  }
  return form.fillTemplateString(templateStr,index.getReference());
}",0.8333333333333334
147049,"public void removeAll(){
  storage.removeAll();
}","public void removeAll(EntityFilter ef){
  storage.removeAll(ef);
}",0.8521739130434782
147050,"private void processCaseReferral(TreeElement referral,Case c,Date date) throws MalformedCaseModelException {
  Vector referralIds=referral.getChildrenWithName(""String_Node_Str"");
  if (referralIds.size() < 1) {
    throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
  }
  String referralId=(String)serializer.serializeAnswerData(((TreeElement)referralIds.elementAt(0)).getValue());
  Date followup=DateUtils.dateAdd(date,3);
  Vector followupDates=referral.getChildrenWithName(""String_Node_Str"");
  if (followupDates.size() >= 1 && ((TreeElement)followupDates.elementAt(0)).isRelevant()) {
    followup=(Date)(((TreeElement)followupDates.elementAt(0))).getValue().getValue();
  }
  Vector childElements=referral.getChildren();
  for (int i=0; i < childElements.size(); ++i) {
    TreeElement kid=(TreeElement)childElements.elementAt(i);
    if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String typeString=(String)serializer.serializeAnswerData(((TreeElement)types.elementAt(0)).getValue());
      Vector referralTypeList=DateUtils.split(typeString,""String_Node_Str"",false);
      for (int ir=0; ir < referralTypeList.size(); ++ir) {
        String referralType=(String)referralTypeList.elementAt(ir);
        PatientReferral r=new PatientReferral(referralType,date,referralId,c.getCaseId(),followup);
        commit(r);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String refType=(String)serializer.serializeAnswerData((((TreeElement)types.elementAt(0)).getValue()));
      PatientReferral r=getReferral(referralId,refType);
      r.setDateDue(followup);
      Vector dateCloseds=kid.getChildrenWithName(""String_Node_Str"");
      if (dateCloseds.size() > 0) {
        r.close();
      }
      commit(r);
    }
  }
}","private void processCaseReferral(TreeElement referral,Case c,Date date) throws MalformedCaseModelException {
  Vector referralIds=referral.getChildrenWithName(""String_Node_Str"");
  if (referralIds.size() < 1) {
    throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
  }
  String referralId=(String)serializer.serializeAnswerData(((TreeElement)referralIds.elementAt(0)).getValue());
  Date followup=DateUtils.dateAdd(date,3);
  Vector followupDates=referral.getChildrenWithName(""String_Node_Str"");
  if (followupDates.size() >= 1 && ((TreeElement)followupDates.elementAt(0)).isRelevant()) {
    followup=(Date)(((TreeElement)followupDates.elementAt(0))).getValue().getValue();
  }
  Vector childElements=referral.getChildren();
  for (int i=0; i < childElements.size(); ++i) {
    TreeElement kid=(TreeElement)childElements.elementAt(i);
    if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String typeString=(String)serializer.serializeAnswerData(((TreeElement)types.elementAt(0)).getValue());
      Vector referralTypeList=DateUtils.split(typeString,""String_Node_Str"",false);
      for (int ir=0; ir < referralTypeList.size(); ++ir) {
        String referralType=(String)referralTypeList.elementAt(ir);
        PatientReferral r=new PatientReferral(referralType,date,referralId,c.getCaseId(),followup);
        commit(r);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      Vector types=kid.getChildrenWithName(""String_Node_Str"");
      if (types.size() < 1) {
        throw new MalformedCaseModelException(""String_Node_Str"",""String_Node_Str"");
      }
      String refType=(String)serializer.serializeAnswerData((((TreeElement)types.elementAt(0)).getValue()));
      PatientReferral r=getReferral(referralId,refType);
      r.setDateDue(followup);
      Vector dateCloseds=kid.getChildrenWithName(""String_Node_Str"");
      if (dateCloseds.size() > 0 && ((TreeElement)dateCloseds.elementAt(0)).isRelevant()) {
        r.close();
      }
      commit(r);
    }
  }
}",0.9871382636655948
147051,"public Object getMetaData(String fieldName){
  if (fieldName.equals(""String_Node_Str"")) {
    return name;
  }
  if (fieldName.equals(""String_Node_Str"")) {
    return model.schema;
  }
 else {
    throw new IllegalArgumentException();
  }
}","public Object getMetaData(String fieldName){
  if (fieldName.equals(""String_Node_Str"")) {
    return name;
  }
  if (fieldName.equals(""String_Node_Str"")) {
    return ExtUtil.emptyIfNull(model.schema);
  }
 else {
    throw new IllegalArgumentException();
  }
}",0.7105788423153693
147052,"public IFormEntryView getFormEntryView(String viewType,FormEntryModel model,FormEntryController controller){
  return new Chatterbox(viewType,model,controller);
}","public IFormEntryView getFormEntryView(FormEntryModel model,FormEntryController controller){
  return new Chatterbox(title,model,controller);
}",0.918032786885246
147053,"/** 
 * Write an object to the store. Will either add a new record, or update the existing record (if one exists) for the object's ID. This function should never be used in conjunction with add() and update() within the same StorageUtility
 * @param p object to store
 * @throws StorageFullException if there is not enough room to store the object
 */
public void write(Persistable p) throws StorageFullException {
  typeCheck(p);
  RMSRecordLoc newLoc=null;
synchronized (getAccessLock()) {
    RMSStorageInfo info=getInfoRecord();
    int id=p.getID();
    if (id == -1 && allocateIDs) {
      id=info.nextRecordID;
      p.setID(id);
      info.nextRecordID++;
    }
    byte[] data=ExtUtil.serialize(p);
    Hashtable idIndex=getIDIndexRecord();
    boolean recordExists=idIndex.containsKey(new Integer(id));
    setDirty();
    int bytesNeededEstimate=(recordExists ? 20 : 40);
    if (!setReserveBuffer(bytesNeededEstimate)) {
      setClean();
      throw new StorageFullException();
    }
    if (recordExists) {
      RMSRecordLoc loc=(RMSRecordLoc)idIndex.get(new Integer(id));
      newLoc=updateRecord(loc,data,info);
    }
 else {
      newLoc=addRecord(data,info);
      if (newLoc != null) {
        info.numRecords++;
      }
    }
    setReserveBuffer(0);
    if (newLoc == null) {
      setClean();
      throw new StorageFullException();
    }
    idIndex.put(new Integer(id),newLoc);
    commitIndex(info,idIndex);
    setClean();
    storageModified();
  }
}","/** 
 * Write an object to the store. Will either add a new record, or update the existing record (if one exists) for the object's ID. This function should never be used in conjunction with add() and update() within the same StorageUtility
 * @param p object to store
 * @throws StorageFullException if there is not enough room to store the object
 */
public void write(Persistable p) throws StorageFullException {
  typeCheck(p);
  RMSRecordLoc newLoc=null;
synchronized (getAccessLock()) {
    RMSStorageInfo info=getInfoRecord();
    int id=p.getID();
    if (allocateIDs) {
      if (id == -1) {
        id=info.nextRecordID;
        p.setID(id);
        info.nextRecordID++;
      }
 else       if (id >= info.nextRecordID) {
        info.nextRecordID=id + 1;
      }
    }
    byte[] data=ExtUtil.serialize(p);
    Hashtable idIndex=getIDIndexRecord();
    boolean recordExists=idIndex.containsKey(new Integer(id));
    setDirty();
    int bytesNeededEstimate=(recordExists ? 20 : 40);
    if (!setReserveBuffer(bytesNeededEstimate)) {
      setClean();
      throw new StorageFullException();
    }
    if (recordExists) {
      RMSRecordLoc loc=(RMSRecordLoc)idIndex.get(new Integer(id));
      newLoc=updateRecord(loc,data,info);
    }
 else {
      newLoc=addRecord(data,info);
      if (newLoc != null) {
        info.numRecords++;
      }
    }
    setReserveBuffer(0);
    if (newLoc == null) {
      setClean();
      throw new StorageFullException();
    }
    idIndex.put(new Integer(id),newLoc);
    commitIndex(info,idIndex);
    setClean();
    storageModified();
  }
}",0.924682099771764
147054,"public static Alert showError(String title,String message,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,null,AlertType.ERROR);
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    display.setCurrent(alert);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
  return alert;
}","public static Alert showError(String title,String message,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,null,AlertType.ERROR);
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    display.setCurrent(alert);
  }
 else {
    display.setCurrent(alert,next);
  }
  return alert;
}",0.9284994964753271
147055,"private static Selection getSelection(String choice,QuestionDef q){
  Selection s=new Selection(choice);
  if (q != null) {
    q.localizeSelectMap(null);
    int index=q.getSelectedItemIndex(choice);
    s.attachQuestionDef(q);
    return (index != -1 ? s : null);
  }
  return s;
}","private static Selection getSelection(String choice,QuestionDef q){
  Selection s=new Selection(choice);
  if (q != null) {
    if (q.getSelectItems() == null)     q.localizeSelectMap(null);
    int index=q.getSelectedItemIndex(choice);
    s.attachQuestionDef(q);
    return (index != -1 ? s : null);
  }
  return s;
}",0.8039867109634552
147056,"public String getName(){
  return null;
}","public String getName(){
  return getType();
}",0.8505747126436781
147057,"public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k + 1);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}","public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}",0.9020825721592984
147058,"public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}","public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,k);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i++;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}",0.901666361472258
147059,"public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k + 1);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}","public static void populateNode(TreeElement node,TreeElement incoming,TreeReference ref,FormDef f){
  if (node.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      node.setValue(null);
    }
 else     if (node.dataType == Constants.DATATYPE_TEXT || node.dataType == Constants.DATATYPE_NULL) {
      node.setValue(value);
    }
 else {
      String textVal=(String)value.getValue();
      IAnswerData typedVal=RestoreUtils.xfFact.parseData(textVal,node.dataType,ref,f);
      node.setValue(typedVal);
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      if (child.repeatable && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        node.removeChildAt(i);
        i--;
      }
    }
    if (node.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < node.getNumChildren(); j++) {
          child2=(TreeElement)node.getChildren().elementAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == node.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        node.removeChildAt(j);
        node.getChildren().insertElementAt(child2,i);
      }
    }
    for (int i=0; i < node.getNumChildren(); i++) {
      TreeElement child=(TreeElement)node.getChildren().elementAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      TreeReference childRef=ref.clone();
      childRef.add(child.getName(),TreeReference.INDEX_UNBOUND);
      if (child.repeatable) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          node.getChildren().insertElementAt(newChild,i + k + 1);
          populateNode(newChild,(TreeElement)newChildren.elementAt(k),childRef,f);
          i+=k + 1;
        }
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          populateNode(child,(TreeElement)newChildren.elementAt(0),childRef,f);
        }
      }
    }
  }
}",0.999269272926562
147060,"public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String MD5=null;
  try {
    Enumeration headers=req.getHeaderNames();
    String postData=""String_Node_Str"";
    long totalBytesRead=0;
    while (headers.hasMoreElements()) {
      String nextName=(String)headers.nextElement();
      String nextValue=req.getHeader(nextName);
      if (nextName.equalsIgnoreCase(""String_Node_Str"")) {
        resp.addHeader(""String_Node_Str"",nextValue);
        MD5=nextValue;
        if (md5toLastByteRead.containsKey(MD5)) {
          totalBytesRead=md5toLastByteRead.get(MD5).longValue();
        }
 else {
          md5toLastByteRead.put(MD5,new Long(0));
        }
      }
      postData+=nextName + ""String_Node_Str"" + nextValue+ ""String_Node_Str"";
    }
    int bufSize=1400;
    byte[] temp=new byte[bufSize];
    InputStream stream=req.getInputStream();
    int bytesRead=stream.read(temp);
    ByteArrayOutputStream body=new ByteArrayOutputStream();
    File f;
    if (MD5 != null) {
      f=new File(_storageRoot + MD5 + ""String_Node_Str"");
    }
 else     f=new File(this.getNewFileName(""String_Node_Str""));
    if (!f.exists())     f.createNewFile();
    OutputStream output=new BufferedOutputStream(new FileOutputStream(f,true));
    try {
      while (bytesRead != -1) {
        totalBytesRead+=bytesRead;
        if (MD5 != null)         md5toLastByteRead.put(MD5,new Long(totalBytesRead));
        if (bytesRead < bufSize) {
          byte[] newTemp=new byte[bytesRead];
          for (int i=0; i < bytesRead; i++) {
            newTemp[i]=temp[i];
          }
          output.write(newTemp);
          body.write(newTemp);
        }
 else {
          output.write(temp);
          body.write(temp);
        }
        bytesRead=req.getInputStream().read(temp);
      }
    }
  finally {
      output.close();
    }
    if (MD5 != null) {
      String localMD5=hashcode(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
      if (localMD5 != null && !MD5.equalsIgnoreCase(localMD5)) {
        return;
      }
 else {
        File g=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        File h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        for (int i=1; h.exists(); i++) {
          h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str""+ i+ ""String_Node_Str"");
        }
        g.renameTo(h);
        md5toLastByteRead.remove(MD5);
        body.close();
        body=new ByteArrayOutputStream();
        InputStream in=new BufferedInputStream(new FileInputStream(h));
        bufSize=8192;
        temp=new byte[bufSize];
        bytesRead=in.read(temp);
        while (bytesRead != -1) {
          if (bytesRead < bufSize) {
            byte[] newTemp=new byte[bytesRead];
            for (int i=0; i < bytesRead; i++) {
              newTemp[i]=temp[i];
            }
            body.write(newTemp);
          }
 else {
            body.write(temp);
          }
          bytesRead=in.read(temp);
        }
        body.flush();
      }
    }
    postData+=""String_Node_Str"" + totalBytesRead + ""String_Node_Str"";
    postData+=new String(body.toByteArray());
    parseAndSaveHtml(req,body.toByteArray());
    postData+=_lastPostParsable=trim(postData);
    _lastFileName=saveFile(postData);
  }
 catch (  Exception e) {
    logException(e);
    _lastError=HEADER + ""String_Node_Str"" + e.getMessage();
    _lastError+=""String_Node_Str"";
    e.printStackTrace(resp.getWriter());
  }
}","public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String MD5=null;
  try {
    Enumeration headers=req.getHeaderNames();
    String postData=""String_Node_Str"";
    long totalBytesRead=0;
    while (headers.hasMoreElements()) {
      String nextName=(String)headers.nextElement();
      String nextValue=req.getHeader(nextName);
      if (nextName.equalsIgnoreCase(""String_Node_Str"")) {
        resp.addHeader(""String_Node_Str"",nextValue);
        MD5=nextValue;
        if (md5toLastByteRead.containsKey(MD5)) {
          totalBytesRead=md5toLastByteRead.get(MD5).longValue();
        }
 else {
          md5toLastByteRead.put(MD5,new Long(0));
        }
      }
      postData+=nextName + ""String_Node_Str"" + nextValue+ ""String_Node_Str"";
    }
    int bufSize=1400;
    byte[] temp=new byte[bufSize];
    ByteArrayOutputStream body=new ByteArrayOutputStream();
    File f;
    if (MD5 != null) {
      f=new File(_storageRoot + MD5 + ""String_Node_Str"");
    }
 else     f=new File(this.getNewFileName(""String_Node_Str""));
    if (!f.exists())     f.createNewFile();
    if (!f.canWrite())     throw new IOException(""String_Node_Str"");
    OutputStream output=new BufferedOutputStream(new FileOutputStream(f,true));
    int bytesRead=req.getInputStream().read(temp);
    try {
      while (bytesRead != -1) {
        if (bytesRead < bufSize) {
          byte[] newTemp=new byte[bytesRead];
          for (int i=0; i < bytesRead; i++) {
            newTemp[i]=temp[i];
          }
          output.write(newTemp);
          body.write(newTemp);
        }
 else {
          output.write(temp);
          body.write(temp);
        }
        output.flush();
        totalBytesRead+=bytesRead;
        if (MD5 != null)         md5toLastByteRead.put(MD5,new Long(totalBytesRead));
        bytesRead=req.getInputStream().read(temp);
      }
    }
  finally {
      output.close();
    }
    if (MD5 != null) {
      String localMD5=hashcode(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
      if (localMD5 != null && !MD5.equalsIgnoreCase(localMD5)) {
        return;
      }
 else {
        File g=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        File h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str"");
        for (int i=1; h.exists(); i++) {
          h=new File(_storageRoot + String.valueOf(MD5) + ""String_Node_Str""+ i+ ""String_Node_Str"");
        }
        g.renameTo(h);
        md5toLastByteRead.remove(MD5);
        body.close();
        body=new ByteArrayOutputStream();
        InputStream in=new BufferedInputStream(new FileInputStream(h));
        bufSize=8192;
        temp=new byte[bufSize];
        bytesRead=in.read(temp);
        while (bytesRead != -1) {
          if (bytesRead < bufSize) {
            byte[] newTemp=new byte[bytesRead];
            for (int i=0; i < bytesRead; i++) {
              newTemp[i]=temp[i];
            }
            body.write(newTemp);
          }
 else {
            body.write(temp);
          }
          bytesRead=in.read(temp);
        }
        body.flush();
      }
    }
    postData+=""String_Node_Str"" + totalBytesRead + ""String_Node_Str"";
    postData+=new String(body.toByteArray());
    parseAndSaveHtml(req,body.toByteArray());
    postData+=_lastPostParsable=trim(postData);
    _lastFileName=saveFile(postData);
  }
 catch (  Exception e) {
    logException(e);
    _lastError=HEADER + ""String_Node_Str"" + e.getMessage();
    _lastError+=""String_Node_Str"";
    e.printStackTrace(resp.getWriter());
  }
}",0.8769492486532464
147061,"public void registerService(IService service){
  services.put(service,service.getName());
}","public void registerService(IService service){
  services.put(service.getName(),service);
}",0.912087912087912
147062,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  ExtUtil.read(in,new ExtWrapTagged());
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  pointer=(IDataPointer)ExtUtil.read(in,new ExtWrapTagged());
}",0.9329268292682928
147063,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapList(payloads));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapListPoly(payloads));
}",0.9833333333333332
147064,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  payloads=(Vector)ExtUtil.read(in,new ExtWrapList(new ExtWrapTagged()),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  payloads=(Vector)ExtUtil.read(in,new ExtWrapListPoly(),pf);
}",0.936986301369863
147065,"public int read() throws IOException {
  if (currentStream == -1) {
    throw new IOException(""String_Node_Str"");
  }
  InputStream cur=((InputStream)streams.elementAt(currentStream));
  int next=cur.read();
  if (next != -1) {
    return next;
  }
  while (next != -1 && currentStream + 1 < streams.size()) {
    currentStream++;
    cur=((InputStream)streams.elementAt(currentStream));
    next=cur.read();
  }
  return next;
}","public int read() throws IOException {
  if (currentStream == -1) {
    throw new IOException(""String_Node_Str"");
  }
  InputStream cur=((InputStream)streams.elementAt(currentStream));
  int next=cur.read();
  if (next != -1) {
    return next;
  }
  while (next == -1 && currentStream + 1 < streams.size()) {
    currentStream++;
    cur=((InputStream)streams.elementAt(currentStream));
    next=cur.read();
  }
  return next;
}",0.9976689976689976
147066,"public static PrototypeFactory convertPrototypeFactory(PrototypeFactoryDeprecated pfd){
  PrototypeFactory pf=new PrototypeFactory();
  for (Enumeration e=pfd.prototypes.keys(); e.hasMoreElements(); ) {
    pf.addClass((Class)pfd.prototypes.get(e.nextElement()));
  }
  return pf;
}","public static PrototypeFactory convertPrototypeFactory(PrototypeFactoryDeprecated pfd){
  PrototypeFactory pf=ExtUtil.defaultPrototypes();
  for (Enumeration e=pfd.prototypes.keys(); e.hasMoreElements(); ) {
    pf.addClass((Class)pfd.prototypes.get(e.nextElement()));
  }
  return pf;
}",0.92091388400703
147067,"/** 
 * (non-Javadoc)
 * @see org.javarosa.core.util.clforms.storage.Externalizable#readExternal(DataInputStream)
 */
public void readExternal(DataInputStream in) throws IOException {
  this.name=in.readUTF();
}","/** 
 * (non-Javadoc)
 * @see org.javarosa.core.util.clforms.storage.Externalizable#readExternal(DataInputStream)
 */
public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  this.name=in.readUTF();
}",0.8373015873015873
147068,"public void readExternal(DataInputStream in) throws IOException {
  this.recordId=in.readInt();
  this.size=in.readInt();
}","public void readExternal(DataInputStream in) throws IOException, InstantiationException, IllegalAccessException, UnavailableExternalizerException {
  this.recordId=in.readInt();
  this.size=in.readInt();
}",0.75
147069,"/** 
 */
public IAnswerData handlePreload(String preloadParams){
  IAnswerData returnVal=null;
  if (preloadParams == ""String_Node_Str"") {
    returnVal=new IntegerData(12);
  }
 else {
    int selectorStart=preloadParams.indexOf(""String_Node_Str"");
    if (selectorStart == -1) {
      returnVal=(IAnswerData)patient.getRecord(preloadParams);
    }
 else {
      String type=preloadParams.substring(0,selectorStart);
      String selector=preloadParams.substring(selectorStart,preloadParams.length());
      Vector data=patient.getRecordSet(type,selector);
      returnVal=new NumericListData();
      returnVal.setValue(data);
    }
  }
  return returnVal;
}","/** 
 */
public IAnswerData handlePreload(String preloadParams){
  IAnswerData returnVal=null;
  if (preloadParams == ""String_Node_Str"") {
    returnVal=new IntegerData(12);
  }
 else   if (""String_Node_Str"".equals(preloadParams)) {
    returnVal=new ImmunizationAnswerData(patient.getVaccinations());
  }
 else {
    int selectorStart=preloadParams.indexOf(""String_Node_Str"");
    if (selectorStart == -1) {
      returnVal=(IAnswerData)patient.getRecord(preloadParams);
    }
 else {
      String type=preloadParams.substring(0,selectorStart);
      String selector=preloadParams.substring(selectorStart,preloadParams.length());
      Vector data=patient.getRecordSet(type,selector);
      returnVal=new NumericListData();
      returnVal.setValue(data);
    }
  }
  return returnVal;
}",0.9116022099447514
147070,"public boolean handlePostProcess(IFormDataModel model,IDataReference ref,String params){
  IAnswerData data=model.getDataValue(ref);
  if (""String_Node_Str"".equals(params)) {
    patient.setVaccinations((ImmunizationData)data);
    return true;
  }
 else {
  }
  return false;
}","public boolean handlePostProcess(IFormDataModel model,IDataReference ref,String params){
  IAnswerData data=model.getDataValue(ref);
  if (""String_Node_Str"".equals(params)) {
    patient.setVaccinations((ImmunizationData)((ImmunizationAnswerData)data).getValue());
    return true;
  }
 else {
  }
  return false;
}",0.924114671163575
147071,"public boolean canSerialize(IAnswerData data){
  if (data.getClass() == StringData.class || data.getClass() == DateData.class || data.getClass() == SelectMultiData.class || data.getClass() == SelectOneData.class) {
    return true;
  }
 else {
    return false;
  }
}","public boolean canSerialize(IAnswerData data){
  if (data instanceof StringData || data instanceof DateData || data instanceof SelectMultiData|| data instanceof SelectOneData) {
    return true;
  }
 else {
    return false;
  }
}",0.4587525150905432
147072,"public static IAnswerData getAnswerData(DataBinding binding,Element node){
  String value;
switch (binding.getDataType()) {
case Constants.DATATYPE_DATE:
    value=(String)node.getChild(0);
  return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_DATE_TIME:
value=(String)node.getChild(0);
return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_INTEGER:
value=(String)node.getChild(0);
return new IntegerData(Integer.parseInt(value));
case Constants.DATATYPE_TEXT:
value=(String)node.getChild(0);
return new StringData(value);
case Constants.DATATYPE_TIME:
return null;
}
return null;
}","public static IAnswerData getAnswerData(DataBinding binding,Element node){
  String value=XFormParser.getXMLText(node,false);
  if (value == null)   return null;
switch (binding.getDataType()) {
case Constants.DATATYPE_DATE:
    return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_DATE_TIME:
  return new DateData(DateUtils.getDateFromString(value));
case Constants.DATATYPE_INTEGER:
return new IntegerData(Integer.parseInt(value));
case Constants.DATATYPE_TEXT:
return new StringData(value);
case Constants.DATATYPE_TIME:
return null;
}
return null;
}",0.8334700574241182
147073,"public ConstellationNamesDataLoader(String filePath) throws Exception {
  this.constellationNames=new ArrayList();
  InputStream inputStream=getClass().getResourceAsStream(filePath);
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
  String strLine;
  while ((strLine=reader.readLine()) != null) {
    if (!strLine.isEmpty()) {
      String[] values=strLine.split(""String_Node_Str"");
      Point2D coord=new Point2D.Double();
      coord.setLocation(Double.parseDouble(values[0]) / 1000.0D,Double.parseDouble(values[1]) / 100.0D);
      this.constellationNames.add(new ConstellationName(values[2],values[3],coord));
    }
  }
  reader.close();
  inputStream.close();
}","public ConstellationNamesDataLoader(String filePath) throws Exception {
  this.constellationNames=new ArrayList();
  InputStream inputStream=getClass().getResourceAsStream(filePath);
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
  String strLine;
  while ((strLine=reader.readLine()) != null) {
    if (!strLine.isEmpty()) {
      String[] values=strLine.split(""String_Node_Str"");
      Point2D coord=new Point2D.Double();
      coord.setLocation(Double.parseDouble(values[0]) / 1000.0D,Double.parseDouble(values[1]) / 100.0D);
      this.constellationNames.add(new ConstellationName(values[2],values[3],coord));
    }
  }
  reader.close();
  inputStream.close();
}",0.9872881355932204
147074,"/** 
 * Obtains an instance of   {@code ZoneOffset} specifying the total offset in seconds<p> The offset must be in the range  {@code -18:00} to {@code +18:00}, which corresponds to -64800 to +64800.
 * @param totalSeconds the total time-zone offset in seconds, from -64800 to +64800
 * @return the ZoneOffset, not null
 * @throws DateTimeException if the offset is not in the required range
 */
public static ZoneOffset ofTotalSeconds(int totalSeconds){
  if (Math.abs(totalSeconds) > MAX_SECONDS) {
    throw new DateTimeException(""String_Node_Str"");
  }
  if (totalSeconds % (15 * SECONDS_PER_MINUTE) == 0) {
    Integer totalSecs=totalSeconds;
    ZoneOffset result=SECONDS_CACHE.get(totalSecs);
    if (result == null) {
      result=new ZoneOffset(totalSeconds);
      SECONDS_CACHE.putIfAbsent(totalSecs,result);
      result=SECONDS_CACHE.get(totalSecs);
      ID_CACHE.putIfAbsent(result.getId(),result);
    }
    return result;
  }
 else {
    return new ZoneOffset(totalSeconds);
  }
}","/** 
 * Obtains an instance of   {@code ZoneOffset} specifying the total offset in seconds<p> The offset must be in the range  {@code -18:00} to {@code +18:00}, which corresponds to -64800 to +64800.
 * @param totalSeconds the total time-zone offset in seconds, from -64800 to +64800
 * @return the ZoneOffset, not null
 * @throws DateTimeException if the offset is not in the required range
 */
public static ZoneOffset ofTotalSeconds(int totalSeconds){
  if (Math.abs(totalSeconds) > MAX_SECONDS) {
    throw new DateTimeException(""String_Node_Str"");
  }
  if (totalSeconds % (15 * SECONDS_PER_MINUTE) == 0) {
    Integer totalSecs=totalSeconds;
    ZoneOffset result=SECONDS_CACHE.get(totalSecs);
    if (result == null) {
      result=new ZoneOffset(totalSeconds);
      SECONDS_CACHE.put(totalSecs,result);
      result=SECONDS_CACHE.get(totalSecs);
      ID_CACHE.put(result.getId(),result);
    }
    return result;
  }
 else {
    return new ZoneOffset(totalSeconds);
  }
}",0.9919110212335692
147075,"/** 
 * Creates an instance.
 */
protected Chrono(){
  CHRONOS_BY_ID.putIfAbsent(this.getId(),this);
  String type=this.getCalendarType();
  if (type != null) {
    CHRONOS_BY_TYPE.putIfAbsent(type,this);
  }
}","/** 
 * Creates an instance.
 */
protected Chrono(){
  CHRONOS_BY_ID.put(this.getId(),this);
  String type=this.getCalendarType();
  if (type != null) {
    CHRONOS_BY_TYPE.put(type,this);
  }
}",0.9603960396039604
147076,"/** 
 * Clones this builder, creating a new independent copy referring to the same map of fields and objects.
 * @return the cloned builder, not null
 */
@Override public DateTimeBuilder clone(){
  DateTimeBuilder dtb=new DateTimeBuilder();
  dtb.objects.addAll(this.objects);
  dtb.standardFields.putAll(this.standardFields);
  dtb.standardFields.putAll(this.standardFields);
  if (this.otherFields != null) {
    dtb.otherFields.putAll(this.otherFields);
  }
  return dtb;
}","/** 
 * Clones this builder, creating a new independent copy referring to the same map of fields and objects.
 * @return the cloned builder, not null
 */
public DateTimeBuilder clone(){
  DateTimeBuilder dtb=new DateTimeBuilder();
  dtb.objects.addAll(this.objects);
  dtb.standardFields.putAll(this.standardFields);
  dtb.standardFields.putAll(this.standardFields);
  if (this.otherFields != null) {
    dtb.otherFields.putAll(this.otherFields);
  }
  return dtb;
}",0.989384288747346
147077,"public String browseForFolder(Frame parent,String description,boolean allowCreate){
  String defaultDir=Preferences.userNodeForPackage(TheApp.class).get(""String_Node_Str"",""String_Node_Str"");
  dlog.setCurrentDirectory(new File(defaultDir));
  dlog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  if (!description.equals(""String_Node_Str"")) {
    dlog.setDialogTitle(description);
  }
  String outFilename=null;
  Frame topFrame=(parent == null) ? TheApp.getAppFrame() : parent;
  for (; ; ) {
    dlog.setSelectedFile(new File(""String_Node_Str""));
    int result;
    if (allowCreate)     result=dlog.showSaveDialog(topFrame);
 else     result=dlog.showOpenDialog(topFrame);
    outFilename=null;
    if (result == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null)     outFilename=dlog.getSelectedFile().getAbsolutePath();
    break;
  }
  dlog.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (outFilename != null) {
    String workDirectoryString=dlog.getSelectedFile().getParent();
    setWorkingDirectoryPreference(workDirectoryString);
  }
  return outFilename;
}","public String browseForFolder(Frame parent,String description,boolean allowCreate){
  String defaultDir=Preferences.userNodeForPackage(TheApp.class).get(""String_Node_Str"",""String_Node_Str"");
  dlog.setCurrentDirectory(new File(defaultDir));
  dlog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  if (!description.equals(""String_Node_Str"")) {
    dlog.setDialogTitle(description);
  }
  String outFilename=null;
  Frame topFrame=(parent == null) ? TheApp.getAppFrame() : parent;
  for (; ; ) {
    dlog.setSelectedFile(new File(""String_Node_Str""));
    int result;
    if (allowCreate)     result=dlog.showSaveDialog(topFrame);
 else     result=dlog.showOpenDialog(topFrame);
    outFilename=null;
    if (result == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null)     outFilename=dlog.getSelectedFile().getAbsolutePath();
    break;
  }
  if (outFilename != null) {
    String workDirectoryString=dlog.getSelectedFile().getParent();
    setWorkingDirectoryPreference(workDirectoryString);
  }
  dlog.setFileSelectionMode(JFileChooser.FILES_ONLY);
  return outFilename;
}",0.8487626031164069
147078,"static JSONObject createAddObjectCommandJson(JSONObject newObject){
  JSONObject commandJson=new JSONObject();
  commandJson.put(""String_Node_Str"",""String_Node_Str"");
  commandJson.put(""String_Node_Str"",newObject.get(""String_Node_Str""));
  commandJson.put(""String_Node_Str"",newObject);
  return commandJson;
}","static JSONObject createAddObjectCommandJson(JSONObject newObject){
  JSONObject commandJson=new JSONObject();
  commandJson.put(""String_Node_Str"",""String_Node_Str"");
  if (newObject.get(""String_Node_Str"") != null)   commandJson.put(""String_Node_Str"",newObject.get(""String_Node_Str""));
 else {
    JSONObject jObj=(JSONObject)newObject.get(""String_Node_Str"");
    commandJson.put(""String_Node_Str"",jObj.get(""String_Node_Str""));
  }
  commandJson.put(""String_Node_Str"",newObject);
  return commandJson;
}",0.7610837438423645
147079,"private void handleJson(JSONObject jsonObject){
  String msgType=(String)jsonObject.get(""String_Node_Str"");
  if (msgType != null) {
    if (msgType.equalsIgnoreCase(""String_Node_Str"")) {
      if (jsonObject.get(""String_Node_Str"") != null) {
        double frameRenderTimeInMillis=JSONMessageHandler.convertObjectFromJsonToDouble(jsonObject.get(""String_Node_Str""));
        int frameRate=(int)(frameRenderTimeInMillis * 1.5);
        if (frameRate > 30)         Preferences.userNodeForPackage(TheApp.class).put(""String_Node_Str"",String.valueOf(frameRate));
        return;
      }
      if (debugLevel > 1) {
        String msg=""String_Node_Str"" + jsonObject.get(""String_Node_Str"") + ""String_Node_Str""+ jsonObject.get(""String_Node_Str"")+ ""String_Node_Str"";
        double rendertimeAverage=((Double)jsonObject.get(""String_Node_Str"")) / ((Long)jsonObject.get(""String_Node_Str""));
        OpenSimLogger.logMessage(msg + ""String_Node_Str"" + (int)1000 / rendertimeAverage + ""String_Node_Str"",OpenSimLogger.INFO);
      }
      return;
    }
    if (msgType.equalsIgnoreCase(""String_Node_Str"")) {
      String objType=(String)jsonObject.get(""String_Node_Str"");
      if (objType != null && objType.equalsIgnoreCase(""String_Node_Str"")) {
        JSONArray uuids=(JSONArray)jsonObject.get(""String_Node_Str"");
        JSONArray positions=(JSONArray)jsonObject.get(""String_Node_Str"");
        Enumeration<ModelVisualizationJson> modelJsons=mapModelsToJsons.elements();
        while (modelJsons.hasMoreElements()) {
          ModelVisualizationJson nextModelJson=modelJsons.nextElement();
          String uuidDtring=nextModelJson.getModelUUID().toString();
          int index=uuids.indexOf(uuidDtring);
          if (index >= 0) {
            JSONObject offsetObj=(JSONObject)positions.get(index);
            Vec3 offsetAsVec3=JSONMessageHandler.convertJsonXYZToVec3(offsetObj);
            for (int vindex=0; vindex < 3; vindex++) {
              nextModelJson.getTransformWRTScene().p().set(vindex,offsetAsVec3.get(vindex));
            }
          }
        }
      }
      return;
    }
  }
  Object uuid=jsonObject.get(""String_Node_Str"");
  String uuidString=(String)uuid;
  if (uuidString.length() == 0)   return;
  final OpenSimObject selectedObject=currentJson.findObjectForUUID(uuidString);
  if (selectedObject == null)   return;
  JSONMessageHandler.handleJSON(getCurrentModel(),selectedObject,jsonObject);
}","private void handleJson(JSONObject jsonObject){
  String msgType=(String)jsonObject.get(""String_Node_Str"");
  if (msgType != null) {
    if (msgType.equalsIgnoreCase(""String_Node_Str"")) {
      if (jsonObject.get(""String_Node_Str"") != null) {
        double frameRenderTimeInMillis=JSONMessageHandler.convertObjectFromJsonToDouble(jsonObject.get(""String_Node_Str""));
        int frameRate=(int)(frameRenderTimeInMillis * 1.5);
        if (frameRate > 30)         Preferences.userNodeForPackage(TheApp.class).put(""String_Node_Str"",String.valueOf(frameRate));
        return;
      }
      if (debugLevel > 1) {
        String msg=""String_Node_Str"" + jsonObject.get(""String_Node_Str"") + ""String_Node_Str""+ jsonObject.get(""String_Node_Str"")+ ""String_Node_Str"";
        double rendertimeAverage=((Double)jsonObject.get(""String_Node_Str"")) / ((Long)jsonObject.get(""String_Node_Str""));
        OpenSimLogger.logMessage(msg + ""String_Node_Str"" + (int)1000 / rendertimeAverage + ""String_Node_Str"",OpenSimLogger.INFO);
      }
      return;
    }
    if (msgType.equalsIgnoreCase(""String_Node_Str"")) {
      String objType=(String)jsonObject.get(""String_Node_Str"");
      if (objType != null && objType.equalsIgnoreCase(""String_Node_Str"")) {
        JSONArray uuids=(JSONArray)jsonObject.get(""String_Node_Str"");
        JSONArray positions=(JSONArray)jsonObject.get(""String_Node_Str"");
        Enumeration<ModelVisualizationJson> modelJsons=mapModelsToJsons.elements();
        while (modelJsons.hasMoreElements()) {
          ModelVisualizationJson nextModelJson=modelJsons.nextElement();
          String uuidDtring=nextModelJson.getModelUUID().toString();
          int index=uuids.indexOf(uuidDtring);
          if (index >= 0) {
            JSONObject offsetObj=(JSONObject)positions.get(index);
            Vec3 offsetAsVec3=JSONMessageHandler.convertJsonXYZToVec3(offsetObj);
            for (int vindex=0; vindex < 3; vindex++) {
              nextModelJson.getTransformWRTScene().p().set(vindex,offsetAsVec3.get(vindex));
            }
          }
        }
      }
      return;
    }
    if (msgType.equalsIgnoreCase(""String_Node_Str"")) {
      WebSocketDB.getInstance().finishPendingMessage((String)jsonObject.get(""String_Node_Str""));
      return;
    }
  }
  Object uuid=jsonObject.get(""String_Node_Str"");
  String uuidString=(String)uuid;
  if (uuidString.length() == 0)   return;
  final OpenSimObject selectedObject=currentJson.findObjectForUUID(uuidString);
  if (selectedObject == null)   return;
  JSONMessageHandler.handleJSON(getCurrentModel(),selectedObject,jsonObject);
}",0.9656
147080,"public void addVisualizerObject(JSONObject jsonObject,double[] bounds){
  if (websocketdb != null) {
    websocketdb.broadcastMessageJson(currentJson.createAddObjectCommand(jsonObject,bounds),null);
  }
}","public void addVisualizerObject(JSONObject jsonObject,double[] bounds){
  if (websocketdb != null) {
    boolean wait=true;
    while (websocketdb.isPending(currentJson.getModelUUID()) && wait) {
      try {
        Thread.sleep(500);
        wait=false;
      }
 catch (      InterruptedException ex) {
        Exceptions.printStackTrace(ex);
        wait=false;
      }
    }
    websocketdb.broadcastMessageJson(currentJson.createAddObjectCommand(jsonObject,bounds),null);
  }
}",0.5956204379562043
147081,"/** 
 * Mark an object as selected (on/off).
 */
public void markSelected(SelectedObject selectedObject,boolean highlight,boolean sendEvent,boolean updateStatusDisplayAndRepaint){
  if (highlight)   lookupContents.add(selectedObject.getOpenSimObject());
 else   lookupContents.remove(selectedObject.getOpenSimObject());
  if (websocketdb != null) {
    Model model=selectedObject.getOwnerModel();
    if (highlight) {
      if (selectInVisualizer != null && !selectInVisualizer.equals(selectedObject.getOpenSimObject())) {
        websocketdb.broadcastMessageJson(currentJson.createSelectionJson(selectedObject.getOpenSimObject()),null);
      }
 else       if (selectInVisualizer == null) {
        websocketdb.broadcastMessageJson(currentJson.createSelectionJson(selectedObject.getOpenSimObject()),null);
      }
      selectInVisualizer=selectedObject;
    }
 else {
      if (selectInVisualizer != null) {
        websocketdb.broadcastMessageJson(currentJson.createDeselectionJson(),null);
        selectInVisualizer=null;
      }
    }
  }
  if (updateStatusDisplayAndRepaint) {
    statusDisplaySelectedObjects();
    repaintAll();
  }
  if (sendEvent) {
    ObjectSelectedEvent evnt=new ObjectSelectedEvent(this,selectedObject,highlight);
    setChanged();
    notifyObservers(evnt);
  }
}","/** 
 * Mark an object as selected (on/off).
 */
public void markSelected(SelectedObject selectedObject,boolean highlight,boolean sendEvent,boolean updateStatusDisplayAndRepaint){
  if (highlight)   lookupContents.add(selectedObject.getOpenSimObject());
 else   lookupContents.remove(selectedObject.getOpenSimObject());
  if (websocketdb != null) {
    Model model=selectedObject.getOwnerModel();
    ModelVisualizationJson modelJson=getModelVisualizationJson(model);
    ArrayList<UUID> uuidList=modelJson.findUUIDForObject(selectedObject.getOpenSimObject());
    if (uuidList == null)     return;
    if (highlight) {
      if (selectInVisualizer != null && !selectInVisualizer.equals(selectedObject.getOpenSimObject())) {
        websocketdb.broadcastMessageJson(modelJson.createSelectionJson(selectedObject.getOpenSimObject()),null);
      }
 else       if (selectInVisualizer == null) {
        websocketdb.broadcastMessageJson(modelJson.createSelectionJson(selectedObject.getOpenSimObject()),null);
      }
      selectInVisualizer=selectedObject;
    }
 else {
      if (selectInVisualizer != null) {
        websocketdb.broadcastMessageJson(modelJson.createDeselectionJson(),null);
        selectInVisualizer=null;
      }
    }
  }
  if (updateStatusDisplayAndRepaint) {
    statusDisplaySelectedObjects();
    repaintAll();
  }
  if (sendEvent) {
    ObjectSelectedEvent evnt=new ObjectSelectedEvent(this,selectedObject,highlight);
    setChanged();
    notifyObservers(evnt);
  }
}",0.9146341463414634
147082,"public void broadcastMessageJson(JSONObject msg,VisWebSocket specificSocket){
  msg.put(""String_Node_Str"",UUID.randomUUID().toString());
  if (specificSocket != null) {
    specificSocket.sendVisualizerMessage(msg);
    return;
  }
  int i=0;
  for (  VisWebSocket sock : sockets) {
    if (debug)     System.out.println(""String_Node_Str"" + msg.toJSONString() + ""String_Node_Str"");
    sock.sendVisualizerMessage(msg);
    i++;
  }
}","public void broadcastMessageJson(JSONObject msg,VisWebSocket specificSocket){
  msg.put(""String_Node_Str"",UUID.randomUUID().toString());
  if (msg.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    String modelUUIDString=(String)msg.get(""String_Node_Str"");
    if (!pendingModels.contains(modelUUIDString)) {
      pendingModels.add(modelUUIDString);
    }
  }
  if (specificSocket != null) {
    specificSocket.sendVisualizerMessage(msg);
    return;
  }
  int i=0;
  for (  VisWebSocket sock : sockets) {
    if (debug)     System.out.println(""String_Node_Str"" + msg.toJSONString() + ""String_Node_Str"");
    sock.sendVisualizerMessage(msg);
    i++;
  }
}",0.7908675799086758
147083,"private UUID createJsonForGeometryPath(GeometryPath path,ModelDisplayHints mdh,JSONArray json_geometries,JSONArray json_materials,boolean visible){
  Map<String,Object> mat_json=new LinkedHashMap<String,Object>();
  UUID mat_uuid=UUID.randomUUID();
  mat_json.put(""String_Node_Str"",mat_uuid.toString());
  populatePathMaterialDefaults(mat_json,path);
  mat_json.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  mat_json.put(""String_Node_Str"",true);
  json_materials.add(mat_json);
  Map<String,Object> pathpt_mat_json=new LinkedHashMap<String,Object>();
  UUID pathpt_mat_uuid=UUID.randomUUID();
  pathpt_mat_json.put(""String_Node_Str"",pathpt_mat_uuid.toString());
  populatePathMaterialDefaults(pathpt_mat_json,path);
  pathpt_mat_json.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  json_materials.add(pathpt_mat_json);
  JSONObject pathGeomJson=new JSONObject();
  UUID uuidForPathGeomGeometry=UUID.randomUUID();
  pathGeomJson.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  pathGeomJson.put(""String_Node_Str"",""String_Node_Str"");
  pathGeomJson.put(""String_Node_Str"",actualMuscleDisplayRadius);
  pathGeomJson.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  int numWrapObjects=path.getWrapSet().getSize();
  final PathPointSet pathPointSetNoWrap=path.getPathPointSet();
  json_geometries.add(pathGeomJson);
  JSONArray pathpoint_jsonArr=new JSONArray();
  JSONArray pathpointActive_jsonArr=new JSONArray();
  boolean hasWrapping=(numWrapObjects > 0);
  ArrayPathPoint actualPath=path.getCurrentPath(state);
  AbstractPathPoint firstPoint=pathPointSetNoWrap.get(0);
  mapGeometryPathToPathPointMaterialUUID.put(path,pathpt_mat_uuid);
  UUID pathpoint_uuid=addPathPointObjectToParent(firstPoint,pathpt_mat_uuid.toString(),visible);
  pathpoint_jsonArr.add(pathpoint_uuid.toString());
  pathpointActive_jsonArr.add(true);
  addComponentToUUIDMap(firstPoint,pathpoint_uuid);
  int firstIndex=0;
  int numIntermediatePoints=NUM_PATHPOINTS_PER_WRAP_OBJECT * numWrapObjects;
  for (int ppointSetIndex=1; ppointSetIndex < pathPointSetNoWrap.getSize(); ppointSetIndex++) {
    AbstractPathPoint secondPoint=pathPointSetNoWrap.get(ppointSetIndex);
    int secondIndex=actualPath.findIndex(secondPoint);
    boolean pointAdded=false;
    if (secondIndex == firstIndex + 1 || (firstIndex == -1 && secondIndex != -1)) {
      if (numWrapObjects > 0)       createComputedPathPoints(numIntermediatePoints,firstPoint,secondPoint,pathpoint_jsonArr,pathpointActive_jsonArr);
    }
 else     if (secondIndex == -1) {
      ConditionalPathPoint cpp=ConditionalPathPoint.safeDownCast(secondPoint);
      pathpoint_uuid=addComputedPathPointObjectToParent(ppointSetIndex,pathPointSetNoWrap,pathpt_mat_uuid.toString(),visible);
      pointAdded=true;
      ArrayList<UUID> comp_uuids=new ArrayList<UUID>();
      comp_uuids.add(pathpoint_uuid);
      mapComponentToUUID.put(cpp,comp_uuids);
      mapUUIDToComponent.put(pathpoint_uuid,cpp);
      pathpointActive_jsonArr.add(false);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      firstIndex=secondIndex;
      firstPoint=secondPoint;
    }
 else {
      for (int wrappointIndex=firstIndex + 1; wrappointIndex < secondIndex; wrappointIndex++) {
        AbstractPathPoint nextPathPoint=actualPath.get(wrappointIndex);
        PathWrapPoint pathWrapPoint=PathWrapPoint.safeDownCast(nextPathPoint);
        if (pathWrapPoint != null) {
          ArrayVec3 pathwrap=pathWrapPoint.getWrapPath();
          PhysicalFrame wrapPtsFrame=pathWrapPoint.getParentFrame();
          int size=pathwrap.size();
          if (size >= 1) {
            int[] indicesToUse=new int[NUM_PATHPOINTS_PER_WRAP_OBJECT];
            for (int ndx=0; ndx < NUM_PATHPOINTS_PER_WRAP_OBJECT - 1; ndx++)             indicesToUse[ndx]=ndx * (size - 1) / (NUM_PATHPOINTS_PER_WRAP_OBJECT);
            indicesToUse[NUM_PATHPOINTS_PER_WRAP_OBJECT - 1]=size - 1;
            double step=1.0 / (indicesToUse.length + 1.0);
            JSONObject bodyJson=mapBodyIndicesToJson.get(0);
            JSONArray children=(JSONArray)bodyJson.get(""String_Node_Str"");
            ArrayList<UUID> wrapPointUUIDs=new ArrayList<UUID>();
            for (int j=0; j < indicesToUse.length; j++) {
              Vec3 globalLocation=wrapPtsFrame.findStationLocationInAnotherFrame(state,pathwrap.get(indicesToUse[j]),mapBodyIndicesToFrames.get(0));
              JSONObject bpptInBodyJson=createPathPointObjectJson(null,""String_Node_Str"",false,globalLocation,pathpt_mat_uuid.toString(),false);
              UUID ppt_uuid=UUID.fromString((String)bpptInBodyJson.get(""String_Node_Str""));
              children.add(bpptInBodyJson);
              pathpoint_jsonArr.add(ppt_uuid.toString());
              pathpointActive_jsonArr.add(false);
              wrapPointUUIDs.add(ppt_uuid);
              computedPathPoints.put(ppt_uuid,new ComputedPathPointInfo(firstPoint,secondPoint,step * (j + 1)));
            }
            wrapPathPoints.put(pathWrapPoint,wrapPointUUIDs);
          }
        }
      }
    }
    if (!pointAdded) {
      pathpoint_uuid=addPathPointObjectToParent(secondPoint,pathpt_mat_uuid.toString(),visible && ppointSetIndex == pathPointSetNoWrap.getSize() - 1);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      pathpointActive_jsonArr.add(true);
      addComponentToUUIDMap(secondPoint,pathpoint_uuid);
    }
    if (MovingPathPoint.safeDownCast(secondPoint) != null) {
      movingComponents.put(secondPoint,pathpoint_uuid);
    }
    firstIndex=secondIndex;
    firstPoint=secondPoint;
  }
  if (hasWrapping)   pathsWithWrapping.put(path,pathpoint_jsonArr);
  pathGeomJson.put(""String_Node_Str"",pathpoint_jsonArr.size() - 1);
  JSONObject gndJson=mapBodyIndicesToJson.get(0);
  if (gndJson.get(""String_Node_Str"") == null)   gndJson.put(""String_Node_Str"",new JSONArray());
  JSONArray gndChildren=(JSONArray)gndJson.get(""String_Node_Str"");
  Map<String,Object> obj_json=new LinkedHashMap<String,Object>();
  UUID mesh_uuid=UUID.randomUUID();
  obj_json.put(""String_Node_Str"",mesh_uuid.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  obj_json.put(""String_Node_Str"",path.getAbsolutePathString());
  obj_json.put(""String_Node_Str"",pathpoint_jsonArr);
  obj_json.put(""String_Node_Str"",pathpointActive_jsonArr);
  obj_json.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  gndChildren.add(obj_json);
  obj_json.put(""String_Node_Str"",mat_uuid.toString());
  if (!visible) {
    obj_json.put(""String_Node_Str"",false);
  }
  return mesh_uuid;
}","private UUID createJsonForGeometryPath(GeometryPath path,ModelDisplayHints mdh,JSONArray json_geometries,JSONArray json_materials,boolean visible){
  Map<String,Object> mat_json=new LinkedHashMap<String,Object>();
  UUID mat_uuid=UUID.randomUUID();
  mat_json.put(""String_Node_Str"",mat_uuid.toString());
  populatePathMaterialDefaults(mat_json,path);
  mat_json.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  mat_json.put(""String_Node_Str"",true);
  json_materials.add(mat_json);
  Map<String,Object> pathpt_mat_json=new LinkedHashMap<String,Object>();
  UUID pathpt_mat_uuid=UUID.randomUUID();
  pathpt_mat_json.put(""String_Node_Str"",pathpt_mat_uuid.toString());
  populatePathMaterialDefaults(pathpt_mat_json,path);
  pathpt_mat_json.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  json_materials.add(pathpt_mat_json);
  JSONObject pathGeomJson=new JSONObject();
  UUID uuidForPathGeomGeometry=UUID.randomUUID();
  pathGeomJson.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  pathGeomJson.put(""String_Node_Str"",""String_Node_Str"");
  pathGeomJson.put(""String_Node_Str"",actualMuscleDisplayRadius);
  pathGeomJson.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  int numWrapObjects=path.getWrapSet().getSize();
  final PathPointSet pathPointSetNoWrap=path.getPathPointSet();
  json_geometries.add(pathGeomJson);
  JSONArray pathpoint_jsonArr=new JSONArray();
  JSONArray pathpointActive_jsonArr=new JSONArray();
  boolean hasWrapping=(numWrapObjects > 0);
  ArrayPathPoint actualPath=path.getCurrentPath(state);
  AbstractPathPoint firstPoint=pathPointSetNoWrap.get(0);
  mapGeometryPathToPathPointMaterialUUID.put(path,pathpt_mat_uuid);
  UUID pathpoint_uuid=addPathPointObjectToParent(firstPoint,pathpt_mat_uuid.toString(),visible);
  pathpoint_jsonArr.add(pathpoint_uuid.toString());
  pathpointActive_jsonArr.add(true);
  addComponentToUUIDMap(firstPoint,pathpoint_uuid);
  int firstIndex=0;
  int numIntermediatePoints=NUM_PATHPOINTS_PER_WRAP_OBJECT * numWrapObjects;
  for (int ppointSetIndex=1; ppointSetIndex < pathPointSetNoWrap.getSize(); ppointSetIndex++) {
    AbstractPathPoint secondPoint=pathPointSetNoWrap.get(ppointSetIndex);
    int secondIndex=actualPath.findIndex(secondPoint);
    boolean pointAdded=false;
    if (secondIndex == firstIndex + 1 || (firstIndex == -1 && secondIndex != -1)) {
      if (numWrapObjects > 0)       createComputedPathPoints(numIntermediatePoints,firstPoint,secondPoint,pathpoint_jsonArr,pathpointActive_jsonArr);
    }
 else     if (secondIndex == -1) {
      ConditionalPathPoint cpp=ConditionalPathPoint.safeDownCast(secondPoint);
      pathpoint_uuid=addComputedPathPointObjectToParent(ppointSetIndex,pathPointSetNoWrap,pathpt_mat_uuid.toString(),visible && ppointSetIndex == pathPointSetNoWrap.getSize() - 1);
      pointAdded=true;
      ArrayList<UUID> comp_uuids=new ArrayList<UUID>();
      comp_uuids.add(pathpoint_uuid);
      mapComponentToUUID.put(cpp,comp_uuids);
      mapUUIDToComponent.put(pathpoint_uuid,cpp);
      pathpointActive_jsonArr.add(false);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      firstIndex=secondIndex;
      firstPoint=secondPoint;
    }
 else {
      for (int wrappointIndex=firstIndex + 1; wrappointIndex < secondIndex; wrappointIndex++) {
        AbstractPathPoint nextPathPoint=actualPath.get(wrappointIndex);
        PathWrapPoint pathWrapPoint=PathWrapPoint.safeDownCast(nextPathPoint);
        if (pathWrapPoint != null) {
          ArrayVec3 pathwrap=pathWrapPoint.getWrapPath();
          PhysicalFrame wrapPtsFrame=pathWrapPoint.getParentFrame();
          int size=pathwrap.size();
          if (size >= 1) {
            int[] indicesToUse=new int[NUM_PATHPOINTS_PER_WRAP_OBJECT];
            for (int ndx=0; ndx < NUM_PATHPOINTS_PER_WRAP_OBJECT - 1; ndx++)             indicesToUse[ndx]=ndx * (size - 1) / (NUM_PATHPOINTS_PER_WRAP_OBJECT);
            indicesToUse[NUM_PATHPOINTS_PER_WRAP_OBJECT - 1]=size - 1;
            double step=1.0 / (indicesToUse.length + 1.0);
            JSONObject bodyJson=mapBodyIndicesToJson.get(0);
            JSONArray children=(JSONArray)bodyJson.get(""String_Node_Str"");
            ArrayList<UUID> wrapPointUUIDs=new ArrayList<UUID>();
            for (int j=0; j < indicesToUse.length; j++) {
              Vec3 globalLocation=wrapPtsFrame.findStationLocationInAnotherFrame(state,pathwrap.get(indicesToUse[j]),mapBodyIndicesToFrames.get(0));
              JSONObject bpptInBodyJson=createPathPointObjectJson(null,""String_Node_Str"",false,globalLocation,pathpt_mat_uuid.toString(),false);
              UUID ppt_uuid=UUID.fromString((String)bpptInBodyJson.get(""String_Node_Str""));
              children.add(bpptInBodyJson);
              pathpoint_jsonArr.add(ppt_uuid.toString());
              pathpointActive_jsonArr.add(false);
              wrapPointUUIDs.add(ppt_uuid);
              computedPathPoints.put(ppt_uuid,new ComputedPathPointInfo(firstPoint,secondPoint,step * (j + 1)));
            }
            wrapPathPoints.put(pathWrapPoint,wrapPointUUIDs);
          }
        }
      }
    }
    if (!pointAdded) {
      pathpoint_uuid=addPathPointObjectToParent(secondPoint,pathpt_mat_uuid.toString(),visible && ppointSetIndex == pathPointSetNoWrap.getSize() - 1);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      pathpointActive_jsonArr.add(true);
      addComponentToUUIDMap(secondPoint,pathpoint_uuid);
    }
    if (MovingPathPoint.safeDownCast(secondPoint) != null) {
      movingComponents.put(secondPoint,pathpoint_uuid);
    }
    firstIndex=secondIndex;
    firstPoint=secondPoint;
  }
  if (hasWrapping)   pathsWithWrapping.put(path,pathpoint_jsonArr);
  pathGeomJson.put(""String_Node_Str"",pathpoint_jsonArr.size() - 1);
  JSONObject gndJson=mapBodyIndicesToJson.get(0);
  if (gndJson.get(""String_Node_Str"") == null)   gndJson.put(""String_Node_Str"",new JSONArray());
  JSONArray gndChildren=(JSONArray)gndJson.get(""String_Node_Str"");
  Map<String,Object> obj_json=new LinkedHashMap<String,Object>();
  UUID mesh_uuid=UUID.randomUUID();
  obj_json.put(""String_Node_Str"",mesh_uuid.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  obj_json.put(""String_Node_Str"",path.getAbsolutePathString());
  obj_json.put(""String_Node_Str"",pathpoint_jsonArr);
  obj_json.put(""String_Node_Str"",pathpointActive_jsonArr);
  obj_json.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  gndChildren.add(obj_json);
  obj_json.put(""String_Node_Str"",mat_uuid.toString());
  if (!visible) {
    obj_json.put(""String_Node_Str"",false);
  }
  return mesh_uuid;
}",0.99594716301411
147084,"private Vec3 extractVec3FromJsonXYZ(JSONObject offsetObj){
  Object xString=offsetObj.get(""String_Node_Str"");
  double xValue=JSONMessageHandler.convertObjectFromJsonRoDouble(xString);
  Object yString=offsetObj.get(""String_Node_Str"");
  double yValue=JSONMessageHandler.convertObjectFromJsonRoDouble(yString);
  Object zString=offsetObj.get(""String_Node_Str"");
  double zValue=JSONMessageHandler.convertObjectFromJsonRoDouble(zString);
  Vec3 offsetAsVec3=new Vec3(xValue,yValue,zValue);
  return offsetAsVec3;
}","private Vec3 extractVec3FromJsonXYZ(JSONObject offsetObj){
  Object xString=offsetObj.get(""String_Node_Str"");
  double xValue=JSONMessageHandler.convertObjectFromJsonToDouble(xString);
  Object yString=offsetObj.get(""String_Node_Str"");
  double yValue=JSONMessageHandler.convertObjectFromJsonToDouble(yString);
  Object zString=offsetObj.get(""String_Node_Str"");
  double zValue=JSONMessageHandler.convertObjectFromJsonToDouble(zString);
  Vec3 offsetAsVec3=new Vec3(xValue,yValue,zValue);
  return offsetAsVec3;
}",0.9941520467836256
147085,"public void addMotionObjectsToFrame(JSONArray transforms_json,JSONArray paths_json){
  if (mcf != null) {
    MuscleList mList=model.getMuscleList();
    MuscleIterator mIter=mList.begin();
    while (!mIter.equals(mList.end())) {
      Muscle msl=mIter.__deref__();
      Vec3 pathColor=modelVisJson.getCurrentPathColorMap().getColor(msl.getGeometryPath(),dContext.getCurrentStateRef());
      ArrayList<UUID> uuids=modelVisJson.findUUIDForObject(msl);
      if (uuids != null && uuids.size() == 1) {
        UUID pathUUID=uuids.get(0);
        JSONObject pathUpdate_json=new JSONObject();
        pathUpdate_json.put(""String_Node_Str"",pathUUID.toString());
        pathUpdate_json.put(""String_Node_Str"",JSONUtilities.mapColorToRGBA(pathColor));
        paths_json.add(pathUpdate_json);
      }
      mIter.next();
    }
  }
  if (!(simmMotionData instanceof AnnotatedMotion))   return;
  AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
  Vector<ExperimentalDataObject> objects=mot.getClassified();
  Vec3 unitScale=new Vec3(1.,1.,1.);
  for (  ExperimentalDataObject nextObject : objects) {
    JSONObject motionObjectTransform=new JSONObject();
    Transform xform=new Transform();
    if (nextObject instanceof ExperimentalMarker) {
      double[] point=((ExperimentalMarker)nextObject).getPoint();
      xform.setP(new Vec3(point[0],point[1],point[2]));
      motionObjectTransform.put(""String_Node_Str"",nextObject.getDataObjectUUID().toString());
      motionObjectTransform.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(xform,unitScale,modelVisJson.getVisScaleFactor()));
      transforms_json.add(motionObjectTransform);
    }
 else     if (nextObject instanceof MotionObjectPointForce) {
      double[] point=((MotionObjectPointForce)nextObject).getPoint();
      Vec3 dir=((MotionObjectPointForce)nextObject).getDirection();
      double length=Math.sqrt(Math.pow(dir.get(0),2) + Math.pow(dir.get(1),2) + Math.pow(dir.get(2),2)) / 1000;
      UnitVec3 dirNorm=new UnitVec3(dir);
      xform.setP(new Vec3(point[0],point[1],point[2]));
      for (int i=0; i < 3; i++)       xform.R().set(i,1,dirNorm.get(i));
      motionObjectTransform.put(""String_Node_Str"",nextObject.getDataObjectUUID().toString());
      motionObjectTransform.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(xform,new Vec3(1,length,1),modelVisJson.getVisScaleFactor()));
      transforms_json.add(motionObjectTransform);
    }
  }
}","public void addMotionObjectsToFrame(JSONArray transforms_json,JSONArray paths_json){
  if (mcf != null) {
    MuscleList mList=model.getMuscleList();
    MuscleIterator mIter=mList.begin();
    while (!mIter.equals(mList.end())) {
      Muscle msl=mIter.__deref__();
      double newColorInBlueToRed=mcf.getColor(msl);
      Vec3 pathColor=new Vec3(newColorInBlueToRed,0,1 - newColorInBlueToRed);
      ArrayList<UUID> uuids=modelVisJson.findUUIDForObject(msl);
      if (uuids != null && uuids.size() == 1) {
        UUID pathUUID=uuids.get(0);
        JSONObject pathUpdate_json=new JSONObject();
        pathUpdate_json.put(""String_Node_Str"",pathUUID.toString());
        pathUpdate_json.put(""String_Node_Str"",JSONUtilities.mapColorToRGBA(pathColor));
        paths_json.add(pathUpdate_json);
      }
      mIter.next();
    }
  }
  if (!(simmMotionData instanceof AnnotatedMotion))   return;
  AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
  Vector<ExperimentalDataObject> objects=mot.getClassified();
  Vec3 unitScale=new Vec3(1.,1.,1.);
  for (  ExperimentalDataObject nextObject : objects) {
    JSONObject motionObjectTransform=new JSONObject();
    Transform xform=new Transform();
    if (nextObject instanceof ExperimentalMarker) {
      double[] point=((ExperimentalMarker)nextObject).getPoint();
      xform.setP(new Vec3(point[0],point[1],point[2]));
      motionObjectTransform.put(""String_Node_Str"",nextObject.getDataObjectUUID().toString());
      motionObjectTransform.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(xform,unitScale,modelVisJson.getVisScaleFactor()));
      transforms_json.add(motionObjectTransform);
    }
 else     if (nextObject instanceof MotionObjectPointForce) {
      double[] point=((MotionObjectPointForce)nextObject).getPoint();
      Vec3 dir=((MotionObjectPointForce)nextObject).getDirection();
      double length=Math.sqrt(Math.pow(dir.get(0),2) + Math.pow(dir.get(1),2) + Math.pow(dir.get(2),2)) / 1000;
      UnitVec3 dirNorm=new UnitVec3(dir);
      xform.setP(new Vec3(point[0],point[1],point[2]));
      for (int i=0; i < 3; i++)       xform.R().set(i,1,dirNorm.get(i));
      motionObjectTransform.put(""String_Node_Str"",nextObject.getDataObjectUUID().toString());
      motionObjectTransform.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(xform,new Vec3(1,length,1),modelVisJson.getVisScaleFactor()));
      transforms_json.add(motionObjectTransform);
    }
  }
}",0.9620563035495716
147086,"protected void addAppearanceProperties(Sheet sheet){
  try {
    sheet.get(Sheet.PROPERTIES).remove(""String_Node_Str"");
    Sheet.Set appearanceSheet=createExpertSet();
    appearanceSheet.setDisplayName(""String_Node_Str"");
    sheet.put(appearanceSheet);
    PropertySupport.Reflection nextNodePropeVis;
    nextNodePropeVis=new PropertySupport.Reflection(this,Boolean.class,""String_Node_Str"",""String_Node_Str"");
    nextNodePropeVis.setName(""String_Node_Str"");
    nextNodePropeVis.setShortDescription(appearance.getPropertyByName(""String_Node_Str"").getComment());
    appearanceSheet.put(nextNodePropeVis);
    PropertySupport.Reflection nextNodeProp5;
    nextNodeProp5=new PropertySupport.Reflection(this,double.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp5.setName(""String_Node_Str"");
    nextNodeProp5.setShortDescription(appearance.getPropertyByName(""String_Node_Str"").getComment());
    appearanceSheet.put(nextNodeProp5);
    PropertySupport.Reflection nextNodeProp4;
    nextNodeProp4=new PropertySupport.Reflection(this,Color.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp4.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodeProp4);
    PropertySupport.Reflection nextNodePropRepresentation;
    SurfaceProperties surfApp=appearance.get_SurfaceProperties();
    nextNodePropRepresentation=new PropertySupport.Reflection(this,int.class,""String_Node_Str"",""String_Node_Str"");
    nextNodePropRepresentation.setName(""String_Node_Str"");
    nextNodePropRepresentation.setShortDescription(surfApp.getPropertyByName(""String_Node_Str"").getComment());
    appearanceSheet.put(nextNodePropRepresentation);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}","protected void addAppearanceProperties(Sheet sheet){
  try {
    sheet.get(Sheet.PROPERTIES).remove(""String_Node_Str"");
    Sheet.Set appearanceSheet=new Sheet.Set();
    appearanceSheet.setDisplayName(""String_Node_Str"");
    sheet.put(appearanceSheet);
    PropertySupport.Reflection nextNodePropeVis;
    nextNodePropeVis=new PropertySupport.Reflection(this,Boolean.class,""String_Node_Str"",""String_Node_Str"");
    nextNodePropeVis.setName(""String_Node_Str"");
    nextNodePropeVis.setShortDescription(appearance.getPropertyByName(""String_Node_Str"").getComment());
    appearanceSheet.put(nextNodePropeVis);
    PropertySupport.Reflection nextNodeProp5;
    nextNodeProp5=new PropertySupport.Reflection(this,double.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp5.setName(""String_Node_Str"");
    nextNodeProp5.setShortDescription(appearance.getPropertyByName(""String_Node_Str"").getComment());
    appearanceSheet.put(nextNodeProp5);
    PropertySupport.Reflection nextNodeProp4;
    nextNodeProp4=new PropertySupport.Reflection(this,Color.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp4.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodeProp4);
    PropertySupport.Reflection nextNodePropRepresentation;
    SurfaceProperties surfApp=appearance.get_SurfaceProperties();
    nextNodePropRepresentation=new PropertySupport.Reflection(this,int.class,""String_Node_Str"",""String_Node_Str"");
    nextNodePropRepresentation.setName(""String_Node_Str"");
    nextNodePropRepresentation.setShortDescription(surfApp.getPropertyByName(""String_Node_Str"").getComment());
    appearanceSheet.put(nextNodePropRepresentation);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}",0.9936009307737056
147087,"private UUID createJsonForGeometryPath(GeometryPath path,ModelDisplayHints mdh,JSONArray json_geometries,JSONArray json_materials){
  Map<String,Object> mat_json=new LinkedHashMap<String,Object>();
  UUID mat_uuid=UUID.randomUUID();
  mapPathMaterialToUUID.put(path.getAbsolutePathString(),mat_uuid);
  mat_json.put(""String_Node_Str"",mat_uuid.toString());
  mat_json.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  mat_json.put(""String_Node_Str"",""String_Node_Str"");
  Vec3 pathColor=path.getDefaultColor();
  String colorString=JSONUtilities.mapColorToRGBA(pathColor);
  mat_json.put(""String_Node_Str"",colorString);
  mat_json.put(""String_Node_Str"",2);
  mat_json.put(""String_Node_Str"",true);
  mat_json.put(""String_Node_Str"",true);
  json_materials.add(mat_json);
  JSONObject pathGeomJson=new JSONObject();
  UUID uuidForPathGeomGeometry=UUID.randomUUID();
  pathGeomJson.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  pathGeomJson.put(""String_Node_Str"",""String_Node_Str"");
  pathGeomJson.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  int numWrapObjects=path.getWrapSet().getSize();
  final PathPointSet pathPointSetNoWrap=path.getPathPointSet();
  json_geometries.add(pathGeomJson);
  JSONArray pathpoint_jsonArr=new JSONArray();
  JSONArray pathpointActive_jsonArr=new JSONArray();
  boolean hasWrapping=(numWrapObjects > 0);
  ArrayPathPoint actualPath=path.getCurrentPath(state);
  AbstractPathPoint firstPoint=pathPointSetNoWrap.get(0);
  UUID pathpoint_uuid=addPathPointObjectToParent(firstPoint);
  pathpoint_jsonArr.add(pathpoint_uuid.toString());
  int firstIndex=0;
  int numIntermediatePoints=2 * numWrapObjects;
  for (int ppointSetIndex=1; ppointSetIndex < pathPointSetNoWrap.getSize(); ppointSetIndex++) {
    AbstractPathPoint secondPoint=pathPointSetNoWrap.get(ppointSetIndex);
    int secondIndex=actualPath.findIndex(secondPoint);
    boolean pointAdded=false;
    if (secondIndex == firstIndex + 1 || (firstIndex == -1 && secondIndex != -1)) {
      pathpointActive_jsonArr.add(true);
      if (numWrapObjects > 0)       createComputedPathPoints(numIntermediatePoints,firstPoint,secondPoint,pathpoint_jsonArr);
    }
 else     if (secondIndex == -1) {
      ConditionalPathPoint cpp=ConditionalPathPoint.safeDownCast(secondPoint);
      pathpoint_uuid=addComputedPathPointObjectToParent(ppointSetIndex,pathPointSetNoWrap);
      pointAdded=true;
      ArrayList<UUID> comp_uuids=new ArrayList<UUID>();
      comp_uuids.add(pathpoint_uuid);
      mapComponentToUUID.put(cpp,comp_uuids);
      mapUUIDToComponent.put(pathpoint_uuid,cpp);
      pathpointActive_jsonArr.add(false);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      firstIndex=secondIndex;
      firstPoint=secondPoint;
    }
 else {
      for (int wrappointIndex=firstIndex + 1; wrappointIndex < secondIndex; wrappointIndex++) {
        AbstractPathPoint nextPathPoint=actualPath.get(wrappointIndex);
        PathWrapPoint pathWrapPoint=PathWrapPoint.safeDownCast(nextPathPoint);
        if (pathWrapPoint != null) {
          ArrayVec3 pathwrap=pathWrapPoint.getWrapPath();
          PhysicalFrame wrapPtsFrame=pathWrapPoint.getParentFrame();
          int size=pathwrap.size();
          if (size >= 2) {
            int x=0;
            int[] indicesToUse=new int[]{0,size - 1};
            double step=1.0 / (indicesToUse.length + 1.0);
            JSONObject bodyJson=mapBodyIndicesToJson.get(0);
            JSONArray children=(JSONArray)bodyJson.get(""String_Node_Str"");
            ArrayList<UUID> wrapPointUUIDs=new ArrayList<UUID>();
            for (int j=0; j < indicesToUse.length; j++) {
              Vec3 globalLocation=wrapPtsFrame.findStationLocationInAnotherFrame(state,pathwrap.get(indicesToUse[j]),mapBodyIndicesToFrames.get(0));
              JSONObject bpptInBodyJson=createPathPointObjectJson(null,""String_Node_Str"",false,globalLocation);
              UUID ppt_uuid=UUID.fromString((String)bpptInBodyJson.get(""String_Node_Str""));
              children.add(bpptInBodyJson);
              pathpoint_jsonArr.add(ppt_uuid.toString());
              wrapPointUUIDs.add(ppt_uuid);
              computedPathPoints.put(ppt_uuid,new ComputedPathPointInfo(firstPoint,secondPoint,step * (j + 1)));
            }
            wrapPathPoints.put(pathWrapPoint,wrapPointUUIDs);
          }
        }
      }
    }
    if (!pointAdded) {
      pathpoint_uuid=addPathPointObjectToParent(secondPoint);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      ArrayList<UUID> comp_uuids=new ArrayList<UUID>();
      comp_uuids.add(pathpoint_uuid);
      mapComponentToUUID.put(secondPoint,comp_uuids);
      mapUUIDToComponent.put(pathpoint_uuid,secondPoint);
    }
    if (MovingPathPoint.safeDownCast(secondPoint) != null) {
      movingComponents.put(secondPoint,pathpoint_uuid);
    }
    firstIndex=secondIndex;
    firstPoint=secondPoint;
  }
  if (hasWrapping)   pathsWithWrapping.put(path,pathpoint_jsonArr);
  pathGeomJson.put(""String_Node_Str"",pathpoint_jsonArr.size() - 1);
  JSONObject gndJson=mapBodyIndicesToJson.get(0);
  if (gndJson.get(""String_Node_Str"") == null)   gndJson.put(""String_Node_Str"",new JSONArray());
  JSONArray gndChildren=(JSONArray)gndJson.get(""String_Node_Str"");
  Map<String,Object> obj_json=new LinkedHashMap<String,Object>();
  UUID mesh_uuid=UUID.randomUUID();
  obj_json.put(""String_Node_Str"",mesh_uuid.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  obj_json.put(""String_Node_Str"",path.getAbsolutePathString());
  obj_json.put(""String_Node_Str"",pathpoint_jsonArr);
  obj_json.put(""String_Node_Str"",pathpointActive_jsonArr);
  obj_json.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  gndChildren.add(obj_json);
  obj_json.put(""String_Node_Str"",mat_uuid.toString());
  return mesh_uuid;
}","private UUID createJsonForGeometryPath(GeometryPath path,ModelDisplayHints mdh,JSONArray json_geometries,JSONArray json_materials){
  Map<String,Object> mat_json=new LinkedHashMap<String,Object>();
  UUID mat_uuid=UUID.randomUUID();
  mapPathMaterialToUUID.put(path.getAbsolutePathString(),mat_uuid);
  mat_json.put(""String_Node_Str"",mat_uuid.toString());
  mat_json.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  mat_json.put(""String_Node_Str"",""String_Node_Str"");
  Vec3 pathColor=path.getDefaultColor();
  String colorString=JSONUtilities.mapColorToRGBA(pathColor);
  mat_json.put(""String_Node_Str"",colorString);
  mat_json.put(""String_Node_Str"",2);
  mat_json.put(""String_Node_Str"",true);
  mat_json.put(""String_Node_Str"",true);
  json_materials.add(mat_json);
  JSONObject pathGeomJson=new JSONObject();
  UUID uuidForPathGeomGeometry=UUID.randomUUID();
  pathGeomJson.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  pathGeomJson.put(""String_Node_Str"",""String_Node_Str"");
  pathGeomJson.put(""String_Node_Str"",path.getAbsolutePathString() + ""String_Node_Str"");
  int numWrapObjects=path.getWrapSet().getSize();
  final PathPointSet pathPointSetNoWrap=path.getPathPointSet();
  json_geometries.add(pathGeomJson);
  JSONArray pathpoint_jsonArr=new JSONArray();
  JSONArray pathpointActive_jsonArr=new JSONArray();
  boolean hasWrapping=(numWrapObjects > 0);
  ArrayPathPoint actualPath=path.getCurrentPath(state);
  AbstractPathPoint firstPoint=pathPointSetNoWrap.get(0);
  UUID pathpoint_uuid=addPathPointObjectToParent(firstPoint);
  pathpoint_jsonArr.add(pathpoint_uuid.toString());
  addComponentToUUIDMap(firstPoint,pathpoint_uuid);
  int firstIndex=0;
  int numIntermediatePoints=2 * numWrapObjects;
  for (int ppointSetIndex=1; ppointSetIndex < pathPointSetNoWrap.getSize(); ppointSetIndex++) {
    AbstractPathPoint secondPoint=pathPointSetNoWrap.get(ppointSetIndex);
    int secondIndex=actualPath.findIndex(secondPoint);
    boolean pointAdded=false;
    if (secondIndex == firstIndex + 1 || (firstIndex == -1 && secondIndex != -1)) {
      pathpointActive_jsonArr.add(true);
      if (numWrapObjects > 0)       createComputedPathPoints(numIntermediatePoints,firstPoint,secondPoint,pathpoint_jsonArr);
    }
 else     if (secondIndex == -1) {
      ConditionalPathPoint cpp=ConditionalPathPoint.safeDownCast(secondPoint);
      pathpoint_uuid=addComputedPathPointObjectToParent(ppointSetIndex,pathPointSetNoWrap);
      pointAdded=true;
      ArrayList<UUID> comp_uuids=new ArrayList<UUID>();
      comp_uuids.add(pathpoint_uuid);
      mapComponentToUUID.put(cpp,comp_uuids);
      mapUUIDToComponent.put(pathpoint_uuid,cpp);
      pathpointActive_jsonArr.add(false);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      firstIndex=secondIndex;
      firstPoint=secondPoint;
    }
 else {
      for (int wrappointIndex=firstIndex + 1; wrappointIndex < secondIndex; wrappointIndex++) {
        AbstractPathPoint nextPathPoint=actualPath.get(wrappointIndex);
        PathWrapPoint pathWrapPoint=PathWrapPoint.safeDownCast(nextPathPoint);
        if (pathWrapPoint != null) {
          ArrayVec3 pathwrap=pathWrapPoint.getWrapPath();
          PhysicalFrame wrapPtsFrame=pathWrapPoint.getParentFrame();
          int size=pathwrap.size();
          if (size >= 2) {
            int x=0;
            int[] indicesToUse=new int[]{0,size - 1};
            double step=1.0 / (indicesToUse.length + 1.0);
            JSONObject bodyJson=mapBodyIndicesToJson.get(0);
            JSONArray children=(JSONArray)bodyJson.get(""String_Node_Str"");
            ArrayList<UUID> wrapPointUUIDs=new ArrayList<UUID>();
            for (int j=0; j < indicesToUse.length; j++) {
              Vec3 globalLocation=wrapPtsFrame.findStationLocationInAnotherFrame(state,pathwrap.get(indicesToUse[j]),mapBodyIndicesToFrames.get(0));
              JSONObject bpptInBodyJson=createPathPointObjectJson(null,""String_Node_Str"",false,globalLocation);
              UUID ppt_uuid=UUID.fromString((String)bpptInBodyJson.get(""String_Node_Str""));
              children.add(bpptInBodyJson);
              pathpoint_jsonArr.add(ppt_uuid.toString());
              wrapPointUUIDs.add(ppt_uuid);
              computedPathPoints.put(ppt_uuid,new ComputedPathPointInfo(firstPoint,secondPoint,step * (j + 1)));
            }
            wrapPathPoints.put(pathWrapPoint,wrapPointUUIDs);
          }
        }
      }
    }
    if (!pointAdded) {
      pathpoint_uuid=addPathPointObjectToParent(secondPoint);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
      addComponentToUUIDMap(secondPoint,pathpoint_uuid);
    }
    if (MovingPathPoint.safeDownCast(secondPoint) != null) {
      movingComponents.put(secondPoint,pathpoint_uuid);
    }
    firstIndex=secondIndex;
    firstPoint=secondPoint;
  }
  if (hasWrapping)   pathsWithWrapping.put(path,pathpoint_jsonArr);
  pathGeomJson.put(""String_Node_Str"",pathpoint_jsonArr.size() - 1);
  JSONObject gndJson=mapBodyIndicesToJson.get(0);
  if (gndJson.get(""String_Node_Str"") == null)   gndJson.put(""String_Node_Str"",new JSONArray());
  JSONArray gndChildren=(JSONArray)gndJson.get(""String_Node_Str"");
  Map<String,Object> obj_json=new LinkedHashMap<String,Object>();
  UUID mesh_uuid=UUID.randomUUID();
  obj_json.put(""String_Node_Str"",mesh_uuid.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  obj_json.put(""String_Node_Str"",path.getAbsolutePathString());
  obj_json.put(""String_Node_Str"",pathpoint_jsonArr);
  obj_json.put(""String_Node_Str"",pathpointActive_jsonArr);
  obj_json.put(""String_Node_Str"",uuidForPathGeomGeometry.toString());
  obj_json.put(""String_Node_Str"",""String_Node_Str"");
  gndChildren.add(obj_json);
  obj_json.put(""String_Node_Str"",mat_uuid.toString());
  return mesh_uuid;
}",0.8698331193838255
147088,"public JSONObject createPathUpdateJson(GeometryPath path,int typeOfEdit,int atIndex){
  JSONObject topJson=new JSONObject();
  UUID pathUuid=pathList.get(path);
  topJson.put(""String_Node_Str"",""String_Node_Str"");
  topJson.put(""String_Node_Str"",pathUuid.toString());
  if (typeOfEdit == 2) {
    JSONArray pathpoint_jsonArr=new JSONArray();
    for (int i=0; i < path.getPathPointSet().getSize(); i++) {
      AbstractPathPoint pathPoint=path.getPathPointSet().get(i);
      UUID pathpoint_uuid=mapComponentToUUID.get(pathPoint).get(0);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
    }
    topJson.put(""String_Node_Str"",pathpoint_jsonArr);
    topJson.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (typeOfEdit == 1) {
    topJson.put(""String_Node_Str"",""String_Node_Str"");
    AbstractPathPoint newPoint=path.getPathPointSet().get(atIndex);
    JSONObject newPointJson=createPathPointObjectJson(newPoint,newPoint.getName(),true,null);
    newPointJson.put(""String_Node_Str"",mapComponentToUUID.get(newPoint.getBody()).get(0).toString());
    topJson.put(""String_Node_Str"",newPointJson);
    ArrayList<UUID> vis_uuidList=new ArrayList<UUID>(1);
    UUID newPointMeshUUID=UUID.fromString((String)newPointJson.get(""String_Node_Str""));
    vis_uuidList.add(newPointMeshUUID);
    mapComponentToUUID.put(newPoint,vis_uuidList);
    mapUUIDToComponent.put(newPointMeshUUID,newPoint);
    JSONArray pathpoint_jsonArr=new JSONArray();
    for (int i=0; i < path.getPathPointSet().getSize(); i++) {
      AbstractPathPoint pathPoint=path.getPathPointSet().get(i);
      UUID pathpoint_uuid=mapComponentToUUID.get(pathPoint).get(0);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
    }
    topJson.put(""String_Node_Str"",pathpoint_jsonArr);
  }
 else {
    topJson.put(""String_Node_Str"",""String_Node_Str"");
    JSONArray pathpoint_jsonArr=new JSONArray();
    for (int i=0; i < path.getPathPointSet().getSize(); i++) {
      AbstractPathPoint pathPoint=path.getPathPointSet().get(i);
      JSONObject pathpointupdateJson=new JSONObject();
      UUID pathpoint_uuid=mapComponentToUUID.get(pathPoint).get(0);
      pathpointupdateJson.put(""String_Node_Str"",pathpoint_uuid.toString());
      Transform localTransform=new Transform();
      Vec3 location=null;
      if (true)       location=pathPoint.getLocation(state);
 else {
      }
      localTransform.setP(location);
      pathpointupdateJson.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(localTransform,new Vec3(1.0),visScaleFactor));
      pathpoint_jsonArr.add(pathpointupdateJson);
    }
    topJson.put(""String_Node_Str"",pathpoint_jsonArr);
  }
  return topJson;
}","public JSONObject createPathUpdateJson(GeometryPath path,int typeOfEdit,int atIndex){
  JSONObject topJson=new JSONObject();
  UUID pathUuid=pathList.get(path);
  topJson.put(""String_Node_Str"",""String_Node_Str"");
  topJson.put(""String_Node_Str"",pathUuid.toString());
  if (typeOfEdit == 2) {
    JSONArray pathpoint_jsonArr=new JSONArray();
    for (int i=0; i < path.getPathPointSet().getSize(); i++) {
      AbstractPathPoint pathPoint=path.getPathPointSet().get(i);
      ArrayList<UUID> vis_uuidList=mapComponentToUUID.get(pathPoint);
      if (vis_uuidList != null) {
        UUID pathpoint_uuid=mapComponentToUUID.get(pathPoint).get(0);
        pathpoint_jsonArr.add(pathpoint_uuid.toString());
      }
    }
    topJson.put(""String_Node_Str"",pathpoint_jsonArr);
    topJson.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (typeOfEdit == 1) {
    topJson.put(""String_Node_Str"",""String_Node_Str"");
    AbstractPathPoint newPoint=path.getPathPointSet().get(atIndex);
    JSONObject newPointJson=createPathPointObjectJson(newPoint,newPoint.getName(),true,null);
    newPointJson.put(""String_Node_Str"",mapComponentToUUID.get(newPoint.getBody()).get(0).toString());
    topJson.put(""String_Node_Str"",newPointJson);
    ArrayList<UUID> vis_uuidList=new ArrayList<UUID>(1);
    UUID newPointMeshUUID=UUID.fromString((String)newPointJson.get(""String_Node_Str""));
    vis_uuidList.add(newPointMeshUUID);
    mapComponentToUUID.put(newPoint,vis_uuidList);
    mapUUIDToComponent.put(newPointMeshUUID,newPoint);
    JSONArray pathpoint_jsonArr=new JSONArray();
    for (int i=0; i < path.getPathPointSet().getSize(); i++) {
      AbstractPathPoint pathPoint=path.getPathPointSet().get(i);
      UUID pathpoint_uuid=mapComponentToUUID.get(pathPoint).get(0);
      pathpoint_jsonArr.add(pathpoint_uuid.toString());
    }
    topJson.put(""String_Node_Str"",pathpoint_jsonArr);
  }
 else {
    topJson.put(""String_Node_Str"",""String_Node_Str"");
    JSONArray pathpoint_jsonArr=new JSONArray();
    for (int i=0; i < path.getPathPointSet().getSize(); i++) {
      AbstractPathPoint pathPoint=path.getPathPointSet().get(i);
      JSONObject pathpointupdateJson=new JSONObject();
      UUID pathpoint_uuid=mapComponentToUUID.get(pathPoint).get(0);
      pathpointupdateJson.put(""String_Node_Str"",pathpoint_uuid.toString());
      Transform localTransform=new Transform();
      Vec3 location=null;
      if (true)       location=pathPoint.getLocation(state);
 else {
      }
      localTransform.setP(location);
      pathpointupdateJson.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(localTransform,new Vec3(1.0),visScaleFactor));
      pathpoint_jsonArr.add(pathpointupdateJson);
    }
    topJson.put(""String_Node_Str"",pathpoint_jsonArr);
  }
  return topJson;
}",0.973132131026868
147089,"public void deleteAttachmentPerformed(int menuChoice){
  AbstractPathPoint mp=currentPath.getPathPointSet().get(menuChoice);
  ViewDB.getInstance().removeObjectsBelongingToMuscleFromSelection(objectWithPath);
  boolean result=openSimContext.deletePathPoint(currentPath,menuChoice);
  if (result == false) {
    Object[] options={""String_Node_Str""};
    int answer=JOptionPane.showOptionDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    ViewDB.getInstance().setSelectedObject(mp);
  }
 else {
    ViewDB.getInstance().removeObjectsBelongingToMuscleFromSelection(objectWithPath);
    setupComponent(objectWithPath);
    Model model=currentModel;
    Vector<OpenSimObject> objs=new Vector<OpenSimObject>(1);
    objs.add(mp);
    ObjectsDeletedEvent evnt=new ObjectsDeletedEvent(this,model,objs);
    OpenSimDB.getInstance().setChanged();
    OpenSimDB.getInstance().notifyObservers(evnt);
    updatePathDisplay(EditOperation.RemovePoint,-1);
  }
}","public void deleteAttachmentPerformed(int menuChoice){
  AbstractPathPoint mp=currentPath.getPathPointSet().get(menuChoice);
  ViewDB.getInstance().removeObjectsBelongingToMuscleFromSelection(objectWithPath);
  boolean canDelete=currentPath.canDeletePathPoint(menuChoice);
  if (!canDelete) {
    Object[] options={""String_Node_Str""};
    int answer=JOptionPane.showOptionDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
    ViewDB.getInstance().setSelectedObject(mp);
  }
 else {
    ModelVisualizationJson modelViz=ViewDB.getInstance().getModelVisualizationJson(currentModel);
    modelViz.deletePathPointVisuals(currentPath,menuChoice);
    updatePathDisplay(EditOperation.RemovePoint,menuChoice);
    openSimContext.deletePathPoint(currentPath,menuChoice);
    ViewDB.getInstance().removeObjectsBelongingToMuscleFromSelection(objectWithPath);
    setupComponent(objectWithPath);
    Model model=currentModel;
    Vector<OpenSimObject> objs=new Vector<OpenSimObject>(1);
    objs.add(mp);
    ObjectsDeletedEvent evnt=new ObjectsDeletedEvent(this,model,objs);
    OpenSimDB.getInstance().setChanged();
    OpenSimDB.getInstance().notifyObservers(evnt);
  }
}",0.799468791500664
147090,"static JSONObject createAppearanceChangeJson(AbstractProperty prop,UUID objectUuid){
  boolean visibilityChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  if (visibilityChange) {
    boolean newValue=PropertyHelper.getValueBool(prop);
    return createSetVisibleCommandJson(newValue,objectUuid);
  }
  boolean scaleChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  if (scaleChange) {
    JSONObject commandJson=new JSONObject();
    commandJson.put(""String_Node_Str"",""String_Node_Str"");
    commandJson.put(""String_Node_Str"",objectUuid.toString());
    JSONArray jsonVec3=new JSONArray();
    for (int i=0; i < 3; i++)     jsonVec3.add(PropertyHelper.getValueVec3(prop,i));
    commandJson.put(""String_Node_Str"",jsonVec3);
    commandJson.put(""String_Node_Str"",jsonVec3);
    return commandJson;
  }
  boolean opacityChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  boolean representationChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  if (opacityChange || representationChange) {
    JSONObject commandJson=new JSONObject();
    commandJson.put(""String_Node_Str"",""String_Node_Str"");
    commandJson.put(""String_Node_Str"",objectUuid.toString());
    if (opacityChange) {
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",PropertyHelper.getValueDouble(prop));
    }
 else {
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",PropertyHelper.getValueInt(prop) == 2);
    }
    return commandJson;
  }
  if (prop.getName().equalsIgnoreCase(""String_Node_Str"")) {
    JSONObject commandJson=new JSONObject();
    commandJson.put(""String_Node_Str"",""String_Node_Str"");
    commandJson.put(""String_Node_Str"",""String_Node_Str"");
    commandJson.put(""String_Node_Str"",""String_Node_Str"");
    Vec3 newColor=new Vec3();
    for (int i=0; i < 3; i++)     newColor.set(i,PropertyHelper.getValueVec3(prop,i));
    commandJson.put(""String_Node_Str"",JSONUtilities.mapColorToRGBA(newColor));
    commandJson.put(""String_Node_Str"",objectUuid.toString());
    return commandJson;
  }
  JSONObject commandJson=new JSONObject();
  return commandJson;
}","static JSONObject createAppearanceChangeJson(AbstractProperty prop,UUID objectUuid){
  boolean visibilityChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  if (visibilityChange) {
    boolean newValue=PropertyHelper.getValueBool(prop);
    return createSetVisibleCommandJson(newValue,objectUuid);
  }
  boolean scaleChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  if (scaleChange) {
    JSONObject commandJson=new JSONObject();
    commandJson.put(""String_Node_Str"",""String_Node_Str"");
    commandJson.put(""String_Node_Str"",objectUuid.toString());
    JSONArray jsonVec3=new JSONArray();
    for (int i=0; i < 3; i++)     jsonVec3.add(PropertyHelper.getValueVec3(prop,i));
    commandJson.put(""String_Node_Str"",jsonVec3);
    commandJson.put(""String_Node_Str"",jsonVec3);
    return commandJson;
  }
  boolean opacityChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  boolean representationChange=prop.getName().equalsIgnoreCase(""String_Node_Str"");
  if (opacityChange || representationChange) {
    JSONObject commandJson=new JSONObject();
    commandJson.put(""String_Node_Str"",""String_Node_Str"");
    commandJson.put(""String_Node_Str"",objectUuid.toString());
    if (opacityChange) {
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",PropertyHelper.getValueDouble(prop));
    }
 else {
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",""String_Node_Str"");
      commandJson.put(""String_Node_Str"",PropertyHelper.getValueInt(prop) == 2);
    }
    return commandJson;
  }
  if (prop.getName().equalsIgnoreCase(""String_Node_Str"")) {
    Vec3 newColor=new Vec3();
    for (int i=0; i < 3; i++)     newColor.set(i,PropertyHelper.getValueVec3(prop,i));
    return createSetMaterialColorCommand(newColor,objectUuid);
  }
  JSONObject commandJson=new JSONObject();
  return commandJson;
}",0.8709299601780276
147091,"public double getMarkerScaleFactor(){
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
    markersDisplayer=motionDisplayer.getMarkersRep();
  }
  if (markersDisplayer == null)   markersDisplayer=motionDisplayer.getMarkersRep();
  return markersDisplayer.getScaleFactor();
}","public double getMarkerScaleFactor(){
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
  }
  return motionDisplayer.getExperimentalMarkerScaleFactor();
}",0.6828282828282828
147092,"public Color getColor(){
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
    markersDisplayer=motionDisplayer.getMarkersRep();
  }
  if (markersDisplayer == null)   markersDisplayer=motionDisplayer.getMarkersRep();
  return markersDisplayer.getColor();
}","public Color getColor(){
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
  }
  Vec3 colorAsVec3=motionDisplayer.getDefaultExperimentalMarkerColor();
  return new Color((float)colorAsVec3.get(0),(float)colorAsVec3.get(1),(float)colorAsVec3.get(2));
}",0.4258289703315881
147093,"void setMarkerScaleFactorUI(final double newFactor,boolean allowUndo){
  final double oldMarkerScaleFactor=getMarkerScaleFactor();
  if (allowUndo) {
    AbstractUndoableEdit auEdit=new AbstractUndoableEdit(){
      @Override public void undo() throws CannotUndoException {
        super.undo();
        setMarkerScaleFactorUI(oldMarkerScaleFactor,false);
      }
      @Override public void redo() throws CannotRedoException {
        super.redo();
        setMarkerScaleFactorUI(newFactor,true);
      }
    }
;
    ExplorerTopComponent.addUndoableEdit(auEdit);
  }
  markersDisplayer.setScaleFactor(newFactor);
  ViewDB.repaintAll();
  refreshNode();
}","void setMarkerScaleFactorUI(final double newFactor,boolean allowUndo){
  final double oldMarkerScaleFactor=getMarkerScaleFactor();
  if (allowUndo) {
    AbstractUndoableEdit auEdit=new AbstractUndoableEdit(){
      @Override public void undo() throws CannotUndoException {
        super.undo();
        setMarkerScaleFactorUI(oldMarkerScaleFactor,false);
      }
      @Override public void redo() throws CannotRedoException {
        super.redo();
        setMarkerScaleFactorUI(newFactor,true);
      }
    }
;
    ExplorerTopComponent.addUndoableEdit(auEdit);
  }
  motionDisplayer.setExperimentalMarkerScaleFactor(newFactor);
  ViewDB.repaintAll();
  refreshNode();
}",0.9660889223813112
147094,"void setForceScaleFactorUI(final double newFactor,boolean allowUndo){
  final double oldForceScaleFactor=getForceScaleFactor();
  if (allowUndo) {
    AbstractUndoableEdit auEdit=new AbstractUndoableEdit(){
      @Override public void undo() throws CannotUndoException {
        super.undo();
        setForceScaleFactorUI(oldForceScaleFactor,false);
      }
      @Override public void redo() throws CannotRedoException {
        super.redo();
        setForceScaleFactorUI(newFactor,true);
      }
    }
;
    ExplorerTopComponent.addUndoableEdit(auEdit);
  }
  forcesDisplayer.setScaleFactor(newFactor);
  ViewDB.repaintAll();
  refreshNode();
}","void setForceScaleFactorUI(final double newFactor,boolean allowUndo){
  final double oldForceScaleFactor=getForceScaleFactor();
  if (allowUndo) {
    AbstractUndoableEdit auEdit=new AbstractUndoableEdit(){
      @Override public void undo() throws CannotUndoException {
        super.undo();
        setForceScaleFactorUI(oldForceScaleFactor,false);
      }
      @Override public void redo() throws CannotRedoException {
        super.redo();
        setForceScaleFactorUI(newFactor,true);
      }
    }
;
    ExplorerTopComponent.addUndoableEdit(auEdit);
  }
  ViewDB.repaintAll();
  refreshNode();
}",0.9640287769784172
147095,"public double getForceScaleFactor(){
  if (forcesDisplayer == null)   connectForceDisplayer(dMotion);
  return forcesDisplayer.getScaleFactor();
}","public double getForceScaleFactor(){
  return 1.0;
}",0.5050505050505051
147096,"public Color getColor(){
  if (forcesDisplayer == null)   connectForceDisplayer(dMotion);
  return forcesDisplayer.getColor();
}","public Color getColor(){
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
  }
  return motionDisplayer.getDefaultForceColor();
}",0.7241379310344828
147097,"/** 
 * Creates a new instance of ExperimentalForceNode 
 */
public ExperimentalForceSetNode(AnnotatedMotion dMotion){
  nodeName=bundle.getString(""String_Node_Str"");
  setName(nodeName);
  setDisplayName(nodeName);
  setShortDescription(bundle.getString(""String_Node_Str""));
  this.dMotion=dMotion;
  createChildren();
}","/** 
 * Creates a new instance of ExperimentalForceNode 
 */
public ExperimentalForceSetNode(AnnotatedMotion dMotion){
  nodeName=bundle.getString(""String_Node_Str"");
  setName(nodeName);
  setDisplayName(nodeName);
  setShortDescription(bundle.getString(""String_Node_Str""));
  this.dMotion=dMotion;
  createChildren();
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
  }
}",0.8806584362139918
147098,"/** 
 * @param defaultForceColor the defaultForceColor to set
 */
public void setDefaultForceColor(Color defaultForceColor){
  float[] colorFloat=new float[3];
  defaultForceColor.getColorComponents(colorFloat);
  for (int i=0; i < 3; i++)   this.defaultForceColor[i]=(double)colorFloat[i];
  getGroundForcesRep().setColor(defaultForceColor);
}","/** 
 * @param defaultForceColor the defaultForceColor to set
 */
public void setDefaultForceColor(Color defaultForceColor){
  float[] colorFloat=new float[3];
  defaultForceColor.getColorComponents(colorFloat);
  for (int i=0; i < 3; i++)   this.defaultForceColor[i]=(double)colorFloat[i];
  Vec3 colorAsVec3=new Vec3();
  for (int i=0; i < 3; i++)   colorAsVec3.set(i,this.defaultForceColor[i]);
  this.defaultExperimentalMarkerColor=colorAsVec3;
  Set<OpenSimObject> expermintalDataObjects=mapComponentToUUID.keySet();
  for (  OpenSimObject expObj : expermintalDataObjects) {
    if (expObj instanceof MotionObjectPointForce) {
      UUID expObjectUUID=mapComponentToUUID.get(expObj).get(0);
      String colorString=JSONUtilities.mapColorToRGBA(getDefaultExperimentalMarkerColor());
      ViewDB.getInstance().applyColorToObjectByUUID(model,expObjectUUID,colorAsVec3);
    }
  }
}",0.484947111472742
147099,"public void setupMotionDisplay(){
  if (simmMotionData == null)   return;
  colNames=simmMotionData.getColumnLabels();
  int numColumnsIncludingTime=colNames.getSize();
  interpolatedStates=new ArrayDouble(0.0,numColumnsIncludingTime - 1);
  AddMotionObjectsRep(model);
  if (simmMotionData instanceof AnnotatedMotion) {
    AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
    Vector<ExperimentalDataObject> objects=mot.getClassified();
    mot.setMotionDisplayer(this);
    createMotionObjectsGroupJson();
    addExperimentalDataObjectsToJson(objects);
    for (    ExperimentalDataObject nextObject : objects) {
      if (nextObject.getObjectType() == ExperimentalDataItemType.MarkerData) {
        bindMarkerToVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.PointForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
    }
    ViewDB.getInstance().addVisualizerObject(createJsonForMotionObjects());
    return;
  }
  mapIndicesToBodies.clear();
  mapIndicesToDofs.clear();
  stateNames=model.getStateVariableNames();
  stateNames.insert(0,""String_Node_Str"");
  if (colNames.arrayEquals(stateNames)) {
    statesFile=true;
    setRenderMuscleActivations(true);
  }
 else {
    for (int i=0; i < numColumnsIncludingTime; i++) {
      String columnName=colNames.getitem(i);
      int numClassified=classifyColumn(model,i,columnName);
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      if (numClassified > 1)       i+=(numClassified - 1);
    }
    genCoordColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    genCoordForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentMarkerColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    anyStateColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    for (int i=1; i < numColumnsIncludingTime; i++) {
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      Object o=mapIndicesToObjects.get(i);
      if (cType == null)       continue;
      ObjectIndexPair newPair=new ObjectIndexPair(o,i - 1);
switch (cType) {
case GenCoord:
        genCoordColumns.add(newPair);
      break;
case GenCoord_Force:
    genCoordForceColumns.add(newPair);
  break;
case State:
anyStateColumns.add(newPair);
break;
case Segment_marker_p1:
segmentMarkerColumns.add(newPair);
break;
case Segment_force_p1:
segmentForceColumns.add(newPair);
break;
}
}
}
}","public void setupMotionDisplay(){
  if (simmMotionData == null)   return;
  colNames=simmMotionData.getColumnLabels();
  int numColumnsIncludingTime=colNames.getSize();
  interpolatedStates=new ArrayDouble(0.0,numColumnsIncludingTime - 1);
  AddMotionObjectsRep(model);
  if (simmMotionData instanceof AnnotatedMotion) {
    AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
    Vector<ExperimentalDataObject> objects=mot.getClassified();
    mot.setMotionDisplayer(this);
    createMotionObjectsGroupJson();
    addExperimentalDataObjectsToJson(objects);
    for (    ExperimentalDataObject nextObject : objects) {
      if (nextObject.getObjectType() == ExperimentalDataItemType.MarkerData) {
        bindMarkerToVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.PointForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
    }
    ViewDB.getInstance().addVisualizerObject(createJsonForMotionObjects());
    JSONObject modelObjectJson=(JSONObject)modelVisJson.get(""String_Node_Str"");
    if (modelObjectJson.get(""String_Node_Str"") == null) {
      modelObjectJson.put(""String_Node_Str"",new JSONArray());
    }
    ((JSONArray)modelObjectJson.get(""String_Node_Str"")).add(motionObjectsRoot);
    return;
  }
  mapIndicesToBodies.clear();
  mapIndicesToDofs.clear();
  stateNames=model.getStateVariableNames();
  stateNames.insert(0,""String_Node_Str"");
  if (colNames.arrayEquals(stateNames)) {
    statesFile=true;
    setRenderMuscleActivations(true);
  }
 else {
    for (int i=0; i < numColumnsIncludingTime; i++) {
      String columnName=colNames.getitem(i);
      int numClassified=classifyColumn(model,i,columnName);
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      if (numClassified > 1)       i+=(numClassified - 1);
    }
    genCoordColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    genCoordForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentMarkerColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    anyStateColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    for (int i=1; i < numColumnsIncludingTime; i++) {
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      Object o=mapIndicesToObjects.get(i);
      if (cType == null)       continue;
      ObjectIndexPair newPair=new ObjectIndexPair(o,i - 1);
switch (cType) {
case GenCoord:
        genCoordColumns.add(newPair);
      break;
case GenCoord_Force:
    genCoordForceColumns.add(newPair);
  break;
case State:
anyStateColumns.add(newPair);
break;
case Segment_marker_p1:
segmentMarkerColumns.add(newPair);
break;
case Segment_force_p1:
segmentForceColumns.add(newPair);
break;
}
}
}
}",0.947329650092081
147100,"/** 
 * Creates a new instance of ViewDB 
 */
private ViewDB(){
  applyPreferences();
  r=myLookup.lookupResult(OpenSimObject.class);
  jsondb=JSONUtilities.createTopLevelJson();
}","/** 
 * Creates a new instance of ViewDB 
 */
private ViewDB(){
  applyPreferences();
  r=myLookup.lookupResult(OpenSimObject.class);
  websocketdb=WebSocketDB.getInstance();
  jsondb=JSONUtilities.createTopLevelJson();
}",0.8977556109725686
147101,"/** 
 * Enforce a singleton pattern
 */
public static ViewDB getInstance(){
  if (instance == null)   instance=new ViewDB();
  websocketdb=WebSocketDB.getInstance();
  websocketdb.setObserver(instance);
  return instance;
}","/** 
 * Enforce a singleton pattern
 */
public static ViewDB getInstance(){
  if (instance == null) {
    instance=new ViewDB();
    websocketdb.setObserver(instance);
  }
  return instance;
}",0.8867469879518072
147102,"public double calcDerivative(double normFiberLength,int order){
  return opensimSimulationJNI.ActiveForceLengthCurve_calcDerivative(swigCPtr,this,normFiberLength,order);
}","public double calcDerivative(StdVectorInt derivComponents,Vector x){
  return opensimSimulationJNI.ActiveForceLengthCurve_calcDerivative__SWIG_1(swigCPtr,this,StdVectorInt.getCPtr(derivComponents),derivComponents,Vector.getCPtr(x),x);
}",0.5798525798525799
147103,"public double calcDerivative(double cosPennationAngle,int order){
  return opensimSimulationJNI.FiberCompressiveForceCosPennationCurve_calcDerivative(swigCPtr,this,cosPennationAngle,order);
}","public double calcDerivative(StdVectorInt derivComponents,Vector x){
  return opensimSimulationJNI.FiberCompressiveForceCosPennationCurve_calcDerivative__SWIG_1(swigCPtr,this,StdVectorInt.getCPtr(derivComponents),derivComponents,Vector.getCPtr(x),x);
}",0.6094808126410836
147104,"public double calcDerivative(double aNormLength,int order){
  return opensimSimulationJNI.FiberCompressiveForceLengthCurve_calcDerivative(swigCPtr,this,aNormLength,order);
}","public double calcDerivative(StdVectorInt derivComponents,Vector x){
  return opensimSimulationJNI.FiberCompressiveForceLengthCurve_calcDerivative__SWIG_1(swigCPtr,this,StdVectorInt.getCPtr(derivComponents),derivComponents,Vector.getCPtr(x),x);
}",0.6109785202863962
147105,"public double calcDerivative(double normFiberLength,int order){
  return opensimSimulationJNI.FiberForceLengthCurve_calcDerivative(swigCPtr,this,normFiberLength,order);
}","public double calcDerivative(StdVectorInt derivComponents,Vector x){
  return opensimSimulationJNI.FiberForceLengthCurve_calcDerivative__SWIG_1(swigCPtr,this,StdVectorInt.getCPtr(derivComponents),derivComponents,Vector.getCPtr(x),x);
}",0.5777777777777777
147106,"public boolean set(int aIndex,Force aForce){
  return opensimSimulationJNI.ForceSet_set(swigCPtr,this,aIndex,Force.getCPtr(aForce),aForce);
}","public boolean set(int aIndex,Force aForce){
  return opensimSimulationJNI.ForceSet_set__SWIG_1(swigCPtr,this,aIndex,Force.getCPtr(aForce),aForce);
}",0.9724137931034482
147107,"public double calcDerivative(double normFiberVelocity,int order){
  return opensimSimulationJNI.ForceVelocityCurve_calcDerivative(swigCPtr,this,normFiberVelocity,order);
}","public double calcDerivative(StdVectorInt derivComponents,Vector x){
  return opensimSimulationJNI.ForceVelocityCurve_calcDerivative__SWIG_1(swigCPtr,this,StdVectorInt.getCPtr(derivComponents),derivComponents,Vector.getCPtr(x),x);
}",0.56575682382134
147108,"public double calcDerivative(double aForceVelocityMultiplier,int order){
  return opensimSimulationJNI.ForceVelocityInverseCurve_calcDerivative(swigCPtr,this,aForceVelocityMultiplier,order);
}","public double calcDerivative(StdVectorInt derivComponents,Vector x){
  return opensimSimulationJNI.ForceVelocityInverseCurve_calcDerivative__SWIG_1(swigCPtr,this,StdVectorInt.getCPtr(derivComponents),derivComponents,Vector.getCPtr(x),x);
}",0.5614849187935035
147109,"public void changeFrame(PhysicalFrame aPhysicalFrame){
  opensimSimulationJNI.Marker_changeFrame(swigCPtr,this,PhysicalFrame.getCPtr(aPhysicalFrame),aPhysicalFrame);
}","public void changeFrame(PhysicalFrame parentFrame){
  opensimSimulationJNI.Marker_changeFrame(swigCPtr,this,PhysicalFrame.getCPtr(parentFrame),parentFrame);
}",0.88
147110,"public void changeFramePreserveLocation(State s,PhysicalFrame aPhysicalFrame){
  opensimSimulationJNI.Marker_changeFramePreserveLocation(swigCPtr,this,State.getCPtr(s),s,PhysicalFrame.getCPtr(aPhysicalFrame),aPhysicalFrame);
}","public void changeFramePreserveLocation(State s,PhysicalFrame newParentFrame){
  opensimSimulationJNI.Marker_changeFramePreserveLocation(swigCPtr,this,State.getCPtr(s),s,PhysicalFrame.getCPtr(newParentFrame),newParentFrame);
}",0.8495575221238938
147111,"public double calcDerivative(double x,int order){
  return opensimCommonJNI.SmoothSegmentedFunction_calcDerivative(swigCPtr,this,x,order);
}","public double calcDerivative(double x,int order){
  return opensimCommonJNI.SmoothSegmentedFunction_calcDerivative__SWIG_0(swigCPtr,this,x,order);
}",0.9722222222222222
147112,"public double calcDerivative(double aNormLength,int order){
  return opensimSimulationJNI.TendonForceLengthCurve_calcDerivative(swigCPtr,this,aNormLength,order);
}","public double calcDerivative(StdVectorInt derivComponents,Vector x){
  return opensimSimulationJNI.TendonForceLengthCurve_calcDerivative__SWIG_1(swigCPtr,this,StdVectorInt.getCPtr(derivComponents),derivComponents,Vector.getCPtr(x),x);
}",0.5914786967418546
147113,"public void connectToModelAndBody(Model aModel,Body aBody){
  opensimSimulationJNI.WrapDoubleCylinderObst_connectToModelAndBody(swigCPtr,this,Model.getCPtr(aModel),aModel,Body.getCPtr(aBody),aBody);
}","public void connectToModelAndBody(Model aModel,PhysicalFrame aBody){
  opensimSimulationJNI.WrapDoubleCylinderObst_connectToModelAndBody(swigCPtr,this,Model.getCPtr(aModel),aModel,PhysicalFrame.getCPtr(aBody),aBody);
}",0.9186602870813396
147114,"public Color getColor(){
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
    markersDisplayer=motionDisplayer.getMarkersRep();
  }
  if (markersDisplayer == null)   markersDisplayer=motionDisplayer.getMarkersRep();
  return markersDisplayer.getColor();
}","public Color getColor(){
  if (motionDisplayer == null) {
    motionDisplayer=dMotion.getMotionDisplayer();
  }
  Vec3 colorAsVec3=motionDisplayer.getDefaultExperimentalMarkerColor();
  return new Color((float)colorAsVec3.get(0),(float)colorAsVec3.get(1),(float)colorAsVec3.get(2));
}",0.4258289703315881
147115,"public void updateMotionObjects(){
  if (simmMotionData instanceof AnnotatedMotion) {
    AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
    currentScaleFactor=mot.getDisplayForceScale();
    currentForceShape=mot.getDisplayForceShape();
    AddMotionObjectsRep(model);
    Vector<ExperimentalDataObject> objects=mot.getClassified();
    mot.setMotionDisplayer(this);
    for (    ExperimentalDataObject nextObject : objects) {
      if (nextObject.getObjectType() == ExperimentalDataItemType.MarkerData) {
        bindMarkerToVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.PointForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.BodyForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
    }
    return;
  }
}","public void updateMotionObjects(){
  if (simmMotionData instanceof AnnotatedMotion) {
    AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
    currentScaleFactor=mot.getDisplayForceScale();
    currentForceShape=mot.getDisplayForceShape();
    Vector<ExperimentalDataObject> objects=mot.getClassified();
    mot.setMotionDisplayer(this);
    for (    ExperimentalDataObject nextObject : objects) {
      if (nextObject.getObjectType() == ExperimentalDataItemType.MarkerData) {
        bindMarkerToVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.PointForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.BodyForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
    }
    return;
  }
}",0.982122905027933
147116,"public void setupMotionDisplay(){
  if (simmMotionData == null)   return;
  colNames=simmMotionData.getColumnLabels();
  int numColumnsIncludingTime=colNames.getSize();
  interpolatedStates=new ArrayDouble(0.0,numColumnsIncludingTime - 1);
  AddMotionObjectsRep(model);
  if (simmMotionData instanceof AnnotatedMotion) {
    AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
    Vector<ExperimentalDataObject> objects=mot.getClassified();
    mot.setMotionDisplayer(this);
    createMotionObjectsGroupJson();
    addExperimentalDataObjectsToJson(objects);
    for (    ExperimentalDataObject nextObject : objects) {
      if (nextObject.getObjectType() == ExperimentalDataItemType.MarkerData) {
        bindMarkerToVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.PointForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
    }
    ViewDB.getInstance().addVisualizerObject(createJsonForMotionObjects());
    return;
  }
  mapIndicesToBodies.clear();
  mapIndicesToDofs.clear();
  stateNames=model.getStateVariableNames();
  stateNames.insert(0,""String_Node_Str"");
  if (colNames.arrayEquals(stateNames)) {
    statesFile=true;
    setRenderMuscleActivations(true);
  }
 else {
    for (int i=0; i < numColumnsIncludingTime; i++) {
      String columnName=colNames.getitem(i);
      int numClassified=classifyColumn(model,i,columnName);
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      if (numClassified > 1)       i+=(numClassified - 1);
    }
    genCoordColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    genCoordForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentMarkerColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    anyStateColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    for (int i=1; i < numColumnsIncludingTime; i++) {
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      Object o=mapIndicesToObjects.get(i);
      if (cType == null)       continue;
      ObjectIndexPair newPair=new ObjectIndexPair(o,i - 1);
switch (cType) {
case GenCoord:
        genCoordColumns.add(newPair);
      break;
case GenCoord_Force:
    genCoordForceColumns.add(newPair);
  break;
case State:
anyStateColumns.add(newPair);
break;
case Segment_marker_p1:
segmentMarkerColumns.add(newPair);
break;
case Segment_force_p1:
segmentForceColumns.add(newPair);
break;
}
}
}
}","public void setupMotionDisplay(){
  if (simmMotionData == null)   return;
  colNames=simmMotionData.getColumnLabels();
  int numColumnsIncludingTime=colNames.getSize();
  interpolatedStates=new ArrayDouble(0.0,numColumnsIncludingTime - 1);
  if (simmMotionData instanceof AnnotatedMotion) {
    AnnotatedMotion mot=(AnnotatedMotion)simmMotionData;
    Vector<ExperimentalDataObject> objects=mot.getClassified();
    mot.setMotionDisplayer(this);
    createMotionObjectsGroupJson();
    addExperimentalDataObjectsToJson(objects);
    for (    ExperimentalDataObject nextObject : objects) {
      if (nextObject.getObjectType() == ExperimentalDataItemType.MarkerData) {
        bindMarkerToVisualizerObjectKeepHandle(nextObject);
      }
 else       if (nextObject.getObjectType() == ExperimentalDataItemType.PointForceData) {
        bindForceVisualizerObjectKeepHandle(nextObject);
      }
    }
    ViewDB.getInstance().addVisualizerObject(createJsonForMotionObjects());
    return;
  }
  mapIndicesToBodies.clear();
  mapIndicesToDofs.clear();
  stateNames=model.getStateVariableNames();
  stateNames.insert(0,""String_Node_Str"");
  if (colNames.arrayEquals(stateNames)) {
    statesFile=true;
    setRenderMuscleActivations(true);
  }
 else {
    for (int i=0; i < numColumnsIncludingTime; i++) {
      String columnName=colNames.getitem(i);
      int numClassified=classifyColumn(model,i,columnName);
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      if (numClassified > 1)       i+=(numClassified - 1);
    }
    genCoordColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    genCoordForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentMarkerColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    segmentForceColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    anyStateColumns=new ArrayList<ObjectIndexPair>(numColumnsIncludingTime);
    for (int i=1; i < numColumnsIncludingTime; i++) {
      ObjectTypesInMotionFiles cType=mapIndicesToObjectTypes.get(i);
      Object o=mapIndicesToObjects.get(i);
      if (cType == null)       continue;
      ObjectIndexPair newPair=new ObjectIndexPair(o,i - 1);
switch (cType) {
case GenCoord:
        genCoordColumns.add(newPair);
      break;
case GenCoord_Force:
    genCoordForceColumns.add(newPair);
  break;
case State:
anyStateColumns.add(newPair);
break;
case Segment_marker_p1:
segmentMarkerColumns.add(newPair);
break;
case Segment_force_p1:
segmentForceColumns.add(newPair);
break;
}
}
}
}",0.994133750488854
147117,"private void createDefaultMotionObjects(){
  if (getExperimenalMarkerGeometryJson() == null) {
    experimenalMarkerGeometryJson=new JSONObject();
    UUID uuidForMarkerGeometry=UUID.randomUUID();
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",uuidForMarkerGeometry.toString());
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",""String_Node_Str"");
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",15);
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",""String_Node_Str"");
    JSONArray json_geometries=(JSONArray)modelVisJson.get(""String_Node_Str"");
    json_geometries.add(getExperimenalMarkerGeometryJson());
    experimenalMarkerMaterialJson=new JSONObject();
    UUID uuidForMarkerMaterial=UUID.randomUUID();
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",uuidForMarkerMaterial.toString());
    String colorString=JSONUtilities.mapColorToRGBA(defaultMarkerColor);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",""String_Node_Str"");
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",30);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",true);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",JSONUtilities.mapColorToRGBA(new Vec3(0.,0.,0.)));
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",JSONUtilities.mapColorToRGBA(new Vec3(0.,0.,0.)));
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",2);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",false);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",colorString);
    JSONArray json_materials=(JSONArray)modelVisJson.get(""String_Node_Str"");
    json_materials.add(getExperimenalMarkerMaterialJson());
  }
}","private void createDefaultMotionObjects(){
  if (getExperimenalMarkerGeometryJson() == null) {
    experimenalMarkerGeometryJson=new JSONObject();
    UUID uuidForMarkerGeometry=UUID.randomUUID();
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",uuidForMarkerGeometry.toString());
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",""String_Node_Str"");
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",15);
    getExperimenalMarkerGeometryJson().put(""String_Node_Str"",""String_Node_Str"");
    JSONArray json_geometries=(JSONArray)modelVisJson.get(""String_Node_Str"");
    json_geometries.add(getExperimenalMarkerGeometryJson());
    experimenalMarkerMaterialJson=new JSONObject();
    UUID uuidForMarkerMaterial=UUID.randomUUID();
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",uuidForMarkerMaterial.toString());
    String colorString=JSONUtilities.mapColorToRGBA(getDefaultExperimentalMarkerColor());
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",""String_Node_Str"");
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",30);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",true);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",JSONUtilities.mapColorToRGBA(new Vec3(0.,0.,0.)));
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",JSONUtilities.mapColorToRGBA(new Vec3(0.,0.,0.)));
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",2);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",false);
    getExperimenalMarkerMaterialJson().put(""String_Node_Str"",colorString);
    JSONArray json_materials=(JSONArray)modelVisJson.get(""String_Node_Str"");
    json_materials.add(getExperimenalMarkerMaterialJson());
  }
}",0.9945070829719572
147118,"public int step(State s,int stepNumber){
  int retValue=0;
  processStep(s,stepNumber);
  return retValue;
}","public int step(State s,int stepNumber){
  int retValue=0;
  if (ownsStorage && stepNumber == 0)   storage.purge();
  processStep(s,stepNumber);
  return retValue;
}",0.7912087912087912
147119,"/** 
 * A variation of performAction that takes the desired representation and applies it to the model
 */
public void performAction(int newRep,int newShading){
  Node[] selected=ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
  for (int i=0; i < selected.length; i++) {
    OpenSimObjectNode objectNode=(OpenSimObjectNode)selected[i];
    if (objectNode instanceof ColorableInterface) {
      ((ColorableInterface)objectNode).setDisplayPreference(newRep);
    }
 else {
      ViewDB.getInstance().setObjectRepresentation(objectNode.getOpenSimObject(),newRep,newShading);
      objectNode.refreshNode();
    }
  }
}","/** 
 * A variation of performAction that takes the desired representation and applies it to the model
 */
public void performAction(int newRep,int newShading){
  ViewDB.getInstance().setApplyAppearanceChange(false);
  Vector<OneComponentNode> nodes=collectAffectedComponentNodes();
  for (int i=0; i < nodes.size(); i++) {
    OpenSimObjectNode objectNode=(OpenSimObjectNode)nodes.get(i);
    if (objectNode instanceof ColorableInterface) {
      ((ColorableInterface)objectNode).setDisplayPreference(newRep);
    }
  }
  ViewDB.getInstance().setApplyAppearanceChange(true);
}",0.3685503685503685
147120,"public boolean isEnabled(){
  Node[] selected=ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
  return true;
}","public boolean isEnabled(){
  return true;
}",0.4808743169398907
147121,"public static void ChangeUserSelectedNodesColor(Color newColor){
  Node[] selected=ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
  for (int i=0; i < selected.length; i++) {
    if (!(selected[i] instanceof OpenSimObjectNode)) {
      continue;
    }
    OpenSimObjectNode objectNode=(OpenSimObjectNode)selected[i];
    ObjectDisplayColorAction.ChangeUserSelectedNodeColor(objectNode,newColor,false);
  }
  ViewDB.getInstance().repaintAll();
}","public static void ChangeUserSelectedNodesColor(Vector<OneComponentNode> nodes,Color newColor){
  float[] newColorComponentsAsFloatArray=newColor.getRGBComponents(null);
  double[] newColorComponentsAsDoubleArray={newColorComponentsAsFloatArray[0],newColorComponentsAsFloatArray[1],newColorComponentsAsFloatArray[2]};
  for (  OneComponentNode nextNode : nodes) {
    ObjectDisplayColorAction.applyOperationToNode(nextNode,newColorComponentsAsDoubleArray);
  }
  ViewDB.getInstance().repaintAll();
}",0.2818930041152263
147122,"public void performAction(){
  JColorChooser objectColorChooser=new JColorChooser();
  Color newColor=objectColorChooser.showDialog((JFrame)WindowManager.getDefault().getMainWindow(),""String_Node_Str"",Color.WHITE);
  ObjectDisplayColorAction.ChangeUserSelectedNodesColor(newColor);
}","public void performAction(){
  JColorChooser objectColorChooser=new JColorChooser();
  Color newColor=objectColorChooser.showDialog((JFrame)WindowManager.getDefault().getMainWindow(),""String_Node_Str"",Color.WHITE);
  Vector<OneComponentNode> nodes=collectAffectedComponentNodes();
  ViewDB.getInstance().setApplyAppearanceChange(false);
  ObjectDisplayColorAction.ChangeUserSelectedNodesColor(nodes,newColor);
  ViewDB.getInstance().setApplyAppearanceChange(true);
}",0.7369826435246996
147123,"private static void applyOperationToNode(final OpenSimObjectNode objectNode,double[] newColorComponents){
  OpenSimObject obj=objectNode.getOpenSimObject();
  Children ch=objectNode.getChildren();
  if (ch.getNodesCount() > 0) {
    Node[] childNodes=ch.getNodes();
    for (int child=0; child < childNodes.length; child++) {
      if (!(childNodes[child] instanceof OpenSimObjectNode)) {
        continue;
      }
      OpenSimObjectNode childNode=(OpenSimObjectNode)childNodes[child];
      ObjectDisplayColorAction.applyOperationToNode(childNode,newColorComponents);
    }
  }
 else {
    boolean hasColor=(objectNode instanceof ColorableInterface);
    if (hasColor) {
      Color newColor=new Color((float)newColorComponents[0],(float)newColorComponents[1],(float)newColorComponents[2]);
      ((ColorableInterface)objectNode).setColor(newColor);
    }
 else {
      ViewDB.getInstance().setObjectColor(obj,newColorComponents);
    }
    objectNode.refreshNode();
    if (ViewDB.isVtkGraphicsAvailable())     ViewDB.getInstance().updateDisplay(objectNode.getModelForNode(),((OpenSimObjectNode)objectNode).getOwnerComponent());
  }
}","private static void applyOperationToNode(final OneComponentNode objectNode,double[] newColorComponents){
  boolean hasColor=(objectNode instanceof ColorableInterface);
  if (hasColor) {
    Color newColor=new Color((float)newColorComponents[0],(float)newColorComponents[1],(float)newColorComponents[2]);
    ((ColorableInterface)objectNode).setColor(newColor);
  }
  objectNode.refreshNode();
}",0.3879817112998041
147124,"public void performAction(){
  Vector<OneComponentNode> objects=new Vector<OneComponentNode>();
  Node[] selected=ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
  for (int i=0; i < selected.length; i++) {
    if (selected[i] instanceof OneComponentNode)     collectDescendentNodes((OneComponentNode)selected[i],objects);
  }
  ObjectDisplayOpacityPanel.showDialog(objects);
}","public void performAction(){
  Vector<OneComponentNode> objects=collectAffectedComponentNodes();
  ViewDB.getInstance().setApplyAppearanceChange(false);
  ObjectDisplayOpacityPanel.showDialog(objects);
  ViewDB.getInstance().setApplyAppearanceChange(true);
}",0.2443438914027149
147125,"public boolean isEnabled(){
  Node[] selected=ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
  boolean isColorable=true;
  for (int i=0; i < selected.length && isColorable; i++) {
    isColorable=(selected[i] instanceof OpenSimObjectNode);
    if (isColorable) {
      OpenSimObjectNode objectNode=(OpenSimObjectNode)selected[i];
      isColorable=objectNode.getValidDisplayOptions().contains(displayOption.Colorable);
    }
  }
  return isColorable;
}","public boolean isEnabled(){
  Node[] selected=ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
  boolean isColorable=true;
  for (int i=0; i < selected.length && isColorable; i++) {
    isColorable=(selected[i] instanceof OpenSimObjectNode);
    if (isColorable) {
      OpenSimObjectNode objectNode=(OpenSimObjectNode)selected[i];
      isColorable=objectNode.getValidDisplayOptions().contains(OpenSimObjectNode.displayOption.Colorable);
    }
  }
  return isColorable;
}",0.9816700610997964
147126,"private void createJsonForModel(Model model){
  state=model.getWorkingState();
  mdh=model.getDisplayHints();
  ComponentsList mcList=model.getComponentsList();
  ComponentIterator mcIter=mcList.begin();
  BodyList bodies=model.getBodyList();
  BodyIterator body=bodies.begin();
  mapBodyIndicesToFrames.put(0,model.getGround());
  JSONArray json_model_children=(JSONArray)((JSONObject)get(""String_Node_Str"")).get(""String_Node_Str"");
  JSONObject model_ground_json=new JSONObject();
  UUID groundUuid=UUID.randomUUID();
  model_ground_json.put(""String_Node_Str"",groundUuid.toString());
  model_ground_json.put(""String_Node_Str"",""String_Node_Str"");
  model_ground_json.put(""String_Node_Str"",""String_Node_Str"");
  model_ground_json.put(""String_Node_Str"",model.getGround().getAbsolutePathName());
  model_ground_json.put(""String_Node_Str"",""String_Node_Str"");
  model_ground_json.put(""String_Node_Str"",true);
  json_model_children.add(model_ground_json);
  addComponentToUUIDMap(model.getGround(),groundUuid);
  JSONArray bodies_json=new JSONArray();
  model_ground_json.put(""String_Node_Str"",bodies_json);
  mapBodyIndicesToJson.put(0,model_ground_json);
  while (!body.equals(bodies.end())) {
    int id=body.getMobilizedBodyIndex();
    mapBodyIndicesToFrames.put(id,body.__deref__());
    UUID body_uuid=UUID.randomUUID();
    JSONObject bodyJson=createBodyJson(body.__deref__(),body_uuid);
    mapBodyIndicesToJson.put(id,bodyJson);
    addComponentToUUIDMap(body.__deref__(),body_uuid);
    bodies_json.add(bodyJson);
    body.next();
  }
  dgimp=new DecorativeGeometryImplementationJS(json_geometries,json_materials,visScaleFactor);
  while (!mcIter.equals(mcList.end())) {
    Component comp=mcIter.__deref__();
    System.out.println(""String_Node_Str"" + comp.getAbsolutePathName() + ""String_Node_Str""+ comp.getConcreteClassName());
    ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
    comp.generateDecorations(true,mdh,state,adg);
    if (adg.size() > 0) {
      processDecorativeGeometry(adg,comp,dgimp,json_materials);
    }
    GeometryPath gPath=GeometryPath.safeDownCast(comp);
    boolean isGeometryPath=(gPath != null);
    if (isGeometryPath) {
      UUID pathUUID=createJsonForGeometryPath(gPath,mdh,state,json_geometries,json_materials);
      pathList.put(gPath,pathUUID);
    }
 else {
      adg.clear();
      comp.generateDecorations(false,mdh,state,adg);
      if (adg.size() > 0) {
        processDecorativeGeometry(adg,comp,dgimp,json_materials);
      }
    }
    mcIter.next();
  }
}","private void createJsonForModel(Model model){
  state=model.getWorkingState();
  mdh=model.getDisplayHints();
  ComponentsList mcList=model.getComponentsList();
  ComponentIterator mcIter=mcList.begin();
  BodyList bodies=model.getBodyList();
  BodyIterator body=bodies.begin();
  mapBodyIndicesToFrames.put(0,model.getGround());
  JSONArray json_model_children=(JSONArray)((JSONObject)get(""String_Node_Str"")).get(""String_Node_Str"");
  JSONObject model_ground_json=new JSONObject();
  UUID groundUuid=UUID.randomUUID();
  model_ground_json.put(""String_Node_Str"",groundUuid.toString());
  model_ground_json.put(""String_Node_Str"",""String_Node_Str"");
  model_ground_json.put(""String_Node_Str"",""String_Node_Str"");
  model_ground_json.put(""String_Node_Str"",model.getGround().getAbsolutePathName());
  model_ground_json.put(""String_Node_Str"",""String_Node_Str"");
  model_ground_json.put(""String_Node_Str"",true);
  json_model_children.add(model_ground_json);
  addComponentToUUIDMap(model.getGround(),groundUuid);
  JSONArray bodies_json=new JSONArray();
  model_ground_json.put(""String_Node_Str"",bodies_json);
  mapBodyIndicesToJson.put(0,model_ground_json);
  while (!body.equals(bodies.end())) {
    int id=body.getMobilizedBodyIndex();
    mapBodyIndicesToFrames.put(id,body.__deref__());
    UUID body_uuid=UUID.randomUUID();
    JSONObject bodyJson=createBodyJson(body.__deref__(),body_uuid);
    mapBodyIndicesToJson.put(id,bodyJson);
    addComponentToUUIDMap(body.__deref__(),body_uuid);
    bodies_json.add(bodyJson);
    body.next();
  }
  dgimp=new DecorativeGeometryImplementationJS(json_geometries,json_materials,visScaleFactor);
  while (!mcIter.equals(mcList.end())) {
    Component comp=mcIter.__deref__();
    ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
    comp.generateDecorations(true,mdh,state,adg);
    if (adg.size() > 0) {
      processDecorativeGeometry(adg,comp,dgimp,json_materials);
    }
    GeometryPath gPath=GeometryPath.safeDownCast(comp);
    boolean isGeometryPath=(gPath != null);
    if (isGeometryPath) {
      UUID pathUUID=createJsonForGeometryPath(gPath,mdh,state,json_geometries,json_materials);
      pathList.put(gPath,pathUUID);
    }
 else {
      adg.clear();
      comp.generateDecorations(false,mdh,state,adg);
      if (adg.size() > 0) {
        processDecorativeGeometry(adg,comp,dgimp,json_materials);
      }
    }
    mcIter.next();
  }
}",0.9754115017272912
147127,"public JSONObject createFrameMessageJson(){
  JSONObject msg=new JSONObject();
  Iterator<Integer> bodyIdIter=mapBodyIndicesToFrames.keySet().iterator();
  msg.put(""String_Node_Str"",""String_Node_Str"");
  JSONArray bodyTransforms_json=new JSONArray();
  msg.put(""String_Node_Str"",bodyTransforms_json);
  while (bodyIdIter.hasNext()) {
    int bodyId=bodyIdIter.next();
    JSONObject oneBodyXform_json=new JSONObject();
    PhysicalFrame bodyFrame=mapBodyIndicesToFrames.get(bodyId);
    Transform xform=bodyFrame.getTransformInGround(state);
    oneBodyXform_json.put(""String_Node_Str"",mapBodyIndicesToJson.get(bodyId).get(""String_Node_Str""));
    oneBodyXform_json.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(xform,new Vec3(1.,1.,1.),visScaleFactor));
    bodyTransforms_json.add(oneBodyXform_json);
  }
  JSONArray geompaths_json=new JSONArray();
  msg.put(""String_Node_Str"",geompaths_json);
  Set<GeometryPath> paths=pathList.keySet();
  Iterator<GeometryPath> pathIter=paths.iterator();
  while (pathIter.hasNext()) {
    GeometryPath geomPathObject=pathIter.next();
    UUID pathUUID=pathList.get(geomPathObject);
    JSONObject pathUpdate_json=new JSONObject();
    pathUpdate_json.put(""String_Node_Str"",pathUUID.toString());
    Vec3 pathColor=geomPathObject.getColor(state);
    String colorString=JSONUtilities.mapColorToRGBA(pathColor);
    pathUpdate_json.put(""String_Node_Str"",colorString);
    geompaths_json.add(pathUpdate_json);
  }
  return msg;
}","public JSONObject createFrameMessageJson(){
  JSONObject msg=new JSONObject();
  Iterator<Integer> bodyIdIter=mapBodyIndicesToFrames.keySet().iterator();
  msg.put(""String_Node_Str"",""String_Node_Str"");
  JSONArray bodyTransforms_json=new JSONArray();
  msg.put(""String_Node_Str"",bodyTransforms_json);
  if (ready) {
    while (bodyIdIter.hasNext()) {
      int bodyId=bodyIdIter.next();
      JSONObject oneBodyXform_json=new JSONObject();
      PhysicalFrame bodyFrame=mapBodyIndicesToFrames.get(bodyId);
      Transform xform=bodyFrame.getTransformInGround(state);
      oneBodyXform_json.put(""String_Node_Str"",mapBodyIndicesToJson.get(bodyId).get(""String_Node_Str""));
      oneBodyXform_json.put(""String_Node_Str"",JSONUtilities.createMatrixFromTransform(xform,new Vec3(1.,1.,1.),visScaleFactor));
      bodyTransforms_json.add(oneBodyXform_json);
    }
    JSONArray geompaths_json=new JSONArray();
    msg.put(""String_Node_Str"",geompaths_json);
    Set<GeometryPath> paths=pathList.keySet();
    Iterator<GeometryPath> pathIter=paths.iterator();
    while (pathIter.hasNext()) {
      GeometryPath geomPathObject=pathIter.next();
      UUID pathUUID=pathList.get(geomPathObject);
      JSONObject pathUpdate_json=new JSONObject();
      pathUpdate_json.put(""String_Node_Str"",pathUUID.toString());
      Vec3 pathColor=geomPathObject.getColor(state);
      String colorString=JSONUtilities.mapColorToRGBA(pathColor);
      pathUpdate_json.put(""String_Node_Str"",colorString);
      geompaths_json.add(pathUpdate_json);
    }
  }
  return msg;
}",0.9785265939874463
147128,"public ModelVisualizationJson(JSONObject jsonTopIn,Model model){
  createModelJsonNode();
  createJsonForModel(model);
}","public ModelVisualizationJson(JSONObject jsonTopIn,Model model){
  if (verbose)   System.out.println(""String_Node_Str"" + model.getName());
  createModelJsonNode();
  createJsonForModel(model);
  ready=true;
  if (verbose)   System.out.println(""String_Node_Str"" + model.getName());
}",0.5970149253731343
147129,"public void setCurrentJson(){
  Model cModel=getCurrentModel();
  if (cModel != null && mapModelsToJsons.containsKey(cModel)) {
    currentJson=mapModelsToJsons.get(cModel);
    JSONObject msg=currentJson.createSetCurrentModelJson();
    websocketdb.broadcastMessageJson(msg,null);
    System.out.println(msg.toJSONString());
  }
}","public void setCurrentJson(){
  Model cModel=getCurrentModel();
  if (cModel != null && mapModelsToJsons.containsKey(cModel)) {
    currentJson=mapModelsToJsons.get(cModel);
    JSONObject msg=currentJson.createSetCurrentModelJson();
    websocketdb.broadcastMessageJson(msg,null);
    if (debugLevel > 1)     System.out.println(msg.toJSONString());
  }
}",0.9650145772594751
147130,"public void exportAllModelsToJson(VisWebSocket socket){
  Object[] models=OpenSimDB.getInstance().getAllModels();
  for (int i=0; i < models.length; i++) {
    Model model=(Model)models[i];
    ModelVisualizationJson vizJson=null;
    if (getInstance().mapModelsToJsons.containsKey(model)) {
      vizJson=getInstance().mapModelsToJsons.get(model);
    }
 else {
      vizJson=new ModelVisualizationJson(jsondb,model);
      getInstance().addModelVisuals(model,vizJson);
    }
    exportModelJsonToVisualizer(vizJson,socket);
  }
}","public void exportAllModelsToJson(VisWebSocket socket){
  Object[] models=OpenSimDB.getInstance().getAllModels();
  for (int i=0; i < models.length; i++) {
    Model model=(Model)models[i];
    ModelVisualizationJson vizJson=null;
    if (debugLevel > 1)     System.out.println(""String_Node_Str"");
    if (getInstance().mapModelsToJsons.containsKey(model)) {
      vizJson=getInstance().mapModelsToJsons.get(model);
    }
 else {
      vizJson=createJsonFroModel(jsondb,model);
    }
    exportModelJsonToVisualizer(vizJson,socket);
  }
}",0.7652011225444341
147131,"/** 
 * update Method is called whenever a model is added, removed and/or moved in the GUI Observable should be of type OpenSimDB.
 */
public void update(Observable o,Object arg){
  if (arg instanceof JSONObject) {
    handleJson((JSONObject)arg);
  }
  if (o instanceof VisWebSocket) {
    getInstance().sync((VisWebSocket)o);
    if (currentJson == null)     setCurrentJson();
    return;
  }
  if (o instanceof OpenSimDB) {
    if (arg instanceof ObjectsAddedEvent) {
      ObjectsAddedEvent ev=(ObjectsAddedEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          assert(false);
        }
        if (objs.get(i) instanceof Marker) {
          SingleModelVisuals vis=mapModelsToVisuals.get(ev.getModel());
          repaintAll();
        }
      }
    }
 else     if (arg instanceof ObjectSetCurrentEvent) {
      clearSelectedObjects();
      ObjectSetCurrentEvent ev=(ObjectSetCurrentEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          Model currentModel=(Model)objs.get(i);
          Enumeration<Model> models=mapModelsToVisuals.keys();
          while (models.hasMoreElements()) {
            Model next=models.nextElement();
            double nominalOpacity=modelOpacities.get(next);
            SingleModelVisuals vis=mapModelsToVisuals.get(next);
            if (next == currentModel) {
              setObjectOpacity(next,nominalOpacity);
              vis.setPickable(true);
            }
 else {
              setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
              vis.setPickable(false);
            }
          }
          setCurrentJson();
          break;
        }
      }
    }
 else     if (arg instanceof ObjectsDeletedEvent) {
      handleObjectsDeletedEvent(arg);
    }
 else     if (arg instanceof ObjectEnabledStateChangeEvent) {
      handleObjectsEnabledStateChangeEvent(arg);
    }
 else     if (arg instanceof ObjectsRenamedEvent) {
      ObjectsRenamedEvent ev=(ObjectsRenamedEvent)arg;
      statusDisplaySelectedObjects();
      repaintAll();
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Actuator) {
        }
 else         if (objs.get(i) instanceof Marker) {
        }
      }
    }
 else     if (arg instanceof ModelEvent) {
      ModelEvent ev=(ModelEvent)arg;
      if (ev.getOperation() == ModelEvent.Operation.Open) {
        Model evModel=ev.getModel();
        processSavedSettings(evModel);
        try {
          createNewViewWindowIfNeeded();
        }
 catch (        UnsatisfiedLinkError e) {
          setGraphicsAvailable(false);
        }
        if (isVtkGraphicsAvailable()) {
          SingleModelVisuals newModelVisual=(evModel instanceof ModelForExperimentalData) ? new ExperimentalDataVisuals(evModel) : new SingleModelVisuals(evModel);
          mapModelsToVisuals.put(evModel,newModelVisual);
          getModelVisuals().add(newModelVisual);
          modelOpacities.put(evModel,1.0);
          addVisObjectToAllViews();
          vtkMatrix4x4 m=(evModel instanceof ModelForExperimentalData) ? new vtkMatrix4x4() : getInitialTransform(newModelVisual);
          newModelVisual.getModelDisplayAssembly().SetUserMatrix(m);
          sceneAssembly.AddPart(newModelVisual.getModelDisplayAssembly());
        }
        if (websocketdb != null) {
          ModelVisualizationJson vizJson=new ModelVisualizationJson(jsondb,evModel);
          getInstance().addModelVisuals(evModel,vizJson);
          exportModelJsonToVisualizer(vizJson,null);
          mapModelsToJsons.put(evModel,vizJson);
        }
 else {
          VisualizerWindowAction.openVisualizerWindow();
        }
        if (OpenSimDB.getInstance().getNumModels() == 1) {
          Iterator<ModelWindowVTKTopComponent> windowIter=openWindows.iterator();
          double[] bnds=new double[6];
          while (windowIter.hasNext()) {
            bnds=computeSceneBounds();
            ModelWindowVTKTopComponent nextWindow=windowIter.next();
            lockDrawingSurfaces(true);
            nextWindow.getCanvas().GetRenderer().ResetCamera(bnds);
            lockDrawingSurfaces(false);
          }
        }
        repaintAll();
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Close) {
        Model dModel=ev.getModel();
        mapModelsToSettings.remove(dModel);
        removeObjectsBelongingToModelFromSelection(dModel);
        SingleModelVisuals visModel=mapModelsToVisuals.get(dModel);
        if (visModel != null) {
          removeObjectFromScene(visModel.getModelDisplayAssembly());
          modelVisuals.remove(visModel);
        }
        removeAnnotationObjects(dModel);
        mapModelsToVisuals.remove(dModel);
        modelOpacities.remove(dModel);
        if (visModel != null)         visModel.cleanup();
        if (websocketdb != null) {
          ModelVisualizationJson dJson=mapModelsToJsons.get(dModel);
          JSONObject msg=dJson.createCloseModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          System.out.println(msg.toJSONString());
          UUID modelUUID=dJson.getModelUUID();
          mapModelsToJsons.remove(dModel);
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.SetCurrent) {
        Enumeration<Model> models=mapModelsToVisuals.keys();
        while (models.hasMoreElements()) {
          Model next=models.nextElement();
          double nominalOpacity=modelOpacities.get(next);
          SingleModelVisuals vis=mapModelsToVisuals.get(next);
          if (next == ev.getModel()) {
            setObjectOpacity(next,nominalOpacity);
          }
 else {
            setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
          }
        }
        if (websocketdb != null) {
          Model cModel=ev.getModel();
          currentJson=mapModelsToJsons.get(cModel);
          JSONObject msg=currentJson.createSetCurrentModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          System.out.println(msg.toJSONString());
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Save) {
        updateSettingsSerializer(ev.getModel());
      }
    }
  }
}","/** 
 * update Method is called whenever a model is added, removed and/or moved in the GUI Observable should be of type OpenSimDB.
 */
public void update(Observable o,Object arg){
  if (arg instanceof JSONObject) {
    handleJson((JSONObject)arg);
  }
  if (o instanceof VisWebSocket) {
    getInstance().sync((VisWebSocket)o);
    if (currentJson == null)     setCurrentJson();
    return;
  }
  if (o instanceof OpenSimDB) {
    if (arg instanceof ObjectsAddedEvent) {
      ObjectsAddedEvent ev=(ObjectsAddedEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          assert(false);
        }
        if (objs.get(i) instanceof Marker) {
          SingleModelVisuals vis=mapModelsToVisuals.get(ev.getModel());
          repaintAll();
        }
      }
    }
 else     if (arg instanceof ObjectSetCurrentEvent) {
      clearSelectedObjects();
      ObjectSetCurrentEvent ev=(ObjectSetCurrentEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          Model currentModel=(Model)objs.get(i);
          Enumeration<Model> models=mapModelsToVisuals.keys();
          while (models.hasMoreElements()) {
            Model next=models.nextElement();
            double nominalOpacity=modelOpacities.get(next);
            SingleModelVisuals vis=mapModelsToVisuals.get(next);
            if (next == currentModel) {
              setObjectOpacity(next,nominalOpacity);
              vis.setPickable(true);
            }
 else {
              setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
              vis.setPickable(false);
            }
          }
          setCurrentJson();
          break;
        }
      }
    }
 else     if (arg instanceof ObjectsDeletedEvent) {
      handleObjectsDeletedEvent(arg);
    }
 else     if (arg instanceof ObjectEnabledStateChangeEvent) {
      handleObjectsEnabledStateChangeEvent(arg);
    }
 else     if (arg instanceof ObjectsRenamedEvent) {
      ObjectsRenamedEvent ev=(ObjectsRenamedEvent)arg;
      statusDisplaySelectedObjects();
      repaintAll();
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Actuator) {
        }
 else         if (objs.get(i) instanceof Marker) {
        }
      }
    }
 else     if (arg instanceof ModelEvent) {
      ModelEvent ev=(ModelEvent)arg;
      if (ev.getOperation() == ModelEvent.Operation.Open) {
        Model evModel=ev.getModel();
        processSavedSettings(evModel);
        try {
          createNewViewWindowIfNeeded();
        }
 catch (        UnsatisfiedLinkError e) {
          setGraphicsAvailable(false);
        }
        if (isVtkGraphicsAvailable()) {
          SingleModelVisuals newModelVisual=(evModel instanceof ModelForExperimentalData) ? new ExperimentalDataVisuals(evModel) : new SingleModelVisuals(evModel);
          mapModelsToVisuals.put(evModel,newModelVisual);
          getModelVisuals().add(newModelVisual);
          modelOpacities.put(evModel,1.0);
          addVisObjectToAllViews();
          vtkMatrix4x4 m=(evModel instanceof ModelForExperimentalData) ? new vtkMatrix4x4() : getInitialTransform(newModelVisual);
          newModelVisual.getModelDisplayAssembly().SetUserMatrix(m);
          sceneAssembly.AddPart(newModelVisual.getModelDisplayAssembly());
        }
        if (websocketdb != null) {
          if (debugLevel > 1)           System.out.println(""String_Node_Str"");
          ModelVisualizationJson vizJson=createJsonFroModel(jsondb,evModel);
          exportModelJsonToVisualizer(vizJson,null);
        }
 else {
          VisualizerWindowAction.openVisualizerWindow();
        }
        if (OpenSimDB.getInstance().getNumModels() == 1) {
          Iterator<ModelWindowVTKTopComponent> windowIter=openWindows.iterator();
          double[] bnds=new double[6];
          while (windowIter.hasNext()) {
            bnds=computeSceneBounds();
            ModelWindowVTKTopComponent nextWindow=windowIter.next();
            lockDrawingSurfaces(true);
            nextWindow.getCanvas().GetRenderer().ResetCamera(bnds);
            lockDrawingSurfaces(false);
          }
        }
        repaintAll();
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Close) {
        Model dModel=ev.getModel();
        mapModelsToSettings.remove(dModel);
        removeObjectsBelongingToModelFromSelection(dModel);
        SingleModelVisuals visModel=mapModelsToVisuals.get(dModel);
        if (visModel != null) {
          removeObjectFromScene(visModel.getModelDisplayAssembly());
          modelVisuals.remove(visModel);
        }
        removeAnnotationObjects(dModel);
        mapModelsToVisuals.remove(dModel);
        modelOpacities.remove(dModel);
        if (visModel != null)         visModel.cleanup();
        if (websocketdb != null) {
          ModelVisualizationJson dJson=mapModelsToJsons.get(dModel);
          JSONObject msg=dJson.createCloseModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          if (debugLevel > 1)           System.out.println(msg.toJSONString());
          UUID modelUUID=dJson.getModelUUID();
          mapModelsToJsons.remove(dModel);
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.SetCurrent) {
        Enumeration<Model> models=mapModelsToVisuals.keys();
        while (models.hasMoreElements()) {
          Model next=models.nextElement();
          double nominalOpacity=modelOpacities.get(next);
          SingleModelVisuals vis=mapModelsToVisuals.get(next);
          if (next == ev.getModel()) {
            setObjectOpacity(next,nominalOpacity);
          }
 else {
            setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
          }
        }
        if (websocketdb != null) {
          Model cModel=ev.getModel();
          currentJson=mapModelsToJsons.get(cModel);
          JSONObject msg=currentJson.createSetCurrentModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          if (debugLevel > 1)           System.out.println(msg.toJSONString());
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Save) {
        updateSettingsSerializer(ev.getModel());
      }
    }
  }
}",0.9697064824988229
147132,"public void setCurrentJson(){
  Model cModel=getCurrentModel();
  if (cModel != null && mapModelsToJsons.containsKey(cModel)) {
    currentJson=mapModelsToJsons.get(cModel);
    JSONObject msg=currentJson.createSetCurrentModelJson();
    websocketdb.broadcastMessageJson(msg,null);
    System.out.println(msg.toJSONString());
  }
}","public void setCurrentJson(){
  Model cModel=getCurrentModel();
  if (cModel != null && mapModelsToJsons.containsKey(cModel)) {
    currentJson=mapModelsToJsons.get(cModel);
    JSONObject msg=currentJson.createSetCurrentModelJson();
    websocketdb.broadcastMessageJson(msg,null);
    if (debugLevel > 1)     System.out.println(msg.toJSONString());
  }
}",0.9650145772594751
147133,"public void exportAllModelsToJson(VisWebSocket socket){
  Object[] models=OpenSimDB.getInstance().getAllModels();
  for (int i=0; i < models.length; i++) {
    Model model=(Model)models[i];
    ModelVisualizationJson vizJson=null;
    if (getInstance().mapModelsToJsons.containsKey(model)) {
      vizJson=getInstance().mapModelsToJsons.get(model);
    }
 else {
      vizJson=new ModelVisualizationJson(jsondb,model);
      getInstance().addModelVisuals(model,vizJson);
    }
    exportModelJsonToVisualizer(vizJson,socket);
  }
}","public void exportAllModelsToJson(VisWebSocket socket){
  Object[] models=OpenSimDB.getInstance().getAllModels();
  for (int i=0; i < models.length; i++) {
    Model model=(Model)models[i];
    ModelVisualizationJson vizJson=null;
    if (debugLevel > 1)     System.out.println(""String_Node_Str"");
    if (getInstance().mapModelsToJsons.containsKey(model)) {
      vizJson=getInstance().mapModelsToJsons.get(model);
    }
 else {
      vizJson=createJsonFroModel(jsondb,model);
    }
    exportModelJsonToVisualizer(vizJson,socket);
  }
}",0.7652011225444341
147134,"/** 
 * update Method is called whenever a model is added, removed and/or moved in the GUI Observable should be of type OpenSimDB.
 */
public void update(Observable o,Object arg){
  if (arg instanceof JSONObject) {
    handleJson((JSONObject)arg);
  }
  if (o instanceof VisWebSocket) {
    getInstance().sync((VisWebSocket)o);
    if (currentJson == null)     setCurrentJson();
    return;
  }
  if (o instanceof OpenSimDB) {
    if (arg instanceof ObjectsAddedEvent) {
      ObjectsAddedEvent ev=(ObjectsAddedEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          assert(false);
        }
        if (objs.get(i) instanceof Marker) {
          SingleModelVisuals vis=mapModelsToVisuals.get(ev.getModel());
          repaintAll();
        }
      }
    }
 else     if (arg instanceof ObjectSetCurrentEvent) {
      clearSelectedObjects();
      ObjectSetCurrentEvent ev=(ObjectSetCurrentEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          Model currentModel=(Model)objs.get(i);
          Enumeration<Model> models=mapModelsToVisuals.keys();
          while (models.hasMoreElements()) {
            Model next=models.nextElement();
            double nominalOpacity=modelOpacities.get(next);
            SingleModelVisuals vis=mapModelsToVisuals.get(next);
            if (next == currentModel) {
              setObjectOpacity(next,nominalOpacity);
              vis.setPickable(true);
            }
 else {
              setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
              vis.setPickable(false);
            }
          }
          setCurrentJson();
          break;
        }
      }
    }
 else     if (arg instanceof ObjectsDeletedEvent) {
      handleObjectsDeletedEvent(arg);
    }
 else     if (arg instanceof ObjectEnabledStateChangeEvent) {
      handleObjectsEnabledStateChangeEvent(arg);
    }
 else     if (arg instanceof ObjectsRenamedEvent) {
      ObjectsRenamedEvent ev=(ObjectsRenamedEvent)arg;
      statusDisplaySelectedObjects();
      repaintAll();
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Actuator) {
        }
 else         if (objs.get(i) instanceof Marker) {
        }
      }
    }
 else     if (arg instanceof ModelEvent) {
      ModelEvent ev=(ModelEvent)arg;
      if (ev.getOperation() == ModelEvent.Operation.Open) {
        Model evModel=ev.getModel();
        processSavedSettings(evModel);
        try {
          createNewViewWindowIfNeeded();
        }
 catch (        UnsatisfiedLinkError e) {
          setGraphicsAvailable(false);
        }
        if (isVtkGraphicsAvailable()) {
          SingleModelVisuals newModelVisual=(evModel instanceof ModelForExperimentalData) ? new ExperimentalDataVisuals(evModel) : new SingleModelVisuals(evModel);
          mapModelsToVisuals.put(evModel,newModelVisual);
          getModelVisuals().add(newModelVisual);
          modelOpacities.put(evModel,1.0);
          addVisObjectToAllViews();
          vtkMatrix4x4 m=(evModel instanceof ModelForExperimentalData) ? new vtkMatrix4x4() : getInitialTransform(newModelVisual);
          newModelVisual.getModelDisplayAssembly().SetUserMatrix(m);
          sceneAssembly.AddPart(newModelVisual.getModelDisplayAssembly());
        }
        if (websocketdb != null) {
          ModelVisualizationJson vizJson=new ModelVisualizationJson(jsondb,evModel);
          getInstance().addModelVisuals(evModel,vizJson);
          exportModelJsonToVisualizer(vizJson,null);
          mapModelsToJsons.put(evModel,vizJson);
        }
 else {
          VisualizerWindowAction.openVisualizerWindow();
        }
        if (OpenSimDB.getInstance().getNumModels() == 1) {
          Iterator<ModelWindowVTKTopComponent> windowIter=openWindows.iterator();
          double[] bnds=new double[6];
          while (windowIter.hasNext()) {
            bnds=computeSceneBounds();
            ModelWindowVTKTopComponent nextWindow=windowIter.next();
            lockDrawingSurfaces(true);
            nextWindow.getCanvas().GetRenderer().ResetCamera(bnds);
            lockDrawingSurfaces(false);
          }
        }
        repaintAll();
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Close) {
        Model dModel=ev.getModel();
        mapModelsToSettings.remove(dModel);
        removeObjectsBelongingToModelFromSelection(dModel);
        SingleModelVisuals visModel=mapModelsToVisuals.get(dModel);
        if (visModel != null) {
          removeObjectFromScene(visModel.getModelDisplayAssembly());
          modelVisuals.remove(visModel);
        }
        removeAnnotationObjects(dModel);
        mapModelsToVisuals.remove(dModel);
        modelOpacities.remove(dModel);
        if (visModel != null)         visModel.cleanup();
        if (websocketdb != null) {
          ModelVisualizationJson dJson=mapModelsToJsons.get(dModel);
          JSONObject msg=dJson.createCloseModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          System.out.println(msg.toJSONString());
          UUID modelUUID=dJson.getModelUUID();
          mapModelsToJsons.remove(dModel);
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.SetCurrent) {
        Enumeration<Model> models=mapModelsToVisuals.keys();
        while (models.hasMoreElements()) {
          Model next=models.nextElement();
          double nominalOpacity=modelOpacities.get(next);
          SingleModelVisuals vis=mapModelsToVisuals.get(next);
          if (next == ev.getModel()) {
            setObjectOpacity(next,nominalOpacity);
          }
 else {
            setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
          }
        }
        if (websocketdb != null) {
          Model cModel=ev.getModel();
          currentJson=mapModelsToJsons.get(cModel);
          JSONObject msg=currentJson.createSetCurrentModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          System.out.println(msg.toJSONString());
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Save) {
        updateSettingsSerializer(ev.getModel());
      }
    }
  }
}","/** 
 * update Method is called whenever a model is added, removed and/or moved in the GUI Observable should be of type OpenSimDB.
 */
public void update(Observable o,Object arg){
  if (arg instanceof JSONObject) {
    handleJson((JSONObject)arg);
  }
  if (o instanceof VisWebSocket) {
    getInstance().sync((VisWebSocket)o);
    if (currentJson == null)     setCurrentJson();
    return;
  }
  if (o instanceof OpenSimDB) {
    if (arg instanceof ObjectsAddedEvent) {
      ObjectsAddedEvent ev=(ObjectsAddedEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          assert(false);
        }
        if (objs.get(i) instanceof Marker) {
          SingleModelVisuals vis=mapModelsToVisuals.get(ev.getModel());
          repaintAll();
        }
      }
    }
 else     if (arg instanceof ObjectSetCurrentEvent) {
      clearSelectedObjects();
      ObjectSetCurrentEvent ev=(ObjectSetCurrentEvent)arg;
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Model) {
          Model currentModel=(Model)objs.get(i);
          Enumeration<Model> models=mapModelsToVisuals.keys();
          while (models.hasMoreElements()) {
            Model next=models.nextElement();
            double nominalOpacity=modelOpacities.get(next);
            SingleModelVisuals vis=mapModelsToVisuals.get(next);
            if (next == currentModel) {
              setObjectOpacity(next,nominalOpacity);
              vis.setPickable(true);
            }
 else {
              setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
              vis.setPickable(false);
            }
          }
          setCurrentJson();
          break;
        }
      }
    }
 else     if (arg instanceof ObjectsDeletedEvent) {
      handleObjectsDeletedEvent(arg);
    }
 else     if (arg instanceof ObjectEnabledStateChangeEvent) {
      handleObjectsEnabledStateChangeEvent(arg);
    }
 else     if (arg instanceof ObjectsRenamedEvent) {
      ObjectsRenamedEvent ev=(ObjectsRenamedEvent)arg;
      statusDisplaySelectedObjects();
      repaintAll();
      Vector<OpenSimObject> objs=ev.getObjects();
      for (int i=0; i < objs.size(); i++) {
        if (objs.get(i) instanceof Actuator) {
        }
 else         if (objs.get(i) instanceof Marker) {
        }
      }
    }
 else     if (arg instanceof ModelEvent) {
      ModelEvent ev=(ModelEvent)arg;
      if (ev.getOperation() == ModelEvent.Operation.Open) {
        Model evModel=ev.getModel();
        processSavedSettings(evModel);
        try {
          createNewViewWindowIfNeeded();
        }
 catch (        UnsatisfiedLinkError e) {
          setGraphicsAvailable(false);
        }
        if (isVtkGraphicsAvailable()) {
          SingleModelVisuals newModelVisual=(evModel instanceof ModelForExperimentalData) ? new ExperimentalDataVisuals(evModel) : new SingleModelVisuals(evModel);
          mapModelsToVisuals.put(evModel,newModelVisual);
          getModelVisuals().add(newModelVisual);
          modelOpacities.put(evModel,1.0);
          addVisObjectToAllViews();
          vtkMatrix4x4 m=(evModel instanceof ModelForExperimentalData) ? new vtkMatrix4x4() : getInitialTransform(newModelVisual);
          newModelVisual.getModelDisplayAssembly().SetUserMatrix(m);
          sceneAssembly.AddPart(newModelVisual.getModelDisplayAssembly());
        }
        if (websocketdb != null) {
          if (debugLevel > 1)           System.out.println(""String_Node_Str"");
          ModelVisualizationJson vizJson=createJsonFroModel(jsondb,evModel);
          exportModelJsonToVisualizer(vizJson,null);
        }
 else {
          VisualizerWindowAction.openVisualizerWindow();
        }
        if (OpenSimDB.getInstance().getNumModels() == 1) {
          Iterator<ModelWindowVTKTopComponent> windowIter=openWindows.iterator();
          double[] bnds=new double[6];
          while (windowIter.hasNext()) {
            bnds=computeSceneBounds();
            ModelWindowVTKTopComponent nextWindow=windowIter.next();
            lockDrawingSurfaces(true);
            nextWindow.getCanvas().GetRenderer().ResetCamera(bnds);
            lockDrawingSurfaces(false);
          }
        }
        repaintAll();
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Close) {
        Model dModel=ev.getModel();
        mapModelsToSettings.remove(dModel);
        removeObjectsBelongingToModelFromSelection(dModel);
        SingleModelVisuals visModel=mapModelsToVisuals.get(dModel);
        if (visModel != null) {
          removeObjectFromScene(visModel.getModelDisplayAssembly());
          modelVisuals.remove(visModel);
        }
        removeAnnotationObjects(dModel);
        mapModelsToVisuals.remove(dModel);
        modelOpacities.remove(dModel);
        if (visModel != null)         visModel.cleanup();
        if (websocketdb != null) {
          ModelVisualizationJson dJson=mapModelsToJsons.get(dModel);
          JSONObject msg=dJson.createCloseModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          if (debugLevel > 1)           System.out.println(msg.toJSONString());
          UUID modelUUID=dJson.getModelUUID();
          mapModelsToJsons.remove(dModel);
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.SetCurrent) {
        Enumeration<Model> models=mapModelsToVisuals.keys();
        while (models.hasMoreElements()) {
          Model next=models.nextElement();
          double nominalOpacity=modelOpacities.get(next);
          SingleModelVisuals vis=mapModelsToVisuals.get(next);
          if (next == ev.getModel()) {
            setObjectOpacity(next,nominalOpacity);
          }
 else {
            setObjectOpacity(next,getNonCurrentModelOpacity() * nominalOpacity);
          }
        }
        if (websocketdb != null) {
          Model cModel=ev.getModel();
          currentJson=mapModelsToJsons.get(cModel);
          JSONObject msg=currentJson.createSetCurrentModelJson();
          websocketdb.broadcastMessageJson(msg,null);
          if (debugLevel > 1)           System.out.println(msg.toJSONString());
        }
      }
 else       if (ev.getOperation() == ModelEvent.Operation.Save) {
        updateSettingsSerializer(ev.getModel());
      }
    }
  }
}",0.9697064824988229
147135,"public void updateIntegratorSettings(AbstractToolModel toolModel){
  maximumNumberOfSteps.setText(numFormat.format(toolModel.getMaximumNumberOfSteps()));
  maxDT.setText(numFormat.format(toolModel.getMaxDT()));
  minDT.setText(numFormat.format(toolModel.getMinDT()));
  errorTolerance.setText(numFormat.format(toolModel.getErrorTolerance()));
}","public void updateIntegratorSettings(AbstractToolModel toolModel){
  maximumNumberOfSteps.setText(numFormat.format(toolModel.getMaximumNumberOfSteps()));
  maxDT.setText(numFormat.format(toolModel.getMaxDT()));
  minDT.setText(numFormat.format(toolModel.getMinDT()));
  errorTolerance.setText(numFormat.format(toolModel.getErrorTolerance()));
  useSpecifiedDtActionPerformed(null);
}",0.9463548830811556
147136,"/** 
 * Run an analysis to compute curves for muscle analyses operating on current model domainName is assumed to be set. If starts with Motion: then we assume we're plotting against a motion curve otherwise it's vs. Generalized coordinate of the current model
 */
void runAnalysisTool(PlotterSourceAnalysis source,PlotterSourceInterface motion,String[] ranges){
  AnalyzeTool tool=plotterModel.getAnalyzeTool(currentModel);
  if (motion instanceof PlotterSourceMotion || motion instanceof PlotterSourceStorage)   tool.setSolveForEquilibrium(!motion.hasFullState(currentModel));
 else   tool.setSolveForEquilibrium(true);
  PlotterSourceAnalysis analysisSource=(PlotterSourceAnalysis)source;
  plotterModel.configureAnalyses(tool,analysisSource,domainName,ranges);
  int numStates=currentModel.getNumStateVariables();
  ArrayStr stateNames=currentModel.getStateVariableNames();
  State saveState=openSimContext.getCurrentStateCopy();
  Storage extendedMotionStorage;
  int key=(int)(java.lang.Math.random() * 100);
  if (motion != null && motion instanceof PlotterSourceMotion) {
    tool.setStartTime(motion.getStorage().getFirstTime());
    tool.setFinalTime(motion.getStorage().getLastTime());
    statesStorage=buildStatesStorageFromMotion(motion.getStorage(),isActivationOverride(),getActivationValue());
    tool.setStatesStorage(statesStorage);
  }
 else {
    StatesReporter reporter=new StatesReporter(currentModel);
    reporter.begin(openSimContext.getCurrentStateRef());
    reporter.step(saveState,key);
    statesStorage=reporter.getStatesStorage();
    statesStorage.print(""String_Node_Str"");
    StateVector statevec=statesStorage.getStateVector(0);
    ArrayDouble statesForAnalysis=new ArrayDouble(statevec.getData());
    setNonzeroDefaultValues(stateNames,statesForAnalysis,isActivationOverride(),getActivationValue());
    double NUM_STEPS=100.0;
    Coordinate coord=currentModel.getCoordinateSet().get(domainName);
    int xIndex=statesStorage.getStateIndex(getDomainName());
    double domStart=(Double)jDomainStartTextField.getValue();
    double domEnd=(Double)jDomainEndTextField.getValue();
    if (coord.getMotionType() == Coordinate.MotionType.Rotational) {
      domStart=Math.toRadians(domStart);
      if (domStart < coord.getRangeMin())       domStart=coord.getRangeMin();
      domEnd=Math.toRadians(domEnd);
      if (domEnd > coord.getRangeMax())       domEnd=coord.getRangeMax();
    }
    for (int i=0; i < NUM_STEPS; i++) {
      double time=(double)i;
      double increment=1. / (NUM_STEPS - 1) * (domEnd - domStart);
      double val=domStart + increment * i;
      statesForAnalysis.set(xIndex,val);
      StateVector newVector=new StateVector();
      newVector.setStates(time,statesForAnalysis.getAsVector());
      statesStorage.append(newVector);
    }
    tool.setStatesStorage(statesStorage);
    tool.setStartTime(0.);
    tool.setFinalTime(NUM_STEPS);
    sourceX=new PlotterSourceAnalysis(currentModel,statesStorage,""String_Node_Str"");
    tool.setModelFilename(currentModel.getInputFileName());
  }
  tool.setPrintResultFiles(false);
  try {
    tool.run(true);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  openSimContext.setState(saveState);
  int na=currentModel.getAnalysisSet().getSize();
  Analysis analysis=currentModel.getAnalysisSet().get(""String_Node_Str"");
  analysisSource.updateStorage(analysis);
  currentModel.getSimbodyEngine().convertRadiansToDegrees(analysisSource.getStorage());
  currentModel.getSimbodyEngine().convertRadiansToDegrees(statesStorage);
  ArrayStr coordsArray=new ArrayStr();
  coordsArray.append(""String_Node_Str"");
  MuscleAnalysis.safeDownCast(analysis).setCoordinates(coordsArray);
}","/** 
 * Run an analysis to compute curves for muscle analyses operating on current model domainName is assumed to be set. If starts with Motion: then we assume we're plotting against a motion curve otherwise it's vs. Generalized coordinate of the current model
 */
void runAnalysisTool(PlotterSourceAnalysis source,PlotterSourceInterface motion,String[] ranges){
  AnalyzeTool tool=plotterModel.getAnalyzeTool(currentModel);
  if (motion instanceof PlotterSourceMotion || motion instanceof PlotterSourceStorage)   tool.setSolveForEquilibrium(!motion.hasFullState(currentModel));
 else   tool.setSolveForEquilibrium(true);
  PlotterSourceAnalysis analysisSource=(PlotterSourceAnalysis)source;
  plotterModel.configureAnalyses(tool,analysisSource,domainName,ranges);
  int numStates=currentModel.getNumStateVariables();
  ArrayStr stateNames=currentModel.getStateVariableNames();
  State saveState=openSimContext.getCurrentStateCopy();
  Storage extendedMotionStorage;
  int key=(int)(java.lang.Math.random() * 100);
  if (motion != null && motion instanceof PlotterSourceMotion) {
    tool.setStartTime(motion.getStorage().getFirstTime());
    tool.setFinalTime(motion.getStorage().getLastTime());
    statesStorage=buildStatesStorageFromMotion(motion.getStorage(),isActivationOverride(),getActivationValue());
    tool.setStatesStorage(statesStorage);
  }
 else {
    StatesReporter reporter=new StatesReporter(currentModel);
    reporter.begin(openSimContext.getCurrentStateRef());
    reporter.step(saveState,key);
    statesStorage=(Storage)reporter.getStatesStorage().clone();
    statesStorage.print(""String_Node_Str"");
    StateVector statevec=statesStorage.getStateVector(0);
    ArrayDouble statesForAnalysis=new ArrayDouble(statevec.getData());
    setNonzeroDefaultValues(stateNames,statesForAnalysis,isActivationOverride(),getActivationValue());
    double NUM_STEPS=100.0;
    Coordinate coord=currentModel.getCoordinateSet().get(domainName);
    int xIndex=statesStorage.getStateIndex(getDomainName());
    double domStart=(Double)jDomainStartTextField.getValue();
    double domEnd=(Double)jDomainEndTextField.getValue();
    if (coord.getMotionType() == Coordinate.MotionType.Rotational) {
      domStart=Math.toRadians(domStart);
      if (domStart < coord.getRangeMin())       domStart=coord.getRangeMin();
      domEnd=Math.toRadians(domEnd);
      if (domEnd > coord.getRangeMax())       domEnd=coord.getRangeMax();
    }
    for (int i=0; i < NUM_STEPS; i++) {
      double time=(double)i;
      double increment=1. / (NUM_STEPS - 1) * (domEnd - domStart);
      double val=domStart + increment * i;
      statesForAnalysis.set(xIndex,val);
      StateVector newVector=new StateVector();
      newVector.setStates(time,statesForAnalysis.getAsVector());
      statesStorage.append(newVector);
    }
    tool.setStatesStorage(statesStorage);
    tool.setStartTime(0.);
    tool.setFinalTime(NUM_STEPS);
    sourceX=new PlotterSourceAnalysis(currentModel,statesStorage,""String_Node_Str"");
    tool.setModelFilename(currentModel.getInputFileName());
  }
  tool.setPrintResultFiles(false);
  try {
    tool.run(true);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  openSimContext.realizeVelocity();
  MuscleAnalysis analysis=MuscleAnalysis.safeDownCast(currentModel.getAnalysisSet().get(""String_Node_Str""));
  analysisSource.updateStorage(analysis);
  currentModel.getSimbodyEngine().convertRadiansToDegrees(analysisSource.getStorage());
  currentModel.getSimbodyEngine().convertRadiansToDegrees(statesStorage);
  ArrayStr coordsArray=new ArrayStr();
  coordsArray.append(""String_Node_Str"");
  analysis.setCoordinates(coordsArray);
}",0.9658921049055578
147137,"public String getDomainName(){
  if (domainName == null) {
    return ""String_Node_Str"";
  }
  if (builtinMuscleCurve) {
    Coordinate coord=currentModel.getCoordinateSet().get(domainName);
    return (coord.getRelativePathName(currentModel) + ""String_Node_Str"");
  }
  return domainName;
}","public String getDomainName(){
  if (domainName == null) {
    return ""String_Node_Str"";
  }
  if (builtinMuscleCurve && currentModel.getCoordinateSet().contains(domainName)) {
    Coordinate coord=currentModel.getCoordinateSet().get(domainName);
    return (coord.getRelativePathName(currentModel) + ""String_Node_Str"");
  }
  return domainName;
}",0.9122257053291536
147138,"Storage getStorage(String qName,Model model){
  AnalyzeTool tool=getAnalyzeTool(model);
  AnalysisSet analyses=model.getAnalysisSet();
  String[] qs=getBuiltinQuantities();
  for (int i=0; i < qs.length; i++) {
    if (qName.equalsIgnoreCase(qs[i])) {
      return analyses.get(builtinQuantitiesAnalysis[i]).getStorageList().get(builtinQuantitiesStorageName[i]);
    }
  }
  int numStorages=analyses.get(""String_Node_Str"").getStorageList().getSize();
  if (analyses.get(""String_Node_Str"").getStorageList().getIndex(qName) == -1) {
    MuscleAnalysis.safeDownCast(analyses.get(""String_Node_Str"")).allocateStorageObjects();
  }
  return analyses.get(""String_Node_Str"").getStorageList().get(qName);
}","Storage getStorage(String qName,Model model){
  AnalyzeTool tool=getAnalyzeTool(model);
  AnalysisSet analyses=model.getAnalysisSet();
  String[] qs=getBuiltinQuantities();
  for (int i=0; i < qs.length; i++) {
    if (qName.equalsIgnoreCase(qs[i])) {
      return analyses.get(builtinQuantitiesAnalysis[i]).getStorageList().get(builtinQuantitiesStorageName[i]);
    }
  }
  int numStorages=analyses.get(""String_Node_Str"").getStorageList().getSize();
  if (analyses.get(""String_Node_Str"").getStorageList().getIndex(qName) == -1) {
    MuscleAnalysis.safeDownCast(analyses.get(""String_Node_Str"")).setComputeMoments(true);
    MuscleAnalysis.safeDownCast(analyses.get(""String_Node_Str"")).allocateStorageObjects();
  }
  return analyses.get(""String_Node_Str"").getStorageList().get(qName);
}",0.9393530997304582
147139,"@Override public void implementLineGeometry(DecorativeLine arg0){
  Map<String,Object> dg_json=new LinkedHashMap<String,Object>();
  dg_json.put(""String_Node_Str"",geomID.toString());
  dg_json.put(""String_Node_Str"",""String_Node_Str"");
  String colorString=JSONUtilities.mapColorToRGBA(arg0.getColor());
  dg_json.put(""String_Node_Str"",colorString);
  JSONArray verts_array=new JSONArray();
  Map<String,Object> data_json=new LinkedHashMap<String,Object>();
  verts_array.add(arg0.getPoint1().get(0) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint1().get(1) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint1().get(2) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint1().get(0) * visualizerScaleFactor);
  verts_array.add((arg0.getPoint1().get(1) + 0.5) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint1().get(2) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint2().get(0) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint2().get(1) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint2().get(2) * visualizerScaleFactor);
  data_json.put(""String_Node_Str"",3);
  data_json.put(""String_Node_Str"",""String_Node_Str"");
  data_json.put(""String_Node_Str"",verts_array);
  dg_json.put(""String_Node_Str"",data_json);
  jsonArr.add(dg_json);
  createMaterialJson(arg0,true);
}","@Override public void implementLineGeometry(DecorativeLine arg0){
  Map<String,Object> dg_json=new LinkedHashMap<String,Object>();
  dg_json.put(""String_Node_Str"",geomID.toString());
  dg_json.put(""String_Node_Str"",""String_Node_Str"");
  String colorString=JSONUtilities.mapColorToRGBA(arg0.getColor());
  dg_json.put(""String_Node_Str"",colorString);
  JSONArray verts_array=new JSONArray();
  Map<String,Object> data_json=new LinkedHashMap<String,Object>();
  verts_array.add(arg0.getPoint1().get(0) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint1().get(1) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint1().get(2) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint2().get(0) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint2().get(1) * visualizerScaleFactor);
  verts_array.add(arg0.getPoint2().get(2) * visualizerScaleFactor);
  data_json.put(""String_Node_Str"",3);
  data_json.put(""String_Node_Str"",""String_Node_Str"");
  data_json.put(""String_Node_Str"",verts_array);
  dg_json.put(""String_Node_Str"",data_json);
  jsonArr.add(dg_json);
  createMaterialJson(arg0,true);
}",0.9126133553173948
147140,"@Override public void implementMeshFileGeometry(DecorativeMeshFile arg0){
  String meshFile=arg0.getMeshFile();
  String fullFileName=GeometryFileLocator.getInstance().getFullname(""String_Node_Str"",meshFile,false);
  System.out.print(""String_Node_Str"" + fullFileName);
  if (fullFileName == null)   return;
  System.out.println(""String_Node_Str"");
  String filenameLower=fullFileName.toLowerCase();
  if (filenameLower.endsWith(""String_Node_Str"") || filenameLower.endsWith(""String_Node_Str"") || filenameLower.endsWith(""String_Node_Str"")) {
    Map<String,Object> dg_json=new LinkedHashMap<String,Object>();
    dg_json.put(""String_Node_Str"",geomID.toString());
    dg_json.put(""String_Node_Str"",""String_Node_Str"");
    Map<String,Object> attributes_json=new LinkedHashMap<String,Object>();
    Map<String,Object> pos_json=new LinkedHashMap<String,Object>();
    pos_json.put(""String_Node_Str"",3);
    pos_json.put(""String_Node_Str"",""String_Node_Str"");
    Map<String,Object> normals_json=new LinkedHashMap<String,Object>();
    normals_json.put(""String_Node_Str"",3);
    normals_json.put(""String_Node_Str"",""String_Node_Str"");
    PolygonalMesh mesh=new PolygonalMesh();
    mesh.loadFile(fullFileName);
    int nv=mesh.getNumVertices();
    int nf=mesh.getNumFaces();
    Vec3[] normals=new Vec3[nv];
    for (int f=0; f < nf; f++) {
      Vec3[] verts=new Vec3[3];
      for (int i=0; i < 3; i++) {
        verts[i]=mesh.getVertexPosition(mesh.getFaceVertex(f,i));
      }
      Vec3 side1=new Vec3();
      Vec3 side2=new Vec3();
      for (int i=0; i < 3; i++) {
        side1.set(i,verts[1].get(i) - verts[0].get(i));
        side2.set(i,verts[2].get(i) - verts[0].get(i));
      }
      Vec3 cross=new Vec3(side1.get(1) * side2.get(2) - side1.get(2) * side2.get(1),side1.get(2) * side2.get(0) - side1.get(0) * side2.get(2),side1.get(0) * side2.get(1) - side1.get(1) * side2.get(0));
      double norm=Math.sqrt(cross.get(0) * cross.get(0) + cross.get(1) * cross.get(1) + cross.get(2) * cross.get(2));
      for (int i=0; i < 3; i++)       cross.set(i,cross.get(i) / norm);
      int nvf=mesh.getNumVerticesForFace(f);
      for (int i=0; i < nvf; i++) {
        int vindex=mesh.getFaceVertex(f,i);
        normals[vindex]=cross;
      }
    }
    JSONArray pos_array=new JSONArray();
    JSONArray normals_array=new JSONArray();
    Map<String,Object> data_json=new LinkedHashMap<String,Object>();
    for (int v=0; v < nv; v++) {
      Vec3 vec3=mesh.getVertexPosition(v);
      for (int coord=0; coord < 3; coord++) {
        pos_array.add(vec3.get(coord) * visualizerScaleFactor);
      }
      if (normals[v] != null) {
        normals_array.add(normals[v].get(0));
        normals_array.add(normals[v].get(1));
        normals_array.add(normals[v].get(2));
      }
 else {
        normals_array.add(0.0);
        normals_array.add(0.0);
        normals_array.add(0.0);
      }
    }
    pos_json.put(""String_Node_Str"",pos_array);
    normals_json.put(""String_Node_Str"",normals_array);
    attributes_json.put(""String_Node_Str"",pos_json);
    attributes_json.put(""String_Node_Str"",normals_json);
    Map<String,Object> index_json=new LinkedHashMap<String,Object>();
    JSONArray index_array=new JSONArray();
    for (int f=0; f < nf; f++) {
      int numVerts=mesh.getNumVerticesForFace(f);
      for (int vi=0; vi < numVerts - 2; vi++) {
        index_array.add(mesh.getFaceVertex(f,0));
        index_array.add(mesh.getFaceVertex(f,vi + 1));
        index_array.add(mesh.getFaceVertex(f,vi + 2));
      }
    }
    index_json.put(""String_Node_Str"",index_array);
    index_json.put(""String_Node_Str"",3);
    index_json.put(""String_Node_Str"",""String_Node_Str"");
    attributes_json.put(""String_Node_Str"",index_json);
    data_json.put(""String_Node_Str"",attributes_json);
    dg_json.put(""String_Node_Str"",data_json);
    jsonArr.add(dg_json);
    createMaterialJson(arg0,true);
  }
}","@Override public void implementMeshFileGeometry(DecorativeMeshFile arg0){
  String meshFile=arg0.getMeshFile();
  String fullFileName=GeometryFileLocator.getInstance().getFullname(""String_Node_Str"",meshFile,false);
  if (fullFileName == null)   return;
  String filenameLower=fullFileName.toLowerCase();
  if (filenameLower.endsWith(""String_Node_Str"") || filenameLower.endsWith(""String_Node_Str"") || filenameLower.endsWith(""String_Node_Str"")) {
    Map<String,Object> dg_json=new LinkedHashMap<String,Object>();
    dg_json.put(""String_Node_Str"",geomID.toString());
    dg_json.put(""String_Node_Str"",""String_Node_Str"");
    Map<String,Object> attributes_json=new LinkedHashMap<String,Object>();
    Map<String,Object> pos_json=new LinkedHashMap<String,Object>();
    pos_json.put(""String_Node_Str"",3);
    pos_json.put(""String_Node_Str"",""String_Node_Str"");
    Map<String,Object> normals_json=new LinkedHashMap<String,Object>();
    normals_json.put(""String_Node_Str"",3);
    normals_json.put(""String_Node_Str"",""String_Node_Str"");
    PolygonalMesh mesh=new PolygonalMesh();
    mesh.loadFile(fullFileName);
    int nv=mesh.getNumVertices();
    int nf=mesh.getNumFaces();
    Vec3[] normals=new Vec3[nv];
    for (int f=0; f < nf; f++) {
      Vec3[] verts=new Vec3[3];
      for (int i=0; i < 3; i++) {
        verts[i]=mesh.getVertexPosition(mesh.getFaceVertex(f,i));
      }
      Vec3 side1=new Vec3();
      Vec3 side2=new Vec3();
      for (int i=0; i < 3; i++) {
        side1.set(i,verts[1].get(i) - verts[0].get(i));
        side2.set(i,verts[2].get(i) - verts[0].get(i));
      }
      Vec3 cross=new Vec3(side1.get(1) * side2.get(2) - side1.get(2) * side2.get(1),side1.get(2) * side2.get(0) - side1.get(0) * side2.get(2),side1.get(0) * side2.get(1) - side1.get(1) * side2.get(0));
      double norm=Math.sqrt(cross.get(0) * cross.get(0) + cross.get(1) * cross.get(1) + cross.get(2) * cross.get(2));
      for (int i=0; i < 3; i++)       cross.set(i,cross.get(i) / norm);
      int nvf=mesh.getNumVerticesForFace(f);
      for (int i=0; i < nvf; i++) {
        int vindex=mesh.getFaceVertex(f,i);
        normals[vindex]=cross;
      }
    }
    JSONArray pos_array=new JSONArray();
    JSONArray normals_array=new JSONArray();
    Map<String,Object> data_json=new LinkedHashMap<String,Object>();
    for (int v=0; v < nv; v++) {
      Vec3 vec3=mesh.getVertexPosition(v);
      for (int coord=0; coord < 3; coord++) {
        pos_array.add(vec3.get(coord) * visualizerScaleFactor);
      }
      if (normals[v] != null) {
        normals_array.add(normals[v].get(0));
        normals_array.add(normals[v].get(1));
        normals_array.add(normals[v].get(2));
      }
 else {
        normals_array.add(0.0);
        normals_array.add(0.0);
        normals_array.add(0.0);
      }
    }
    pos_json.put(""String_Node_Str"",pos_array);
    normals_json.put(""String_Node_Str"",normals_array);
    attributes_json.put(""String_Node_Str"",pos_json);
    attributes_json.put(""String_Node_Str"",normals_json);
    Map<String,Object> index_json=new LinkedHashMap<String,Object>();
    JSONArray index_array=new JSONArray();
    for (int f=0; f < nf; f++) {
      int numVerts=mesh.getNumVerticesForFace(f);
      for (int vi=0; vi < numVerts - 2; vi++) {
        index_array.add(mesh.getFaceVertex(f,0));
        index_array.add(mesh.getFaceVertex(f,vi + 1));
        index_array.add(mesh.getFaceVertex(f,vi + 2));
      }
    }
    index_json.put(""String_Node_Str"",index_array);
    index_json.put(""String_Node_Str"",3);
    index_json.put(""String_Node_Str"",""String_Node_Str"");
    attributes_json.put(""String_Node_Str"",index_json);
    data_json.put(""String_Node_Str"",attributes_json);
    dg_json.put(""String_Node_Str"",data_json);
    jsonArr.add(dg_json);
    createMaterialJson(arg0,true);
  }
}",0.9790664412950202
147141,"private void applyOperationToNode(final OpenSimObjectNode objectNode){
  Children ch=objectNode.getChildren();
  if (ch.getNodesCount() > 0) {
    Node[] childNodes=ch.getNodes();
    for (int child=0; child < childNodes.length; child++) {
      if (!(childNodes[child] instanceof OpenSimObjectNode))       continue;
      OpenSimObjectNode childNode=(OpenSimObjectNode)childNodes[child];
      this.applyOperationToNode(childNode);
    }
  }
  OpenSimObject obj=objectNode.getOpenSimObject();
  boolean hasPreferenceProperty=obj.hasProperty(""String_Node_Str"");
  if (hasPreferenceProperty) {
    AbstractProperty apbn=obj.getPropertyByName(""String_Node_Str"");
    boolean iso=apbn.isObjectProperty();
    OpenSimObject ap=obj.getPropertyByName(""String_Node_Str"").getValueAsObject();
    Appearance apObj=Appearance.safeDownCast(ap);
    SurfaceAppearance surfApp=apObj.get_surface_appearance();
    PropertyEditorAdaptor pea=new PropertyEditorAdaptor(objectNode.getModelForNode(),surfApp,surfApp.getPropertyByName(""String_Node_Str""),objectNode);
    pea.setValueInt(show ? 3 : 0);
  }
 else {
    ViewDB.getInstance().toggleObjectsDisplay(obj,show);
    objectNode.refreshNode();
  }
}","private void applyOperationToNode(final OpenSimObjectNode objectNode){
  Children ch=objectNode.getChildren();
  if (ch.getNodesCount() > 0) {
    Node[] childNodes=ch.getNodes();
    for (int child=0; child < childNodes.length; child++) {
      if (!(childNodes[child] instanceof OpenSimObjectNode))       continue;
      OpenSimObjectNode childNode=(OpenSimObjectNode)childNodes[child];
      this.applyOperationToNode(childNode);
    }
  }
  OpenSimObject obj=objectNode.getOpenSimObject();
  boolean hasPreferenceProperty=obj.hasProperty(""String_Node_Str"");
  if (hasPreferenceProperty) {
    AbstractProperty apbn=obj.getPropertyByName(""String_Node_Str"");
    boolean iso=apbn.isObjectProperty();
    OpenSimObject ap=obj.getPropertyByName(""String_Node_Str"").getValueAsObject();
    Appearance apObj=Appearance.safeDownCast(ap);
    SurfaceProperties surfApp=apObj.get_surface_properties();
    PropertyEditorAdaptor pea=new PropertyEditorAdaptor(objectNode.getModelForNode(),surfApp,surfApp.getPropertyByName(""String_Node_Str""),objectNode);
    pea.setValueInt(show ? 3 : 0);
  }
 else {
    ViewDB.getInstance().toggleObjectsDisplay(obj,show);
    objectNode.refreshNode();
  }
}",0.967116357504216
147142,"private void addAppearanceProperties(Appearance disp,Sheet sheet){
  try {
    sheet.remove(""String_Node_Str"");
    Sheet.Set appearanceSheet=createExpertSet();
    appearanceSheet.setDisplayName(""String_Node_Str"");
    sheet.put(appearanceSheet);
    PropertySupport.Reflection nextNodeProp4;
    nextNodeProp4=new PropertySupport.Reflection(this,Color.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp4.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodeProp4);
    PropertySupport.Reflection nextNodeProp5;
    nextNodeProp5=new PropertySupport.Reflection(this,double.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp5.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodeProp5);
    PropertySupport.Reflection nextNodePropRepresentation;
    SurfaceAppearance surfApp=disp.get_surface_appearance();
    nextNodePropRepresentation=new PropertySupport.Reflection(surfApp,int.class,""String_Node_Str"",""String_Node_Str"");
    nextNodePropRepresentation.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodePropRepresentation);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}","private void addAppearanceProperties(Appearance disp,Sheet sheet){
  try {
    sheet.remove(""String_Node_Str"");
    Sheet.Set appearanceSheet=createExpertSet();
    appearanceSheet.setDisplayName(""String_Node_Str"");
    sheet.put(appearanceSheet);
    PropertySupport.Reflection nextNodeProp4;
    nextNodeProp4=new PropertySupport.Reflection(this,Color.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp4.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodeProp4);
    PropertySupport.Reflection nextNodeProp5;
    nextNodeProp5=new PropertySupport.Reflection(this,double.class,""String_Node_Str"",""String_Node_Str"");
    nextNodeProp5.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodeProp5);
    PropertySupport.Reflection nextNodePropRepresentation;
    SurfaceProperties surfApp=disp.get_surface_properties();
    nextNodePropRepresentation=new PropertySupport.Reflection(surfApp,int.class,""String_Node_Str"",""String_Node_Str"");
    nextNodePropRepresentation.setName(""String_Node_Str"");
    appearanceSheet.put(nextNodePropRepresentation);
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
}",0.9825174825174824
147143,"@OnWebSocketMessage public void visMessage(String stringToParse){
  try {
    System.out.println(""String_Node_Str"" + stringToParse);
    JSONParser parser=new JSONParser();
    JSONObject jsonObj=(JSONObject)parser.parse(stringToParse);
    setChanged();
    notifyObservers(jsonObj);
  }
 catch (  ParseException ex) {
    Logger.getLogger(VisWebSocket.class.getName()).log(Level.SEVERE,null,ex);
  }
}","@OnWebSocketMessage public void visMessage(String stringToParse){
  try {
    JSONParser parser=new JSONParser();
    JSONObject jsonObj=(JSONObject)parser.parse(stringToParse);
    setChanged();
    notifyObservers(jsonObj);
  }
 catch (  ParseException ex) {
    Logger.getLogger(VisWebSocket.class.getName()).log(Level.SEVERE,null,ex);
  }
}",0.9210174029451138
147144,"private void updateVariableDecorations(Component mc){
  ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
  mc.generateDecorations(false,modelDisplayHints,model.getWorkingState(),adg);
  currentVariableGeometryDisplayers=mapComponentsToVariableVisuals.get(mc);
  int oldSize=(currentVariableGeometryDisplayers == null) ? 0 : currentVariableGeometryDisplayers.size();
  int newSize=(int)adg.size();
  if (oldSize != newSize) {
    if (oldSize != 0)     removeDisplayersFromScene(currentVariableGeometryDisplayers);
    updateMode=false;
  }
  for (int i=0; i < adg.size(); i++) {
    adg.getElt(i).implementGeometry(this);
  }
}","private void updateVariableDecorations(Component mc){
  ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
  mc.generateDecorations(false,modelDisplayHints,model.getWorkingState(),adg);
  currentVariableGeometryDisplayers=mapComponentsToVariableVisuals.get(mc);
  int oldSize=(currentVariableGeometryDisplayers == null) ? 0 : currentVariableGeometryDisplayers.size();
  int newSize=(int)adg.size();
  if (oldSize != newSize) {
    if (oldSize != 0)     removeDisplayersFromScene(currentVariableGeometryDisplayers);
    updateMode=false;
  }
  for (int i=0; i < newSize; i++) {
    adg.getElt(i).implementGeometry(this);
  }
}",0.9866036249014972
147145,"/** 
 * Displayer for Wrap Geometry
 * @param ag
 * @param object 
 */
DecorativeLineDisplayer(DecorativeLine ag){
  point1=new Vec3(ag.getPoint1());
  point2=new Vec3(ag.getPoint2());
  agLocal=ag.clone();
}","/** 
 * Displayer for Wrap Geometry
 * @param ag
 * @param object 
 */
DecorativeLineDisplayer(DecorativeLine ag){
  agLocal=ag.clone();
}",0.7976878612716763
147146,"/** 
 * Convert DecorativeGeometry object passed in to the corresponding vtk polyhedral representation. Transform is passed in as well since the way it applies to PolyData depends on source
 */
private vtkPolyData getPolyData(){
  if (line == null) {
    line=new vtkLineSource();
    line.SetPoint1(getPoint1().get(0),getPoint1().get(1),getPoint1().get(2));
    line.SetPoint2(getPoint2().get(0),getPoint2().get(1),getPoint2().get(2));
    dFilter.SetInput(line.GetOutput());
    dFilter.SetRadius(.005);
  }
  return dFilter.GetOutput();
}","/** 
 * Convert DecorativeGeometry object passed in to the corresponding vtk polyhedral representation. Transform is passed in as well since the way it applies to PolyData depends on source
 */
private vtkPolyData getPolyData(){
  Vec3 p1=agLocal.getPoint1();
  Vec3 p2=agLocal.getPoint2();
  line.SetPoint1(p1.get(0),p1.get(1),p1.get(2));
  line.SetPoint2(p2.get(0),p2.get(1),p2.get(2));
  line.Modified();
  dFilter.SetInput(line.GetOutput());
  dFilter.SetRadius(.005);
  return dFilter.GetOutput();
}",0.5569377990430622
147147,"@Override void updateGeometry(DecorativeGeometry arg){
  DecorativeLine arg0=(DecorativeLine)arg;
  agLocal.setPoint1(arg0.getPoint1());
  agLocal.setPoint2(arg0.getPoint2());
  updateDisplayFromDecorativeGeometry();
}","@Override void updateGeometry(DecorativeGeometry arg){
  DecorativeLine arg0=(DecorativeLine)arg;
  agLocal.setPoint1(new Vec3(arg0.getPoint1()));
  agLocal.setPoint2(new Vec3(arg0.getPoint2()));
  updateDisplayFromDecorativeGeometry();
}",0.956140350877193
147148,"void applyColorsFromModel(){
  VisibleObject bodyVisibleObject=body.getDisplayer();
  GeometrySet gSet=bodyVisibleObject.getGeometrySet();
  for (int k=0; k < gSet.getSize(); ++k) {
    Geometry gPiece=gSet.get(k);
    double[] colorOnFile=new double[3];
    gPiece.getColor(colorOnFile);
    DisplayGeometryDisplayer gd=(DisplayGeometryDisplayer)mapGeometryToVtkObjects.get(gPiece);
    if (gd == null)     continue;
    gd.GetProperty().SetColor(colorOnFile);
    gd.Modified();
  }
}","void applyColorsFromModel(){
}",0.1162790697674418
147149,"/** 
 * Cycle thru geometry and apply preferences including vis of joint frames, colors, COM
 */
public void applyDisplayPreferences(){
  VisibleObject bodyVisibleObject=body.getDisplayer();
  GeometrySet gSet=bodyVisibleObject.getGeometrySet();
  for (int i=0; i < gSet.getSize(); i++) {
    Geometry gPiece=gSet.get(i);
    DisplayGeometryDisplayer gActor=(DisplayGeometryDisplayer)mapGeometryToVtkObjects.get(gPiece);
    if (gActor == null)     continue;
    gActor.applyDisplayPreferenceToActor();
  }
}","/** 
 * Cycle thru geometry and apply preferences including vis of joint frames, colors, COM
 */
public void applyDisplayPreferences(){
}",0.4248062015503876
147150,"private void updateMapsToSupportPicking(final Body body,Hashtable<OpenSimObject,vtkProp3D> mapObject2VtkObjects,Hashtable<vtkProp3D,OpenSimObject> mapVtkObjects2Objects){
  mapObject2VtkObjects.put(body,this);
  vtkProp3DCollection props=displayGeometryAssembly.GetParts();
  props.InitTraversal();
  ArrayList<vtkActor> actors=new ArrayList<vtkActor>();
  int idx=0;
  GeometrySet gSet=body.getDisplayer().getGeometrySet();
  for (int act=0; act < props.GetNumberOfItems(); act++) {
    vtkProp3D nextActor=props.GetNextProp3D();
    mapVtkObjects2Objects.put(nextActor,body);
    if (nextActor instanceof vtkActor)     actors.add((vtkActor)nextActor);
    if (nextActor instanceof FrameActor || nextActor == centerOfMassActor)     continue;
    mapObject2VtkObjects.put(gSet.get(idx),nextActor);
    idx++;
  }
}","private void updateMapsToSupportPicking(final Body body,Hashtable<OpenSimObject,vtkProp3D> mapObject2VtkObjects,Hashtable<vtkProp3D,OpenSimObject> mapVtkObjects2Objects){
  mapObject2VtkObjects.put(body,this);
  vtkProp3DCollection props=displayGeometryAssembly.GetParts();
  props.InitTraversal();
  ArrayList<vtkActor> actors=new ArrayList<vtkActor>();
  int idx=0;
}",0.6238377007607777
147151,"public double[] GetColorOrReturnNull(){
  double[] colorOfAllPiecesOrNullIfColorOfPiecesDiffer=null;
  VisibleObject bodyVisibleObject=body.getDisplayer();
  GeometrySet bodyDisplayerGeometrySet=bodyVisibleObject.getGeometrySet();
  int numberOfPieces=bodyDisplayerGeometrySet == null ? 0 : bodyDisplayerGeometrySet.getSize();
  for (int i=0; i < numberOfPieces; i++) {
    Geometry gi=bodyDisplayerGeometrySet.get(i);
    double[] colorOfCurrentPiece={-1,-1,-1};
    gi.getColor(colorOfCurrentPiece);
    for (int j=0; j < 3; j++) {
      if (colorOfCurrentPiece[i] < 0 || colorOfCurrentPiece[i] > 1)       return null;
    }
    if (colorOfAllPiecesOrNullIfColorOfPiecesDiffer == null)     colorOfAllPiecesOrNullIfColorOfPiecesDiffer=colorOfCurrentPiece;
 else     for (int k=0; k < 3; k++) {
      if (colorOfCurrentPiece[i] != colorOfAllPiecesOrNullIfColorOfPiecesDiffer[i])       return null;
    }
  }
  return colorOfAllPiecesOrNullIfColorOfPiecesDiffer;
}","public double[] GetColorOrReturnNull(){
  double[] colorOfAllPiecesOrNullIfColorOfPiecesDiffer=null;
  return colorOfAllPiecesOrNullIfColorOfPiecesDiffer;
}",0.2788203753351206
147152,"/** 
 * Update display of Body to correspond to latest Properties
 */
void updateFromProperties(){
  applyVisibleObjectScaleAndTransform(body.getDisplayer(),displayGeometryAssembly);
  applyColorsFromModel();
  applyDisplayPreferences();
  Enumeration<Body> childBodies=mapChildren2Frames.keys();
  while (childBodies.hasMoreElements()) {
    Body child=childBodies.nextElement();
    if (mapChildren2Frames.containsKey(child)) {
      setShowJointPFrame(child,false);
      setShowJointPFrame(child,true);
    }
  }
  SetCMLocationFromPropertyTable(true);
}","/** 
 * Update display of Body to correspond to latest Properties
 */
void updateFromProperties(){
  applyColorsFromModel();
  applyDisplayPreferences();
  Enumeration<Body> childBodies=mapChildren2Frames.keys();
  while (childBodies.hasMoreElements()) {
    Body child=childBodies.nextElement();
    if (mapChildren2Frames.containsKey(child)) {
    }
  }
  SetCMLocationFromPropertyTable(true);
}",0.831413612565445
147153,"public void setColor(double[] colorComponents){
  VisibleObject bodyVisibleObject=body.getDisplayer();
  GeometrySet gSet=bodyVisibleObject.getGeometrySet();
  for (int k=0; k < gSet.getSize(); ++k) {
    Geometry gPiece=gSet.get(k);
    gPiece.setColor(colorComponents);
  }
}","public void setColor(double[] colorComponents){
}",0.3006134969325153
147154,"public void SetCMLocationFromPropertyTable(boolean updateView){
  double[] cmLocationToFill=new double[3];
  body.getCenterOfMass(cmLocationToFill);
  myCMSphereSourceVTK.SetCenter(cmLocationToFill);
  if (updateView) {
    super.Modified();
    ViewDB.getInstance().repaintAll();
  }
}","public void SetCMLocationFromPropertyTable(boolean updateView){
  Vec3 cmLocationToFill=body.getMassCenter();
  myCMSphereSourceVTK.SetCenter(cmLocationToFill.get(0),cmLocationToFill.get(1),cmLocationToFill.get(2));
  if (updateView) {
    super.Modified();
    ViewDB.getInstance().repaintAll();
  }
}",0.7414965986394558
147155,"public void setDisplayPreference(Geometry.Representation newPref){
  body.getDisplayer().setDisplayPreference(newPref);
}","public void setDisplayPreference(Geometry.Representation newPref){
}",0.7195767195767195
147156,"public Geometry.Representation getDisplayPreference(){
  return body.getDisplayer().getDisplayPreference();
}","public Geometry.Representation getDisplayPreference(){
  return Geometry.Representation.DrawSurface;
}",0.7393364928909952
147157,"public void setOpacity(double newOpacity){
  VisibleObject bodyVisibleObject=body.getDisplayer();
  GeometrySet gSet=bodyVisibleObject.getGeometrySet();
  for (int k=0; k < gSet.getSize(); ++k) {
    Geometry gPiece=gSet.get(k);
    gPiece.setOpacity(newOpacity);
  }
}","public void setOpacity(double newOpacity){
}",0.2811501597444089
147158,"@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
  setXformAndAttributesFromDecorativeGeometry(ag);
}","@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
}",0.8370607028753994
147159,"@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
  setXformAndAttributesFromDecorativeGeometry(ag);
}","@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
}",0.8370607028753994
147160,"@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
  setXformAndAttributesFromDecorativeGeometry(ag);
}","@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
}",0.8370607028753994
147161,"@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
  setXformAndAttributesFromDecorativeGeometry(ag);
}","@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData(ag);
  createAndConnectMapper(polyData);
}",0.8370607028753994
147162,"@Override public void implementCylinderGeometry(DecorativeCylinder arg0){
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeCylinderDisplayer) {
        DecorativeCylinderDisplayer displayer=(DecorativeCylinderDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          displayer.copyAttributesFromDecorativeGeometry(arg0);
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeCylinderDisplayer cylDisplayer=new DecorativeCylinderDisplayer(arg0);
    bd.AddPart(cylDisplayer.computeVisuals());
    addDisplayerToCurrentList(cylDisplayer);
    mapVisualsToObjects.put(cylDisplayer.computeVisuals(),currentModelComponent);
  }
}","@Override public void implementCylinderGeometry(DecorativeCylinder arg0){
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeCylinderDisplayer) {
        DecorativeCylinderDisplayer displayer=(DecorativeCylinderDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeCylinderDisplayer cylDisplayer=new DecorativeCylinderDisplayer(arg0);
    bd.AddPart(cylDisplayer.computeVisuals());
    addDisplayerToCurrentList(cylDisplayer);
    mapVisualsToObjects.put(cylDisplayer.computeVisuals(),currentModelComponent);
  }
}",0.970722781335773
147163,"@Override public void implementSphereGeometry(DecorativeSphere arg0){
  System.out.println(""String_Node_Str"" + arg0.getRadius() + ""String_Node_Str""+ arg0.getTransform().T().toString()+ ""String_Node_Str""+ arg0.getBodyId()+ ""String_Node_Str""+ arg0.getIndexOnBody());
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeSphereDisplayer) {
        DecorativeSphereDisplayer displayer=(DecorativeSphereDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          displayer.copyAttributesFromDecorativeGeometry(arg0);
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeSphereDisplayer sphereDisplayer=new DecorativeSphereDisplayer(arg0);
    bd.AddPart(sphereDisplayer.computeVisuals());
    addDisplayerToCurrentList(sphereDisplayer);
    mapVisualsToObjects.put(sphereDisplayer.computeVisuals(),currentModelComponent);
  }
}","@Override public void implementSphereGeometry(DecorativeSphere arg0){
  System.out.println(""String_Node_Str"" + arg0.getRadius() + ""String_Node_Str""+ arg0.getTransform().T().toString()+ ""String_Node_Str""+ arg0.getBodyId()+ ""String_Node_Str""+ arg0.getIndexOnBody());
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeSphereDisplayer) {
        DecorativeSphereDisplayer displayer=(DecorativeSphereDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeSphereDisplayer sphereDisplayer=new DecorativeSphereDisplayer(arg0);
    bd.AddPart(sphereDisplayer.computeVisuals());
    addDisplayerToCurrentList(sphereDisplayer);
    mapVisualsToObjects.put(sphereDisplayer.computeVisuals(),currentModelComponent);
  }
}",0.9751166407465008
147164,"private void updateFixedDecorations(ModelComponent mc){
  ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
  mc.generateDecorations(true,modelDisplayHints,model.getWorkingState(),adg);
  currentFixedGeometryDisplayers=mapComponentsToFixedVisuals.get(mc);
  for (int i=0; i < adg.size(); i++) {
    adg.getElt(i).implementGeometry(this);
  }
}","private void updateFixedDecorations(ModelComponent mc){
  ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
  currentFixedGeometryDisplayers=mapComponentsToFixedVisuals.get(mc);
  for (int i=0; i < adg.size(); i++) {
    adg.getElt(i).implementGeometry(this);
  }
}",0.8753993610223643
147165,"@Override public void implementEllipsoidGeometry(DecorativeEllipsoid arg0){
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeEllipsoidDisplayer) {
        DecorativeEllipsoidDisplayer ellipsoidDisplayer=(DecorativeEllipsoidDisplayer)nextDisplayer;
        if (ellipsoidDisplayer.getBodyId() == arg0.getBodyId() && ellipsoidDisplayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          ellipsoidDisplayer.copyAttributesFromDecorativeGeometry(arg0);
          found=true;
          ellipsoidDisplayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeEllipsoidDisplayer ellipsoidDisplayer=new DecorativeEllipsoidDisplayer(arg0);
    bd.AddPart(ellipsoidDisplayer.computeVisuals());
    addDisplayerToCurrentList(ellipsoidDisplayer);
    mapVisualsToObjects.put(ellipsoidDisplayer.computeVisuals(),currentModelComponent);
  }
}","@Override public void implementEllipsoidGeometry(DecorativeEllipsoid arg0){
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeEllipsoidDisplayer) {
        DecorativeEllipsoidDisplayer ellipsoidDisplayer=(DecorativeEllipsoidDisplayer)nextDisplayer;
        if (ellipsoidDisplayer.getBodyId() == arg0.getBodyId() && ellipsoidDisplayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          found=true;
          ellipsoidDisplayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeEllipsoidDisplayer ellipsoidDisplayer=new DecorativeEllipsoidDisplayer(arg0);
    bd.AddPart(ellipsoidDisplayer.computeVisuals());
    addDisplayerToCurrentList(ellipsoidDisplayer);
    mapVisualsToObjects.put(ellipsoidDisplayer.computeVisuals(),currentModelComponent);
  }
}",0.9686560755689136
147166,"private void updateVariableDecorations(ModelComponent mc){
  ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
  mc.generateDecorations(false,modelDisplayHints,model.getWorkingState(),adg);
  currentVariableGeometryDisplayers=mapComponentsToVariableVisuals.get(mc);
  int oldSize=(currentVariableGeometryDisplayers == null) ? 0 : currentVariableGeometryDisplayers.size();
  int newSize=(int)adg.size();
  if (oldSize != newSize) {
    if (oldSize != 0)     removeDisplayersFromScene(currentVariableGeometryDisplayers);
    updateMode=false;
  }
  for (int i=0; i < adg.size(); i++) {
    adg.getElt(i).implementGeometry(this);
  }
}","private void updateVariableDecorations(ModelComponent mc){
  ArrayDecorativeGeometry adg=new ArrayDecorativeGeometry();
  currentVariableGeometryDisplayers=mapComponentsToVariableVisuals.get(mc);
  int oldSize=(currentVariableGeometryDisplayers == null) ? 0 : currentVariableGeometryDisplayers.size();
  int newSize=(int)adg.size();
  if (oldSize != newSize) {
    if (oldSize != 0)     removeDisplayersFromScene(currentVariableGeometryDisplayers);
    updateMode=false;
  }
  for (int i=0; i < adg.size(); i++) {
    adg.getElt(i).implementGeometry(this);
  }
}",0.9343308395677472
147167,"@Override public void implementLineGeometry(DecorativeLine arg0){
  System.out.println(""String_Node_Str"" + arg0.getPoint1().toString() + arg0.getPoint2().toString()+ ""String_Node_Str""+ arg0.getTransform().T().toString()+ ""String_Node_Str""+ arg0.getColor());
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeLineDisplayer) {
        DecorativeLineDisplayer displayer=(DecorativeLineDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          displayer.copyAttributesFromDecorativeGeometry(arg0);
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeLineDisplayer lineDisplayer=new DecorativeLineDisplayer(arg0);
    bd.AddPart(lineDisplayer.computeVisuals());
    addDisplayerToCurrentList(lineDisplayer);
    mapVisualsToObjects.put(lineDisplayer.computeVisuals(),currentModelComponent);
  }
}","@Override public void implementLineGeometry(DecorativeLine arg0){
  System.out.println(""String_Node_Str"" + arg0.getPoint1().toString() + arg0.getPoint2().toString()+ ""String_Node_Str""+ arg0.getTransform().T().toString()+ ""String_Node_Str""+ arg0.getColor());
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeLineDisplayer) {
        DecorativeLineDisplayer displayer=(DecorativeLineDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    DecorativeLineDisplayer lineDisplayer=new DecorativeLineDisplayer(arg0);
    bd.AddPart(lineDisplayer.computeVisuals());
    addDisplayerToCurrentList(lineDisplayer);
    mapVisualsToObjects.put(lineDisplayer.computeVisuals(),currentModelComponent);
  }
}",0.9746233148295004
147168,"@Override public void implementMeshFileGeometry(DecorativeMeshFile arg0){
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeMeshFileDisplayer) {
        DecorativeMeshFileDisplayer displayer=(DecorativeMeshFileDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          displayer.copyAttributesFromDecorativeGeometry(arg0);
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    String fullFileName=GeometryFileLocator.getInstance().getFullname(modelFilePath,arg0.getMeshFile(),false);
    if (fullFileName == null)     return;
    DecorativeMeshFileDisplayer meshDisplayer=new DecorativeMeshFileDisplayer(arg0,modelFilePath);
    bd.AddPart(meshDisplayer.computeVisuals());
    addDisplayerToCurrentList(meshDisplayer);
    mapVisualsToObjects.put(meshDisplayer.computeVisuals(),currentModelComponent);
  }
}","@Override public void implementMeshFileGeometry(DecorativeMeshFile arg0){
  if (updateMode) {
    System.out.println(""String_Node_Str"");
    ListIterator<DecorativeGeometryDisplayer> listIterator=getCurrentGeometryDisplayers();
    boolean found=false;
    while (listIterator.hasNext() && !found) {
      DecorativeGeometryDisplayer nextDisplayer=listIterator.next();
      if (nextDisplayer instanceof DecorativeMeshFileDisplayer) {
        DecorativeMeshFileDisplayer displayer=(DecorativeMeshFileDisplayer)nextDisplayer;
        if (displayer.getBodyId() == arg0.getBodyId() && displayer.getIndexOnBody() == arg0.getIndexOnBody()) {
          found=true;
          displayer.Modified();
        }
      }
    }
  }
 else {
    BodyDisplayer bd=mapBodyIndicesToDisplayers.get(arg0.getBodyId());
    String fullFileName=GeometryFileLocator.getInstance().getFullname(modelFilePath,arg0.getMeshFile(),false);
    if (fullFileName == null)     return;
    DecorativeMeshFileDisplayer meshDisplayer=new DecorativeMeshFileDisplayer(arg0,modelFilePath);
    bd.AddPart(meshDisplayer.computeVisuals());
    addDisplayerToCurrentList(meshDisplayer);
    mapVisualsToObjects.put(meshDisplayer.computeVisuals(),currentModelComponent);
  }
}",0.9746835443037974
147169,"@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData();
  createAndConnectMapper(polyData);
  setXformAndAttributesFromDecorativeGeometry(agLocal);
}","@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData();
  createAndConnectMapper(polyData);
}",0.821656050955414
147170,"@Override void copyAttributesFromDecorativeGeometry(DecorativeGeometry arg0){
  DecorativeLine newLine=(DecorativeLine)arg0;
  setPoint1(newLine.getPoint1());
  setPoint2(newLine.getPoint2());
  line.SetPoint1(getPoint1().get(0),getPoint1().get(1),getPoint1().get(2));
  line.SetPoint2(getPoint2().get(0),getPoint2().get(1),getPoint2().get(2));
  line.Modified();
  super.copyAttributesFromDecorativeGeometry(arg0);
}","void copyAttributesFromDecorativeGeometry(DecorativeGeometry arg0){
  DecorativeLine newLine=(DecorativeLine)arg0;
  setPoint1(newLine.getPoint1());
  setPoint2(newLine.getPoint2());
  line.SetPoint1(getPoint1().get(0),getPoint1().get(1),getPoint1().get(2));
  line.SetPoint2(getPoint2().get(0),getPoint2().get(1),getPoint2().get(2));
  line.Modified();
}",0.9196891191709844
147171,"@Override void updateDisplayFromDecorativeGeometry(){
  setXformAndAttributesFromDecorativeGeometry(ag);
}","@Override void updateDisplayFromDecorativeGeometry(){
}",0.6832298136645962
147172,"@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData();
  createAndConnectMapper(polyData);
  setXformAndAttributesFromDecorativeGeometry(agLocal);
}","@Override void updateDisplayFromDecorativeGeometry(){
  vtkPolyData polyData=getPolyData();
  createAndConnectMapper(polyData);
}",0.821656050955414
147173,"public ScriptingShellTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(ScriptingShellTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(ScriptingShellTopComponent.class,""String_Node_Str""));
  putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED,Boolean.TRUE);
  putClientProperty(TopComponent.PROP_SLIDING_DISABLED,Boolean.TRUE);
  jPopupMenu1.removeAll();
  addPopupCommands();
  jConsole2=new JConsole();
  jConsole2.setColumns(20);
  jConsole2.setRows(5);
  jScrollPane2.setViewportView(jConsole2);
  historyArea=(MessagePanel)jTextArea1;
  historyArea.setComponentPopupMenu(jPopupMenu1);
  jConsole2.registerConsoleListener(historyArea);
  jScrollPane1.setBorder(new TitledBorder(""String_Node_Str""));
  historyArea.setEditable(false);
}","public ScriptingShellTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(ScriptingShellTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(ScriptingShellTopComponent.class,""String_Node_Str""));
  putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED,Boolean.TRUE);
  putClientProperty(TopComponent.PROP_SLIDING_DISABLED,Boolean.TRUE);
  jPopupMenu1.removeAll();
  addPopupCommands();
  jConsole2=new JConsole();
  jConsole2.setColumns(20);
  jConsole2.setRows(5);
  jScrollPane2.setViewportView(jConsole2);
  historyArea=(MessagePanel)jTextArea1;
  historyArea.setComponentPopupMenu(jPopupMenu1);
  jConsole2.registerConsoleListener(historyArea);
  jScrollPane1.setBorder(new TitledBorder(""String_Node_Str""));
  historyArea.setEditable(false);
  instance=this;
}",0.9893148962916404
147174,"/** 
 * Creates new form JPlotterPanel
 */
public JPlotterPanel(){
  initComponents();
  domainFormatter.setValueClass(java.lang.Double.class);
  rangeFormatter.setValueClass(java.lang.Double.class);
  jDomainStartTextField.setValue(0.0);
  jDomainStartTextField.addActionListener(new handleReturnAction(jDomainStartTextField));
  jDomainEndTextField.setValue(1.0);
  jDomainEndTextField.addActionListener(new handleReturnAction(jDomainEndTextField));
  jFormattedTextFieldYmin.setValue(-10000.0);
  jFormattedTextFieldYmin.addActionListener(new handleReturnAction(jFormattedTextFieldYmin));
  jFormattedTextFieldYmax.setValue(10000.0);
  jFormattedTextFieldYmax.addActionListener(new handleReturnAction(jFormattedTextFieldYmax));
  jActivationValueFormattedTextField.setValue(1.0);
  jActivationValueFormattedTextField.addActionListener(new handleReturnAction(jActivationValueFormattedTextField));
  jTopChartingPanel.setLayout(new BorderLayout());
  xSelector=new JPlotterQuantitySelector(jXQtyTextField,this,true);
  jPlotsTree.addTreeSelectionListener(this);
  jPlotsTree.setEditable(true);
  jPlotsTree.setCellEditor(new UserTreeCellEditor(jPlotsTree,new DefaultTreeCellRenderer()));
  jPlotterDeletePlotButton.setEnabled(false);
  jPlotterAddPlotButton.setEnabled(validateXY());
  jTopChartingPanel.add(plotterModel.getCurrentPlot().getChartPanel());
  jPropertiesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      plotterModel.getCurrentPlot().getChartPanel().doEditChartProperties();
    }
  }
);
  processCurrentModel();
  useMuscles(false);
  jPlotsTree.setRootVisible(false);
  PlotterDB.getInstance().registerPlotterPanel(this);
}","/** 
 * Creates new form JPlotterPanel
 */
public JPlotterPanel(){
  initComponents();
  domainFormatter.setValueClass(java.lang.Double.class);
  rangeFormatter.setValueClass(java.lang.Double.class);
  jDomainStartTextField.setValue(0.0);
  jDomainStartTextField.addActionListener(new handleReturnAction(jDomainStartTextField));
  jDomainEndTextField.setValue(1.0);
  jDomainEndTextField.addActionListener(new handleReturnAction(jDomainEndTextField));
  jFormattedTextFieldYmin.setValue(-10000.0);
  jFormattedTextFieldYmin.addActionListener(new handleReturnAction(jFormattedTextFieldYmin));
  jFormattedTextFieldYmax.setValue(10000.0);
  jFormattedTextFieldYmax.addActionListener(new handleReturnAction(jFormattedTextFieldYmax));
  jActivationValueFormattedTextField.setValue(1.0);
  jActivationValueFormattedTextField.addActionListener(new handleReturnAction(jActivationValueFormattedTextField));
  jTopChartingPanel.setLayout(new BorderLayout());
  xSelector=new JPlotterQuantitySelector(jXQtyTextField,this,true);
  jPlotsTree.addTreeSelectionListener(this);
  jPlotsTree.setEditable(true);
  jPlotsTree.setCellEditor(new UserTreeCellEditor(jPlotsTree,new DefaultTreeCellRenderer()));
  jPlotterDeletePlotButton.setEnabled(false);
  jPlotterAddPlotButton.setEnabled(validateXY());
  jTopChartingPanel.add(plotterModel.getCurrentPlot().getChartPanel());
  jPropertiesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      plotterModel.getCurrentPlot().getChartPanel().doEditChartProperties();
    }
  }
);
  processCurrentModel();
  useMuscles(false);
  jPlotsTree.setRootVisible(false);
  PlotterDB.getInstance().registerPlotterPanel(this);
  populateQNameSet();
}",0.9935559461042766
147175,"public PlotCurve showMotionCurve(String qName,String muscleName,PlotterSourceMotion dataSource){
  PlotCurve plotCurve=null;
  openSimContext=OpenSimDB.getInstance().getContext(currentModel);
  if (qName.toLowerCase().startsWith(""String_Node_Str"")) {
    String coordName=qName.substring(qName.indexOf(""String_Node_Str"") + 1);
    useMuscles(true);
    if (!currentModel.getCoordinateSet().contains(coordName)) {
      ErrorDialog.showMessageDialog(""String_Node_Str"" + coordName + ""String_Node_Str"");
      return null;
    }
    if (qName.toLowerCase().startsWith(""String_Node_Str"")) {
      sourceY=(new PlotterSourceAnalysis(currentModel,plotterModel.getStorage(""String_Node_Str"" + coordName,currentModel),""String_Node_Str""));
    }
 else {
      sourceY=(new PlotterSourceAnalysis(currentModel,plotterModel.getStorage(""String_Node_Str"" + coordName,currentModel),""String_Node_Str""));
    }
    if (!currentModel.getMuscles().contains(muscleName)) {
      ErrorDialog.showMessageDialog(""String_Node_Str"" + muscleName + ""String_Node_Str"");
      return null;
    }
  }
 else   if (currentModel.getMuscles().contains(qName))   populateYQty(qName);
 else {
    ErrorDialog.showMessageDialog(""String_Node_Str"" + qName + ""String_Node_Str""+ muscleName+ ""String_Node_Str"");
    return null;
  }
  sourceX=dataSource;
  domainName=dataSource.getDisplayName();
  rangeNames=new String[]{muscleName};
  jPlotterAddCurveButtonActionPerformed(null);
  plotCurve=currentCurve;
  refreshPanel(plotCurve,muscleName);
  return plotCurve;
}","public PlotCurve showMotionCurve(String qName,String muscleName,PlotterSourceMotion dataSource){
  PlotCurve plotCurve=null;
  openSimContext=OpenSimDB.getInstance().getContext(currentModel);
  if (qName.toLowerCase().startsWith(""String_Node_Str"")) {
    String coordName=qName.substring(qName.indexOf(""String_Node_Str"") + 1);
    useMuscles(true);
    if (!currentModel.getCoordinateSet().contains(coordName)) {
      ErrorDialog.showMessageDialog(""String_Node_Str"" + coordName + ""String_Node_Str"");
      return null;
    }
    if (qName.toLowerCase().startsWith(""String_Node_Str"")) {
      sourceY=(new PlotterSourceAnalysis(currentModel,plotterModel.getStorage(""String_Node_Str"" + coordName,currentModel),""String_Node_Str""));
    }
 else {
      sourceY=(new PlotterSourceAnalysis(currentModel,plotterModel.getStorage(""String_Node_Str"" + coordName,currentModel),""String_Node_Str""));
    }
    if (!currentModel.getMuscles().contains(muscleName)) {
      ErrorDialog.showMessageDialog(""String_Node_Str"" + muscleName + ""String_Node_Str"");
      return null;
    }
  }
 else   if (currentModel.getMuscles().contains(qName) || qNameSet.contains(qName.toLowerCase()))   populateYQty(qName);
 else {
    ErrorDialog.showMessageDialog(""String_Node_Str"" + qName + ""String_Node_Str""+ muscleName+ ""String_Node_Str"");
    return null;
  }
  sourceX=dataSource;
  domainName=dataSource.getDisplayName();
  rangeNames=new String[]{muscleName};
  jPlotterAddCurveButtonActionPerformed(null);
  plotCurve=currentCurve;
  refreshPanel(plotCurve,muscleName);
  return plotCurve;
}",0.9864165588615784
147176,"double getMinX(){
  return ((Double)jDomainStartTextField.getValue()).doubleValue();
}","/** 
 * Retrieve domain min bound
 * @return domain min bound
 */
public double getMinX(){
  return ((Double)jDomainStartTextField.getValue()).doubleValue();
}",0.7020408163265306
147177,"double getMaxX(){
  return ((Double)jDomainEndTextField.getValue()).doubleValue();
}","/** 
 * Retrieve domain max bound
 * @return domain max bound
 */
public double getMaxX(){
  return ((Double)jDomainEndTextField.getValue()).doubleValue();
}",0.6970954356846473
147178,"void setMinX(double minX){
  jDomainStartTextField.setValue(minX);
}","/** 
 * Specify domain min bound
 * @param minX 
 */
public void setMinX(double minX){
  jDomainStartTextField.setValue(minX);
}",0.6938775510204082
147179,"void setMaxX(double maxX){
  jDomainEndTextField.setValue(maxX);
}","/** 
 * Specify domain max bound
 * @param maxX 
 */
public void setMaxX(double maxX){
  jDomainEndTextField.setValue(maxX);
}",0.6875
147180,"public PlotCurve plotDataFromSource(PlotterSourceInterface source,String domain,String range){
  sourceX=source;
  sourceY=sourceX;
  setDomainName(domain);
  PlotCurveSettings settings=getSettings();
  PlotCurve plotCurve=null;
  settings.setName(range);
  plotCurve=plotterModel.addCurveSingleRangeName(""String_Node_Str"",settings,sourceX,getDomainName(),sourceY,range);
  makeCurveCurrent(plotCurve);
  return plotCurve;
}","public PlotCurve plotDataFromSource(PlotterSourceInterface source,String domain,String range){
  sourceX=source;
  sourceY=sourceX;
  setDomainName(domain);
  PlotCurveSettings settings=getSettings();
  settings.setXMin(source.getStorage().getFirstTime());
  settings.setXMax(source.getStorage().getLastTime());
  PlotCurve plotCurve=null;
  settings.setName(range);
  plotCurve=plotterModel.addCurveSingleRangeName(""String_Node_Str"",settings,sourceX,getDomainName(),sourceY,range);
  makeCurveCurrent(plotCurve);
  return plotCurve;
}",0.8842544316996872
147181,"public void adoptAndAppend(Function aFunction){
  aFunction.markAdopted();
  adoptAndAppendImpl(aFunction);
}","public boolean adoptAndAppend(Function aFunction){
  aFunction.markAdopted();
  return super.adoptAndAppend(aFunction);
}",0.8869565217391304
147182,"/** 
 * setCoordinateValue allows the user to set the value of the passed in Coordinate to the specified newValue This call, also updates the Graphics window if needed.
 * @param coordinate
 * @param newValue 
 */
static public void setCoordinateValue(final Coordinate coordinate,final double newValue){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      getModelState(coordinate.getModel()).setValue(coordinate,newValue);
      ViewDB.getInstance().updateModelDisplay(coordinate.getModel());
      MotionsDB.getInstance().reportTimeChange(0);
    }
  }
);
}","/** 
 * setCoordinateValue allows the user to set the value of the passed in Coordinate to the specified newValue This call, also updates the Graphics window if needed.
 * @param coordinate
 * @param newValue 
 */
static public void setCoordinateValue(final Coordinate coordinate,final double newValue){
  getModelState(coordinate.getModel()).setValue(coordinate,newValue);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      ViewDB.getInstance().updateModelDisplay(coordinate.getModel());
      MotionsDB.getInstance().reportTimeChange(0);
    }
  }
);
}",0.8777589134125636
147183,"private void RestoreAllButtonActionPerformed(java.awt.event.ActionEvent evt){
  restoreActuators();
}","private void RestoreAllButtonActionPerformed(java.awt.event.ActionEvent evt){
}",0.8777777777777778
147184,"private void AddMarkerButtonActionPerformed(java.awt.event.ActionEvent evt){
  addMarker();
}","private void AddMarkerButtonActionPerformed(java.awt.event.ActionEvent evt){
}",0.912280701754386
147185,"public String getFullname(String modelFilePath,String bareFileName,boolean debug){
  String candidate=modelFilePath + File.separator + bareFileName;
  if (debug)   OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
  if (new File(candidate).exists())   return candidate;
  candidate=modelFilePath + File.separator + ""String_Node_Str""+ File.separator+ bareFileName;
  if (debug)   OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
  if (new File(candidate).exists())   return candidate;
  String GeometryPath=Preferences.userNodeForPackage(TheApp.class).get(""String_Node_Str"",""String_Node_Str"");
  if (GeometryPath != null) {
    StringTokenizer tokenizer=new StringTokenizer(GeometryPath,File.pathSeparator);
    Vector<String> dirList=new Vector<String>(4);
    while (tokenizer.hasMoreElements()) {
      String nextDir=tokenizer.nextToken();
      candidate=nextDir + File.separator + bareFileName;
      if (debug)       OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
      if (new File(candidate).exists())       return candidate;
    }
  }
  candidate=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ bareFileName;
  if (debug)   OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
  if (new File(candidate).exists())   return candidate;
  if (debug)   System.out.println(""String_Node_Str"" + candidate);
  return null;
}","public String getFullname(String modelFilePath,String bareFileName,boolean debug){
  String candidate=modelFilePath + File.separator + bareFileName;
  if (debug)   OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
  if (isValidFile(candidate))   return candidate;
  candidate=modelFilePath + File.separator + ""String_Node_Str""+ File.separator+ bareFileName;
  if (debug)   OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
  if (isValidFile(candidate))   return candidate;
  String GeometryPath=Preferences.userNodeForPackage(TheApp.class).get(""String_Node_Str"",""String_Node_Str"");
  if (GeometryPath != null) {
    StringTokenizer tokenizer=new StringTokenizer(GeometryPath,File.pathSeparator);
    Vector<String> dirList=new Vector<String>(4);
    while (tokenizer.hasMoreElements()) {
      String nextDir=tokenizer.nextToken();
      candidate=nextDir + File.separator + bareFileName;
      if (debug)       OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
      if (isValidFile(candidate))       return candidate;
    }
  }
  candidate=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ bareFileName;
  if (debug)   OpenSimLogger.logMessage(""String_Node_Str"" + candidate + ""String_Node_Str"",OpenSimLogger.INFO);
  if (isValidFile(candidate))   return candidate;
  if (debug)   System.out.println(""String_Node_Str"" + candidate);
  return null;
}",0.9383033419023136
147186,"ScaleToolWorker() throws Exception {
  updateScaleTool();
  progressHandle=ProgressHandleFactory.createHandle(""String_Node_Str"",new Cancellable(){
    public boolean cancel(){
      interrupt();
      return true;
    }
  }
);
  progressHandle.start();
  processedModel=new Model(unscaledModel);
  processedModel.setName(scaleTool.getName());
  processedModel.setInputFileName(""String_Node_Str"");
  processedModel.setOriginalModelPathFromModel(unscaledModel);
  setExecuting(true);
}","ScaleToolWorker() throws Exception {
  System.out.println(""String_Node_Str"" + scaleTool.getModelScaler().getMeasurementSet().dump());
  updateScaleTool();
  System.out.println(""String_Node_Str"" + scaleTool.getModelScaler().getMeasurementSet().dump());
  progressHandle=ProgressHandleFactory.createHandle(""String_Node_Str"",new Cancellable(){
    public boolean cancel(){
      interrupt();
      return true;
    }
  }
);
  progressHandle.start();
  processedModel=new Model(unscaledModel);
  processedModel.setName(scaleTool.getName());
  processedModel.setInputFileName(""String_Node_Str"");
  processedModel.setOriginalModelPathFromModel(unscaledModel);
  setExecuting(true);
}",0.8189655172413793
147187,"public Object construct(){
  result=true;
  if (getModelScalerEnabled()) {
    System.out.println(""String_Node_Str"");
    processedModelContext=OpenSimDB.getInstance().createContext(processedModel);
    String t=unscaledModel.getFilePath();
    scaleTool.getMarkerPlacer().setOutputModelFileName(t + scaleTool.getMarkerPlacer().getOutputModelFileName());
    if (!processedModelContext.processModelScale(scaleTool.getModelScaler(),processedModel,""String_Node_Str"",scaleTool.getSubjectMass())) {
      result=false;
      return this;
    }
  }
  if (getMarkerPlacerEnabled()) {
    System.out.println(""String_Node_Str"");
    if (!processedModelContext.processModelMarkerPlacer(scaleTool.getMarkerPlacer(),processedModel,""String_Node_Str"")) {
      result=false;
      return this;
    }
  }
  return this;
}","public Object construct(){
  result=true;
  if (getModelScalerEnabled()) {
    System.out.println(""String_Node_Str"");
    processedModelContext=OpenSimDB.getInstance().createContext(processedModel);
    String t=unscaledModel.getFilePath();
    scaleTool.getMarkerPlacer().setOutputModelFileName(t + scaleTool.getMarkerPlacer().getOutputModelFileName());
    System.out.println(""String_Node_Str"" + scaleTool.getModelScaler().getMeasurementSet().dump());
    if (!processedModelContext.processModelScale(scaleTool.getModelScaler(),processedModel,""String_Node_Str"",scaleTool.getSubjectMass())) {
      result=false;
      return this;
    }
  }
  if (getMarkerPlacerEnabled()) {
    System.out.println(""String_Node_Str"");
    if (!processedModelContext.processModelMarkerPlacer(scaleTool.getMarkerPlacer(),processedModel,""String_Node_Str"")) {
      result=false;
      return this;
    }
  }
  return this;
}",0.9422066549912436
147188,"public void toModelScaler(){
  ModelScaler modelScaler=scaleToolModel.getScaleTool().getModelScaler();
  ArrayStr array=new ArrayStr();
  MeasurementSet measurementSet=modelScaler.getMeasurementSet();
  if (measurementSet.getSize() > 0)   array.append(""String_Node_Str"");
  for (int i=0; i < measurementSet.getSize(); i++) {
    measurementSet.get(i).getBodyScaleSet().setSize(0);
    measurementSet.get(i).setApply(false);
  }
  for (int i=0; i < size(); i++) {
    for (int j=0; j < 3; j++) {
      if (get(i).measurements[j] >= 0)       addToMeasurement(get(i).measurements[j],bodySet.get(i).getName(),j);
    }
  }
  modelScaler.getScaleSet().setSize(0);
  for (int i=0; i < size(); i++) {
    if (get(i).useManualScale() || !get(i).manualScalesAreIdentity()) {
      Scale scale=new Scale();
      scale.setSegmentName(bodySet.get(i).getName());
      scale.setApply(get(i).useManualScale());
      double[] scales=new double[3];
      for (int j=0; j < 3; j++) {
        scales[j]=get(i).manualScales[j];
      }
      scale.setScaleFactors(scales);
      modelScaler.getScaleSet().cloneAndAppend(scale);
    }
  }
  if (modelScaler.getScaleSet().getSize() > 0)   array.append(""String_Node_Str"");
  modelScaler.setScalingOrder(array);
}","public void toModelScaler(){
  ModelScaler modelScaler=scaleToolModel.getScaleTool().getModelScaler();
  ArrayStr array=new ArrayStr();
  MeasurementSet measurementSet=modelScaler.getMeasurementSet();
  if (measurementSet.getSize() > 0)   array.append(""String_Node_Str"");
  for (int i=0; i < measurementSet.getSize(); i++) {
    measurementSet.get(i).getBodyScaleSet().setSize(0);
    measurementSet.get(i).setApply(false);
  }
  for (int i=0; i < size(); i++) {
    for (int j=0; j < 3; j++) {
      if (get(i).measurements[j] >= 0)       addToMeasurement(get(i).measurements[j],bodySet.get(i).getName(),j);
    }
  }
  modelScaler.getScaleSet().setSize(0);
  for (int i=0; i < size(); i++) {
    if (get(i).useManualScale() || !get(i).manualScalesAreIdentity()) {
      Scale scale=new Scale();
      scale.setSegmentName(bodySet.get(i).getName());
      scale.setApply(get(i).useManualScale());
      double[] scales=new double[3];
      for (int j=0; j < 3; j++) {
        scales[j]=get(i).manualScales[j];
      }
      scale.setScaleFactors(scales);
      modelScaler.getScaleSet().adoptAndAppend(Scale.safeDownCast(scale.clone()));
    }
  }
  if (modelScaler.getScaleSet().getSize() > 0)   array.append(""String_Node_Str"");
  modelScaler.setScalingOrder(array);
}",0.9808917197452228
147189,"void addMeasurement(String name){
  MeasurementSet measurementSet=getMeasurementSet();
  Measurement measurement=new Measurement();
  measurement.setName(name);
  measurementSet.cloneAndAppend(measurement);
  measurementValues.add(null);
  setModified(Operation.MeasurementSetChanged);
}","void addMeasurement(String name){
  MeasurementSet measurementSet=getMeasurementSet();
  Measurement measurement=new Measurement();
  measurement.setName(name);
  measurementSet.adoptAndAppend(Measurement.safeDownCast(measurement.clone()));
  measurementValues.add(null);
  setModified(Operation.MeasurementSetChanged);
}",0.8914473684210527
147190,"private ScaleSet createIdentityScaleSet(){
  BodySet bodySet=getUnscaledModel().getBodySet();
  ScaleSet scaleSet=new ScaleSet();
  double[] identityScale=new double[]{1.,1.,1.};
  for (int i=0; i < bodySet.getSize(); i++) {
    Scale scale=new Scale();
    scale.setSegmentName(bodySet.get(i).getName());
    scale.setScaleFactors(identityScale);
    scale.setApply(true);
    scaleSet.cloneAndAppend(scale);
  }
  return scaleSet;
}","private ScaleSet createIdentityScaleSet(){
  BodySet bodySet=getUnscaledModel().getBodySet();
  ScaleSet scaleSet=new ScaleSet();
  double[] identityScale=new double[]{1.,1.,1.};
  for (int i=0; i < bodySet.getSize(); i++) {
    Scale scale=new Scale();
    scale.setSegmentName(bodySet.get(i).getName());
    scale.setScaleFactors(identityScale);
    scale.setApply(true);
    scaleSet.adoptAndAppend(Scale.safeDownCast(scale.clone()));
  }
  return scaleSet;
}",0.9464285714285714
147191,"private void updateScaleTool(){
  scaleTool.setPrintResultFiles((scaleTool.getMarkerPlacer().getOutputModelFileName() != ""String_Node_Str""));
  scaleTool.getGenericModelMaker().setMarkerSetFileName(extraMarkerSetFile.toProperty());
  scaleTool.getModelScaler().setMarkerFileName(measurementTrialFile.toProperty());
  bodySetScaleFactors.toModelScaler();
  ikCommonModel.toMarkerPlacer(scaleTool.getMarkerPlacer());
}","private void updateScaleTool(){
  scaleTool.setPrintResultFiles((scaleTool.getMarkerPlacer().getOutputModelFileName() != ""String_Node_Str""));
  scaleTool.getGenericModelMaker().setMarkerSetFileName(extraMarkerSetFile.toProperty());
  scaleTool.getModelScaler().setMarkerFileName(measurementTrialFile.toProperty());
  System.out.println(""String_Node_Str"" + scaleTool.getModelScaler().getMeasurementSet().dump());
  bodySetScaleFactors.toModelScaler();
  System.out.println(""String_Node_Str"" + scaleTool.getModelScaler().getMeasurementSet().dump());
  ikCommonModel.toMarkerPlacer(scaleTool.getMarkerPlacer());
}",0.8109161793372319
147192,"public void fromModelScaler(){
  ModelScaler modelScaler=scaleToolModel.getScaleTool().getModelScaler();
  for (int i=0; i < size(); i++)   set(i,new BodyScaleFactors());
  boolean sawManualScale=false;
  for (int o=0; o < modelScaler.getScalingOrder().getSize(); o++) {
    if (modelScaler.getScalingOrder().getitem(o).equals(""String_Node_Str"")) {
      if (sawManualScale) {
      }
      for (int i=0; i < modelScaler.getScalingOrder().getSize(); i++) {
        if (modelScaler.getScalingOrder().getitem(i).equals(""String_Node_Str"")) {
          MeasurementSet measurementSet=modelScaler.getMeasurementSet();
          for (int j=0; j < measurementSet.getSize(); j++) {
            Measurement meas=modelScaler.getMeasurementSet().get(j);
            if (!meas.getApply())             continue;
            for (int k=0; k < meas.getBodyScaleSet().getSize(); k++) {
              BodyScale bodyScale=meas.getBodyScaleSet().get(k);
              Integer bodyIndex=mapBodyNameToIndex.get(bodyScale.getName());
              if (bodyIndex != null) {
                BodyScaleFactors scaleFactors=get(bodyIndex);
                scaleFactors.useManual=false;
                ArrayStr axisNames=bodyScale.getAxisNames();
                for (int l=0; l < axisNames.getSize(); l++) {
                  int index=axisToIndex(axisNames.getitem(l));
                  if (index >= 0)                   scaleFactors.measurements[index]=j;
                }
              }
 else {
                System.out.println(""String_Node_Str"" + bodyScale.getName() + ""String_Node_Str""+ meas.getName()+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
 else     if (modelScaler.getScalingOrder().getitem(o).equals(""String_Node_Str"")) {
      sawManualScale=true;
      for (int i=0; i < modelScaler.getScaleSet().getSize(); i++) {
        Scale scale=modelScaler.getScaleSet().get(i);
        Integer bodyIndex=mapBodyNameToIndex.get(scale.getSegmentName());
        if (bodyIndex != null) {
          BodyScaleFactors scaleFactors=get(bodyIndex);
          scaleFactors.useManual=scale.getApply();
          double[] scales=new double[3];
          scale.getScaleFactors(scales);
          for (int j=0; j < 3; j++)           scaleFactors.manualScales[j]=scales[j];
        }
 else {
          System.out.println(""String_Node_Str"" + scale.getSegmentName() + ""String_Node_Str""+ scale.getName()+ ""String_Node_Str"");
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"" + modelScaler.getScalingOrder().getitem(o) + ""String_Node_Str"");
    }
  }
}","public void fromModelScaler(){
  ModelScaler modelScaler=scaleToolModel.getScaleTool().getModelScaler();
  for (int i=0; i < size(); i++)   set(i,new BodyScaleFactors());
  for (int order=0; order < modelScaler.getScalingOrder().getSize(); order++) {
    if (modelScaler.getScalingOrder().getitem(order).equals(""String_Node_Str"")) {
      for (int i=0; i < modelScaler.getScalingOrder().getSize(); i++) {
        if (modelScaler.getScalingOrder().getitem(i).equals(""String_Node_Str"")) {
          MeasurementSet measurementSet=modelScaler.getMeasurementSet();
          for (int j=0; j < measurementSet.getSize(); j++) {
            Measurement meas=modelScaler.getMeasurementSet().get(j);
            if (!meas.getApply())             continue;
            for (int k=0; k < meas.getBodyScaleSet().getSize(); k++) {
              BodyScale bodyScale=meas.getBodyScaleSet().get(k);
              Integer bodyIndex=mapBodyNameToIndex.get(bodyScale.getName());
              if (bodyIndex != null) {
                BodyScaleFactors scaleFactors=get(bodyIndex);
                scaleFactors.useManual=false;
                ArrayStr axisNames=bodyScale.getAxisNames();
                for (int l=0; l < axisNames.getSize(); l++) {
                  int index=axisToIndex(axisNames.getitem(l));
                  if (index >= 0)                   scaleFactors.measurements[index]=j;
                }
              }
 else {
                System.out.println(""String_Node_Str"" + bodyScale.getName() + ""String_Node_Str""+ meas.getName()+ ""String_Node_Str"");
              }
            }
          }
        }
      }
    }
 else     if (modelScaler.getScalingOrder().getitem(order).equals(""String_Node_Str"")) {
      for (int i=0; i < modelScaler.getScaleSet().getSize(); i++) {
        Scale scale=modelScaler.getScaleSet().get(i);
        Integer bodyIndex=mapBodyNameToIndex.get(scale.getSegmentName());
        if (bodyIndex != null) {
          BodyScaleFactors scaleFactors=get(bodyIndex);
          scaleFactors.useManual=scale.getApply();
          double[] scales=new double[3];
          scale.getScaleFactors(scales);
          for (int j=0; j < 3; j++)           scaleFactors.manualScales[j]=scales[j];
        }
 else {
          System.out.println(""String_Node_Str"" + scale.getSegmentName() + ""String_Node_Str""+ scale.getName()+ ""String_Node_Str"");
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"" + modelScaler.getScalingOrder().getitem(order) + ""String_Node_Str"");
    }
  }
}",0.9731425210742992
147193,"private void addToMeasurement(int index,String bodyName,int axis){
  ModelScaler modelScaler=scaleToolModel.getScaleTool().getModelScaler();
  Measurement meas=modelScaler.getMeasurementSet().get(index);
  meas.setApply(true);
  BodyScaleSet bodyScaleSet=meas.getBodyScaleSet();
  int bodyScaleIndex=bodyScaleSet.getIndex(bodyName);
  BodyScale bodyScale=null;
  if (bodyScaleIndex < 0) {
    bodyScale=new BodyScale();
    bodyScale.setName(bodyName);
    modelScaler.getMeasurementSet().get(index).getBodyScaleSet().cloneAndAppend(bodyScale);
  }
 else   bodyScale=bodyScaleSet.get(bodyScaleIndex);
  if (axis == 0 || axis == -1)   bodyScale.getAxisNames().append(""String_Node_Str"");
  if (axis == 1 || axis == -1)   bodyScale.getAxisNames().append(""String_Node_Str"");
  if (axis == 2 || axis == -1)   bodyScale.getAxisNames().append(""String_Node_Str"");
}","private void addToMeasurement(int index,String bodyName,int axis){
  ModelScaler modelScaler=scaleToolModel.getScaleTool().getModelScaler();
  Measurement meas=modelScaler.getMeasurementSet().get(index);
  meas.setApply(true);
  BodyScaleSet bodyScaleSet=meas.getBodyScaleSet();
  int bodyScaleIndex=bodyScaleSet.getIndex(bodyName);
  BodyScale bodyScale=null;
  if (bodyScaleIndex < 0) {
    bodyScale=BodyScale.safeDownCast((new BodyScale()).clone());
    bodyScale.setName(bodyName);
    modelScaler.getMeasurementSet().get(index).getBodyScaleSet().adoptAndAppend(bodyScale);
  }
 else   bodyScale=bodyScaleSet.get(bodyScaleIndex);
  if (axis == 0 || axis == -1)   bodyScale.getAxisNames().append(""String_Node_Str"");
  if (axis == 1 || axis == -1)   bodyScale.getAxisNames().append(""String_Node_Str"");
  if (axis == 2 || axis == -1)   bodyScale.getAxisNames().append(""String_Node_Str"");
}",0.9725400457665904
147194,"public void setInitialStatesFileName(String fileName){
  if (!getInitialStatesFileName().equals(fileName)) {
    forwardTool().setStatesFileName(fileName);
    setModified(AbstractToolModel.Operation.InputDataChanged);
  }
}","public void setInitialStatesFileName(String fileName){
  if (!getInitialStatesFileName().equals(fileName)) {
    forwardTool().setStatesFileName(fileName);
    setModified(AbstractToolModel.Operation.InputDataChanged);
    try {
      Storage s=new Storage(fileName);
      updateStatesTimeRange(s.getFirstTime(),s.getLastTime());
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
}",0.7111111111111111
147195,"public void setControlsFileName(String fileName){
  if (!getControlsFileName().equals(fileName)) {
    forwardTool().setControlsFileName(fileName);
    setModified(AbstractToolModel.Operation.InputDataChanged);
  }
}","public void setControlsFileName(String fileName){
  if (!getControlsFileName().equals(fileName)) {
    forwardTool().setControlsFileName(fileName);
    setModified(AbstractToolModel.Operation.InputDataChanged);
    double startTime=0, endTime=1;
    if (fileName.endsWith(""String_Node_Str"")) {
      ControlSet set=new ControlSet(fileName);
      if (set.getSize() > 0) {
        Control c=set.get(0);
        if (c != null) {
          ControlLinear cl=ControlLinear.safeDownCast(c);
          startTime=cl.getFirstTime();
          endTime=cl.getLastTime();
        }
      }
    }
 else     if (fileName.endsWith(""String_Node_Str"")) {
      try {
        Storage s=new Storage(fileName);
        startTime=s.getFirstTime();
        endTime=s.getLastTime();
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
    }
    updateControlTimeRange(startTime,endTime);
  }
}",0.3884892086330935
147196,"/** 
 * Load a motion file, and associate it with a model. We try to associate the motion with current model first if something doesn't look right (e.g. no coordinates or markers match, warn and ask user either to select another model or abort loading. A side effect of changing the model associated with a loaded motion is that the new model becomes current.
 */
public void loadMotionFile(String fileName,boolean primary){
  Storage storage=null;
  try {
    storage=new Storage(fileName);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(""String_Node_Str"" + fileName));
    return;
  }
  saveStorageFileName(storage,fileName);
  final Storage newMotion=storage;
  Model currentModel=OpenSimDB.getInstance().getCurrentModel();
  AnalyzeTool.fixMuscleStatesToValidRange(newMotion,currentModel);
  loadMotionStorage(newMotion,primary);
}","/** 
 * Load a motion file, and associate it with a model. We try to associate the motion with current model first if something doesn't look right (e.g. no coordinates or markers match, warn and ask user either to select another model or abort loading. A side effect of changing the model associated with a loaded motion is that the new model becomes current.
 */
public void loadMotionFile(String fileName,boolean primary){
  Storage storage=null;
  try {
    storage=new Storage(fileName);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(""String_Node_Str"" + fileName));
    return;
  }
  saveStorageFileName(storage,fileName);
  loadMotionStorage(storage,primary);
}",0.8772563176895307
147197,"public String toString(){
  return ((Plot)getUserObject()).getTitle();
}","public String toString(){
  Object userObj=getUserObject();
  if (userObj instanceof Plot)   return ((Plot)userObj).getTitle();
 else   return ""String_Node_Str"";
}",0.502127659574468
147198,"public Component getTreeCellEditorComponent(JTree tree,Object value,boolean isSelected,boolean expanded,boolean leaf,int row){
  if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
    Object userObject=node.getUserObject();
    if (userObject instanceof PlotCurve) {
      item=(PlotCurve)node.getUserObject();
    }
 else     if (userObject instanceof Plot) {
      topItem=(Plot)node.getUserObject();
    }
  }
  return super.getTreeCellEditorComponent(tree,value,isSelected,expanded,leaf,row);
}","public Component getTreeCellEditorComponent(JTree tree,Object value,boolean isSelected,boolean expanded,boolean leaf,int row){
  if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
    Object userObject=node.getUserObject();
    if (userObject instanceof PlotCurve) {
      item=(PlotCurve)node.getUserObject();
      topItem=null;
    }
 else     if (userObject instanceof Plot) {
      topItem=(Plot)node.getUserObject();
      item=null;
    }
  }
  return super.getTreeCellEditorComponent(tree,value,isSelected,expanded,leaf,row);
}",0.9678540399652475
147199,"void applyColorsFromModel(){
  VisibleObject bodyVisibleObject=body.getDisplayer();
  GeometrySet gSet=bodyVisibleObject.getGeometrySet();
  for (int k=0; k < gSet.getSize(); ++k) {
    DisplayGeometry gPiece=gSet.get(k);
    double[] colorOnFile=new double[3];
    gPiece.getColor(colorOnFile);
    gPiece.setColor(colorOnFile);
  }
}","void applyColorsFromModel(){
  VisibleObject bodyVisibleObject=body.getDisplayer();
  GeometrySet gSet=bodyVisibleObject.getGeometrySet();
  for (int k=0; k < gSet.getSize(); ++k) {
    DisplayGeometry gPiece=gSet.get(k);
    double[] colorOnFile=new double[3];
    gPiece.getColor(colorOnFile);
    gPiece.setColor(colorOnFile);
    DisplayGeometryDisplayer gd=(DisplayGeometryDisplayer)mapGeometryToVtkObjects.get(gPiece);
    gd.GetProperty().SetColor(colorOnFile);
    gd.Modified();
  }
}",0.8091787439613527
147200,"public void update(Observable observable,Object obj){
  if (observable instanceof OpenSimDB) {
    if (obj instanceof ModelEvent) {
      if (OpenSimDB.getInstance().hasModel(scaleToolModel.getUnscaledModel()))       return;
 else {
        scaleToolModel.deleteObserver(this);
        NotifyDescriptor.Message dlg=new NotifyDescriptor.Message(""String_Node_Str"");
        DialogDisplayer.getDefault().notify(dlg);
        this.close();
        return;
      }
    }
    return;
  }
  if (observable == scaleToolModel && obj == ScaleToolModel.Operation.ExecutionStateChanged) {
    updateDialogButtons();
  }
 else {
    updateFromModel();
  }
}","public void update(Observable observable,Object obj){
  if (observable instanceof OpenSimDB) {
    if (obj instanceof ModelEvent) {
      if (OpenSimDB.getInstance().hasModel(scaleToolModel.getOriginalModel()))       return;
 else {
        scaleToolModel.deleteObserver(this);
        NotifyDescriptor.Message dlg=new NotifyDescriptor.Message(""String_Node_Str"");
        DialogDisplayer.getDefault().notify(dlg);
        this.close();
        return;
      }
    }
    return;
  }
  if (observable == scaleToolModel && obj == ScaleToolModel.Operation.ExecutionStateChanged) {
    updateDialogButtons();
  }
 else {
    updateFromModel();
  }
}",0.9875776397515528
147201,"private void setTransformFromArray6(final double[] rotationsAndTranslations,final vtkTransform xform){
  xform.RotateX(Math.toDegrees(rotationsAndTranslations[0]));
  xform.RotateY(Math.toDegrees(rotationsAndTranslations[1]));
  xform.RotateZ(Math.toDegrees(rotationsAndTranslations[2]));
  xform.Translate(rotationsAndTranslations[3],rotationsAndTranslations[4],rotationsAndTranslations[5]);
}","static public void setTransformFromArray6(final double[] rotationsAndTranslations,final vtkTransform xform){
  xform.RotateX(Math.toDegrees(rotationsAndTranslations[0]));
  xform.RotateY(Math.toDegrees(rotationsAndTranslations[1]));
  xform.RotateZ(Math.toDegrees(rotationsAndTranslations[2]));
  xform.PostMultiply();
  xform.Translate(rotationsAndTranslations[3],rotationsAndTranslations[4],rotationsAndTranslations[5]);
}",0.9486552567237164
147202,"public void applyAttributesAndTransformToActor(){
  String textureFile=displayGeometry.getTextureFile();
  if (textureFile != null && !textureFile.equalsIgnoreCase(""String_Node_Str"")) {
    textureFile=GeometryFileLocator.getInstance().getFullname(modelFilePath,displayGeometry.getTextureFile(),false);
    vtkTexture texture=new vtkTexture();
    vtkImageReader2 textureReader=null;
    if (textureFile.toLowerCase().endsWith(""String_Node_Str"")) {
      textureReader=new vtkBMPReader();
      textureReader.SetFileName(textureFile);
      textureReader.Update();
      texture.SetInputConnection(textureReader.GetOutputPort());
    }
 else     if (textureFile.toLowerCase().endsWith(""String_Node_Str"")) {
      textureReader=new vtkJPEGReader();
      textureReader.SetFileName(textureFile);
      textureReader.Update();
      texture.SetInputConnection(textureReader.GetOutputPort());
    }
 else     if (textureFile.toLowerCase().endsWith(""String_Node_Str"")) {
      textureReader=new vtkPNGReader();
      textureReader.SetFileName(textureFile);
      textureReader.Update();
      texture.SetInputConnection(textureReader.GetOutputPort());
    }
    if (textureReader != null) {
      texture.InterpolateOn();
      SetTexture(texture);
    }
  }
 else {
    double[] dColor=new double[]{1.,1.,1.};
    displayGeometry.getColor(dColor);
    GetProperty().SetColor(dColor);
    color=new Color((float)dColor[0],(float)dColor[1],(float)dColor[2]);
  }
  double[] scales=new double[]{1.,1.,1.};
  displayGeometry.getScaleFactors(scales);
  SetScale(scales);
  double[] rotationsAndTranslations=new double[6];
  displayGeometry.getRotationsAndTranslationsAsArray6(rotationsAndTranslations);
  vtkTransform xform=new vtkTransform();
  setTransformFromArray6(rotationsAndTranslations,xform);
  SetUserTransform(xform);
  applyDisplayPreferenceToActor();
  GetProperty().SetOpacity(displayGeometry.getOpacity());
}","public void applyAttributesAndTransformToActor(){
  String textureFile=displayGeometry.getTextureFile();
  if (textureFile != null && !textureFile.equalsIgnoreCase(""String_Node_Str"")) {
    textureFile=GeometryFileLocator.getInstance().getFullname(modelFilePath,displayGeometry.getTextureFile(),false);
    vtkTexture texture=new vtkTexture();
    vtkImageReader2 textureReader=null;
    if (textureFile.toLowerCase().endsWith(""String_Node_Str"")) {
      textureReader=new vtkBMPReader();
      textureReader.SetFileName(textureFile);
      textureReader.Update();
      texture.SetInputConnection(textureReader.GetOutputPort());
    }
 else     if (textureFile.toLowerCase().endsWith(""String_Node_Str"")) {
      textureReader=new vtkJPEGReader();
      textureReader.SetFileName(textureFile);
      textureReader.Update();
      texture.SetInputConnection(textureReader.GetOutputPort());
    }
 else     if (textureFile.toLowerCase().endsWith(""String_Node_Str"")) {
      textureReader=new vtkPNGReader();
      textureReader.SetFileName(textureFile);
      textureReader.Update();
      texture.SetInputConnection(textureReader.GetOutputPort());
    }
    if (textureReader != null) {
      texture.InterpolateOn();
      SetTexture(texture);
    }
  }
 else {
    double[] dColor=new double[]{1.,1.,1.};
    displayGeometry.getColor(dColor);
    GetProperty().SetColor(dColor);
    color=new Color((float)dColor[0],(float)dColor[1],(float)dColor[2]);
  }
  double[] scales=new double[]{1.,1.,1.};
  displayGeometry.getScaleFactors(scales);
  SetScale(scales);
  double[] rotationsAndTranslations=new double[6];
  displayGeometry.getRotationsAndTranslationsAsArray6(rotationsAndTranslations);
  vtkTransform xform=new vtkTransform();
  BodyDisplayer.setTransformFromArray6(rotationsAndTranslations,xform);
  SetUserTransform(xform);
  applyDisplayPreferenceToActor();
  GetProperty().SetOpacity(displayGeometry.getOpacity());
}",0.9963560645497136
147203,"public void setOrientation(Vec3 loc){
  double[] rotationsAndTranslations=new double[6];
  displayGeometry.getRotationsAndTranslationsAsArray6(rotationsAndTranslations);
  for (int i=0; i < 3; i++)   rotationsAndTranslations[i]=Math.toRadians(loc.get(i));
  displayGeometry.setRotationsAndTRanslations(rotationsAndTranslations);
  vtkTransform xform=new vtkTransform();
  setTransformFromArray6(rotationsAndTranslations,xform);
  SetUserTransform(xform);
  Modified();
  ViewDB.getInstance().renderAll();
}","public void setOrientation(Vec3 loc){
  double[] rotationsAndTranslations=new double[6];
  displayGeometry.getRotationsAndTranslationsAsArray6(rotationsAndTranslations);
  for (int i=0; i < 3; i++)   rotationsAndTranslations[i]=Math.toRadians(loc.get(i));
  displayGeometry.setRotationsAndTRanslations(rotationsAndTranslations);
  vtkTransform xform=new vtkTransform();
  BodyDisplayer.setTransformFromArray6(rotationsAndTranslations,xform);
  SetUserTransform(xform);
  Modified();
  ViewDB.getInstance().renderAll();
}",0.98635477582846
147204,"public void setLocationGUI(final Vec3 loc,boolean allowUndo){
  double[] rotationsAndTranslations=new double[6];
  displayGeometry.getRotationsAndTranslationsAsArray6(rotationsAndTranslations);
  final Vec3 oldLoc=new Vec3(rotationsAndTranslations[3],rotationsAndTranslations[4],rotationsAndTranslations[5]);
  for (int i=0; i < 3; i++)   rotationsAndTranslations[i + 3]=loc.get(i);
  displayGeometry.setRotationsAndTRanslations(rotationsAndTranslations);
  vtkTransform xform=new vtkTransform();
  setTransformFromArray6(rotationsAndTranslations,xform);
  SetUserTransform(xform);
  Modified();
  if (allowUndo) {
    AbstractUndoableEdit auEdit=new AbstractUndoableEdit(){
      public boolean canUndo(){
        return true;
      }
      public boolean canRedo(){
        return true;
      }
      public void undo() throws CannotUndoException {
        super.undo();
        setLocationGUI(oldLoc,false);
      }
      public void redo() throws CannotRedoException {
        super.redo();
        setLocationGUI(loc,false);
      }
      public String getPresentationName(){
        return ""String_Node_Str"";
      }
    }
;
    ExplorerTopComponent.addUndoableEdit(auEdit);
  }
  ViewDB.getInstance().renderAll();
}","public void setLocationGUI(final Vec3 loc,boolean allowUndo){
  double[] rotationsAndTranslations=new double[6];
  displayGeometry.getRotationsAndTranslationsAsArray6(rotationsAndTranslations);
  final Vec3 oldLoc=new Vec3(rotationsAndTranslations[3],rotationsAndTranslations[4],rotationsAndTranslations[5]);
  for (int i=0; i < 3; i++)   rotationsAndTranslations[i + 3]=loc.get(i);
  displayGeometry.setRotationsAndTRanslations(rotationsAndTranslations);
  vtkTransform xform=new vtkTransform();
  BodyDisplayer.setTransformFromArray6(rotationsAndTranslations,xform);
  SetUserTransform(xform);
  Modified();
  if (allowUndo) {
    AbstractUndoableEdit auEdit=new AbstractUndoableEdit(){
      public boolean canUndo(){
        return true;
      }
      public boolean canRedo(){
        return true;
      }
      public void undo() throws CannotUndoException {
        super.undo();
        setLocationGUI(oldLoc,false);
      }
      public void redo() throws CannotRedoException {
        super.redo();
        setLocationGUI(loc,false);
      }
      public String getPresentationName(){
        return ""String_Node_Str"";
      }
    }
;
    ExplorerTopComponent.addUndoableEdit(auEdit);
  }
  ViewDB.getInstance().renderAll();
}",0.9943043124491456
147205,"public int getData(int aTimeIndex,int aN,SWIGTYPE_p_p_double rData){
  return opensimModelJNI.Storage_getData__SWIG_3(swigCPtr,this,aTimeIndex,aN,SWIGTYPE_p_p_double.getCPtr(rData));
}","public int getData(int aTimeIndex,int aStateIndex,int aN,SWIGTYPE_p_p_double rData){
  return opensimModelJNI.Storage_getData__SWIG_1(swigCPtr,this,aTimeIndex,aStateIndex,aN,SWIGTYPE_p_p_double.getCPtr(rData));
}",0.9242424242424242
147206,"private void onGoingFinished(){
  mOnGoingRequest.mResultListener.onRequestFinished();
  startNextRequestIfNecessary();
}","private void onGoingFinished(){
  mOnGoingRequest.mResultListener.onRequestFinished();
  startNextRequestIfAny();
}",0.9576271186440678
147207,"/** 
 * method for clients 
 */
public void makeRequest(TestRequest request){
  request.timestamp=stamp++;
  mQueue.add(request);
  if (!cancelOnGoingIfNecessary()) {
    startNextRequestIfNecessary();
  }
}","/** 
 * method for clients 
 */
public void makeRequest(TestRequest request){
  request.timestamp=stamp++;
  mQueue.add(request);
  if (!cancelOnGoingIfNecessary()) {
    startNextRequestIfNoneOnGoing();
  }
}",0.9567307692307692
147208,"private void onGoingCancelled(){
  mQueue.add(mOnGoingRequest);
  startNextRequestIfNecessary();
}","private void onGoingCancelled(){
  mQueue.add(mOnGoingRequest);
  startNextRequestIfAny();
}",0.9473684210526316
147209,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == SCAN_QR) {
    if (resultCode == RESULT_OK) {
      Bundle res=data.getExtras();
      String qrtype=res.getString(""String_Node_Str"");
      String qrdata=res.getString(""String_Node_Str"");
      Log.w(TAG,qrtype);
      Log.w(TAG,qrdata);
      if (qrtype.equals(""String_Node_Str"")) {
        Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(qrdata));
        startActivity(browserIntent);
        finish();
      }
 else {
        createCards(qrdata);
        mCardScrollView=new CardScrollView(this);
        mAdapter=new MyCardScrollAdapter();
        mCardScrollView.setAdapter(mAdapter);
        mCardScrollView.activate();
        mCardScrollView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int i,          long l){
            if (mNeedsReadMore) {
              openOptionsMenu();
            }
 else {
              AudioManager audio=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
              audio.playSoundEffect(Sounds.DISALLOWED);
            }
          }
        }
);
        setContentView(mCardScrollView);
      }
    }
 else {
      finish();
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == SCAN_QR) {
    if (resultCode == RESULT_OK) {
      Bundle res=data.getExtras();
      String qrtype=res.getString(""String_Node_Str"");
      String qrdata=res.getString(""String_Node_Str"");
      Log.w(TAG,qrtype);
      Log.w(TAG,qrdata);
      if (qrtype.equals(""String_Node_Str"")) {
        Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(qrdata));
        startActivity(browserIntent);
        finish();
      }
 else {
        createCards(qrdata);
        mCardScrollView=new CardScrollView(this);
        mAdapter=new MyCardScrollAdapter();
        mCardScrollView.setAdapter(mAdapter);
        mCardScrollView.activate();
        mCardScrollView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int i,          long l){
            if (mNeedsReadMore) {
              openOptionsMenu();
            }
 else {
              AudioManager audio=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
              audio.playSoundEffect(Sounds.DISALLOWED);
            }
          }
        }
);
        setContentView(mCardScrollView);
        allowDestroy=true;
      }
    }
 else {
      finish();
    }
  }
}",0.9900332225913622
147210,"@SubscribeEvent public void onPlayerTick(TickEvent.PlayerTickEvent event){
  if (event.phase == TickEvent.Phase.START && event.side == Side.SERVER) {
    if (!event.player.capabilities.isCreativeMode) {
      for (int i=0; i < event.player.inventory.getSizeInventory(); i++) {
        ItemStack stack=event.player.inventory.getStackInSlot(i);
        if (stack != null && stack.getItem() == LoreExpansion.lorePage) {
          LoreKey key=ItemLorePage.getLore(stack);
          if (key != null) {
            Lore lore=LoreLoader.getLore(key);
            if (lore == null) {
              LoreExpansion.logger.warn(""String_Node_Str"");
              stack.setTagCompound(new NBTTagCompound());
              return;
            }
            LoreProperties collectedLore=PlayerHandler.getCollectedLore(event.player);
            if (!collectedLore.hasLore(key)) {
              collectedLore.addLore(key);
              PacketSyncLore.updateLore((EntityPlayerMP)event.player);
              PacketNotification.notify(event.player,PacketNotification.TYPE_CLIENT_PICKUP,key);
              LoreProperties properties=PlayerHandler.getCollectedLore(event.player);
              if (lore.autoplay && properties.canAutoplay(key)) {
                properties.setAutoplayed(key,true);
                PacketNotification.notify(event.player,PacketNotification.TYPE_CLIENT_AUTOPLAY,key);
              }
              for (              Commands.CommandEntry command : lore.commands.commands) {
                if (command.delay > 0) {
                  CommandDelayHandler.queueCommand(event.player,command);
                }
 else {
                  CommandHandler ch=(CommandHandler)MinecraftServer.getServer().getCommandManager();
                  LoreCommandSender commandSender=new LoreCommandSender(event.player);
                  ch.executeCommand(commandSender,command.command);
                }
              }
            }
            event.player.inventory.setInventorySlotContents(i,null);
            event.player.inventory.markDirty();
            return;
          }
          notifiedThisTick=false;
        }
      }
    }
  }
}","@SubscribeEvent public void onPlayerTick(TickEvent.PlayerTickEvent event){
  if (event.phase == TickEvent.Phase.START && event.side == Side.SERVER) {
    if (!event.player.capabilities.isCreativeMode) {
      for (int i=0; i < event.player.inventory.getSizeInventory(); i++) {
        ItemStack stack=event.player.inventory.getStackInSlot(i);
        if (stack != null && stack.getItem() == LoreExpansion.lorePage) {
          LoreKey key=ItemLorePage.getLore(stack);
          if (key != null) {
            Lore lore=LoreLoader.getLore(key);
            if (lore == null) {
              LoreExpansion.logger.warn(""String_Node_Str"");
              stack.setTagCompound(new NBTTagCompound());
              return;
            }
            LoreProperties collectedLore=PlayerHandler.getCollectedLore(event.player);
            if (!collectedLore.hasLore(key)) {
              collectedLore.addLore(key);
              PacketSyncLore.updateLore((EntityPlayerMP)event.player);
              PacketNotification.notify(event.player,PacketNotification.TYPE_CLIENT_PICKUP,key);
              LoreProperties properties=PlayerHandler.getCollectedLore(event.player);
              if (lore.autoplay && properties.canAutoplay(key)) {
                properties.setAutoplayed(key,true);
                PacketNotification.notify(event.player,PacketNotification.TYPE_CLIENT_AUTOPLAY,key);
              }
              if (lore.commands.commands != null) {
                for (                Commands.CommandEntry command : lore.commands.commands) {
                  if (command.delay > 0) {
                    CommandDelayHandler.queueCommand(event.player,command);
                  }
 else {
                    CommandHandler ch=(CommandHandler)MinecraftServer.getServer().getCommandManager();
                    LoreCommandSender commandSender=new LoreCommandSender(event.player);
                    ch.executeCommand(commandSender,command.command);
                  }
                }
              }
            }
            event.player.inventory.setInventorySlotContents(i,null);
            event.player.inventory.markDirty();
            return;
          }
          notifiedThisTick=false;
        }
      }
    }
  }
}",0.9780521262002744
147211,"@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean debug){
  LoreKey key=ItemLorePage.getLore(stack);
  if (key != null) {
    Lore data=LoreLoader.INSTANCE.getLore(key);
    if (data == null) {
      LoreExpansion.logger.warn(""String_Node_Str"");
      stack.setTagCompound(new NBTTagCompound());
    }
    if (data != null) {
      list.add(String.format(""String_Node_Str"",key.page,data.title));
      if (key.dimension == Integer.MAX_VALUE) {
        list.add(""String_Node_Str"");
      }
 else {
        list.add(""String_Node_Str"" + DimensionManager.getProvider(data.dimension).getDimensionName());
      }
    }
  }
}","@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean debug){
  LoreKey key=ItemLorePage.getLore(stack);
  if (key != null) {
    Lore data=LoreLoader.INSTANCE.getLore(key);
    if (data == null) {
      LoreExpansion.logger.warn(""String_Node_Str"");
      stack.setTagCompound(new NBTTagCompound());
    }
    if (data != null) {
      list.add(String.format(""String_Node_Str"",key.page,data.title));
      if (key.dimension == Integer.MAX_VALUE) {
        list.add(""String_Node_Str"");
      }
 else {
        list.add(""String_Node_Str"" + LoreLoader.INSTANCE.getDimensionName(key.dimension));
      }
    }
  }
}",0.9281345565749236
147212,"private String getDimensionName(int dimension){
  try {
    if (dimensionNameCache.containsKey(dimension)) {
      return dimensionNameCache.get(dimension);
    }
 else {
      WorldProvider worldProvider=DimensionManager.createProviderFor(dimension);
      String name=""String_Node_Str"";
      if (worldProvider != null) {
        name=worldProvider.getDimensionName();
      }
      dimensionNameCache.put(dimension,name);
      return name;
    }
  }
 catch (  RuntimeException ex) {
    dimensionNameCache.put(dimension,""String_Node_Str"");
    return ""String_Node_Str"";
  }
}","public String getDimensionName(int dimension){
  try {
    if (dimensionNameCache.containsKey(dimension)) {
      return dimensionNameCache.get(dimension);
    }
 else {
      WorldProvider worldProvider=DimensionManager.createProviderFor(dimension);
      String name=""String_Node_Str"";
      if (worldProvider != null) {
        name=worldProvider.getDimensionName();
      }
      dimensionNameCache.put(dimension,name);
      return name;
    }
  }
 catch (  RuntimeException ex) {
    dimensionNameCache.put(dimension,""String_Node_Str"");
    return ""String_Node_Str"";
  }
}",0.9904926534140016
147213,"@Override public void saveNBTData(NBTTagCompound compound){
  NBTTagList list=new NBTTagList();
  for (  LoreKey key : collectedLore) {
    NBTTagCompound tag=new NBTTagCompound();
    key.writeToNBT(tag);
    if (autoplayed.contains(tag)) {
      tag.setBoolean(""String_Node_Str"",true);
    }
    list.appendTag(tag);
  }
  compound.setTag(""String_Node_Str"",list);
}","@Override public void saveNBTData(NBTTagCompound compound){
  NBTTagList list=new NBTTagList();
  for (  LoreKey key : collectedLore) {
    NBTTagCompound tag=new NBTTagCompound();
    key.writeToNBT(tag);
    if (autoplayed.contains(key)) {
      tag.setBoolean(""String_Node_Str"",true);
    }
    list.appendTag(tag);
  }
  compound.setTag(""String_Node_Str"",list);
}",0.9918256130790192
147214,"@Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  loreScrap=new ItemLoreScrap().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(loreScrap,""String_Node_Str"");
  journal=new ItemJournal().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(journal,""String_Node_Str"");
  loreFolder=new File(event.getModConfigurationDirectory(),CONFIG_FOLDER + ""String_Node_Str"" + LORE_FOLDER);
  audioFolder=new File(loreFolder,AUDIO_FOLDER);
  if (!loreFolder.exists()) {
    loreFolder.mkdirs();
  }
  if (!audioFolder.exists()) {
    audioFolder.mkdir();
  }
  for (  File file : loreFolder.listFiles()) {
    if (FileHelper.isJSONFile(file)) {
      try {
        LoreLoader.INSTANCE.loadLore(file);
      }
 catch (      Exception ex) {
        logger.warn(String.format(""String_Node_Str"",file.getName()));
        ex.printStackTrace();
      }
    }
  }
  File tagFile=new File(event.getModConfigurationDirectory(),CONFIG_FOLDER + ""String_Node_Str"");
  if (tagFile.exists()) {
    LoreLoader.INSTANCE.loadLoreTags(tagFile);
  }
 else {
    try {
      LoreLoader.INSTANCE.saveDefaultLoreTags(tagFile);
    }
 catch (    IOException ex) {
      LoreExpansion.logger.warn(String.format(""String_Node_Str""));
    }
  }
  PacketHandler.init();
  FMLCommonHandler.instance().bus().register(new NetworkEventHandler());
  FMLCommonHandler.instance().bus().register(new PlayerTickHandler());
  proxy.preInit(event);
}","@Mod.EventHandler public void preInit(FMLPreInitializationEvent event){
  loreScrap=new ItemLoreScrap().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(loreScrap,""String_Node_Str"");
  journal=new ItemJournal().setUnlocalizedName(""String_Node_Str"");
  GameRegistry.registerItem(journal,""String_Node_Str"");
  configFolder=new File(event.getModConfigurationDirectory(),CONFIG_FOLDER);
  loreFolder=new File(configFolder,LORE_FOLDER);
  audioFolder=new File(loreFolder,AUDIO_FOLDER);
  if (!configFolder.exists()) {
    configFolder.mkdir();
  }
  if (!loreFolder.exists()) {
    loreFolder.mkdir();
  }
  if (!audioFolder.exists()) {
    audioFolder.mkdir();
  }
  LoreLoader.initialize();
  PacketHandler.init();
  FMLCommonHandler.instance().bus().register(new NetworkEventHandler());
  FMLCommonHandler.instance().bus().register(new PlayerTickHandler());
  proxy.preInit(event);
}",0.6530612244897959
147215,"@Override protected void mouseClicked(int x,int y,int button){
  if (button != 0) {
    return;
  }
  int left=(width - XSIZE) / 2;
  int top=(height - YSIZE) / 2;
  int startX=left + XSTART;
  int startY=top + YSTART;
  int mouseX=(x - startX);
  int mouseY=(y - startY);
  int dimension=FMLClientHandler.instance().getClient().theWorld.provider.dimensionId;
  for (  int page : loreCache) {
    LoreData data=LoreLoader.INSTANCE.getLore(page);
    if (data.validForDimension(dimension)) {
      int drawX=(((page - 1) % 4) * SLOT_GAP);
      int drawY=0;
      if ((page - 1) > 4) {
        drawY=(((page - 1) / 4) * SLOT_GAP);
      }
      if (inBounds(drawX,drawY,16,16,mouseX,mouseY)) {
        currentLore.clear();
        selectedLore=page;
        String[] lore=LoreLoader.INSTANCE.getLore(selectedLore).getLore(dimension).split(""String_Node_Str"");
        List<String> newList=new ArrayList<String>();
        for (int i=0; i < lore.length; i++) {
          String str=lore[i];
          if (!str.isEmpty()) {
            str=str.trim();
            str=str.replace(""String_Node_Str"",""String_Node_Str"");
            str=""String_Node_Str"" + str;
            newList.add(str);
            if (i != lore.length - 1) {
              newList.add(""String_Node_Str"");
            }
          }
        }
        for (        String str : newList) {
          currentLore.addAll(mc.fontRenderer.listFormattedStringToWidth(str,(int)(((XSIZE / 2) - 45) / SCALE)));
        }
        scrollIndex=0;
        break;
      }
    }
  }
  if (inBounds(left + XSIZE / 2 + 78,top + 37,13,16,x,y)) {
    scroll(-1);
  }
  if (inBounds(left + XSIZE / 2 + 78,top + 203,13,16,x,y)) {
    scroll(1);
  }
  LoreData data=null;
  if (selectedLore >= 0) {
    data=LoreLoader.INSTANCE.getLore(selectedLore);
  }
  if (data != null) {
    if (data.getSound(dimension).isPlaying()) {
      if (inBounds(left + XSIZE / 2 + 41,top + 204,5,5,x,y)) {
        data.getSound(dimension).stop();
      }
    }
 else {
      if (inBounds(left + XSIZE / 2 + 122,top + 203,4,7,x,y)) {
        data.getSound(dimension).start();
      }
    }
  }
}","@Override protected void mouseClicked(int x,int y,int button){
  if (button != 0) {
    return;
  }
  int left=(width - XSIZE) / 2;
  int top=(height - YSIZE) / 2;
  int startX=left + XSTART;
  int startY=top + YSTART;
  int mouseX=(x - startX);
  int mouseY=(y - startY);
  int dimension=FMLClientHandler.instance().getClient().theWorld.provider.dimensionId;
  for (  int page : loreCache) {
    LoreData data=LoreLoader.INSTANCE.getLore(page);
    if (data.validForDimension(dimension)) {
      int drawX=(((page - 1) % 4) * SLOT_GAP);
      int drawY=0;
      if ((page - 1) > 4) {
        drawY=(((page - 1) / 4) * SLOT_GAP);
      }
      if (inBounds(drawX,drawY,16,16,mouseX,mouseY)) {
        loadLore(page);
        scrollIndex=0;
        break;
      }
    }
  }
  if (inBounds(left + XSIZE / 2 + 78,top + 37,13,16,x,y)) {
    scroll(-1);
  }
  if (inBounds(left + XSIZE / 2 + 78,top + 203,13,16,x,y)) {
    scroll(1);
  }
  LoreData data=null;
  if (selectedLore >= 0) {
    data=LoreLoader.INSTANCE.getLore(selectedLore);
  }
  if (data != null) {
    if (data.getSound(dimension).isPlaying()) {
      if (inBounds(left + XSIZE / 2 + 41,top + 204,5,5,x,y)) {
        data.getSound(dimension).stop();
      }
    }
 else {
      if (inBounds(left + XSIZE / 2 + 122,top + 203,4,7,x,y)) {
        data.getSound(dimension).start();
      }
    }
  }
}",0.5051783659378596
147216,"@SubscribeEvent public void onClientTick(TickEvent.ClientTickEvent event){
  boolean shouldPreload=false;
  for (  LoreData data : LoreLoader.INSTANCE.getLore()) {
    if (data != null && data.shouldPreload()) {
      shouldPreload=true;
    }
  }
  if (shouldPreload) {
    LoreExpansion.logger.info(""String_Node_Str"");
    long startTime=System.nanoTime();
    for (    LoreData data : LoreLoader.INSTANCE.getLore()) {
      if (data != null) {
        data.preloadSounds();
      }
    }
    long endTime=System.nanoTime() - startTime;
    LoreExpansion.logger.info(""String_Node_Str"" + TimeUnit.SECONDS.convert(endTime,TimeUnit.NANOSECONDS) + ""String_Node_Str"");
  }
}","@SubscribeEvent public void onClientTick(TickEvent.ClientTickEvent event){
  if (preload) {
    LoreExpansion.logger.info(""String_Node_Str"");
    long startTime=System.nanoTime();
    for (    LoreData data : LoreLoader.INSTANCE.getLore()) {
      if (data != null) {
        data.preloadSounds();
      }
    }
    long endTime=System.nanoTime() - startTime;
    LoreExpansion.logger.info(""String_Node_Str"" + TimeUnit.SECONDS.convert(endTime,TimeUnit.NANOSECONDS) + ""String_Node_Str"");
    preload=false;
  }
}",0.1658206429780034
147217,"@Override public void processCommand(ICommandSender sender,String[] args){
  if (args.length != 1) {
    throw new WrongUsageException(getCommandUsage(sender));
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    LoreLoader.INSTANCE.clear();
    LoreLoader.initialize();
    sender.addChatMessage(new ChatComponentText(""String_Node_Str""));
    sender.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + ""String_Node_Str""));
  }
}","@Override public void processCommand(ICommandSender sender,String[] args){
  if (args.length != 1) {
    throw new WrongUsageException(getCommandUsage(sender));
  }
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    sender.addChatMessage(new ChatComponentText(""String_Node_Str""));
    LoreLoader.INSTANCE.clear();
    LoreLoader.initialize();
    sender.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + ""String_Node_Str""));
  }
}",0.8459821428571429
147218,"@Override protected InputStream getInputStreamByName(String name) throws IOException {
  return new BufferedInputStream(new FileInputStream(new File(this.resourcePackFile,this.name + ""String_Node_Str"")));
}","@Override protected InputStream getInputStreamByName(String name){
  try {
    return new BufferedInputStream(new FileInputStream(new File(this.resourcePackFile,this.name + ""String_Node_Str"")));
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return null;
  }
}",0.3866943866943867
147219,"@Override public InputStream getInputStream(ResourceLocation location) throws IOException {
  return getInputStreamByName(location.getResourcePath().replace(""String_Node_Str"",""String_Node_Str""));
}","@Override public InputStream getInputStream(ResourceLocation location){
  return getInputStreamByName(location.getResourcePath().replace(""String_Node_Str"",""String_Node_Str""));
}",0.946524064171123
147220,"@Override public Command getCurrentCommand(){
  return program.getCommands().get(location);
}","@Override public Command getCurrentCommand(){
  if (location >= program.getCommands().size()) {
    return null;
  }
  return program.getCommands().get(location);
}",0.7237354085603113
147221,"@Override public void setOutput(Writer output){
  this.output=output;
}","@Override public void setOutput(Writer output){
  if (output instanceof PrintWriter) {
    this.output=(PrintWriter)output;
  }
 else {
    this.output=new PrintWriter(output,true);
  }
}",0.5503875968992248
147222,"@Override public Writer getOutput(){
  return output;
}","@Override public PrintWriter getOutput(){
  return output;
}",0.9565217391304348
147223,Writer getOutput();,PrintWriter getOutput();,0.8837209302325582
147224,"public static void generateModel(KieBuilder kieBuilder){
  Collection<KnowledgePackage> pkgs=((MemoryKieModule)kieBuilder.getKieModule()).getKnowledgePackagesForKieBase(""String_Node_Str"");
  for (  KnowledgePackage pkg : pkgs) {
    for (    org.kie.api.definition.rule.Rule rule : pkg.getRules()) {
      RuleContext context=new RuleContext();
      GroupElement lhs=((RuleImpl)rule).getLhs();
      visit(context,lhs);
    }
  }
}","public static void generateModel(KieBuilder kieBuilder){
  Collection<KiePackage> pkgs=((MemoryKieModule)kieBuilder.getKieModule()).getKnowledgePackagesForKieBase(""String_Node_Str"");
  for (  KiePackage pkg : pkgs) {
    for (    org.kie.api.definition.rule.Rule rule : pkg.getRules()) {
      RuleContext context=new RuleContext();
      GroupElement lhs=((RuleImpl)rule).getLhs();
      visit(context,lhs);
    }
  }
}",0.9812206572769951
147225,"@EventHandler public void onGameJoin(GameJoinEvent event){
  Game<HostedFFAState> game=game(event);
  if (game == null) {
    return;
  }
  HostedFFAState state=game.getState();
  Player p=event.getPlayer();
  if (state.isStarted()) {
    game.getGameplay().sendGameMessage(p,""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"");
    return;
  }
  if (state.hasPlayer(p)) {
    game.getGameplay().sendGameMessage(p,""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"");
    return;
  }
  if (game.getGameMaster() instanceof Host && p.getUniqueId().equals(((Host)game.getGameMaster()).getHost())) {
    game.getGameplay().sendGameMessage(p,""String_Node_Str"");
    return;
  }
  state.addPlayer(p);
  getGameplay().sendBanner(p,""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"",""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"");
}","@EventHandler public void onGameJoin(GameJoinEvent event){
  Game<HostedFFAState> game=game(event);
  if (game == null) {
    return;
  }
  HostedFFAState state=game.getState();
  Player p=event.getPlayer();
  if (state.isStarted()) {
    game.getGameplay().sendGameMessage(p,""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"");
    return;
  }
  if (state.hasPlayer(p)) {
    game.getGameplay().sendGameMessage(p,""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"");
    return;
  }
  if (game.getGameMaster() instanceof Host && p.getUniqueId().equals(((Host)game.getGameMaster()).getUniqueId())) {
    game.getGameplay().sendGameMessage(p,""String_Node_Str"");
    return;
  }
  state.addPlayer(p);
  getGameplay().sendBanner(p,""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"",""String_Node_Str"" + getGameplay().getId() + ""String_Node_Str"");
}",0.9931350114416476
147226,"/** 
 * Returns the model if the add was successful
 * @param id
 * @param model
 * @return
 */
protected T add(T model){
  if (has(model.getId())) {
    return null;
  }
  map.put(model.getId(),model);
  return model;
}","/** 
 * Returns the model if the add was successful
 * @param id
 * @param model
 * @return
 */
protected void add(T model){
  map.put(model.getId(),model);
}",0.8148148148148148
147227,"public Arena create(Region r){
  Arena a=new Arena(r.getId(),r);
  return add(a);
}","public Arena create(Region r){
  Arena a=new Arena(r.getId(),r);
  if (has(r.getId())) {
    return null;
  }
  add(a);
  return a;
}",0.7685185185185185
147228,"@Override public Region findById(String id){
  Region r=super.findById(id);
  if (r == null) {
    String[] split=id.split(""String_Node_Str"");
    World world=Bukkit.getWorld(split[0]);
    if (world == null) {
      return null;
    }
    ProtectedRegion region=WorldGuardPlugin.inst().getRegionManager(world).getRegion(split[1]);
    if (region == null) {
      return null;
    }
    r=new Region(id,world,region);
    add(r);
  }
  return r;
}","@Override public Region findById(String id){
  Region r=super.findById(id);
  if (r == null) {
    String[] split=id.split(""String_Node_Str"");
    World world=Bukkit.getWorld(split[0]);
    if (world == null) {
      return null;
    }
    ProtectedRegion region=WorldGuardPlugin.inst().getRegionManager(world).getRegion(split[1]);
    if (region == null) {
      return null;
    }
    r=create(world,region);
  }
  return r;
}",0.9417142857142856
147229,"public Region create(World world,ProtectedRegion pr){
  return add(new Region(id(world,pr),world,pr));
}","public Region create(World world,ProtectedRegion pr){
  Region r=new Region(id(world,pr),world,pr);
  add(r);
  return r;
}",0.8458149779735683
147230,"public String toString(){
  int pos=parser.getPos();
  String src=parser.getSource();
  int show=Math.min(src.length() - pos,10);
  return this.getMessage() + ""String_Node_Str"" + src.substring(pos,pos + show)+ ""String_Node_Str"";
}","public String toString(){
  int line=parser.getLine();
  String src=parser.getSource();
  String[] lines=src.split(""String_Node_Str"");
  StringBuilder buf=new StringBuilder();
  buf.append(this.getMessage() + ""String_Node_Str"" + parser.getFileName()+ ""String_Node_Str""+ line);
  buf.append(""String_Node_Str"");
  for (int i=Math.max(0,line - 3); i < Math.min(lines.length - 1,line + 3); ++i) {
    buf.append(lines[i] + ""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}",0.2650273224043716
147231,"public int getPos(){
  return this.pos;
}","int getPos(){
  return this.pos;
}",0.9066666666666666
147232,"private void lexTagBody(String string,List<Token> tokens){
  while (pos < string.length()) {
    Matcher matcher=closeTagRe.matcher(string.substring(pos));
    if (matcher.find()) {
      pos+=matcher.group(0).length();
      mode=LexerMode.IN_RAW;
      return;
    }
 else {
switch (string.charAt(pos)) {
case '\n':
        ++lineNumber;
      ++pos;
    break;
case ' ':
case '\t':
  ++pos;
break;
case '+':
tokens.add(this.createToken(TokenType.PLUS));
++pos;
break;
case '<':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '=') {
tokens.add(this.createToken(TokenType.LE));
pos+=2;
}
 else {
tokens.add(this.createToken(TokenType.LT));
pos++;
}
}
 else {
tokens.add(this.createToken(TokenType.LT));
++pos;
}
break;
case '>':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '=') {
tokens.add(this.createToken(TokenType.GE));
pos+=2;
}
 else {
tokens.add(this.createToken(TokenType.GT));
pos++;
}
}
 else {
tokens.add(this.createToken(TokenType.GT));
++pos;
}
break;
case '_':
tokens.add(this.createToken(TokenType.CONCAT));
++pos;
break;
case '%':
tokens.add(this.createToken(TokenType.MODULO));
++pos;
break;
case '*':
tokens.add(this.createToken(TokenType.MUL));
++pos;
break;
case '-':
tokens.add(this.createToken(TokenType.MINUS));
++pos;
break;
case '/':
tokens.add(this.createToken(TokenType.DIVIDE));
++pos;
break;
case '!':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '=') {
tokens.add(this.createToken(TokenType.NE));
++pos;
++pos;
}
 else {
tokens.add(this.createToken(TokenType.NOT));
++pos;
}
}
 else {
tokens.add(this.createToken(TokenType.NOT));
++pos;
}
break;
case '|':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '|') {
tokens.add(this.createToken(TokenType.OROR));
++pos;
++pos;
}
 else {
tokens.add(this.createToken(TokenType.PIPE));
++pos;
}
}
 else {
tokens.add(this.createToken(TokenType.PIPE));
++pos;
}
break;
case '&':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '&') {
tokens.add(this.createToken(TokenType.ANDAND));
++pos;
++pos;
}
 else {
throw this.createError(""String_Node_Str"");
}
}
 else {
throw this.createError(""String_Node_Str"");
}
break;
case '.':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '.') {
tokens.add(this.createToken(TokenType.RANGE));
++pos;
++pos;
}
 else {
tokens.add(this.createToken(TokenType.DOT));
++pos;
}
}
 else {
tokens.add(this.createToken(TokenType.DOT));
++pos;
}
break;
case '[':
tokens.add(this.createToken(TokenType.LBRACKET));
++pos;
break;
case ']':
tokens.add(this.createToken(TokenType.RBRACKET));
++pos;
break;
case '{':
tokens.add(this.createToken(TokenType.LBRACE));
++pos;
break;
case '?':
tokens.add(this.createToken(TokenType.QUESTION));
++pos;
break;
case ':':
tokens.add(this.createToken(TokenType.KOLON));
++pos;
break;
case '}':
tokens.add(this.createToken(TokenType.RBRACE));
++pos;
break;
case '(':
tokens.add(this.createToken(TokenType.LPAREN));
++pos;
break;
case ')':
tokens.add(this.createToken(TokenType.RPAREN));
++pos;
break;
case ',':
tokens.add(this.createToken(TokenType.COMMA));
++pos;
break;
case '=':
if (pos + 1 < string.length()) {
if (source.substring(pos).startsWith(""String_Node_Str"")) {
tokens.add(this.createToken(TokenType.EQAULS));
pos+=2;
}
 else if (source.substring(pos).startsWith(""String_Node_Str"")) {
tokens.add(this.createToken(TokenType.ARROW));
pos+=2;
}
 else {
tokens.add(this.createToken(TokenType.ASSIGN));
++pos;
}
}
 else {
throw this.createError(""String_Node_Str"");
}
break;
case '""':
tokens.add(this.lexDqString());
break;
case '\'':
tokens.add(this.lexSqString());
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
tokens.add(lexNumber(string));
break;
case '$':
++pos;
tokens.add(lexDollarVar());
break;
case '#':
{
lexLineComment();
break;
}
default :
tokens.add(lexOthers());
break;
}
}
}
}","private void lexTagBody(String string,List<Token> tokens){
  while (pos < string.length()) {
    Matcher matcher=closeTagRe.matcher(string.substring(pos));
    if (matcher.find()) {
      pos+=matcher.group(0).length();
      mode=LexerMode.IN_RAW;
      return;
    }
 else {
switch (string.charAt(pos)) {
case '\n':
        ++lineNumber;
      ++pos;
    break;
case ' ':
case '\t':
  ++pos;
break;
case '+':
tokens.add(this.createToken(TokenType.PLUS));
++pos;
break;
case '<':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '=') {
tokens.add(this.createToken(TokenType.LE));
pos+=2;
}
 else {
tokens.add(this.createToken(TokenType.LT));
pos++;
}
}
 else {
tokens.add(this.createToken(TokenType.LT));
++pos;
}
break;
case '>':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '=') {
tokens.add(this.createToken(TokenType.GE));
pos+=2;
}
 else {
tokens.add(this.createToken(TokenType.GT));
pos++;
}
}
 else {
tokens.add(this.createToken(TokenType.GT));
++pos;
}
break;
case '_':
tokens.add(this.createToken(TokenType.CONCAT));
++pos;
break;
case '%':
tokens.add(this.createToken(TokenType.MODULO));
++pos;
break;
case '*':
tokens.add(this.createToken(TokenType.MUL));
++pos;
break;
case '-':
tokens.add(this.createToken(TokenType.MINUS));
++pos;
break;
case '/':
tokens.add(this.createToken(TokenType.DIVIDE));
++pos;
break;
case '!':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '=') {
tokens.add(this.createToken(TokenType.NE));
++pos;
++pos;
}
 else {
tokens.add(this.createToken(TokenType.NOT));
++pos;
}
}
 else {
tokens.add(this.createToken(TokenType.NOT));
++pos;
}
break;
case '|':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '|') {
tokens.add(this.createToken(TokenType.OROR));
++pos;
++pos;
}
 else {
tokens.add(this.createToken(TokenType.PIPE));
++pos;
}
}
 else {
tokens.add(this.createToken(TokenType.PIPE));
++pos;
}
break;
case '&':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '&') {
tokens.add(this.createToken(TokenType.ANDAND));
++pos;
++pos;
}
 else {
throw this.createError(""String_Node_Str"");
}
}
 else {
throw this.createError(""String_Node_Str"");
}
break;
case '.':
if (pos + 1 < string.length()) {
if (string.charAt(pos + 1) == '.') {
tokens.add(this.createToken(TokenType.RANGE));
++pos;
++pos;
}
 else {
tokens.add(this.createToken(TokenType.DOT));
++pos;
}
}
 else {
tokens.add(this.createToken(TokenType.DOT));
++pos;
}
break;
case '[':
tokens.add(this.createToken(TokenType.LBRACKET));
++pos;
break;
case ']':
tokens.add(this.createToken(TokenType.RBRACKET));
++pos;
break;
case '{':
tokens.add(this.createToken(TokenType.LBRACE));
++pos;
break;
case '?':
tokens.add(this.createToken(TokenType.QUESTION));
++pos;
break;
case ':':
tokens.add(this.createToken(TokenType.KOLON));
++pos;
break;
case '}':
tokens.add(this.createToken(TokenType.RBRACE));
++pos;
break;
case '(':
tokens.add(this.createToken(TokenType.LPAREN));
++pos;
break;
case ')':
tokens.add(this.createToken(TokenType.RPAREN));
++pos;
break;
case ',':
tokens.add(this.createToken(TokenType.COMMA));
++pos;
break;
case '=':
if (pos + 1 < string.length()) {
if (source.substring(pos).startsWith(""String_Node_Str"")) {
tokens.add(this.createToken(TokenType.EQUALS));
pos+=2;
}
 else if (source.substring(pos).startsWith(""String_Node_Str"")) {
tokens.add(this.createToken(TokenType.ARROW));
pos+=2;
}
 else {
tokens.add(this.createToken(TokenType.ASSIGN));
++pos;
}
}
 else {
throw this.createError(""String_Node_Str"");
}
break;
case '""':
tokens.add(this.lexDqString());
break;
case '\'':
tokens.add(this.lexSqString());
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
tokens.add(lexNumber(string));
break;
case '$':
++pos;
tokens.add(lexDollarVar());
break;
case '#':
{
lexLineComment();
break;
}
default :
tokens.add(lexOthers());
break;
}
}
}
}",0.9997422680412372
147233,"public Node parseEqualityExpr() throws ParserError {
  Node n=parseComparationExpr();
  if (n != null) {
    while (true) {
      if (EAT(TokenType.EQAULS)) {
        Node rhs=parseComparationExpr();
        if (rhs == null) {
          throw new ParserError(""String_Node_Str"",this);
        }
        List<Node> children=new ArrayList<>();
        children.add(n);
        children.add(rhs);
        n=new Node(NodeType.EQAULS,children);
      }
 else       if (EAT(TokenType.NE)) {
        Node rhs=parseComparationExpr();
        if (rhs == null) {
          throw new ParserError(""String_Node_Str"",this);
        }
        n=new Node(NodeType.NE,n,rhs);
      }
      break;
    }
  }
  return n;
}","public Node parseEqualityExpr() throws ParserError {
  Node n=parseComparationExpr();
  if (n != null) {
    while (true) {
      if (EAT(TokenType.EQUALS)) {
        Node rhs=parseComparationExpr();
        if (rhs == null) {
          throw new ParserError(""String_Node_Str"",this);
        }
        List<Node> children=new ArrayList<>();
        children.add(n);
        children.add(rhs);
        n=new Node(NodeType.EQUALS,children);
      }
 else       if (EAT(TokenType.NE)) {
        Node rhs=parseComparationExpr();
        if (rhs == null) {
          throw new ParserError(""String_Node_Str"",this);
        }
        n=new Node(NodeType.NE,n,rhs);
      }
      break;
    }
  }
  return n;
}",0.9971509971509972
147234,"@Test public void testEquals() throws JSlateException, IOException, ParserError, TemplateLoadingError {
  Map<String,Object> vars=new HashMap<>();
  IrepBuilder builder=new IrepBuilder();
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.add(OP.EQAULS);
  builder.add(OP.APPEND);
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.add(OP.EQAULS);
  builder.add(OP.APPEND);
  builder.add(OP.RETURN);
  Irep irep=builder.build();
  String got=vm.run(irep,vars);
  assertEquals(""String_Node_Str"",got);
}","@Test public void testEquals() throws JSlateException, IOException, ParserError, TemplateLoadingError {
  Map<String,Object> vars=new HashMap<>();
  IrepBuilder builder=new IrepBuilder();
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.add(OP.EQUALS);
  builder.add(OP.APPEND);
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.addPool(OP.LOAD_CONST,""String_Node_Str"");
  builder.add(OP.EQUALS);
  builder.add(OP.APPEND);
  builder.add(OP.RETURN);
  Irep irep=builder.build();
  String got=vm.run(irep,vars);
  assertEquals(""String_Node_Str"",got);
}",0.9968102073365231
147235,"@Override public boolean onTouchEvent(MotionEvent event){
  if (lockScrollWhileRefreshing && (state == State.REFRESHING || getAnimation() != null && !getAnimation().hasEnded())) {
    return true;
  }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    if (getFirstVisiblePosition() == 0) {
      previousY=event.getY();
    }
 else {
      previousY=-1;
    }
  mScrollStartY=event.getY();
break;
case MotionEvent.ACTION_UP:
if (previousY != -1 && (state == State.RELEASE_TO_REFRESH || getFirstVisiblePosition() == 0)) {
switch (state) {
case RELEASE_TO_REFRESH:
  setState(State.REFRESHING);
bounceBackHeader();
break;
case PULL_TO_REFRESH:
resetHeader();
break;
}
}
break;
case MotionEvent.ACTION_MOVE:
if (previousY != -1 && getFirstVisiblePosition() == 0 && Math.abs(mScrollStartY - event.getY()) > IDLE_DISTANCE) {
float y=event.getY();
float diff=y - previousY;
if (diff > 0) diff/=PULL_RESISTANCE;
previousY=y;
int newHeaderPadding=Math.max(Math.round(headerPadding + diff),-header.getHeight());
if (newHeaderPadding != headerPadding && state != State.REFRESHING) {
setHeaderPadding(newHeaderPadding);
if (state == State.PULL_TO_REFRESH && headerPadding > 0) {
setState(State.RELEASE_TO_REFRESH);
image.clearAnimation();
image.startAnimation(flipAnimation);
}
 else if (state == State.RELEASE_TO_REFRESH && headerPadding < 0) {
setState(State.PULL_TO_REFRESH);
image.clearAnimation();
image.startAnimation(reverseFlipAnimation);
}
}
}
break;
}
return super.onTouchEvent(event);
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (lockScrollWhileRefreshing && (state == State.REFRESHING || getAnimation() != null && !getAnimation().hasEnded())) {
    return true;
  }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    if (getFirstVisiblePosition() == 0) {
      previousY=event.getY();
    }
 else {
      previousY=-1;
    }
  mScrollStartY=event.getY();
break;
case MotionEvent.ACTION_UP:
if (previousY != -1 && (state == State.RELEASE_TO_REFRESH || getFirstVisiblePosition() == 0)) {
switch (state) {
case RELEASE_TO_REFRESH:
  setState(State.REFRESHING);
bounceBackHeader();
break;
case PULL_TO_REFRESH:
resetHeader();
break;
}
}
previousY=event.getY();
break;
case MotionEvent.ACTION_MOVE:
if (previousY != -1 && getFirstVisiblePosition() == 0 && Math.abs(mScrollStartY - event.getY()) > IDLE_DISTANCE) {
float y=event.getY();
float diff=y - previousY;
if (diff > 0) diff/=PULL_RESISTANCE;
previousY=y;
int newHeaderPadding=Math.max(Math.round(headerPadding + diff),-header.getHeight());
if (newHeaderPadding != headerPadding && state != State.REFRESHING) {
setHeaderPadding(newHeaderPadding);
if (state == State.PULL_TO_REFRESH && headerPadding > 0) {
setState(State.RELEASE_TO_REFRESH);
image.clearAnimation();
image.startAnimation(flipAnimation);
}
 else if (state == State.RELEASE_TO_REFRESH && headerPadding < 0) {
setState(State.PULL_TO_REFRESH);
image.clearAnimation();
image.startAnimation(reverseFlipAnimation);
}
}
}
break;
}
return super.onTouchEvent(event);
}",0.9920529801324504
147236,"@Override public View getItemView(final NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=buildViewHolder(newsItem.getItemType());
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
    viewHolder.profileImage.setImageResource(R.drawable.default_feed_icon);
    viewHolder.patient=null;
    viewHolder.itemType=newsItem.getItemType();
  }
switch (newsItem.getItemType()) {
case CAMPAIGN_CONTENT:
    convertView=getCampaignContentItemView(newsItem,convertView,parent);
  break;
case ON_BOARDED:
convertView=getOnBoardedItemView(newsItem,convertView,parent);
break;
case FULLY_FUNDED:
convertView=getFullyFundedItemView(newsItem,convertView,parent);
break;
case DONATION_RAISED:
convertView=getDonationRaisedItemView(newsItem,convertView,parent);
break;
}
return convertView;
}","@Override public View getItemView(final NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=buildViewHolder(newsItem.getItemType());
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
    viewHolder.profileImage.setImageResource(R.drawable.default_feed_icon);
    viewHolder.patient=null;
    viewHolder.itemType=newsItem.getItemType();
  }
switch (newsItem.getItemType()) {
case CAMPAIGN_CONTENT:
    convertView=getCampaignContentItemView(newsItem,convertView,parent);
  viewHolder.donationProgress.setVisibility(View.INVISIBLE);
break;
case ON_BOARDED:
convertView=getOnBoardedItemView(newsItem,convertView,parent);
viewHolder.donationProgress.setVisibility(View.VISIBLE);
break;
case FULLY_FUNDED:
convertView=getFullyFundedItemView(newsItem,convertView,parent);
viewHolder.donationProgress.setVisibility(View.VISIBLE);
break;
case DONATION_RAISED:
convertView=getDonationRaisedItemView(newsItem,convertView,parent);
viewHolder.donationProgress.setVisibility(View.VISIBLE);
break;
}
return convertView;
}",0.8830111902339777
147237,"private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  viewHolder.shortDescription.setText(R.string.makeDifference);
  viewHolder.message.setText(newsItem.getCampaignContent());
  viewHolder.shareableItem=Util.getUniversalShareableItem();
  viewHolder.donationProgress.setVisibility(View.INVISIBLE);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.VISIBLE);
  convertView.setTag(viewHolder);
  setShareListeners(viewHolder);
  setPatientFundButton(viewHolder.donateView,viewHolder.shareableItem);
  return convertView;
}","private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  viewHolder.shortDescription.setText(R.string.makeDifference);
  viewHolder.message.setText(newsItem.getCampaignContent());
  viewHolder.shareableItem=Util.getUniversalShareableItem();
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.VISIBLE);
  convertView.setTag(viewHolder);
  setShareListeners(viewHolder);
  setPatientFundButton(viewHolder.donateView,viewHolder.shareableItem);
  return convertView;
}",0.8345679012345679
147238,"public void setEmail(){
  Request.newMeRequest(ParseFacebookUtils.getSession(),new Request.GraphUserCallback(){
    @Override public void onCompleted(    GraphUser user,    Response response){
      ImageLoader imgImageLoader=ImageLoader.getInstance();
      imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
      donarFullName.setText(user.getName());
    }
  }
).executeAsync();
}","public void setEmail(){
  Request.newMeRequest(ParseFacebookUtils.getSession(),new Request.GraphUserCallback(){
    @Override public void onCompleted(    GraphUser user,    Response response){
      ImageLoader imgImageLoader=ImageLoader.getInstance();
      imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
      String email=user.asMap().get(""String_Node_Str"").toString();
      showDonorInformaiton(user.getName(),email,true);
    }
  }
).executeAsync();
}",0.7880724174653887
147239,"@Override public void onCompleted(GraphUser user,Response response){
  ImageLoader imgImageLoader=ImageLoader.getInstance();
  imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
  donarFullName.setText(user.getName());
}","@Override public void onCompleted(GraphUser user,Response response){
  ImageLoader imgImageLoader=ImageLoader.getInstance();
  imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
  String email=user.asMap().get(""String_Node_Str"").toString();
  showDonorInformaiton(user.getName(),email,true);
}",0.8138385502471169
147240,"/** 
 * Shows the profile of the given user.
 * @param user
 */
private void showProfile(ParseUser user){
  if (user != null) {
    String fullName=user.getString(""String_Node_Str"");
    String email=user.getString(""String_Node_Str"");
    getActionBar().setTitle(""String_Node_Str"");
    ParseHelper parseHelper=new ParseHelper(getApplicationContext());
    ParseQuery<Donor> query=parseHelper.findDonorByEmail(email);
    try {
      donor=query.getFirst();
    }
 catch (    ParseException exp) {
      exp.printStackTrace();
    }
    boolean isFacebookLinkedUser=ParseFacebookUtils.isLinked(user);
    email=user.getString(""String_Node_Str"");
    if (isFacebookLinkedUser) {
      setEmail();
    }
 else {
      donarFullName.setText(fullName);
      memberSinceDate.setText(Util.getFormatedDate(user.getCreatedAt()));
    }
    if (donor != null) {
      showDetailsForDonor(isFacebookLinkedUser);
    }
 else {
      showDetailsForNonDonor();
    }
  }
}","/** 
 * Shows the profile of the given user.
 * @param user
 */
private void showProfile(ParseUser user){
  if (user != null) {
    String fullName=user.getString(""String_Node_Str"");
    String email=user.getString(""String_Node_Str"");
    getActionBar().setTitle(""String_Node_Str"");
    boolean isFacebookLinkedUser=ParseFacebookUtils.isLinked(user);
    email=user.getString(""String_Node_Str"");
    if (isFacebookLinkedUser) {
      setEmail();
    }
 else {
      showDonorInformaiton(fullName,email,false);
    }
  }
}",0.6549628629304524
147241,"@Override public View getItemView(final NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=buildViewHolder(newsItem.getItemType());
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
    viewHolder.profileImage.setImageResource(R.drawable.default_feed_icon);
    viewHolder.patient=null;
    viewHolder.itemType=newsItem.getItemType();
  }
switch (newsItem.getItemType()) {
case CAMPAIGN_CONTENT:
    convertView=getCampaignContentItemView(newsItem,convertView,parent);
  break;
case ON_BOARDED:
convertView=getOnBoardedItemView(newsItem,convertView,parent);
break;
case FULLY_FUNDED:
convertView=getFullyFundedItemView(newsItem,convertView,parent);
break;
case DONATION_RAISED:
convertView=getDonationRaisedItemView(newsItem,convertView,parent);
break;
}
return convertView;
}","@Override public View getItemView(final NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=buildViewHolder(newsItem.getItemType());
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
    viewHolder.profileImage.setImageResource(R.drawable.default_feed_icon);
    viewHolder.patient=null;
    viewHolder.itemType=newsItem.getItemType();
  }
switch (newsItem.getItemType()) {
case CAMPAIGN_CONTENT:
    convertView=getCampaignContentItemView(newsItem,convertView,parent);
  viewHolder.donationProgress.setVisibility(View.INVISIBLE);
break;
case ON_BOARDED:
convertView=getOnBoardedItemView(newsItem,convertView,parent);
viewHolder.donationProgress.setVisibility(View.VISIBLE);
break;
case FULLY_FUNDED:
convertView=getFullyFundedItemView(newsItem,convertView,parent);
viewHolder.donationProgress.setVisibility(View.VISIBLE);
break;
case DONATION_RAISED:
convertView=getDonationRaisedItemView(newsItem,convertView,parent);
viewHolder.donationProgress.setVisibility(View.VISIBLE);
break;
}
return convertView;
}",0.8830111902339777
147242,"private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  viewHolder.shortDescription.setText(R.string.makeDifference);
  viewHolder.message.setText(newsItem.getCampaignContent());
  viewHolder.shareableItem=Util.getUniversalShareableItem();
  viewHolder.donationProgress.setVisibility(View.INVISIBLE);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.VISIBLE);
  viewHolder.donateView.setOnClickListener(null);
  convertView.setTag(viewHolder);
  setShareListeners(viewHolder);
  setPatientFundButton(viewHolder.donateView,viewHolder.shareableItem);
  return convertView;
}","private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  viewHolder.shortDescription.setText(R.string.makeDifference);
  viewHolder.message.setText(newsItem.getCampaignContent());
  viewHolder.shareableItem=Util.getUniversalShareableItem();
  viewHolder.donationProgress.setVisibility(View.INVISIBLE);
  viewHolder.donateView.setVisibility(View.VISIBLE);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.VISIBLE);
  viewHolder.donateView.setOnClickListener(null);
  convertView.setTag(viewHolder);
  setShareListeners(viewHolder);
  setPatientFundButton(viewHolder.donateView,viewHolder.shareableItem);
  viewHolder.message.setMaxLines(20);
  viewHolder.message.setEllipsize(TextUtils.TruncateAt.END);
  return convertView;
}",0.8337696335078534
147243,"private void setupUI(View convertView,ViewHolder viewHolder,String photoUrl,String shortDescription,String message){
  viewHolder.profileImage.setImageResource(android.R.color.transparent);
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(photoUrl,viewHolder.profileImage);
  viewHolder.shortDescription.setText(shortDescription);
  viewHolder.message.setText(message);
  int donationProgressPecentage=viewHolder.patient.getDonationProgressPecentage();
  viewHolder.donationProgress.setProgress(donationProgressPecentage);
  Drawable progressDrawable=null;
  if (viewHolder.patient.isFullyFunded()) {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.fully_funded_progressbar);
    viewHolder.donateView.setVisibility(View.GONE);
  }
 else {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.progressbar);
    viewHolder.donationProgress.setVisibility(View.VISIBLE);
    viewHolder.donateView.setVisibility(View.VISIBLE);
  }
  viewHolder.donationProgress.setProgressDrawable(progressDrawable);
  setPatientNavigation(convertView,viewHolder.patient,viewHolder.itemType);
  setPatientFundButton(viewHolder.donateView,viewHolder.patient);
  setShareListeners(viewHolder);
}","private void setupUI(View convertView,ViewHolder viewHolder,String photoUrl,String shortDescription,String message){
  viewHolder.profileImage.setImageResource(android.R.color.transparent);
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(photoUrl,viewHolder.profileImage);
  viewHolder.shortDescription.setText(shortDescription);
  if (viewHolder.itemType != ItemType.CAMPAIGN_CONTENT) {
    viewHolder.message.setMaxLines(3);
    viewHolder.message.setEllipsize(TextUtils.TruncateAt.END);
  }
  viewHolder.message.setText(message);
  int donationProgressPecentage=viewHolder.patient.getDonationProgressPecentage();
  viewHolder.donationProgress.setProgress(donationProgressPecentage);
  Drawable progressDrawable=null;
  if (viewHolder.patient.isFullyFunded()) {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.fully_funded_progressbar);
    viewHolder.donateView.setVisibility(View.INVISIBLE);
  }
 else {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.progressbar);
    viewHolder.donationProgress.setVisibility(View.VISIBLE);
    viewHolder.donateView.setVisibility(View.VISIBLE);
  }
  viewHolder.donationProgress.setProgressDrawable(progressDrawable);
  setPatientNavigation(convertView,viewHolder.patient,viewHolder.itemType);
  setPatientFundButton(viewHolder.donateView,viewHolder.patient);
  setShareListeners(viewHolder);
}",0.8027057497181511
147244,"@Override public void onClick(View v){
  Intent intent=Util.getFundTreatmentIntent(getActivity(),patientObj,new BigDecimal(""String_Node_Str""));
  startActivityForResult(intent,0);
}","@Override public void onClick(View v){
  Intent intent=Util.getFundTreatmentIntent((BaseFragmentActivity)getActivity(),patientObj,new BigDecimal(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  startActivityForResult(intent,0);
}",0.861904761904762
147245,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final boolean isFullyFunded=patientObj.isFullyFunded();
  View view=inflater.inflate(R.layout.fragment_new_patient_detail,container,false);
  profileInfo=(LinearLayout)view.findViewById(R.id.profileInfo);
  donateAndShare=(LinearLayout)view.findViewById(R.id.donateAndShare);
  divder_down=(View)view.findViewById(R.id.divder_down);
  fullyFundedCheckMark=(ImageView)view.findViewById(R.id.isFullyFunded);
  donationToGo=(TextView)view.findViewById(R.id.donationToGo);
  story=(TextView)view.findViewById(R.id.patientStory);
  Util.applyPrimaryFont(getActivity(),story);
  getActivity().getActionBar().setTitle(patientObj.getFullName());
  shareAction=(ImageView)view.findViewById(R.id.shareIv);
  shareOnFacebook=(ImageView)view.findViewById(R.id.share_fb);
  donateView=(ImageView)view.findViewById(R.id.fund_treatment);
  shareOnTwitter=(ImageView)view.findViewById(R.id.share_tw);
  story.setText(patientObj.getStory().replace(""String_Node_Str"",""String_Node_Str""));
  shareAction.setTag(patientObj);
  shareAction.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startShareIntent(getActivity(),(Patient)v.getTag());
    }
  }
);
  shareOnTwitter.setTag(patientObj);
  shareOnTwitter.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startShareIntentWithTwitter(getActivity(),(Patient)v.getTag());
    }
  }
);
  shareOnFacebook.setTag(patientObj);
  shareOnFacebook.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startShareIntentWithFaceBook(getActivity(),(Patient)v.getTag());
    }
  }
);
  if (isFullyFunded) {
    fullyFundedCheckMark.setVisibility(View.VISIBLE);
    donateView.setVisibility(View.INVISIBLE);
  }
 else {
    Util.applyPrimaryFont(getActivity(),donationToGo);
    donationToGo.setText(Util.formatAmount(patientObj.getDonationToGo()) + ""String_Node_Str"");
    donateView.setVisibility(View.VISIBLE);
    donateView.setTag(patientObj);
    donateView.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent intent=Util.getFundTreatmentIntent(getActivity(),patientObj,new BigDecimal(""String_Node_Str""));
        startActivityForResult(intent,0);
      }
    }
);
  }
  mAdapter=new TestFragmentAdapter(getActivity().getSupportFragmentManager());
  mPager=(ViewPager)view.findViewById(R.id.pager);
  mPager.setAdapter(mAdapter);
  mIndicator=(CirclePageIndicator)view.findViewById(R.id.indicator);
  mIndicator.setViewPager(mPager);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final boolean isFullyFunded=patientObj.isFullyFunded();
  View view=inflater.inflate(R.layout.fragment_new_patient_detail,container,false);
  profileInfo=(LinearLayout)view.findViewById(R.id.profileInfo);
  donateAndShare=(LinearLayout)view.findViewById(R.id.donateAndShare);
  divder_down=(View)view.findViewById(R.id.divder_down);
  fullyFundedCheckMark=(ImageView)view.findViewById(R.id.isFullyFunded);
  donationToGo=(TextView)view.findViewById(R.id.donationToGo);
  story=(TextView)view.findViewById(R.id.patientStory);
  Util.applyPrimaryFont(getActivity(),story);
  getActivity().getActionBar().setTitle(patientObj.getFullName());
  shareAction=(ImageView)view.findViewById(R.id.shareIv);
  shareOnFacebook=(ImageView)view.findViewById(R.id.share_fb);
  donateView=(ImageView)view.findViewById(R.id.fund_treatment);
  shareOnTwitter=(ImageView)view.findViewById(R.id.share_tw);
  story.setText(patientObj.getStory().replace(""String_Node_Str"",""String_Node_Str""));
  shareAction.setTag(patientObj);
  shareAction.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startShareIntent(getActivity(),(Patient)v.getTag());
    }
  }
);
  shareOnTwitter.setTag(patientObj);
  shareOnTwitter.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startShareIntentWithTwitter(getActivity(),(Patient)v.getTag());
    }
  }
);
  shareOnFacebook.setTag(patientObj);
  shareOnFacebook.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startShareIntentWithFaceBook(getActivity(),(Patient)v.getTag());
    }
  }
);
  if (isFullyFunded) {
    fullyFundedCheckMark.setVisibility(View.VISIBLE);
    donateView.setVisibility(View.INVISIBLE);
  }
 else {
    Util.applyPrimaryFont(getActivity(),donationToGo);
    donationToGo.setText(Util.formatAmount(patientObj.getDonationToGo()) + ""String_Node_Str"");
    donateView.setVisibility(View.VISIBLE);
    donateView.setTag(patientObj);
    donateView.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent intent=Util.getFundTreatmentIntent((BaseFragmentActivity)getActivity(),patientObj,new BigDecimal(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
        startActivityForResult(intent,0);
      }
    }
);
  }
  mAdapter=new TestFragmentAdapter(getActivity().getSupportFragmentManager());
  mPager=(ViewPager)view.findViewById(R.id.pager);
  mPager.setAdapter(mAdapter);
  mIndicator=(CirclePageIndicator)view.findViewById(R.id.indicator);
  mIndicator.setViewPager(mPager);
  return view;
}",0.9892552797332346
147246,"@Override public boolean onOptionsItemSelected(MenuItem item){
  final int menuItemId=item.getItemId();
  if (menuItemId == R.id.action_profileView) {
    Util.showMyProfileActivity(this);
  }
  if (menuItemId == R.id.action_logout) {
    ParseUser.logOut();
    logout.setVisible(false);
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  final int menuItemId=item.getItemId();
  if (menuItemId == R.id.action_profileView) {
    Util.showMyProfileActivity(this);
  }
  if (menuItemId == R.id.action_logout) {
    logout();
    logout.setVisible(false);
  }
  return super.onOptionsItemSelected(item);
}",0.7327327327327328
147247,"public void setEmail(){
  Request.newMeRequest(ParseFacebookUtils.getSession(),new Request.GraphUserCallback(){
    @Override public void onCompleted(    GraphUser user,    Response response){
      ImageLoader imgImageLoader=ImageLoader.getInstance();
      imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
      String email=user.asMap().get(""String_Node_Str"").toString();
      ParseHelper parseHelper=new ParseHelper(getApplicationContext());
      ParseQuery<Donor> query=parseHelper.findDonorByEmail(email);
      try {
        Donor donor=query.getFirst();
        if (donor == null) {
          showDetailsForNonDonor();
        }
 else {
          showDetailsForDonor(donor);
        }
      }
 catch (      ParseException e) {
        e.printStackTrace();
      }
    }
  }
).executeAsync();
}","public void setEmail(){
  Request.newMeRequest(ParseFacebookUtils.getSession(),new Request.GraphUserCallback(){
    @Override public void onCompleted(    GraphUser user,    Response response){
      ImageLoader imgImageLoader=ImageLoader.getInstance();
      imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
      String email=user.asMap().get(""String_Node_Str"").toString();
      donarFullName.setText(user.getName());
      ParseHelper parseHelper=new ParseHelper(getApplicationContext());
      ParseQuery<Donor> query=parseHelper.findDonorByEmail(email);
      try {
        Donor donor=query.getFirst();
        if (donor == null) {
          showDetailsForNonDonor();
        }
 else {
          showDetailsForDonor(donor);
        }
      }
 catch (      ParseException e) {
        e.printStackTrace();
      }
    }
  }
).executeAsync();
}",0.9742710120068612
147248,"@Override public void onCompleted(GraphUser user,Response response){
  ImageLoader imgImageLoader=ImageLoader.getInstance();
  imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
  String email=user.asMap().get(""String_Node_Str"").toString();
  ParseHelper parseHelper=new ParseHelper(getApplicationContext());
  ParseQuery<Donor> query=parseHelper.findDonorByEmail(email);
  try {
    Donor donor=query.getFirst();
    if (donor == null) {
      showDetailsForNonDonor();
    }
 else {
      showDetailsForDonor(donor);
    }
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
}","@Override public void onCompleted(GraphUser user,Response response){
  ImageLoader imgImageLoader=ImageLoader.getInstance();
  imgImageLoader.displayImage(""String_Node_Str"" + user.getId() + ""String_Node_Str"",profilePicture);
  String email=user.asMap().get(""String_Node_Str"").toString();
  donarFullName.setText(user.getName());
  ParseHelper parseHelper=new ParseHelper(getApplicationContext());
  ParseQuery<Donor> query=parseHelper.findDonorByEmail(email);
  try {
    Donor donor=query.getFirst();
    if (donor == null) {
      showDetailsForNonDonor();
    }
 else {
      showDetailsForDonor(donor);
    }
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
}",0.9687738004569688
147249,"/** 
 * Shows the profile of the given user.
 * @param user
 */
private void showProfile(ParseUser user){
  if (user != null) {
    String fullName=user.getString(""String_Node_Str"");
    String email=null;
    if (fullName != null) {
      donarFullName.setText(fullName);
      getActionBar().setTitle(""String_Node_Str"");
      donorId=user.getString(""String_Node_Str"");
      email=user.getString(""String_Node_Str"");
      donarFullName.setText(fullName);
      if (ParseFacebookUtils.isLinked(user)) {
        setEmail();
      }
 else {
        user.getUsername();
        memberSinceDate.setText(Util.getFormatedDate(user.getCreatedAt()));
        showDetailsForNonDonor();
      }
      if (donorId != null) {
        setDonationsFragment(donorId);
      }
    }
  }
}","/** 
 * Shows the profile of the given user.
 * @param user
 */
private void showProfile(ParseUser user){
  if (user != null) {
    String fullName=user.getString(""String_Node_Str"");
    String email=null;
    getActionBar().setTitle(""String_Node_Str"");
    donorId=user.getString(""String_Node_Str"");
    email=user.getString(""String_Node_Str"");
    if (ParseFacebookUtils.isLinked(user)) {
      setEmail();
    }
 else {
      donarFullName.setText(fullName);
      memberSinceDate.setText(Util.getFormatedDate(user.getCreatedAt()));
      showDetailsForNonDonor();
    }
    if (donorId != null) {
      setDonationsFragment(donorId);
    }
  }
}",0.3471539002108222
147250,"private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  viewHolder.shortDescription.setText(R.string.makeDifference);
  viewHolder.message.setText(newsItem.getCampaignContent());
  viewHolder.donationProgress.setVisibility(View.INVISIBLE);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.INVISIBLE);
  convertView.setTag(viewHolder);
  return convertView;
}","private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  viewHolder.shortDescription.setText(R.string.makeDifference);
  viewHolder.message.setText(newsItem.getCampaignContent());
  viewHolder.donationProgress.setVisibility(View.INVISIBLE);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.INVISIBLE);
  convertView.setTag(viewHolder);
  convertView.setClickable(false);
  return convertView;
}",0.9643947100712106
147251,"private void setPatientNavigation(View v,Patient p,ItemType type){
  v.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      String patientId=((ViewHolder)v.getTag()).patient.getObjectId();
      PatientDetailActivity.getPatientDetailsIntent(activity,patientId);
    }
  }
);
}","private void setPatientNavigation(View v,Patient p,ItemType type){
  v.setClickable(true);
  v.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      String patientId=((ViewHolder)v.getTag()).patient.getObjectId();
      PatientDetailActivity.getPatientDetailsIntent(activity,patientId);
    }
  }
);
}",0.9636363636363636
147252,"@Override public View getItemView(final NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=buildViewHolder(newsItem.getItemType());
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
switch (newsItem.getItemType()) {
case CAMPAIGN_CONTENT:
    convertView=getCampaignContentItemView(newsItem,convertView,parent);
  break;
case ON_BOARDED:
convertView=getOnBoardedItemView(newsItem,convertView,parent);
break;
case FULLY_FUNDED:
convertView=getFullyFundedItemView(newsItem,convertView,parent);
break;
case DONATION_RAISED:
convertView=getDonationRaisedItemView(newsItem,convertView,parent);
break;
}
return convertView;
}","@Override public View getItemView(final NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=buildViewHolder(newsItem.getItemType());
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
    viewHolder.profileImage.setImageResource(R.drawable.default_feed_icon);
    viewHolder.patient=null;
    viewHolder.itemType=newsItem.getItemType();
  }
switch (newsItem.getItemType()) {
case CAMPAIGN_CONTENT:
    convertView=getCampaignContentItemView(newsItem,convertView,parent);
  break;
case ON_BOARDED:
convertView=getOnBoardedItemView(newsItem,convertView,parent);
break;
case FULLY_FUNDED:
convertView=getFullyFundedItemView(newsItem,convertView,parent);
break;
case DONATION_RAISED:
convertView=getDonationRaisedItemView(newsItem,convertView,parent);
break;
}
return convertView;
}",0.903348073278585
147253,"private View getFullyFundedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ItemType itemType=ItemType.FULLY_FUNDED;
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  Patient patient;
  try {
    patient=newsItem.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  String shortDescription=patient.getFirstName() + ""String_Node_Str"";
  String message=patient.getFullName() + ""String_Node_Str"" + ""String_Node_Str""+ patient.getDonationReceived()+ ""String_Node_Str"";
  viewHolder.patient=patient;
  setupUI(viewHolder,patient.getPhotoUrl(),shortDescription,message);
  setPatientNavigation(convertView,patient,itemType);
  setPatientFundButton(viewHolder.donateView,patient);
  setShareListeners(viewHolder);
  convertView.setTag(viewHolder);
  return convertView;
}","private View getFullyFundedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ItemType itemType=ItemType.FULLY_FUNDED;
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  Patient patient;
  try {
    patient=newsItem.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  String shortDescription=patient.getFirstName() + ""String_Node_Str"";
  String message=patient.getFullName() + ""String_Node_Str"" + ""String_Node_Str""+ patient.getDonationReceived()+ ""String_Node_Str"";
  viewHolder.patient=patient;
  setupUI(convertView,viewHolder,patient.getPhotoUrl(),shortDescription,message);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.VISIBLE);
  convertView.setTag(viewHolder);
  return convertView;
}",0.8171394085697042
147254,"private void setupUI(ViewHolder viewHolder,String photoUrl,String shortDescription,String message){
  DisplayImageOptions options=new DisplayImageOptions.Builder().displayer(new RoundedBitmapDisplayer((int)(getPixels(activity,80) / 2))).cacheInMemory().cacheOnDisc().imageScaleType(ImageScaleType.EXACTLY).bitmapConfig(Bitmap.Config.RGB_565).build();
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(photoUrl,viewHolder.profileImage,options);
  viewHolder.shortDescription.setText(shortDescription);
  viewHolder.message.setText(message);
  int donationProgressPecentage=viewHolder.patient.getDonationProgressPecentage();
  viewHolder.donationProgress.setProgress(donationProgressPecentage);
  Drawable progressDrawable=null;
  if (viewHolder.patient.isFullyFunded()) {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.fully_funded_progressbar);
  }
 else {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.progressbar);
  }
  viewHolder.donationProgress.setProgressDrawable(progressDrawable);
}","private void setupUI(View convertView,ViewHolder viewHolder,String photoUrl,String shortDescription,String message){
  DisplayImageOptions options=new DisplayImageOptions.Builder().displayer(new RoundedBitmapDisplayer((int)(getPixels(activity,80) / 2))).cacheInMemory().cacheOnDisc().imageScaleType(ImageScaleType.EXACTLY).bitmapConfig(Bitmap.Config.RGB_565).build();
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(photoUrl,viewHolder.profileImage,options);
  viewHolder.shortDescription.setText(shortDescription);
  viewHolder.message.setText(message);
  int donationProgressPecentage=viewHolder.patient.getDonationProgressPecentage();
  viewHolder.donationProgress.setProgress(donationProgressPecentage);
  Drawable progressDrawable=null;
  if (viewHolder.patient.isFullyFunded()) {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.fully_funded_progressbar);
  }
 else {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.progressbar);
  }
  viewHolder.donationProgress.setProgressDrawable(progressDrawable);
  setPatientNavigation(convertView,viewHolder.patient,viewHolder.itemType);
  setPatientFundButton(viewHolder.donateView,viewHolder.patient);
  setShareListeners(viewHolder);
}",0.9178082191780822
147255,"private View getOnBoardedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  Patient patient;
  try {
    patient=newsItem.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  String shortDescription=patient.getFirstName() + ""String_Node_Str"";
  String message=patient.getMedicalNeed() + ""String_Node_Str"";
  viewHolder.patient=patient;
  setupUI(viewHolder,patient.getPhotoUrl(),shortDescription,message);
  setPatientNavigation(convertView,patient,viewHolder.itemType);
  setPatientFundButton(viewHolder.donateView,patient);
  setShareListeners(viewHolder);
  convertView.setTag(viewHolder);
  return convertView;
}","private View getOnBoardedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  Patient patient;
  try {
    patient=newsItem.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  String shortDescription=patient.getFirstName() + ""String_Node_Str"";
  String message=patient.getMedicalNeed() + ""String_Node_Str"";
  viewHolder.patient=patient;
  setupUI(convertView,viewHolder,patient.getPhotoUrl(),shortDescription,message);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.VISIBLE);
  convertView.setTag(viewHolder);
  return convertView;
}",0.7950138504155124
147256,"private View getDonationRaisedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  Patient patient;
  Donor donor;
  Donation dn;
  try {
    dn=newsItem.getDonation().fetchIfNeeded();
    donor=dn.getDonor().fetchIfNeeded();
    patient=dn.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  String shortDescription=patient.getFirstName() + ""String_Node_Str"";
  String message=donor.getFirstName() + ""String_Node_Str"" + patient.getFullName()+ ""String_Node_Str""+ dn.getDonationAmount()+ ""String_Node_Str"";
  viewHolder.patient=patient;
  setupUI(viewHolder,patient.getPhotoUrl(),shortDescription,message);
  setPatientNavigation(convertView,patient,viewHolder.itemType);
  setPatientFundButton(viewHolder.donateView,patient);
  setShareListeners(viewHolder);
  convertView.setTag(viewHolder);
  return convertView;
}","private View getDonationRaisedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  ViewHolder viewHolder=(ViewHolder)convertView.getTag();
  Patient patient;
  Donor donor;
  Donation dn;
  try {
    dn=newsItem.getDonation().fetchIfNeeded();
    donor=dn.getDonor().fetchIfNeeded();
    patient=dn.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  String shortDescription=patient.getFirstName() + ""String_Node_Str"";
  String message=donor.getFirstName() + ""String_Node_Str"" + patient.getFullName()+ ""String_Node_Str""+ dn.getDonationAmount()+ ""String_Node_Str"";
  viewHolder.patient=patient;
  setupUI(convertView,viewHolder,patient.getPhotoUrl(),shortDescription,message);
  convertView.findViewById(R.id.donateAndShare).setVisibility(View.VISIBLE);
  convertView.setTag(viewHolder);
  return convertView;
}",0.8393051031487514
147257,"private View getDonationRaisedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=View.inflate(getContext(),R.layout.item_patient_news,null);
  }
  Patient patient;
  Donor donor;
  Donation dn;
  try {
    dn=newsItem.getDonation().fetchIfNeeded();
    donor=dn.getDonor().fetchIfNeeded();
    patient=dn.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  ImageView ivProfileImage=(ImageView)convertView.findViewById(R.id.ivProfileImage);
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(patient.getPhotoUrl(),ivProfileImage);
  TextView tvUserName=(TextView)convertView.findViewById(R.id.tvUserName);
  tvUserName.setText(patient.getFirstName() + ""String_Node_Str"" + donor.getFirstName());
  TextView tvShortMessage=(TextView)convertView.findViewById(R.id.tvShortMessage);
  String message=donor.getFirstName() + ""String_Node_Str"" + patient.getFullName()+ ""String_Node_Str""+ dn.getDonationAmount()+ ""String_Node_Str"";
  tvShortMessage.setText(message);
  return convertView;
}","private View getDonationRaisedItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=View.inflate(getContext(),R.layout.item_patient_news,null);
  }
  Patient patient;
  Donor donor;
  Donation dn;
  try {
    dn=newsItem.getDonation().fetchIfNeeded();
    donor=dn.getDonor().fetchIfNeeded();
    patient=dn.getPatient().fetchIfNeeded();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return convertView;
  }
  ImageView ivProfileImage=(ImageView)convertView.findViewById(R.id.ivProfileImage);
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(patient.getPhotoUrl(),ivProfileImage);
  TextView tvUserName=(TextView)convertView.findViewById(R.id.tvUserName);
  tvUserName.setText(patient.getFirstName() + ""String_Node_Str"" + donor.getFirstName());
  TextView tvShortMessage=(TextView)convertView.findViewById(R.id.tvShortMessage);
  String message=donor.getFirstName() + ""String_Node_Str"" + patient.getFullName()+ ""String_Node_Str""+ dn.getDonationAmount()+ ""String_Node_Str"";
  tvShortMessage.setText(message);
  Button bt=(Button)convertView.findViewById(R.id.btNewsAction);
  bt.setText(""String_Node_Str"");
  return convertView;
}",0.9560067681895094
147258,"private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=View.inflate(getContext(),R.layout.item_patient_news,null);
  }
  TextView tvUserName=(TextView)convertView.findViewById(R.id.tvUserName);
  tvUserName.setText(""String_Node_Str"");
  TextView tvShortMessage=(TextView)convertView.findViewById(R.id.tvShortMessage);
  tvShortMessage.setText(""String_Node_Str"");
  return convertView;
}","private View getCampaignContentItemView(NewsItem newsItem,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=View.inflate(getContext(),R.layout.item_campaign_news,null);
  }
  TextView tvHeading=(TextView)convertView.findViewById(R.id.tvCNHeading);
  tvHeading.setText(""String_Node_Str"");
  TextView tvShortMessage=(TextView)convertView.findViewById(R.id.tvCNShortMessage);
  tvShortMessage.setText(newsItem.getCampaignContent());
  return convertView;
}",0.8721174004192872
147259,"private void setupIintialViews(){
  listView.setOnScrollListener(new EndlessScrollListener(){
    @Override public void onLoadMore(    int page,    int totalItemsCount){
      if (totalItemsCount > 0) {
      }
    }
  }
);
  listView.setOnRefreshListener(new OnRefreshListener(){
    @Override public void onRefresh(){
      patientFeedAdapter.clear();
      patientFeedAdapter.loadObjects();
    }
  }
);
}","private void setupIintialViews(){
  listView.setOnRefreshListener(new OnRefreshListener(){
    @Override public void onRefresh(){
      patientFeedAdapter.clear();
      patientFeedAdapter.loadObjects();
    }
  }
);
}",0.645367412140575
147260,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_patient_feed,container,false);
  progressBar=(ProgressBar)v.findViewById(R.id.pf_progressBar);
  patientFeedAdapter=new HomeFeedAdapter(getActivity());
  patientFeedAdapter.addOnQueryLoadListener(new OnQueryLoadListener<NewsItem>(){
    @Override public void onLoaded(    List<NewsItem> patients,    Exception exp){
      progressBar.setVisibility(View.INVISIBLE);
      listView.onRefreshComplete();
      if (exp == null) {
        try {
          NewsItem.pinAll(patients);
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
 else {
      }
    }
    @Override public void onLoading(){
      progressBar.setVisibility(View.VISIBLE);
    }
  }
);
  listView=(PullToRefreshListView)v.findViewById(R.id.patient_feed_list);
  listView.setAdapter(patientFeedAdapter);
  setupIintialViews();
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_patient_feed,container,false);
  progressBar=(ProgressBar)v.findViewById(R.id.pf_progressBar);
  patientFeedAdapter=new HomeFeedAdapter(getActivity());
  patientFeedAdapter.addOnQueryLoadListener(new OnQueryLoadListener<NewsItem>(){
    @Override public void onLoaded(    List<NewsItem> newsItems,    Exception exp){
      progressBar.setVisibility(View.INVISIBLE);
      listView.onRefreshComplete();
      if (exp == null) {
        try {
          ArrayList<NewsItem> list=new ArrayList<NewsItem>();
          for (          NewsItem newsItem : newsItems) {
            if (newsItem != null) {
              list.add(newsItem);
            }
          }
          NewsItem.pinAll(list);
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
 else {
      }
    }
    @Override public void onLoading(){
      progressBar.setVisibility(View.VISIBLE);
    }
  }
);
  listView=(PullToRefreshListView)v.findViewById(R.id.patient_feed_list);
  listView.setAdapter(patientFeedAdapter);
  setupIintialViews();
  return v;
}",0.8835523334843679
147261,"@Override public void onLoaded(List<NewsItem> patients,Exception exp){
  progressBar.setVisibility(View.INVISIBLE);
  listView.onRefreshComplete();
  if (exp == null) {
    try {
      NewsItem.pinAll(patients);
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
  }
 else {
  }
}","@Override public void onLoaded(List<NewsItem> newsItems,Exception exp){
  progressBar.setVisibility(View.INVISIBLE);
  listView.onRefreshComplete();
  if (exp == null) {
    try {
      ArrayList<NewsItem> list=new ArrayList<NewsItem>();
      for (      NewsItem newsItem : newsItems) {
        if (newsItem != null) {
          list.add(newsItem);
        }
      }
      NewsItem.pinAll(list);
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
  }
 else {
  }
}",0.6878980891719745
147262,"@Override public View getItemView(Patient patient,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=View.inflate(getContext(),R.layout.item_patient,null);
    viewHolder.name=(TextView)convertView.findViewById(R.id.name);
    viewHolder.age=(TextView)convertView.findViewById(R.id.age);
    viewHolder.location=(TextView)convertView.findViewById(R.id.location);
    viewHolder.percentageFunded=(TextView)convertView.findViewById(R.id.percent_funded);
    viewHolder.donationTogo=(TextView)convertView.findViewById(R.id.donation_togo);
    viewHolder.medicalNeed=(TextView)convertView.findViewById(R.id.medicalNeeds);
    viewHolder.patientPhoto=(ImageView)convertView.findViewById(R.id.progressBarImageView);
    viewHolder.donationProgress=(ProgressBar)convertView.findViewById(R.id.progressBarToday);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(patient.getPhotoUrl(),viewHolder.patientPhoto);
  int donationProgressPecentage=patient.getDonationProgressPecentage();
  viewHolder.donationProgress.setProgress(donationProgressPecentage);
  viewHolder.name.setText(patient.getFullName());
  viewHolder.age.setText(patient.getAge() + ""String_Node_Str"");
  viewHolder.location.setText(patient.getCountry());
  viewHolder.percentageFunded.setText(donationProgressPecentage + ""String_Node_Str"");
  viewHolder.donationTogo.setText(""String_Node_Str"" + patient.getDonationToGo() + ""String_Node_Str"");
  viewHolder.medicalNeed.setText(patient.getMedicalNeed());
  if (patient.isFullyFunded()) {
    viewHolder.donationProgress.setProgressDrawable(fullyFundedProgressDrawable);
  }
 else {
    viewHolder.donationProgress.setProgressDrawable(inProgressDrawable);
  }
  return convertView;
}","@Override public View getItemView(Patient patient,View convertView,ViewGroup parent){
  if (convertView == null) {
    viewHolder=new ViewHolder();
    convertView=View.inflate(getContext(),R.layout.item_patient,null);
    viewHolder.name=(TextView)convertView.findViewById(R.id.name);
    viewHolder.age=(TextView)convertView.findViewById(R.id.age);
    viewHolder.location=(TextView)convertView.findViewById(R.id.location);
    viewHolder.percentageFunded=(TextView)convertView.findViewById(R.id.percent_funded);
    viewHolder.donationTogo=(TextView)convertView.findViewById(R.id.donation_togo);
    viewHolder.medicalNeed=(TextView)convertView.findViewById(R.id.medicalNeeds);
    viewHolder.patientPhoto=(ImageView)convertView.findViewById(R.id.progressBarImageView);
    viewHolder.donationProgress=(ProgressBar)convertView.findViewById(R.id.progressBarToday);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  ImageLoader imageLoader=ImageLoader.getInstance();
  imageLoader.displayImage(patient.getPhotoUrl(),viewHolder.patientPhoto);
  int donationProgressPecentage=patient.getDonationProgressPecentage();
  Log.d(TAG,""String_Node_Str"" + patient.getFullName() + ""String_Node_Str""+ donationProgressPecentage);
  viewHolder.donationProgress.setProgress(donationProgressPecentage);
  viewHolder.name.setText(patient.getFullName());
  viewHolder.age.setText(patient.getAge() + ""String_Node_Str"");
  viewHolder.location.setText(patient.getCountry());
  viewHolder.percentageFunded.setText(donationProgressPecentage + ""String_Node_Str"");
  viewHolder.donationTogo.setText(""String_Node_Str"" + patient.getDonationToGo() + ""String_Node_Str"");
  viewHolder.medicalNeed.setText(patient.getMedicalNeed());
  Drawable progressDrawable=null;
  if (patient.isFullyFunded()) {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.fully_funded_progressbar);
  }
 else {
    progressDrawable=getContext().getResources().getDrawable(R.drawable.progressbar);
  }
  viewHolder.donationProgress.setProgressDrawable(progressDrawable);
  return convertView;
}",0.7457457457457457
147263,"public PatientAdapter(Context context){
  super(context,new ParseQueryAdapter.QueryFactory<Patient>(){
    public ParseQuery create(){
      return new ParseQuery(""String_Node_Str"").orderByAscending(""String_Node_Str"");
    }
  }
);
  fullyFundedProgressDrawable=context.getResources().getDrawable(R.drawable.fully_funded_progressbar);
  inProgressDrawable=context.getResources().getDrawable(R.drawable.progressbar);
}","public PatientAdapter(Context context){
  super(context,new ParseQueryAdapter.QueryFactory<Patient>(){
    public ParseQuery create(){
      return new ParseQuery(""String_Node_Str"").orderByAscending(""String_Node_Str"");
    }
  }
);
}",0.7169230769230769
147264,"public void testChangeText(){
}","public void testChangeText(){
  assertEquals(""String_Node_Str"",""String_Node_Str"");
}",0.5391304347826087
147265,"public WatsiMainActivityTest(){
  super(MainActivity.class);
}","public WatsiMainActivityTest(){
  super(WatsiMainActivity.class);
}",0.9612403100775194
147266,"@Override protected void setUp() throws Exception {
  super.setUp();
}","@Override protected void setUp() throws Exception {
  super.setUp();
  mainActivity=getActivity();
}",0.8235294117647058
147267,"@Override protected void setUp() throws Exception {
}","@Override protected void setUp() throws Exception {
  super.setUp();
}",0.8617886178861789
147268,"/** 
 * Take a single row, turn it into a flowMod, and add it to the entries{$dpid}.{$entryName}=FlowMod  IF an entry is in active, mark it with FlowMod = null
 * @param row
 * @param entries
 */
void parseRow(Map<String,Object> row,Map<String,Map<String,OFFlowMod>> entries){
  String switchName=null;
  String entryName=null;
  StringBuffer matchString=new StringBuffer();
  if (ofMessageFactory == null)   ofMessageFactory=new BasicFactory();
  OFFlowMod flowMod=(OFFlowMod)ofMessageFactory.getMessage(OFType.FLOW_MOD);
  if (!row.containsKey(COLUMN_SWITCH) || !row.containsKey(COLUMN_NAME)) {
    log.debug(""String_Node_Str"",row);
    return;
  }
  try {
    switchName=(String)row.get(COLUMN_SWITCH);
    entryName=(String)row.get(COLUMN_NAME);
    if (!entries.containsKey(switchName))     entries.put(switchName,new HashMap<String,OFFlowMod>());
    StaticFlowEntries.initDefaultFlowMod(flowMod,entryName);
    for (    String key : row.keySet()) {
      if (row.get(key) == null)       continue;
      if (key.equals(COLUMN_SWITCH) || key.equals(COLUMN_NAME) || key.equals(""String_Node_Str""))       continue;
      if (key.equals(COLUMN_WILDCARD))       continue;
      if (key.equals(COLUMN_ACTIVE)) {
        if (!Boolean.valueOf((String)row.get(COLUMN_ACTIVE))) {
          log.debug(""String_Node_Str"",entryName,switchName);
          entries.get(switchName).put(entryName,null);
          return;
        }
      }
 else       if (key.equals(COLUMN_ACTIONS)) {
        StaticFlowEntries.parseActionString(flowMod,(String)row.get(COLUMN_ACTIONS),log);
      }
 else       if (key.equals(COLUMN_COOKIE)) {
        flowMod.setCookie(StaticFlowEntries.computeEntryCookie(flowMod,Integer.valueOf((String)row.get(COLUMN_COOKIE)),entryName));
      }
 else       if (key.equals(COLUMN_PRIORITY)) {
        flowMod.setPriority(U16.t(Integer.valueOf((String)row.get(COLUMN_PRIORITY))));
      }
 else       if (key.equals(COLUMN_HARD_TIMEOUT)) {
        flowMod.setHardTimeout(Short.valueOf(((String)(row.get(COLUMN_HARD_TIMEOUT)))));
      }
 else       if (key.equals(COLUMN_IDLE_TIMEOUT)) {
        flowMod.setHardTimeout(Short.valueOf(((String)(row.get(COLUMN_IDLE_TIMEOUT)))));
      }
 else {
        if (matchString.length() > 0)         matchString.append(""String_Node_Str"");
        matchString.append(key + ""String_Node_Str"" + row.get(key).toString());
      }
    }
  }
 catch (  ClassCastException e) {
    if (entryName != null && switchName != null)     log.debug(""String_Node_Str"" + e.getMessage(),entryName,switchName);
 else     log.debug(""String_Node_Str"",e.getMessage(),e.getStackTrace());
  }
  OFMatch ofMatch=new OFMatch();
  String match=matchString.toString();
  try {
    ofMatch.fromString(match);
  }
 catch (  IllegalArgumentException e) {
    log.debug(""String_Node_Str"" + match,entryName,switchName);
    return;
  }
  flowMod.setMatch(ofMatch);
  entries.get(switchName).put(entryName,flowMod);
}","/** 
 * Take a single row, turn it into a flowMod, and add it to the entries{$dpid}.{$entryName}=FlowMod  IF an entry is in active, mark it with FlowMod = null
 * @param row
 * @param entries
 */
void parseRow(Map<String,Object> row,Map<String,Map<String,OFFlowMod>> entries){
  String switchName=null;
  String entryName=null;
  StringBuffer matchString=new StringBuffer();
  if (ofMessageFactory == null)   ofMessageFactory=new BasicFactory();
  OFFlowMod flowMod=(OFFlowMod)ofMessageFactory.getMessage(OFType.FLOW_MOD);
  if (!row.containsKey(COLUMN_SWITCH) || !row.containsKey(COLUMN_NAME)) {
    log.debug(""String_Node_Str"",row);
    return;
  }
  try {
    switchName=(String)row.get(COLUMN_SWITCH);
    entryName=(String)row.get(COLUMN_NAME);
    if (!entries.containsKey(switchName))     entries.put(switchName,new HashMap<String,OFFlowMod>());
    StaticFlowEntries.initDefaultFlowMod(flowMod,entryName);
    for (    String key : row.keySet()) {
      if (row.get(key) == null)       continue;
      if (key.equals(COLUMN_SWITCH) || key.equals(COLUMN_NAME) || key.equals(""String_Node_Str""))       continue;
      if (key.equals(COLUMN_WILDCARD))       continue;
      if (key.equals(COLUMN_ACTIVE)) {
        if (!Boolean.valueOf((String)row.get(COLUMN_ACTIVE))) {
          log.debug(""String_Node_Str"",entryName,switchName);
          entries.get(switchName).put(entryName,null);
          return;
        }
      }
 else       if (key.equals(COLUMN_ACTIONS)) {
        StaticFlowEntries.parseActionString(flowMod,(String)row.get(COLUMN_ACTIONS),log);
      }
 else       if (key.equals(COLUMN_COOKIE)) {
        flowMod.setCookie(StaticFlowEntries.computeEntryCookie(flowMod,Integer.valueOf((String)row.get(COLUMN_COOKIE)),entryName));
      }
 else       if (key.equals(COLUMN_PRIORITY)) {
        flowMod.setPriority(U16.t(Integer.valueOf((String)row.get(COLUMN_PRIORITY))));
      }
 else       if (key.equals(COLUMN_HARD_TIMEOUT)) {
        flowMod.setHardTimeout(Short.valueOf(((String)(row.get(COLUMN_HARD_TIMEOUT)))));
      }
 else       if (key.equals(COLUMN_IDLE_TIMEOUT)) {
        flowMod.setIdleTimeout(Short.valueOf(((String)(row.get(COLUMN_IDLE_TIMEOUT)))));
      }
 else {
        if (matchString.length() > 0)         matchString.append(""String_Node_Str"");
        matchString.append(key + ""String_Node_Str"" + row.get(key).toString());
      }
    }
  }
 catch (  ClassCastException e) {
    if (entryName != null && switchName != null)     log.debug(""String_Node_Str"" + e.getMessage(),entryName,switchName);
 else     log.debug(""String_Node_Str"",e.getMessage(),e.getStackTrace());
  }
  OFMatch ofMatch=new OFMatch();
  String match=matchString.toString();
  try {
    ofMatch.fromString(match);
  }
 catch (  IllegalArgumentException e) {
    log.debug(""String_Node_Str"" + match,entryName,switchName);
    return;
  }
  flowMod.setMatch(ofMatch);
  entries.get(switchName).put(entryName,flowMod);
}",0.9986348122866894
147269,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  final Instruction thisInstruction=this;
  Conditional<Integer> aref=frame.peek(ctx,1);
  final ArrayLoadInstruction instruction=this;
  pushCtx=ctx;
  Conditional<Instruction> next=aref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      if (aref == MJIEnv.NULL) {
        pushCtx=Conditional.andNot(pushCtx,ctx);
        return new One<>(new EXCEPTION(""String_Node_Str"",""String_Node_Str""));
      }
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      if (isNewPorBoundary(e,ti)) {
        if (createAndSetArrayCG(e,ti,aref,peekIndex(ctx,ti),true)) {
          pushCtx=Conditional.andNot(pushCtx,ctx);
          return new One<>(instruction);
        }
      }
      return new One<>(null);
    }
  }
);
  if (Conditional.isContradiction(pushCtx)) {
    return next;
  }
  index=frame.pop(ctx);
  arrayRef=frame.pop(ctx).simplify(pushCtx);
  next=ChoiceFactory.create(pushCtx,arrayRef.mapf(FeatureExprFactory.True(),new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
        @SuppressWarnings(""String_Node_Str"") @Override public Conditional<Instruction> apply(        FeatureExpr ctx,        Integer index){
          try {
            final Conditional push=getPushValue(ctx,frame,e,index);
            pushValue=ChoiceFactory.create(ctx,push,pushValue);
            return getNext(ctx,ti);
          }
 catch (          ArrayIndexOutOfBoundsException ex) {
            pushCtx=Conditional.andNot(pushCtx,ctx);
            return new One<>(new EXCEPTION(thisInstruction,java.lang.ArrayIndexOutOfBoundsException.class.getName(),Integer.toString(index)));
          }
        }
      }
);
    }
  }
),next);
  pushValue(pushCtx,frame,pushValue);
  if (index.isOne() && aref.isOne()) {
    final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref.getValue());
    Object attr=e.getElementAttr(index.getValue());
    if (attr != null) {
      if (getElementSize() == 1) {
        frame.setOperandAttr(attr);
      }
 else {
        frame.setLongOperandAttr(attr);
      }
    }
  }
  return next;
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  final Instruction thisInstruction=this;
  Conditional<Integer> aref=frame.peek(ctx,1);
  final ArrayLoadInstruction instruction=this;
  pushCtx=ctx;
  Conditional<Instruction> next=aref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      if (aref == MJIEnv.NULL) {
        pushCtx=Conditional.andNot(pushCtx,ctx);
        return new One<>(new EXCEPTION(ArrayLoadInstruction.this,""String_Node_Str"",""String_Node_Str""));
      }
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      if (isNewPorBoundary(e,ti)) {
        if (createAndSetArrayCG(e,ti,aref,peekIndex(ctx,ti),true)) {
          pushCtx=Conditional.andNot(pushCtx,ctx);
          return new One<>(instruction);
        }
      }
      return new One<>(null);
    }
  }
);
  if (Conditional.isContradiction(pushCtx)) {
    return next;
  }
  index=frame.pop(ctx);
  arrayRef=frame.pop(ctx).simplify(pushCtx);
  next=ChoiceFactory.create(pushCtx,arrayRef.mapf(FeatureExprFactory.True(),new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
        @SuppressWarnings(""String_Node_Str"") @Override public Conditional<Instruction> apply(        FeatureExpr ctx,        Integer index){
          try {
            final Conditional push=getPushValue(ctx,frame,e,index);
            pushValue=ChoiceFactory.create(ctx,push,pushValue);
            return getNext(ctx,ti);
          }
 catch (          ArrayIndexOutOfBoundsException ex) {
            pushCtx=Conditional.andNot(pushCtx,ctx);
            return new One<>(new EXCEPTION(thisInstruction,java.lang.ArrayIndexOutOfBoundsException.class.getName(),Integer.toString(index)));
          }
        }
      }
);
    }
  }
),next);
  pushValue(pushCtx,frame,pushValue);
  if (index.isOne() && aref.isOne()) {
    final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref.getValue());
    Object attr=e.getElementAttr(index.getValue());
    if (attr != null) {
      if (getElementSize() == 1) {
        frame.setOperandAttr(attr);
      }
 else {
        frame.setLongOperandAttr(attr);
      }
    }
  }
  return next;
}",0.9949961508852964
147270,"@Override public Conditional<Instruction> apply(FeatureExpr ctx,Integer objref){
  if (objref == MJIEnv.NULL) {
  }
 else {
    boolean isValid=false;
    if (Types.isReferenceSignature(type)) {
      String t;
      if (Types.isArray(type)) {
        t=Types.getComponentTerminal(type);
      }
 else {
        t=type;
      }
      try {
        ti.resolveReferencedClass(t);
      }
 catch (      LoadOnJPFRequired lre) {
        return ti.getPC();
      }
    }
    ElementInfo e=ti.getElementInfo(objref);
    ClassInfo eci=e.getClassInfo();
    if (type.charAt(0) == '[') {
      String arrayType=type;
      ClassInfo cci=eci;
      while (true) {
        if (cci.isArray()) {
          cci=cci.getComponentClassInfo();
          arrayType=arrayType.substring(1);
        }
 else {
          break;
        }
        if (arrayType.charAt(0) != '[') {
          isValid=cci.isInstanceOf(arrayType);
          break;
        }
      }
    }
 else {
      isValid=e.getClassInfo().isInstanceOf(type);
    }
    if (!isValid) {
      return new One<>(new EXCEPTION(ClassCastException.class.getName(),e.getClassInfo().getName() + ""String_Node_Str"" + type));
    }
  }
  return getNext(ctx,ti);
}","@Override public Conditional<Instruction> apply(FeatureExpr ctx,Integer objref){
  if (objref == MJIEnv.NULL) {
  }
 else {
    boolean isValid=false;
    if (Types.isReferenceSignature(type)) {
      String t;
      if (Types.isArray(type)) {
        t=Types.getComponentTerminal(type);
      }
 else {
        t=type;
      }
      try {
        ti.resolveReferencedClass(t);
      }
 catch (      LoadOnJPFRequired lre) {
        return ti.getPC();
      }
    }
    ElementInfo e=ti.getElementInfo(objref);
    ClassInfo eci=e.getClassInfo();
    if (type.charAt(0) == '[') {
      String arrayType=type;
      ClassInfo cci=eci;
      while (true) {
        if (cci.isArray()) {
          cci=cci.getComponentClassInfo();
          arrayType=arrayType.substring(1);
        }
 else {
          break;
        }
        if (arrayType.charAt(0) != '[') {
          isValid=cci.isInstanceOf(arrayType);
          break;
        }
      }
    }
 else {
      isValid=e.getClassInfo().isInstanceOf(type);
    }
    if (!isValid) {
      return new One<>(new EXCEPTION(CHECKCAST.this,ClassCastException.class.getName(),e.getClassInfo().getName() + ""String_Node_Str"" + type));
    }
  }
  return getNext(ctx,ti);
}",0.9937733499377336
147271,"public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  StackFrame frame=ti.getTopFrame();
  Conditional<Integer> objref=frame.peek(ctx);
  return objref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer objref){
      if (objref == MJIEnv.NULL) {
      }
 else {
        boolean isValid=false;
        if (Types.isReferenceSignature(type)) {
          String t;
          if (Types.isArray(type)) {
            t=Types.getComponentTerminal(type);
          }
 else {
            t=type;
          }
          try {
            ti.resolveReferencedClass(t);
          }
 catch (          LoadOnJPFRequired lre) {
            return ti.getPC();
          }
        }
        ElementInfo e=ti.getElementInfo(objref);
        ClassInfo eci=e.getClassInfo();
        if (type.charAt(0) == '[') {
          String arrayType=type;
          ClassInfo cci=eci;
          while (true) {
            if (cci.isArray()) {
              cci=cci.getComponentClassInfo();
              arrayType=arrayType.substring(1);
            }
 else {
              break;
            }
            if (arrayType.charAt(0) != '[') {
              isValid=cci.isInstanceOf(arrayType);
              break;
            }
          }
        }
 else {
          isValid=e.getClassInfo().isInstanceOf(type);
        }
        if (!isValid) {
          return new One<>(new EXCEPTION(ClassCastException.class.getName(),e.getClassInfo().getName() + ""String_Node_Str"" + type));
        }
      }
      return getNext(ctx,ti);
    }
  }
);
}","public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  StackFrame frame=ti.getTopFrame();
  Conditional<Integer> objref=frame.peek(ctx);
  return objref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer objref){
      if (objref == MJIEnv.NULL) {
      }
 else {
        boolean isValid=false;
        if (Types.isReferenceSignature(type)) {
          String t;
          if (Types.isArray(type)) {
            t=Types.getComponentTerminal(type);
          }
 else {
            t=type;
          }
          try {
            ti.resolveReferencedClass(t);
          }
 catch (          LoadOnJPFRequired lre) {
            return ti.getPC();
          }
        }
        ElementInfo e=ti.getElementInfo(objref);
        ClassInfo eci=e.getClassInfo();
        if (type.charAt(0) == '[') {
          String arrayType=type;
          ClassInfo cci=eci;
          while (true) {
            if (cci.isArray()) {
              cci=cci.getComponentClassInfo();
              arrayType=arrayType.substring(1);
            }
 else {
              break;
            }
            if (arrayType.charAt(0) != '[') {
              isValid=cci.isInstanceOf(arrayType);
              break;
            }
          }
        }
 else {
          isValid=e.getClassInfo().isInstanceOf(type);
        }
        if (!isValid) {
          return new One<>(new EXCEPTION(CHECKCAST.this,ClassCastException.class.getName(),e.getClassInfo().getName() + ""String_Node_Str"" + type));
        }
      }
      return getNext(ctx,ti);
    }
  }
);
}",0.9954504094631484
147272,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected void pushValue(FeatureExpr ctx,StackFrame frame,Conditional value){
  frame.pushDouble(ctx,value);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected void pushValue(FeatureExpr ctx,StackFrame frame,Conditional value){
  frame.pushLong(ctx,value.simplify(ctx));
}",0.9398907103825136
147273,"@Override public FeatureExpr getContextOf(Function<T,Boolean> function){
  FeatureExpr result=FeatureExprFactory.False();
  for (  Entry<T,FeatureExpr> element : map.entrySet()) {
    if (function.apply(element.getKey())) {
      return or(result,element.getValue());
    }
  }
  return result;
}","@Override public FeatureExpr getContextOf(Function<T,Boolean> function){
  FeatureExpr result=FeatureExprFactory.False();
  for (  Entry<T,FeatureExpr> element : map.entrySet()) {
    if (function.apply(element.getKey())) {
      result=or(result,element.getValue());
    }
  }
  return result;
}",0.983108108108108
147274,"@Override public FeatureExpr getContextOf(Function<T,Boolean> function){
  if (function.apply(value)) {
    return FeatureExprFactory.True();
  }
 else {
    return FeatureExprFactory.False();
  }
}","@Override public FeatureExpr getContextOf(Function<T,Boolean> function){
  return function.apply(value) ? FeatureExprFactory.True() : FeatureExprFactory.False();
}",0.8587257617728532
147275,"@Override public FeatureExpr getContextOf(Function<T,Boolean> function){
  return or(and(featureExpr,thenBranch.getContextOf(function)),and(featureExpr,elseBranch.getContextOf(function)));
}","@Override public FeatureExpr getContextOf(Function<T,Boolean> function){
  return or(and(featureExpr,thenBranch.getContextOf(function)),and(not(featureExpr),elseBranch.getContextOf(function)));
}",0.987012987012987
147276,"@Override public final void accept(InstructionVisitor insVisitor){
  try {
    InstructionVisitor.class.getMethod(""String_Node_Str"",this.getClass()).invoke(insVisitor,this);
  }
 catch (  ReflectiveOperationException|SecurityException|InvocationTargetException e) {
    e.printStackTrace();
  }
}","@Override public final void accept(InstructionVisitor insVisitor){
  try {
    InstructionVisitor.class.getMethod(""String_Node_Str"",this.getClass()).invoke(insVisitor,this);
  }
 catch (  IllegalAccessException|NoSuchMethodException|SecurityException|InvocationTargetException e) {
    e.printStackTrace();
  }
}",0.9111842105263158
147277,"@Override public void pushLongLocal(FeatureExpr ctx,int index){
  Conditional<Entry> entry=locals[index];
  if (entry == null) {
    entry=new One<>(new Entry(0,false));
  }
  push(ctx,entry.mapf(ctx,new BiFunction<FeatureExpr,Entry,Conditional<Integer>>(){
    @Override public One<Integer> apply(    final FeatureExpr ctx,    final Entry entry){
      return new One<>(entry.value);
    }
  }
),false);
  entry=locals[index + 1];
  if (entry == null) {
    entry=new One<>(new Entry(0,false));
  }
  push(ctx,entry.mapf(ctx,new BiFunction<FeatureExpr,Entry,Conditional<Integer>>(){
    @Override public One<Integer> apply(    final FeatureExpr ctx,    final Entry entry){
      return new One<>(entry.value);
    }
  }
),false);
}","@Override public void pushLongLocal(FeatureExpr ctx,int index){
  Conditional<Entry> entry=locals[index];
  if (entry == null) {
    entry=new One<>(new Entry(0,false));
  }
  push(ctx,entry.mapf(ctx,(BiFunction<FeatureExpr,Entry,Conditional<Integer>>)(ctx1,entry1) -> new One<>(entry1.value)),false);
  entry=locals[index + 1];
  if (entry == null) {
    entry=new One<>(new Entry(0,false));
  }
  push(ctx,entry.mapf(ctx,(BiFunction<FeatureExpr,Entry,Conditional<Integer>>)(ctx1,entry1) -> new One<>(entry1.value)),false);
}",0.5691573926868044
147278,"@Override public void pushLocal(FeatureExpr ctx,int index){
  Conditional<Entry> value=locals[index].simplify(ctx);
  if (value == null) {
    value=new One<>(Entry.create(MJIEnv.NULL,false));
  }
  Boolean isRef=null;
  for (  Entry v : value.toList()) {
    if (isRef == null) {
      isRef=v.isRef;
    }
 else     if (isRef != v.isRef) {
      debufferAll();
      value.mapf(ctx,new BiFunction<FeatureExpr,Entry,Conditional<Object>>(){
        @Override public Conditional<Object> apply(        final FeatureExpr ctx,        final Entry entry){
          push(ctx,entry.value,entry.isRef);
          return null;
        }
      }
);
      return;
    }
  }
  Conditional<Integer> pushValue=value.map(new Function<Entry,Integer>(){
    @Override public Integer apply(    Entry x){
      return x.value;
    }
  }
);
  if (buffer.isEmpty()) {
    bufferCTX=ctx;
    addToBuffer((pushValue),isRef);
    return;
  }
  if (Conditional.equivalentTo(bufferCTX,ctx)) {
    addToBuffer((pushValue),isRef);
    return;
  }
 else {
    debufferAll();
    bufferCTX=ctx;
    addToBuffer((pushValue),isRef);
    return;
  }
}","@Override public void pushLocal(FeatureExpr ctx,int index){
  Conditional<Entry> value=locals[index].simplify(ctx);
  if (value == null) {
    value=new One<>(Entry.create(MJIEnv.NULL,false));
  }
  Boolean isRef=null;
  for (  Entry v : value.toList()) {
    if (isRef == null) {
      isRef=v.isRef;
    }
 else     if (isRef != v.isRef) {
      debufferAll();
      value.mapf(ctx,(BiFunction<FeatureExpr,Entry,Conditional<Object>>)(ctx1,entry) -> {
        push(ctx1,entry.value,entry.isRef);
        return null;
      }
);
      return;
    }
  }
  Conditional<Integer> pushValue=value.map(x -> x.value);
  if (buffer.isEmpty()) {
    bufferCTX=ctx;
    addToBuffer((pushValue),isRef);
    return;
  }
  if (Conditional.equivalentTo(bufferCTX,ctx)) {
    addToBuffer((pushValue),isRef);
    return;
  }
 else {
    debufferAll();
    bufferCTX=ctx;
    addToBuffer((pushValue),isRef);
    return;
  }
}",0.8341559723593287
147279,"@Override public Conditional<Integer> getTop(){
  if (!buffer.isEmpty()) {
    int size=-1;
    for (    Tuple entry : buffer) {
      Conditional value=entry.value;
      if (value.getValue(true) instanceof Integer) {
        size++;
        continue;
      }
      if (value.getValue(true) instanceof Float) {
        size++;
        continue;
      }
      if (value.getValue(true) instanceof Long) {
        size+=2;
        continue;
      }
      if (value.getValue(true) instanceof Double) {
        size+=2;
        continue;
      }
    }
    Conditional<Integer> stackTop=super.getTop();
    if (stackTop.equals(One.valueOf(-1))) {
      if (Conditional.isTautology(bufferCTX)) {
        return One.valueOf(size);
      }
      return ChoiceFactory.create(bufferCTX,new One<>(size),new One<>(-1));
    }
    final int finalSize=size;
    return stackTop.mapf(FeatureExprFactory.True(),new BiFunction<FeatureExpr,Integer,Conditional<Integer>>(){
      @Override public Conditional<Integer> apply(      FeatureExpr ctx,      Integer y){
        FeatureExpr context=Conditional.and(bufferCTX,ctx);
        if (Conditional.isContradiction(context)) {
          return One.valueOf(y);
        }
        return ChoiceFactory.create(context,new One<>(y + finalSize + 1),new One<>(y));
      }
    }
).simplify();
  }
  return super.getTop();
}","@Override public Conditional<Integer> getTop(){
  if (!buffer.isEmpty()) {
    int size=-1;
    for (    Tuple entry : buffer) {
      Conditional value=entry.value;
      if (value.getValue(true) instanceof Integer) {
        size++;
        continue;
      }
      if (value.getValue(true) instanceof Float) {
        size++;
        continue;
      }
      if (value.getValue(true) instanceof Long) {
        size+=2;
        continue;
      }
      if (value.getValue(true) instanceof Double) {
        size+=2;
        continue;
      }
    }
    Conditional<Integer> stackTop=super.getTop();
    if (stackTop.equals(One.valueOf(-1))) {
      if (Conditional.isTautology(bufferCTX)) {
        return One.valueOf(size);
      }
      return ChoiceFactory.create(bufferCTX,new One<>(size),new One<>(-1));
    }
    final int finalSize=size;
    return stackTop.mapf(FeatureExprFactory.True(),(ctx,y) -> {
      FeatureExpr context=Conditional.and(bufferCTX,ctx);
      if (Conditional.isContradiction(context)) {
        return One.valueOf(y);
      }
      return ChoiceFactory.create(context,new One<>(y + finalSize + 1),new One<>(y));
    }
).simplify();
  }
  return super.getTop();
}",0.9042175798186834
147280,"@Override public Conditional<Integer> apply(FeatureExpr ctx,Integer y){
  FeatureExpr context=Conditional.and(bufferCTX,ctx);
  if (Conditional.isContradiction(context)) {
    return One.valueOf(y);
  }
  return ChoiceFactory.create(context,new One<>(y + finalSize + 1),new One<>(y));
}","@Override public Entry apply(Number x){
  if (x instanceof Float) {
    return Entry.create(Types.floatToInt((Float)x),entry.isRef);
  }
  return Entry.create(x.intValue(),entry.isRef);
}",0.4397463002114165
147281,"@Override public <T>Conditional<T> peek(FeatureExpr ctx,final int offset,Type t){
  if (!buffer.isEmpty()) {
    if (getBufferSize() > offset && Conditional.equivalentTo(bufferCTX,ctx)) {
      int pointer=offset;
      int n=0;
      while (n <= pointer) {
        Conditional value=buffer.get(n).value;
        Object type=value.getValue(true);
        if (type instanceof Integer) {
          if (n == offset) {
switch (t) {
case LONG:
              if (buffer.size() > n + 1) {
                final Conditional value2=buffer.get(n + 1).value;
                return value.mapr(new Function<Integer,Conditional<Long>>(){
                  @Override public Conditional<Long> apply(                  final Integer x1){
                    return value2.map(new Function<Integer,Long>(){
                      @Override public Long apply(                      Integer x2){
                        return Types.intsToLong(x1,x2);
                      }
                    }
);
                  }
                }
);
              }
 else {
                break;
              }
default :
            throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str""+ t);
        }
      }
      n++;
      continue;
    }
    if (type instanceof Float) {
      if (n == offset) {
switch (t) {
case FLOAT:
          return value;
case INT:
        return value.map(new Function<Float,Integer>(){
          @Override public Integer apply(          Float x){
            return Types.floatToInt(x.floatValue());
          }
        }
);
default :
      break;
  }
}
n++;
continue;
}
if (type instanceof Double || type instanceof Long) {
if (n - pointer > 1) {
  n++;
  pointer--;
  continue;
}
 else {
  debufferAll();
  return super.peek(ctx,offset,t);
}
}
if (type instanceof Byte) {
if (n == offset) {
  return value.map(new Function<Byte,Integer>(){
    @Override public Integer apply(    Byte x){
      return (int)x.byteValue();
    }
  }
);
}
n++;
continue;
}
if (type instanceof Short) {
if (n == offset) {
  return value.map(new Function<Short,Integer>(){
    @Override public Integer apply(    Short x){
      return (int)x;
    }
  }
);
}
n++;
continue;
}
throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str"");
}
}
debufferAll();
}
return super.peek(ctx,offset,t);
}","@Override public <T>Conditional<T> peek(FeatureExpr ctx,final int offset,Type t){
  if (!buffer.isEmpty()) {
    if (getBufferSize() > offset && Conditional.equivalentTo(bufferCTX,ctx)) {
      int pointer=offset;
      int n=0;
      while (n <= pointer) {
        Conditional value=buffer.get(n).value;
        Object type=value.getValue(true);
        if (type instanceof Integer) {
          if (n == offset) {
switch (t) {
case LONG:
              if (buffer.size() > n + 1) {
                final Conditional value2=buffer.get(n + 1).value;
                return value.mapr(x1 -> value2.map(x2 -> Types.intsToLong((int)x1,(int)x2)));
              }
 else {
                break;
              }
case DOUBLE:
            if (buffer.size() > n + 1) {
              final Conditional value2=buffer.get(n + 1).value;
              return value.mapr(x1 -> value2.map(x2 -> Types.intsToDouble((int)x1,(int)x2)));
            }
 else {
              break;
            }
case FLOAT:
          return value.map(x1 -> Types.intToFloat((int)x1));
default :
        throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str""+ t);
    }
  }
  n++;
  continue;
}
if (type instanceof Float) {
  if (n == offset) {
switch (t) {
case FLOAT:
      return value;
case INT:
    return value.map(x -> Types.floatToInt(((Float)x).floatValue()));
default :
  break;
}
}
n++;
continue;
}
if (type instanceof Double || type instanceof Long) {
if (n - pointer > 1) {
n++;
pointer--;
continue;
}
 else {
debufferAll();
return super.peek(ctx,offset,t);
}
}
if (type instanceof Byte) {
if (n == offset) {
return value.map(x -> (int)((Byte)x).byteValue());
}
n++;
continue;
}
if (type instanceof Short) {
if (n == offset) {
return value.map(x -> (int)x);
}
n++;
continue;
}
throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str"");
}
}
debufferAll();
}
return super.peek(ctx,offset,t);
}",0.6115429917550059
147282,"@Override public <T>Conditional<T> peek(FeatureExpr ctx,final int offset,Type t){
  if (!buffer.isEmpty()) {
    if (getBufferSize() > offset && Conditional.equivalentTo(bufferCTX,ctx)) {
      int pointer=offset;
      int n=0;
      while (n <= pointer) {
        Conditional value=buffer.get(n).value;
        Object type=value.getValue(true);
        if (type instanceof Integer) {
          if (n == offset) {
switch (t) {
case LONG:
              if (buffer.size() > n + 1) {
                final Conditional value2=buffer.get(n + 1).value;
                return value.mapr(x1 -> value2.map(x2 -> Types.intsToLong(((Number)x1).intValue(),((Number)x2).intValue())));
              }
 else {
                break;
              }
case DOUBLE:
            if (buffer.size() > n + 1) {
              final Conditional value2=buffer.get(n + 1).value;
              return value.mapr(x1 -> value2.map(x2 -> Types.intsToDouble(((Number)x1).intValue(),((Number)x2).intValue())));
            }
 else {
              break;
            }
case FLOAT:
          return value.map(x1 -> Types.intToFloat((int)x1));
default :
        throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str""+ t);
    }
  }
  n++;
  continue;
}
if (type instanceof Float) {
  if (n == offset) {
switch (t) {
case FLOAT:
      return value;
case INT:
    return value.map(x -> Types.floatToInt(((Float)x).floatValue()));
default :
  break;
}
}
n++;
continue;
}
if (type instanceof Double || type instanceof Long) {
if (n - pointer > 1) {
n++;
pointer--;
continue;
}
 else {
debufferAll();
return super.peek(ctx,offset,t);
}
}
if (type instanceof Byte) {
if (n == offset) {
switch (t) {
case FLOAT:
return value.map(x1 -> Types.intToFloat((byte)x1));
case DOUBLE:
break;
case INT:
return value.map(x -> (int)((Byte)x).byteValue());
case LONG:
break;
default :
break;
}
}
n++;
continue;
}
if (type instanceof Short) {
if (n == offset) {
switch (t) {
case FLOAT:
return value.map(x1 -> Types.intToFloat((short)x1));
case DOUBLE:
break;
case INT:
return value.map(x1 -> (short)x1);
case LONG:
break;
}
}
n++;
continue;
}
if (type == null) {
debufferAll();
break;
}
throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str"");
}
}
debufferAll();
}
return super.peek(ctx,offset,t);
}","@Override public <T>Conditional<T> peek(FeatureExpr ctx,final int offset,Type t){
  if (!buffer.isEmpty()) {
    if (getBufferSize() > offset && Conditional.equivalentTo(bufferCTX,ctx)) {
      int pointer=offset;
      int n=0;
      while (n <= pointer) {
        Conditional value=buffer.get(n).value;
        Object type=value.getValue(true);
        if (type instanceof Integer) {
          if (n == offset) {
switch (t) {
case LONG:
              if (buffer.size() > n + 1) {
                final Conditional value2=buffer.get(n + 1).value;
                if (value2.getValue(true) instanceof Double || value2.getValue(true) instanceof Long) {
                  debufferAll();
                  return super.peek(ctx,offset,t);
                }
                return value.mapr(x1 -> value2.map(x2 -> Types.intsToLong(NumberToInt((Number)x1),NumberToInt((Number)x2))));
              }
 else {
                break;
              }
case DOUBLE:
            if (buffer.size() > n + 1) {
              final Conditional value2=buffer.get(n + 1).value;
              if (value2.getValue(true) instanceof Double || value2.getValue(true) instanceof Long) {
                debufferAll();
                return super.peek(ctx,offset,t);
              }
              return value.mapr(x1 -> value2.map(x2 -> Types.intsToDouble(NumberToInt((Number)x1),NumberToInt((Number)x2))));
            }
 else {
              break;
            }
case FLOAT:
          return value.map(x1 -> Types.intToFloat((int)x1));
default :
        throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str""+ t);
    }
  }
  n++;
  continue;
}
if (type instanceof Float) {
  if (n == offset) {
switch (t) {
case FLOAT:
      return value;
case INT:
    return value.map(x -> Types.floatToInt(((Float)x).floatValue()));
default :
  break;
}
}
n++;
continue;
}
if (type instanceof Double || type instanceof Long) {
if (n - pointer > 1) {
n++;
pointer--;
continue;
}
 else {
debufferAll();
return super.peek(ctx,offset,t);
}
}
if (type instanceof Byte) {
if (n == offset) {
switch (t) {
case FLOAT:
return value.map(x1 -> Types.intToFloat((byte)x1));
case DOUBLE:
break;
case INT:
return value.map(x -> (int)((Byte)x).byteValue());
case LONG:
break;
default :
break;
}
}
n++;
continue;
}
if (type instanceof Short) {
if (n == offset) {
switch (t) {
case FLOAT:
return value.map(x1 -> Types.intToFloat((short)x1));
case DOUBLE:
break;
case INT:
return value.map(x1 -> (short)x1);
case LONG:
break;
}
}
n++;
continue;
}
if (type == null) {
debufferAll();
break;
}
throw new RuntimeException(""String_Node_Str"" + type.getClass() + ""String_Node_Str"");
}
}
debufferAll();
}
return super.peek(ctx,offset,t);
}",0.8986027944111776
147283,"@Override public Conditional<Integer> getTop(){
  if (!buffer.isEmpty()) {
    int size=-1;
    for (    Tuple entry : buffer) {
      size+=entry.size;
    }
    Conditional<Integer> stackTop=stackHandler.getTop();
    if (stackTop.equals(One.valueOf(-1))) {
      if (Conditional.isTautology(bufferCTX)) {
        return One.valueOf(size);
      }
      return ChoiceFactory.create(bufferCTX,new One<>(size),new One<>(-1)).simplify(stackHandler.stackCTX);
    }
    final int finalSize=size;
    return stackTop.mapf(FeatureExprFactory.True(),(ctx,y) -> {
      FeatureExpr context=Conditional.and(bufferCTX,ctx);
      if (Conditional.isContradiction(context)) {
        return One.valueOf(y);
      }
      return ChoiceFactory.create(context,new One<>(y + finalSize + 1),new One<>(y));
    }
).simplify(stackHandler.stackCTX);
  }
  return stackHandler.getTop();
}","@Override public Conditional<Integer> getTop(){
  if (!buffer.isEmpty()) {
    int size=-1;
    for (    Tuple entry : buffer) {
      size+=entry.size;
    }
    Conditional<Integer> stackTop=stackHandler.getTop();
    if (stackTop.equals(One.valueOf(-1))) {
      if (Conditional.isTautology(bufferCTX)) {
        return One.valueOf(size);
      }
      return ChoiceFactory.create(bufferCTX,new One<>(size),new One<>(-1)).simplify(stackHandler.stackCTX);
    }
    final int finalSize=size;
    return stackTop.mapf(FeatureExprFactory.True(),(ctx,y) -> {
      FeatureExpr context=Conditional.and(bufferCTX,ctx);
      if (Conditional.isContradiction(context)) {
        return One.valueOf(y);
      }
      return ChoiceFactory.create(context,new One<>(y + finalSize),new One<>(y));
    }
).simplify(stackHandler.stackCTX);
  }
  return stackHandler.getTop();
}",0.9976931949250288
147284,"@Override public void dup_x2(FeatureExpr ctx){
  if (!buffer.isEmpty()) {
    if (Conditional.equivalentTo(bufferCTX,ctx)) {
      if (buffer.size() >= 2) {
        if (buffer.get(1).getSize() == 2) {
          buffer.add(2,buffer.peek());
          return;
        }
 else         if (buffer.size() >= 3) {
          buffer.add(3,buffer.peek());
          return;
        }
      }
    }
    debufferAll();
  }
  stackHandler.dup_x2(ctx);
}","@Override public void dup_x2(FeatureExpr ctx){
  if (!buffer.isEmpty()) {
    if (Conditional.equivalentTo(bufferCTX,ctx)) {
      if (buffer.size() >= 2) {
        if (buffer.peek().size == 1) {
          if (buffer.get(1).getSize() == 2) {
            buffer.add(2,buffer.peek());
            return;
          }
 else           if (buffer.size() >= 3) {
            buffer.add(3,buffer.peek());
            return;
          }
        }
      }
    }
    debufferAll();
  }
  stackHandler.dup_x2(ctx);
}",0.9039070749736008
147285,"private void runDifferentialTest(final int seed){
  differentalTest(() -> {
    calls.clear();
    Random r=new Random(seed);
    IStackHandler sh=StackHandlerFactory.createStack(FeatureExprFactory.True(),10,15);
    List<Object> returnValues=new ArrayList<>(METHOD_CALLS);
    for (int j=0; j < METHOD_CALLS; j++) {
      Object applyStackOp=applyStackOp(sh,r);
      returnValues.add(applyStackOp);
      if (applyStackOp instanceof Exception) {
        break;
      }
    }
    return returnValues;
  }
);
}","private void runDifferentialTest(final int seed){
  differentalTest(() -> {
    calls.clear();
    Random r=new Random(seed);
    IStackHandler sh=StackHandlerFactory.createStack(FeatureExprFactory.True(),10,20);
    List<Object> returnValues=new ArrayList<>(METHOD_CALLS);
    for (int j=0; j < METHOD_CALLS; j++) {
      Object applyStackOp=applyStackOp(sh,r);
      returnValues.add(applyStackOp);
      if (applyStackOp instanceof Exception) {
        break;
      }
    }
    return returnValues;
  }
);
}",0.996078431372549
147286,"public static void main(String[] args){
  try {
    new RandomDifferentialStackTest().runDifferentialTest(95521);
  }
 catch (  Throwable e) {
    for (    String call : calls) {
      System.out.println(call);
    }
    throw e;
  }
}","public static void main(String[] args){
  try {
    new RandomDifferentialStackTest().runDifferentialTest(22796);
  }
 catch (  Throwable e) {
    for (    String call : calls) {
      System.out.println(call);
    }
    throw e;
  }
}",0.9829787234042552
147287,"@MJI public Conditional<Character> charAt__I__C(final MJIEnv env,Conditional<Integer> objRef,final Conditional<Integer> index,FeatureExpr ctx){
  Conditional<char[]> data=objRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<char[]>>(){
    @Override public Conditional<char[]> apply(    FeatureExpr ctx,    Integer objRef){
      return env.getStringChars(objRef);
    }
  }
).simplify(ctx);
  return data.mapf(ctx,new BiFunction<FeatureExpr,char[],Conditional<Character>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public Conditional<Character> apply(    FeatureExpr ctx,    final char[] data){
      if (Conditional.isContradiction(ctx)) {
        return (Conditional<Character>)One.NULL;
      }
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Character>>(){
        @Override public Conditional<Character> apply(        FeatureExpr ctx,        Integer index){
          if ((index < 0) || (index >= data.length)) {
            env.ti.createAndThrowException(ctx,StringIndexOutOfBoundsException.class.getName(),index.toString());
            return (Conditional<Character>)One.NULL;
          }
          return new One<>(data[index]);
        }
      }
);
    }
  }
).simplify();
}","@MJI public Conditional<Character> charAt__I__C(final MJIEnv env,Conditional<Integer> objRef,final Conditional<Integer> index,FeatureExpr ctx){
  Conditional<char[]> data=objRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<char[]>>(){
    @Override public Conditional<char[]> apply(    FeatureExpr ctx,    Integer objRef){
      return env.getStringChars(objRef);
    }
  }
).simplify(ctx);
  return data.mapf(ctx,new BiFunction<FeatureExpr,char[],Conditional<Character>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public Conditional<Character> apply(    FeatureExpr ctx,    final char[] data){
      if (Conditional.isContradiction(ctx)) {
        return (Conditional<Character>)One.NULL;
      }
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Character>>(){
        @Override public Conditional<Character> apply(        FeatureExpr ctx,        Integer index){
          if (Conditional.isContradiction(ctx)) {
            return (Conditional<Character>)One.NULL;
          }
          if ((index < 0) || (index >= data.length)) {
            env.ti.createAndThrowException(ctx,StringIndexOutOfBoundsException.class.getName(),index.toString());
            return (Conditional<Character>)One.NULL;
          }
          return new One<>(data[index]);
        }
      }
);
    }
  }
).simplify();
}",0.8314606741573034
147288,"public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  String compType=Types.getTypeName(type);
  if (Types.isReferenceSignature(type)) {
    try {
      ti.resolveReferencedClass(compType);
    }
 catch (    LoadOnJPFRequired lre) {
      return ti.getPC();
    }
  }
  String clsName=""String_Node_Str"" + type;
  ClassInfo ci=ClassLoaderInfo.getCurrentResolvedClassInfo(clsName);
  if (!ci.isRegistered()) {
    ci.registerClass(ctx,ti);
    ci.setInitialized();
  }
  final StackFrame frame=ti.getModifiableTopFrame();
  arrayLength=frame.pop(ctx);
  final Conditional<Instruction> next=arrayLength.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer arrayLength){
      if (arrayLength < 0) {
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str""));
      }
      Heap heap=ti.getHeap();
      if (heap.isOutOfMemory()) {
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + Types.getTypeName(type) + ""String_Node_Str""+ arrayLength+ ""String_Node_Str""));
      }
      ElementInfo eiArray=heap.newArray(ctx,type,arrayLength,ti);
      int aRef=eiArray.getObjectRef();
      pushValue=ChoiceFactory.create(ctx,One.valueOf(aRef),pushValue);
      return getNext(ctx,ti);
    }
  }
);
  frame.pushRef(ctx,pushValue);
  return next;
}","public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  String compType=Types.getTypeName(type);
  if (Types.isReferenceSignature(type)) {
    try {
      ti.resolveReferencedClass(compType);
    }
 catch (    LoadOnJPFRequired lre) {
      return ti.getPC();
    }
  }
  String clsName=""String_Node_Str"" + type;
  ClassInfo ci=ClassLoaderInfo.getCurrentResolvedClassInfo(clsName);
  if (!ci.isRegistered()) {
    ci.registerClass(ctx,ti);
    ci.setInitialized();
  }
  final StackFrame frame=ti.getModifiableTopFrame();
  arrayLength=frame.pop(ctx);
  final Conditional<Instruction> next=arrayLength.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer arrayLength){
      if (arrayLength < 0) {
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str""));
      }
      Heap heap=ti.getHeap();
      if (heap.isOutOfMemory()) {
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + Types.getTypeName(type) + ""String_Node_Str""+ arrayLength+ ""String_Node_Str""));
      }
      ElementInfo eiArray=heap.newArray(ctx,type,arrayLength,ti);
      int aRef=eiArray.getObjectRef();
      pushValue=ChoiceFactory.create(ctx,One.valueOf(aRef),pushValue);
      return getNext(ctx,ti);
    }
  }
);
  frame.pushRef(ctx,pushValue);
  return next;
}",0.9902574808629088
147289,"public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  arrayRef=frame.pop(ctx);
  pushCtx=ctx;
  final Instruction thisInstruction=this;
  final Conditional<Instruction> next=arrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer arrayRef){
      if (arrayRef == MJIEnv.NULL) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<Instruction>(new EXCEPTION(thisInstruction,""String_Node_Str"",""String_Node_Str""));
      }
      ElementInfo ei=ti.getElementInfo(arrayRef);
      pushValue=ChoiceFactory.create(ctx,ei.arrayLength(),pushValue);
      return getNext(ctx,ti);
    }
  }
);
  frame.push(pushCtx,pushValue);
  return next;
}","public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  arrayRef=frame.pop(ctx);
  pushCtx=ctx;
  final Instruction thisInstruction=this;
  final Conditional<Instruction> next=arrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer arrayRef){
      if (arrayRef == MJIEnv.NULL) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<Instruction>(new EXCEPTION(thisInstruction,""String_Node_Str"",""String_Node_Str""));
      }
      ElementInfo ei=ti.getElementInfo(arrayRef);
      pushValue=ChoiceFactory.create(ctx,ei.arrayLength(),pushValue);
      return getNext(ctx,ti);
    }
  }
);
  frame.push(pushCtx,pushValue);
  return next;
}",0.9833926453143536
147290,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  final Instruction thisInstruction=this;
  Conditional<Integer> aref=frame.peek(ctx,1);
  final ArrayLoadInstruction instruction=this;
  pushCtx=ctx;
  Conditional<Instruction> next=aref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      if (aref == MJIEnv.NULL) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str""));
      }
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      if (isNewPorBoundary(e,ti)) {
        if (createAndSetArrayCG(e,ti,aref,peekIndex(ctx,ti),true)) {
          pushCtx=pushCtx.andNot(ctx);
          return new One<Instruction>(instruction);
        }
      }
      return new One<Instruction>(null);
    }
  }
);
  index=frame.pop(ctx);
  arrayRef=frame.pop(ctx);
  next=ChoiceFactory.create(pushCtx,arrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
        @Override public Conditional<Instruction> apply(        FeatureExpr ctx,        Integer index){
          try {
            final Conditional push=getPushValue(ctx,frame,e,index);
            pushValue=ChoiceFactory.create(ctx,push,pushValue);
            return getNext(ctx,ti);
          }
 catch (          ArrayIndexOutOfBoundsException ex) {
            pushCtx=pushCtx.andNot(ctx);
            return new One<Instruction>(new EXCEPTION(thisInstruction,java.lang.ArrayIndexOutOfBoundsException.class.getName(),Integer.toString(index)));
          }
        }
      }
);
    }
  }
),next);
  frame.push(pushCtx,pushValue,isReference());
  if (index.isOne() && aref.isOne()) {
    final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref.getValue());
    Object attr=e.getElementAttr(index.getValue());
    if (attr != null) {
      if (getElementSize() == 1) {
        frame.setOperandAttr(attr);
      }
 else {
        frame.setLongOperandAttr(attr);
      }
    }
  }
  return next;
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  final Instruction thisInstruction=this;
  Conditional<Integer> aref=frame.peek(ctx,1);
  final ArrayLoadInstruction instruction=this;
  pushCtx=ctx;
  Conditional<Instruction> next=aref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      if (aref == MJIEnv.NULL) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str""));
      }
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      if (isNewPorBoundary(e,ti)) {
        if (createAndSetArrayCG(e,ti,aref,peekIndex(ctx,ti),true)) {
          pushCtx=pushCtx.andNot(ctx);
          return new One<Instruction>(instruction);
        }
      }
      return new One<Instruction>(null);
    }
  }
);
  index=frame.pop(ctx);
  arrayRef=frame.pop(ctx);
  next=ChoiceFactory.create(pushCtx,arrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
        @Override public Conditional<Instruction> apply(        FeatureExpr ctx,        Integer index){
          try {
            final Conditional push=getPushValue(ctx,frame,e,index);
            pushValue=ChoiceFactory.create(ctx,push,pushValue);
            return getNext(ctx,ti);
          }
 catch (          ArrayIndexOutOfBoundsException ex) {
            pushCtx=pushCtx.andNot(ctx);
            return new One<Instruction>(new EXCEPTION(thisInstruction,java.lang.ArrayIndexOutOfBoundsException.class.getName(),Integer.toString(index)));
          }
        }
      }
);
    }
  }
),next);
  frame.push(pushCtx,pushValue,isReference());
  if (index.isOne() && aref.isOne()) {
    final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref.getValue());
    Object attr=e.getElementAttr(index.getValue());
    if (attr != null) {
      if (getElementSize() == 1) {
        frame.setOperandAttr(attr);
      }
 else {
        frame.setLongOperandAttr(attr);
      }
    }
  }
  return next;
}",0.9942434210526316
147291,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Integer> objRef=frame.peek(ctx);
  lastThis=objRef;
  final GETFIELD thisInstruction=this;
  pushCTX=ctx;
  Conditional<Instruction> next=objRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer objRef){
      if (objRef == MJIEnv.NULL) {
        pushCTX=pushCTX.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + fname + ""String_Node_Str""));
      }
      ElementInfo ei=ti.getElementInfoWithUpdatedSharedness(objRef);
      FieldInfo fi=getFieldInfo(ctx);
      if (fi == null) {
        pushCTX=pushCTX.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + fname + ""String_Node_Str""+ ei));
      }
      if (isNewPorFieldBoundary(ti,fi,objRef)) {
        if (createAndSetSharedFieldAccessCG(ei,ti)) {
          pushCTX=pushCTX.andNot(ctx);
          return new One<Instruction>(thisInstruction);
        }
      }
      return (Conditional<Instruction>)One.NULL;
    }
  }
);
  if (Conditional.isContradiction(pushCTX)) {
    return next;
  }
  frame.pop(pushCTX,1);
  next=ChoiceFactory.create(pushCTX,objRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer objRef){
      ElementInfo ei=ti.getElementInfoWithUpdatedSharedness(objRef);
      attr=ei.getFieldAttr(fi);
      if (fi.getStorageSize() == 1) {
        pushValue=ChoiceFactory.create(ctx,ei.get1SlotField(fi),pushValue);
      }
 else {
        pushValue=ChoiceFactory.create(ctx,ei.get2SlotField(fi),pushValue);
      }
      return getNext(ctx,ti);
    }
  }
),next);
  if (fi.isReference()) {
    frame.pushRef(pushCTX,pushValue);
  }
 else {
    frame.push(pushCTX,pushValue);
  }
  if (size == 1) {
    if (attr != null) {
      frame.setOperandAttr(attr);
    }
  }
 else {
    if (attr != null) {
      frame.setLongOperandAttr(attr);
    }
  }
  return next;
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Integer> objRef=frame.peek(ctx);
  lastThis=objRef;
  final GETFIELD thisInstruction=this;
  pushCTX=ctx;
  Conditional<Instruction> next=objRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer objRef){
      if (objRef == MJIEnv.NULL) {
        pushCTX=pushCTX.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + fname + ""String_Node_Str""));
      }
      ElementInfo ei=ti.getElementInfoWithUpdatedSharedness(objRef);
      FieldInfo fi=getFieldInfo(ctx);
      if (fi == null) {
        pushCTX=pushCTX.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + fname + ""String_Node_Str""+ ei));
      }
      if (isNewPorFieldBoundary(ti,fi,objRef)) {
        if (createAndSetSharedFieldAccessCG(ei,ti)) {
          pushCTX=pushCTX.andNot(ctx);
          return new One<Instruction>(thisInstruction);
        }
      }
      return (Conditional<Instruction>)One.NULL;
    }
  }
);
  if (Conditional.isContradiction(pushCTX)) {
    return next;
  }
  frame.pop(pushCTX,1);
  next=ChoiceFactory.create(pushCTX,objRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer objRef){
      ElementInfo ei=ti.getElementInfoWithUpdatedSharedness(objRef);
      attr=ei.getFieldAttr(fi);
      if (fi.getStorageSize() == 1) {
        pushValue=ChoiceFactory.create(ctx,ei.get1SlotField(fi),pushValue);
      }
 else {
        pushValue=ChoiceFactory.create(ctx,ei.get2SlotField(fi),pushValue);
      }
      return getNext(ctx,ti);
    }
  }
),next);
  if (fi.isReference()) {
    frame.pushRef(pushCTX,pushValue);
  }
 else {
    frame.push(pushCTX,pushValue);
  }
  if (size == 1) {
    if (attr != null) {
      frame.setOperandAttr(attr);
    }
  }
 else {
    if (attr != null) {
      frame.setLongOperandAttr(attr);
    }
  }
  return next;
}",0.9937106918238994
147292,"public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Integer> v1=frame.pop(ctx);
  final Conditional<Integer> v2=frame.pop(ctx);
  final IDIV thisInstruction=this;
  pushCtx=ctx;
  final Conditional<Instruction> returnInstruction=v1.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Integer v1){
      if (v1 == 0) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<Instruction>(new EXCEPTION(thisInstruction,""String_Node_Str"",""String_Node_Str""));
      }
      pushValue=ChoiceFactory.create(ctx,v2.mapr(new Function<Integer,Conditional<Integer>>(){
        @Override public Conditional<Integer> apply(        Integer v2){
          return new One<>(v2.intValue() / v1.intValue());
        }
      }
),pushValue);
      return getNext(ctx,ti);
    }
  }
).simplify();
  frame.push(pushCtx,pushValue);
  return returnInstruction;
}","public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Integer> v1=frame.pop(ctx);
  final Conditional<Integer> v2=frame.pop(ctx);
  final IDIV thisInstruction=this;
  pushCtx=ctx;
  final Conditional<Instruction> returnInstruction=v1.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Integer v1){
      if (v1 == 0) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<Instruction>(new EXCEPTION(thisInstruction,""String_Node_Str"",""String_Node_Str""));
      }
      pushValue=ChoiceFactory.create(ctx,v2.mapr(new Function<Integer,Conditional<Integer>>(){
        @Override public Conditional<Integer> apply(        Integer v2){
          return new One<>(v2.intValue() / v1.intValue());
        }
      }
),pushValue);
      return getNext(ctx,ti);
    }
  }
).simplify();
  frame.push(pushCtx,pushValue);
  return returnInstruction;
}",0.98670465337132
147293,"public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Integer> v1=frame.pop(ctx);
  final Conditional<Integer> v2=frame.pop(ctx);
  final Instruction thisInstruction=this;
  pushCtx=ctx;
  final Conditional<Instruction> returnInstruction=v1.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Integer v1){
      if (v1 == 0) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<Instruction>(new EXCEPTION(thisInstruction,java.lang.ArithmeticException.class.getName(),""String_Node_Str""));
      }
      pushValue=ChoiceFactory.create(ctx,v2.mapr(new Function<Integer,Conditional<Integer>>(){
        @Override public Conditional<Integer> apply(        Integer v2){
          return new One<>(v2.intValue() % v1.intValue());
        }
      }
),pushValue);
      return getNext(ctx,ti);
    }
  }
);
  frame.push(pushCtx,pushValue);
  return returnInstruction;
}","public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Integer> v1=frame.pop(ctx);
  final Conditional<Integer> v2=frame.pop(ctx);
  final Instruction thisInstruction=this;
  pushCtx=ctx;
  final Conditional<Instruction> returnInstruction=v1.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Integer v1){
      if (v1 == 0) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<Instruction>(new EXCEPTION(thisInstruction,java.lang.ArithmeticException.class.getName(),""String_Node_Str""));
      }
      pushValue=ChoiceFactory.create(ctx,v2.mapr(new Function<Integer,Conditional<Integer>>(){
        @Override public Conditional<Integer> apply(        Integer v2){
          return new One<>(v2.intValue() % v1.intValue());
        }
      }
),pushValue);
      return getNext(ctx,ti);
    }
  }
);
  frame.push(pushCtx,pushValue);
  return returnInstruction;
}",0.9870009285051068
147294,"public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  arrayLength=frame.pop(ctx);
  final Heap heap=ti.getHeap();
  pushCtx=ctx;
  final Conditional<Instruction> returnInstruction=arrayLength.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer arrayLength){
      if (arrayLength < 0) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str""));
      }
      String clsName=""String_Node_Str"" + type;
      ClassInfo ci=ClassLoaderInfo.getCurrentResolvedClassInfo(clsName);
      if (!ci.isRegistered()) {
        ci.registerClass(ctx,ti);
        ci.setInitialized();
      }
      if (heap.isOutOfMemory()) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + getTypeName() + ""String_Node_Str""+ arrayLength+ ""String_Node_Str""));
      }
      ElementInfo eiArray=heap.newArray(ctx,type,arrayLength,ti);
      int arrayRef=eiArray.getObjectRef();
      pushRef=ChoiceFactory.create(ctx,One.valueOf(arrayRef),pushRef);
      return getNext(ctx,ti);
    }
  }
);
  frame.pushRef(pushCtx,pushRef);
  return returnInstruction;
}","public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushRef=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  arrayLength=frame.pop(ctx);
  final Heap heap=ti.getHeap();
  pushCtx=ctx;
  final Conditional<Instruction> returnInstruction=arrayLength.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer arrayLength){
      if (arrayLength < 0) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str""));
      }
      String clsName=""String_Node_Str"" + type;
      ClassInfo ci=ClassLoaderInfo.getCurrentResolvedClassInfo(clsName);
      if (!ci.isRegistered()) {
        ci.registerClass(ctx,ti);
        ci.setInitialized();
      }
      if (heap.isOutOfMemory()) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + getTypeName() + ""String_Node_Str""+ arrayLength+ ""String_Node_Str""));
      }
      ElementInfo eiArray=heap.newArray(ctx,type,arrayLength,ti);
      int arrayRef=eiArray.getObjectRef();
      pushRef=ChoiceFactory.create(ctx,One.valueOf(arrayRef),pushRef);
      return getNext(ctx,ti);
    }
  }
);
  frame.pushRef(pushCtx,pushRef);
  return returnInstruction;
}",0.9904200442151806
147295,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  final Instruction thisInstruction=this;
  Conditional<Integer> aref=frame.peek(ctx,1);
  final ArrayLoadInstruction instruction=this;
  pushCtx=ctx;
  Conditional<Instruction> next=aref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      if (aref == MJIEnv.NULL) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str""));
      }
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      if (isNewPorBoundary(e,ti)) {
        if (createAndSetArrayCG(e,ti,aref,peekIndex(ctx,ti),true)) {
          pushCtx=pushCtx.andNot(ctx);
          return new One<Instruction>(instruction);
        }
      }
      return new One<Instruction>(null);
    }
  }
);
  index=frame.pop(ctx);
  arrayRef=frame.pop(ctx);
  next=ChoiceFactory.create(pushCtx,arrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
        @Override public Conditional<Instruction> apply(        FeatureExpr ctx,        Integer index){
          try {
            final Conditional push=getPushValue(ctx,frame,e,index);
            pushValue=ChoiceFactory.create(ctx,push,pushValue);
            return getNext(ctx,ti);
          }
 catch (          ArrayIndexOutOfBoundsException ex) {
            pushCtx=pushCtx.andNot(ctx);
            return new One<Instruction>(new EXCEPTION(thisInstruction,java.lang.ArrayIndexOutOfBoundsException.class.getName(),Integer.toString(index)));
          }
        }
      }
);
    }
  }
),next);
  frame.push(pushCtx,pushValue,isReference());
  if (index.isOne() && aref.isOne()) {
    final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref.getValue());
    Object attr=e.getElementAttr(index.getValue());
    if (attr != null) {
      if (getElementSize() == 1) {
        frame.setOperandAttr(attr);
      }
 else {
        frame.setLongOperandAttr(attr);
      }
    }
  }
  return next;
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  pushValue=One.valueOf(0);
  final StackFrame frame=ti.getModifiableTopFrame();
  final Instruction thisInstruction=this;
  Conditional<Integer> aref=frame.peek(ctx,1);
  final ArrayLoadInstruction instruction=this;
  pushCtx=ctx;
  Conditional<Instruction> next=aref.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      if (aref == MJIEnv.NULL) {
        pushCtx=pushCtx.andNot(ctx);
        return new One<>(new EXCEPTION(""String_Node_Str"",""String_Node_Str""));
      }
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      if (isNewPorBoundary(e,ti)) {
        if (createAndSetArrayCG(e,ti,aref,peekIndex(ctx,ti),true)) {
          pushCtx=pushCtx.andNot(ctx);
          return new One<Instruction>(instruction);
        }
      }
      return new One<Instruction>(null);
    }
  }
);
  if (Conditional.isContradiction(pushCtx)) {
    return next;
  }
  index=frame.pop(ctx);
  arrayRef=frame.pop(ctx).simplify(pushCtx);
  next=ChoiceFactory.create(pushCtx,arrayRef.mapf(FeatureExprFactory.True(),new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    Integer aref){
      final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref);
      return index.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Instruction>>(){
        @Override public Conditional<Instruction> apply(        FeatureExpr ctx,        Integer index){
          try {
            final Conditional push=getPushValue(ctx,frame,e,index);
            pushValue=ChoiceFactory.create(ctx,push,pushValue);
            return getNext(ctx,ti);
          }
 catch (          ArrayIndexOutOfBoundsException ex) {
            pushCtx=pushCtx.andNot(ctx);
            return new One<Instruction>(new EXCEPTION(thisInstruction,java.lang.ArrayIndexOutOfBoundsException.class.getName(),Integer.toString(index)));
          }
        }
      }
);
    }
  }
),next);
  frame.push(pushCtx,pushValue,isReference());
  if (index.isOne() && aref.isOne()) {
    final ElementInfo e=ti.getElementInfoWithUpdatedSharedness(aref.getValue());
    Object attr=e.getElementAttr(index.getValue());
    if (attr != null) {
      if (getElementSize() == 1) {
        frame.setOperandAttr(attr);
      }
 else {
        frame.setLongOperandAttr(attr);
      }
    }
  }
  return next;
}",0.9652
147296,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,ThreadInfo ti){
  AnnotationInfo[] annotations=getFieldInfo(ctx).getAnnotations();
  for (  AnnotationInfo ai : annotations) {
    if (ANNOTATION_CONDITIONAL.equals(ai.getName())) {
      StackFrame frame=ti.getModifiableTopFrame();
      FeatureExpr feature=Conditional.createFeature(fname);
      featureNumber++;
      System.out.println(""String_Node_Str"" + featureNumber + ""String_Node_Str""+ fname);
      IChoice<Integer> create=ChoiceFactory.create(feature,One.valueOf(1),One.valueOf(0));
      frame.pop(ctx);
      frame.push(ctx,create);
      break;
    }
  }
  if (!ti.isFirstStepInsn()) {
    FieldInfo fieldInfo;
    try {
      fieldInfo=getFieldInfo(ctx);
    }
 catch (    LoadOnJPFRequired lre) {
      return ti.getPC();
    }
    if (fieldInfo == null) {
      return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",(className + '.' + fname)));
    }
    ClassInfo ciField=fi.getClassInfo();
    if (!mi.isClinit(ciField) && ciField.pushRequiredClinits(ctx,ti)) {
      return ti.getPC();
    }
    ElementInfo ei=ciField.getStaticElementInfo();
    ei=ei.getInstanceWithUpdatedSharedness(ti);
    if (isNewPorFieldBoundary(ti)) {
      if (createAndSetSharedFieldAccessCG(ei,ti)) {
        return new One<Instruction>(this);
      }
    }
    ei=ei.getModifiableInstance();
    return put(ctx,ti,ti.getTopFrame(),ei,true);
  }
 else {
    ClassInfo ciField=fi.getClassInfo();
    ElementInfo ei=ciField.getStaticElementInfo();
    ei=ei.getModifiableInstance();
    return put(ctx,ti,ti.getTopFrame(),ei,false);
  }
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,ThreadInfo ti){
  if (getFieldInfo(ctx).getAnnotation(ANNOTATION_CONDITIONAL) != null) {
    StackFrame frame=ti.getModifiableTopFrame();
    FeatureExpr feature=Conditional.createFeature(fname);
    featureNumber++;
    System.out.println(""String_Node_Str"" + featureNumber + ""String_Node_Str""+ fname+ ""String_Node_Str""+ className);
    IChoice<Integer> create=ChoiceFactory.create(feature,One.valueOf(1),One.valueOf(0));
    frame.pop(ctx);
    frame.push(ctx,create);
  }
  if (!ti.isFirstStepInsn()) {
    FieldInfo fieldInfo;
    try {
      fieldInfo=getFieldInfo(ctx);
    }
 catch (    LoadOnJPFRequired lre) {
      return ti.getPC();
    }
    if (fieldInfo == null) {
      return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",(className + '.' + fname)));
    }
    ClassInfo ciField=fi.getClassInfo();
    if (!mi.isClinit(ciField) && ciField.pushRequiredClinits(ctx,ti)) {
      return ti.getPC();
    }
    ElementInfo ei=ciField.getStaticElementInfo();
    ei=ei.getInstanceWithUpdatedSharedness(ti);
    if (isNewPorFieldBoundary(ti)) {
      if (createAndSetSharedFieldAccessCG(ei,ti)) {
        return new One<Instruction>(this);
      }
    }
    ei=ei.getModifiableInstance();
    return put(ctx,ti,ti.getTopFrame(),ei,true);
  }
 else {
    ClassInfo ciField=fi.getClassInfo();
    ElementInfo ei=ciField.getStaticElementInfo();
    ei=ei.getModifiableInstance();
    return put(ctx,ti,ti.getTopFrame(),ei,false);
  }
}",0.9265644955300129
147297,"public String getCauseDetails(){
  int causeRef=ei.getReferenceField(""String_Node_Str"").getValue();
  if (causeRef != MJIEnv.NULL) {
    ElementInfo eiCause=ti.getElementInfo(causeRef);
    int msgRef=eiCause.getReferenceField(""String_Node_Str"").getValue();
    if (msgRef != MJIEnv.NULL) {
      ElementInfo eiMsg=ti.getElementInfo(msgRef);
      return eiMsg.asString().getValue();
    }
  }
  return null;
}","public Conditional<String> getCauseDetails(FeatureExpr ctx){
  Conditional<Integer> causeRef=ei.getReferenceField(""String_Node_Str"").simplify(ctx).simplify(getCtx());
  return causeRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<String>>(){
    @SuppressWarnings(""String_Node_Str"") @Override public Conditional<String> apply(    FeatureExpr ctx,    Integer causeRef){
      if (causeRef != MJIEnv.NULL) {
        ElementInfo eiCause=ti.getElementInfo(causeRef);
        Conditional<Integer> msgRef=eiCause.getReferenceField(""String_Node_Str"").simplify(ctx).simplify(getCtx());
        return msgRef.mapf(ctx,(        FeatureExpr ctx1,        Integer msgRef1) -> {
          if (msgRef1 != MJIEnv.NULL) {
            ElementInfo eiMsg=ti.getElementInfo(msgRef1);
            return eiMsg.asString().simplify(ctx1).simplify(getCtx());
          }
          return (Conditional<String>)One.NULL;
        }
);
      }
      return (Conditional<String>)One.NULL;
    }
  }
);
}",0.4992826398852223
147298,"public Conditional<Instruction> executeNative(final FeatureExpr ctx,ThreadInfo ti){
  Object ret=null;
  Object[] args=null;
  MJIEnv env=ti.getMJIEnv();
  NativeStackFrame nativeFrame=(NativeStackFrame)ti.getTopFrame();
  env.setCallEnvironment(this);
  if (isUnsatisfiedLinkError(env)) {
    return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + ci.getName() + '.'+ getName()));
  }
  try {
    args=nativeFrame.getArguments();
    if (RuntimeConstants.debug) {
      System.out.print(""String_Node_Str"" + name + ""String_Node_Str""+ mth.toString());
      for (      Object a : args) {
        System.out.print(""String_Node_Str"" + a.toString());
      }
      System.out.println();
    }
    boolean supportsConditional=false;
    for (    Class<?> t : mth.getParameterTypes()) {
      if (t.equals(Conditional.class)) {
        supportsConditional=true;
      }
    }
    boolean handled=false;
    if (!supportsConditional) {
      int i=0;
      for (      Object a : args) {
        if (a instanceof One) {
          args[i++]=((One<?>)a).getValue();
        }
 else         if (a instanceof IChoice) {
          Conditional<Object[]> unconditionalArgs=getUnconditionalArgs(args);
          ret=unconditionalArgs.map(new Function<Object[],Object>(){
            @Override public Object apply(            Object[] args){
              try {
                return mth.invoke(peer,args);
              }
 catch (              IllegalAccessException|InvocationTargetException e) {
                System.err.println(mth);
                for (                Object a : args) {
                  System.err.println(a.toString());
                }
                throw new RuntimeException(e);
              }
            }
          }
);
          handled=true;
          break;
        }
 else {
          args[i++]=a;
        }
      }
    }
    try {
      if (!handled) {
        if (mth.getParameterTypes()[1].isPrimitive()) {
          if (args[1] instanceof One) {
            args[1]=((One<?>)args[1]).getValue();
          }
          ret=mth.invoke(peer,args);
        }
 else {
          ret=mth.invoke(peer,args);
        }
      }
    }
 catch (    IllegalAccessException e) {
      System.err.println(mth);
      for (      Object a : args) {
        System.err.println(a.toString());
      }
      throw e;
    }
    if (env.hasException()) {
      return new One<>(ti.throwException(ctx,env.popException()));
    }
    StackFrame top=ti.getTopFrame();
    if (top == nativeFrame) {
      if (env.isInvocationRepeated()) {
        return new One<>(nativeFrame.getPC().getValue());
      }
 else {
        nativeFrame.setReturnValue(ret);
        nativeFrame.setReturnAttr(env.getReturnAttribute());
        return nativeFrame.getPC().mapf(ctx,new BiFunction<FeatureExpr,Instruction,Conditional<Instruction>>(){
          @Override public Conditional<Instruction> apply(          FeatureExpr f,          Instruction y){
            if (Conditional.isContradiction(f)) {
              return new One<>(y);
            }
            if (Conditional.isTautology(f)) {
              return new One<>(y.getNext());
            }
            return ChoiceFactory.create(ctx,new One<>(y.getNext()),new One<>(y));
          }
        }
).simplify();
      }
    }
 else {
      return top.getPC();
    }
  }
 catch (  IllegalArgumentException iax) {
    logger.warning(iax.toString());
    return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + ci.getName() + '.'+ getName()));
  }
catch (  IllegalAccessException ilax) {
    logger.warning(ilax.toString());
    return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + ci.getName() + '.'+ getName()));
  }
catch (  InvocationTargetException itx) {
    if (itx.getTargetException() instanceof ClassInfoException) {
      ClassInfoException cie=(ClassInfoException)itx.getTargetException();
      return new One<>(ti.createAndThrowException(ctx,cie.getExceptionClass(),cie.getMessage()));
    }
    if (itx.getTargetException() instanceof UncaughtException) {
      throw (UncaughtException)itx.getTargetException();
    }
    throw new JPFNativePeerException(""String_Node_Str"" + ci.getName() + '.'+ getName(),itx.getTargetException());
  }
}","public Conditional<Instruction> executeNative(final FeatureExpr ctx,ThreadInfo ti){
  Object ret=null;
  Object[] args=null;
  MJIEnv env=ti.getMJIEnv();
  NativeStackFrame nativeFrame=(NativeStackFrame)ti.getTopFrame();
  env.setCallEnvironment(this);
  if (isUnsatisfiedLinkError(env)) {
    return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + ci.getName() + '.'+ getName()));
  }
  try {
    args=nativeFrame.getArguments();
    if (RuntimeConstants.debug) {
      System.out.print(""String_Node_Str"" + name + ""String_Node_Str""+ mth.toString());
      for (      Object a : args) {
        System.out.print(""String_Node_Str"" + a.toString());
      }
      System.out.println();
    }
    boolean supportsConditional=false;
    for (    Class<?> t : mth.getParameterTypes()) {
      if (t.equals(Conditional.class)) {
        supportsConditional=true;
      }
    }
    boolean handled=false;
    if (!supportsConditional) {
      int i=0;
      for (      Object a : args) {
        if (a instanceof One) {
          args[i++]=((One<?>)a).getValue();
        }
 else         if (a instanceof IChoice) {
          Conditional<Object[]> unconditionalArgs=getUnconditionalArgs(args);
          ret=unconditionalArgs.map(new Function<Object[],Object>(){
            @Override public Object apply(            Object[] args){
              try {
                return mth.invoke(peer,args);
              }
 catch (              IllegalAccessException|InvocationTargetException e) {
                System.err.println(mth);
                for (                Object a : args) {
                  System.err.println(a.toString());
                }
                throw new RuntimeException(e);
              }
            }
          }
);
          handled=true;
          break;
        }
 else {
          args[i++]=a;
        }
      }
    }
    try {
      if (!handled) {
        if (mth.getParameterTypes()[1].isPrimitive()) {
          if (args[1] instanceof One) {
            args[1]=((One<?>)args[1]).getValue();
          }
          ret=mth.invoke(peer,args);
        }
 else {
          ret=mth.invoke(peer,args);
        }
      }
    }
 catch (    IllegalAccessException e) {
      System.err.println(mth);
      for (      Object a : args) {
        System.err.println(a.toString());
      }
      throw e;
    }
    if (env.hasException()) {
      return new One<>(ti.throwException(ctx,env.popException()));
    }
    StackFrame top=ti.getTopFrame();
    if (top == nativeFrame) {
      if (env.isInvocationRepeated()) {
        return new One<>(nativeFrame.getPC().getValue());
      }
 else {
        nativeFrame.setReturnValue(ret);
        nativeFrame.setReturnAttr(env.getReturnAttribute());
        return nativeFrame.getPC().mapf(ctx,new BiFunction<FeatureExpr,Instruction,Conditional<Instruction>>(){
          @Override public Conditional<Instruction> apply(          FeatureExpr f,          Instruction y){
            if (Conditional.isContradiction(f)) {
              return new One<>(y);
            }
            if (Conditional.isTautology(f)) {
              return new One<>(y.getNext());
            }
            return ChoiceFactory.create(ctx,new One<>(y.getNext()),new One<>(y));
          }
        }
).simplify();
      }
    }
 else {
      return top.getPC();
    }
  }
 catch (  IllegalArgumentException iax) {
    logger.warning(iax.toString());
    return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + ci.getName() + '.'+ getName()));
  }
catch (  IllegalAccessException ilax) {
    logger.warning(ilax.toString());
    return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str"" + ci.getName() + '.'+ getName()));
  }
catch (  InvocationTargetException itx) {
    if (itx.getTargetException() instanceof ClassInfoException) {
      ClassInfoException cie=(ClassInfoException)itx.getTargetException();
      return new One<>(new EXCEPTION(cie.getExceptionClass().toString(),cie.getMessage()));
    }
    if (itx.getTargetException() instanceof UncaughtException) {
      throw (UncaughtException)itx.getTargetException();
    }
    throw new JPFNativePeerException(""String_Node_Str"" + ci.getName() + '.'+ getName(),itx.getTargetException());
  }
}",0.9920727442294242
147299,"@MJI public long doubleToRawLongBits__D__J(MJIEnv env,int rcls,Conditional<Double> v0,FeatureExpr ctx){
  return Double.doubleToRawLongBits(v0.getValue());
}","@MJI public Conditional<Long> doubleToRawLongBits__D__J(MJIEnv env,int rcls,Conditional<Double> v0,FeatureExpr ctx){
  return v0.map(v -> Double.doubleToRawLongBits(v));
}",0.8902439024390244
147300,"public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  Conditional<Integer> allRefs=ti.getCalleeThis(ctx,getArgSize());
  Map<Integer,FeatureExpr> map=allRefs.toMap();
  Map<String,List<FeatureExpr>> classes=new TreeMap<>();
  if (JPF.SHARE_INVOCATIONS && map.size() > 1) {
    for (    Entry<Integer,FeatureExpr> e : map.entrySet()) {
      MethodInfo callee=getInvokedMethod(ctx.and(e.getValue()),ti,e.getKey());
      String methName=callee == null ? ""String_Node_Str"" : callee.getFullName();
      if (classes.containsKey(methName)) {
        classes.get(methName).add(e.getValue());
      }
 else {
        List<FeatureExpr> list=new ArrayList<>(map.size());
        list.add(e.getValue());
        classes.put(methName,list);
      }
    }
  }
  boolean splitRef=false;
  if ((JPF.SHARE_INVOCATIONS && classes.size() > 1) || (!JPF.SHARE_INVOCATIONS && map.size() > 1)) {
    splitRef=true;
  }
  for (  Entry<Integer,FeatureExpr> objRefEntry : map.entrySet()) {
    Integer objRef=objRefEntry.getKey();
    if (objRef == MJIEnv.NULL) {
      lastObj=MJIEnv.NULL;
      return ChoiceFactory.create(ctx.and(objRefEntry.getValue()),new One<Instruction>(new EXCEPTION(this,java.lang.NullPointerException.class.getName(),""String_Node_Str"" + mname + ""String_Node_Str"")),new One<>(typeSafeClone(mi))).simplify();
    }
    MethodInfo callee=getInvokedMethod(ctx.and(objRefEntry.getValue()),ti,objRef);
    ElementInfo ei=ti.getElementInfoWithUpdatedSharedness(objRef);
    if (!classes.isEmpty()) {
      FeatureExpr invocationCtx=FeatureExprFactory.False();
      for (      FeatureExpr e : classes.get(callee.getFullName())) {
        invocationCtx=invocationCtx.or(e);
      }
      ctx=ctx.and(invocationCtx);
    }
 else {
      ctx=ctx.and(objRefEntry.getValue());
    }
    if (callee == null) {
      String clsName=ti.getClassInfo(objRef).getName();
      return new One<>(ti.createAndThrowException(ctx,java.lang.NoSuchMethodError.class.getName(),clsName + '.' + mname));
    }
 else {
      if (callee.isAbstract()) {
        return new One<>(ti.createAndThrowException(ctx,java.lang.AbstractMethodError.class.getName(),callee.getFullName() + ""String_Node_Str"" + ei));
      }
    }
    if (callee.isSynchronized()) {
      if (checkSyncCG(ei,ti)) {
        return new One<Instruction>(this);
      }
    }
    setupCallee(ctx,ti,callee);
    if (!splitRef) {
      return ti.getPC();
    }
    return ChoiceFactory.create(ctx,ti.getPC(),new One<>(typeSafeClone(mi))).simplify();
  }
  throw new RuntimeException(""String_Node_Str"");
}","public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  Conditional<Integer> allRefs=ti.getCalleeThis(ctx,getArgSize());
  Map<Integer,FeatureExpr> map=allRefs.toMap();
  Map<String,List<FeatureExpr>> classes=new TreeMap<>();
  if (JPF.SHARE_INVOCATIONS && map.size() > 1) {
    for (    Entry<Integer,FeatureExpr> e : map.entrySet()) {
      MethodInfo callee=getInvokedMethod(ctx.and(e.getValue()),ti,e.getKey());
      String methName=callee == null ? ""String_Node_Str"" : callee.getFullName();
      if (classes.containsKey(methName)) {
        classes.get(methName).add(e.getValue());
      }
 else {
        List<FeatureExpr> list=new ArrayList<>(map.size());
        list.add(e.getValue());
        classes.put(methName,list);
      }
    }
  }
  boolean splitRef=false;
  if ((JPF.SHARE_INVOCATIONS && classes.size() > 1) || (!JPF.SHARE_INVOCATIONS && map.size() > 1)) {
    splitRef=true;
  }
  for (  Entry<Integer,FeatureExpr> objRefEntry : map.entrySet()) {
    Integer objRef=objRefEntry.getKey();
    if (objRef == MJIEnv.NULL) {
      lastObj=MJIEnv.NULL;
      return ChoiceFactory.create(ctx.and(objRefEntry.getValue()),new One<Instruction>(new EXCEPTION(this,java.lang.NullPointerException.class.getName(),""String_Node_Str"" + mname + ""String_Node_Str"")),ChoiceFactory.create(ctx,new One<>(typeSafeClone(mi)),ti.getPC())).simplify();
    }
    MethodInfo callee=getInvokedMethod(ctx.and(objRefEntry.getValue()),ti,objRef);
    ElementInfo ei=ti.getElementInfoWithUpdatedSharedness(objRef);
    if (!classes.isEmpty()) {
      FeatureExpr invocationCtx=FeatureExprFactory.False();
      for (      FeatureExpr e : classes.get(callee.getFullName())) {
        invocationCtx=invocationCtx.or(e);
      }
      ctx=ctx.and(invocationCtx);
    }
 else {
      ctx=ctx.and(objRefEntry.getValue());
    }
    if (callee == null) {
      String clsName=ti.getClassInfo(objRef).getName();
      return new One<>(ti.createAndThrowException(ctx,java.lang.NoSuchMethodError.class.getName(),clsName + '.' + mname));
    }
 else {
      if (callee.isAbstract()) {
        return new One<>(ti.createAndThrowException(ctx,java.lang.AbstractMethodError.class.getName(),callee.getFullName() + ""String_Node_Str"" + ei));
      }
    }
    if (callee.isSynchronized()) {
      if (checkSyncCG(ei,ti)) {
        return new One<>(this);
      }
    }
    setupCallee(ctx,ti,callee);
    if (!splitRef) {
      return ti.getPC();
    }
    return ChoiceFactory.create(ctx,ti.getPC(),new One<>(typeSafeClone(mi))).simplify();
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.9907048799380326
147301,"@Override protected void setStaticFields(Class<?> JVMCls,StaticElementInfo sei,MJIEnv env,FeatureExpr ctx) throws ConversionException {
  Field fld[]=JVMCls.getDeclaredFields();
  for (int i=0; i < fld.length; i++) {
    boolean isStatic=((Modifier.toString(fld[i].getModifiers())).indexOf(""String_Node_Str"") != -1);
    boolean isFinal=((Modifier.toString(fld[i].getModifiers())).indexOf(""String_Node_Str"") != -1);
    fld[i].setAccessible(true);
    FieldInfo fi=sei.getFieldInfo(fld[i].getName());
    if (fi != null) {
      if (isStatic && !isFinal) {
        if (fi.isReference()) {
          int JPFfldValue=MJIEnv.NULL;
          Object JVMfldValue=null;
          try {
            JVMfldValue=fld[i].get(JVMCls);
          }
 catch (          IllegalAccessException e2) {
            e2.printStackTrace();
          }
          JPFfldValue=sei.getReferenceField(fi).getValue();
          if (JVMfldValue == null) {
            JPFfldValue=MJIEnv.NULL;
          }
 else           if (JPFfldValue == MJIEnv.NULL || ConverterBase.objMapJPF2JVM.get(JPFfldValue) != JVMfldValue) {
            JPFfldValue=obtainJPFObj(JVMfldValue,env,ctx);
          }
 else           if (ConverterBase.objMapJPF2JVM.get(JPFfldValue) == JVMfldValue) {
            updateJPFObj(JVMfldValue,JPFfldValue,env,ctx);
          }
 else {
            throw new ConversionException(""String_Node_Str"");
          }
          sei.setReferenceField(ctx,fi,new One<>(JPFfldValue));
        }
 else {
          try {
            Utilities.setJPFPrimitiveField(ctx,sei,fi.getStorageOffset(),fld[i],JVMCls);
          }
 catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
}","@Override protected void setStaticFields(Class<?> JVMCls,StaticElementInfo sei,MJIEnv env,FeatureExpr ctx) throws ConversionException {
  Field fld[]=JVMCls.getDeclaredFields();
  for (int i=0; i < fld.length; i++) {
    boolean isStatic=((Modifier.toString(fld[i].getModifiers())).indexOf(""String_Node_Str"") != -1);
    boolean isFinal=((Modifier.toString(fld[i].getModifiers())).indexOf(""String_Node_Str"") != -1);
    fld[i].setAccessible(true);
    FieldInfo fi=sei.getFieldInfo(fld[i].getName());
    if (fi != null) {
      if (isStatic && !isFinal) {
        if (fi.isReference()) {
          try {
            final Object JVMfieldValue=fld[i].get(JVMCls);
            Conditional<Integer> conditionalJPFfieldValue=sei.getReferenceField(fi).simplify(ctx);
            conditionalJPFfieldValue=conditionalJPFfieldValue.mapf(ctx,(            FeatureExpr ctx1,            Integer JPFfieldValue) -> {
              try {
                if (JVMfieldValue == null) {
                  JPFfieldValue=MJIEnv.NULL;
                }
 else                 if (JPFfieldValue == MJIEnv.NULL || ConverterBase.objMapJPF2JVM.get(JPFfieldValue) != JVMfieldValue) {
                  JPFfieldValue=obtainJPFObj(JVMfieldValue,env,ctx1);
                }
 else                 if (ConverterBase.objMapJPF2JVM.get(JPFfieldValue) == JVMfieldValue) {
                  updateJPFObj(JVMfieldValue,JPFfieldValue,env,ctx1);
                }
 else {
                  throw new ConversionException(""String_Node_Str"");
                }
              }
 catch (              ConversionException e) {
                throw new RuntimeException(e);
              }
              return One.MJIEnvNULL;
            }
);
            sei.setReferenceField(ctx,fi,conditionalJPFfieldValue);
          }
 catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
        }
 else {
          try {
            Utilities.setJPFPrimitiveField(ctx,sei,fi.getStorageOffset(),fld[i],JVMCls);
          }
 catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
}",0.5053399322740297
147302,"public static void setFM(final String fmfile){
  cache.clear();
  features.clear();
  fm=(BDDFeatureModel)(fmfile.isEmpty() ? null : FeatureExprFactory.bdd().featureModelFactory().createFromDimacsFile(fmfile));
  if (fm != null) {
    createBDDFeatureModel();
  }
 else {
    bddFM=(BDDFeatureExpr)FeatureExprFactory.True();
  }
}","public static void setFM(final String fmfile){
  cache.clear();
  features.clear();
  fm=(BDDFeatureModel)(fmfile.isEmpty() ? null : FeatureExprFactory.bdd().featureModelFactory().createFromDimacsFile(fmfile));
  if (fm != null) {
    createBDDFeatureModel();
  }
 else {
    bddFM=(BDDFeatureExpr)FeatureExprFactory.bdd().True();
  }
}",0.990990990990991
147303,"@Override public int getStackWidth(){
  debufferAll();
  return super.getStackWidth();
}","@Override public int getStackWidth(){
  return super.getStackWidth();
}",0.8930817610062893
147304,"@MJI public int newInstance___3Ljava_lang_Object_2__Ljava_lang_Object_2(MJIEnv env,int mthRef,int argsRef,FeatureExpr ctx){
  ThreadInfo ti=env.getThreadInfo();
  DirectCallStackFrame frame=ti.getReturnedDirectCall();
  MethodInfo miCallee=getMethodInfo(ctx,env,mthRef);
  if (miCallee.isPrivate()) {
    if (ti.getTopFrame().getPrevious().mi.ci != miCallee.ci) {
      env.throwException(ctx,IllegalAccessException.class.getName());
      return MJIEnv.NULL;
    }
  }
  if (frame == null) {
    ClassInfo ci=miCallee.getClassInfo();
    if (ci.isAbstract()) {
      env.throwException(ctx,""String_Node_Str"");
      return MJIEnv.NULL;
    }
    int objRef=env.newObjectOfUncheckedClass(ctx,ci);
    frame=miCallee.createDirectCallStackFrame(ctx,ti,1);
    frame.setReflection();
    frame.setLocalReferenceVariable(ctx,0,objRef);
    int argOffset=frame.setReferenceArgument(ctx,0,objRef,null);
    if (!JPF_java_lang_reflect_Method.pushUnboxedArguments(env,miCallee,frame,argOffset,argsRef,ctx)) {
      return MJIEnv.NULL;
    }
    ti.pushFrame(frame);
    ci.pushRequiredClinits(ctx,ti);
    env.repeatInvocation();
    return MJIEnv.NULL;
  }
 else {
    int objRef=frame.getLocalVariable(ctx,0).getValue();
    return objRef;
  }
}","@MJI public int newInstance___3Ljava_lang_Object_2__Ljava_lang_Object_2(MJIEnv env,int mthRef,int argsRef,FeatureExpr ctx){
  ThreadInfo ti=env.getThreadInfo();
  DirectCallStackFrame frame=ti.getReturnedDirectCall();
  MethodInfo miCallee=getMethodInfo(ctx,env,mthRef);
  if (miCallee.isPrivate() && !env.getBooleanField(mthRef,""String_Node_Str"").getValue()) {
    if (ti.getTopFrame().getPrevious().mi.ci != miCallee.ci) {
      env.throwException(ctx,IllegalAccessException.class.getName());
      return MJIEnv.NULL;
    }
  }
  if (frame == null) {
    ClassInfo ci=miCallee.getClassInfo();
    if (ci.isAbstract()) {
      env.throwException(ctx,""String_Node_Str"");
      return MJIEnv.NULL;
    }
    int objRef=env.newObjectOfUncheckedClass(ctx,ci);
    frame=miCallee.createDirectCallStackFrame(ctx,ti,1);
    frame.setReflection();
    frame.setLocalReferenceVariable(ctx,0,objRef);
    int argOffset=frame.setReferenceArgument(ctx,0,objRef,null);
    if (!JPF_java_lang_reflect_Method.pushUnboxedArguments(env,miCallee,frame,argOffset,argsRef,ctx)) {
      return MJIEnv.NULL;
    }
    ti.pushFrame(frame);
    ci.pushRequiredClinits(ctx,ti);
    env.repeatInvocation();
    return MJIEnv.NULL;
  }
 else {
    int objRef=frame.getLocalVariable(ctx,0).getValue();
    return objRef;
  }
}",0.9759747932256794
147305,"@Override public Double apply(Double v2){
  return v2.doubleValue() / v1.doubleValue();
}","@Override public Double apply(Double v2){
  return v2.doubleValue() % v1.doubleValue();
}",0.9887640449438202
147306,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Double> v1=frame.popDouble(ctx);
  final Conditional<Double> v2=frame.popDouble(ctx);
  return v1.mapf(ctx,new BiFunction<FeatureExpr,Double,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Double v1){
      if (v1 == 0) {
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str""));
      }
      frame.push(ctx,v2.map(new Function<Double,Double>(){
        @Override public Double apply(        Double v2){
          return v2.doubleValue() / v1.doubleValue();
        }
      }
));
      return getNext(ctx,ti);
    }
  }
);
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Double> v1=frame.popDouble(ctx);
  final Conditional<Double> v2=frame.popDouble(ctx);
  return v1.mapf(ctx,new BiFunction<FeatureExpr,Double,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Double v1){
      frame.push(ctx,v2.map(new Function<Double,Double>(){
        @Override public Double apply(        Double v2){
          return v2.doubleValue() % v1.doubleValue();
        }
      }
));
      return getNext(ctx,ti);
    }
  }
);
}",0.9122562674094707
147307,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Float> v1=frame.popFloat(ctx);
  final Conditional<Float> v2=frame.popFloat(ctx);
  return v1.mapf(ctx,new BiFunction<FeatureExpr,Float,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Float v1){
      if (v1 == 0) {
        return new One<>(ti.createAndThrowException(ctx,""String_Node_Str"",""String_Node_Str""));
      }
      frame.push(ctx,v2.map(new Function<Float,Float>(){
        @Override public Float apply(        Float v2){
          return v2.floatValue() % v1.floatValue();
        }
      }
));
      return getNext(ctx,ti);
    }
  }
);
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,final ThreadInfo ti){
  final StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Float> v1=frame.popFloat(ctx);
  final Conditional<Float> v2=frame.popFloat(ctx);
  return v1.mapf(ctx,new BiFunction<FeatureExpr,Float,Conditional<Instruction>>(){
    @Override public Conditional<Instruction> apply(    FeatureExpr ctx,    final Float v1){
      frame.push(ctx,v2.map(new Function<Float,Float>(){
        @Override public Float apply(        Float v2){
          return v2.floatValue() % v1.floatValue();
        }
      }
));
      return getNext(ctx,ti);
    }
  }
);
}",0.9121813031161472
147308,"@MJI public int findSystemClass__Ljava_lang_String_2__Ljava_lang_Class_2(MJIEnv env,int objRef,int nameRef,FeatureExpr ctx){
  String cname=env.getStringObject(ctx,nameRef);
  checkForIllegalName(env,cname,ctx);
  if (env.hasException()) {
    return MJIEnv.NULL;
  }
  ClassLoaderInfo cl=ClassLoaderInfo.getCurrentSystemClassLoader();
  ClassInfo ci=cl.getResolvedClassInfo(ctx,cname);
{
    ClassInfo component=ci;
    while (ci.isArray()) {
      component=component.getComponentClassInfo();
    }
  }
  if (!ci.isRegistered()) {
    ci.registerClass(ctx,env.getThreadInfo());
  }
  return ci.getClassObjectRef();
}","@MJI public int findSystemClass__Ljava_lang_String_2__Ljava_lang_Class_2(MJIEnv env,int objRef,int nameRef,FeatureExpr ctx){
  String cname=env.getStringObject(ctx,nameRef);
  checkForIllegalName(env,cname,ctx);
  if (env.hasException()) {
    return MJIEnv.NULL;
  }
  ClassLoaderInfo cl=ClassLoaderInfo.getCurrentSystemClassLoader();
  ClassInfo ci=cl.getResolvedClassInfo(ctx,cname);
  while (ci.isArray()) {
    ci=ci.getComponentClassInfo();
  }
  if (!ci.isRegistered()) {
    ci.registerClass(ctx,env.getThreadInfo());
  }
  return ci.getClassObjectRef();
}",0.9170896785109984
147309,"protected Conditional<Instruction> put1(FeatureExpr ctx,ThreadInfo ti,StackFrame frame,ElementInfo eiFieldOwner,boolean initStatic){
  Object attr=frame.getOperandAttr(ctx);
  Conditional<Integer> val;
  Conditional<Integer> field=eiFieldOwner.get1SlotField(fi);
  if (initStatic) {
    val=frame.peek(ctx);
  }
 else {
    if (Conditional.isTautology(ctx)) {
      val=frame.peek(ctx);
    }
 else {
      val=ChoiceFactory.create(ctx,frame.peek(ctx),field).simplify();
    }
  }
  lastValue=val;
  if ((!field.simplify(ctx).equals(val.simplify(ctx))) || (eiFieldOwner.getFieldAttr(fi) != attr)) {
    coverField(ctx,eiFieldOwner,val,field,frame,ti);
    eiFieldOwner=eiFieldOwner.getModifiableInstance();
    if (fi.isReference()) {
      if (initStatic) {
        eiFieldOwner.setReferenceField(FeatureExprFactory.True(),fi,val);
      }
 else {
        eiFieldOwner.setReferenceField(ctx,fi,val);
      }
      eiFieldOwner.setFieldAttr(fi,attr);
      if (ti.useBreakOnExposure()) {
        if (ti.isFirstStepInsn()) {
          ElementInfo eiFieldValue=ti.getElementInfo(val.getValue());
          if ((eiFieldValue != null) && !eiFieldValue.isExposed() && !eiFieldValue.isReferencedBySameThreads(eiFieldOwner)) {
            eiFieldValue.setExposed(ti,eiFieldOwner);
            if (createAndSetSharedObjectExposureCG(eiFieldValue,ti)) {
              return new One<Instruction>(this);
            }
          }
        }
      }
    }
 else {
      eiFieldOwner.set1SlotField(ctx,fi,val);
      eiFieldOwner.setFieldAttr(fi,attr);
    }
  }
  frame=ti.getModifiableTopFrame();
  popOperands1(ctx,frame);
  return getNext(ctx,ti);
}","protected Conditional<Instruction> put1(FeatureExpr ctx,ThreadInfo ti,StackFrame frame,ElementInfo eiFieldOwner,boolean initStatic){
  Object attr=frame.getOperandAttr(ctx);
  Conditional<Integer> val;
  Conditional<Integer> field=eiFieldOwner.get1SlotField(fi);
  if (initStatic) {
    val=frame.peek(ctx);
  }
 else {
    if (Conditional.isTautology(ctx)) {
      val=frame.peek(ctx);
    }
 else {
      val=ChoiceFactory.create(ctx,frame.peek(ctx),field).simplify();
    }
  }
  lastValue=val;
  if ((!field.simplify(ctx).equals(val.simplify(ctx))) || (eiFieldOwner.getFieldAttr(fi) != attr)) {
    coverField(ctx,eiFieldOwner,val,field,frame,ti);
    eiFieldOwner=eiFieldOwner.getModifiableInstance();
    if (fi.isReference()) {
      if (initStatic) {
        eiFieldOwner.setReferenceField(FeatureExprFactory.True(),fi,val);
      }
 else {
        eiFieldOwner.setReferenceField(ctx,fi,val);
      }
      eiFieldOwner.setFieldAttr(fi,attr);
      if (ti.useBreakOnExposure()) {
        if (ti.isFirstStepInsn()) {
          ElementInfo eiFieldValue=ti.getElementInfo(val.simplify(ctx).getValue());
          if ((eiFieldValue != null) && !eiFieldValue.isExposed() && !eiFieldValue.isReferencedBySameThreads(eiFieldOwner)) {
            eiFieldValue.setExposed(ti,eiFieldOwner);
            if (createAndSetSharedObjectExposureCG(eiFieldValue,ti)) {
              return new One<Instruction>(this);
            }
          }
        }
      }
    }
 else {
      eiFieldOwner.set1SlotField(ctx,fi,val);
      eiFieldOwner.setFieldAttr(fi,attr);
    }
  }
  frame=ti.getModifiableTopFrame();
  popOperands1(ctx,frame);
  return getNext(ctx,ti);
}",0.9957498482088646
147310,"public static void printStatistics(PrintWriter pw,Reporter reporter){
  Statistics stat=reporter.getStatistics();
  pw.println(""String_Node_Str"" + formatHMS(reporter.getElapsedTime()));
  pw.println(""String_Node_Str"" + reporter.getElapsedTime());
  pw.println(""String_Node_Str"" + stat.newStates + ""String_Node_Str""+ stat.visitedStates+ ""String_Node_Str""+ stat.backtracked+ ""String_Node_Str""+ stat.endStates);
  pw.println(""String_Node_Str"" + stat.maxDepth + ""String_Node_Str""+ stat.constraints);
  pw.println(""String_Node_Str"" + stat.threadCGs + ""String_Node_Str""+ stat.signalCGs+ ""String_Node_Str""+ stat.monitorCGs+ ""String_Node_Str""+ stat.sharedAccessCGs+ ""String_Node_Str""+ stat.threadApiCGs+ ""String_Node_Str""+ stat.breakTransitionCGs+ ""String_Node_Str""+ stat.dataCGs);
  pw.println(""String_Node_Str"" + ""String_Node_Str"" + stat.nNewObjects + ""String_Node_Str""+ stat.nReleasedObjects+ ""String_Node_Str""+ stat.maxLiveObjects+ ""String_Node_Str""+ stat.gcCycles);
  pw.println(""String_Node_Str"" + stat.insns);
  pw.println(""String_Node_Str"" + (stat.insns / (reporter.getElapsedTime() / 1000l)));
  pw.println(""String_Node_Str"" + (stat.maxUsed >> 20) + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + ClassLoaderInfo.getNumberOfLoadedClasses() + ""String_Node_Str""+ MethodInfo.getNumberOfLoadedMethods());
}","public static void printStatistics(PrintWriter pw,Reporter reporter){
  Statistics stat=reporter.getStatistics();
  pw.println(""String_Node_Str"" + formatHMS(reporter.getElapsedTime()));
  pw.println(""String_Node_Str"" + reporter.getElapsedTime());
  pw.println(""String_Node_Str"" + stat.newStates + ""String_Node_Str""+ stat.visitedStates+ ""String_Node_Str""+ stat.backtracked+ ""String_Node_Str""+ stat.endStates);
  pw.println(""String_Node_Str"" + stat.maxDepth + ""String_Node_Str""+ stat.constraints);
  pw.println(""String_Node_Str"" + stat.threadCGs + ""String_Node_Str""+ stat.signalCGs+ ""String_Node_Str""+ stat.monitorCGs+ ""String_Node_Str""+ stat.sharedAccessCGs+ ""String_Node_Str""+ stat.threadApiCGs+ ""String_Node_Str""+ stat.breakTransitionCGs+ ""String_Node_Str""+ stat.dataCGs);
  pw.println(""String_Node_Str"" + ""String_Node_Str"" + stat.nNewObjects + ""String_Node_Str""+ stat.nReleasedObjects+ ""String_Node_Str""+ stat.maxLiveObjects+ ""String_Node_Str""+ stat.gcCycles);
  pw.println(""String_Node_Str"" + stat.insns);
  long elepsedTime=reporter.getElapsedTime() / 1000l;
  if (elepsedTime == 0) {
    pw.println(""String_Node_Str"" + (stat.insns));
  }
 else {
    pw.println(""String_Node_Str"" + (stat.insns / elepsedTime));
  }
  pw.println(""String_Node_Str"" + (stat.maxUsed >> 20) + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + ClassLoaderInfo.getNumberOfLoadedClasses() + ""String_Node_Str""+ MethodInfo.getNumberOfLoadedMethods());
}",0.9190371991247264
147311,"@MJI public int lastIndexOf__II__I(MJIEnv env,int objref,int c,int fromIndex,FeatureExpr ctx){
  int vref=env.getReferenceField(ctx,objref,""String_Node_Str"").getValue();
  ElementInfo ei=env.getElementInfo(vref);
  char[] values=((CharArrayFields)ei.getFields()).asCharArray().getValue();
  int len=values.length;
  if (fromIndex < 0) {
    return -1;
  }
  if (fromIndex > len - 1) {
    fromIndex=len - 1;
  }
  for (int i=fromIndex; i > 0; i--) {
    if (values[i] == c) {
      return i;
    }
  }
  return -1;
}","@MJI public int lastIndexOf__II__I(MJIEnv env,int objref,int c,int fromIndex,FeatureExpr ctx){
  int vref=env.getReferenceField(ctx,objref,""String_Node_Str"").getValue();
  ElementInfo ei=env.getElementInfo(vref);
  char[] values=((CharArrayFields)ei.getFields()).asCharArray().getValue();
  int len=values.length;
  if (fromIndex < 0) {
    return -1;
  }
  if (fromIndex > len - 1) {
    fromIndex=len - 1;
  }
  for (int i=fromIndex; i >= 0; i--) {
    if (values[i] == c) {
      return i;
    }
  }
  return -1;
}",0.999031945788964
147312,"@Test(timeout=120000) public void testFactory_double() throws Exception {
  if (verifyNoPropertyViolation(config)) {
    org.apache.commons.lang3.math.FractionTest object=new org.apache.commons.lang3.math.FractionTest();
    object.testFactory_double();
  }
}","@Ignore @Test public void testFactory_double() throws Exception {
  if (verifyNoPropertyViolation(config)) {
    org.apache.commons.lang3.math.FractionTest object=new org.apache.commons.lang3.math.FractionTest();
    object.testFactory_double();
  }
}",0.9529411764705882
147313,"@Override public Conditional<Instruction> execute(FeatureExpr ctx,ThreadInfo ti){
  StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Float> v=frame.popFloat(ctx);
  frame.push(ctx,mapr(v,null));
  return getNext(ctx,ti);
}","@Override public Conditional<Instruction> execute(FeatureExpr ctx,ThreadInfo ti){
  StackFrame frame=ti.getModifiableTopFrame();
  Conditional<Float> v=frame.popFloat(ctx);
  frame.push(ctx,mapr2(v,null));
  return getNext(ctx,ti);
}",0.9978494623655914
147314,"/** 
 * this is the backend for System.arraycopy implementations, but since it only throws general exceptions it can also be used in other contexts that require type and objRef checking note that we have to do some additional type checking here because we store reference arrays as int[], i.e. for reference arrays we can't rely on System.arraycopy to do the element type checking for us
 * @throws java.lang.ArrayIndexOutOfBoundsException
 * @throws java.lang.ArrayStoreException
 */
public void copyElements(FeatureExpr ctx,ThreadInfo ti,ElementInfo eiSrc,int srcIdx,int dstIdx,int length){
  if (!isArray()) {
    throw new ArrayStoreException(""String_Node_Str"" + ci.getName());
  }
  if (!eiSrc.isArray()) {
    throw new ArrayStoreException(""String_Node_Str"" + eiSrc.getClassInfo().getName());
  }
  boolean isRefArray=isReferenceArray();
  if (eiSrc.isReferenceArray() != isRefArray) {
    throw new ArrayStoreException(""String_Node_Str"" + eiSrc.getClassInfo().getName() + ""String_Node_Str""+ ci.getName());
  }
  if (isRefArray) {
    ClassInfo dstElementCi=ci.getComponentClassInfo();
    Conditional<Integer>[] srcRefs=((ArrayFields)eiSrc.fields).asReferenceArray();
    int max=srcIdx + length;
    for (int i=srcIdx; i < max; i++) {
      List<Integer> erefs=srcRefs[i].simplify(ctx).toList();
      for (      int eref : erefs) {
        if (eref != MJIEnv.NULL) {
          ClassInfo srcElementCi=ti.getClassInfo(eref);
          if (!srcElementCi.isInstanceOf(dstElementCi)) {
            throw new ArrayStoreException(""String_Node_Str"" + dstElementCi.getName() + ""String_Node_Str""+ srcElementCi.getName());
          }
        }
      }
    }
  }
  checkIsModifiable();
  Conditional<?> srcVals=((ArrayFields)eiSrc.getFields()).getValues();
  Conditional<?> dstVals=((ArrayFields)fields).getValues();
  if (srcVals instanceof One && dstVals instanceof One) {
    if (srcVals.getValue() instanceof Conditional[]) {
      try {
        Fields src=eiSrc.getFields();
        if (src == fields) {
          src=src.clone();
        }
        if (src instanceof DoubleArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setDoubleValue(ctx,dstIdx + i,src.getDoubleValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof LongArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setLongValue(ctx,dstIdx + i,src.getLongValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof IntArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setIntValue(ctx,dstIdx + i,src.getIntValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof ByteArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setByteValue(ctx,dstIdx + i,src.getByteValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof ReferenceArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setReferenceValue(ctx,dstIdx + i,src.getReferenceValue(i + srcIdx));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + src.getClass());
        }
      }
 catch (      JPFException e) {
        throw new ArrayStoreException(e.getMessage());
      }
    }
 else {
      System.arraycopy(srcVals.getValue(),srcIdx,dstVals.getValue(),dstIdx,length);
    }
  }
 else {
    if (fields instanceof CharArrayFields) {
      for (int i=0; i < length; i++) {
        fields.setCharValue(ctx,dstIdx + i,eiSrc.getFields().getCharValue(i + srcIdx));
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  if (eiSrc.hasFieldAttr()) {
    if (eiSrc == this && srcIdx < dstIdx) {
      for (int i=length - 1; i >= 0; i--) {
        Object a=eiSrc.getElementAttr(srcIdx + i);
        setElementAttr(dstIdx + i,a);
      }
    }
 else {
      for (int i=0; i < length; i++) {
        Object a=eiSrc.getElementAttr(srcIdx + i);
        setElementAttr(dstIdx + i,a);
      }
    }
  }
}","/** 
 * this is the backend for System.arraycopy implementations, but since it only throws general exceptions it can also be used in other contexts that require type and objRef checking note that we have to do some additional type checking here because we store reference arrays as int[], i.e. for reference arrays we can't rely on System.arraycopy to do the element type checking for us
 * @throws java.lang.ArrayIndexOutOfBoundsException
 * @throws java.lang.ArrayStoreException
 */
public void copyElements(FeatureExpr ctx,ThreadInfo ti,ElementInfo eiSrc,int srcIdx,int dstIdx,int length){
  if (ctx.isContradiction()) {
    return;
  }
  if (!isArray()) {
    throw new ArrayStoreException(""String_Node_Str"" + ci.getName());
  }
  if (!eiSrc.isArray()) {
    throw new ArrayStoreException(""String_Node_Str"" + eiSrc.getClassInfo().getName());
  }
  boolean isRefArray=isReferenceArray();
  if (eiSrc.isReferenceArray() != isRefArray) {
    throw new ArrayStoreException(""String_Node_Str"" + eiSrc.getClassInfo().getName() + ""String_Node_Str""+ ci.getName());
  }
  if (isRefArray) {
    ClassInfo dstElementCi=ci.getComponentClassInfo();
    Conditional<Integer>[] srcRefs=((ArrayFields)eiSrc.fields).asReferenceArray();
    int max=srcIdx + length;
    for (int i=srcIdx; i < max; i++) {
      List<Integer> erefs=srcRefs[i].simplify(ctx).toList();
      for (      int eref : erefs) {
        if (eref != MJIEnv.NULL) {
          ClassInfo srcElementCi=ti.getClassInfo(eref);
          if (!srcElementCi.isInstanceOf(dstElementCi)) {
            throw new ArrayStoreException(""String_Node_Str"" + dstElementCi.getName() + ""String_Node_Str""+ srcElementCi.getName());
          }
        }
      }
    }
  }
  checkIsModifiable();
  Conditional<?> srcVals=((ArrayFields)eiSrc.getFields()).getValues();
  Conditional<?> dstVals=((ArrayFields)fields).getValues();
  if (srcVals instanceof One && dstVals instanceof One) {
    if (srcVals.getValue() instanceof Conditional[]) {
      try {
        Fields src=eiSrc.getFields();
        if (src == fields) {
          src=src.clone();
        }
        if (src instanceof DoubleArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setDoubleValue(ctx,dstIdx + i,src.getDoubleValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof LongArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setLongValue(ctx,dstIdx + i,src.getLongValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof IntArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setIntValue(ctx,dstIdx + i,src.getIntValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof ByteArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setByteValue(ctx,dstIdx + i,src.getByteValue(i + srcIdx));
          }
        }
 else         if (eiSrc.getFields() instanceof ReferenceArrayFields) {
          for (int i=0; i < length; i++) {
            fields.setReferenceValue(ctx,dstIdx + i,src.getReferenceValue(i + srcIdx));
          }
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + src.getClass());
        }
      }
 catch (      JPFException e) {
        throw new ArrayStoreException(e.getMessage());
      }
    }
 else {
      System.arraycopy(srcVals.getValue(),srcIdx,dstVals.getValue(),dstIdx,length);
    }
  }
 else {
    if (fields instanceof CharArrayFields) {
      for (int i=0; i < length; i++) {
        fields.setCharValue(ctx,dstIdx + i,eiSrc.getFields().getCharValue(i + srcIdx));
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  if (eiSrc.hasFieldAttr()) {
    if (eiSrc == this && srcIdx < dstIdx) {
      for (int i=length - 1; i >= 0; i--) {
        Object a=eiSrc.getElementAttr(srcIdx + i);
        setElementAttr(dstIdx + i,a);
      }
    }
 else {
      for (int i=0; i < length; i++) {
        Object a=eiSrc.getElementAttr(srcIdx + i);
        setElementAttr(dstIdx + i,a);
      }
    }
  }
}",0.9942039708965348
147315,"@MJI public void arraycopy__Ljava_lang_Object_2ILjava_lang_Object_2II__V(final MJIEnv env,int clsObjRef,Conditional<Integer> srcArrayRef,final Conditional<Integer> srcIdx,final Conditional<Integer> dstArrayRef,final Conditional<Integer> dstIdx,final Conditional<Integer> length,FeatureExpr ctx){
  srcArrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Integer>>(){
    @Override public Conditional<Integer> apply(    FeatureExpr ctx,    final Integer srcArrayRef){
      dstArrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Integer>>(){
        @Override public Conditional<Integer> apply(        FeatureExpr ctx,        final Integer dstArrayRef){
          length.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Integer>>(){
            @Override public Conditional<Integer> apply(            FeatureExpr ctx,            final Integer length){
              if (ctx.isContradiction()) {
                return null;
              }
              if ((srcArrayRef.intValue() == MJIEnv.NULL) || (dstArrayRef.intValue() == MJIEnv.NULL)) {
                env.throwException(ctx,""String_Node_Str"");
                return null;
              }
              final ElementInfo eiSrc=env.getElementInfo(srcArrayRef);
              final ElementInfo eiDst=env.getModifiableElementInfo(dstArrayRef);
              try {
                srcIdx.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Object>>(){
                  @Override public Conditional<Object> apply(                  FeatureExpr ctx,                  final Integer srcIdx){
                    dstIdx.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Object>>(){
                      @Override public Conditional<Object> apply(                      FeatureExpr ctx,                      Integer dstIdx){
                        eiDst.copyElements(ctx,env.getThreadInfo(),eiSrc,srcIdx,dstIdx,length);
                        return null;
                      }
                    }
);
                    return null;
                  }
                }
);
              }
 catch (              IndexOutOfBoundsException iobx) {
                env.throwException(ctx,""String_Node_Str"",iobx.getMessage());
              }
catch (              ArrayStoreException asx) {
                env.throwException(ctx,""String_Node_Str"",asx.getMessage());
              }
              return null;
            }
          }
);
          return null;
        }
      }
);
      return null;
    }
  }
);
}","@MJI public void arraycopy__Ljava_lang_Object_2ILjava_lang_Object_2II__V(final MJIEnv env,int clsObjRef,Conditional<Integer> srcArrayRef,final Conditional<Integer> srcIdx,final Conditional<Integer> dstArrayRef,final Conditional<Integer> dstIdx,final Conditional<Integer> length,FeatureExpr ctx){
  srcArrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Integer>>(){
    @Override public Conditional<Integer> apply(    FeatureExpr ctx,    final Integer srcArrayRef){
      dstArrayRef.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Integer>>(){
        @Override public Conditional<Integer> apply(        FeatureExpr ctx,        final Integer dstArrayRef){
          length.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Integer>>(){
            @Override public Conditional<Integer> apply(            FeatureExpr ctx,            final Integer length){
              if (ctx.isContradiction()) {
                return null;
              }
              if ((srcArrayRef.intValue() == MJIEnv.NULL) || (dstArrayRef.intValue() == MJIEnv.NULL)) {
                env.throwException(ctx,""String_Node_Str"");
                return null;
              }
              final ElementInfo eiSrc=env.getElementInfo(srcArrayRef);
              final ElementInfo eiDst=env.getModifiableElementInfo(dstArrayRef);
              try {
                srcIdx.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Object>>(){
                  @Override public Conditional<Object> apply(                  FeatureExpr ctx,                  final Integer srcIdx){
                    dstIdx.mapf(ctx,new BiFunction<FeatureExpr,Integer,Conditional<Object>>(){
                      @Override public Conditional<Object> apply(                      FeatureExpr ctx,                      Integer dstIdx){
                        if (ctx.isContradiction()) {
                          return null;
                        }
                        eiDst.copyElements(ctx,env.getThreadInfo(),eiSrc,srcIdx,dstIdx,length);
                        return null;
                      }
                    }
);
                    return null;
                  }
                }
);
              }
 catch (              IndexOutOfBoundsException iobx) {
                env.throwException(ctx,""String_Node_Str"",iobx.getMessage());
              }
catch (              ArrayStoreException asx) {
                env.throwException(ctx,""String_Node_Str"",asx.getMessage());
              }
              return null;
            }
          }
);
          return null;
        }
      }
);
      return null;
    }
  }
);
}",0.97702492211838
147316,"private Conditional<Entry> popEntry(FeatureExpr ctx){
  Conditional<Entry> result=stack.simplify(ctx).mapf(ctx,new BiFunction<FeatureExpr,Stack,Conditional<Entry>>(){
    @Override public Conditional<Entry> apply(    final FeatureExpr f,    final Stack s){
      Stack clone=s.copy();
      boolean ref=clone.isRef(0);
      int res=clone.pop();
      if (stackCTX.equivalentTo(f)) {
        stack=new One<>(clone);
      }
 else {
        stack=ChoiceFactory.create(f,new One<>(clone),stack);
      }
      return new One<>(new Entry(res,ref));
    }
  }
).simplify();
  stack=stack.simplify();
  return result;
}","private Conditional<Entry> popEntry(FeatureExpr ctx,final boolean copyRef){
  Conditional<Entry> result=stack.simplify(ctx).mapf(ctx,new BiFunction<FeatureExpr,Stack,Conditional<Entry>>(){
    @Override public Conditional<Entry> apply(    final FeatureExpr f,    final Stack s){
      Stack clone=s.copy();
      boolean ref=copyRef ? clone.isRef(0) : false;
      int res=clone.pop();
      if (stackCTX.equivalentTo(f)) {
        stack=new One<>(clone);
      }
 else {
        stack=ChoiceFactory.create(f,new One<>(clone),stack);
      }
      return new One<>(new Entry(res,ref));
    }
  }
).simplify();
  stack=stack.simplify();
  return result;
}",0.9574132492113564
147317,"@Override public void storeOperand(final FeatureExpr ctx,final int index){
  if (Conditional.isTautology(ctx)) {
    locals[index]=popEntry(ctx);
  }
 else {
    if (locals[index] == null) {
      locals[index]=new One<>(new Entry(MJIEnv.NULL,false));
    }
    locals[index]=ChoiceFactory.create(ctx,popEntry(ctx),locals[index]).simplify();
  }
}","@Override public void storeOperand(final FeatureExpr ctx,final int index){
  if (Conditional.isTautology(ctx)) {
    locals[index]=popEntry(ctx,true);
  }
 else {
    if (locals[index] == null) {
      locals[index]=new One<>(new Entry(MJIEnv.NULL,false));
    }
    locals[index]=ChoiceFactory.create(ctx,popEntry(ctx,true),locals[index]).simplify();
  }
}",0.9857954545454546
147318,"@Override public void storeLongOperand(final FeatureExpr ctx,final int index){
  stack.mapf(ctx,new BiFunction<FeatureExpr,Stack,Conditional<Entry>>(){
    @Override public Conditional<Entry> apply(    final FeatureExpr f,    final Stack stack){
      if (Conditional.isContradiction(f)) {
        return null;
      }
      locals[index + 1]=ChoiceFactory.create(f,new One<>(new Entry(stack.pop(),false)),locals[index + 1]);
      locals[index]=ChoiceFactory.create(f,new One<>(new Entry(stack.pop(),false)),locals[index]);
      return null;
    }
  }
);
  locals[index]=locals[index].simplify();
  locals[index + 1]=locals[index + 1].simplify();
  stack=stack.simplify();
}","@Override public void storeLongOperand(final FeatureExpr ctx,final int index){
  stack.mapf(ctx,new BiFunction<FeatureExpr,Stack,Conditional<Entry>>(){
    @Override public Conditional<Entry> apply(    final FeatureExpr f,    final Stack stack){
      if (Conditional.isContradiction(f)) {
        return null;
      }
      locals[index + 1]=ChoiceFactory.create(f,popEntry(f,false),locals[index + 1]);
      locals[index]=ChoiceFactory.create(f,popEntry(f,false),locals[index]);
      return null;
    }
  }
);
  locals[index]=locals[index].simplify();
  locals[index + 1]=locals[index + 1].simplify();
  stack=stack.simplify();
}",0.6880733944954128
147319,"@Test(timeout=20000) public void runZipMe(){
  if (verifyNoPropertyViolation(config)) {
    try {
      ZipTest.main(new String[]{""String_Node_Str""});
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Test public void runZipMe(){
  if (verifyNoPropertyViolation(config)) {
    try {
      ZipTest.main(new String[]{""String_Node_Str""});
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9653579676674364
147320,"@Override protected void pushReturnValue(FeatureExpr ctx,StackFrame fr){
  int ival;
  long lval;
  int retSize=1;
  if (ret != null) {
switch (retType) {
case Types.T_BOOLEAN:
      ival=Types.booleanToInt(((Boolean)ret).booleanValue());
    fr.push(ctx,new One<>(ival));
  break;
case Types.T_BYTE:
fr.push(ctx,new One<>((int)(((Byte)ret).byteValue())));
break;
case Types.T_CHAR:
fr.push(ctx,new One<>((int)((Character)ret).charValue()));
break;
case Types.T_SHORT:
fr.push(ctx,new One<>((int)((Short)ret).shortValue()));
break;
case Types.T_INT:
fr.push(ctx,new One<>((Integer)ret));
break;
case Types.T_LONG:
fr.pushLong(((Long)ret).longValue());
retSize=2;
break;
case Types.T_FLOAT:
ival=Types.floatToInt(((Float)ret).floatValue());
fr.push(ctx,new One<>(ival));
break;
case Types.T_DOUBLE:
lval=Types.doubleToLong(((Double)ret).doubleValue());
fr.pushLong(lval);
retSize=2;
break;
default :
fr.push(ctx,((Integer)ret).intValue(),true);
}
if (retAttr != null) {
if (retSize == 1) {
fr.setOperandAttr(retAttr);
}
 else {
fr.setLongOperandAttr(retAttr);
}
}
}
}","@Override protected void pushReturnValue(FeatureExpr ctx,StackFrame fr){
  int ival;
  long lval;
  int retSize=1;
  if (ret != null) {
switch (retType) {
case Types.T_BOOLEAN:
      ival=Types.booleanToInt(((Boolean)ret).booleanValue());
    fr.push(ctx,new One<>(ival));
  break;
case Types.T_BYTE:
fr.push(ctx,new One<>((int)(((Byte)ret).byteValue())));
break;
case Types.T_CHAR:
fr.push(ctx,new One<>((int)((Character)ret).charValue()));
break;
case Types.T_SHORT:
fr.push(ctx,new One<>((int)((Short)ret).shortValue()));
break;
case Types.T_INT:
fr.push(ctx,new One<>((Integer)ret));
break;
case Types.T_LONG:
fr.push(ctx,new One<>(((Long)ret).longValue()));
retSize=2;
break;
case Types.T_FLOAT:
ival=Types.floatToInt(((Float)ret).floatValue());
fr.push(ctx,new One<>(ival));
break;
case Types.T_DOUBLE:
lval=Types.doubleToLong(((Double)ret).doubleValue());
fr.push(ctx,new One<>(lval));
retSize=2;
break;
default :
fr.push(ctx,((Integer)ret).intValue(),true);
}
if (retAttr != null) {
if (retSize == 1) {
fr.setOperandAttr(retAttr);
}
 else {
fr.setLongOperandAttr(retAttr);
}
}
}
}",0.9823584029712163
147321,"public void dup2_x1(FeatureExpr ctx){
  Object bAnn=null, cAnn=null;
  int ts, td;
  int t=top();
  stack.dup2_x1(ctx);
  ts=t;
  td=t + 2;
  if (attrs != null) {
    attrs[td]=cAnn=attrs[ts];
  }
  ts--;
  td--;
  if (attrs != null) {
    attrs[td]=bAnn=attrs[ts];
  }
  ts=t - 2;
  td=t;
  if (attrs != null) {
    attrs[td]=attrs[ts];
  }
  td=ts;
  if (attrs != null) {
    attrs[td]=bAnn;
  }
  td++;
  if (attrs != null) {
    attrs[td]=cAnn;
  }
}","public void dup2_x1(FeatureExpr ctx){
  Object bAnn=null, cAnn=null;
  int ts, td;
  int t=attrs == null ? -1 : top();
  stack.dup2_x1(ctx);
  ts=t;
  td=t + 2;
  if (attrs != null) {
    attrs[td]=cAnn=attrs[ts];
  }
  ts--;
  td--;
  if (attrs != null) {
    attrs[td]=bAnn=attrs[ts];
  }
  ts=t - 2;
  td=t;
  if (attrs != null) {
    attrs[td]=attrs[ts];
  }
  td=ts;
  if (attrs != null) {
    attrs[td]=bAnn;
  }
  td++;
  if (attrs != null) {
    attrs[td]=cAnn;
  }
}",0.977395048439182
147322,"@MJI public int append__Ljava_lang_String_2__Ljava_lang_StringBuilder_2(MJIEnv env,int objref,int sref){
  String s=env.getStringObject(sref);
  if (s == null)   s=""String_Node_Str"";
  return appendString(NativeMethodInfo.CTX,env,objref,s);
}","@MJI public int append__Ljava_lang_String_2__Ljava_lang_StringBuilder_2(MJIEnv env,int objref,int sref){
  Conditional<String> s=env.getConditionalStringObject(sref);
  s=s.simplify(NativeMethodInfo.CTX).map(new Function<String,String>(){
    @Override public String apply(    String s){
      if (s == null) {
        return ""String_Node_Str"";
      }
      return s;
    }
  }
).simplify();
  return appendString(NativeMethodInfo.CTX,env,objref,s.getValue());
}",0.5049645390070922
147323,"int appendString(FeatureExpr ctx,MJIEnv env,int objref,Conditional<String> conditionalS){
  Conditional<Integer> condAref=env.getReferenceField(ctx,objref,""String_Node_Str"");
  Map<Integer,FeatureExpr> arefMap=condAref.toMap();
  for (  Integer aref : arefMap.keySet()) {
    FeatureExpr arefCtx=ctx.and(arefMap.get(aref));
    Map<String,FeatureExpr> sMap=conditionalS.simplify(arefCtx).toMap();
    for (    String s : sMap.keySet()) {
      FeatureExpr stringCtx=arefCtx.and(sMap.get(s));
      final int slen=s.length();
      final int alen=env.getArrayLength(aref);
      Conditional<Integer> condCount=env.getIntField(ctx,objref,""String_Node_Str"").simplify(stringCtx);
      Map<Integer,FeatureExpr> map=condCount.toMap();
      for (      Integer count : map.keySet()) {
        FeatureExpr currentCtx=stringCtx.and(map.get(count));
        int i, j;
        int n=count + slen;
        if (n < alen) {
          for (i=count, j=0; i < n; i++, j++) {
            env.setCharArrayElement(currentCtx,aref,i,s.charAt(j));
          }
        }
 else {
          int m=3 * alen / 2;
          if (m < n) {
            m=n;
          }
          int arefNew=env.newCharArray(currentCtx,m);
          for (i=0; i < count; i++) {
            env.setCharArrayElement(currentCtx,arefNew,i,env.getCharArrayElement(aref,i).simplify(currentCtx).getValue());
          }
          for (j=0; i < n; i++, j++) {
            env.setCharArrayElement(currentCtx,arefNew,i,s.charAt(j));
          }
          env.setReferenceField(currentCtx,objref,""String_Node_Str"",arefNew);
        }
        env.setIntField(currentCtx,objref,""String_Node_Str"",n);
      }
    }
  }
  return objref;
}","int appendString(FeatureExpr ctx,MJIEnv env,int objref,Conditional<String> conditionalS){
  Conditional<Integer> condAref=env.getReferenceField(ctx,objref,""String_Node_Str"");
  Map<Integer,FeatureExpr> arefMap=condAref.toMap();
  for (  Integer aref : arefMap.keySet()) {
    FeatureExpr arefCtx=ctx.and(arefMap.get(aref));
    Map<String,FeatureExpr> sMap=conditionalS.simplify(arefCtx).toMap();
    for (    String s : sMap.keySet()) {
      FeatureExpr stringCtx=arefCtx.and(sMap.get(s));
      final int slen=s.length();
      final int alen=env.getArrayLength(aref);
      Conditional<Integer> condCount=env.getIntField(ctx,objref,""String_Node_Str"").simplify(stringCtx);
      Map<Integer,FeatureExpr> map=condCount.toMap();
      for (      Integer count : map.keySet()) {
        FeatureExpr currentCtx=stringCtx.and(map.get(count));
        int i, j;
        int n=count + slen;
        if (n < alen) {
          for (i=count, j=0; i < n; i++, j++) {
            env.setCharArrayElement(currentCtx,aref,i,s.charAt(j));
          }
        }
 else {
          int m=3 * alen / 2;
          if (m < n) {
            m=n;
          }
          int arefNew=env.newCharArray(currentCtx,m);
          for (i=0; i < count; i++) {
            Map<Character,FeatureExpr> charMap=env.getCharArrayElement(aref,i).simplify(currentCtx).toMap();
            for (            char c : charMap.keySet()) {
              env.setCharArrayElement(currentCtx.and(charMap.get(c)),arefNew,i,c);
            }
          }
          for (j=0; i < n; i++, j++) {
            env.setCharArrayElement(currentCtx,arefNew,i,s.charAt(j));
          }
          env.setReferenceField(currentCtx,objref,""String_Node_Str"",arefNew);
        }
        env.setIntField(currentCtx,objref,""String_Node_Str"",n);
      }
    }
  }
  return objref;
}",0.922988834812482
147324,"int appendString(FeatureExpr ctx,MJIEnv env,int objref,String s){
  final int slen=s.length();
  Conditional<Integer> condAref=env.getReferenceField(ctx,objref,""String_Node_Str"");
  Map<Integer,FeatureExpr> arefMap=condAref.toMap();
  for (  Integer aref : arefMap.keySet()) {
    FeatureExpr arefCtx=ctx.and(arefMap.get(aref));
    final int alen=env.getArrayLength(aref);
    Conditional<Integer> condCount=env.getIntField(ctx,objref,""String_Node_Str"").simplify(arefCtx);
    Map<Integer,FeatureExpr> map=condCount.toMap();
    for (    Integer count : map.keySet()) {
      FeatureExpr currentCtx=arefCtx.and(map.get(count));
      int i, j;
      int n=count + slen;
      if (n < alen) {
        for (i=count, j=0; i < n; i++, j++) {
          env.setCharArrayElement(currentCtx,aref,i,s.charAt(j));
        }
      }
 else {
        int m=3 * alen / 2;
        if (m < n) {
          m=n;
        }
        int arefNew=env.newCharArray(currentCtx,m);
        for (i=0; i < count; i++) {
          env.setCharArrayElement(currentCtx,arefNew,i,env.getCharArrayElement(aref,i).simplify(currentCtx).getValue());
        }
        for (j=0; i < n; i++, j++) {
          env.setCharArrayElement(currentCtx,arefNew,i,s.charAt(j));
        }
        env.setReferenceField(NativeMethodInfo.CTX,objref,""String_Node_Str"",arefNew);
      }
      env.setIntField(currentCtx,objref,""String_Node_Str"",n);
    }
  }
  return objref;
}","int appendString(FeatureExpr ctx,MJIEnv env,int objref,Conditional<String> conditionalS){
  Conditional<Integer> condAref=env.getReferenceField(ctx,objref,""String_Node_Str"");
  Map<Integer,FeatureExpr> arefMap=condAref.toMap();
  for (  Integer aref : arefMap.keySet()) {
    FeatureExpr arefCtx=ctx.and(arefMap.get(aref));
    Map<String,FeatureExpr> sMap=conditionalS.simplify(arefCtx).toMap();
    for (    String s : sMap.keySet()) {
      FeatureExpr stringCtx=arefCtx.and(sMap.get(s));
      final int slen=s.length();
      final int alen=env.getArrayLength(aref);
      Conditional<Integer> condCount=env.getIntField(ctx,objref,""String_Node_Str"").simplify(stringCtx);
      Map<Integer,FeatureExpr> map=condCount.toMap();
      for (      Integer count : map.keySet()) {
        FeatureExpr currentCtx=stringCtx.and(map.get(count));
        int i, j;
        int n=count + slen;
        if (n < alen) {
          for (i=count, j=0; i < n; i++, j++) {
            env.setCharArrayElement(currentCtx,aref,i,s.charAt(j));
          }
        }
 else {
          int m=3 * alen / 2;
          if (m < n) {
            m=n;
          }
          int arefNew=env.newCharArray(currentCtx,m);
          for (i=0; i < count; i++) {
            env.setCharArrayElement(currentCtx,arefNew,i,env.getCharArrayElement(aref,i).simplify(currentCtx).getValue());
          }
          for (j=0; i < n; i++, j++) {
            env.setCharArrayElement(currentCtx,arefNew,i,s.charAt(j));
          }
          env.setReferenceField(currentCtx,objref,""String_Node_Str"",arefNew);
        }
        env.setIntField(currentCtx,objref,""String_Node_Str"",n);
      }
    }
  }
  return objref;
}",0.8735483870967742
147325,"@MJI public int append__Ljava_lang_String_2__Ljava_lang_StringBuilder_2(MJIEnv env,int objref,int sref){
  Conditional<String> s=env.getConditionalStringObject(sref);
  s=s.simplify(NativeMethodInfo.CTX).map(new Function<String,String>(){
    @Override public String apply(    String s){
      if (s == null) {
        return ""String_Node_Str"";
      }
      return s;
    }
  }
).simplify();
  return appendString(NativeMethodInfo.CTX,env,objref,s.getValue());
}","@MJI public int append__Ljava_lang_String_2__Ljava_lang_StringBuilder_2(MJIEnv env,int objref,int sref){
  Conditional<String> s=env.getConditionalStringObject(sref);
  s=s.simplify(NativeMethodInfo.CTX).map(new Function<String,String>(){
    @Override public String apply(    String s){
      if (s == null) {
        return ""String_Node_Str"";
      }
      return s;
    }
  }
).simplify();
  return appendString(NativeMethodInfo.CTX,env,objref,s);
}",0.9879781420765028
147326,"@Override public Conditional<T> simplify(FeatureExpr ctx){
  if ((ctx.and(featureExpr)).isContradiction()) {
    return elseBranch.simplify(ctx.andNot(featureExpr));
  }
  if ((ctx.andNot(featureExpr)).isContradiction()) {
    return thenBranch.simplify(ctx.and(featureExpr));
  }
  final Conditional<T> tb=thenBranch == null ? null : thenBranch.simplify(ctx.and(featureExpr));
  final Conditional<T> eb=elseBranch == null ? null : elseBranch.simplify(ctx.andNot(featureExpr));
  if (tb == null) {
    return eb;
  }
  if (eb == null) {
    return tb;
  }
  if (tb.equals(eb)) {
    return tb;
  }
  if (tb instanceof One) {
    if (eb instanceof Choice) {
      if (((Choice<T>)eb).thenBranch.equals(tb)) {
        return new Choice<>(featureExpr.or(((Choice<T>)eb).featureExpr),tb,((Choice<T>)eb).elseBranch);
      }
      if (((Choice<T>)eb).elseBranch.equals(tb)) {
        return new Choice<>(featureExpr.orNot(((Choice<T>)eb).featureExpr),tb,((Choice<T>)eb).thenBranch);
      }
    }
  }
  if (eb instanceof One) {
    if (tb instanceof Choice) {
      if (((Choice<T>)tb).thenBranch.equals(eb)) {
        return new Choice<>(featureExpr.andNot(((Choice<T>)tb).featureExpr),((Choice<T>)tb).elseBranch,eb);
      }
      if (((Choice<T>)tb).elseBranch.equals(eb)) {
        return new Choice<>(featureExpr.and(((Choice<T>)tb).featureExpr),((Choice<T>)tb).thenBranch,eb);
      }
    }
  }
  return new Choice<>((featureExpr),tb,eb);
}","@Override public Conditional<T> simplify(FeatureExpr ctx){
  if ((ctx.and(featureExpr)).isContradiction()) {
    return elseBranch.simplify(ctx.andNot(featureExpr));
  }
  if ((ctx.andNot(featureExpr)).isContradiction()) {
    return thenBranch.simplify(ctx.and(featureExpr));
  }
  final Conditional<T> tb=thenBranch == null ? null : thenBranch.simplify(ctx.and(featureExpr));
  final Conditional<T> eb=elseBranch == null ? null : elseBranch.simplify(ctx.andNot(featureExpr));
  if (tb == null) {
    return eb;
  }
  if (eb == null) {
    return tb;
  }
  if (tb.equals(eb)) {
    return tb;
  }
  return new Choice<>((featureExpr),tb,eb);
}",0.6113243761996161
147327,"@Override public Object put(Object keyObject,Object valueObject){
  if (keyObject == null) {
    throw exception(""String_Node_Str"");
  }
 else   if (!(keyObject instanceof String)) {
    throw exception(""String_Node_Str"" + keyObject);
  }
  if (valueObject != null && !(valueObject instanceof String)) {
    throw exception(""String_Node_Str"" + valueObject);
  }
  String key=(String)keyObject;
  String value=(String)valueObject;
  if (key.length() == 0) {
    throw exception(""String_Node_Str"");
  }
  if (key.charAt(0) == KEY_PREFIX) {
    processPseudoProperty(key,value);
    return null;
  }
 else {
    String k=expandString(null,key);
    if (!(value == null)) {
      String v=(String)value;
      if (k.charAt(k.length() - 1) == '+') {
        k=k.substring(0,k.length() - 1);
        return append(k,v,null);
      }
 else       if (k.charAt(0) == '+') {
        k=k.substring(1);
        return prepend(k,v,null);
      }
 else {
        v=normalize(expandString(k,v));
        if (v != null) {
          return setKey(k,v);
        }
 else {
          return removeKey(k);
        }
      }
    }
 else {
      return removeKey(k);
    }
  }
}","@Override public Object put(Object keyObject,Object valueObject){
  if (keyObject == null) {
    throw exception(""String_Node_Str"");
  }
 else   if (!(keyObject instanceof String)) {
    throw exception(""String_Node_Str"" + keyObject);
  }
  if (valueObject != null && !(valueObject instanceof String)) {
    throw exception(""String_Node_Str"" + valueObject);
  }
  String key=(String)keyObject;
  String value=(String)valueObject;
  if (key.length() == 0) {
    throw exception(""String_Node_Str"");
  }
  if (key.charAt(0) == KEY_PREFIX) {
    processPseudoProperty(key,value);
    return null;
  }
 else {
    String k=expandString(null,key);
    if (!(value == null)) {
      String v=value;
      if (k.charAt(k.length() - 1) == '+') {
        k=k.substring(0,k.length() - 1);
        return append(k,v,null);
      }
 else       if (k.charAt(0) == '+') {
        k=k.substring(1);
        return prepend(k,v,null);
      }
 else {
        v=normalize(expandString(k,v));
        if (v != null) {
          return setKey(k,v);
        }
 else {
          return removeKey(k);
        }
      }
    }
 else {
      return removeKey(k);
    }
  }
}",0.996524761077324
147328,"/** 
 * Signature_attribute { u2 attribute_name_index; u4 attr-length; u2 signature-index << pos }
 */
public void parseSignatureAttr(ClassFileReader reader,Object tag){
  int cpIdx=readU2();
  setSignature(reader,tag,(String)utf8At(cpIdx));
}","/** 
 * Signature_attribute { u2 attribute_name_index; u4 attr-length; u2 signature-index << pos }
 */
public void parseSignatureAttr(ClassFileReader reader,Object tag){
  int cpIdx=readU2();
  setSignature(reader,tag,utf8At(cpIdx));
}",0.9832635983263598
147329,"public Byte next(){
  if (next == buffer.length) {
    throw new NoSuchElementException();
  }
  Byte e=(Byte)buffer[next];
  next++;
  return e;
}","public Byte next(){
  if (next == buffer.length) {
    throw new NoSuchElementException();
  }
  Byte e=buffer[next];
  next++;
  return e;
}",0.9791666666666666
147330,"public static <A>TypedIterator<A> typedIterator(Object head,Class<A> type){
  if (head == null) {
    return (TypedIterator<A>)emptyTypedIterator;
  }
 else {
    return new TypedIterator<A>(head,type);
  }
}","public static <A>TypedIterator<A> typedIterator(Object head,Class<A> type){
  if (head == null) {
    return (TypedIterator<A>)emptyTypedIterator;
  }
 else {
    return new TypedIterator<>(head,type);
  }
}",0.9975903614457832
147331,"/** 
 * Finds all resources in the classpath with the given name. Returns an  enumeration of the URL objects.
 */
public String[] findResources(String resourceName){
  ArrayList<String> resources=new ArrayList(0);
  for (  String cpe : getClassPathElements()) {
    String URL=getResourceURL(cpe,resourceName);
    if (URL != null) {
      if (!resources.contains(URL)) {
        resources.add(URL);
      }
    }
  }
  return resources.toArray(new String[resources.size()]);
}","/** 
 * Finds all resources in the classpath with the given name. Returns an  enumeration of the URL objects.
 */
public String[] findResources(String resourceName){
  ArrayList<String> resources=new ArrayList<>(0);
  for (  String cpe : getClassPathElements()) {
    String URL=getResourceURL(cpe,resourceName);
    if (URL != null) {
      if (!resources.contains(URL)) {
        resources.add(URL);
      }
    }
  }
  return resources.toArray(new String[resources.size()]);
}",0.997907949790795
147332,"/** 
 * creates callerSlots dummy Stackframe for testing of operand/local operations NOTE - TESTING ONLY! this does not have a MethodInfo
 */
protected StackFrame(int nLocals,int nOperands){
  stackBase=nLocals;
  stack=new StackHandler(nLocals,nOperands);
}","/** 
 * creates callerSlots dummy Stackframe for testing of operand/local operations NOTE - TESTING ONLY! this does not have a MethodInfo
 */
protected StackFrame(int nLocals,int nOperands){
  stackBase=nLocals;
  this.nLocals=nLocals;
  stack=new StackHandler(nLocals,nOperands);
}",0.9555555555555556
147333,"@Test public void testListIteration(){
  Object[] v={new Integer(2),""String_Node_Str""};
  for (  Object a : ObjectList.iterator(attr)) {
    fail(""String_Node_Str"");
  }
  for (int i=v.length - 1; i >= 0; i--) {
    attr=ObjectList.add(attr,v[i]);
  }
  int len=ObjectList.size(attr);
  for (int i=0; i < len; i++) {
    Object a=ObjectList.get(attr,i);
    System.out.printf(""String_Node_Str"",i,a.toString());
    assertEquals(a,v[i]);
  }
  attr=ObjectList.add(attr,""String_Node_Str"");
  attr=ObjectList.add(attr,new Integer(4));
  int i=0;
  for (Integer a=ObjectList.getFirst(attr,Integer.class); a != null; a=ObjectList.getNext(attr,Integer.class,a)) {
    System.out.println(a);
    i++;
  }
  assertTrue(i == 2);
  System.out.println(""String_Node_Str"");
  i=0;
  for (  Object a : ObjectList.iterator(attr)) {
    System.out.printf(""String_Node_Str"",i++,a.toString());
  }
  assertTrue(i == 4);
  System.out.println(""String_Node_Str"");
  i=0;
  for (  String a : ObjectList.typedIterator(attr,String.class)) {
    System.out.printf(""String_Node_Str"",i++,a.toString());
  }
  assertTrue(i == 2);
  System.out.println(""String_Node_Str"");
  i=0;
  for (  float f : ObjectList.typedIterator(attr,Float.class)) {
    System.out.printf(""String_Node_Str"",i++,f);
  }
  assertTrue(i == 0);
}","@Test public void testListIteration(){
  Object[] v={new Integer(2),""String_Node_Str""};
  for (  @SuppressWarnings(""String_Node_Str"") Object a : ObjectList.iterator(attr)) {
    fail(""String_Node_Str"");
  }
  for (int i=v.length - 1; i >= 0; i--) {
    attr=ObjectList.add(attr,v[i]);
  }
  int len=ObjectList.size(attr);
  for (int i=0; i < len; i++) {
    Object a=ObjectList.get(attr,i);
    System.out.printf(""String_Node_Str"",i,a.toString());
    assertEquals(a,v[i]);
  }
  attr=ObjectList.add(attr,""String_Node_Str"");
  attr=ObjectList.add(attr,new Integer(4));
  int i=0;
  for (Integer a=ObjectList.getFirst(attr,Integer.class); a != null; a=ObjectList.getNext(attr,Integer.class,a)) {
    System.out.println(a);
    i++;
  }
  assertTrue(i == 2);
  System.out.println(""String_Node_Str"");
  i=0;
  for (  Object a : ObjectList.iterator(attr)) {
    System.out.printf(""String_Node_Str"",i++,a.toString());
  }
  assertTrue(i == 4);
  System.out.println(""String_Node_Str"");
  i=0;
  for (  String a : ObjectList.typedIterator(attr,String.class)) {
    System.out.printf(""String_Node_Str"",i++,a.toString());
  }
  assertTrue(i == 2);
  System.out.println(""String_Node_Str"");
  i=0;
  for (  float f : ObjectList.typedIterator(attr,Float.class)) {
    System.out.printf(""String_Node_Str"",i++,f);
  }
  assertTrue(i == 0);
}",0.9858616736721436
147334,"public static boolean prepare(Path outputPath) throws IOException {
  LOGGER.debug(""String_Node_Str"",outputPath.toString());
  final int nPaths=outputPath.getNameCount();
  LOGGER.debug(""String_Node_Str"",nPaths);
  if (nPaths > 1) {
    Path abs=outputPath.toAbsolutePath();
    LOGGER.debug(""String_Node_Str"",abs.toString());
    Path folders=abs.getParent();
    LOGGER.debug(""String_Node_Str"",folders.toString());
    LOGGER.debug(""String_Node_Str"",folders.toString());
    Files.createDirectories(folders);
  }
  return Files.exists(outputPath);
}","public static boolean prepare(Path outputPath) throws IOException {
  LOGGER.debug(""String_Node_Str"",outputPath.toString());
  final int nPaths=outputPath.getNameCount();
  LOGGER.debug(""String_Node_Str"",nPaths);
  if (nPaths > 1) {
    Path abs=outputPath.toAbsolutePath();
    LOGGER.debug(""String_Node_Str"",abs.toString());
    Path folders=abs.getParent();
    LOGGER.debug(""String_Node_Str"",folders.toString());
    LOGGER.debug(""String_Node_Str"",folders.toString());
    while (Files.isSymbolicLink(folders)) {
      folders=Files.readSymbolicLink(folders);
    }
    Files.createDirectories(folders);
  }
  return Files.exists(outputPath);
}",0.9190992493744788
147335,"static Section handleHeadline(XMLEventReader rdr,Communication ptr) throws XMLStreamException {
  if (!ptr.isSetText())   throw new IllegalArgumentException(""String_Node_Str"");
  XMLEvent hl=rdr.nextEvent();
  StartElement hlse=hl.asStartElement();
  QName hlqn=hlse.getName();
  final String hlPart=hlqn.getLocalPart();
  LOGGER.debug(""String_Node_Str"",hlPart);
  Characters hlChars=rdr.nextEvent().asCharacters();
  final int charOff=hlChars.getLocation().getCharacterOffset();
  final int clen=hlChars.getData().length();
  final int endTextOffset=charOff + clen;
  final String hlText=ptr.getText().substring(charOff,endTextOffset);
  SimpleImmutableEntry<Integer,Integer> pads=trimSpacing(hlText);
  TextSpan ts=new TextSpan(charOff + pads.getKey(),endTextOffset - pads.getValue());
  Section s=new Section();
  s.setKind(""String_Node_Str"");
  s.setTextSpan(ts);
  s.addToNumberList(0);
  return s;
}","static Section handleHeadline(XMLEventReader rdr,Communication ptr) throws XMLStreamException {
  if (!ptr.isSetText())   throw new IllegalArgumentException(""String_Node_Str"");
  XMLEvent hl=rdr.nextEvent();
  StartElement hlse=hl.asStartElement();
  QName hlqn=hlse.getName();
  final String hlPart=hlqn.getLocalPart();
  LOGGER.debug(""String_Node_Str"",hlPart);
  Characters hlChars=rdr.nextEvent().asCharacters();
  final int charOff=hlChars.getLocation().getCharacterOffset();
  final int clen=hlChars.getData().length();
  final int endTextOffset=charOff + clen;
  final String hlText=ptr.getText().substring(charOff,endTextOffset);
  LOGGER.debug(""String_Node_Str"",charOff,clen,endTextOffset,hlText);
  String trimmed=hlText.trim();
  TextSpan ts;
  if (trimmed.isEmpty()) {
    ts=new TextSpan(charOff,endTextOffset);
  }
 else {
    SimpleImmutableEntry<Integer,Integer> pads=trimSpacing(hlText);
    ts=new TextSpan(charOff + pads.getKey(),endTextOffset - pads.getValue());
  }
  Section s=new Section();
  s.setKind(""String_Node_Str"");
  s.setTextSpan(ts);
  s.addToNumberList(0);
  return s;
}",0.8934262948207171
147336,"@Test public void storeFetch() throws Exception {
  SimpleAccumuloConfig config=new SimpleAccumuloConfig(namespace,SimpleAccumuloConfig.DEFAULT_TABLE,SimpleAccumuloConfig.DEFAULT_INSTANCE,SimpleAccumuloConfig.DEFAULT_ZOOKEEPERS);
  int numThreads=1;
  try (SimpleAccumuloStore store=new SimpleAccumuloStore(config,numThreads)){
    store.connect(user,password);
    store.store(comm);
  }
   try (SimpleAccumuloFetch fetch=new SimpleAccumuloFetch(config,numThreads)){
    fetch.connect(user,password);
    FetchRequest r=new FetchRequest();
    r.addToCommunicationIds(comm.getId());
    FetchResult res=fetch.fetch(r);
    System.out.println(""String_Node_Str"" + res);
    assertEquals(res.getCommunicationsSize(),1);
    assertEquals(res.getCommunications().get(0).getText(),comm.getText());
  }
 }","/** 
 * Works on test1-3 where you have access to the r8n* machines which host accumulo. Does not work on whatever machine runs CI, presumably because it cannot reach r8n*.
 */
public void storeFetch() throws Exception {
  SimpleAccumuloConfig config=new SimpleAccumuloConfig(namespace,SimpleAccumuloConfig.DEFAULT_TABLE,SimpleAccumuloConfig.DEFAULT_INSTANCE,SimpleAccumuloConfig.DEFAULT_ZOOKEEPERS);
  int numThreads=1;
  try (SimpleAccumuloStore store=new SimpleAccumuloStore(config,numThreads)){
    store.connect(user,password);
    store.store(comm);
  }
   try (SimpleAccumuloFetch fetch=new SimpleAccumuloFetch(config,numThreads)){
    fetch.connect(user,password);
    FetchRequest r=new FetchRequest();
    r.addToCommunicationIds(comm.getId());
    FetchResult res=fetch.fetch(r);
    System.out.println(""String_Node_Str"" + res);
    assertEquals(res.getCommunicationsSize(),1);
    assertEquals(res.getCommunications().get(0).getText(),comm.getText());
  }
 }",0.896551724137931
147337,"@Test public void storeFetchServers() throws Exception {
  Runnable r=new Runnable(){
    @Override public void run(){
      try {
        SimpleAccumuloStore.main(new String[]{""String_Node_Str"",user,""String_Node_Str"",passwordStr,""String_Node_Str"",namespace,""String_Node_Str"",String.valueOf(port)});
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  Thread t=new Thread(r);
  t.run();
  Thread.sleep(500);
  try (TTransport transport=new TFramedTransport(new TSocket(""String_Node_Str"",port),Integer.MAX_VALUE)){
    transport.open();
    TProtocol protocol=new TCompactProtocol(transport);
    StoreCommunicationService.Iface client=new StoreCommunicationService.Client(protocol);
    client.store(comm);
  }
   t.stop();
  r=new Runnable(){
    @Override public void run(){
      try {
        SimpleAccumuloFetch.main(new String[]{""String_Node_Str"",user,""String_Node_Str"",passwordStr,""String_Node_Str"",namespace,""String_Node_Str"",String.valueOf(port)});
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  t=new Thread(r);
  t.run();
  Thread.sleep(500);
  try (TTransport transport=new TFramedTransport(new TSocket(""String_Node_Str"",port),Integer.MAX_VALUE)){
    transport.open();
    TProtocol protocol=new TCompactProtocol(transport);
    FetchCommunicationService.Iface client=new FetchCommunicationService.Client(protocol);
    FetchRequest rq=new FetchRequest();
    rq.addToCommunicationIds(comm.getId());
    FetchResult res=client.fetch(rq);
    System.out.println(""String_Node_Str"" + res);
    assertEquals(res.getCommunicationsSize(),1);
    assertEquals(res.getCommunications().get(0).getText(),comm.getText());
  }
   t.stop();
}","/** 
 * Does not pass, for unknown reasons. Something is wrong with the thrift service setup which causes hangs.
 */
public void storeFetchServers() throws Exception {
  Runnable r=new Runnable(){
    @Override public void run(){
      try {
        System.getProperties().put(""String_Node_Str"",user);
        System.getProperties().put(""String_Node_Str"",passwordStr);
        System.getProperties().put(""String_Node_Str"",namespace);
        System.getProperties().put(""String_Node_Str"",String.valueOf(port));
        SimpleAccumuloStore.main(new String[]{});
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  Thread t=new Thread(r);
  t.run();
  Thread.sleep(500);
  try (TTransport transport=new TFramedTransport(new TSocket(""String_Node_Str"",port),Integer.MAX_VALUE)){
    transport.open();
    TProtocol protocol=new TCompactProtocol(transport);
    StoreCommunicationService.Iface client=new StoreCommunicationService.Client(protocol);
    client.store(comm);
  }
   t.stop();
  r=new Runnable(){
    @Override public void run(){
      try {
        System.getProperties().put(""String_Node_Str"",user);
        System.getProperties().put(""String_Node_Str"",passwordStr);
        System.getProperties().put(""String_Node_Str"",namespace);
        System.getProperties().put(""String_Node_Str"",String.valueOf(port));
        SimpleAccumuloFetch.main(new String[]{});
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  t=new Thread(r);
  t.run();
  Thread.sleep(500);
  try (TTransport transport=new TFramedTransport(new TSocket(""String_Node_Str"",port),Integer.MAX_VALUE)){
    transport.open();
    TProtocol protocol=new TCompactProtocol(transport);
    FetchCommunicationService.Iface client=new FetchCommunicationService.Client(protocol);
    FetchRequest rq=new FetchRequest();
    rq.addToCommunicationIds(comm.getId());
    FetchResult res=client.fetch(rq);
    System.out.println(""String_Node_Str"" + res);
    assertEquals(res.getCommunicationsSize(),1);
    assertEquals(res.getCommunications().get(0).getText(),comm.getText());
  }
   t.stop();
}",0.7692307692307693
147338,"@Override public void run(){
  try {
    SimpleAccumuloFetch.main(new String[]{""String_Node_Str"",user,""String_Node_Str"",passwordStr,""String_Node_Str"",namespace,""String_Node_Str"",String.valueOf(port)});
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public void run(){
  try {
    System.getProperties().put(""String_Node_Str"",user);
    System.getProperties().put(""String_Node_Str"",passwordStr);
    System.getProperties().put(""String_Node_Str"",namespace);
    System.getProperties().put(""String_Node_Str"",String.valueOf(port));
    SimpleAccumuloFetch.main(new String[]{});
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.4503703703703703
147339,"public static void main(String[] args) throws Exception {
  Properties config=SimpleAccumuloConfig.loadConfig();
  SimpleAccumuloConfig saConf=SimpleAccumuloConfig.fromConfig(config);
  int nt=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  int port=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  logger.info(""String_Node_Str"" + port);
  logger.info(""String_Node_Str"" + nt);
  logger.info(""String_Node_Str"" + saConf);
  try (SimpleAccumuloStore serv=new SimpleAccumuloStore(saConf,nt)){
    serv.connect(config.getProperty(""String_Node_Str""),new PasswordToken(config.getProperty(""String_Node_Str"")));
    TServerTransport serverTransport=new TServerSocket(port);
    TServer server=new TSimpleServer(new Args(serverTransport).processor(new StoreCommunicationService.Processor<>(serv)));
    logger.info(""String_Node_Str"");
    server.serve();
  }
 }","public static void main(String[] args) throws Exception {
  Properties config=SimpleAccumuloConfig.loadConfig();
  SimpleAccumuloConfig saConf=SimpleAccumuloConfig.fromConfig(config);
  int nt=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  int port=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  logger.info(""String_Node_Str"" + port);
  logger.info(""String_Node_Str"" + nt);
  logger.info(""String_Node_Str"" + saConf);
  try (SimpleAccumuloStore serv=new SimpleAccumuloStore(saConf,nt)){
    serv.connect(config.getProperty(""String_Node_Str""),new PasswordToken(config.getProperty(""String_Node_Str"")));
    Processor<SimpleAccumuloStore> proc=new StoreCommunicationService.Processor<>(serv);
    TNonblockingServerTransport transport=new TNonblockingServerSocket(port);
    TNonblockingServer.Args serverArgs=new TNonblockingServer.Args(transport);
    serverArgs=serverArgs.processorFactory(new TProcessorFactory(proc));
    serverArgs=serverArgs.protocolFactory(new TCompactProtocol.Factory());
    serverArgs=serverArgs.transportFactory(new TFramedTransport.Factory(Integer.MAX_VALUE));
    serverArgs.maxReadBufferBytes=Long.MAX_VALUE;
    TNonblockingServer server=new TNonblockingServer(serverArgs);
    logger.info(""String_Node_Str"");
    server.serve();
  }
 }",0.6959247648902821
147340,"public static void main(String[] args) throws Exception {
  Properties config=SimpleAccumuloConfig.loadConfig();
  SimpleAccumuloConfig saConf=SimpleAccumuloConfig.fromConfig(config);
  int nt=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  int port=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  logger.info(""String_Node_Str"" + port);
  logger.info(""String_Node_Str"" + nt);
  logger.info(""String_Node_Str"" + saConf);
  try (SimpleAccumuloFetch serv=new SimpleAccumuloFetch(saConf,nt)){
    serv.connect(config.getProperty(""String_Node_Str""),new PasswordToken(config.getProperty(""String_Node_Str"")));
    TServerTransport serverTransport=new TServerSocket(port);
    TServer server=new TSimpleServer(new Args(serverTransport).processor(new FetchCommunicationService.Processor<>(serv)));
    logger.info(""String_Node_Str"");
    server.serve();
  }
 }","public static void main(String[] args) throws Exception {
  Properties config=SimpleAccumuloConfig.loadConfig();
  SimpleAccumuloConfig saConf=SimpleAccumuloConfig.fromConfig(config);
  int nt=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  int port=Integer.parseInt(config.getProperty(""String_Node_Str"",""String_Node_Str""));
  logger.info(""String_Node_Str"" + port);
  logger.info(""String_Node_Str"" + nt);
  logger.info(""String_Node_Str"" + saConf);
  try (SimpleAccumuloFetch serv=new SimpleAccumuloFetch(saConf,nt)){
    serv.connect(config.getProperty(""String_Node_Str""),new PasswordToken(config.getProperty(""String_Node_Str"")));
    Processor<SimpleAccumuloFetch> proc=new FetchCommunicationService.Processor<>(serv);
    TNonblockingServerTransport transport=new TNonblockingServerSocket(port);
    TNonblockingServer.Args serverArgs=new TNonblockingServer.Args(transport);
    serverArgs=serverArgs.processorFactory(new TProcessorFactory(proc));
    serverArgs=serverArgs.protocolFactory(new TCompactProtocol.Factory());
    serverArgs=serverArgs.transportFactory(new TFramedTransport.Factory(Integer.MAX_VALUE));
    serverArgs.maxReadBufferBytes=Long.MAX_VALUE;
    TNonblockingServer server=new TNonblockingServer(serverArgs);
    logger.info(""String_Node_Str"");
    server.serve();
  }
 }",0.6959247648902821
147341,"/** 
 * Send a   {@link Communication} to the target server.
 * @param c a {@link Communication} to send across the wire
 * @throws TException on thrift error
 * @see Sender.Iface#store(Communication)
 */
public void store(Communication c) throws TException {
  this.client.store(c);
}","/** 
 * Send a   {@link Communication} to the target server.
 * @param c a {@link Communication} to send across the wire
 * @throws TException on thrift error
 */
public void store(Communication c) throws TException {
  this.client.store(c);
}",0.9204545454545454
147342,"@Override public FetchResult fetch(FetchRequest fr) throws ServicesException, TException {
  if (fr == null || fr.isSetCommunicationIds() || fr.getCommunicationIdsSize() == 0)   throw new ServicesException(""String_Node_Str"");
  int n=fr.getCommunicationIdsSize();
  FetchResult r=new FetchResult();
  r.setCommunications(new ArrayList<>(n));
  Authorizations auths=new Authorizations(fr.getAuths());
  try {
    if (n == 1) {
      if (reader == null)       reader=getConnector().createScanner(config.table,auths);
      reader.setRange(Range.exact(fr.getCommunicationIds().get(0)));
      Entry<Key,Value> e=reader.iterator().next();
      byte[] commBytes=e.getValue().get();
      Communication c=new Communication();
      commDeser.deserialize(c,commBytes);
      r.addToCommunications(c);
    }
 else {
      if (readerB == null)       readerB=getConnector().createBatchScanner(config.table,auths,numThreads);
      List<Range> ids=new ArrayList<>(n);
      for (      String c : fr.getCommunicationIds())       ids.add(Range.exact(c));
      readerB.setRanges(ids);
      for (      Entry<Key,Value> e : readerB) {
        byte[] bytes=e.getValue().get();
        Communication c=new Communication();
        commDeser.deserialize(c,bytes);
        r.addToCommunications(c);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new ServicesException(e.getMessage());
  }
  return r;
}","@Override public FetchResult fetch(FetchRequest fr) throws ServicesException, TException {
  if (fr == null || !fr.isSetCommunicationIds() || fr.getCommunicationIdsSize() == 0)   throw new ServicesException(""String_Node_Str"");
  int n=fr.getCommunicationIdsSize();
  FetchResult r=new FetchResult();
  r.setCommunications(new ArrayList<>(n));
  Authorizations auths=new Authorizations();
  if (fr.isSetAuths())   auths=new Authorizations(fr.getAuths());
  try {
    if (n == 1) {
      if (reader == null)       reader=getConnector().createScanner(config.table,auths);
      reader.setRange(Range.exact(fr.getCommunicationIds().get(0)));
      for (      Entry<Key,Value> e : reader) {
        byte[] commBytes=e.getValue().get();
        Communication c=new Communication();
        commDeser.deserialize(c,commBytes);
        r.addToCommunications(c);
      }
    }
 else {
      if (readerB == null)       readerB=getConnector().createBatchScanner(config.table,auths,numThreads);
      List<Range> ids=new ArrayList<>(n);
      for (      String c : fr.getCommunicationIds())       ids.add(Range.exact(c));
      readerB.setRanges(ids);
      for (      Entry<Key,Value> e : readerB) {
        byte[] bytes=e.getValue().get();
        Communication c=new Communication();
        commDeser.deserialize(c,bytes);
        r.addToCommunications(c);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new ServicesException(e.getMessage());
  }
  return r;
}",0.955501897205933
147343,"/** 
 * Default implementation. Calls   {@link #fromTarGz(InputStream)}.
 * @see #fromTarGz(InputStream)
 * @param in a  {@link GzipCompressorInputStream} representing a .tar.gz archive of {@link Communication} objects
 * @return an {@link Iterator} of {@link Communication} objects
 * @throws ConcreteException on serialization error (e.g., if a  {@link Communication} is missing required fields)
 * @throws IOException on I/O error
 */
default Iterator<Communication> fromTarGz(GzipCompressorInputStream in) throws ConcreteException, IOException {
  return this.fromTarGz(in);
}","/** 
 * @param is an  {@link InputStream}. Should be closed when finished.
 * @return an {@link Iterator} of {@link Communication} objects
 * @throws ConcreteException on serialization error (e.g., if a  {@link Communication} is missing required fields)
 * @throws IOException on I/O error
 */
public Iterator<Communication> fromTarGz(InputStream is) throws ConcreteException, IOException ;",0.7030927835051546
147344,"/** 
 * @param args
 * @throws ConcreteException
 * @throws IOException
 * @throws TException
 */
public static void main(String[] args) throws ConcreteException, IOException, TException {
  Random r=new Random();
  CompactCommunicationSerializer cs=new CompactCommunicationSerializer();
  Communication root=new Communication();
  root.setType(""String_Node_Str"");
  AnnotationMetadata md=new AnnotationMetadata();
  md.setTool(ProjectConstants.PROJECT_NAME + ""String_Node_Str"" + ProjectConstants.VERSION+ ""String_Node_Str""+ RandomCommunicationStreamProducer.class.getSimpleName());
  md.setTimestamp(Timing.currentLocalTime());
  root.setMetadata(md);
  AnalyticUUIDGeneratorFactory f=new AnalyticUUIDGeneratorFactory();
  AnalyticUUIDGenerator g=f.create();
  while (true) {
    Communication nc=new Communication(root);
    String idstr=""String_Node_Str"" + Math.abs(r.nextInt());
    nc.setId(idstr);
    nc.setUuid(g.next());
    nc.setText(""String_Node_Str"");
    System.out.write(cs.toBytes(nc));
  }
}","/** 
 * @param args
 * @throws ConcreteException
 * @throws IOException
 * @throws TException
 */
public static void main(String[] args) throws ConcreteException, IOException, TException {
  Random r=new Random();
  CompactCommunicationSerializer cs=new CompactCommunicationSerializer();
  Communication root=new Communication();
  root.setType(""String_Node_Str"");
  AnnotationMetadata md=new AnnotationMetadata();
  md.setTool(ProjectConstants.PROJECT_NAME + ""String_Node_Str"" + ProjectConstants.VERSION+ ""String_Node_Str""+ RandomCommunicationStreamProducer.class.getSimpleName());
  md.setTimestamp(Timing.currentLocalTime());
  root.setMetadata(md);
  AnalyticUUIDGeneratorFactory f=new AnalyticUUIDGeneratorFactory();
  AnalyticUUIDGenerator g=f.create();
  while (true) {
    Communication nc=new Communication(root);
    String idstr=""String_Node_Str"" + r.nextInt(Integer.MAX_VALUE);
    nc.setId(idstr);
    nc.setUuid(g.next());
    nc.setText(""String_Node_Str"");
    System.out.write(cs.toBytes(nc));
  }
}",0.9777558082056352
147345,"/** 
 * @return the tokenTags
 */
public List<String> getTokenTags(){
  return tokenTags;
}","/** 
 * @return the tokenTags
 */
public String[] getTokenTags(){
  return tokenTags;
}",0.9550561797752808
147346,"/** 
 * @return the tokens
 */
public List<String> getTokens(){
  return tokens;
}","/** 
 * @return the tokens
 */
public String[] getTokens(){
  return tokens;
}",0.95
147347,"/** 
 * @return the offsets
 */
public List<Integer> getOffsets(){
  return offsets;
}","/** 
 * @return the offsets
 */
public int[] getOffsets(){
  return offsets;
}",0.926829268292683
147348,"public TaggedTokenizationOutput(String[][] twitterTokenizerOutput){
  this.tokens=Arrays.asList(twitterTokenizerOutput[0]);
  this.tokenTags=Arrays.asList(twitterTokenizerOutput[1]);
  String[] offsetStrings=twitterTokenizerOutput[2];
  this.offsets=new ArrayList<>(offsetStrings.length);
  for (  String offset : offsetStrings)   this.offsets.add(Integer.parseInt(offset));
}","public TaggedTokenizationOutput(String[][] twitterTokenizerOutput){
  this.tokens=twitterTokenizerOutput[0];
  this.tokenTags=twitterTokenizerOutput[1];
  String[] offsetStrings=twitterTokenizerOutput[2];
  this.offsets=new int[offsetStrings.length];
  for (int i=0; i < offsetStrings.length; i++)   this.offsets[i]=Integer.parseInt(offsetStrings[i]);
}",0.2496570644718793
147349,"/** 
 */
public TokenTagTuple(String token,String tag){
  this.token=token;
  this.tag=tag;
}","public TokenTagTuple(String token,String tag){
  this.token=token;
  this.tag=Optional.ofNullable(tag);
}",0.8484848484848485
147350,"/** 
 * @return the tag
 */
public String getTag(){
  return tag;
}","/** 
 * @return the tag
 */
public Optional<String> getTag(){
  return tag;
}",0.9305555555555556
147351,"@Override public TokenizedCommunication annotate(Communication comm) throws AnalyticException {
  Communication cp=new Communication(comm);
  try {
    CachedSentencedCommunication csc=new CachedSentencedCommunication(cp);
    List<Sentence> sentences=new ArrayList<>(csc.getSentences());
    for (    Sentence st : sentences) {
      SuperTextSpan sts=new SuperTextSpan(st.getTextSpan(),cp);
      String sentenceText=sts.getText();
      Tokenization t=this.tokenizer.tokenizeSentence(sentenceText,0,st.getUuid());
      t.setMetadata(TooledMetadataConverter.convert(this));
      st.setTokenization(t);
    }
    return new CachedTokenizationCommunication(cp);
  }
 catch (  MiscommunicationException e) {
    throw new AnalyticException(e);
  }
}","@Override public TokenizedCommunication annotate(Communication comm) throws AnalyticException {
  Communication cp=new Communication(comm);
  try {
    CachedSentencedCommunication csc=new CachedSentencedCommunication(cp);
    List<Sentence> sentences=new ArrayList<>(csc.getSentences());
    for (    Sentence st : sentences) {
      TextSpan sts=st.getTextSpan();
      final String stText=cp.getText().substring(sts.getStart(),sts.getEnding());
      Tokenization t=this.tokenizer.tokenizeToConcrete(stText);
      t.setMetadata(TooledMetadataConverter.convert(this));
      st.setTokenization(t);
    }
    return new CachedTokenizationCommunication(cp);
  }
 catch (  MiscommunicationException e) {
    throw new AnalyticException(e);
  }
}",0.8120401337792642
147352,"public ALNCIngester(Path path) throws IngestException {
  this.ts=Timing.currentLocalTime();
  this.path=path;
  try {
    if (Files.probeContentType(this.path).contains(""String_Node_Str""))     this.conv=new ALNCFileConverter(new BZip2CompressorInputStream(Files.newInputStream(this.path)));
 else     this.conv=new ALNCFileConverter(Files.newInputStream(this.path));
  }
 catch (  IOException e) {
    throw new IngestException(e);
  }
}","public ALNCIngester(Path path) throws IngestException {
  this.ts=Timing.currentLocalTime();
  this.path=path;
  try {
    Optional<String> inferredType=Optional.ofNullable(Files.probeContentType(this.path));
    String ft=inferredType.orElse(""String_Node_Str"");
    if (ft.contains(""String_Node_Str""))     this.conv=new ALNCFileConverter(new BZip2CompressorInputStream(Files.newInputStream(this.path)));
 else     this.conv=new ALNCFileConverter(Files.newInputStream(this.path));
  }
 catch (  IOException e) {
    throw new IngestException(e);
  }
}",0.8210313447927199
147353,"@Test public void testTokenizeToConcreteTwitter(){
  String text=""String_Node_Str"";
  int expectedTokenCount=5;
  Tokenization ct=Tokenizer.TWITTER.tokenizeToConcrete(text,0);
  List<Token> tokenList=ct.getTokenList().getTokenList();
  assertEquals(expectedTokenCount,tokenList.size());
  for (  Token t : tokenList) {
    logger.info(""String_Node_Str"",t.getTokenIndex(),t.getText());
    TextSpan ts=t.getTextSpan();
    logger.info(""String_Node_Str"",ts.getStart(),ts.getEnding());
  }
  Optional<TokenTagging> tt=ct.getTokenTaggingList().stream().filter(tl -> tl.getTaggingType().equalsIgnoreCase(""String_Node_Str"")).findFirst();
  assertTrue(tt.isPresent());
  for (  TaggedToken t : tt.get().getTaggedTokenList()) {
    logger.info(""String_Node_Str"",t.getTag(),t.getTokenIndex());
  }
}","@Test public void testTokenizeToConcreteTwitter(){
  String text=""String_Node_Str"";
  int expectedTokenCount=5;
  Tokenization ct=Tokenizer.TWITTER.tokenizeToConcrete(text,0);
  List<Token> tokenList=ct.getTokenList().getTokenList();
  assertEquals(expectedTokenCount,tokenList.size());
  for (  Token t : tokenList) {
    logger.info(""String_Node_Str"",t.getTokenIndex(),t.getText());
    TextSpan ts=t.getTextSpan();
    logger.info(""String_Node_Str"",ts.getStart(),ts.getEnding());
  }
  Optional<TokenTagging> tt=ct.getTokenTaggingList().stream().filter(tl -> tl.getTaggingType().equalsIgnoreCase(""String_Node_Str"")).findFirst();
  assertTrue(tt.isPresent());
  for (  TaggedToken t : tt.get().getTaggedTokenList()) {
    int idx=t.getTokenIndex();
    logger.info(""String_Node_Str"",t.getTag(),idx);
    assertEquals(4,idx);
  }
}",0.9531442663378544
147354,"private static int getLeftSpacesPaddingCount(final String str){
  final int len=str.length();
  for (int i=0; i < len; i++) {
    Character c=str.charAt(i);
    if (!isSpaceOrUnixNewline(c))     return i;
  }
  return len;
}","/** 
 * Length of longest whitespace prefix.
 */
private static int getLeftSpacesPaddingCount(final String str){
  final int len=str.length();
  for (int i=0; i < len; i++) {
    char c=str.charAt(i);
    if (!Character.isWhitespace(c))     return i;
  }
  return len;
}",0.7206477732793523
147355,"private static Section handleHeadline(final XMLEventReader rdr,final String content) throws XMLStreamException, ConcreteException {
  rdr.nextEvent();
  rdr.nextEvent();
  rdr.nextEvent();
  XMLEvent hl=rdr.nextEvent();
  StartElement hlse=hl.asStartElement();
  QName hlqn=hlse.getName();
  final String hlPart=hlqn.getLocalPart();
  LOGGER.debug(""String_Node_Str"",hlPart);
  int hlPartOff=hlse.getLocation().getCharacterOffset();
  LOGGER.debug(""String_Node_Str"",hlPartOff);
  Characters cc=rdr.nextEvent().asCharacters();
  int charOff=cc.getLocation().getCharacterOffset();
  int clen=cc.getData().length();
  rdr.nextEvent();
  rdr.nextEvent();
  final int charOffPlusLen=charOff + clen;
  final String hlText=content.substring(charOff,charOffPlusLen);
  SimpleImmutableEntry<Integer,Integer> pads=trimSpacing(hlText);
  TextSpan ts=new TextSpan(charOff + pads.getKey(),charOffPlusLen - pads.getValue());
  Section s=new Section();
  s.setKind(""String_Node_Str"");
  s.setTextSpan(ts);
  List<Integer> intList=new ArrayList<>();
  intList.add(0);
  s.setNumberList(intList);
  return s;
}","private static Section handleHeadline(final XMLEventReader rdr,final String content) throws XMLStreamException, ConcreteException {
}",0.2171428571428571
147356,"private static int getRightSpacesPaddingCount(final String str){
  final int lenIdx=str.length() - 1;
  for (int i=0; i < lenIdx; i++) {
    Character c=str.charAt(lenIdx - i);
    if (!isSpaceOrUnixNewline(c))     return i;
  }
  return lenIdx + 1;
}","/** 
 * Number of whitespace characters that follow a non-whitespace charachter (if the given string is all whitespace, this returns 0).
 */
private static int getRightSpacesPaddingCount(final String str){
  final int lenIdx=str.length() - 1;
  for (int i=0; i < lenIdx; i++) {
    char c=str.charAt(lenIdx - i);
    if (!Character.isWhitespace(c))     return i;
  }
  return 0;
}",0.5927099841521395
147357,"public AnalyticUUIDGenerator(String uuidstr){
  UUIDTuple tuple=new UUIDTuple(uuidstr);
  this.xPart=tuple.p1;
  this.yPart=generateHexUnif(tuple.p2.length());
  String zPartStr=generateHexUnif(tuple.p3.length());
  this.zPart=Integer.parseUnsignedInt(zPartStr,16);
  this.zLen=zPartStr.length();
  this.zBound=(int)Math.pow(2,(4 * this.zLen));
}","public AnalyticUUIDGenerator(String uuidstr){
  UUIDTuple tuple=new UUIDTuple(uuidstr);
  this.xPart=tuple.p1;
  this.yPart=generateHexUnif(tuple.p2.length());
  String zPartStr=generateHexUnif(tuple.p3.length());
  this.zPart=Long.parseUnsignedLong(zPartStr,16);
  this.zLen=zPartStr.length();
  this.zBound=(int)Math.pow(2,(4 * this.zLen));
}",0.9739130434782608
147358,"private String zeroPaddedHex(int k,int pad){
  String hexStr=Integer.toHexString(k);
  int nonHex=Integer.parseInt(hexStr.substring(2));
  int nZeroes=pad - hexStr.length();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < nZeroes; i++)   sb.append(""String_Node_Str"");
  sb.append(nonHex);
  return sb.toString();
}","public static String zeroPaddedHex(long k,int pad){
  String hexStr=Long.toHexString(k);
  int nZeroes=pad - hexStr.length();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < nZeroes; i++)   sb.append(""String_Node_Str"");
  sb.append(hexStr);
  return sb.toString();
}",0.8344370860927153
147359,"/** 
 * @param args
 */
public static void main(String[] args){
  Thread.setDefaultUncaughtExceptionHandler(new LoggedUncaughtExceptionHandler());
  FilterArchiveByCommunicationType m=new FilterArchiveByCommunicationType();
  JCommander jc=new JCommander(m,args);
  jc.setProgramName(FilterArchiveByCommunicationType.class.getName());
  if (m.help) {
    jc.usage();
    return;
  }
  Predicate<Communication> notOfTypePred=comm -> !m.paramList.contains(comm.getType());
  try {
    ExistingNonDirectoryFile ef=new ExistingNonDirectoryFile(Paths.get(m.inFile));
    Path p=ef.getPath();
    try (InputStream is=Files.newInputStream(p);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 24);OutputStream os=Files.newOutputStream(Paths.get(m.outFile));GzipCompressorOutputStream gout=new GzipCompressorOutputStream(os);BufferedOutputStream bos=new BufferedOutputStream(gout,1024 * 8 * 24);TarArchiver arch=new TarArchiver(bos)){
      TarGzArchiveEntryCommunicationIterator iter=new TarGzArchiveEntryCommunicationIterator(bin);
      final Iterable<Communication> ic=() -> iter;
      StreamSupport.stream(ic.spliterator(),false).filter(notOfTypePred).forEach(c -> {
        try {
          arch.addEntry(new ArchivableCommunication(c));
        }
 catch (        IOException e) {
          throw new UncheckedIOException(e);
        }
      }
);
    }
     LOGGER.info(""String_Node_Str"",m.inFile);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + m.inFile,e);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  Thread.setDefaultUncaughtExceptionHandler(new LoggedUncaughtExceptionHandler());
  FilterArchiveByCommunicationType m=new FilterArchiveByCommunicationType();
  JCommander jc=new JCommander(m,args);
  jc.setProgramName(FilterArchiveByCommunicationType.class.getName());
  if (m.help) {
    jc.usage();
    return;
  }
  final Set<String> toFilterSet=new HashSet<>(m.typeList);
  toFilterSet.forEach(s -> LOGGER.info(""String_Node_Str"",s));
  Predicate<Communication> notOfTypePred=comm -> !toFilterSet.contains(comm.getType());
  try {
    ExistingNonDirectoryFile ef=new ExistingNonDirectoryFile(Paths.get(m.inFile));
    Path p=ef.getPath();
    try (InputStream is=Files.newInputStream(p);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 24);OutputStream os=Files.newOutputStream(Paths.get(m.outFile));GzipCompressorOutputStream gout=new GzipCompressorOutputStream(os);BufferedOutputStream bos=new BufferedOutputStream(gout,1024 * 8 * 24);TarArchiver arch=new TarArchiver(bos)){
      TarGzArchiveEntryCommunicationIterator iter=new TarGzArchiveEntryCommunicationIterator(bin);
      final Iterable<Communication> ic=() -> iter;
      StreamSupport.stream(ic.spliterator(),false).filter(notOfTypePred).forEach(c -> {
        try {
          arch.addEntry(new ArchivableCommunication(c));
        }
 catch (        IOException e) {
          throw new UncheckedIOException(e);
        }
      }
);
    }
     LOGGER.info(""String_Node_Str"",m.inFile);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + m.inFile,e);
  }
}",0.3104669887278583
147360,"public Communication fromSgmlString(String ldcSgml){
  PersistentArrayMap map=(PersistentArrayMap)this.processSgmlFx.invoke(ldcSgml);
  String kind=(String)map.get(Keyword.find(""String_Node_Str""));
  String id=(String)map.get(Keyword.find(""String_Node_Str""));
  long date=(long)map.get(Keyword.find(""String_Node_Str""));
  Communication c=CommunicationFactory.create().setId(id).setStartTime(date / 1000).setType(kind).setText(ldcSgml).setMetadata(TooledMetadataConverter.convert(this));
  Keyword skw=Keyword.find(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<PersistentArrayMap> sectionList=(List<PersistentArrayMap>)map.get(skw);
  LOGGER.debug(""String_Node_Str"",sectionList.size());
  sectionList.forEach(pam -> c.addToSectionList(this.fromPAM(pam)));
  return c;
}","public Communication fromSgmlString(String ldcSgml){
  PersistentArrayMap map=(PersistentArrayMap)this.processSgmlFx.invoke(ldcSgml);
  String kind=(String)map.get(Keyword.find(""String_Node_Str""));
  String id=(String)map.get(Keyword.find(""String_Node_Str""));
  long date=(long)map.get(Keyword.find(""String_Node_Str""));
  Communication c=CommunicationFactory.create().setId(id).setStartTime(date / 1000).setType(kind).setText(ldcSgml).setMetadata(TooledMetadataConverter.convert(this));
  Keyword skw=Keyword.find(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<PersistentArrayMap> sectionList=(List<PersistentArrayMap>)map.get(skw);
  LOGGER.debug(""String_Node_Str"",sectionList.size());
  sectionList.stream().map(pam -> this.fromPAM(pam)).filter(SectionWrapper.hasZeroLengthTextSpan().negate()).forEach(s -> c.addToSectionList(s));
  LOGGER.debug(""String_Node_Str"",c.getSectionListSize());
  return c;
}",0.8810779144698301
147361,"/** 
 * @param pathToGigaSGMLFile a {@link Path} that represents a path to a .sgml file on disk.
 * @return a {@link GigawordDocument} object that represents the .sgml file
 */
public Communication fromPath(Path pathToGigaSGMLFile) throws IOException {
  try (InputStream is=Files.newInputStream(pathToGigaSGMLFile);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 24)){
    return this.fromSgmlString(IOUtils.toString(bin));
  }
 }","/** 
 * @param pathToGigaSGMLFile a {@link Path} that represents a path to a .sgml file on disk.
 * @return a {@link Communication} object that represents the .sgml file
 */
public Communication fromPath(Path pathToGigaSGMLFile) throws IOException {
  try (InputStream is=Files.newInputStream(pathToGigaSGMLFile);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 24)){
    return this.fromSgmlString(IOUtils.toString(bin));
  }
 }",0.9695603156708004
147362,"private int handleImg(final XMLEventReader rdr) throws XMLStreamException {
  return rdr.nextEvent().asEndElement().getLocation().getCharacterOffset();
}","private int handleImg(final XMLEventReader rdr) throws XMLStreamException {
  XMLEvent n=rdr.nextEvent();
  return n.asEndElement().getLocation().getCharacterOffset();
}",0.9254658385093169
147363,"private int handleLink(final XMLEventReader rdr) throws XMLStreamException {
  XMLEvent linkContent=rdr.nextEvent();
  if (!linkContent.isCharacters())   throw new RuntimeException(""String_Node_Str"");
  return rdr.nextEvent().getLocation().getCharacterOffset();
}","private int handleLink(final XMLEventReader rdr) throws XMLStreamException {
  XMLEvent linkContent=rdr.nextEvent();
  if (linkContent.isEndElement())   return linkContent.getLocation().getCharacterOffset();
 else   if (linkContent.isCharacters())   return rdr.nextEvent().getLocation().getCharacterOffset();
 else   throw new RuntimeException(""String_Node_Str"");
}",0.554140127388535
147364,"@Override public Communication fromCharacterBasedFile(final Path path) throws IngestException {
  if (!Files.exists(path))   throw new IngestException(""String_Node_Str"" + path.toString());
  Communication c=CommunicationFactory.create();
  c.setType(this.getKind());
  c.setMetadata(TooledMetadataConverter.convert(this));
  try {
    ExistingNonDirectoryFile ef=new ExistingNonDirectoryFile(path);
    c.setId(ef.getName().split(""String_Node_Str"")[0]);
  }
 catch (  NoSuchFileException|NotFileException e) {
    throw new IngestException(path.toString() + ""String_Node_Str"");
  }
  String content;
  try (InputStream is=Files.newInputStream(path);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 8)){
    content=IOUtils.toString(bin,StandardCharsets.UTF_8);
    c.setText(content);
  }
 catch (  IOException e) {
    throw new IngestException(e);
  }
  try (InputStream is=Files.newInputStream(path);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 8);BufferedReader reader=new BufferedReader(new InputStreamReader(bin,StandardCharsets.UTF_8))){
    XMLEventReader rdr=null;
    try {
      rdr=inF.createXMLEventReader(reader);
      Section headline=this.handleHeadline(rdr,content);
      c.addToSectionList(headline);
      LOGGER.debug(""String_Node_Str"",new SuperTextSpan(headline.getTextSpan(),c).getText());
      int sectNumber=1;
      int subSect=0;
      this.iterateToPosts(rdr);
      int currOff=-1;
      while (rdr.hasNext()) {
        XMLEvent nextEvent=rdr.nextEvent();
        if (nextEvent.isEndDocument())         break;
        if (nextEvent.isStartElement()) {
          StartElement se=nextEvent.asStartElement();
          QName name=se.getName();
          final String localName=name.getLocalPart();
          if (localName.equals(QUOTE_LOCAL_NAME)) {
            currOff=this.handleQuote(rdr);
            continue;
          }
 else           if (localName.equals(IMG_LOCAL_NAME)) {
            currOff=this.handleImg(rdr);
            continue;
          }
 else           if (localName.equals(LINK_LOCAL_NAME)) {
            currOff=this.handleLink(rdr);
            continue;
          }
 else           if (localName.equals(POST_LOCAL_NAME)) {
            currOff=se.getLocation().getCharacterOffset();
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"" + localName);
          }
        }
 else         if (nextEvent.isCharacters()) {
          Characters chars=nextEvent.asCharacters();
          if (chars.isWhiteSpace()) {
            currOff=chars.getLocation().getCharacterOffset();
          }
 else {
            String fpContent=chars.getData();
            LOGGER.debug(""String_Node_Str"",fpContent);
            SimpleImmutableEntry<Integer,Integer> pads=this.trimSpacing(fpContent);
            final int tsb=currOff + pads.getKey();
            final int tse=currOff + fpContent.length() - pads.getValue();
            LOGGER.debug(""String_Node_Str"",content.substring(tsb,tse));
            TextSpan ts=new TextSpan(tsb,tse);
            Section s=SectionFactory.fromTextSpan(ts,""String_Node_Str"");
            List<Integer> intList=new ArrayList<>();
            intList.add(sectNumber);
            intList.add(subSect);
            s.setNumberList(intList);
            c.addToSectionList(s);
            subSect++;
          }
        }
 else         if (nextEvent.isEndElement()) {
          EndElement ee=nextEvent.asEndElement();
          currOff=ee.getLocation().getCharacterOffset();
          QName name=ee.getName();
          String localName=name.getLocalPart();
          if (localName.equalsIgnoreCase(POST_LOCAL_NAME)) {
            sectNumber++;
            subSect=0;
          }
        }
      }
      return c;
    }
 catch (    XMLStreamException|ConcreteException x) {
      throw new IngestException(x);
    }
 finally {
      if (rdr != null)       try {
        rdr.close();
      }
 catch (      XMLStreamException e) {
        LOGGER.info(""String_Node_Str"",e);
      }
    }
  }
 catch (  IOException e) {
    throw new IngestException(e);
  }
}","@Override public Communication fromCharacterBasedFile(final Path path) throws IngestException {
  if (!Files.exists(path))   throw new IngestException(""String_Node_Str"" + path.toString());
  Communication c=CommunicationFactory.create();
  c.setType(this.getKind());
  c.setMetadata(TooledMetadataConverter.convert(this));
  try {
    ExistingNonDirectoryFile ef=new ExistingNonDirectoryFile(path);
    c.setId(ef.getName().split(""String_Node_Str"")[0]);
  }
 catch (  NoSuchFileException|NotFileException e) {
    throw new IngestException(path.toString() + ""String_Node_Str"");
  }
  String content;
  try (InputStream is=Files.newInputStream(path);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 8)){
    content=IOUtils.toString(bin,StandardCharsets.UTF_8);
    c.setText(content);
  }
 catch (  IOException e) {
    throw new IngestException(e);
  }
  try (InputStream is=Files.newInputStream(path);BufferedInputStream bin=new BufferedInputStream(is,1024 * 8 * 8);BufferedReader reader=new BufferedReader(new InputStreamReader(bin,StandardCharsets.UTF_8))){
    XMLEventReader rdr=null;
    try {
      rdr=inF.createXMLEventReader(reader);
      Section headline=this.handleHeadline(rdr,content);
      c.addToSectionList(headline);
      LOGGER.debug(""String_Node_Str"",new SuperTextSpan(headline.getTextSpan(),c).getText());
      int sectNumber=1;
      int subSect=0;
      this.iterateToPosts(rdr);
      int currOff=-1;
      while (rdr.hasNext()) {
        XMLEvent nextEvent=rdr.nextEvent();
        if (currOff > 0) {
          int currOffPlus=currOff + 20;
          int currOffLess=currOff - 20;
          LOGGER.debug(""String_Node_Str"",currOff);
          if (currOffPlus < content.length())           LOGGER.debug(""String_Node_Str"",content.substring(currOffLess,currOffPlus));
        }
        if (nextEvent.isEndDocument())         break;
        if (nextEvent.isStartElement()) {
          StartElement se=nextEvent.asStartElement();
          QName name=se.getName();
          final String localName=name.getLocalPart();
          if (localName.equals(QUOTE_LOCAL_NAME)) {
            currOff=this.handleQuote(rdr);
            continue;
          }
 else           if (localName.equals(IMG_LOCAL_NAME)) {
            currOff=this.handleImg(rdr);
            continue;
          }
 else           if (localName.equals(LINK_LOCAL_NAME)) {
            currOff=this.handleLink(rdr);
            continue;
          }
 else           if (localName.equals(POST_LOCAL_NAME)) {
            currOff=se.getLocation().getCharacterOffset();
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"" + localName);
          }
        }
 else         if (nextEvent.isCharacters()) {
          Characters chars=nextEvent.asCharacters();
          int coff=chars.getLocation().getCharacterOffset();
          if (chars.isWhiteSpace()) {
            currOff=coff;
          }
 else {
            String fpContent=chars.getData();
            LOGGER.debug(""String_Node_Str"",coff);
            LOGGER.debug(""String_Node_Str"",fpContent);
            SimpleImmutableEntry<Integer,Integer> pads=this.trimSpacing(fpContent);
            final int tsb=currOff + pads.getKey();
            final int tse=currOff + fpContent.length() - pads.getValue();
            LOGGER.debug(""String_Node_Str"",content.substring(tsb,tse));
            TextSpan ts=new TextSpan(tsb,tse);
            Section s=SectionFactory.fromTextSpan(ts,""String_Node_Str"");
            List<Integer> intList=new ArrayList<>();
            intList.add(sectNumber);
            intList.add(subSect);
            s.setNumberList(intList);
            c.addToSectionList(s);
            subSect++;
          }
        }
 else         if (nextEvent.isEndElement()) {
          EndElement ee=nextEvent.asEndElement();
          currOff=ee.getLocation().getCharacterOffset();
          QName name=ee.getName();
          String localName=name.getLocalPart();
          if (localName.equalsIgnoreCase(POST_LOCAL_NAME)) {
            sectNumber++;
            subSect=0;
          }
        }
      }
      return c;
    }
 catch (    XMLStreamException|ConcreteException x) {
      throw new IngestException(x);
    }
 finally {
      if (rdr != null)       try {
        rdr.close();
      }
 catch (      XMLStreamException e) {
        LOGGER.info(""String_Node_Str"",e);
      }
    }
  }
 catch (  IOException e) {
    throw new IngestException(e);
  }
}",0.9321934652769646
147365,"@Override public Communication getRoot(){
  return null;
}","@Override public Communication getRoot(){
  return this.csc.getRoot();
}",0.8307692307692308
147366,"@Override public List<Sentence> getSentences(){
  return null;
}","@Override public List<Sentence> getSentences(){
  return this.csc.getSentences();
}",0.8299319727891157
147367,"@Override public List<Section> getSections(){
  return null;
}","@Override public List<Section> getSections(){
  return this.csc.getSections();
}",0.8309859154929577
147368,"@Override public Map<UUID,Sentence> getUuidToSentenceMap(){
  return null;
}","@Override public Map<UUID,Sentence> getUuidToSentenceMap(){
  return this.csc.getUuidToSentenceMap();
}",0.8156424581005587
147369,"@Override public boolean isAnnotatable(Communication c){
  boolean hasSections=c.isSetSectionList() && c.getSectionListSize() > 0;
  boolean valid=hasSections && c.isSetText() && !c.getText().equals(""String_Node_Str"");
  return valid;
}","@Override public boolean isAnnotatable(Communication c){
  boolean hasSections=c.isSetSectionList() && c.getSectionListSize() > 0;
  boolean valid=!hasSections && c.isSetText() && !c.getText().equals(""String_Node_Str"");
  return valid;
}",0.9978858350951374
147370,"private Stream<StringStringStringTuple> extractTuples(){
  Stream.Builder<StringStringStringTuple> stream=Stream.builder();
  this.anytd.getHeadline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getOnlineHeadline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getByline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getDateline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getArticleAbstract().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getLeadParagraphAsList().stream().filter(i -> !i.isEmpty()).forEach(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getOnlineLeadParagraphAsList().stream().filter(str -> !str.isEmpty()).forEach(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getBodyAsList().stream().filter(str -> !str.isEmpty()).forEach(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",null,str)));
  this.anytd.getCorrectionText().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getKicker().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  return stream.build();
}","private Stream<StringStringStringTuple> extractTuples(){
  Stream.Builder<StringStringStringTuple> stream=Stream.builder();
  this.anytd.getHeadline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getOnlineHeadline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getByline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getDateline().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getArticleAbstract().ifPresent(str -> {
    if (!str.isEmpty())     stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str));
 else     LOGGER.debug(""String_Node_Str"");
  }
);
  this.anytd.getLeadParagraphAsList().stream().filter(i -> !i.isEmpty()).forEach(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getOnlineLeadParagraphAsList().stream().filter(str -> !str.isEmpty()).forEach(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getBodyAsList().stream().filter(str -> !str.isEmpty()).forEach(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",null,str)));
  this.anytd.getCorrectionText().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  this.anytd.getKicker().ifPresent(str -> stream.add(StringStringStringTuple.create(""String_Node_Str"",""String_Node_Str"",str)));
  return stream.build();
}",0.9757445501995702
147371,"@Override public Communication toCommunication(){
  final String localId=""String_Node_Str"" + this.anytd.getGuid();
  try {
    AnnotationMetadata md=TooledMetadataConverter.convert(this);
    CommunicationMetadata cmd=new CommunicationMetadata();
    cmd.setNitfInfo(extractNITFInfo(this.anytd));
    Communication c=CommunicationFactory.create(localId);
    c.setMetadata(md);
    c.setCommunicationMetadata(cmd);
    c.setType(""String_Node_Str"");
    int ctr=0;
    StringBuilder ctxt=new StringBuilder();
    List<StringStringStringTuple> sstList=this.extractTuples().sequential().collect(Collectors.toList());
    final int lSize=sstList.size();
    for (int i=0; i < lSize; i++) {
      final StringStringStringTuple t=sstList.get(i);
      final String skind=t.getS1();
      final String slabel=t.getS2();
      final String txt=t.getS3();
      final int txtlen=txt.length();
      final TextSpan ts=new TextSpan(ctr,ctr + txtlen);
      final Section s=SectionFactory.fromTextSpan(ts,skind);
      s.setLabel(slabel);
      c.addToSectionList(s);
      ctxt.append(txt);
      if (i + 1 != lSize) {
        ctxt.append(System.lineSeparator());
        ctxt.append(System.lineSeparator());
        ctr+=txtlen + 2;
      }
    }
    c.setText(ctxt.toString());
    return c;
  }
 catch (  ConcreteException e) {
    throw new RuntimeException(e);
  }
}","@Override public Communication toCommunication(){
  final String localId=""String_Node_Str"" + this.anytd.getGuid();
  try {
    AnnotationMetadata md=TooledMetadataConverter.convert(this);
    CommunicationMetadata cmd=new CommunicationMetadata();
    cmd.setNitfInfo(extractNITFInfo(this.anytd));
    Communication c=CommunicationFactory.create(localId);
    c.setMetadata(md);
    c.setCommunicationMetadata(cmd);
    c.setType(""String_Node_Str"");
    int ctr=0;
    StringBuilder ctxt=new StringBuilder();
    List<StringStringStringTuple> sstList=this.extractTuples().sequential().collect(Collectors.toList());
    final int lSize=sstList.size();
    LOGGER.debug(""String_Node_Str"",lSize);
    for (int i=0; i < lSize; i++) {
      LOGGER.debug(""String_Node_Str"",ctr);
      final StringStringStringTuple t=sstList.get(i);
      final String skind=t.getS1();
      LOGGER.debug(""String_Node_Str"",skind);
      final String slabel=t.getS2();
      LOGGER.debug(""String_Node_Str"",slabel);
      final String txt=t.getS3();
      LOGGER.debug(""String_Node_Str"",txt);
      final int txtlen=txt.length();
      LOGGER.debug(""String_Node_Str"",ctr,ctr + txtlen);
      final TextSpan ts=new TextSpan(ctr,ctr + txtlen);
      final Section s=SectionFactory.fromTextSpan(ts,skind);
      s.setLabel(slabel);
      c.addToSectionList(s);
      ctxt.append(txt);
      if (i + 1 != lSize) {
        ctxt.append(System.lineSeparator());
        ctxt.append(System.lineSeparator());
        ctr+=txtlen + 2;
      }
    }
    final String ctxtstr=ctxt.toString();
    LOGGER.debug(""String_Node_Str"",ctxtstr.length());
    c.setText(ctxtstr);
    return c;
  }
 catch (  ConcreteException e) {
    throw new RuntimeException(e);
  }
}",0.8748378728923476
147372,"public CachedSentencedCommunication(final Communication orig) throws MiscommunicationException {
  this.cpy=new CachedSectionedCommunication(orig);
  Optional<Section> bs=this.cpy.getSections().stream().filter(s -> validSentencePredicate(s)).findAny();
  if (bs.isPresent())   throw new MiscommunicationException(""String_Node_Str"" + bs.get().getUuid().getUuidString() + ""String_Node_Str"");
  final Map<UUID,Sentence> toRet=new LinkedHashMap<>();
  List<Section> sectList=new ArrayList<>(this.cpy.getSections());
  for (  Section s : sectList)   for (  Sentence st : s.getSentenceList())   toRet.put(st.getUuid(),st);
  this.sentIdToSentenceMap=toRet;
}","public CachedSentencedCommunication(final Communication orig) throws MiscommunicationException {
  this.cpy=new CachedSectionedCommunication(orig);
  List<Section> sectList=this.cpy.getSections();
  Optional<Section> bs=sectList.stream().filter(s -> !validSentencePredicate(s)).findAny();
  if (bs.isPresent())   throw new MiscommunicationException(""String_Node_Str"" + bs.get().getUuid().getUuidString() + ""String_Node_Str"");
  final Map<UUID,Sentence> toRet=new LinkedHashMap<>();
  for (  Section s : sectList)   for (  Sentence st : s.getSentenceList())   toRet.put(st.getUuid(),st);
  this.sentIdToSentenceMap=toRet;
}",0.6875981161695447
147373,"public CachedTokenizationCommunication(final Communication orig) throws MiscommunicationException {
  this.cpy=new CachedSentencedCommunication(orig);
  Optional<Sentence> bs=this.cpy.getSentences().stream().filter(s -> validPredicate(s)).findAny();
  if (bs.isPresent())   throw new MiscommunicationException(""String_Node_Str"" + bs.get().getUuid().getUuidString() + ""String_Node_Str"");
  final Map<UUID,Tokenization> toRet=new LinkedHashMap<>();
  List<Sentence> stList=new ArrayList<>(this.cpy.getSentences());
  for (  Sentence st : stList) {
    Tokenization tok=st.getTokenization();
    UUID tId=tok.getUuid();
    toRet.put(tId,tok);
  }
  this.tokenizationIdToTokenizationMap=toRet;
}","public CachedTokenizationCommunication(final Communication orig) throws MiscommunicationException {
  this.cpy=new CachedSentencedCommunication(orig);
  Optional<Sentence> bs=this.cpy.getSentences().stream().filter(s -> !validPredicate(s)).findAny();
  if (bs.isPresent())   throw new MiscommunicationException(""String_Node_Str"" + bs.get().getUuid().getUuidString() + ""String_Node_Str"");
  final Map<UUID,Tokenization> toRet=new LinkedHashMap<>();
  List<Sentence> stList=new ArrayList<>(this.cpy.getSentences());
  for (  Sentence st : stList) {
    Tokenization tok=st.getTokenization();
    UUID tId=tok.getUuid();
    toRet.put(tId,tok);
  }
  this.tokenizationIdToTokenizationMap=toRet;
}",0.9992779783393502
147374,"public boolean validate(){
  boolean valid=true;
  Iterator<Section> sectIter=this.comm.getSectionListIterator();
  while (valid && sectIter.hasNext()) {
    Section s=sectIter.next();
    valid=new ValidatableSection(s).validate(this.comm);
    Iterator<Sentence> sentIter=s.getSentenceListIterator();
    while (valid && sentIter.hasNext()) {
      Sentence st=sentIter.next();
      valid=new ValidatableSentence(st).validate(this.comm);
      Tokenization tok=st.getTokenization();
      valid=new ValidatableTokenization(tok).validate(this.comm);
    }
  }
  if (this.comm.isSetEntityMentionSetList()) {
    Iterator<EntityMentionSet> emsIter=this.comm.getEntityMentionSetListIterator();
    while (valid && emsIter.hasNext()) {
      EntityMentionSet ems=emsIter.next();
      valid=new ValidatableEntityMentionSet(ems).validate(this.comm);
    }
  }
  return valid;
}","public boolean validate(){
  boolean valid=true;
  Iterator<Section> sectIter=this.comm.getSectionListIterator();
  while (valid && sectIter != null && sectIter.hasNext()) {
    Section s=sectIter.next();
    valid=new ValidatableSection(s).validate(this.comm);
    Iterator<Sentence> sentIter=s.getSentenceListIterator();
    while (valid && sentIter != null && sentIter.hasNext()) {
      Sentence st=sentIter.next();
      valid=new ValidatableSentence(st).validate(this.comm);
      Tokenization tok=st.getTokenization();
      valid=new ValidatableTokenization(tok).validate(this.comm);
    }
  }
  if (this.comm.isSetEntityMentionSetList()) {
    Iterator<EntityMentionSet> emsIter=this.comm.getEntityMentionSetListIterator();
    while (valid && emsIter.hasNext()) {
      EntityMentionSet ems=emsIter.next();
      valid=new ValidatableEntityMentionSet(ems).validate(this.comm);
    }
  }
  return valid;
}",0.7774049217002237
147375,"@Override public Communication fromCharacterBasedFile(Path path) throws IngestException {
  try {
    ExistingNonDirectoryFile f=new ExistingNonDirectoryFile(path);
    try (InputStream is=Files.newInputStream(path)){
      String content=IOUtils.toString(is,StandardCharsets.UTF_8);
      Communication c=CommunicationFactory.create(f.getName(),content);
      c.setType(this.commKind);
      c.setMetadata(this.getMetadata());
      String[] split2xNewline=content.split(doubleLineSep);
      Stream.Builder<TextSpanKindTuple> stream=Stream.builder();
      int charCtr=0;
      for (      String s : split2xNewline) {
        final int len=s.length();
        TextSpan ts=new TextSpan(charCtr,len + charCtr);
        charCtr=len + 2;
        stream.add(new TextSpanKindTuple(ts,this.sectionKindLabel));
      }
      Stream<Section> sections=SectionFactory.fromTextSpanStream(stream.build());
      sections.forEach(s -> c.addToSectionList(s));
      return c;
    }
 catch (    IOException e) {
      throw new IngestException(""String_Node_Str"",e);
    }
catch (    ConcreteException e) {
      throw new IngestException(e);
    }
  }
 catch (  NoSuchFileException|NotFileException e) {
    throw new IngestException(""String_Node_Str"",e);
  }
}","@Override public Communication fromCharacterBasedFile(Path path) throws IngestException {
  try {
    ExistingNonDirectoryFile f=new ExistingNonDirectoryFile(path);
    try (InputStream is=Files.newInputStream(path)){
      String content=IOUtils.toString(is,StandardCharsets.UTF_8);
      Communication c=CommunicationFactory.create(f.getName(),content);
      c.setType(this.commKind);
      c.setMetadata(this.getMetadata());
      String[] split2xNewline=content.split(doubleLineSep);
      Stream.Builder<TextSpanKindTuple> stream=Stream.builder();
      int charCtr=0;
      for (      String s : split2xNewline) {
        final int len=s.length();
        final int sum=len + charCtr;
        TextSpan ts=new TextSpan(charCtr,sum);
        charCtr=sum + 2;
        stream.add(new TextSpanKindTuple(ts,this.sectionKindLabel));
      }
      Stream<Section> sections=SectionFactory.fromTextSpanStream(stream.build());
      sections.forEach(s -> c.addToSectionList(s));
      return c;
    }
 catch (    IOException e) {
      throw new IngestException(""String_Node_Str"",e);
    }
catch (    ConcreteException e) {
      throw new IngestException(e);
    }
  }
 catch (  NoSuchFileException|NotFileException e) {
    throw new IngestException(""String_Node_Str"",e);
  }
}",0.9686880697582244
147376,"@Test public void testFromCharacterBasedFile() throws IngestException {
  UTF8FileIngester ing=new DoubleLineBreakFileIngester(""String_Node_Str"",""String_Node_Str"");
  Communication c=ing.fromCharacterBasedFile(tmpPath);
  assertEquals(testContent,c.getText());
  Section sOne=c.getSectionList().get(0);
  assertEquals(""String_Node_Str"",sOne.getKind());
  TextSpan tsOne=sOne.getTextSpan();
  assertEquals(0,tsOne.getStart());
  assertEquals(5,tsOne.getEnding());
  Section sTwo=c.getSectionList().get(1);
  TextSpan tsTwo=sTwo.getTextSpan();
  assertEquals(7,tsTwo.getStart());
  assertEquals(12,tsTwo.getEnding());
  assertEquals(testContent.length(),tsTwo.getEnding());
}","@Test public void testFromCharacterBasedFile() throws IngestException {
  UTF8FileIngester ing=new DoubleLineBreakFileIngester(""String_Node_Str"",""String_Node_Str"");
  Communication c=ing.fromCharacterBasedFile(tmpPath);
  List<Section> sList=c.getSectionList();
  assertEquals(testContent,c.getText());
  assertEquals(3,c.getSectionListSize());
  Section sOne=c.getSectionList().get(0);
  assertEquals(""String_Node_Str"",sOne.getKind());
  TextSpan tsOne=sOne.getTextSpan();
  assertEquals(0,tsOne.getStart());
  assertEquals(5,tsOne.getEnding());
  Section sTwo=c.getSectionList().get(1);
  TextSpan tsTwo=sTwo.getTextSpan();
  assertEquals(7,tsTwo.getStart());
  assertEquals(12,tsTwo.getEnding());
  assertEquals(testContent.length(),sList.get(2).getTextSpan().getEnding());
}",0.9207443142660234
147377,"@Before public void setUp() throws Exception {
  tmpPath=tf.getRoot().toPath().resolve(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(System.lineSeparator());
  sb.append(System.lineSeparator());
  sb.append(""String_Node_Str"");
  testContent=sb.toString();
  try (FileWriterWithEncoding writer=new FileWriterWithEncoding(tmpPath.toFile(),StandardCharsets.UTF_8)){
    writer.write(testContent);
  }
 }","@Before public void setUp() throws Exception {
  tmpPath=tf.getRoot().toPath().resolve(""String_Node_Str"");
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(System.lineSeparator());
  sb.append(System.lineSeparator());
  sb.append(""String_Node_Str"");
  sb.append(System.lineSeparator());
  sb.append(System.lineSeparator());
  sb.append(""String_Node_Str"");
  testContent=sb.toString();
  try (FileWriterWithEncoding writer=new FileWriterWithEncoding(tmpPath.toFile(),StandardCharsets.UTF_8)){
    writer.write(testContent);
  }
 }",0.8962818003913894
147378,"public Communication communication(){
  return new Communication().setUuid(UUIDFactory.newUUID()).setId(""String_Node_Str"" + this.r.nextInt(Integer.MAX_VALUE)).setText(""String_Node_Str"").setType(this.communicationType()).setMetadata(AnnotationMetadataFactory.fromCurrentUTCTime().setTool(""String_Node_Str""));
}","public Communication communication(){
  return new Communication().setUuid(UUIDFactory.newUUID()).setId(""String_Node_Str"" + this.r.nextInt(Integer.MAX_VALUE)).setText(""String_Node_Str"").setType(this.communicationType()).setMetadata(AnnotationMetadataFactory.fromCurrentLocalTime().setTool(""String_Node_Str""));
}",0.9870967741935484
147379,"@Override public String getFileName(){
  return this.id;
}","@Override public String getFileName(){
  return this.id + ext;
}",0.9508196721311476
147380,"@Override public Communication fromCharacterBasedFile(Path path,Charset charset) throws IngestException {
  try {
    ExistingNonDirectoryFile f=new ExistingNonDirectoryFile(path);
    try (InputStream is=Files.newInputStream(f.getPath());BufferedInputStream bis=new BufferedInputStream(is);Scanner sc=new Scanner(bis,this.cs.toString())){
      StringBuilder sb=new StringBuilder();
      while (sc.hasNextLine())       sb.append(sc.nextLine());
      String content=sb.toString();
      return CommunicationFactory.create(f.getName(),content,""String_Node_Str"");
    }
 catch (    IOException e) {
      throw new IngestException(""String_Node_Str"",e);
    }
catch (    ConcreteException e) {
      throw new IngestException(e);
    }
  }
 catch (  NoSuchFileException|NotFileException e) {
    throw new IngestException(""String_Node_Str"",e);
  }
}","@Override public Communication fromCharacterBasedFile(Path path,Charset charset) throws IngestException {
  try {
    ExistingNonDirectoryFile f=new ExistingNonDirectoryFile(path);
    try (InputStream is=Files.newInputStream(f.getPath())){
      String content=IOUtils.toString(is,this.cs);
      return CommunicationFactory.create(f.getName(),content,""String_Node_Str"");
    }
 catch (    IOException e) {
      throw new IngestException(""String_Node_Str"",e);
    }
catch (    ConcreteException e) {
      throw new IngestException(e);
    }
  }
 catch (  NoSuchFileException|NotFileException e) {
    throw new IngestException(""String_Node_Str"",e);
  }
}",0.8199335548172757
147381,"/** 
 * Generate a   {@link Communication} object with basic fields set.
 */
public Communication randomCommunication(){
  return new Communication().setUuid(new ConcreteUUIDFactory().getConcreteUUID()).setId(""String_Node_Str"" + Math.abs(this.r.nextInt())).setText(""String_Node_Str"").setType(this.randomCommunicationType()).setMetadata(this.randomMetadata());
}","/** 
 * Generate a   {@link Communication} object with basic fields set.
 */
public Communication randomCommunication(){
  return new Communication().setUuid(new ConcreteUUIDFactory().getConcreteUUID()).setId(""String_Node_Str"" + this.r.nextInt(Integer.MAX_VALUE)).setText(""String_Node_Str"").setType(this.randomCommunicationType()).setMetadata(this.randomMetadata());
}",0.9245541838134432
147382,"/** 
 * Iterate over all   {@link SectionSegmentation}s and create a   {@link Map} of [SectionID, Section].
 * @return a {@link Map} whose keys contain {@link Section} {@link UUID} strings, and whose values contain {@link Section} objects with that id string.
 */
private final Map<UUID,Section> sectionIdToSectionMap(){
  final Map<UUID,Section> toRet=new HashMap<>();
  if (this.comm.isSetSectionSegmentationList())   for (  SectionSegmentation ss : this.comm.getSectionSegmentationList())   if (ss.isSetSectionList())   for (  Section s : ss.getSectionList())   toRet.put(s.getUuid(),s);
  return toRet;
}","/** 
 * Iterate over all   {@link SectionSegmentation}s and create a   {@link Map} of [SectionID, Section].
 * @return a {@link Map} whose keys contain {@link Section} {@link UUID} strings, and whose values contain {@link Section} objects with that id string.
 */
private final Map<UUID,Section> sectionIdToSectionMap(){
  final Map<UUID,Section> toRet=new HashMap<>();
  for (  Section ss : this.comm.getSectionList())   toRet.put(ss.getUuid(),ss);
  return toRet;
}",0.7572093023255814
147383,"/** 
 * Return a   {@link Map} of [SentenceID, Sentence] for all {@link SentenceSegmentation}s in all   {@link SectionSegmentation}s.
 * @return a {@link Map} whose keys contain {@link Sentence} {@link UUID} strings, and whose values contain {@link Section} objects with that id string.
 */
private final Map<UUID,Sentence> sentIdToSentenceMap(){
  final Map<UUID,Sentence> toRet=new HashMap<>();
  List<Section> sectList=new ArrayList<>(this.sectionIdToSectionMap.values());
  for (  Section s : sectList)   if (s.isSetSentenceSegmentationList())   for (  SentenceSegmentation ss : s.getSentenceSegmentationList())   if (ss.isSetSentenceList())   for (  Sentence st : ss.getSentenceList())   toRet.put(st.getUuid(),st);
  return toRet;
}","/** 
 * Return a   {@link Map} of [SentenceID, Sentence] for all {@link SentenceSegmentation}s in all   {@link SectionSegmentation}s.
 * @return a {@link Map} whose keys contain {@link Sentence} {@link UUID} strings, and whose values contain {@link Section} objects with that id string.
 */
private final Map<UUID,Sentence> sentIdToSentenceMap(){
  final Map<UUID,Sentence> toRet=new HashMap<>();
  List<Section> sectList=new ArrayList<>(this.sectionIdToSectionMap.values());
  for (  Section s : sectList)   for (  Sentence st : s.getSentenceList())   toRet.put(st.getUuid(),st);
  return toRet;
}",0.7934131736526946
147384,"/** 
 * True if this   {@link Communication} contains annotations that are not part of a""root""  {@link Communication}. Used in rebar to see if any dangling annotations exist and chop them off if needed. 
 */
public boolean containsAnnotations(){
  return this.comm.isSetSectionSegmentationList() || this.comm.isSetEntityMentionSetList() || this.comm.isSetEntitySetList()|| this.comm.isSetSituationMentionSetList()|| this.comm.isSetSituationSetList()|| this.comm.isSetLidList();
}","/** 
 * True if this   {@link Communication} contains annotations that are not part of a""root""  {@link Communication}. Used in rebar to see if any dangling annotations exist and chop them off if needed. 
 */
public boolean containsAnnotations(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.6446700507614214
147385,"/** 
 * Get the first   {@link Tokenization}.
 * @return the first {@link Tokenization}
 * @throws ConcreteException if there is no  {@link Tokenization}, or if any of the prerequisites are missing.
 */
public Tokenization firstTokenization() throws ConcreteException {
  Sentence s=this.firstSentence();
  if (s.isSetTokenizationList() && s.getTokenizationListSize() > 0)   return s.getTokenizationList().get(0);
 else   throw new ConcreteException(""String_Node_Str"" + s.getUuid() + ""String_Node_Str""+ ""String_Node_Str"");
}","/** 
 * Get the first   {@link Tokenization}.
 * @return the first {@link Tokenization}
 * @throws ConcreteException if there is no  {@link Tokenization}, or if any of the prerequisites are missing.
 */
public Tokenization firstTokenization() throws ConcreteException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.7094515752625438
147386,"@Override public Map<UUID,Sentence> generateSentenceIdToSectionMap(){
  if (this.sectionIdToSectionMap == null)   this.generateSectionIdToSectionMap();
  if (this.sentIdToSentenceMap != null)   return new HashMap<>(this.sentIdToSentenceMap);
 else {
    final Map<UUID,Sentence> toRet=new HashMap<>();
    List<Section> sectList=new ArrayList<>(this.sectionIdToSectionMap.values());
    for (    Section s : sectList)     if (s.isSetSentenceSegmentationList())     for (    SentenceSegmentation ss : s.getSentenceSegmentationList())     if (ss.isSetSentenceList())     for (    Sentence st : ss.getSentenceList())     toRet.put(st.getUuid(),st);
    this.sentIdToSentenceMap=toRet;
    return new HashMap<>(toRet);
  }
}","@Override public Map<UUID,Sentence> generateSentenceIdToSectionMap(){
  if (this.sectionIdToSectionMap == null)   this.generateSectionIdToSectionMap();
  if (this.sentIdToSentenceMap != null)   return new HashMap<>(this.sentIdToSentenceMap);
 else {
    final Map<UUID,Sentence> toRet=new HashMap<>();
    List<Section> sectList=new ArrayList<>(this.sectionIdToSectionMap.values());
    for (    Section s : sectList)     for (    Sentence st : s.getSentenceList())     toRet.put(st.getUuid(),st);
    this.sentIdToSentenceMap=toRet;
    return new HashMap<>(toRet);
  }
}",0.7043343653250774
147387,"private final Map<UUID,Tokenization> tokenizationIdToTokenizationMap(){
  final Map<UUID,Tokenization> toRet=new HashMap<>();
  List<Sentence> stList=new ArrayList<>(this.sentIdToSentenceMap.values());
  for (  Sentence st : stList)   if (st.isSetTokenizationList())   for (  Tokenization t : st.getTokenizationList()) {
    UUID tId=t.getUuid();
    toRet.put(tId,t);
  }
  return toRet;
}","private final Map<UUID,Tokenization> tokenizationIdToTokenizationMap(){
  final Map<UUID,Tokenization> toRet=new HashMap<>();
  List<Sentence> stList=new ArrayList<>(this.sentIdToSentenceMap.values());
  for (  Sentence st : stList) {
    Tokenization tok=st.getTokenization();
    UUID tId=tok.getUuid();
    toRet.put(tId,tok);
  }
  return toRet;
}",0.8663967611336032
147388,"/** 
 * Get the first   {@link Section} from the first {@link SectionSegmentation} from the wrapped {@link Communication}.
 * @return the first {@link Section} from the first {@link SectionSegmentation}
 * @throws ConcreteException if there is no  {@link Section} or {@link SectionSegmentation}
 */
public Section firstSection() throws ConcreteException {
  SectionSegmentation ss=this.firstSectionSegmentation();
  if (this.hasSections())   return ss.getSectionList().get(0);
 else   throw new ConcreteException(""String_Node_Str"" + ss.getUuid() + ""String_Node_Str""+ ""String_Node_Str"");
}","/** 
 * Get the first   {@link Section} from the first {@link SectionSegmentation} from the wrapped {@link Communication}.
 * @return the first {@link Section} from the first {@link SectionSegmentation}
 * @throws ConcreteException if there is no  {@link Section} or {@link SectionSegmentation}
 */
public Section firstSection() throws ConcreteException {
  if (this.hasSections())   return this.comm.getSectionList().get(0);
 else   throw new ConcreteException(""String_Node_Str"");
}",0.842203548085901
147389,"@Override public Map<UUID,Section> generateSectionIdToSectionMap(){
  if (this.sectionIdToSectionMap != null)   return new HashMap<>(this.sectionIdToSectionMap);
 else {
    final Map<UUID,Section> map=new HashMap<>();
    if (this.comm.isSetSectionSegmentationList())     for (    SectionSegmentation ss : this.comm.getSectionSegmentationList())     if (ss.isSetSectionList())     for (    Section s : ss.getSectionList())     map.put(s.getUuid(),s);
    this.sectionIdToSectionMap=map;
    return new HashMap<>(map);
  }
}","@Override public Map<UUID,Section> generateSectionIdToSectionMap(){
  if (this.sectionIdToSectionMap != null)   return new HashMap<>(this.sectionIdToSectionMap);
 else {
    final Map<UUID,Section> map=new HashMap<>();
    for (    Section s : this.comm.getSectionList())     map.put(s.getUuid(),s);
    this.sectionIdToSectionMap=map;
    return new HashMap<>(map);
  }
}",0.7299107142857143
147390,"/** 
 * Return a ""stripped""   {@link SuperCommunication} with extraneous annotations removed.
 */
public SuperCommunication stripAnnotations(){
  Communication copy=new Communication(this.comm);
  if (copy.isSetEntitySetList())   copy.unsetEntitySetList();
  if (copy.isSetEntityMentionSetList())   copy.unsetEntityMentionSetList();
  if (copy.isSetSituationSetList())   copy.unsetSituationSetList();
  if (copy.isSetSituationMentionSetList())   copy.unsetSituationMentionSetList();
  if (copy.isSetSectionSegmentationList())   copy.unsetSectionSegmentationList();
  if (copy.isSetLidList())   copy.unsetLidList();
  return new SuperCommunication(copy);
}","/** 
 * Return a ""stripped""   {@link SuperCommunication} with extraneous annotations removed.
 */
public SuperCommunication stripAnnotations(){
  Communication copy=new Communication(this.comm);
  if (copy.isSetEntitySetList())   copy.unsetEntitySetList();
  if (copy.isSetEntityMentionSetList())   copy.unsetEntityMentionSetList();
  if (copy.isSetSituationSetList())   copy.unsetSituationSetList();
  if (copy.isSetSituationMentionSetList())   copy.unsetSituationMentionSetList();
  if (copy.isSetLidList())   copy.unsetLidList();
  return new SuperCommunication(copy);
}",0.9332247557003256
147391,"/** 
 * Get the first   {@link Sentence}.
 * @return the first {@link Sentence}
 * @throws ConcreteException if there is no  {@link Sentence}, or if any prerequisites are missing.
 */
public Sentence firstSentence() throws ConcreteException {
  SentenceSegmentation s=this.firstSentenceSegmentation();
  if (s.isSetSentenceList() && s.getSentenceListSize() > 0)   return s.getSentenceList().get(0);
 else   throw new ConcreteException(""String_Node_Str"" + s.getUuid() + ""String_Node_Str""+ ""String_Node_Str"");
}","/** 
 * Get the first   {@link Sentence}.
 * @return the first {@link Sentence}
 * @throws ConcreteException if there is no  {@link Sentence}, or if any prerequisites are missing.
 */
public Sentence firstSentence() throws ConcreteException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.6895705521472393
147392,"/** 
 * @return true if {@link Section}(s) are present in all   {@link SectionSegmentation}s
 */
public boolean hasSections(){
  if (!this.hasSectionSegmentations())   return false;
  Iterator<SectionSegmentation> i=this.comm.getSectionSegmentationListIterator();
  boolean validSections=true;
  while (validSections && i.hasNext()) {
    SectionSegmentation ss=i.next();
    validSections=ss.isSetSectionList() && ss.getSectionListSize() > 0;
  }
  return validSections;
}","/** 
 * @return true if {@link Section}(s) are present in all   {@link SectionSegmentation}s
 */
public boolean hasSections(){
  return this.comm.isSetSectionList() && this.comm.getSectionListSize() > 0;
}",0.5162241887905604
147393,"private final Map<UUID,Tokenization> tokenizationIdToTokenizationMap(){
  final Map<UUID,Tokenization> toRet=new HashMap<>();
  List<Sentence> stList=new ArrayList<>(this.sentIdToSentenceMap.values());
  for (  Sentence st : stList)   if (st.isSetTokenizationList())   for (  Tokenization t : st.getTokenizationList()) {
    UUID tId=t.getUuid();
    toRet.put(tId,t);
  }
  return toRet;
}","private final Map<UUID,Tokenization> tokenizationIdToTokenizationMap(){
  final Map<UUID,Tokenization> toRet=new HashMap<>();
  List<Sentence> stList=new ArrayList<>(this.sentIdToSentenceMap.values());
  for (  Sentence st : stList) {
    Tokenization tok=st.getTokenization();
    UUID tId=tok.getUuid();
    toRet.put(tId,tok);
  }
  return toRet;
}",0.8663967611336032
147394,"@Override public final AnnotationMetadata getMetadata(){
  AnnotationMetadata md=new AnnotationMetadata();
  md.setConfidence(1.0);
  md.setTimestamp(System.currentTimeMillis());
  md.setTool(""String_Node_Str"");
  return md;
}","@Override public final AnnotationMetadata getMetadata(){
  AnnotationMetadata md=new AnnotationMetadata();
  md.setTimestamp(System.currentTimeMillis());
  md.setTool(""String_Node_Str"");
  return md;
}",0.9414519906323184
147395,"/** 
 * Generate an   {@link AnnotationMetadata} object.
 */
public AnnotationMetadata randomMetadata(){
  return new AnnotationMetadata().setConfidence(this.r.nextFloat()).setTimestamp(System.currentTimeMillis()).setTool(""String_Node_Str"");
}","/** 
 * Generate an   {@link AnnotationMetadata} object.
 */
public AnnotationMetadata randomMetadata(){
  return new AnnotationMetadata().setTimestamp(System.currentTimeMillis()).setTool(""String_Node_Str"");
}",0.9247787610619468
147396,"@Test public void test(){
  AnnotationMetadata md=new AnnotationMetadata();
  md.confidence=1f;
  System.out.println(md.toString());
  md.setConfidence(1F);
  System.out.println(md.toString());
  md.tool=""String_Node_Str"";
  System.out.println(md.toString());
}","@Test public void test(){
  AnnotationMetadata md=new AnnotationMetadata();
  System.out.println(md.toString());
  md.tool=""String_Node_Str"";
  System.out.println(md.toString());
}",0.8163265306122449
147397,"/** 
 * Same as   {@link #fromBytes(TBase,byte[])}, but takes in a   {@link String} that representsa path to a serialized  {@link TBase} object on disk. 
 * @see #fromBytes(TBase,Path)
 */
public <T extends TBase<T,? extends TFieldIdEnum>>T fromFileString(T object,String pathToSerializedFileString) throws ConcreteException {
  return this.fromBytes(object,Paths.get(pathToSerializedFileString));
}","/** 
 * Same as   {@link #fromBytes(TBase,byte[])}, but takes in a   {@link String} that representsa path to a serialized  {@link TBase} object on disk. 
 * @see #fromBytes(TBase,Path)
 */
public <T extends TBase<T,? extends TFieldIdEnum>>T fromFileString(T object,String pathToSerializedFileString) throws ConcreteException {
  return this.fromPath(object,Paths.get(pathToSerializedFileString));
}",0.98870765370138
147398,"@Override public boolean isValid(){
  boolean init=this.validateUUID(this.annotation.getUuid()) && this.printStatus(""String_Node_Str"",this.annotation.isSetArgumentList()) && this.printStatus(""String_Node_Str"",this.annotation.getArgumentListSize() > 0)&& this.printStatus(""String_Node_Str"",this.annotation.isSetSituationType());
  if (!init)   return false;
 else {
    String st=this.annotation.getSituationType();
    if (st == ""String_Node_Str"")     return this.printStatus(""String_Node_Str"",this.annotation.isSetEventType());
 else     if (st == ""String_Node_Str"")     return this.printStatus(""String_Node_Str"",this.annotation.isSetStateType());
 else     return true;
  }
}","@Override public boolean isValid(){
  boolean init=this.validateUUID(this.annotation.getUuid()) && this.printStatus(""String_Node_Str"",this.annotation.isSetArgumentList()) && this.printStatus(""String_Node_Str"",this.annotation.getArgumentListSize() > 0)&& this.printStatus(""String_Node_Str"",this.annotation.isSetSituationType());
  if (!init)   return false;
 else {
    return true;
  }
}",0.706766917293233
147399,"@Override protected boolean isValidWithComm(Communication c){
  UUID tokUuid=this.annotation.getTokenizationId();
  List<Integer> tokenIdxIds=this.annotation.getTokenIndexList();
  TokenizedSuperCommunication cc=new TokenizedSuperCommunication(c);
  if (this.printStatus(""String_Node_Str"",cc.getTokenizationIds().contains(tokUuid))) {
    Set<Integer> tokIdxSet=cc.getTokenizationIdToTokenIdxToTokenMap().get(tokUuid).keySet();
    if (this.printStatus(""String_Node_Str"",!tokIdxSet.containsAll(tokenIdxIds)))     return false;
 else     return true;
  }
 else {
    return false;
  }
}","@Override protected boolean isValidWithComm(Communication c){
  UUID tokUuid=this.annotation.getTokenizationId();
  List<Integer> tokenIdxIds=this.annotation.getTokenIndexList();
  TokenizedSuperCommunication cc=new TokenizedSuperCommunication(c);
  if (this.printStatus(""String_Node_Str"",cc.getTokenizationIds().contains(tokUuid))) {
    Set<Integer> tokIdxSet=cc.getTokenizationIdToTokenIdxToTokenMap().get(tokUuid).keySet();
    return this.printStatus(""String_Node_Str"",tokIdxSet.containsAll(tokenIdxIds));
  }
 else {
    return false;
  }
}",0.9283819628647216
147400,"@Override protected boolean isValidWithComm(Communication c){
  return new SectionedSuperCommunication(c).getSectionIdToSectionMap().keySet().contains(this.annotation.getSentenceId());
}","@Override protected boolean isValidWithComm(Communication c){
  return true;
}",0.5681818181818182
147401,"/** 
 * Get the text from a   {@link TextSpan}. May throw an   {@link IndexOutOfBoundsException}if the   {@link Communication} and {@link TextSpan} do not align properly.
 * @return a {@link String} with the text of the {@link TextSpan} object. 
 */
public String getText(){
  return c.getText().substring(ts.getStart(),ts.getEnding());
}","/** 
 * Get the text from a   {@link TextSpan}. May throw an   {@link IndexOutOfBoundsException}if the   {@link Communication} and {@link TextSpan} do not align properly.
 * @return a {@link String} with the text of the {@link TextSpan} object. 
 */
public String getText(){
  return c.getProcessedContent().substring(ts.getStart(),ts.getEnding());
}",0.9738372093023256
147402,"/** 
 * Test method for   {@link edu.jhu.hlt.concrete.util.SuperTextSpan#getText()}.
 */
@Test public void testGetText(){
  Communication c=new Communication();
  String txt=""String_Node_Str"";
  String txtTwo=""String_Node_Str"";
  c.text=txt + txtTwo;
  TextSpan ts=new TextSpan(0,txt.length());
  SuperTextSpan sts=new SuperTextSpan(ts,c);
  assertEquals(txt,sts.getText());
  assertEquals(txtTwo,new SuperTextSpan(new TextSpan(txt.length(),txt.length() + txtTwo.length()),c).getText());
}","/** 
 * Test method for   {@link edu.jhu.hlt.concrete.util.SuperTextSpan#getText()}.
 */
@Test public void testGetText(){
  Communication c=new Communication();
  String txt=""String_Node_Str"";
  String txtTwo=""String_Node_Str"";
  c.text=txt + txtTwo;
  c.processedContent=txt + txtTwo;
  TextSpan ts=new TextSpan(0,txt.length());
  SuperTextSpan sts=new SuperTextSpan(ts,c);
  assertEquals(txt,sts.getText());
  assertEquals(txtTwo,new SuperTextSpan(new TextSpan(txt.length(),txt.length() + txtTwo.length()),c).getText());
}",0.9654491609081934
147403,"/** 
 * Return a   {@link List} of {@link Token} objects in the first {@link Tokenization} object inthis  {@link Communication} object. If none exists, will throw an exception.
 * @return a List of Token objects
 */
public List<Token> getTokens(){
  List<Token> tokenList;
  Tokenization tkn=comm.getSectionSegmentation(0).getSection(0).getSentenceSegmentation(0).getSentence(0).getTokenization(0);
  TokenRefSequence trs=this.mention.getTokenSequence();
  List<Integer> tokenIdList=trs.getTokenIdList();
  tokenList=new ArrayList<>(tokenIdList.size());
  for (  Integer i : tokenIdList)   tokenList.add(tkn.getToken(i));
  return tokenList;
}","/** 
 * Return a   {@link List} of {@link Token} objects in the first {@link Tokenization} object inthis  {@link Communication} object. If none exists, will throw an exception.
 * @return a List of Token objects
 */
public List<Token> getTokens(){
  List<Token> tokenList;
  Tokenization tkn=comm.getSectionSegmentation(0).getSection(0).getSentenceSegmentation(0).getSentence(0).getTokenization(0);
  TokenRefSequence trs=this.mention.getTokens();
  List<Integer> tokenIdList=trs.getTokenIdList();
  tokenList=new ArrayList<>(tokenIdList.size());
  for (  Integer i : tokenIdList)   tokenList.add(tkn.getToken(i));
  return tokenList;
}",0.9929632525410476
147404,"/** 
 * @return the next message in the protocol buffer
 * @throws ConcreteException 
 */
public Message next() throws ConcreteException {
  final int INT_SIZE=4;
  lastBytesRead=0;
  byte[] messageSizeBytes=new byte[INT_SIZE];
  try {
    if (inputStream.read(messageSizeBytes) < INT_SIZE) {
      return null;
    }
    int messageSize=new BigInteger(messageSizeBytes).intValue();
    lastBytesRead=INT_SIZE;
    if (messageSize < 1)     return null;
    byte[] messageBytes=new byte[messageSize];
    if (inputStream.read(messageBytes) < messageSize)     return null;
    lastBytesRead+=messageSize;
    this.totalBytesRead+=lastBytesRead;
    Method newBuilderMethod=messageClass.getMethod(""String_Node_Str"",(Class[])null);
    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null,(Object[])null);
    return builder.mergeFrom(messageBytes).build();
  }
 catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|IOException e) {
    throw new ConcreteException(e);
  }
}","/** 
 * @return the next message in the protocol buffer
 * @throws ConcreteException 
 */
public Message next() throws ConcreteException {
}",0.2339181286549707
147405,"public void write(Message message) throws IOException {
  byte[] messageBytes=message.toByteString().toByteArray();
  int size=messageBytes.length;
  final int INT_SIZE=4;
  ByteBuffer buffer=ByteBuffer.allocate(INT_SIZE);
  byte[] messageBytesSize=buffer.putInt(size).array();
  outputStream.write(messageBytesSize);
  outputStream.write(messageBytes);
}","public void write(Message message) throws IOException {
  byte[] messageBytes=message.toByteString().toByteArray();
  int size=messageBytes.length;
  final int LONG_SIZE=8;
  ByteBuffer buffer=ByteBuffer.allocate(LONG_SIZE);
  byte[] messageBytesSize=buffer.putLong(size).array();
  outputStream.write(messageBytesSize);
  outputStream.write(messageBytes);
}",0.9733520336605892
147406,"private Version(String v){
  int i=0;
  int stateBefore=STATE_MAJOR;
  int state=stateBefore;
  final char[] chars=v.toCharArray();
  int major=0;
  int minor=0;
  int patch=0;
  StringBuilder preRelease=null;
  StringBuilder buildMD=null;
  while (i <= chars.length) {
    final boolean stateSwitched=i == 0 || state != stateBefore;
    stateBefore=state;
    final int c=i == chars.length ? -1 : chars[i];
switch (state) {
case STATE_MAJOR:
      if (c != '.' && major == 0 && !stateSwitched) {
        throw illegalLeadingChar(v,c,""String_Node_Str"");
      }
 else       if (c >= '0' && c <= '9') {
        major=Character.digit(c,10) + major * 10;
      }
 else       if (c == '.') {
        state=STATE_MINOR;
      }
 else {
        throw unexpectedChar(v,c);
      }
    break;
case STATE_MINOR:
  if (c != '.' && minor == 0 && !stateSwitched) {
    throw illegalLeadingChar(v,c,""String_Node_Str"");
  }
 else   if (c >= '0' && c <= '9') {
    minor=Character.digit(c,10) + minor * 10;
  }
 else   if (c == '.') {
    state=STATE_PATCH;
  }
 else {
    throw unexpectedChar(v,c);
  }
break;
case STATE_PATCH:
if (c != EOS && c != '-' && c != '+' && patch == 0 && !stateSwitched) {
throw illegalLeadingChar(v,c,""String_Node_Str"");
}
 else if (c >= '0' && c <= '9') {
patch=Character.digit(c,10) + patch * 10;
}
 else if (c == '-') {
state=STATE_PRE_RELEASE;
}
 else if (c == '+') {
state=STATE_BUILD_MD;
}
 else if (c != EOS) {
throw unexpectedChar(v,c);
}
break;
case STATE_PRE_RELEASE:
preRelease=new StringBuilder();
state=parseIdentifiers(chars,i,preRelease,false,""String_Node_Str"");
i+=preRelease.length();
break;
case STATE_BUILD_MD:
buildMD=new StringBuilder();
state=parseIdentifiers(chars,i,buildMD,true,""String_Node_Str"");
break;
case EOS:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + state);
}
++i;
}
this.major=major;
this.minor=minor;
this.patch=patch;
checkParams(major,minor,patch);
this.preRelease=preRelease == null ? ""String_Node_Str"" : preRelease.toString();
this.buildMetaData=buildMD == null ? ""String_Node_Str"" : buildMD.toString();
}","private Version(String v){
  int i=0;
  int stateBefore=STATE_MAJOR;
  int state=stateBefore;
  final char[] chars=v.toCharArray();
  int majorPart=0;
  int minorPart=0;
  int patchpart=0;
  StringBuilder preReleasePart=null;
  StringBuilder buildMDPart=null;
  while (i <= chars.length) {
    final boolean stateSwitched=i == 0 || state != stateBefore;
    stateBefore=state;
    final int c=i == chars.length ? -1 : chars[i];
switch (state) {
case STATE_MAJOR:
      if (c != '.' && majorPart == 0 && !stateSwitched) {
        throw illegalLeadingChar(v,c,""String_Node_Str"");
      }
 else       if (c >= '0' && c <= '9') {
        majorPart=Character.digit(c,10) + majorPart * 10;
      }
 else       if (c == '.') {
        state=STATE_MINOR;
      }
 else {
        throw unexpectedChar(v,c);
      }
    break;
case STATE_MINOR:
  if (c != '.' && minorPart == 0 && !stateSwitched) {
    throw illegalLeadingChar(v,c,""String_Node_Str"");
  }
 else   if (c >= '0' && c <= '9') {
    minorPart=Character.digit(c,10) + minorPart * 10;
  }
 else   if (c == '.') {
    state=STATE_PATCH;
  }
 else {
    throw unexpectedChar(v,c);
  }
break;
case STATE_PATCH:
if (c != EOS && c != '-' && c != '+' && patchpart == 0 && !stateSwitched) {
throw illegalLeadingChar(v,c,""String_Node_Str"");
}
 else if (c >= '0' && c <= '9') {
patchpart=Character.digit(c,10) + patchpart * 10;
}
 else if (c == '-') {
state=STATE_PRE_RELEASE;
}
 else if (c == '+') {
state=STATE_BUILD_MD;
}
 else if (c != EOS) {
throw unexpectedChar(v,c);
}
break;
case STATE_PRE_RELEASE:
preReleasePart=new StringBuilder();
state=parseIdentifiers(chars,i,preReleasePart,false,""String_Node_Str"");
i+=preReleasePart.length();
break;
case STATE_BUILD_MD:
buildMDPart=new StringBuilder();
state=parseIdentifiers(chars,i,buildMDPart,true,""String_Node_Str"");
break;
case EOS:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + state);
}
++i;
}
this.major=majorPart;
this.minor=minorPart;
this.patch=patchpart;
checkParams(majorPart,minorPart,patchpart);
this.preRelease=preReleasePart == null ? ""String_Node_Str"" : preReleasePart.toString();
this.buildMetaData=buildMDPart == null ? ""String_Node_Str"" : buildMDPart.toString();
}",0.9729351376574896
147407,"private static int parseIdentifiers(char[] chars,int start,StringBuilder b,boolean allowLeading0,String partName){
  int state=STATE_PRE_RELEASE;
  int partStart=-1;
  int i=start;
  while (i <= chars.length) {
    final int c=i == chars.length ? -1 : chars[i];
switch (state) {
case STATE_PRE_RELEASE:
      if ((c == '.' || c == EOS) && partStart == -1) {
        throw unexpectedChar(new String(chars),c);
      }
 else       if (c == '.') {
        if (!allowLeading0 && chars[partStart] == '0' && i - partStart > 1) {
          throw illegalLeadingChar(new String(chars),c,partName);
        }
        partStart=-1;
        b.appendCodePoint(c);
        i++;
        continue;
      }
    if (partStart == -1) {
      partStart=i;
    }
  if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '-') {
    b.appendCodePoint(c);
    state=STATE_PRE_RELEASE_ID;
  }
 else   if (c >= '0' && c <= '9') {
    b.appendCodePoint(c);
  }
 else   if (c == '+') {
    if (!allowLeading0 && chars[partStart] == '0' && i - partStart > 1) {
      throw illegalLeadingChar(new String(chars),c,partName);
    }
    partStart=-1;
    return STATE_BUILD_MD;
  }
 else   if (c == EOS) {
    if (!allowLeading0 && chars[partStart] == '0' && i - partStart > 1) {
      throw illegalLeadingChar(new String(chars),partStart,partName);
    }
  }
 else {
    throw unexpectedChar(new String(chars),c);
  }
break;
case STATE_PRE_RELEASE_ID:
if (c == '.') {
b.appendCodePoint(c);
partStart=-1;
state=STATE_PRE_RELEASE;
}
 else if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '-') {
b.appendCodePoint(c);
}
 else if (c >= '0' && c <= '9') {
b.appendCodePoint(c);
}
 else if (c == '+') {
partStart=-1;
return STATE_BUILD_MD;
}
 else if (c != EOS) {
throw unexpectedChar(new String(chars),c);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + start);
}
++i;
}
return EOS;
}","private static int parseIdentifiers(char[] chars,int start,StringBuilder b,boolean allowLeading0,String partName){
  int state=STATE_PRE_RELEASE;
  int partStart=-1;
  int i=start;
  while (i <= chars.length) {
    final int c=i == chars.length ? -1 : chars[i];
switch (state) {
case STATE_PRE_RELEASE:
      if ((c == '.' || c == EOS) && partStart == -1) {
        throw unexpectedChar(new String(chars),c);
      }
 else       if (c == '.') {
        if (!allowLeading0 && chars[partStart] == '0' && i - partStart > 1) {
          throw illegalLeadingChar(new String(chars),c,partName);
        }
        partStart=-1;
        b.appendCodePoint(c);
        i++;
        continue;
      }
    if (partStart == -1) {
      partStart=i;
    }
  if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '-') {
    b.appendCodePoint(c);
    state=STATE_PRE_RELEASE_ID;
  }
 else   if (c >= '0' && c <= '9') {
    b.appendCodePoint(c);
  }
 else   if (c == '+') {
    if (!allowLeading0 && chars[partStart] == '0' && i - partStart > 1) {
      throw illegalLeadingChar(new String(chars),c,partName);
    }
    return STATE_BUILD_MD;
  }
 else   if (c == EOS) {
    if (!allowLeading0 && chars[partStart] == '0' && i - partStart > 1) {
      throw illegalLeadingChar(new String(chars),partStart,partName);
    }
  }
 else {
    throw unexpectedChar(new String(chars),c);
  }
break;
case STATE_PRE_RELEASE_ID:
if (c == '.') {
b.appendCodePoint(c);
partStart=-1;
state=STATE_PRE_RELEASE;
}
 else if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '-') {
b.appendCodePoint(c);
}
 else if (c >= '0' && c <= '9') {
b.appendCodePoint(c);
}
 else if (c == '+') {
return STATE_BUILD_MD;
}
 else if (c != EOS) {
throw unexpectedChar(new String(chars),c);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + start);
}
++i;
}
return EOS;
}",0.9914163090128756
147408,"private static void checkParams(int major,int minor,int patch){
  if (major < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (minor < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (patch < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (major == 0 && minor == 0 && patch == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","private static void checkParams(int major,int minor,int patch){
  require(major >= 0,""String_Node_Str"");
  require(minor >= 0,""String_Node_Str"");
  require(patch >= 0,""String_Node_Str"");
  require(major != 0 || minor != 0 || patch != 0,""String_Node_Str"");
}",0.212338593974175
147409,"/** 
 * Returns whether the given String is a valid pre-release identifier. That is, this method returns <code>true</code> if, and only if the  {@code preRelease} parameter is either the empty string or properlyformatted as a pre-release identifier according to the semantic version specification. <p> Note: this method does not throw an exception upon <code>null</code> input, but returns <code>false</code> instead. </p>
 * @param preRelease The String to check.
 * @return Whether the given String is a valid pre-release identifier.
 * @since 0.5.0
 */
public static boolean isValidPreRelease(String preRelease){
  if (preRelease == null) {
    return false;
  }
 else   if (preRelease.isEmpty()) {
    return true;
  }
  return PRE_RELEASE.matcher(preRelease).matches();
}","/** 
 * Returns whether the given String is a valid pre-release identifier. That is, this method returns <code>true</code> if, and only if the  {@code preRelease} parameter is either the empty string or properlyformatted as a pre-release identifier according to the semantic version specification. <p> Note: this method does not throw an exception upon <code>null</code> input, but returns <code>false</code> instead. </p>
 * @param preRelease The String to check.
 * @return Whether the given String is a valid pre-release identifier.
 * @since 0.5.0
 */
public static boolean isValidPreRelease(String preRelease){
  return preRelease != null && (preRelease.isEmpty() || PRE_RELEASE.matcher(preRelease).matches());
}",0.9189551239115874
147410,"/** 
 * Returns whether the given String is a valid build meta data identifier. That is, this method returns <code>true</code> if, and only if the  {@code buildMetaData} parameter is either the empty string or properlyformatted as a build meta data identifier according to the semantic version specification. <p> Note: this method does not throw an exception upon <code>null</code> input, but returns <code>false</code> instead. </p>
 * @param buildMetaData The String to check.
 * @return Whether the given String is a valid build meta data identifier.
 * @since 0.5.0
 */
public static boolean isValidBuildMetaData(String buildMetaData){
  if (buildMetaData == null) {
    return false;
  }
 else   if (buildMetaData.isEmpty()) {
    return true;
  }
  return PRE_RELEASE.matcher(buildMetaData).matches();
}","/** 
 * Returns whether the given String is a valid build meta data identifier. That is, this method returns <code>true</code> if, and only if the  {@code buildMetaData} parameter is either the empty string or properlyformatted as a build meta data identifier according to the semantic version specification. <p> Note: this method does not throw an exception upon <code>null</code> input, but returns <code>false</code> instead. </p>
 * @param buildMetaData The String to check.
 * @return Whether the given String is a valid build meta data identifier.
 * @since 0.5.0
 */
public static boolean isValidBuildMetaData(String buildMetaData){
  return buildMetaData != null && (buildMetaData.isEmpty() || BUILD_MD.matcher(buildMetaData).matches());
}",0.8856041131105399
147411,"@Test public void testIsValidBuildMDIdentifier() throws Exception {
  for (  final Version v : SEMVER_ORG_BMD_VERSIONS) {
    assertTrue(Version.isValidBuildMetaData(v.getPreRelease()));
  }
}","@Test public void testIsValidBuildMDIdentifier() throws Exception {
  for (  final Version v : SEMVER_ORG_BMD_VERSIONS) {
    assertTrue(v.toString(),Version.isValidBuildMetaData(v.getBuildMetaData()));
  }
}",0.91
147412,"/** 
 * Creates a String representation of this version by joining its parts together as by the semantic version specification.
 * @return The version as a String.
 */
@Override public String toString(){
  final StringBuilder b=new StringBuilder(this.preRelease.length() + this.buildMetaData.length() + 24);
  b.append(this.major).append(""String_Node_Str"").append(this.minor).append(""String_Node_Str"").append(this.patch);
  if (!this.preRelease.isEmpty()) {
    b.append(""String_Node_Str"").append(this.preRelease);
  }
  if (!this.buildMetaData.isEmpty()) {
    b.append(""String_Node_Str"").append(this.buildMetaData);
  }
  return b.toString();
}","/** 
 * Creates a String representation of this version by joining its parts together as by the semantic version specification.
 * @return The version as a String.
 */
@Override public String toString(){
  final StringBuilder b=new StringBuilder(this.preRelease.length() + this.buildMetaData.length() + TO_STRING_ESTIMATE);
  b.append(this.major).append(""String_Node_Str"").append(this.minor).append(""String_Node_Str"").append(this.patch);
  if (!this.preRelease.isEmpty()) {
    b.append(""String_Node_Str"").append(this.preRelease);
  }
  if (!this.buildMetaData.isEmpty()) {
    b.append(""String_Node_Str"").append(this.buildMetaData);
  }
  return b.toString();
}",0.9847094801223242
147413,"private static int compare(Version v1,Version v2,boolean withBuildMetaData){
  if (v1 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (v2 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (v1 == v2) {
    return 0;
  }
  final int mc, mm, mp;
  final int result;
  if ((mc=Integer.compare(v1.major,v2.major)) == 0) {
    if ((mm=Integer.compare(v1.minor,v2.minor)) == 0) {
      if ((mp=Integer.compare(v1.patch,v2.patch)) == 0) {
        if (v1.isPreRelease() && v2.isPreRelease()) {
          result=compareIdentifiers(v1.getPreReleaseParts(),v2.getPreReleaseParts());
        }
 else         if (v1.isPreRelease()) {
          result=-1;
        }
 else         if (v2.isPreRelease()) {
          result=1;
        }
 else {
          result=0;
        }
      }
 else {
        result=mp;
      }
    }
 else {
      result=mm;
    }
  }
 else {
    result=mc;
  }
  if (withBuildMetaData && result == 0) {
    if (v1.hasBuildMetaData() && v2.hasBuildMetaData()) {
      return compareIdentifiers(v1.getBuildMetaDataParts(),v2.getBuildMetaDataParts());
    }
 else     if (v1.hasBuildMetaData()) {
      return -1;
    }
 else {
      return 1;
    }
  }
  return result;
}","private static int compare(Version v1,Version v2,boolean withBuildMetaData){
}",0.1182714177407126
147414,"/** 
 * Determines whether this version is equal to the passed object (as determined by   {@link #equals(Object)} and additionally considers thebuild meta data part of both versions for equality.
 * @param obj The object to compare with.
 * @return <code>true</code> iff {@code this.equals(obj)} and{@code this.getBuildMetaData().equals(((Version) obj).getBuildMetaData())}
 * @since 0.2.0
 * @deprecated Since 0.4.0 - will be removed in 0.5.0. Use {@link #equalsWithBuildMetaData(Object)} instead.
 */
@Deprecated public boolean equalsIncludeBuildMetaData(Object obj){
  return testEquality(obj,true);
}","/** 
 * Determines whether this version is equal to the passed object (as determined by   {@link #equals(Object)} and additionally considers thebuild meta data part of both versions for equality.
 * @param obj The object to compare with.
 * @return <code>true</code> iff {@code this.equals(obj)} and{@code this.getBuildMetaData().equals(((Version) obj).getBuildMetaData())}
 * @since 0.2.0
 * @deprecated Since 0.4.0 - will be removed in 0.5.0. Use{@link #equalsWithBuildMetaData(Object)} instead.
 */
@Deprecated public boolean equalsIncludeBuildMetaData(Object obj){
  return testEquality(obj,true);
}",0.9991714995857498
147415,"/** 
 * Compares two Versions with additionally considering the build meta data field if all other parts are equal. Note: This is <em>not</em> part of the semantic version specification. <p> Comparison of the build meta data parts happens exactly as for pre release identifiers. Considering of build meta data first kicks in if both versions are equal when using their natural order. </p> <p> This method fulfills the general contract for Java's   {@link Comparator Comparators} and {@link Comparable Comparables}. </p>
 * @param v1 The first version for comparison.
 * @param v2 The second version for comparison.
 * @return A value below 0 iff {@code v1 &lt; v2}, a value above 0 iff  {@code v1 &gt; v2</tt> and 0 iff <tt>v1 = v2}.
 * @throws NullPointerException If either parameter is null.
 * @since 0.3.0
 */
public static int compareWithBuildMetaData(Version v1,Version v2){
  return compare(v1,v2,true);
}","/** 
 * Compares two Versions with additionally considering the build meta data field if all other parts are equal. Note: This is <em>not</em> part of the semantic version specification. <p> Comparison of the build meta data parts happens exactly as for pre release identifiers. Considering of build meta data first kicks in if both versions are equal when using their natural order. </p> <p> This method fulfills the general contract for Java's   {@link Comparator Comparators} and {@link Comparable Comparables}. </p>
 * @param v1 The first version for comparison.
 * @param v2 The second version for comparison.
 * @return A value below 0 iff {@code v1 &lt; v2}, a value above 0 iff  {@code v1 &gt; v2</tt> and 0 iff <tt>v1 = v2}.
 * @throws NullPointerException If either parameter is null.
 * @since 0.3.0
 */
public static int compareWithBuildMetaData(Version v1,Version v2){
  if (v1 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (v2 == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return compare(v1,v2,true);
}",0.9175879396984924
147416,"/** 
 * Returns the lower of the 2 given Versions. If both versions are equal, then the first argument is returned.
 * @param v1 The first version.
 * @param v2 The second version.
 * @return The lower version.
 * @throws IllegalArgumentException If either argument is <code>null</code>.
 * @since 0.4.0
 */
public static Version min(Version v1,Version v2){
  if (v1 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (v2 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return v1.compareTo(v2) <= 0 ? v1 : v2;
}","/** 
 * Returns the lower of this version and the given version according to its natural ordering. If versions are equal,   {@code this} is returned.
 * @param other The version to compare with.
 * @return The lower version.
 * @throws IllegalArgumentException If {@code other} is <code>null</code>.
 * @since 0.4.0
 * @see #min(Version,Version)
 */
public Version min(Version other){
  return min(this,other);
}",0.4791878172588832
147417,"/** 
 * The hash code for a version instance is computed from the fields  {@link #getMajor() major},   {@link #getMinor() minor},   {@link #getPatch() patch} and {@link #getPreRelease() pre-release}.
 * @return A hash code for this object.
 */
@Override public int hashCode(){
  return Objects.hash(this.major,this.minor,this.patch,this.preRelease);
}","/** 
 * The hash code for a version instance is computed from the fields  {@link #getMajor() major},   {@link #getMinor() minor},   {@link #getPatch() patch} and {@link #getPreRelease() pre-release}.
 * @return A hash code for this object.
 */
@Override public int hashCode(){
  int h=this.hash;
  if (h == 0) {
    h=Objects.hash(this.major,this.minor,this.patch,this.preRelease);
    this.hash=h;
  }
  return this.hash;
}",0.8851612903225806
147418,"/** 
 * Returns the greater of the 2 given Versions. If both versions are equal, then the first argument is returned.
 * @param v1 The first version.
 * @param v2 The second version.
 * @return The greater version.
 * @throws IllegalArgumentException If either argument is <code>null</code>.
 * @since 0.4.0
 */
public static Version max(Version v1,Version v2){
  if (v1 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (v2 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return v1.compareTo(v2) < 0 ? v2 : v1;
}","/** 
 * Returns the greater of this version and the given version according to its natural ordering. If versions are equal,   {@code this} is returned.
 * @param other The version to compare with.
 * @return The greater version.
 * @throws IllegalArgumentException If {@code other} is <code>null</code>.
 * @since 0.4.0
 * @see #max(Version,Version)
 */
public Version max(Version other){
  return max(this,other);
}",0.469758064516129
147419,"/** 
 * Tries to parse the provided String as a semantic version. If  {@code allowPreRelease} is <code>false</code>, the String must haveneither a pre-release nor a build meta data part. Thus the given String must have the format  {@code X.Y.Z} where at least one part must begreater than zero. <p> If  {@code allowPreRelease} is <code>true</code>, the String is parsedaccoring to the normal semantic version specification. </p>
 * @param versionString The String to parse.
 * @param allowPreRelease Whether pre-release and build meta data field areallowed.
 * @return The parsed version.
 * @throws VersionFormatException If the String is no valid version
 * @since 0.4.0
 */
public static Version parseVersion(String versionString,boolean allowPreRelease){
  final Version version=parseVersion(versionString);
  if (!allowPreRelease && (version.isPreRelease() || version.hasBuildMetaData())) {
    throw new VersionFormatException(String.format(""String_Node_Str""));
  }
  return version;
}","/** 
 * Tries to parse the provided String as a semantic version. If  {@code allowPreRelease} is <code>false</code>, the String must haveneither a pre-release nor a build meta data part. Thus the given String must have the format  {@code X.Y.Z} where at least one part must begreater than zero. <p> If  {@code allowPreRelease} is <code>true</code>, the String is parsedaccording to the normal semantic version specification. </p>
 * @param versionString The String to parse.
 * @param allowPreRelease Whether pre-release and build meta data field areallowed.
 * @return The parsed version.
 * @throws VersionFormatException If the String is no valid version
 * @since 0.4.0
 */
public static Version parseVersion(String versionString,boolean allowPreRelease){
  final Version version=parseVersion(versionString);
  if (!allowPreRelease && (version.isPreRelease() || version.hasBuildMetaData())) {
    throw new VersionFormatException(String.format(""String_Node_Str""));
  }
  return version;
}",0.9994957135653052
147420,"/** 
 * Creates a new Version from the three provided components. The version's pre release and build meta data fields will be empty. Neither value must be lower than 0 and at least one must be greater than zero
 * @param major The major version.
 * @param minor The minor version.
 * @param patch The patch version.
 * @return The version instance.
 */
public final static Version create(int major,int minor,int patch){
  checkParams(major,minor,patch);
  return new Version(major,minor,patch,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Creates a new Version from the three provided components. The version's pre release and build meta data fields will be empty. Neither value must be lower than 0 and at least one must be greater than zero
 * @param major The major version.
 * @param minor The minor version.
 * @param patch The patch version.
 * @return The version instance.
 */
public static final Version create(int major,int minor,int patch){
  checkParams(major,minor,patch);
  return new Version(major,minor,patch,""String_Node_Str"",""String_Node_Str"");
}",0.9868667917448404
147421,"/** 
 * Tries to parse the provided String as a semantic version. If the string does not conform to the semantic version specification, a  {@link VersionFormatException} will be thrown.
 * @param versionString The String to parse.
 * @return The parsed version.
 * @throws VersionFormatException If the String is no valid version
 * @throws IllegalArgumentException If {@code versionString} is<code>null</code>.
 */
public final static Version parseVersion(String versionString){
  if (versionString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Matcher m=VERSION_PATTERN.matcher(versionString);
  if (!m.matches()) {
    throw new VersionFormatException(versionString);
  }
  final int major=Integer.parseInt(m.group(MAJOR_GROUP));
  final int minor=Integer.parseInt(m.group(MINOR_GROUP));
  final int patch=Integer.parseInt(m.group(PATCH_GROUP));
  checkParams(major,minor,patch);
  final String preRelease;
  if (m.group(PRE_RELEASE_GROUP) != null) {
    preRelease=m.group(PRE_RELEASE_GROUP);
  }
 else {
    preRelease=""String_Node_Str"";
  }
  final String buildMD;
  if (m.group(BUILD_MD_GROUP) != null) {
    buildMD=m.group(BUILD_MD_GROUP);
  }
 else {
    buildMD=""String_Node_Str"";
  }
  return new Version(major,minor,patch,preRelease,buildMD);
}","/** 
 * Tries to parse the provided String as a semantic version. If the string does not conform to the semantic version specification, a  {@link VersionFormatException} will be thrown.
 * @param versionString The String to parse.
 * @return The parsed version.
 * @throws VersionFormatException If the String is no valid version
 * @throws IllegalArgumentException If {@code versionString} is<code>null</code>.
 */
public static final Version parseVersion(String versionString){
  if (versionString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Matcher m=VERSION_PATTERN.matcher(versionString);
  if (!m.matches()) {
    throw new VersionFormatException(versionString);
  }
  final int major=Integer.parseInt(m.group(MAJOR_GROUP));
  final int minor=Integer.parseInt(m.group(MINOR_GROUP));
  final int patch=Integer.parseInt(m.group(PATCH_GROUP));
  checkParams(major,minor,patch);
  final String preRelease;
  if (m.group(PRE_RELEASE_GROUP) != null) {
    preRelease=m.group(PRE_RELEASE_GROUP);
  }
 else {
    preRelease=""String_Node_Str"";
  }
  final String buildMD;
  if (m.group(BUILD_MD_GROUP) != null) {
    buildMD=m.group(BUILD_MD_GROUP);
  }
 else {
    buildMD=""String_Node_Str"";
  }
  return new Version(major,minor,patch,preRelease,buildMD);
}",0.9907192575406032
147422,"/** 
 * Tries to parse the provided String as a semantic version. If the string does not conform to the semantic versioning specification, a  {@link VersionFormatException} will be thrown.
 * @param versionString The String to parse.
 * @return The parsed version.
 * @throws VersionFormatException If the String is no valid version
 * @throws IllegalArgumentException If <tt>versionString</tt> is<code>null</code>.
 */
public final static Version of(String versionString){
  if (versionString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Matcher m=VERSION_PATTERN.matcher(versionString);
  if (!m.matches()) {
    throw new VersionFormatException(versionString);
  }
  final int major=Integer.parseInt(m.group(MAJOR_GROUP));
  final int minor=Integer.parseInt(m.group(MINOR_GROUP));
  final int patch=Integer.parseInt(m.group(PATCH_GROUP));
  final String preRelease;
  if (m.group(PRE_RELEASE_GROUP) != null) {
    preRelease=m.group(PRE_RELEASE_GROUP);
  }
 else {
    preRelease=""String_Node_Str"";
  }
  final String buildMD;
  if (m.group(BUILD_MD_GROUP) != null) {
    buildMD=m.group(BUILD_MD_GROUP);
  }
 else {
    buildMD=""String_Node_Str"";
  }
  return new Version(major,minor,patch,preRelease,buildMD);
}","/** 
 * Tries to parse the provided String as a semantic version. If the string does not conform to the semantic versioning specification, a  {@link VersionFormatException} will be thrown.
 * @param versionString The String to parse.
 * @return The parsed version.
 * @throws VersionFormatException If the String is no valid version
 * @throws IllegalArgumentException If <tt>versionString</tt> is<code>null</code>.
 */
public final static Version of(String versionString){
  if (versionString == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Matcher m=VERSION_PATTERN.matcher(versionString);
  if (!m.matches()) {
    throw new VersionFormatException(versionString);
  }
  final int major=Integer.parseInt(m.group(MAJOR_GROUP));
  final int minor=Integer.parseInt(m.group(MINOR_GROUP));
  final int patch=Integer.parseInt(m.group(PATCH_GROUP));
  checkParams(major,minor,patch);
  final String preRelease;
  if (m.group(PRE_RELEASE_GROUP) != null) {
    preRelease=m.group(PRE_RELEASE_GROUP);
  }
 else {
    preRelease=""String_Node_Str"";
  }
  final String buildMD;
  if (m.group(BUILD_MD_GROUP) != null) {
    buildMD=m.group(BUILD_MD_GROUP);
  }
 else {
    buildMD=""String_Node_Str"";
  }
  return new Version(major,minor,patch,preRelease,buildMD);
}",0.9866141732283464
147423,"@Test public void testSimplePrecedence(){
  final Version v1=Version.of(""String_Node_Str"");
  final Version v2=Version.of(""String_Node_Str"");
  final Version v3=Version.of(""String_Node_Str"");
  final Version v4=Version.of(""String_Node_Str"");
  Assert.assertTrue(v1.compareTo(v2) < 0);
  Assert.assertTrue(v2.compareTo(v3) < 0);
  Assert.assertTrue(v3.compareTo(v4) < 0);
}","@Test public void testSimplePrecedence(){
  final Version v1=Version.of(""String_Node_Str"");
  final Version v2=Version.of(""String_Node_Str"");
  final Version v3=Version.of(""String_Node_Str"");
  final Version v4=Version.of(""String_Node_Str"");
  Assert.assertTrue(v1.compareTo(v2) < 0);
  Assert.assertTrue(v2.compareTo(v3) < 0);
  Assert.assertTrue(v3.compareTo(v4) < 0);
  Assert.assertTrue(v2.compareTo(v1) > 0);
  Assert.assertTrue(v3.compareTo(v2) > 0);
  Assert.assertTrue(v4.compareTo(v3) > 0);
}",0.852233676975945
147424,"/** 
 * Determines whether this version is still under initial development.
 * @return <code>true</code> iff this version's major part is zero.
 */
public boolean isInitialDevelopment(){
  return this.major > 0;
}","/** 
 * Determines whether this version is still under initial development.
 * @return <code>true</code> iff this version's major part is zero.
 */
public boolean isInitialDevelopment(){
  return this.major == 0;
}",0.9929742388758782
147425,"/** 
 * Set topicMessageDeliveryStrategy to DISCARD_ALLOWED so that broker will simulate an acknowledgement if some subscribers are slow to acknowledge the message
 * @throws XPathExpressionException
 * @throws IOException
 * @throws ConfigurationException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws URISyntaxException
 * @throws AutomationUtilException
 */
@BeforeClass public void setupConfiguration() throws XPathExpressionException, IOException, ConfigurationException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, URISyntaxException, AutomationUtilException {
  super.serverManager=new ServerConfigurationManager(automationContext);
  String defaultMBConfigurationPath=ServerConfigurationManager.getCarbonHome() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  ConfigurationEditor configurationEditor=new ConfigurationEditor(defaultMBConfigurationPath);
  configurationEditor.updateProperty(AndesConfiguration.PERFORMANCE_TUNING_EXPIRE_MESSAGES_IN_DLC,""String_Node_Str"");
  configurationEditor.updateProperty(AndesConfiguration.PERFORMANCE_TUNING_PRE_DELIVERY_EXPIRY_DELETION_INTERVAL,""String_Node_Str"");
  configurationEditor.updateProperty(AndesConfiguration.PERFORMANCE_TUNING_PERIODIC_EXPIRY_MESSAGE_DELETION_INTERVAL,""String_Node_Str"");
  configurationEditor.updateProperty(AndesConfiguration.TRANSPORTS_AMQP_MAXIMUM_REDELIVERY_ATTEMPTS,""String_Node_Str"");
  configurationEditor.applyUpdatedConfigurationAndRestartServer(serverManager);
}","/** 
 * Set topicMessageDeliveryStrategy to DISCARD_ALLOWED so that broker will simulate an acknowledgement if some subscribers are slow to acknowledge the message
 * @throws XPathExpressionException
 * @throws IOException
 * @throws ConfigurationException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws URISyntaxException
 * @throws AutomationUtilException
 */
@BeforeClass public void setupConfiguration() throws XPathExpressionException, IOException, ConfigurationException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, URISyntaxException, AutomationUtilException {
  super.serverManager=new ServerConfigurationManager(automationContext);
  String defaultMBConfigurationPath=ServerConfigurationManager.getCarbonHome() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  ConfigurationEditor configurationEditor=new ConfigurationEditor(defaultMBConfigurationPath);
  configurationEditor.updateProperty(AndesConfiguration.PERFORMANCE_TUNING_EXPIRE_MESSAGES_IN_DLC,""String_Node_Str"");
  configurationEditor.updateProperty(AndesConfiguration.PERFORMANCE_TUNING_PRE_DELIVERY_EXPIRY_DELETION_INTERVAL,""String_Node_Str"");
  configurationEditor.updateProperty(AndesConfiguration.PERFORMANCE_TUNING_PERIODIC_EXPIRY_MESSAGE_DELETION_INTERVAL,""String_Node_Str"");
  configurationEditor.updateProperty(AndesConfiguration.TRANSPORTS_AMQP_MAXIMUM_REDELIVERY_ATTEMPTS,""String_Node_Str"");
  configurationEditor.applyUpdatedConfigurationAndRestartServer(serverManager);
  defaultAndesAckWaitTimeOut=System.getProperty(AndesClientConstants.ANDES_ACK_WAIT_TIMEOUT_PROPERTY);
  System.setProperty(AndesClientConstants.ANDES_ACK_WAIT_TIMEOUT_PROPERTY,""String_Node_Str"");
}",0.9422795194843246
147426,"/** 
 * Revert changed configurations
 * @throws AutomationUtilException
 * @throws IOException
 */
@AfterClass() public void cleanup() throws AutomationUtilException, IOException {
  super.serverManager.restoreToLastConfiguration(true);
}","/** 
 * Revert changed configurations
 * @throws AutomationUtilException
 * @throws IOException
 */
@AfterClass() public void cleanup() throws AutomationUtilException, IOException {
  if (StringUtils.isBlank(defaultAndesAckWaitTimeOut)) {
    System.clearProperty(AndesClientConstants.ANDES_ACK_WAIT_TIMEOUT_PROPERTY);
  }
 else {
    System.setProperty(AndesClientConstants.ANDES_ACK_WAIT_TIMEOUT_PROPERTY,defaultAndesAckWaitTimeOut);
  }
  super.serverManager.restoreToLastConfiguration(true);
}",0.6494565217391305
147427,"/** 
 * 1. Creates a queue. 2. Publish messages to the queue. 3. Delete the queue. 4. Check if queue exists still without refreshing the page.
 * @throws XPathExpressionException
 * @throws IOException
 * @throws JMSException
 * @throws NamingException
 * @throws AndesClientException
 * @throws AndesClientConfigurationException
 */
@Test(groups={""String_Node_Str"",""String_Node_Str""}) public void performPublishDeleteCheck() throws XPathExpressionException, IOException, JMSException, NamingException, AndesClientException, AndesClientConfigurationException {
  String queueName=""String_Node_Str"";
  driver.get(getLoginURL());
  LoginPage loginPage=new LoginPage(driver);
  HomePage homePage=loginPage.loginAs(getCurrentUserName(),getCurrentPassword());
  QueueAddPage queueAddPage=homePage.getQueueAddPage();
  Assert.assertEquals(queueAddPage.addQueue(queueName),true);
  AndesJMSPublisherClientConfiguration publisherConfig=new AndesJMSPublisherClientConfiguration(getAMQPPort(),ExchangeType.QUEUE,queueName);
  publisherConfig.setNumberOfMessagesToSend(1000);
  publisherConfig.setPrintsPerMessageCount(100L);
  AndesClient publisherClient=new AndesClient(publisherConfig,true);
  publisherClient.startClient();
  AndesClientUtils.sleepForInterval(3000);
  QueuesBrowsePage queuesBrowsePage=homePage.getQueuesBrowsePage();
  Assert.assertEquals(queuesBrowsePage.deleteQueue(queueName),true);
  queuesBrowsePage.isQueuePresent(queueName);
  logout();
}","/** 
 * 1. Creates a queue. 2. Publish messages to the queue. 3. Delete the queue. 4. Check if queue exists still without refreshing the page.
 * @throws XPathExpressionException
 * @throws IOException
 * @throws JMSException
 * @throws NamingException
 * @throws AndesClientException
 * @throws AndesClientConfigurationException
 */
@Test() public void performPublishDeleteCheck() throws XPathExpressionException, IOException, JMSException, NamingException, AndesClientException, AndesClientConfigurationException {
  String queueName=""String_Node_Str"";
  driver.get(getLoginURL());
  LoginPage loginPage=new LoginPage(driver);
  HomePage homePage=loginPage.loginAs(getCurrentUserName(),getCurrentPassword());
  QueueAddPage queueAddPage=homePage.getQueueAddPage();
  Assert.assertEquals(queueAddPage.addQueue(queueName),true);
  AndesJMSPublisherClientConfiguration publisherConfig=new AndesJMSPublisherClientConfiguration(getAMQPPort(),ExchangeType.QUEUE,queueName);
  publisherConfig.setNumberOfMessagesToSend(1000);
  publisherConfig.setPrintsPerMessageCount(100L);
  AndesClient publisherClient=new AndesClient(publisherConfig,true);
  publisherClient.startClient();
  QueuesBrowsePage queuesBrowsePage=homePage.getQueuesBrowsePage();
  queuesBrowsePage.deleteQueue(queueName);
  queuesBrowsePage=homePage.getQueuesBrowsePage();
  Assert.assertTrue(!queuesBrowsePage.isQueuePresent(queueName));
  logout();
}",0.9337979094076656
147428,"/** 
 * Tests the queue deletion from UI <p/> Test Steps: - login to management console - create a queue - Go to queue browse page - Delete console
 * @throws XPathExpressionException
 * @throws IOException
 */
@Test() public void testCase() throws XPathExpressionException, IOException {
  String qName=""String_Node_Str"";
  driver.get(getLoginURL());
  LoginPage loginPage=new LoginPage(driver);
  HomePage homePage=loginPage.loginAs(getCurrentUserName(),getCurrentPassword());
  QueueAddPage queueAddPage=homePage.getQueueAddPage();
  Assert.assertEquals(queueAddPage.addQueue(qName),true);
  AndesClientUtils.sleepForInterval(3000);
  QueuesBrowsePage queuesBrowsePage=homePage.getQueuesBrowsePage();
  Assert.assertEquals(queuesBrowsePage.deleteQueue(qName),true);
  logout();
}","/** 
 * Tests the queue deletion from UI <p/> Test Steps: - login to management console - create a queue - Go to queue browse page - Delete console
 * @throws XPathExpressionException
 * @throws IOException
 */
@Test() public void testCase() throws XPathExpressionException, IOException {
  String qName=""String_Node_Str"";
  driver.get(getLoginURL());
  LoginPage loginPage=new LoginPage(driver);
  HomePage homePage=loginPage.loginAs(getCurrentUserName(),getCurrentPassword());
  QueueAddPage queueAddPage=homePage.getQueueAddPage();
  Assert.assertEquals(queueAddPage.addQueue(qName),true);
  QueuesBrowsePage queuesBrowsePage=homePage.getQueuesBrowsePage();
  queuesBrowsePage.deleteQueue(qName);
  queuesBrowsePage=homePage.getQueuesBrowsePage();
  Assert.assertTrue(!queuesBrowsePage.isQueuePresent(qName));
  logout();
}",0.7761194029850746
147429,"public static void main(String[] args) throws NamingException, JMSException {
  SampleHierarchicalTopicsClient hierarchicalTopicsClient=new SampleHierarchicalTopicsClient();
  hierarchicalTopicsClient.start();
  TopicPublisher topicPublisher=new TopicPublisher();
  topicPublisher.publishMessage();
}","public static void main(String[] args) throws NamingException, JMSException, InterruptedException {
  SampleHierarchicalTopicsClient hierarchicalTopicsClient=new SampleHierarchicalTopicsClient();
  hierarchicalTopicsClient.start();
  while (!hierarchicalTopicsClient.isSubscriptionComplete()) {
    Thread.sleep(500);
  }
  TopicPublisher topicPublisher=new TopicPublisher();
  topicPublisher.publishMessage();
}",0.8426966292134831
147430,"public void subscribe() throws NamingException, JMSException {
  InitialContext ctx=init();
  TopicConnectionFactory connFactory=(TopicConnectionFactory)ctx.lookup(CF_NAME);
  TopicConnection topicConnection=connFactory.createTopicConnection();
  topicConnection.start();
  TopicSession topicSession=topicConnection.createTopicSession(false,QueueSession.AUTO_ACKNOWLEDGE);
  Topic topic1=topicSession.createTopic(topicName_1);
  Topic topic2=topicSession.createTopic(topicName_2);
  Topic topic3=topicSession.createTopic(topicName_3);
  Topic topic4=topicSession.createTopic(topicName_4);
  Topic topic5=topicSession.createTopic(topicName_5);
  Topic topic6=(Topic)ctx.lookup(topicName_6);
  Topic topic7=(Topic)ctx.lookup(topicName_7);
  TopicSubscriber topicSubscriber1=topicSession.createSubscriber(topic6);
  TopicSubscriber topicSubscriber2=topicSession.createSubscriber(topic7);
  Message message1;
  System.out.println(""String_Node_Str"" + topicName_6 + ""String_Node_Str"");
  while ((message1=topicSubscriber1.receive(5000)) != null) {
    if (message1 instanceof TextMessage) {
      TextMessage textMessage=(TextMessage)message1;
      System.out.println(""String_Node_Str"" + textMessage.getText());
    }
  }
  Message message2;
  System.out.println(""String_Node_Str"" + topicName_7 + ""String_Node_Str"");
  while ((message2=topicSubscriber2.receive(5000)) != null) {
    if (message2 instanceof TextMessage) {
      TextMessage textMessage=(TextMessage)message2;
      System.out.println(""String_Node_Str"" + textMessage.getText());
    }
  }
  topicSubscriber1.close();
  topicSubscriber2.close();
  topicSession.close();
  topicConnection.stop();
  topicConnection.close();
}","public void subscribe() throws NamingException, JMSException {
  InitialContext ctx=init();
  TopicConnectionFactory connFactory=(TopicConnectionFactory)ctx.lookup(CF_NAME);
  TopicConnection topicConnection=connFactory.createTopicConnection();
  topicConnection.start();
  TopicSession topicSession1=topicConnection.createTopicSession(false,QueueSession.AUTO_ACKNOWLEDGE);
  TopicSession topicSession2=topicConnection.createTopicSession(false,QueueSession.AUTO_ACKNOWLEDGE);
  Topic topic1=topicSession1.createTopic(topicName_1);
  Topic topic2=topicSession1.createTopic(topicName_2);
  Topic topic3=topicSession1.createTopic(topicName_3);
  Topic topic4=topicSession1.createTopic(topicName_4);
  Topic topic5=topicSession1.createTopic(topicName_5);
  Topic topic6=(Topic)ctx.lookup(topicName_6);
  Topic topic7=(Topic)ctx.lookup(topicName_7);
  TopicSubscriber topicSubscriber1=topicSession1.createSubscriber(topic6);
  TopicSubscriber topicSubscriber2=topicSession2.createSubscriber(topic7);
  isSubscriptionComplete=true;
  Message message1;
  System.out.println(""String_Node_Str"" + topicName_6 + ""String_Node_Str"");
  while ((message1=topicSubscriber1.receive(5000)) != null) {
    if (message1 instanceof TextMessage) {
      TextMessage textMessage=(TextMessage)message1;
      System.out.println(""String_Node_Str"" + textMessage.getText());
    }
  }
  Message message2;
  System.out.println(""String_Node_Str"" + topicName_7 + ""String_Node_Str"");
  while ((message2=topicSubscriber2.receive(5000)) != null) {
    if (message2 instanceof TextMessage) {
      TextMessage textMessage=(TextMessage)message2;
      System.out.println(""String_Node_Str"" + textMessage.getText());
    }
  }
  topicSubscriber1.close();
  topicSubscriber2.close();
  topicSession1.close();
  topicSession2.close();
  topicConnection.stop();
  topicConnection.close();
}",0.9527313897537504
147431,"public void publishMessage() throws NamingException, JMSException {
  InitialContext ctx=init();
  TopicConnectionFactory connFactory=(TopicConnectionFactory)ctx.lookup(CF_NAME);
  TopicConnection topicConnection=connFactory.createTopicConnection();
  topicConnection.start();
  TopicSession topicSession=topicConnection.createTopicSession(false,QueueSession.AUTO_ACKNOWLEDGE);
  Topic topic1=(Topic)ctx.lookup(topicName_1);
  Topic topic2=(Topic)ctx.lookup(topicName_2);
  Topic topic3=(Topic)ctx.lookup(topicName_3);
  Topic topic4=(Topic)ctx.lookup(topicName_4);
  Topic topic5=(Topic)ctx.lookup(topicName_5);
  javax.jms.TopicPublisher topicPublisher1=topicSession.createPublisher(topic1);
  javax.jms.TopicPublisher topicPublisher2=topicSession.createPublisher(topic2);
  javax.jms.TopicPublisher topicPublisher3=topicSession.createPublisher(topic3);
  javax.jms.TopicPublisher topicPublisher4=topicSession.createPublisher(topic4);
  javax.jms.TopicPublisher topicPublisher5=topicSession.createPublisher(topic5);
  TextMessage textMessage1=topicSession.createTextMessage(""String_Node_Str"");
  TextMessage textMessage2=topicSession.createTextMessage(""String_Node_Str"");
  TextMessage textMessage3=topicSession.createTextMessage(""String_Node_Str"");
  TextMessage textMessage4=topicSession.createTextMessage(""String_Node_Str"");
  topicPublisher2.publish(textMessage1);
  topicPublisher3.publish(textMessage2);
  topicPublisher4.publish(textMessage3);
  topicPublisher5.publish(textMessage4);
  topicSession.close();
  topicConnection.close();
}","public void publishMessage() throws NamingException, JMSException {
  InitialContext ctx=init();
  TopicConnectionFactory connFactory=(TopicConnectionFactory)ctx.lookup(CF_NAME);
  TopicConnection topicConnection=connFactory.createTopicConnection();
  topicConnection.start();
  TopicSession topicSession=topicConnection.createTopicSession(false,QueueSession.AUTO_ACKNOWLEDGE);
  Topic topic1=(Topic)ctx.lookup(topicName_1);
  Topic topic2=(Topic)ctx.lookup(topicName_2);
  Topic topic3=(Topic)ctx.lookup(topicName_3);
  Topic topic4=(Topic)ctx.lookup(topicName_4);
  Topic topic5=(Topic)ctx.lookup(topicName_5);
  javax.jms.TopicPublisher topicPublisher1=topicSession.createPublisher(topic1);
  javax.jms.TopicPublisher topicPublisher2=topicSession.createPublisher(topic2);
  javax.jms.TopicPublisher topicPublisher3=topicSession.createPublisher(topic3);
  javax.jms.TopicPublisher topicPublisher4=topicSession.createPublisher(topic4);
  javax.jms.TopicPublisher topicPublisher5=topicSession.createPublisher(topic5);
  TextMessage textMessage1=topicSession.createTextMessage(""String_Node_Str"");
  TextMessage textMessage2=topicSession.createTextMessage(""String_Node_Str"");
  TextMessage textMessage3=topicSession.createTextMessage(""String_Node_Str"");
  TextMessage textMessage4=topicSession.createTextMessage(""String_Node_Str"");
  TextMessage textMessage5=topicSession.createTextMessage(""String_Node_Str"");
  topicPublisher1.publish(textMessage1);
  topicPublisher2.publish(textMessage2);
  topicPublisher3.publish(textMessage3);
  topicPublisher4.publish(textMessage4);
  topicPublisher5.publish(textMessage5);
  topicSession.close();
  topicConnection.close();
}",0.9604484584241668
147432,"/** 
 * Send 100 mqtt message on all QOS levels and receive them from a single node.
 * @throws MqttException
 * @throws XPathExpressionException 
 */
@Test(groups={""String_Node_Str"",""String_Node_Str""},description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicTwoNodeMultipleMessagesTestCase(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=100;
  boolean saveMessages=false;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfiguration=buildConfiguration(automationContextForMB2);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  Assert.assertEquals(mqttClientEngine.getReceivedMessageCount(),noOfMessages,""String_Node_Str"");
}","/** 
 * Send 100 mqtt message on all QOS levels and receive them from a single node.
 * @throws MqttException
 * @throws XPathExpressionException 
 */
@Test(groups={""String_Node_Str"",""String_Node_Str""},description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicTwoNodeMultipleMessagesTestCase(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=100;
  boolean saveMessages=true;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfigurationForNode2=buildConfiguration(automationContextForMB2);
  MQTTClientConnectionConfiguration clientConnectionConfigurationForNode3=buildConfiguration(automationContextForMB3);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfigurationForNode2);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfigurationForNode3);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  List<MqttMessage> receivedMessages=mqttClientEngine.getReceivedMessages();
  Assert.assertEquals(receivedMessages.size(),noOfMessages,""String_Node_Str"");
  Assert.assertEquals(receivedMessages.get(0).getPayload(),MQTTConstants.TEMPLATE_PAYLOAD,""String_Node_Str"");
}",0.8710359408033826
147433,"/** 
 * Send and receive messages in a single node for a topic
 * @throws MqttException
 * @throws XPathExpressionException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicSingleNodeSendReceive(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=1;
  boolean saveMessages=true;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfigurationForNode2=buildConfiguration(automationContextForMB2);
  MQTTClientConnectionConfiguration clientConnectionConfigurationForNode3=buildConfiguration(automationContextForMB3);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfigurationForNode2);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfigurationForNode3);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  List<MqttMessage> receivedMessages=mqttClientEngine.getReceivedMessages();
  Assert.assertEquals(receivedMessages.size(),noOfMessages,""String_Node_Str"");
  Assert.assertEquals(receivedMessages.get(0).getPayload(),MQTTConstants.TEMPLATE_PAYLOAD,""String_Node_Str"");
}","/** 
 * Send and receive messages in a single node for a topic
 * @throws MqttException
 * @throws XPathExpressionException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicSingleNodeSendReceive(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=1;
  boolean saveMessages=true;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfiguration=buildConfiguration(automationContextForMB2);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  List<MqttMessage> receivedMessages=mqttClientEngine.getReceivedMessages();
  Assert.assertEquals(receivedMessages.size(),noOfMessages,""String_Node_Str"");
  Assert.assertEquals(receivedMessages.get(0).getPayload(),MQTTConstants.TEMPLATE_PAYLOAD,""String_Node_Str"");
}",0.9506044905008636
147434,"/** 
 * Send message to a node and receive from a another node.
 * @throws MqttException
 * @throws XPathExpressionException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicTwoNodeSendReceive(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=1;
  boolean saveMessages=true;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfiguration=buildConfiguration(automationContextForMB2);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  List<MqttMessage> receivedMessages=mqttClientEngine.getReceivedMessages();
  Assert.assertEquals(receivedMessages.size(),noOfMessages,""String_Node_Str"");
  Assert.assertEquals(receivedMessages.get(0).getPayload(),MQTTConstants.TEMPLATE_PAYLOAD,""String_Node_Str"");
}","/** 
 * Send message to a node and receive from a another node.
 * @throws MqttException
 * @throws XPathExpressionException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicTwoNodeSendReceive(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=1;
  boolean saveMessages=true;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfigurationForNode2=buildConfiguration(automationContextForMB2);
  MQTTClientConnectionConfiguration clientConnectionConfigurationForNode3=buildConfiguration(automationContextForMB3);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfigurationForNode2);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfigurationForNode3);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  List<MqttMessage> receivedMessages=mqttClientEngine.getReceivedMessages();
  Assert.assertEquals(receivedMessages.size(),noOfMessages,""String_Node_Str"");
  Assert.assertEquals(receivedMessages.get(0).getPayload(),MQTTConstants.TEMPLATE_PAYLOAD,""String_Node_Str"");
}",0.9505361466620548
147435,"/** 
 * Send 100 mqtt message on all QOS levels and receive them from a single node.
 * @throws MqttException
 * @throws XPathExpressionException 
 */
@Test(groups={""String_Node_Str"",""String_Node_Str""},description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicSingleNodeMultipleMessagesTestCase(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=100;
  boolean saveMessages=false;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfiguration=buildConfiguration(automationContextForMB2);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  Assert.assertEquals(mqttClientEngine.getReceivedMessageCount(),noOfMessages,""String_Node_Str"");
}","/** 
 * Send 100 mqtt message on all QOS levels and receive them from a single node.
 * @throws MqttException
 * @throws XPathExpressionException 
 */
@Test(groups={""String_Node_Str"",""String_Node_Str""},description=""String_Node_Str"",dataProvider=""String_Node_Str"",dataProviderClass=QualityOfServiceDataProvider.class) public void testSingleTopicSingleNodeMultipleMessagesTestCase(QualityOfService qualityOfService) throws MqttException, XPathExpressionException {
  String topic=""String_Node_Str"";
  int noOfSubscribers=1;
  int noOfPublishers=1;
  int noOfMessages=100;
  boolean saveMessages=true;
  MQTTClientEngine mqttClientEngine=new MQTTClientEngine();
  MQTTClientConnectionConfiguration clientConnectionConfiguration=buildConfiguration(automationContextForMB2);
  mqttClientEngine.createSubscriberConnection(topic,qualityOfService,noOfSubscribers,saveMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.createPublisherConnection(topic,qualityOfService,MQTTConstants.TEMPLATE_PAYLOAD,noOfPublishers,noOfMessages,ClientMode.BLOCKING,clientConnectionConfiguration);
  mqttClientEngine.waitUntilAllMessageReceivedAndShutdownClients();
  Assert.assertEquals(mqttClientEngine.getReceivedMessageCount(),noOfMessages,""String_Node_Str"");
}",0.9972364784840112
147436,"/** 
 * Get dead letter channel queue
 * @return queue
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws java.rmi.RemoteException
 */
public Queue getDlcQueue() throws AndesAdminServiceBrokerManagerAdminException, java.rmi.RemoteException {
  Queue[] queueList=stub.getAllQueues();
  Queue dlcQueue=null;
  if (null != queueList) {
    for (    Queue queue : queueList) {
      String nameOfQueue=queue.getQueueName();
      if (StringUtils.isNotBlank(nameOfQueue) && nameOfQueue.contains(AndesConstants.DEAD_LETTER_QUEUE_SUFFIX)) {
        dlcQueue=queue;
        break;
      }
    }
  }
  return dlcQueue;
}","/** 
 * Get dead letter channel queue
 * @return queue
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws java.rmi.RemoteException
 */
public Queue getDlcQueue() throws AndesAdminServiceBrokerManagerAdminException, java.rmi.RemoteException {
  return stub.getDLCQueue();
}",0.5901639344262295
147437,"/** 
 * Get queue object by queue name
 * @param name the name of the queue
 * @return a queue
 * @throws RemoteException
 * @throws AndesAdminServiceBrokerManagerAdminException
 */
public Queue getQueueByName(String name) throws RemoteException, AndesAdminServiceBrokerManagerAdminException {
  Queue[] queues=stub.getAllQueues();
  if (queues != null && queues.length > 0) {
    for (    Queue queue : queues) {
      if (queue.getQueueName().equalsIgnoreCase(name)) {
        return queue;
      }
    }
  }
  return null;
}","/** 
 * Get queue object by queue name
 * @param name the name of the queue
 * @return a queue
 * @throws RemoteException
 * @throws AndesAdminServiceBrokerManagerAdminException
 */
public Queue getQueueByName(String name) throws RemoteException, AndesAdminServiceBrokerManagerAdminException {
  return stub.getQueueByName(name);
}",0.7319347319347319
147438,"/** 
 * Clicks on the ""Add Subscription"" button on a specific topic in topic browse page.
 * @param topicName The name of the topic to which the subscription should be added.
 * @return A {@link TopicSubscribePage}.
 */
public TopicSubscribePage addSubscription(String topicName){
  TopicSubscribePage browsePage=null;
  WebElement topicTree=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  List<WebElement> liList=topicTree.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement liNode : liList) {
    WebElement topicNameNode=liNode.findElement(By.className(""String_Node_Str""));
    if (topicName.equals(topicNameNode.getText())) {
      topicNameNode.click();
      WebElement topicSubscribeLink=liNode.findElement(By.className(""String_Node_Str""));
      topicSubscribeLink.click();
      browsePage=new TopicSubscribePage(driver);
    }
  }
  return browsePage;
}","/** 
 * Clicks on the ""Add Subscription"" button on a specific topic in topic browse page.
 * @param topicName The name of the topic to which the subscription should be added.
 * @return A {@link TopicSubscribePage}.
 */
public TopicSubscribePage addSubscription(String topicName){
  TopicSubscribePage browsePage=null;
  WebElement topicTree=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  List<WebElement> liList=topicTree.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement liNode : liList) {
    WebElement topicNameNode=liNode.findElement(By.className(""String_Node_Str""));
    if (topicName.equals(topicNameNode.getText())) {
      topicNameNode.click();
      WebElement topicSubscribeLink=liNode.findElement(By.className(""String_Node_Str""));
      topicSubscribeLink.click();
      browsePage=new TopicSubscribePage(driver);
      break;
    }
  }
  return browsePage;
}",0.9929919137466308
147439,"/** 
 * Delete all the messages in DeadLetter Channel
 */
public void deleteAllDLCMessages(){
  WebElement dlcTable=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  List<WebElement> allDlcRows=dlcTable.findElements(By.tagName(""String_Node_Str""));
  if (allDlcRows.size() > 1) {
    log.info(""String_Node_Str"");
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  }
}","/** 
 * Delete all the messages in DeadLetter Channel
 */
public void deleteAllDLCMessages(){
  WebElement dlcTable=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  List<WebElement> allDlcRows=dlcTable.findElements(By.tagName(""String_Node_Str""));
  if (allDlcRows.size() > 0) {
    log.info(""String_Node_Str"");
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  }
}",0.9987046632124352
147440,"/** 
 * Initializes Andes Admin Client
 * @param backendUrl           the backend url
 * @param sessionCookie        the session cookie string
 * @param configurationContext configuration context
 * @throws AxisFault
 */
public AndesAdminClient(String backendUrl,String sessionCookie,ConfigurationContext configurationContext) throws AxisFault {
  this.backendUrl=backendUrl + ""String_Node_Str"";
  this.sessionCookie=sessionCookie;
  this.configurationContext=configurationContext;
  stub=new AndesAdminServiceStub(configurationContext,this.backendUrl);
  configureCookie(stub._getServiceClient());
}","/** 
 * Initializes Andes Admin Client
 * @param backendUrl           the backend url
 * @param sessionCookie        the session cookie string
 * @throws AxisFault
 */
public AndesAdminClient(String backendUrl,String sessionCookie) throws AxisFault {
  this.backendUrl=backendUrl + ""String_Node_Str"";
  this.sessionCookie=sessionCookie;
  stub=new AndesAdminServiceStub(this.backendUrl);
  AuthenticateStubUtil.authenticateStub(sessionCookie,stub);
}",0.5961904761904762
147441,"/** 
 * Initializes Topic Admin Client
 * @param backendUrl           the backend url
 * @param sessionCookie        the session cookie string
 * @param configurationContext configuration context
 * @throws AxisFault
 */
public TopicAdminClient(String backendUrl,String sessionCookie,ConfigurationContext configurationContext) throws AxisFault {
  this.backendUrl=backendUrl + ""String_Node_Str"";
  this.SessionCookie=sessionCookie;
  this.configurationContext=configurationContext;
  stub=new TopicManagerAdminServiceStub(configurationContext,this.backendUrl);
  configureCookie(stub._getServiceClient());
}","/** 
 * Initializes Topic Admin Client
 * @param backendUrl           the backend url
 * @param sessionCookie        the session cookie string
 * @throws AxisFault
 */
public TopicAdminClient(String backendUrl,String sessionCookie) throws AxisFault {
  this.backendUrl=backendUrl + ""String_Node_Str"";
  this.SessionCookie=sessionCookie;
  stub=new TopicManagerAdminServiceStub(this.backendUrl);
  configureCookie(stub._getServiceClient());
}",0.833969465648855
147442,"/** 
 * Create and login topic admin client to nodes in cluster Suppressing ""UnusedDeclaration"" warning as this method can be used later in writing test cases.
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 * @throws XPathExpressionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 */
@SuppressWarnings(""String_Node_Str"") protected void initTopicAdminClients() throws LoginAuthenticationExceptionException, IOException, XPathExpressionException, URISyntaxException, SAXException, XMLStreamException, AutomationUtilException {
  topicAdminClients=new HashMap<String,TopicAdminClient>();
  if (contextMap != null && contextMap.size() > 0) {
    for (    Map.Entry<String,AutomationContext> entry : contextMap.entrySet()) {
      AutomationContext tempContext=entry.getValue();
      topicAdminClients.put(entry.getKey(),new TopicAdminClient(tempContext.getContextUrls().getBackEndUrl(),login(tempContext),ConfigurationContextProvider.getInstance().getConfigurationContext()));
    }
  }
}","/** 
 * Create and login topic admin client to nodes in cluster Suppressing ""UnusedDeclaration"" warning as this method can be used later in writing test cases.
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 * @throws XPathExpressionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 */
@SuppressWarnings(""String_Node_Str"") protected void initTopicAdminClients() throws LoginAuthenticationExceptionException, IOException, XPathExpressionException, URISyntaxException, SAXException, XMLStreamException, AutomationUtilException {
  topicAdminClients=new HashMap<String,TopicAdminClient>();
  if (contextMap != null && contextMap.size() > 0) {
    for (    Map.Entry<String,AutomationContext> entry : contextMap.entrySet()) {
      AutomationContext tempContext=entry.getValue();
      topicAdminClients.put(entry.getKey(),new TopicAdminClient(tempContext.getContextUrls().getBackEndUrl(),login(tempContext)));
    }
  }
}",0.9662591687041564
147443,"/** 
 * Create and login andes admin client to nodes in cluster
 * @throws XPathExpressionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 */
protected void initAndesAdminClients() throws XPathExpressionException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, IOException, AutomationUtilException {
  andesAdminClients=new HashMap<String,AndesAdminClient>();
  if (contextMap != null && contextMap.size() > 0) {
    for (    Map.Entry<String,AutomationContext> entry : contextMap.entrySet()) {
      AutomationContext tempContext=entry.getValue();
      andesAdminClients.put(entry.getKey(),new AndesAdminClient(tempContext.getContextUrls().getBackEndUrl(),login(tempContext),ConfigurationContextProvider.getInstance().getConfigurationContext()));
    }
  }
}","/** 
 * Create and login andes admin client to nodes in cluster
 * @throws XPathExpressionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 */
protected void initAndesAdminClients() throws XPathExpressionException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, IOException, AutomationUtilException {
  andesAdminClients=new HashMap<String,AndesAdminClient>();
  if (contextMap != null && contextMap.size() > 0) {
    for (    Map.Entry<String,AutomationContext> entry : contextMap.entrySet()) {
      AutomationContext tempContext=entry.getValue();
      andesAdminClients.put(entry.getKey(),new AndesAdminClient(tempContext.getContextUrls().getBackEndUrl(),login(tempContext)));
    }
  }
}",0.9612141652613828
147444,"/** 
 * Test case 1 1. Start a Durable subscriber from a normal tenant (Not super tenant) (Topic - topictenant1.com/durableTenantTopic) 2. Send 200 messages to the the topic 3. Durable subscriber should receive all 200 messages
 * @throws AndesClientConfigurationException
 * @throws JMSException
 * @throws NamingException
 * @throws IOException
 * @throws AndesClientException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void performSingleTenantMultipleUserDurableTopicTestCase() throws AndesClientConfigurationException, JMSException, NamingException, IOException, AndesClientException, XPathExpressionException, URISyntaxException, SAXException, LoginAuthenticationExceptionException, XMLStreamException, LogoutAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, TopicManagerAdminServiceEventAdminExceptionException, AutomationUtilException {
  String destinationName=""String_Node_Str"";
  int sendMessageCount=200;
  int expectedMessageCount=200;
  AndesJMSConsumerClientConfiguration adminConsumerConfig=new AndesJMSConsumerClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.TOPIC,destinationName);
  adminConsumerConfig.setUnSubscribeAfterEachMessageCount(expectedMessageCount);
  adminConsumerConfig.setPrintsPerMessageCount(expectedMessageCount / 10L);
  adminConsumerConfig.setDurable(true,""String_Node_Str"");
  AndesClient adminConsumerClient=new AndesClient(adminConsumerConfig,true);
  adminConsumerClient.startClient();
  TopicRolePermission topicRolePermission=new TopicRolePermission();
  topicRolePermission.setRoleName(PUBLISHER_ROLE);
  topicRolePermission.setAllowedToSubscribe(true);
  topicRolePermission.setAllowedToPublish(true);
  AutomationContext tenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LoginLogoutClient loginLogoutClient=new LoginLogoutClient(tenantContext);
  String sessionCookie=loginLogoutClient.login();
  TopicAdminClient topicAdminClient=new TopicAdminClient(super.backendURL,sessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  topicAdminClient.updatePermissionForTopic(destinationName,topicRolePermission);
  loginLogoutClient.logout();
  AndesJMSPublisherClientConfiguration tenantPublisherConfig=new AndesJMSPublisherClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.TOPIC,destinationName);
  tenantPublisherConfig.setNumberOfMessagesToSend(sendMessageCount);
  tenantPublisherConfig.setPrintsPerMessageCount(sendMessageCount / 10L);
  AndesClient tenantPublisherClient=new AndesClient(tenantPublisherConfig,true);
  tenantPublisherClient.startClient();
  AndesClientUtils.waitForMessagesAndShutdown(adminConsumerClient,AndesClientConstants.DEFAULT_RUN_TIME);
  Assert.assertEquals(tenantPublisherClient.getSentMessageCount(),sendMessageCount,""String_Node_Str"" + ""String_Node_Str"");
  Assert.assertEquals(adminConsumerClient.getReceivedMessageCount(),expectedMessageCount,""String_Node_Str"" + ""String_Node_Str"");
}","/** 
 * Test case 1 1. Start a Durable subscriber from a normal tenant (Not super tenant) (Topic - topictenant1.com/durableTenantTopic) 2. Send 200 messages to the the topic 3. Durable subscriber should receive all 200 messages
 * @throws AndesClientConfigurationException
 * @throws JMSException
 * @throws NamingException
 * @throws IOException
 * @throws AndesClientException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void performSingleTenantMultipleUserDurableTopicTestCase() throws AndesClientConfigurationException, JMSException, NamingException, IOException, AndesClientException, XPathExpressionException, URISyntaxException, SAXException, LoginAuthenticationExceptionException, XMLStreamException, LogoutAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, TopicManagerAdminServiceEventAdminExceptionException, AutomationUtilException {
  String destinationName=""String_Node_Str"";
  int sendMessageCount=200;
  int expectedMessageCount=200;
  AndesJMSConsumerClientConfiguration adminConsumerConfig=new AndesJMSConsumerClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.TOPIC,destinationName);
  adminConsumerConfig.setUnSubscribeAfterEachMessageCount(expectedMessageCount);
  adminConsumerConfig.setPrintsPerMessageCount(expectedMessageCount / 10L);
  adminConsumerConfig.setDurable(true,""String_Node_Str"");
  AndesClient adminConsumerClient=new AndesClient(adminConsumerConfig,true);
  adminConsumerClient.startClient();
  TopicRolePermission topicRolePermission=new TopicRolePermission();
  topicRolePermission.setRoleName(PUBLISHER_ROLE);
  topicRolePermission.setAllowedToSubscribe(true);
  topicRolePermission.setAllowedToPublish(true);
  AutomationContext tenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LoginLogoutClient loginLogoutClient=new LoginLogoutClient(tenantContext);
  String sessionCookie=loginLogoutClient.login();
  TopicAdminClient topicAdminClient=new TopicAdminClient(super.backendURL,sessionCookie);
  topicAdminClient.updatePermissionForTopic(destinationName,topicRolePermission);
  loginLogoutClient.logout();
  AndesJMSPublisherClientConfiguration tenantPublisherConfig=new AndesJMSPublisherClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.TOPIC,destinationName);
  tenantPublisherConfig.setNumberOfMessagesToSend(sendMessageCount);
  tenantPublisherConfig.setPrintsPerMessageCount(sendMessageCount / 10L);
  AndesClient tenantPublisherClient=new AndesClient(tenantPublisherConfig,true);
  tenantPublisherClient.startClient();
  AndesClientUtils.waitForMessagesAndShutdown(adminConsumerClient,AndesClientConstants.DEFAULT_RUN_TIME);
  Assert.assertEquals(tenantPublisherClient.getSentMessageCount(),sendMessageCount,""String_Node_Str"" + ""String_Node_Str"");
  Assert.assertEquals(adminConsumerClient.getReceivedMessageCount(),expectedMessageCount,""String_Node_Str"" + ""String_Node_Str"");
}",0.9885666942833472
147445,"/** 
 * Test case 1 1. Start a client in a tenant(Normal tenant) which listens to a queue 2. Send 200 messages to the queue 3. Client should receive all 200 messages
 * @throws JMSException
 * @throws IOException
 * @throws NamingException
 * @throws AndesClientConfigurationException
 * @throws AndesClientException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void performSingleTenantMultipleUserQueueTestCase() throws JMSException, IOException, NamingException, AndesClientConfigurationException, AndesClientException, LoginAuthenticationExceptionException, XPathExpressionException, AndesAdminServiceBrokerManagerAdminException, URISyntaxException, SAXException, LogoutAuthenticationExceptionException, XMLStreamException, AutomationUtilException {
  int sendMessageCount=200;
  int expectedMessageCount=200;
  String destinationName=""String_Node_Str"";
  AndesJMSConsumerClientConfiguration adminConsumerConfig=new AndesJMSConsumerClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  adminConsumerConfig.setMaximumMessagesToReceived(expectedMessageCount);
  adminConsumerConfig.setPrintsPerMessageCount(expectedMessageCount / 10L);
  AndesClient adminConsumerClient=new AndesClient(adminConsumerConfig,true);
  adminConsumerClient.startClient();
  QueueRolePermission queueRolePermission=new QueueRolePermission();
  queueRolePermission.setRoleName(PUBLISHER_ROLE);
  queueRolePermission.setAllowedToConsume(true);
  queueRolePermission.setAllowedToPublish(true);
  AutomationContext tenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LoginLogoutClient loginLogoutClient=new LoginLogoutClient(tenantContext);
  String sessionCookie=loginLogoutClient.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,sessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  andesAdminClient.updatePermissionForQueue(destinationName,queueRolePermission);
  loginLogoutClient.logout();
  AndesJMSPublisherClientConfiguration tenantPublisherConfig=new AndesJMSPublisherClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  tenantPublisherConfig.setNumberOfMessagesToSend(sendMessageCount);
  tenantPublisherConfig.setPrintsPerMessageCount(sendMessageCount / 10L);
  AndesClient tenantPublisherClient=new AndesClient(tenantPublisherConfig,true);
  tenantPublisherClient.startClient();
  AndesClientUtils.waitForMessagesAndShutdown(adminConsumerClient,AndesClientConstants.DEFAULT_RUN_TIME);
  Assert.assertEquals(tenantPublisherClient.getSentMessageCount(),sendMessageCount,""String_Node_Str"");
  Assert.assertEquals(adminConsumerClient.getReceivedMessageCount(),expectedMessageCount,""String_Node_Str"");
}","/** 
 * Test case 1 1. Start a client in a tenant(Normal tenant) which listens to a queue 2. Send 200 messages to the queue 3. Client should receive all 200 messages
 * @throws JMSException
 * @throws IOException
 * @throws NamingException
 * @throws AndesClientConfigurationException
 * @throws AndesClientException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void performSingleTenantMultipleUserQueueTestCase() throws JMSException, IOException, NamingException, AndesClientConfigurationException, AndesClientException, LoginAuthenticationExceptionException, XPathExpressionException, AndesAdminServiceBrokerManagerAdminException, URISyntaxException, SAXException, LogoutAuthenticationExceptionException, XMLStreamException, AutomationUtilException {
  int sendMessageCount=200;
  int expectedMessageCount=200;
  String destinationName=""String_Node_Str"";
  AndesJMSConsumerClientConfiguration adminConsumerConfig=new AndesJMSConsumerClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  adminConsumerConfig.setMaximumMessagesToReceived(expectedMessageCount);
  adminConsumerConfig.setPrintsPerMessageCount(expectedMessageCount / 10L);
  AndesClient adminConsumerClient=new AndesClient(adminConsumerConfig,true);
  adminConsumerClient.startClient();
  QueueRolePermission queueRolePermission=new QueueRolePermission();
  queueRolePermission.setRoleName(PUBLISHER_ROLE);
  queueRolePermission.setAllowedToConsume(true);
  queueRolePermission.setAllowedToPublish(true);
  AutomationContext tenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LoginLogoutClient loginLogoutClient=new LoginLogoutClient(tenantContext);
  String sessionCookie=loginLogoutClient.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,sessionCookie);
  andesAdminClient.updatePermissionForQueue(destinationName,queueRolePermission);
  loginLogoutClient.logout();
  AndesJMSPublisherClientConfiguration tenantPublisherConfig=new AndesJMSPublisherClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  tenantPublisherConfig.setNumberOfMessagesToSend(sendMessageCount);
  tenantPublisherConfig.setPrintsPerMessageCount(sendMessageCount / 10L);
  AndesClient tenantPublisherClient=new AndesClient(tenantPublisherConfig,true);
  tenantPublisherClient.startClient();
  AndesClientUtils.waitForMessagesAndShutdown(adminConsumerClient,AndesClientConstants.DEFAULT_RUN_TIME);
  Assert.assertEquals(tenantPublisherClient.getSentMessageCount(),sendMessageCount,""String_Node_Str"");
  Assert.assertEquals(adminConsumerClient.getReceivedMessageCount(),expectedMessageCount,""String_Node_Str"");
}",0.9876233183856502
147446,"/** 
 * Assigning consuming publishing permissions of a queue to a role.
 * @param queueName   The queue name
 * @param permissions New permissions for the role. can be publish, consume.
 * @throws XPathExpressionException
 * @throws IOException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws LogoutAuthenticationExceptionException
 * @throws UserAdminUserAdminException
 */
public void updateQueueRoleConsumePublishPermission(String queueName,QueueRolePermission permissions) throws XPathExpressionException, IOException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, LogoutAuthenticationExceptionException, UserAdminUserAdminException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForAdmin=new LoginLogoutClient(super.automationContext);
  String sessionCookie=loginLogoutClientForAdmin.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,sessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  andesAdminClient.updatePermissionForQueue(queueName,permissions);
  loginLogoutClientForAdmin.logout();
}","/** 
 * Assigning consuming publishing permissions of a queue to a role.
 * @param queueName   The queue name
 * @param permissions New permissions for the role. can be publish, consume.
 * @throws XPathExpressionException
 * @throws IOException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws LogoutAuthenticationExceptionException
 * @throws UserAdminUserAdminException
 */
public void updateQueueRoleConsumePublishPermission(String queueName,QueueRolePermission permissions) throws XPathExpressionException, IOException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, LogoutAuthenticationExceptionException, UserAdminUserAdminException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForAdmin=new LoginLogoutClient(super.automationContext);
  String sessionCookie=loginLogoutClientForAdmin.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,sessionCookie);
  andesAdminClient.updatePermissionForQueue(queueName,permissions);
  loginLogoutClientForAdmin.logout();
}",0.9733281793583302
147447,"/** 
 * Deleting the queues that were created.
 * @throws IOException
 * @throws XPathExpressionException
 * @throws LogoutAuthenticationExceptionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 */
@AfterClass() public void cleanUpQueues() throws IOException, XPathExpressionException, LogoutAuthenticationExceptionException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForAdmin=new LoginLogoutClient(super.automationContext);
  String sessionCookie=loginLogoutClientForAdmin.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,sessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  loginLogoutClientForAdmin.logout();
}","/** 
 * Deleting the queues that were created.
 * @throws IOException
 * @throws XPathExpressionException
 * @throws LogoutAuthenticationExceptionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 */
@AfterClass() public void cleanUpQueues() throws IOException, XPathExpressionException, LogoutAuthenticationExceptionException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForAdmin=new LoginLogoutClient(super.automationContext);
  String sessionCookie=loginLogoutClientForAdmin.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,sessionCookie);
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  andesAdminClient.deleteQueue(""String_Node_Str"");
  loginLogoutClientForAdmin.logout();
}",0.8824567596187787
147448,"/** 
 * This test case will test functionality of tenant dead letter channel. 1. Publish 1 queue message to tenant. 2. Add consumer for the queue message. 3. Consumer do not acknowledge for the queue message. 4. Message will put into tenant dlc after retry sending queue message 10 times. 5. Number of messages in tenant dlc should be equal to 1. 6. Number of messages in super tenant dlc should be equal to 0.
 * @throws JMSException
 * @throws IOException
 * @throws NamingException
 * @throws AndesClientConfigurationException
 * @throws AndesClientException
 * @throws LoginAuthenticationExceptionException
 * @throws XPathExpressionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws LogoutAuthenticationExceptionException
 * @throws XMLStreamException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void performTenantDeadLetterChannelTestCase() throws JMSException, IOException, NamingException, AndesClientConfigurationException, AndesClientException, LoginAuthenticationExceptionException, XPathExpressionException, AndesAdminServiceBrokerManagerAdminException, URISyntaxException, SAXException, LogoutAuthenticationExceptionException, XMLStreamException, AutomationUtilException {
  int sendMessageCount=1;
  Queue tenantUserDlcQueue;
  Queue superAdminDlcQueue;
  String destinationName=""String_Node_Str"";
  AutomationContext tenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LoginLogoutClient loginLogoutClient=new LoginLogoutClient(tenantContext);
  String sessionCookie=loginLogoutClient.login();
  AndesAdminClient andesClient=new AndesAdminClient(super.backendURL,sessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  loginLogoutClient.logout();
  andesClient.purgeQueue(tenantDlcQueueName);
  AutomationContext superTenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",FrameworkConstants.SUPER_TENANT_KEY,FrameworkConstants.SUPER_TENANT_ADMIN);
  LoginLogoutClient loginLogoutSuperTenant=new LoginLogoutClient(superTenantContext);
  String SuperTenantSessionCookie=loginLogoutSuperTenant.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,SuperTenantSessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  loginLogoutSuperTenant.logout();
  andesClient.purgeQueue(superTenantDlcQueueName);
  AndesJMSConsumerClientConfiguration consumerConfig=new AndesJMSConsumerClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  consumerConfig.setAcknowledgeMode(JMSAcknowledgeMode.CLIENT_ACKNOWLEDGE);
  consumerConfig.setAcknowledgeAfterEachMessageCount(200L);
  consumerConfig.setPrintsPerMessageCount(sendMessageCount);
  AndesClient consumerClient=new AndesClient(consumerConfig,true);
  consumerClient.startClient();
  AndesJMSPublisherClientConfiguration tenantPublisherConfig=new AndesJMSPublisherClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  tenantPublisherConfig.setNumberOfMessagesToSend(sendMessageCount);
  tenantPublisherConfig.setPrintsPerMessageCount(sendMessageCount);
  AndesClient tenantPublisherClient=new AndesClient(tenantPublisherConfig,true);
  tenantPublisherClient.startClient();
  AndesClientUtils.waitForMessagesAndShutdown(consumerClient,AndesClientConstants.DEFAULT_RUN_TIME);
  tenantUserDlcQueue=andesClient.getDlcQueue();
  superAdminDlcQueue=andesAdminClient.getDlcQueue();
  Assert.assertEquals(tenantUserDlcQueue.getMessageCount(),sendMessageCount,""String_Node_Str"");
  Assert.assertEquals(superAdminDlcQueue.getMessageCount(),0,""String_Node_Str"");
}","/** 
 * This test case will test functionality of tenant dead letter channel. 1. Publish 1 queue message to tenant. 2. Add consumer for the queue message. 3. Consumer do not acknowledge for the queue message. 4. Message will put into tenant dlc after retry sending queue message 10 times. 5. Number of messages in tenant dlc should be equal to 1. 6. Number of messages in super tenant dlc should be equal to 0.
 * @throws JMSException
 * @throws IOException
 * @throws NamingException
 * @throws AndesClientConfigurationException
 * @throws AndesClientException
 * @throws LoginAuthenticationExceptionException
 * @throws XPathExpressionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws LogoutAuthenticationExceptionException
 * @throws XMLStreamException
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void performTenantDeadLetterChannelTestCase() throws JMSException, IOException, NamingException, AndesClientConfigurationException, AndesClientException, LoginAuthenticationExceptionException, XPathExpressionException, AndesAdminServiceBrokerManagerAdminException, URISyntaxException, SAXException, LogoutAuthenticationExceptionException, XMLStreamException, AutomationUtilException {
  int sendMessageCount=1;
  Queue tenantUserDlcQueue;
  Queue superAdminDlcQueue;
  String destinationName=""String_Node_Str"";
  AutomationContext tenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  LoginLogoutClient loginLogoutClient=new LoginLogoutClient(tenantContext);
  String sessionCookie=loginLogoutClient.login();
  AndesAdminClient andesClient=new AndesAdminClient(super.backendURL,sessionCookie);
  loginLogoutClient.logout();
  andesClient.purgeQueue(tenantDlcQueueName);
  AutomationContext superTenantContext=new AutomationContext(""String_Node_Str"",""String_Node_Str"",FrameworkConstants.SUPER_TENANT_KEY,FrameworkConstants.SUPER_TENANT_ADMIN);
  LoginLogoutClient loginLogoutSuperTenant=new LoginLogoutClient(superTenantContext);
  String SuperTenantSessionCookie=loginLogoutSuperTenant.login();
  AndesAdminClient andesAdminClient=new AndesAdminClient(super.backendURL,SuperTenantSessionCookie);
  loginLogoutSuperTenant.logout();
  andesClient.purgeQueue(superTenantDlcQueueName);
  AndesJMSConsumerClientConfiguration consumerConfig=new AndesJMSConsumerClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  consumerConfig.setAcknowledgeMode(JMSAcknowledgeMode.CLIENT_ACKNOWLEDGE);
  consumerConfig.setAcknowledgeAfterEachMessageCount(200L);
  consumerConfig.setPrintsPerMessageCount(sendMessageCount);
  AndesClient consumerClient=new AndesClient(consumerConfig,true);
  consumerClient.startClient();
  AndesJMSPublisherClientConfiguration tenantPublisherConfig=new AndesJMSPublisherClientConfiguration(""String_Node_Str"",""String_Node_Str"",ExchangeType.QUEUE,destinationName);
  tenantPublisherConfig.setNumberOfMessagesToSend(sendMessageCount);
  tenantPublisherConfig.setPrintsPerMessageCount(sendMessageCount);
  AndesClient tenantPublisherClient=new AndesClient(tenantPublisherConfig,true);
  tenantPublisherClient.startClient();
  AndesClientUtils.waitForMessagesAndShutdown(consumerClient,AndesClientConstants.DEFAULT_RUN_TIME);
  tenantUserDlcQueue=andesClient.getDlcQueue();
  superAdminDlcQueue=andesAdminClient.getDlcQueue();
  Assert.assertEquals(tenantUserDlcQueue.getMessageCount(),sendMessageCount,""String_Node_Str"");
  Assert.assertEquals(superAdminDlcQueue.getMessageCount(),0,""String_Node_Str"");
}",0.9813160032493908
147449,"/** 
 * Assigning consuming publishing permissions of a topic to a role.
 * @param topicName   The topic name
 * @param permissions New permissions for the role. can be publish, consume.
 * @throws XPathExpressionException
 * @throws IOException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws LogoutAuthenticationExceptionException
 * @throws UserAdminUserAdminException
 */
public void updateTopicRoleConsumePublishPermission(String topicName,TopicRolePermission permissions) throws XPathExpressionException, IOException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, LogoutAuthenticationExceptionException, UserAdminUserAdminException, TopicManagerAdminServiceEventAdminExceptionException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForUser=new LoginLogoutClient(automationContext);
  String sessionCookie=loginLogoutClientForUser.login();
  TopicAdminClient topicAdminClient=new TopicAdminClient(backendURL,sessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  topicAdminClient.updatePermissionForTopic(topicName,permissions);
  loginLogoutClientForUser.logout();
}","/** 
 * Assigning consuming publishing permissions of a topic to a role.
 * @param topicName   The topic name
 * @param permissions New permissions for the role. can be publish, consume.
 * @throws XPathExpressionException
 * @throws IOException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws AndesAdminServiceBrokerManagerAdminException
 * @throws LogoutAuthenticationExceptionException
 * @throws UserAdminUserAdminException
 */
public void updateTopicRoleConsumePublishPermission(String topicName,TopicRolePermission permissions) throws XPathExpressionException, IOException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, AndesAdminServiceBrokerManagerAdminException, LogoutAuthenticationExceptionException, UserAdminUserAdminException, TopicManagerAdminServiceEventAdminExceptionException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForUser=new LoginLogoutClient(automationContext);
  String sessionCookie=loginLogoutClientForUser.login();
  TopicAdminClient topicAdminClient=new TopicAdminClient(backendURL,sessionCookie);
  topicAdminClient.updatePermissionForTopic(topicName,permissions);
  loginLogoutClientForUser.logout();
}",0.974108818011257
147450,"/** 
 * Deleting the topics that were created.
 * @throws XPathExpressionException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 * @throws XMLStreamException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws TopicManagerAdminServiceEventAdminExceptionException
 * @throws LogoutAuthenticationExceptionException
 */
@AfterClass() public void cleanUpTopics() throws XPathExpressionException, LoginAuthenticationExceptionException, IOException, XMLStreamException, URISyntaxException, SAXException, TopicManagerAdminServiceEventAdminExceptionException, LogoutAuthenticationExceptionException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForUser=new LoginLogoutClient(this.automationContext);
  String sessionCookie=loginLogoutClientForUser.login();
  TopicAdminClient topicAdminClient=new TopicAdminClient(this.backendURL,sessionCookie,ConfigurationContextProvider.getInstance().getConfigurationContext());
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  loginLogoutClientForUser.logout();
}","/** 
 * Deleting the topics that were created.
 * @throws XPathExpressionException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 * @throws XMLStreamException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws TopicManagerAdminServiceEventAdminExceptionException
 * @throws LogoutAuthenticationExceptionException
 */
@AfterClass() public void cleanUpTopics() throws XPathExpressionException, LoginAuthenticationExceptionException, IOException, XMLStreamException, URISyntaxException, SAXException, TopicManagerAdminServiceEventAdminExceptionException, LogoutAuthenticationExceptionException, AutomationUtilException {
  LoginLogoutClient loginLogoutClientForUser=new LoginLogoutClient(this.automationContext);
  String sessionCookie=loginLogoutClientForUser.login();
  TopicAdminClient topicAdminClient=new TopicAdminClient(this.backendURL,sessionCookie);
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  topicAdminClient.removeTopic(""String_Node_Str"");
  loginLogoutClientForUser.logout();
}",0.8497373029772329
147451,"/** 
 * Prepare environment for tests.
 * @throws XPathExpressionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 */
@BeforeClass(alwaysRun=true) public void init() throws XPathExpressionException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, IOException, AutomationUtilException {
  super.initCluster(TestUserMode.SUPER_TENANT_ADMIN);
  automationContext=getAutomationContextWithKey(""String_Node_Str"");
  topicAdminClient=new TopicAdminClient(automationContext.getContextUrls().getBackEndUrl(),super.login(automationContext),ConfigurationContextProvider.getInstance().getConfigurationContext());
}","/** 
 * Prepare environment for tests.
 * @throws XPathExpressionException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws XMLStreamException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 */
@BeforeClass(alwaysRun=true) public void init() throws XPathExpressionException, URISyntaxException, SAXException, XMLStreamException, LoginAuthenticationExceptionException, IOException, AutomationUtilException {
  super.initCluster(TestUserMode.SUPER_TENANT_ADMIN);
  automationContext=getAutomationContextWithKey(""String_Node_Str"");
  topicAdminClient=new TopicAdminClient(automationContext.getContextUrls().getBackEndUrl(),super.login(automationContext));
}",0.9527073337902672
147452,"/** 
 * Prepare environment for tests.
 * @throws XPathExpressionException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 * @throws XMLStreamException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws AutomationUtilException
 */
@BeforeClass(alwaysRun=true) public void init() throws XPathExpressionException, LoginAuthenticationExceptionException, IOException, XMLStreamException, URISyntaxException, SAXException, AutomationUtilException {
  super.initCluster(TestUserMode.SUPER_TENANT_ADMIN);
  AutomationContext automationContext1=getAutomationContextWithKey(""String_Node_Str"");
  AutomationContext automationContext2=getAutomationContextWithKey(""String_Node_Str"");
  hostNode1=automationContext1.getInstance().getHosts().get(""String_Node_Str"");
  hostNode2=automationContext2.getInstance().getHosts().get(""String_Node_Str"");
  portInNode1=Integer.parseInt(automationContext1.getInstance().getPorts().get(""String_Node_Str""));
  portInNode2=Integer.parseInt(automationContext2.getInstance().getPorts().get(""String_Node_Str""));
  topicAdminClient=new TopicAdminClient(automationContext1.getContextUrls().getBackEndUrl(),super.login(automationContext1),ConfigurationContextProvider.getInstance().getConfigurationContext());
  super.initAndesAdminClients();
}","/** 
 * Prepare environment for tests.
 * @throws XPathExpressionException
 * @throws LoginAuthenticationExceptionException
 * @throws IOException
 * @throws XMLStreamException
 * @throws URISyntaxException
 * @throws SAXException
 * @throws AutomationUtilException
 */
@BeforeClass(alwaysRun=true) public void init() throws XPathExpressionException, LoginAuthenticationExceptionException, IOException, XMLStreamException, URISyntaxException, SAXException, AutomationUtilException {
  super.initCluster(TestUserMode.SUPER_TENANT_ADMIN);
  AutomationContext automationContext1=getAutomationContextWithKey(""String_Node_Str"");
  AutomationContext automationContext2=getAutomationContextWithKey(""String_Node_Str"");
  hostNode1=automationContext1.getInstance().getHosts().get(""String_Node_Str"");
  hostNode2=automationContext2.getInstance().getHosts().get(""String_Node_Str"");
  portInNode1=Integer.parseInt(automationContext1.getInstance().getPorts().get(""String_Node_Str""));
  portInNode2=Integer.parseInt(automationContext2.getInstance().getPorts().get(""String_Node_Str""));
  topicAdminClient=new TopicAdminClient(automationContext1.getContextUrls().getBackEndUrl(),super.login(automationContext1));
  super.initAndesAdminClients();
}",0.9727380482022916
147453,"/** 
 * Delete all the messages in DeadLetter Channel
 */
public void deleteAllDLCMessages(){
  String deletingMessageID=null;
  try {
    deletingMessageID=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).getText();
    if (StringUtils.isNotBlank(deletingMessageID)) {
      log.info(""String_Node_Str"");
      driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
      driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
      driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
      driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    }
  }
 catch (  NoSuchElementException e) {
    log.error(""String_Node_Str"");
  }
}","/** 
 * Delete all the messages in DeadLetter Channel
 */
public void deleteAllDLCMessages(){
  WebElement dlcTable=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  List<WebElement> allDlcRows=dlcTable.findElements(By.tagName(""String_Node_Str""));
  if (allDlcRows.size() > 0) {
    log.info(""String_Node_Str"");
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
    driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  }
}",0.6326153846153846
147454,"/** 
 * Search messageID through all messages in the queue
 * @param deletingMessageID - Searching messageID
 * @param queueName             - Searching queue
 * @return whether messageID available or not
 */
private boolean checkMessages(String deletingMessageID,String queueName){
  boolean isSuccessful=true;
  if (isElementPresent(UIElementMapper.getInstance().getElement(""String_Node_Str""))) {
    WebElement queueTable=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
    List<WebElement> rowElementList=queueTable.findElements(By.tagName(""String_Node_Str""));
    for (    WebElement row : rowElementList) {
      List<WebElement> columnList=row.findElements(By.tagName(""String_Node_Str""));
      if ((columnList.size() == COLUMN_LIST_SIZE) && columnList.get(MESSAGE_ID_COLUMN).getText().equals(deletingMessageID)) {
        isSuccessful=false;
        break;
      }
    }
  }
 else {
    Assert.fail(""String_Node_Str"" + queueName + ""String_Node_Str"");
  }
  return isSuccessful;
}","/** 
 * Search messageID through all messages in the queue
 * @param deletingMessageID - Searching messageID
 * @param queueName             - Searching queue
 * @return whether messageID available or not
 */
private boolean checkMessages(String deletingMessageID,String queueName){
  boolean isSuccessful=true;
  if (isElementPresent(UIElementMapper.getInstance().getElement(""String_Node_Str""))) {
    WebElement queueTable=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
    List<WebElement> rowElementList=queueTable.findElements(By.tagName(""String_Node_Str""));
    for (    WebElement row : rowElementList) {
      List<WebElement> columnList=row.findElements(By.tagName(""String_Node_Str""));
      if ((COLUMN_LIST_SIZE == columnList.size()) && columnList.get(MESSAGE_ID_COLUMN).getText().equals(deletingMessageID)) {
        isSuccessful=false;
        break;
      }
    }
  }
 else {
    Assert.fail(""String_Node_Str"" + queueName + ""String_Node_Str"");
  }
  return isSuccessful;
}",0.9796116504854367
147455,"/** 
 * Deletes all messages in a queue
 * @param queue the name of the queue
 * @throws AndesAdminServiceException
 * @throws RemoteException
 */
public void purgeQueue(String queue) throws AndesAdminServiceException, RemoteException {
  stub.purgeMessagesOfQueue(queue);
}","/** 
 * Deletes all messages in a queue
 * @param queue the name of the queue
 * @throws RemoteException
 */
public void purgeQueue(String queue) throws RemoteException, AndesAdminServiceBrokerManagerAdminException {
  stub.purgeMessagesOfQueue(queue);
}",0.6628787878787878
147456,"/** 
 * The constructor used for creating multiple consumer or publishers based on the configuration passed.
 * @param config                      The configuration.
 * @param numberOfThreads             The amount of publishers or consumers. This amount ofthreads will be started.
 * @param createConsumersAndProducers True if the client needs to create connections, sessionsand respective receivers or consumers. False otherwise.
 * @throws JMSException         Thrown when creating the JMS sessions, connection and receiveror sender based on consumer or producer.
 * @throws NamingException      Thrown when invalid lookup is used in the initial context.
 * @throws AndesClientException Thrown when invalid number of threads are used.
 */
public AndesClient(AndesJMSClientConfiguration config,int numberOfThreads,boolean createConsumersAndProducers) throws IOException, JMSException, NamingException, AndesClientException {
  if (0 < numberOfThreads) {
    if (config instanceof AndesJMSConsumerClientConfiguration) {
      AndesClientUtils.initializeReceivedMessagesPrintWriter(((AndesJMSConsumerClientConfiguration)config).getFilePathToWriteReceivedMessages());
    }
    for (int i=0; i < numberOfThreads; i++) {
      if (config instanceof AndesJMSConsumerClientConfiguration) {
        consumers.add(new AndesJMSConsumer((AndesJMSConsumerClientConfiguration)config,createConsumersAndProducers));
      }
 else       if (config instanceof AndesJMSPublisherClientConfiguration) {
        publishers.add(new AndesJMSPublisher((AndesJMSPublisherClientConfiguration)config,createConsumersAndProducers));
      }
    }
  }
 else {
    throw new AndesClientException(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(numberOfThreads));
  }
}","/** 
 * The constructor used for creating multiple consumer or publishers based on the configuration passed.
 * @param config                      The configuration.
 * @param numberOfThreads             The amount of publishers or consumers. This amount ofthreads will be started.
 * @param createConsumersAndProducers True if the client needs to create connections, sessionsand respective receivers or consumers. False otherwise.
 * @throws JMSException         Thrown when creating the JMS sessions, connection and receiveror sender based on consumer or producer.
 * @throws NamingException      Thrown when invalid lookup is used in the initial context.
 * @throws AndesClientException Thrown when invalid number of threads are used.
 */
public AndesClient(AndesJMSClientConfiguration config,int numberOfThreads,boolean createConsumersAndProducers) throws IOException, JMSException, NamingException, AndesClientException {
  if (0 < numberOfThreads) {
    if (config instanceof AndesJMSConsumerClientConfiguration) {
      AndesClientUtils.initializeReceivedMessagesPrintWriter(((AndesJMSConsumerClientConfiguration)config).getFilePathToWriteReceivedMessages());
    }
    if (config instanceof AndesJMSPublisherClientConfiguration) {
      AndesClientUtils.initializePublishedPrintWriter(((AndesJMSPublisherClientConfiguration)config).getFilePathToWritePublishedMessages());
    }
    for (int i=0; i < numberOfThreads; i++) {
      if (config instanceof AndesJMSConsumerClientConfiguration) {
        consumers.add(new AndesJMSConsumer((AndesJMSConsumerClientConfiguration)config,createConsumersAndProducers));
      }
 else       if (config instanceof AndesJMSPublisherClientConfiguration) {
        publishers.add(new AndesJMSPublisher((AndesJMSPublisherClientConfiguration)config,createConsumersAndProducers));
      }
    }
  }
 else {
    throw new AndesClientException(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(numberOfThreads));
  }
}",0.798167609808677
147457,"/** 
 * {@inheritDoc}
 */
@Override public void run(){
  try {
    Message message=null;
    long threadID=Thread.currentThread().getId();
    while (this.sentMessageCount < this.publisherConfig.getNumberOfMessagesToSend()) {
      if (JMSMessageType.TEXT == this.publisherConfig.getJMSMessageType()) {
        if (null != this.publisherConfig.getReadMessagesFromFilePath()) {
          message=this.session.createTextMessage(this.messageContentFromFile);
        }
 else {
          message=this.session.createTextMessage(MessageFormat.format(AndesClientConstants.PUBLISH_MESSAGE_FORMAT,this.sentMessageCount,threadID));
        }
      }
 else       if (JMSMessageType.BYTE == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createBytesMessage();
      }
 else       if (JMSMessageType.MAP == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createMapMessage();
      }
 else       if (JMSMessageType.OBJECT == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createObjectMessage();
      }
 else       if (JMSMessageType.STREAM == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createStreamMessage();
      }
      if (null != message) {
        this.sender.send(message,DeliveryMode.PERSISTENT,0,this.publisherConfig.getJMSMessageExpiryTime());
        this.sentMessageCount++;
        long currentTimeStamp=System.currentTimeMillis();
        if (0 == this.firstMessagePublishTimestamp) {
          this.firstMessagePublishTimestamp=currentTimeStamp;
        }
        this.lastMessagePublishTimestamp=currentTimeStamp;
        if (0 == this.sentMessageCount % this.publisherConfig.getPrintsPerMessageCount()) {
          if (null != this.publisherConfig.getReadMessagesFromFilePath()) {
            log.info(""String_Node_Str"" + ""String_Node_Str"" + threadID + ""String_Node_Str""+ this.publisherConfig.getExchangeType().getType()+ ""String_Node_Str""+ this.publisherConfig.getDestinationName()+ ""String_Node_Str""+ this.sentMessageCount+ ""String_Node_Str""+ this.publisherConfig.getNumberOfMessagesToSend());
          }
 else {
            log.info(""String_Node_Str"" + ""String_Node_Str"" + threadID + ""String_Node_Str""+ this.publisherConfig.getExchangeType().getType()+ ""String_Node_Str""+ this.publisherConfig.getDestinationName()+ ""String_Node_Str""+ this.sentMessageCount+ ""String_Node_Str""+ this.publisherConfig.getNumberOfMessagesToSend());
          }
        }
        if (null != this.publisherConfig.getFilePathToWriteStatistics()) {
          String statisticsString=""String_Node_Str"" + Long.toString(currentTimeStamp) + ""String_Node_Str""+ Double.toString(this.getPublisherTPS());
          AndesClientUtils.writeStatisticsToFile(statisticsString,this.publisherConfig.getFilePathToWriteStatistics());
        }
        if (0 < this.publisherConfig.getRunningDelay()) {
          try {
            Thread.sleep(this.publisherConfig.getRunningDelay());
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        }
      }
    }
    this.stopClient();
  }
 catch (  JMSException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void run(){
  try {
    Message message=null;
    long threadID=Thread.currentThread().getId();
    while (this.sentMessageCount < this.publisherConfig.getNumberOfMessagesToSend()) {
      if (JMSMessageType.TEXT == this.publisherConfig.getJMSMessageType()) {
        if (null != this.publisherConfig.getReadMessagesFromFilePath()) {
          message=this.session.createTextMessage(this.messageContentFromFile);
        }
 else {
          message=this.session.createTextMessage(MessageFormat.format(AndesClientConstants.PUBLISH_MESSAGE_FORMAT,this.sentMessageCount,threadID));
        }
      }
 else       if (JMSMessageType.BYTE == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createBytesMessage();
      }
 else       if (JMSMessageType.MAP == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createMapMessage();
      }
 else       if (JMSMessageType.OBJECT == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createObjectMessage();
      }
 else       if (JMSMessageType.STREAM == this.publisherConfig.getJMSMessageType()) {
        message=this.session.createStreamMessage();
      }
      if (null != message) {
        this.sender.send(message,DeliveryMode.PERSISTENT,0,this.publisherConfig.getJMSMessageExpiryTime());
        if (message instanceof TextMessage && null != this.publisherConfig.getFilePathToWritePublishedMessages()) {
          AndesClientUtils.writePublishedMessagesToFile(((TextMessage)message).getText(),this.publisherConfig.getFilePathToWritePublishedMessages());
        }
        this.sentMessageCount++;
        long currentTimeStamp=System.currentTimeMillis();
        if (0 == this.firstMessagePublishTimestamp) {
          this.firstMessagePublishTimestamp=currentTimeStamp;
        }
        this.lastMessagePublishTimestamp=currentTimeStamp;
        if (0 == this.sentMessageCount % this.publisherConfig.getPrintsPerMessageCount()) {
          if (null != this.publisherConfig.getReadMessagesFromFilePath()) {
            log.info(""String_Node_Str"" + ""String_Node_Str"" + threadID + ""String_Node_Str""+ this.publisherConfig.getExchangeType().getType()+ ""String_Node_Str""+ this.publisherConfig.getDestinationName()+ ""String_Node_Str""+ this.sentMessageCount+ ""String_Node_Str""+ this.publisherConfig.getNumberOfMessagesToSend());
          }
 else {
            log.info(""String_Node_Str"" + ""String_Node_Str"" + threadID + ""String_Node_Str""+ this.publisherConfig.getExchangeType().getType()+ ""String_Node_Str""+ this.publisherConfig.getDestinationName()+ ""String_Node_Str""+ this.sentMessageCount+ ""String_Node_Str""+ this.publisherConfig.getNumberOfMessagesToSend());
          }
        }
        if (null != this.publisherConfig.getFilePathToWriteStatistics()) {
          String statisticsString=""String_Node_Str"" + Long.toString(currentTimeStamp) + ""String_Node_Str""+ Double.toString(this.getPublisherTPS());
          AndesClientUtils.writeStatisticsToFile(statisticsString,this.publisherConfig.getFilePathToWriteStatistics());
        }
        if (0 < this.publisherConfig.getRunningDelay()) {
          try {
            Thread.sleep(this.publisherConfig.getRunningDelay());
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        }
      }
    }
    this.stopClient();
  }
 catch (  JMSException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.9498125180271128
147458,"/** 
 * Gets the host name used in the AMQP connection string.
 * @return The host name.
 */
public String getHostName(){
  return this.hostName;
}","/** 
 * Gets the host name used in the AMQP connection string. Suppressing ""UnusedDeclaration"" warning as the client can be exported and used.
 * @return The host name.
 */
@SuppressWarnings(""String_Node_Str"") public String getHostName(){
  return this.hostName;
}",0.7153284671532847
147459,"/** 
 * Sets host name for the AMQP connection string.
 * @param hostName The host name
 */
public void setHostName(String hostName){
  this.hostName=hostName;
  this.createConnectionString();
}","/** 
 * Sets host name for the AMQP connection string. Suppressing ""UnusedDeclaration"" warning as the client can be exported and used.
 * @param hostName The host name
 */
@SuppressWarnings(""String_Node_Str"") public void setHostName(String hostName){
  this.hostName=hostName;
  this.createConnectionString();
}",0.7683168316831683
147460,"/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return ""String_Node_Str"" + this.connectionString + ""String_Node_Str""+ ""String_Node_Str""+ this.exchangeType+ ""String_Node_Str""+ ""String_Node_Str""+ this.printsPerMessageCount+ ""String_Node_Str""+ ""String_Node_Str""+ this.runningDelay+ ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  return ""String_Node_Str"" + this.connectionString + ""String_Node_Str""+ ""String_Node_Str""+ this.exchangeType+ ""String_Node_Str""+ ""String_Node_Str""+ this.printsPerMessageCount+ ""String_Node_Str""+ ""String_Node_Str""+ this.destinationName+ ""String_Node_Str""+ ""String_Node_Str""+ this.runningDelay+ ""String_Node_Str"";
}",0.9130434782608696
147461,"/** 
 * Prints print writers to file paths.
 */
public static void flushPrintWriters(){
  if (receivedMessagePrintWriter != null) {
    receivedMessagePrintWriter.flush();
  }
  if (statisticsPrintWriter != null) {
    statisticsPrintWriter.flush();
  }
}","/** 
 * Prints print writers to file paths.
 */
public static void flushPrintWriters(){
  if (null != receivedMessagePrintWriter) {
    receivedMessagePrintWriter.flush();
  }
  if (null != statisticsPrintWriter) {
    statisticsPrintWriter.flush();
  }
  if (null != publishedMessagePrintWriter) {
    publishedMessagePrintWriter.flush();
  }
}",0.6666666666666666
147462,"public boolean checkIfMessagesAreInOrder(){
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.checkIfMessagesAreInOrder();
}","public boolean checkIfMessagesAreInOrder() throws IOException {
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.checkIfMessagesAreInOrder();
}",0.9563318777292577
147463,"public void startWorking(){
  queueMessageCounter.set(0);
  topicMessageCounter.set(0);
  if (mode.equals(""String_Node_Str"") || mode.equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + hostInformation);
    log.info(""String_Node_Str"" + destinations);
    log.info(""String_Node_Str"" + mode);
    log.info(""String_Node_Str"" + numOfSecondsToRunAsString);
    log.info(""String_Node_Str"" + messageCountAsString);
    log.info(""String_Node_Str"" + numberOfThreadsAsString);
    log.info(""String_Node_Str"" + printNumberOfMessagesPerAsString);
    log.info(""String_Node_Str"" + isToPrintEachMessageAsString);
    log.info(""String_Node_Str"" + parameters);
    log.info(""String_Node_Str"" + connectionString);
    String[] hostsAndPorts=hostInformation.split(""String_Node_Str"");
    String[] destinationList=destinations.split(""String_Node_Str"");
    String[] queues=null;
    String[] topics=null;
    for (int count=0; count < destinationList.length; count++) {
      String destinationString=destinationList[count];
      if (destinationString.startsWith(""String_Node_Str"")) {
        String queueString=destinationString.split(""String_Node_Str"")[1];
        queues=queueString.split(""String_Node_Str"");
      }
 else       if (destinationString.startsWith(""String_Node_Str"")) {
        String topicString=destinationString.split(""String_Node_Str"")[1];
        topics=topicString.split(""String_Node_Str"");
      }
    }
    String modeOfOperation=mode;
    int numberOfSecondsToWaitForMessages=Integer.MAX_VALUE;
    if (numOfSecondsToRunAsString != null && !numOfSecondsToRunAsString.equals(""String_Node_Str"")) {
      numberOfSecondsToWaitForMessages=Integer.parseInt(numOfSecondsToRunAsString);
    }
    int messageCount=1;
    if (messageCountAsString != null && !messageCountAsString.equals(""String_Node_Str"")) {
      messageCount=Integer.parseInt(messageCountAsString);
    }
    if (topics == null || topics.length == 0) {
      topicMessageCounter.set(messageCount);
    }
    if (queues == null || queues.length == 0) {
      queueMessageCounter.set(messageCount);
    }
    int numberOfThreads=1;
    if (numberOfThreadsAsString != null && !numberOfThreadsAsString.equals(""String_Node_Str"")) {
      numberOfThreads=Integer.parseInt(numberOfThreadsAsString);
    }
    int printNumberOfMessagesPer=1;
    if (printNumberOfMessagesPerAsString != null && !printNumberOfMessagesPerAsString.equals(""String_Node_Str"")) {
      printNumberOfMessagesPer=Integer.parseInt(printNumberOfMessagesPerAsString);
    }
    boolean isToPrintEachMessage=false;
    if (isToPrintEachMessageAsString != null && !isToPrintEachMessageAsString.equals(""String_Node_Str"")) {
      isToPrintEachMessage=Boolean.parseBoolean(isToPrintEachMessageAsString);
    }
    boolean isToUseListerner=true;
    boolean isDurable=false;
    String subscriptionID=""String_Node_Str"";
    String filePath=null;
    int ackMode=1;
    int delayBetWeenMessages=0;
    int stopAfter=Integer.MAX_VALUE;
    int ackAfterEach=Integer.MAX_VALUE;
    int commitAfterEach=Integer.MAX_VALUE;
    int rollbackAfterEach=Integer.MAX_VALUE;
    int unsubscribeAfter=Integer.MAX_VALUE;
    Long jmsExpiration=0L;
    String[] parameterStrings=parameters.split(""String_Node_Str"");
    for (int count=0; count < parameterStrings.length; count++) {
      String[] keyValues=parameterStrings[count].split(""String_Node_Str"");
      String key=keyValues[0];
      String value=keyValues[1];
      if (key.equals(""String_Node_Str"")) {
      }
 else       if (key.equals(""String_Node_Str"")) {
        isToUseListerner=Boolean.parseBoolean(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        isDurable=Boolean.parseBoolean(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        subscriptionID=value;
      }
 else       if (key.equals(""String_Node_Str"")) {
        filePath=value;
      }
 else       if (key.equals(""String_Node_Str"")) {
        ackMode=Integer.parseInt(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        delayBetWeenMessages=Integer.parseInt(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        stopAfter=Integer.parseInt(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        ackAfterEach=Integer.parseInt(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        commitAfterEach=Integer.parseInt(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        rollbackAfterEach=Integer.parseInt(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        unsubscribeAfter=Integer.parseInt(value);
      }
 else       if (key.equals(""String_Node_Str"")) {
        if (!value.equals(""String_Node_Str"")) {
          jmsExpiration=Long.parseLong(value);
        }
      }
    }
    if (modeOfOperation.equals(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      for (int count=0; count < numberOfThreads; count++) {
        int hostIndex=count % hostsAndPorts.length;
        String host=hostsAndPorts[hostIndex].split(""String_Node_Str"")[0];
        String port=hostsAndPorts[hostIndex].split(""String_Node_Str"")[1];
        if (queues != null && queues.length != 0) {
          int queueIndex=count % queues.length;
          String queue=queues[queueIndex];
          QueueMessageSender queueMessageSender=new QueueMessageSender(connectionString,host,port,this.username,this.password,queue,queueMessageCounter,messageCount,delayBetWeenMessages,filePath,printNumberOfMessagesPer,isToPrintEachMessage,jmsExpiration);
          queueMessageSender.setTypeOfMessage(messageType);
          queueMessageSenders.add(queueMessageSender);
          new Thread(queueMessageSender).start();
        }
        if (topics != null && topics.length != 0) {
          int topicIndex=count % topics.length;
          String topic=topics[topicIndex];
          TopicMessagePublisher topicMessagePublisher=new TopicMessagePublisher(connectionString,host,port,this.username,this.password,topic,topicMessageCounter,messageCount,delayBetWeenMessages,filePath,printNumberOfMessagesPer,isToPrintEachMessage,jmsExpiration);
          topicMessagePublishers.add(topicMessagePublisher);
          new Thread(topicMessagePublisher).start();
        }
      }
    }
 else     if (modeOfOperation.equals(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      File fileToWriteReceivedMessages=new File(filePathToWriteReceivedMessages);
      if (isToPrintEachMessage) {
        try {
          if (fileToWriteReceivedMessages.exists()) {
            fileToWriteReceivedMessages.delete();
          }
          fileToWriteReceivedMessages.getParentFile().mkdirs();
          fileToWriteReceivedMessages.createNewFile();
        }
 catch (        IOException e) {
          log.info(""String_Node_Str"" + e);
        }
      }
      for (int count=0; count < numberOfThreads; count++) {
        int hostIndex=count % hostsAndPorts.length;
        String host=hostsAndPorts[hostIndex].split(""String_Node_Str"")[0];
        String port=hostsAndPorts[hostIndex].split(""String_Node_Str"")[1];
        if (queues != null && queues.length != 0) {
          int queueIndex=count % queues.length;
          String queue=queues[queueIndex];
          QueueMessageReceiver queueMessageReceiver=new QueueMessageReceiver(connectionString,host,port,this.username,this.password,queue,ackMode,isToUseListerner,queueMessageCounter,delayBetWeenMessages,printNumberOfMessagesPer,isToPrintEachMessage,filePathToWriteReceivedMessages,stopAfter,ackAfterEach,commitAfterEach,rollbackAfterEach);
          queueListeners.add(queueMessageReceiver);
          new Thread(queueMessageReceiver).start();
        }
        if (topics != null && topics.length != 0) {
          int topicIndex=count % topics.length;
          String topic=topics[topicIndex];
          TopicMessageReceiver topicMessageReceiver=new TopicMessageReceiver(connectionString,host,port,this.username,this.password,topic,isDurable,subscriptionID,ackMode,isToUseListerner,topicMessageCounter,delayBetWeenMessages,printNumberOfMessagesPer,isToPrintEachMessage,filePathToWriteReceivedMessages,stopAfter,unsubscribeAfter,ackAfterEach,commitAfterEach,rollbackAfterEach);
          topicListeners.add(topicMessageReceiver);
          new Thread(topicMessageReceiver).start();
        }
      }
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + mode);
    log.info(""String_Node_Str"" + hostInformation);
    log.info(""String_Node_Str"" + destinations);
    log.info(""String_Node_Str"" + printNumberOfMessagesPerAsString);
    log.info(""String_Node_Str"" + isToPrintEachMessageAsString);
    String hostName=hostInformation.split(""String_Node_Str"")[0];
    String port=hostInformation.split(""String_Node_Str"")[1];
    int printNumberOfMessagesPer=1;
    if (printNumberOfMessagesPerAsString != null && !printNumberOfMessagesPerAsString.equals(""String_Node_Str"")) {
      printNumberOfMessagesPer=Integer.parseInt(printNumberOfMessagesPerAsString);
    }
    boolean isToPrintEachMessage=false;
    if (isToPrintEachMessageAsString != null && !isToPrintEachMessageAsString.equals(""String_Node_Str"")) {
      isToPrintEachMessage=Boolean.parseBoolean(isToPrintEachMessageAsString);
    }
    int messageCount=browseQueue(hostName,port,this.username,this.password,destinations,printNumberOfMessagesPer,isToPrintEachMessage);
    log.info(""String_Node_Str"" + messageCount);
  }
 else   if (mode.equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"" + mode);
    log.info(""String_Node_Str"" + hostInformation);
    String hostName=hostInformation.split(""String_Node_Str"")[0];
    String port=hostInformation.split(""String_Node_Str"")[1];
    int messageCount=browseQueue(hostName,port,this.username,this.password,destinations,Integer.MAX_VALUE,false);
    QueueMessageReceiver queueMessageReceiver=new QueueMessageReceiver(""String_Node_Str"",hostName,port,this.username,this.password,destinations,1,true,queueMessageCounter,0,Integer.MAX_VALUE,false,""String_Node_Str"",messageCount,Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE);
    queueListeners.add(queueMessageReceiver);
    new Thread(queueMessageReceiver).start();
    topicMessageCounter.set(messageCount);
  }
 else   if (mode.equals(""String_Node_Str"")) {
    String operation=analyticOperation;
    String numberOfMessagesSentAsString=""String_Node_Str"";
    int numberOfMessagesSent=0;
    if (operation.equals(""String_Node_Str"")) {
      numberOfMessagesSentAsString=numberOfMessagesExpectedForAnalysis;
      numberOfMessagesSent=Integer.parseInt(numberOfMessagesSentAsString);
    }
    log.info(""String_Node_Str"" + mode);
    log.info(""String_Node_Str"" + operation);
    AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
    if (operation.equals(""String_Node_Str"")) {
      andesClientOutputParser.printMessagesMap();
    }
 else     if (operation.equals(""String_Node_Str"")) {
      andesClientOutputParser.printDuplicateMessages();
    }
 else     if (operation.equals(""String_Node_Str"")) {
      andesClientOutputParser.printMissingMessages(numberOfMessagesSent);
    }
 else     if (operation.equals(""String_Node_Str"")) {
      andesClientOutputParser.printMessagesSorted();
    }
 else     if (operation.equals(""String_Node_Str"")) {
      log.info(""String_Node_Str"" + andesClientOutputParser.checkIfMessagesAreInOrder());
    }
 else     if (operation.equals(""String_Node_Str"")) {
      andesClientOutputParser.clearFile();
    }
 else {
      log.info(""String_Node_Str"");
    }
  }
 else {
    log.info(""String_Node_Str"");
  }
}","public void startWorking(){
}",0.0049311341608569
147464,"/** 
 * This method return whether received messages are transacted
 * @param operationOccurredIndex Index of the operated message most of the time last message
 * @return
 */
public boolean transactedOperation(long operationOccurredIndex){
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.transactedOperations(operationOccurredIndex);
}","/** 
 * This method return whether received messages are transacted
 * @param operationOccurredIndex Index of the operated message most of the time last message
 * @return
 */
public boolean transactedOperation(long operationOccurredIndex) throws IOException {
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.transactedOperations(operationOccurredIndex);
}",0.9774266365688488
147465,"public Map<Long,Integer> checkIfMessagesAreDuplicated(){
  AndesClientUtilsTemp.flushPrintWriter();
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.checkIfMessagesAreDuplicated();
}","public Map<Long,Integer> checkIfMessagesAreDuplicated() throws IOException {
  AndesClientUtilsTemp.flushPrintWriter();
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.checkIfMessagesAreDuplicated();
}",0.9652777777777778
147466,"/** 
 * This method returns number of duplicate received messages
 * @return duplicate message count
 */
public int getTotalNumberOfDuplicates(){
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.numberDuplicatedMessages();
}","/** 
 * This method returns number of duplicate received messages
 * @return duplicate message count
 */
public long getTotalNumberOfDuplicates() throws IOException {
  AndesClientOutputParser andesClientOutputParser=new AndesClientOutputParser(filePathToWriteReceivedMessages);
  return andesClientOutputParser.numberDuplicatedMessages();
}",0.9591527987897126
147467,"/** 
 * Publish messages to a topic in a single node and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testDifferentNodeSlowPublisher() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages to a topic in a single node and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=true) public void testDifferentNodeSlowPublisher() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.9962568384681832
147468,"/** 
 * Publish messages to a topic in a single node at a slower rate and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"" + ""String_Node_Str"") public void testDifferentNodeSlowPublisherSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages to a topic in a single node at a slower rate and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"" + ""String_Node_Str"",enabled=true) public void testDifferentNodeSlowPublisherSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.9963636363636365
147469,"/** 
 * Publish messages to a topic in a single node at a slower rate and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testSingleNodeSlowPublisherSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages to a topic in a single node at a slower rate and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=true) public void testSingleNodeSlowPublisherSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.9958050984188448
147470,"/** 
 * Publish messages to a topic in a single node and receive from the same node
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testSameNodePubSub() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostinfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages to a topic in a single node and receive from the same node
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=true) public void testSameNodePubSub() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostinfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.995639047299564
147471,"/** 
 * Publish messages to a topic in a node and receive from the same node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testSameNodeSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostinfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages to a topic in a node and receive from the same node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=true) public void testSameNodeSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostinfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.9956882255389718
147472,"/** 
 * Publish messages at a slow rate to a topic in one node and and receive from the same node.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testSameNodeSlowPublisher() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostinfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages at a slow rate to a topic in one node and and receive from the same node.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=true) public void testSameNodeSlowPublisher() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostinfo=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostinfo,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.9957024793388428
147473,"/** 
 * Publish messages to a topic in a single node and receive from a different node
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testDifferentNodePubSub() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages to a topic in a single node and receive from a different node
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=true) public void testDifferentNodePubSub() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue((""String_Node_Str"").equalsIgnoreCase(topic.getTopicName()),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.9752114319043452
147474,"/** 
 * Publish messages to a topic in a single node and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testDifferentNodeSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}","/** 
 * Publish messages to a topic in a single node and receive from a different node at a slow rate.
 * @throws Exception
 */
@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=true) public void testDifferentNodeSlowSubscriber() throws Exception {
  Integer runTime=80;
  Integer expectedCount=2000;
  Integer sendCount=2000;
  String hostInfoForReceiver=automationContext1.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext1.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient receivingClient=new AndesClient(""String_Node_Str"",hostInfoForReceiver,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),expectedCount.toString(),""String_Node_Str"",""String_Node_Str"" + expectedCount,""String_Node_Str"");
  receivingClient.startWorking();
  TopicNode topic=topicAdminClient1.getTopicByName(""String_Node_Str"");
  assertTrue(topic.getTopicName().equalsIgnoreCase(""String_Node_Str""),""String_Node_Str"");
  String hostInfoForSender=automationContext2.getInstance().getHosts().get(""String_Node_Str"") + ""String_Node_Str"" + automationContext2.getInstance().getPorts().get(""String_Node_Str"");
  AndesClient sendingClient=new AndesClient(""String_Node_Str"",hostInfoForSender,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runTime.toString(),sendCount.toString(),""String_Node_Str"",""String_Node_Str"" + sendCount,""String_Node_Str"");
  sendingClient.startWorking();
  boolean receiveSuccess=AndesClientUtils.waitUntilMessagesAreReceived(receivingClient,expectedCount,runTime);
  boolean sendSuccess=AndesClientUtils.getIfSenderIsSuccess(sendingClient,sendCount);
  Assert.assertTrue(receiveSuccess,""String_Node_Str"");
  Assert.assertTrue(sendSuccess,""String_Node_Str"");
}",0.9962589928057554
147475,"public String getElement(String key){
  if (uiProperties != null) {
    return uiProperties.getProperty(key);
  }
  return null;
}","public String getElement(String key){
  return uiProperties.getProperty(key);
}",0.7559808612440191
147476,"public boolean add(final String domain,final String usagePlanName,final String firstName,final String lastName,final String adminUserName,final String adminPassword,final String adminPasswordRepeat,final String adminEmail){
  boolean isSuccessful=false;
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(domain);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(firstName);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(lastName);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminUserName);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminPassword);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminPasswordRepeat);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminEmail);
  driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  String dialog=driver.getWindowHandle();
  driver.switchTo().window(dialog);
  if (driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).getText().contains(""String_Node_Str"")) {
    isSuccessful=true;
  }
  List<WebElement> buttonList=driver.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement okButton : buttonList) {
    if (okButton.getText().compareToIgnoreCase(""String_Node_Str"") == 0) {
      okButton.click();
      break;
    }
  }
  return isSuccessful;
}","/** 
 * Add a new tenant
 * @param domain domain of the tenant
 * @param usagePlanName tenants usage plan
 * @param firstName tenant first name
 * @param lastName tenant last name
 * @param adminUserName admin users' user name
 * @param adminPassword admin users' password
 * @param adminPasswordRepeat admin users' password (if repeat password doesn't match operationmust be unsuccessful)
 * @param adminEmail admin users' email
 * @return true if tenant successfully created. false otherwise
 */
public boolean add(final String domain,final String usagePlanName,final String firstName,final String lastName,final String adminUserName,final String adminPassword,final String adminPasswordRepeat,final String adminEmail){
  boolean isSuccessful=false;
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(domain);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(firstName);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(lastName);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminUserName);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminPassword);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminPasswordRepeat);
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).sendKeys(adminEmail);
  driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  String dialog=driver.getWindowHandle();
  driver.switchTo().window(dialog);
  if (driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).getText().contains(""String_Node_Str"")) {
    isSuccessful=true;
  }
  List<WebElement> buttonList=driver.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement okButton : buttonList) {
    if (okButton.getText().compareToIgnoreCase(""String_Node_Str"") == 0) {
      okButton.click();
      break;
    }
  }
  return isSuccessful;
}",0.8689473684210526
147477,"/** 
 * Provide facility to log into the products using user credentials
 * @param userName login user name
 * @param password login password
 * @return reference to Home page
 * @throws java.io.IOException if mapper.properties file not found
 */
public HomePage loginAs(final String userName,final String password) throws IOException {
  log.info(""String_Node_Str"" + userName);
  WebElement userNameField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  WebElement passwordField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  userNameField.sendKeys(userName);
  passwordField.sendKeys(password);
  driver.findElement(By.className(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  return new HomePage(driver);
}","/** 
 * Provide facility to log into the products using user credentials
 * @param userName login user name
 * @param password login password
 * @return reference to Home page
 * @throws java.io.IOException if mapper.properties file not found
 */
public HomePage loginAs(final String userName,final String password) throws IOException {
  log.info(""String_Node_Str"" + userName);
  WebElement userNameField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  WebElement passwordField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  userNameField.sendKeys(userName);
  passwordField.sendKeys(password);
  driver.findElement(By.className(UIElementMapper.getInstance().getElement(""String_Node_Str"" + ""String_Node_Str""))).click();
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  return new HomePage(driver);
}",0.9892008639308856
147478,"public TenantHomePage loginAsTenant(final String userName,final String domain,final String password){
  log.info(""String_Node_Str"" + userName);
  WebElement userNameField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  WebElement passwordField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  userNameField.sendKeys(userName + ""String_Node_Str"" + domain);
  passwordField.sendKeys(password);
  driver.findElement(By.className(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  return new TenantHomePage(driver);
}","public TenantHomePage loginAsTenant(final String userName,final String domain,final String password){
  log.info(""String_Node_Str"" + userName);
  WebElement userNameField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  WebElement passwordField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  userNameField.sendKeys(userName + ""String_Node_Str"" + domain);
  passwordField.sendKeys(password);
  driver.findElement(By.className(UIElementMapper.getInstance().getElement(""String_Node_Str"" + ""String_Node_Str""))).click();
  driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  return new TenantHomePage(driver);
}",0.9862258953168044
147479,"public boolean addQueue(final String qName) throws IOException {
  boolean isSuccessful=false;
  WebElement qNameField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  qNameField.sendKeys(qName);
  String parentWindow=driver.getWindowHandle();
  driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  String dialog=driver.getWindowHandle();
  driver.switchTo().window(dialog);
  if (driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).getText().contains(""String_Node_Str"")) {
    isSuccessful=true;
  }
  driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  return isSuccessful;
}","public boolean addQueue(final String qName) throws IOException {
  boolean isSuccessful=false;
  WebElement qNameField=driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  qNameField.sendKeys(qName);
  driver.getWindowHandle();
  driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str""))).click();
  String dialog=driver.getWindowHandle();
  driver.switchTo().window(dialog);
  if (driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).getText().contains(""String_Node_Str"")) {
    isSuccessful=true;
  }
  driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"" + ""String_Node_Str""))).click();
  return isSuccessful;
}",0.9733333333333334
147480,"public boolean isQueuePresent(final String qName){
  if (getTableRowByQueueName(qName) == null) {
    return false;
  }
  return true;
}","/** 
 * Check whether the queue with the given queue name is present in the UI
 * @param queueName queue name
 * @return true if the queue is present, false otherwise
 */
public boolean isQueuePresent(final String queueName){
  return getTableRowByQueueName(queueName) != null;
}",0.4192771084337349
147481,"public boolean deleteQueue(final String qName){
  boolean isSuccessful=false;
  WebElement row=getTableRowByQueueName(qName);
  if (row == null)   return isSuccessful;
  List<WebElement> columnList=row.findElements(By.tagName(""String_Node_Str""));
  WebElement deleteButton=columnList.get(5).findElement(By.tagName(""String_Node_Str""));
  deleteButton.click();
  String dialog=driver.getWindowHandle();
  driver.switchTo().window(dialog);
  List<WebElement> buttonList=driver.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement okButton : buttonList) {
    if (okButton.getText().compareToIgnoreCase(""String_Node_Str"") == 0) {
      okButton.click();
      isSuccessful=!isQueuePresent(qName);
      break;
    }
  }
  return isSuccessful;
}","/** 
 * Delete queue from the UI delete option
 * @param queueName queue name
 * @return true if delete successful, false otherwise
 */
public boolean deleteQueue(final String queueName){
  boolean isSuccessful=false;
  WebElement row=getTableRowByQueueName(queueName);
  if (row == null) {
    return false;
  }
  List<WebElement> columnList=row.findElements(By.tagName(""String_Node_Str""));
  WebElement deleteButton=columnList.get(5).findElement(By.tagName(""String_Node_Str""));
  deleteButton.click();
  String dialog=driver.getWindowHandle();
  driver.switchTo().window(dialog);
  List<WebElement> buttonList=driver.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement okButton : buttonList) {
    if (okButton.getText().compareToIgnoreCase(""String_Node_Str"") == 0) {
      okButton.click();
      isSuccessful=!isQueuePresent(queueName);
      break;
    }
  }
  return isSuccessful;
}",0.8832425892317
147482,"private WebElement getTableRowByQueueName(final String qName){
  if (driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).getText().contains(""String_Node_Str"")) {
    return null;
  }
  WebElement queueTable=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  List<WebElement> rowElementList=queueTable.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement row : rowElementList) {
    List<WebElement> columnList=row.findElements(By.tagName(""String_Node_Str""));
    if ((columnList.size() == 6) && columnList.get(0).getText().equals(qName)) {
      return row;
    }
  }
  return null;
}","/** 
 * Retrieve the Web Element of the given queue name from available queues table in UI
 * @param queueName queue name
 * @return Web Element row of the given queue name item in UI, null returned if not found
 */
private WebElement getTableRowByQueueName(final String queueName){
  if (driver.findElement(By.id(UIElementMapper.getInstance().getElement(""String_Node_Str""))).getText().contains(""String_Node_Str"")) {
    return null;
  }
  WebElement queueTable=driver.findElement(By.xpath(UIElementMapper.getInstance().getElement(""String_Node_Str"")));
  List<WebElement> rowElementList=queueTable.findElements(By.tagName(""String_Node_Str""));
  for (  WebElement row : rowElementList) {
    List<WebElement> columnList=row.findElements(By.tagName(""String_Node_Str""));
    if ((columnList.size() == 6) && columnList.get(0).getText().equals(queueName)) {
      return row;
    }
  }
  return null;
}",0.8573248407643312
147483,"@Test() public void addNewTenantTest() throws Exception {
  driver.get(getLoginURL());
  LoginPage loginPage=new LoginPage(driver);
  HomePage homePage=loginPage.loginAs(mbServer.getContextTenant().getContextUser().getUserName(),mbServer.getContextTenant().getContextUser().getPassword());
  ConfigurePage configurePage=homePage.getConfigurePage();
  AddNewTenantPage addNewTenantPage=configurePage.getAddNewTenantPage();
  String domain=""String_Node_Str"";
  String usagePlanName=""String_Node_Str"";
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  String adminUserName=""String_Node_Str"";
  String adminPassword=""String_Node_Str"";
  String adminPasswordRepeat=""String_Node_Str"";
  String adminEmail=""String_Node_Str"";
  addNewTenantPage.add(domain,usagePlanName,firstName,lastName,adminUserName,adminPassword,adminPasswordRepeat,adminEmail);
  homePage.logout();
  driver.get(getLoginURL());
  loginPage=new LoginPage(driver);
  TenantHomePage tenantHomePage=loginPage.loginAsTenant(adminUserName,domain,adminPassword);
  tenantHomePage.logout();
}","/** 
 * Test to create the new tenant account and login to the newly created tenant account
 * @throws Exception
 */
@Test() public void addNewTenantTest() throws Exception {
  driver.get(getLoginURL());
  LoginPage loginPage=new LoginPage(driver);
  HomePage homePage=loginPage.loginAs(mbServer.getContextTenant().getContextUser().getUserName(),mbServer.getContextTenant().getContextUser().getPassword());
  ConfigurePage configurePage=homePage.getConfigurePage();
  AddNewTenantPage addNewTenantPage=configurePage.getAddNewTenantPage();
  String domain=""String_Node_Str"";
  String usagePlanName=""String_Node_Str"";
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  String adminUserName=""String_Node_Str"";
  String adminPassword=""String_Node_Str"";
  String adminPasswordRepeat=""String_Node_Str"";
  String adminEmail=""String_Node_Str"";
  addNewTenantPage.add(domain,usagePlanName,firstName,lastName,adminUserName,adminPassword,adminPasswordRepeat,adminEmail);
  homePage.logout();
  driver.get(getLoginURL());
  loginPage=new LoginPage(driver);
  TenantHomePage tenantHomePage=loginPage.loginAsTenant(adminUserName,domain,adminPassword);
  tenantHomePage.logout();
}",0.9483899426554918
147484,"/** 
 * Creates the dialogs contents
 * @param shell
 */
private void createContents(final Shell shell){
  shell.setLayout(new GridLayout(2,true));
  Label label=new Label(shell,SWT.NONE);
  label.setText(message);
  GridData data=new GridData();
  data.horizontalSpan=2;
  label.setLayoutData(data);
  final Text text=new Text(shell,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  text.setLayoutData(data);
  text.setText(String.valueOf(value));
  final Button ok=new Button(shell,SWT.PUSH);
  ok.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_HORIZONTAL);
  ok.setLayoutData(data);
  ok.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      input=text.getText();
      shell.close();
    }
  }
);
  Button cancel=new Button(shell,SWT.PUSH);
  cancel.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_HORIZONTAL);
  cancel.setLayoutData(data);
  cancel.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      input=null;
      shell.close();
    }
  }
);
  text.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (getValue(text.getText()) != null) {
        ok.setEnabled(true);
      }
 else {
        ok.setEnabled(false);
      }
    }
  }
);
  shell.setDefaultButton(ok);
}","/** 
 * Creates the dialogs contents
 * @param shell
 */
private void createContents(final Shell shell){
  shell.setLayout(new GridLayout(2,true));
  Label label=new Label(shell,SWT.NONE);
  label.setText(message);
  GridData data=new GridData();
  data.horizontalSpan=2;
  label.setLayoutData(data);
  final Text text=new Text(shell,SWT.BORDER);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  text.setLayoutData(data);
  String sValue=!(value instanceof Character) ? String.valueOf(value) : String.valueOf((int)((Character)value).charValue());
  text.setText(sValue);
  final Button ok=new Button(shell,SWT.PUSH);
  ok.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_HORIZONTAL);
  ok.setLayoutData(data);
  ok.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      input=text.getText();
      shell.close();
    }
  }
);
  Button cancel=new Button(shell,SWT.PUSH);
  cancel.setText(""String_Node_Str"");
  data=new GridData(GridData.FILL_HORIZONTAL);
  cancel.setLayoutData(data);
  cancel.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      input=null;
      shell.close();
    }
  }
);
  text.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (getValue(text.getText()) != null) {
        ok.setEnabled(true);
      }
 else {
        ok.setEnabled(false);
      }
    }
  }
);
  shell.setDefaultButton(ok);
}",0.9534883720930232
147485,"/** 
 * Creates a new dialog
 * @param parent
 * @param language
 * @param scale
 * @param value
 */
public KnobInputDialog(Shell parent,KnobDialogProfile language,KnobRange<T> scale,T value){
  super(parent,SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
  setText(language.getTitle());
  String message=language.getMessage();
  if ((scale instanceof KnobRange.Character) || (scale instanceof KnobRange.Long) || (scale instanceof KnobRange.Integer)) {
    message=message.replace(""String_Node_Str"",language.getInteger());
  }
 else {
    message=message.replace(""String_Node_Str"",language.getDecimal());
  }
  message=message.replace(""String_Node_Str"",""String_Node_Str"" + scale.getMinimum() + ""String_Node_Str""+ scale.getMaximum()+ ""String_Node_Str"");
  this.message=message;
  this.scale=scale;
  this.value=value;
}","/** 
 * Creates a new dialog
 * @param parent
 * @param language
 * @param scale
 * @param value
 */
public KnobInputDialog(Shell parent,KnobDialogProfile language,KnobRange<T> scale,T value){
  super(parent,SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
  setText(language.getTitle());
  String message=language.getMessage();
  if ((scale instanceof KnobRange.Character) || (scale instanceof KnobRange.Long) || (scale instanceof KnobRange.Integer)) {
    message=message.replace(""String_Node_Str"",language.getInteger());
  }
 else {
    message=message.replace(""String_Node_Str"",language.getDecimal());
  }
  T min=scale.getMinimum();
  T max=scale.getMaximum();
  String sMin=!(min instanceof Character) ? String.valueOf(min) : String.valueOf((int)((Character)min).charValue());
  String sMax=!(max instanceof Character) ? String.valueOf(max) : String.valueOf((int)((Character)max).charValue());
  message=message.replace(""String_Node_Str"",""String_Node_Str"" + sMin + ""String_Node_Str""+ sMax+ ""String_Node_Str"");
  this.message=message;
  this.scale=scale;
  this.value=value;
}",0.823966065747614
147486,"/** 
 * Paint the background image
 * @param width
 * @param height
 * @param profile 
 */
private Image paintBackground(int width,int height,KnobColorProfile profile){
  Display display=getDisplay();
  Image background=new Image(display,width,height);
  GC gc=new GC(background);
  gc.setBackground(getBackground());
  gc.fillRectangle(0,0,width,height);
  double min=width;
  double inner=min * 0.4d;
  double outer=min * 0.1d;
  double plateau=min * 0.1d;
  double indicatorWidth=min / 20d;
  double stepping=range.getStepping();
  if (indicatorWidth < 1d)   indicatorWidth=1d;
  double tickWidth=indicatorWidth / 3d;
  if (tickWidth < 1d)   tickWidth=1d;
  int iInner=(int)Math.round(inner) - (int)Math.round(inner) % 2;
  int iOuter=(int)Math.round(outer);
  int iPlateau=(int)Math.round(plateau);
  int iCenterX=iOuter + iInner;
  int iCenterY=iOuter + iInner;
  int iIndicatorWidth=(int)Math.round(indicatorWidth);
  int iTickWidth=(int)Math.round(tickWidth);
  iIndicatorWidth-=1 - iIndicatorWidth % 2;
  iTickWidth-=1 - iTickWidth % 2;
  if (iTickWidth < 1d)   iTickWidth=1;
  if (iIndicatorWidth < 1d)   iIndicatorWidth=1;
  if ((iCenterX + iPlateau) % 2 == 0)   iPlateau++;
  List<Point> ticks11=new ArrayList<Point>();
  Point ap1=getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0d);
  Point ap2=getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,stepping);
  int dX=Math.abs(ap1.x - ap2.x);
  int dY=Math.abs(ap1.y - ap2.y);
  if (1d / stepping <= 72 && (dX > 5 || dY > 5)) {
    for (double v=0d; v <= 1d - stepping; v+=stepping) {
      double tick=range.toNearestInternal(v);
      ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,tick));
    }
    double tick=range.toNearestInternal(1d);
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,tick));
  }
 else {
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.125d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.25d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.375d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.5d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.625d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.75d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.875d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,1.0d));
  }
  gc.setAdvanced(true);
  gc.setAntialias(SWT.ON);
  gc.setForeground(profile.getTick());
  gc.setBackground(profile.getTick());
  gc.setLineCap(SWT.CAP_FLAT);
  gc.setLineWidth(iTickWidth);
  for (int i=0; i < ticks11.size(); i++) {
    Point p1=ticks11.get(i);
    gc.drawLine(p1.x,p1.y,iCenterX,iCenterY);
  }
  KnobRenderer renderer=new KnobRenderer();
  int transparent=profile.getTransparentByte();
  Color transparentColor=new Color(getDisplay(),transparent,transparent,transparent);
  Image image=renderer.render(getDisplay(),transparentColor,profile,iInner * 2,iInner * 2);
  gc.drawImage(image,0,0,iInner * 2,iInner * 2,iOuter,iOuter,iInner * 2,iInner * 2);
  transparentColor.dispose();
  image.dispose();
  gc.setForeground(profile.getBorder());
  gc.setBackground(profile.getBorder());
  gc.setLineWidth(1);
  gc.drawOval(iOuter,iOuter,iInner * 2,iInner * 2);
  gc.setForeground(profile.getPlateauOuter());
  gc.setBackground(profile.getPlateauOuter());
  gc.fillOval(iCenterX - iPlateau,iCenterY - iPlateau,iPlateau * 2,iPlateau * 2);
  gc.dispose();
  return background;
}","/** 
 * Paint the background image
 * @param width
 * @param height
 * @param profile 
 */
private Image paintBackground(int width,int height,KnobColorProfile profile){
  Display display=getDisplay();
  Image background=new Image(display,width,height);
  GC gc=new GC(background);
  gc.setBackground(getBackground());
  gc.fillRectangle(0,0,width,height);
  double min=width;
  double inner=min * 0.4d;
  double outer=min * 0.1d;
  double plateau=min * 0.1d;
  double indicatorWidth=min / 20d;
  double stepping=range.getStepping();
  if (indicatorWidth < 1d)   indicatorWidth=1d;
  double tickWidth=indicatorWidth / 3d;
  if (tickWidth < 1d)   tickWidth=1d;
  int iInner=(int)Math.round(inner) - (int)Math.round(inner) % 2;
  int iOuter=(int)Math.round(outer);
  int iPlateau=(int)Math.round(plateau);
  int iCenterX=iOuter + iInner;
  int iCenterY=iOuter + iInner;
  int iIndicatorWidth=(int)Math.round(indicatorWidth);
  int iTickWidth=(int)Math.round(tickWidth);
  iIndicatorWidth-=1 - iIndicatorWidth % 2;
  iTickWidth-=1 - iTickWidth % 2;
  if (iTickWidth < 1d)   iTickWidth=1;
  if (iIndicatorWidth < 1d)   iIndicatorWidth=1;
  if ((iCenterX + iPlateau) % 2 == 0)   iPlateau++;
  List<Point> ticks11=new ArrayList<Point>();
  Point ap1=getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0d);
  Point ap2=getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,stepping);
  int dX=Math.abs(ap1.x - ap2.x);
  int dY=Math.abs(ap1.y - ap2.y);
  if (1d / stepping <= 72 && (dX > 5 || dY > 5)) {
    for (double v=0d; v < 1d; v+=stepping) {
      double tick=range.toNearestInternal(v);
      ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,tick));
    }
    double tick=range.toNearestInternal(1d);
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,tick));
  }
 else {
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.125d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.25d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.375d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.5d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.625d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.75d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,0.875d));
    ticks11.add(getLineCoordinates(iCenterX,iCenterY,iInner + iOuter / 2 + 1,1.0d));
  }
  gc.setAdvanced(true);
  gc.setAntialias(SWT.ON);
  gc.setForeground(profile.getTick());
  gc.setBackground(profile.getTick());
  gc.setLineCap(SWT.CAP_FLAT);
  gc.setLineWidth(iTickWidth);
  for (int i=0; i < ticks11.size(); i++) {
    Point p1=ticks11.get(i);
    gc.drawLine(p1.x,p1.y,iCenterX,iCenterY);
  }
  KnobRenderer renderer=new KnobRenderer();
  int transparent=profile.getTransparentByte();
  Color transparentColor=new Color(getDisplay(),transparent,transparent,transparent);
  Image image=renderer.render(getDisplay(),transparentColor,profile,iInner * 2,iInner * 2);
  gc.drawImage(image,0,0,iInner * 2,iInner * 2,iOuter,iOuter,iInner * 2,iInner * 2);
  transparentColor.dispose();
  image.dispose();
  gc.setForeground(profile.getBorder());
  gc.setBackground(profile.getBorder());
  gc.setLineWidth(1);
  gc.drawOval(iOuter,iOuter,iInner * 2,iInner * 2);
  gc.setForeground(profile.getPlateauOuter());
  gc.setBackground(profile.getPlateauOuter());
  gc.fillOval(iCenterX - iPlateau,iCenterY - iPlateau,iPlateau * 2,iPlateau * 2);
  gc.dispose();
  return background;
}",0.9975728155339806
147487,"/** 
 * Returns whether this is a retina device.  http://lubosplavucha.com/java/2013/09/02/retina-support-in-java-for-awt-swing/
 * @return
 */
private static boolean isRetina(){
  boolean isRetina=false;
  GraphicsDevice graphicsDevice=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
  try {
    Field field=graphicsDevice.getClass().getDeclaredField(""String_Node_Str"");
    if (field != null) {
      field.setAccessible(true);
      Object scale=field.get(graphicsDevice);
      if (scale instanceof Integer && ((Integer)scale).intValue() == 2) {
        isRetina=true;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return isRetina;
}","/** 
 * Returns whether this is a retina device.  http://lubosplavucha.com/java/2013/09/02/retina-support-in-java-for-awt-swing/
 * @return
 */
private static boolean isRetina(){
  boolean isRetina=false;
  GraphicsDevice graphicsDevice=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
  try {
    Field field=graphicsDevice.getClass().getDeclaredField(""String_Node_Str"");
    if (field != null) {
      field.setAccessible(true);
      Object scale=field.get(graphicsDevice);
      if (scale instanceof Integer && ((Integer)scale).intValue() == 2) {
        isRetina=true;
      }
    }
  }
 catch (  Exception e) {
  }
  return isRetina;
}",0.9537105069801616
147488,"/** 
 * Handle mouse buttons
 * @return
 */
private MouseAdapter createMouseButtonHandler(){
  return new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent arg0){
      if (drag) {
        drag=false;
        getDisplay().setCursorLocation(screenX,screenY);
        Knob.this.setCursor(defaultCursor);
      }
      KnobInputDialog<T> dialog=new KnobInputDialog<T>(getShell(),dialogProfile,range,range.toExternal(value));
      T result=dialog.open();
      if (result != null) {
        value=range.toInternal(result);
        redraw();
      }
    }
    @Override public void mouseDown(    MouseEvent arg0){
      dragY=arg0.y;
      Point point=Knob.this.toDisplay(arg0.x,arg0.y);
      screenX=point.x;
      screenY=point.y;
      dragValue=value;
      dragOffset=0;
      drag=true;
      Knob.this.setCursor(hiddenCursor);
      Knob.this.setFocus();
    }
    @Override public void mouseUp(    MouseEvent arg0){
      if (drag) {
        drag=false;
        getDisplay().setCursorLocation(screenX,screenY);
        Knob.this.setCursor(defaultCursor);
      }
    }
  }
;
}","/** 
 * Handle mouse buttons
 * @return
 */
private MouseAdapter createMouseButtonHandler(){
  return new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent arg0){
      if (drag) {
        drag=false;
        getDisplay().setCursorLocation(screenX,screenY);
        Knob.this.setCursor(defaultCursor);
      }
      KnobInputDialog<T> dialog=new KnobInputDialog<T>(getShell(),dialogProfile,range,range.toExternal(value));
      T result=dialog.open();
      if (result != null) {
        value=range.toInternal(result);
        fireSelectionEvent();
        redraw();
      }
    }
    @Override public void mouseDown(    MouseEvent arg0){
      dragY=arg0.y;
      Point point=Knob.this.toDisplay(arg0.x,arg0.y);
      screenX=point.x;
      screenY=point.y;
      dragValue=value;
      dragOffset=0;
      drag=true;
      Knob.this.setCursor(hiddenCursor);
      Knob.this.setFocus();
    }
    @Override public void mouseUp(    MouseEvent arg0){
      if (drag) {
        drag=false;
        getDisplay().setCursorLocation(screenX,screenY);
        Knob.this.setCursor(defaultCursor);
      }
    }
  }
;
}",0.9866071428571428
147489,"@Override public void mouseDoubleClick(MouseEvent arg0){
  if (drag) {
    drag=false;
    getDisplay().setCursorLocation(screenX,screenY);
    Knob.this.setCursor(defaultCursor);
  }
  KnobInputDialog<T> dialog=new KnobInputDialog<T>(getShell(),dialogProfile,range,range.toExternal(value));
  T result=dialog.open();
  if (result != null) {
    value=range.toInternal(result);
    redraw();
  }
}","@Override public void mouseDoubleClick(MouseEvent arg0){
  if (drag) {
    drag=false;
    getDisplay().setCursorLocation(screenX,screenY);
    Knob.this.setCursor(defaultCursor);
  }
  KnobInputDialog<T> dialog=new KnobInputDialog<T>(getShell(),dialogProfile,range,range.toExternal(value));
  T result=dialog.open();
  if (result != null) {
    value=range.toInternal(result);
    fireSelectionEvent();
    redraw();
  }
}",0.9682926829268292
147490,"@Override public <T>Iterable<T> save(Iterable<T> entities){
  Map<T,RDFState> entityToExistingState=new HashMap<T,RDFState>();
  for (  T entity : entities) {
    @SuppressWarnings(""String_Node_Str"") SemanticPersistentEntity<T> persistentEntity=(SemanticPersistentEntity<T>)this.mappingContext.getPersistentEntity(entity.getClass());
    URI id=persistentEntity.getResourceId(entity);
    Model dbState=this.statementsCollector.getStatementsForResource(id,entity.getClass(),MappingPolicyImpl.DEFAULT_POLICY);
    entityToExistingState.put(entity,new RDFState(dbState));
  }
  return this.entityPersister.persistEntities(entityToExistingState);
}","@Override public <T>Iterable<T> save(Iterable<T> entities){
  Map<T,RDFState> entityToExistingState=new HashMap<T,RDFState>();
  for (  T entity : entities) {
    @SuppressWarnings(""String_Node_Str"") SemanticPersistentEntity<T> persistentEntity=(SemanticPersistentEntity<T>)this.mappingContext.getPersistentEntity(entity.getClass());
    URI id=persistentEntity.getResourceId(entity);
    Model dbState=this.statementsCollector.getStatementsForResourceOriginalPredicates(id,entity.getClass(),MappingPolicyImpl.DEFAULT_POLICY);
    entityToExistingState.put(entity,new RDFState(dbState));
  }
  return this.entityPersister.persistEntities(entityToExistingState);
}",0.9862385321100916
147491,"public String getGraphQueryForEntityClass(SemanticPersistentEntity<?> entity,Map<String,Object> propertyToValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(getPropertyBindings(null,entity,propertyToValue,MappingPolicyImpl.ALL_POLICY));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(getPropertyPatterns(null,entity,propertyToValue,false,MappingPolicyImpl.ALL_POLICY));
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public String getGraphQueryForEntityClass(SemanticPersistentEntity<?> entity,Map<String,Object> propertyToValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(getPropertyBindings(null,entity,propertyToValue,MappingPolicyImpl.ALL_POLICY,false));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(getPropertyPatterns(null,entity,propertyToValue,false,MappingPolicyImpl.ALL_POLICY));
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.994
147492,"/** 
 * Get bindings for the retrievable properties of the entity
 * @param uri - the uri of the entity
 * @param entity - the container holding the information about the entity's structure
 * @return
 */
protected String getPropertyBindings(URI uri,SemanticPersistentEntity<?> entity,Map<String,Object> propertyToValue,MappingPolicy globalMappingPolicy){
  StringBuilder sb=new StringBuilder();
  String subjectBinding=getSubjectBinding(uri,entity);
  AbstractPropertiesToQueryHandler.appendPattern(sb,subjectBinding,""String_Node_Str"",""String_Node_Str"" + entity.getRDFType() + ""String_Node_Str"");
  PropertiesToBindingsHandler handler=new PropertiesToBindingsHandler(sb,subjectBinding,propertyToValue,this.mappingContext,globalMappingPolicy);
  entity.doWithProperties(handler);
  entity.doWithAssociations(handler);
  return sb.toString();
}","/** 
 * Get bindings for the retrievable properties of the entity
 * @param uri - the uri of the entity
 * @param entity - the container holding the information about the entity's structure
 * @return
 */
protected String getPropertyBindings(URI uri,SemanticPersistentEntity<?> entity,Map<String,Object> propertyToValue,MappingPolicy globalMappingPolicy,Boolean originalPredicates){
  StringBuilder sb=new StringBuilder();
  String subjectBinding=getSubjectBinding(uri,entity);
  AbstractPropertiesToQueryHandler.appendPattern(sb,subjectBinding,""String_Node_Str"",""String_Node_Str"" + entity.getRDFType() + ""String_Node_Str"");
  PropertiesToBindingsHandler handler=new PropertiesToBindingsHandler(sb,subjectBinding,propertyToValue,this.mappingContext,globalMappingPolicy,originalPredicates);
  entity.doWithProperties(handler);
  entity.doWithAssociations(handler);
  return sb.toString();
}",0.9734411085450346
147493,"/** 
 * Create a graph query retrieving the molecule of an entity.  Only 'retrievable'   {@link #isRetrivableProperty(SemanticPersistentProperty)} properties will be fetched
 * @param uri - the uri of the entity
 * @param entity - the container which holds the information about that entity
 * @param propertiesToValues - the properties with their required values
 * @return
 */
public String getGraphQueryForResource(URI uri,SemanticPersistentEntity<?> entity,Map<String,Object> propertyToValue,MappingPolicy globalMappingPolicy){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(getPropertyBindings(uri,entity,propertyToValue,globalMappingPolicy));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(getPropertyPatterns(uri,entity,propertyToValue,false,globalMappingPolicy));
  sb.append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * Create a graph query retrieving the molecule of an entity.  Only 'retrievable'   {@link #isRetrivableProperty(SemanticPersistentProperty)} properties will be fetched
 * @param uri - the uri of the entity
 * @param entity - the container which holds the information about that entity
 * @param propertiesToValues - the properties with their required values
 * @return
 */
public String getGraphQueryForResource(URI uri,SemanticPersistentEntity<?> entity,Map<String,Object> propertyToValue,MappingPolicy globalMappingPolicy,Boolean originalPredicates){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(getPropertyBindings(uri,entity,propertyToValue,globalMappingPolicy,originalPredicates));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(getPropertyPatterns(uri,entity,propertyToValue,false,globalMappingPolicy));
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9749455337690632
147494,"@Override public void write(Map<Object,RDFState> objectsAndState){
  RDFState mergedModel=new RDFState();
  for (  Entry<Object,RDFState> entry : objectsAndState.entrySet()) {
    Object source=entry.getKey();
    RDFState dbStatements=entry.getValue();
    final SemanticPersistentEntity<?> persistentEntity=mappingContext.getPersistentEntity(source.getClass());
    final BeanWrapper<Object> wrapper=BeanWrapper.<Object>create(source,conversionService);
    RDFState currentState=toStatementsConverter.convertEntityToStatements(persistentEntity,source);
    if (dbStatements != null && !dbStatements.isEmpty()) {
      Object dbObject=read(source.getClass(),dbStatements);
      RDFState dbState=toStatementsConverter.convertEntityToStatements(persistentEntity,dbObject);
      dbState.getCurrentStatements().removeAll(currentState.getCurrentStatements());
      currentState.setDeleteStatements(dbState.getCurrentStatements());
    }
    EntityState<Object,RDFState> state=sourceStateTransmitter.copyPropertiesTo(wrapper,currentState);
    mergedModel.merge(state.getPersistentState());
  }
  semanticDatabase.removeStatements(mergedModel.getDeleteStatements());
  semanticDatabase.addStatements(mergedModel.getCurrentStatements());
}","@Override public void write(Map<Object,RDFState> objectsAndState){
  RDFState mergedModel=new RDFState();
  for (  Entry<Object,RDFState> entry : objectsAndState.entrySet()) {
    Object source=entry.getKey();
    RDFState dbStatements=entry.getValue();
    final SemanticPersistentEntity<?> persistentEntity=mappingContext.getPersistentEntity(source.getClass());
    final BeanWrapper<Object> wrapper=BeanWrapper.<Object>create(source,conversionService);
    RDFState currentState=toStatementsConverter.convertEntityToStatements(persistentEntity,source);
    if (dbStatements != null && !dbStatements.isEmpty()) {
      dbStatements.getCurrentStatements().removeAll(currentState.getCurrentStatements());
      currentState.setDeleteStatements(dbStatements.getCurrentStatements());
    }
    EntityState<Object,RDFState> state=sourceStateTransmitter.copyPropertiesTo(wrapper,currentState);
    mergedModel.merge(state.getPersistentState());
  }
  semanticDatabase.removeStatements(mergedModel.getDeleteStatements());
  semanticDatabase.addStatements(mergedModel.getCurrentStatements());
}",0.8249462365591398
147495,"private void handleAssociation(SemanticPersistentProperty persistentProperty){
  String associationBinding=getObjectBinding(binding,persistentProperty);
  Object objectValue=propertyToValue.get(persistentProperty.getName());
  if (objectValue == null) {
    appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",associationBinding);
    if (persistentProperty.getMappingPolicy().combineWith(globalMappingPolicy).shouldCascade(Cascade.GET)) {
      SemanticPersistentEntity<?> associatedPersistentEntity=mappingContext.getPersistentEntity(persistentProperty.getActualType());
      appendPattern(sb,associationBinding,""String_Node_Str"",""String_Node_Str"" + associatedPersistentEntity.getRDFType() + ""String_Node_Str"");
      PropertiesToBindingsHandler associationHandler=new PropertiesToBindingsHandler(this.sb,associationBinding,new HashMap<String,Object>(),this.mappingContext,++this.depth,this.globalMappingPolicy);
      associatedPersistentEntity.doWithProperties(associationHandler);
      associatedPersistentEntity.doWithAssociations(associationHandler);
    }
  }
}","private void handleAssociation(SemanticPersistentProperty persistentProperty){
  String associationBinding=getObjectBinding(binding,persistentProperty);
  Object objectValue=propertyToValue.get(persistentProperty.getName());
  if (objectValue == null) {
    if (originalPredicates) {
      if (Direction.OUTGOING.equals(persistentProperty.getDirection())) {
        appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getPredicate() + ""String_Node_Str"",associationBinding);
      }
 else       if (Direction.INCOMING.equals(persistentProperty.getDirection())) {
        appendPattern(sb,associationBinding,""String_Node_Str"" + persistentProperty.getPredicate() + ""String_Node_Str"",binding);
      }
 else {
        appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getPredicate() + ""String_Node_Str"",associationBinding);
        appendPattern(sb,associationBinding,""String_Node_Str"" + persistentProperty.getPredicate() + ""String_Node_Str"",binding);
      }
    }
 else {
      appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",associationBinding);
    }
    if (persistentProperty.getMappingPolicy().combineWith(globalMappingPolicy).shouldCascade(Cascade.GET)) {
      SemanticPersistentEntity<?> associatedPersistentEntity=mappingContext.getPersistentEntity(persistentProperty.getActualType());
      appendPattern(sb,associationBinding,""String_Node_Str"",""String_Node_Str"" + associatedPersistentEntity.getRDFType() + ""String_Node_Str"");
      PropertiesToBindingsHandler associationHandler=new PropertiesToBindingsHandler(this.sb,associationBinding,new HashMap<String,Object>(),this.mappingContext,++this.depth,this.globalMappingPolicy,this.originalPredicates);
      associatedPersistentEntity.doWithProperties(associationHandler);
      associatedPersistentEntity.doWithAssociations(associationHandler);
    }
  }
}",0.7218543046357616
147496,"public PropertiesToBindingsHandler(StringBuilder sb,String binding,Map<String,Object> propertyToValue,SemanticMappingContext mappingContext,int depth,MappingPolicy globalMappingPolicy){
  super(mappingContext);
  this.sb=sb;
  this.binding=binding;
  this.propertyToValue=propertyToValue;
  this.objectToLiteralConverter=ObjectToLiteralConverter.getInstance();
  this.depth=depth;
  this.globalMappingPolicy=globalMappingPolicy;
}","public PropertiesToBindingsHandler(StringBuilder sb,String binding,Map<String,Object> propertyToValue,SemanticMappingContext mappingContext,int depth,MappingPolicy globalMappingPolicy,Boolean originalPredicates){
  super(mappingContext);
  this.sb=sb;
  this.binding=binding;
  this.propertyToValue=propertyToValue;
  this.objectToLiteralConverter=ObjectToLiteralConverter.getInstance();
  this.depth=depth;
  this.globalMappingPolicy=globalMappingPolicy;
  this.originalPredicates=originalPredicates;
}",0.9217577706323687
147497,"@SuppressWarnings(""String_Node_Str"") private void handlePersistentProperty(SemanticPersistentProperty persistentProperty){
  if (isRetrivableProperty(persistentProperty)) {
    Object objectValue=propertyToValue.get(persistentProperty.getName());
    if (objectValue != null) {
      if (objectValue instanceof Collection<?> || objectValue.getClass().isArray()) {
        if (objectValue.getClass().isArray()) {
          objectValue=Arrays.asList((Object[])objectValue);
        }
        for (        Object o : (Collection<Object>)objectValue) {
          Value val=this.objectToLiteralConverter.convert(o);
          String obj=val instanceof URI ? ""String_Node_Str"" + val + ""String_Node_Str"" : val.toString();
          appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",obj);
        }
      }
 else {
        Value val=this.objectToLiteralConverter.convert(objectValue);
        String obj=val instanceof URI ? ""String_Node_Str"" + val + ""String_Node_Str"" : val.toString();
        appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",obj);
      }
    }
 else {
      appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",getObjectBinding(binding,persistentProperty));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void handlePersistentProperty(SemanticPersistentProperty persistentProperty){
  if (isRetrivableProperty(persistentProperty)) {
    Object objectValue=propertyToValue.get(persistentProperty.getName());
    if (objectValue != null) {
      if (objectValue instanceof Collection<?> || objectValue.getClass().isArray()) {
        if (objectValue.getClass().isArray()) {
          objectValue=Arrays.asList((Object[])objectValue);
        }
        for (        Object o : (Collection<Object>)objectValue) {
          Value val=this.objectToLiteralConverter.convert(o);
          String obj=val instanceof URI ? ""String_Node_Str"" + val + ""String_Node_Str"" : val.toString();
          if (originalPredicates) {
            appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getPredicate() + ""String_Node_Str"",obj);
          }
 else {
            appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",obj);
          }
        }
      }
 else {
        Value val=this.objectToLiteralConverter.convert(objectValue);
        String obj=val instanceof URI ? ""String_Node_Str"" + val + ""String_Node_Str"" : val.toString();
        if (originalPredicates) {
          appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getPredicate() + ""String_Node_Str"",obj);
        }
 else {
          appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",obj);
        }
      }
    }
 else {
      if (originalPredicates) {
        appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getPredicate() + ""String_Node_Str"",getObjectBinding(binding,persistentProperty));
      }
 else {
        appendPattern(sb,binding,""String_Node_Str"" + persistentProperty.getAliasPredicate() + ""String_Node_Str"",getObjectBinding(binding,persistentProperty));
      }
    }
  }
}",0.8159509202453987
147498,"@Test public void TestBindingCreationEagerLoad(){
  String queryBindings=entityToQueryConverter.getPropertyBindings(collectionResource,testCollectionType,new HashMap<String,Object>(),MappingPolicyImpl.ALL_POLICY);
  String[] expected=expectedBindingsEager.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String[] resultBindings=queryBindings.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  Arrays.sort(expected,comparator);
  Arrays.sort(resultBindings,comparator);
  assertArrayEquals(expected,resultBindings);
}","@Test public void TestBindingCreationEagerLoad(){
  String queryBindings=entityToQueryConverter.getPropertyBindings(collectionResource,testCollectionType,new HashMap<String,Object>(),MappingPolicyImpl.ALL_POLICY,false);
  String[] expected=expectedBindingsEager.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String[] resultBindings=queryBindings.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  Arrays.sort(expected,comparator);
  Arrays.sort(resultBindings,comparator);
  assertArrayEquals(expected,resultBindings);
}",0.9947552447552448
147499,"@Test public void TestBindingCreation(){
  String queryBindings=entityToQueryConverter.getPropertyBindings(resource,testEntityType,new HashMap<String,Object>(),MappingPolicyImpl.ALL_POLICY);
  String[] expected=expectedBindings.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String[] resultBindings=queryBindings.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  Arrays.sort(expected,comparator);
  Arrays.sort(resultBindings,comparator);
  assertArrayEquals(expected,resultBindings);
}","@Test public void TestBindingCreation(){
  String queryBindings=entityToQueryConverter.getPropertyBindings(resource,testEntityType,new HashMap<String,Object>(),MappingPolicyImpl.ALL_POLICY,false);
  String[] expected=expectedBindings.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String[] resultBindings=queryBindings.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  Arrays.sort(expected,comparator);
  Arrays.sort(resultBindings,comparator);
  assertArrayEquals(expected,resultBindings);
}",0.9944852941176472
147500,"private Repository getRepository(){
  RepositoryConfig config=getConfig();
  if (StringUtils.hasText(username) && StringUtils.hasText(password)) {
    return SemanticDatabaseManager.getRepository(url,username,password,config);
  }
 else {
    return SemanticDatabaseManager.getRepository(url,config);
  }
}","private Repository getRepository(){
  if (StringUtils.hasText(username) && StringUtils.hasText(password)) {
    return SemanticDatabaseManager.getRepository(url,username,password,this.configFile);
  }
 else {
    return SemanticDatabaseManager.getRepository(url,this.configFile);
  }
}",0.9035532994923858
147501,"private static Repository createRepository(RepositoryManager manager,String repositoryId,RepositoryConfig config) throws RepositoryException, RepositoryConfigException {
  Repository repo;
  if (config == null) {
    log.info(""String_Node_Str"");
    try {
      config=getDefaultConfig();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      return null;
    }
  }
  if (!(repositoryId == null || repositoryId.isEmpty())) {
    config.setID(repositoryId);
  }
  manager.addRepositoryConfig(config);
  repo=manager.getRepository(config.getID());
  repo.initialize();
  return repo;
}","private static Repository createRepository(RepositoryManager manager,String repositoryId,RepositoryConfig config) throws RepositoryException, RepositoryConfigException {
  Repository repo;
  if (config == null) {
    logger.info(""String_Node_Str"");
    try {
      config=getDefaultConfig();
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
      return null;
    }
  }
  if (!(repositoryId == null || repositoryId.isEmpty())) {
    config.setID(repositoryId);
  }
  manager.addRepositoryConfig(config);
  repo=manager.getRepository(config.getID());
  repo.initialize();
  return repo;
}",0.9950738916256158
147502,"private static RepositoryManager createNewLocalRepositoryManager(String baseDir) throws RepositoryException {
  log.info(""String_Node_Str"",baseDir);
  LocalRepositoryManager repoManager=new LocalRepositoryManager(new File(baseDir));
  repoManager.initialize();
  return repoManager;
}","private static RepositoryManager createNewLocalRepositoryManager(String baseDir) throws RepositoryException {
  logger.info(""String_Node_Str"",baseDir);
  LocalRepositoryManager repoManager=new LocalRepositoryManager(new File(baseDir));
  repoManager.initialize();
  return repoManager;
}",0.9947460595446584
147503,"public static Repository getRepository(String repoURL){
  String[] parts=parseRepositoryURL(repoURL);
  return getRepository(parts[0],parts[1]);
}","public static Repository getRepository(String repoURL,String username,String password,String configFile){
  String[] parts=parseRepositoryURL(repoURL);
  return getRepository(parts[0],parts[1],username,password,configFile);
}",0.7870619946091644
147504,"private static synchronized RepositoryManager getRepositoryManagerForLocation(String serverURL,String username,String password) throws RepositoryException {
  RepositoryManager repoManager;
  if ((repoManager=openRepositoryManagers.get(serverURL)) != null) {
    log.info(""String_Node_Str"",serverURL);
    return repoManager;
  }
  if (serverURL.startsWith(""String_Node_Str"")) {
    repoManager=createNewRemoteRepositoryManager(serverURL,username,password);
  }
 else {
    repoManager=createNewLocalRepositoryManager(serverURL);
  }
  if (repoManager != null) {
    openRepositoryManagers.put(serverURL,repoManager);
  }
  return repoManager;
}","private static synchronized RepositoryManager getRepositoryManagerForLocation(String serverURL,String username,String password) throws RepositoryException {
  RepositoryManager repoManager;
  if ((repoManager=openRepositoryManagers.get(serverURL)) != null) {
    logger.info(""String_Node_Str"",serverURL);
    return repoManager;
  }
  if (serverURL.startsWith(""String_Node_Str"")) {
    repoManager=createNewRemoteRepositoryManager(serverURL,username,password);
  }
 else {
    repoManager=createNewLocalRepositoryManager(serverURL);
  }
  if (repoManager != null) {
    openRepositoryManagers.put(serverURL,repoManager);
  }
  return repoManager;
}",0.9976798143851509
147505,"private static RepositoryManager createNewRemoteRepositoryManager(String serverURL,String username,String password) throws RepositoryException {
  log.info(""String_Node_Str"",serverURL);
  RemoteRepositoryManager repoManager=new RemoteRepositoryManager(serverURL);
  repoManager.setUsernameAndPassword(username,password);
  repoManager.initialize();
  return repoManager;
}","private static RepositoryManager createNewRemoteRepositoryManager(String serverURL,String username,String password) throws RepositoryException {
  logger.info(""String_Node_Str"",serverURL);
  RemoteRepositoryManager repoManager=new RemoteRepositoryManager(serverURL);
  repoManager.setUsernameAndPassword(username,password);
  repoManager.initialize();
  return repoManager;
}",0.9959839357429718
147506,"@BeforeClass public static void prepare(){
  ClassPathResource propsResource=new ClassPathResource(""String_Node_Str"");
  Properties props=new Properties();
  try {
    props.load(propsResource.getInputStream());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  url=props.getProperty(""String_Node_Str"",""String_Node_Str"");
  securedUrl=props.getProperty(""String_Node_Str"",""String_Node_Str"");
  username=props.getProperty(""String_Node_Str"",""String_Node_Str"");
  password=props.getProperty(""String_Node_Str"",""String_Node_Str"");
  localRepositoryBase=props.getProperty(""String_Node_Str"",""String_Node_Str"");
  newRepoID=""String_Node_Str"" + String.valueOf((int)Math.floor(Math.random() * 10000));
}","@BeforeClass public static void prepare(){
  ClassPathResource propsResource=new ClassPathResource(""String_Node_Str"");
  Properties props=new Properties();
  try {
    props.load(propsResource.getInputStream());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  localRepositoryBase=props.getProperty(""String_Node_Str"",""String_Node_Str"");
  newRepoID=""String_Node_Str"" + String.valueOf((int)Math.floor(Math.random() * 10000));
}",0.7681539807524059
147507,"@Test public void testOpenExistingLocalRepo(){
  try {
    Repository repo=SemanticDatabaseManager.getRepository(localRepositoryBase + ""String_Node_Str"" + Protocol.REPOSITORIES+ ""String_Node_Str""+ newRepoID);
    assertTrue(testRepoSimple(repo));
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
}","@Test public void testOpenExistingLocalRepo(){
  try {
    Repository repo=SemanticDatabaseManager.getRepository(localRepositoryBase + ""String_Node_Str"" + Protocol.REPOSITORIES+ ""String_Node_Str""+ newRepoID,null);
    assertTrue(testRepoSimple(repo));
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
}",0.9924585218702866
147508,"@Test public void testCreateLocalRepoWithDefaultConfigAndCustomID(){
  try {
    Repository repo=SemanticDatabaseManager.getRepository(localRepositoryBase,newRepoID);
    assertTrue(testRepoSimple(repo));
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
}","@Test public void testCreateLocalRepoWithDefaultConfigAndCustomID(){
  try {
    Repository repo=SemanticDatabaseManager.getRepository(localRepositoryBase + ""String_Node_Str"" + Protocol.REPOSITORIES+ ""String_Node_Str""+ newRepoID,null);
    assertTrue(testRepoSimple(repo));
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(false);
  }
}",0.8895800933125972
147509,"private void sendEmail(Email mail){
}","private void sendEmail(Email mail){
  executorService.execute(() -> {
    try {
      Properties props=System.getProperties();
      Session session=Session.getInstance(props,null);
      Message mailMessage=new MimeMessage(session);
      mailMessage.setFrom(new InternetAddress(emailFromAddress));
      for (      User receiver : mail.getRecipients()) {
        if (receiver.getEMail() != null) {
          mailMessage.addRecipients(Message.RecipientType.BCC,InternetAddress.parse(receiver.getEMail(),false));
        }
      }
      mailMessage.setSubject(mail.getSubject());
      String text=mail.getStarting();
      text=text.concat(""String_Node_Str"");
      text=text.concat(mail.getMessage());
      text=text.concat(""String_Node_Str"");
      text=text.concat(mail.getClosing());
      text=text.concat(""String_Node_Str"");
      text=text.concat(mail.getFooter());
      mailMessage.setText(text);
      mailMessage.setHeader(""String_Node_Str"",""String_Node_Str"");
      mailMessage.setSentDate(mail.getCreationDate());
      Transport.send(mailMessage);
    }
 catch (    Exception ex) {
      logger.warning(ex.getMessage());
    }
  }
);
}",0.0622895622895622
147510,"/** 
 * This method allows to create a new requirement.
 * @param requirement requirement as a JSON object
 * @return Response with the created requirement as a JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createRequirement(@ApiParam(value=""String_Node_Str"",required=true) String requirement){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    dalFacade=bazaarService.createConnection();
    Gson gson=new Gson();
    Requirement requirementToCreate=gson.fromJson(requirement,Requirement.class);
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    requirementToCreate.setCreatorId(internalUserId);
    if (requirementToCreate.getLeadDeveloperId() == 0) {
      requirementToCreate.setLeadDeveloperId(1);
    }
    Vtor vtor=bazaarService.getValidators();
    vtor.useProfiles(""String_Node_Str"");
    vtor.validate(requirementToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    vtor.resetProfiles();
    for (    Component component : requirementToCreate.getComponents()) {
      component=dalFacade.getComponentById(component.getId());
      if (requirementToCreate.getProjectId() != component.getProjectId()) {
        ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.VALIDATION,""String_Node_Str"");
      }
    }
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_REQUIREMENT,String.valueOf(requirementToCreate.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    Requirement createdRequirement=dalFacade.createRequirement(requirementToCreate,internalUserId);
    return new HttpResponse(gson.toJson(createdRequirement),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * This method allows to create a new requirement.
 * @param requirement requirement as a JSON object
 * @return Response with the created requirement as a JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createRequirement(@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String requirement){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    dalFacade=bazaarService.createConnection();
    Gson gson=new Gson();
    Requirement requirementToCreate=gson.fromJson(requirement,Requirement.class);
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    requirementToCreate.setCreatorId(internalUserId);
    if (requirementToCreate.getLeadDeveloperId() == 0) {
      requirementToCreate.setLeadDeveloperId(1);
    }
    Vtor vtor=bazaarService.getValidators();
    vtor.useProfiles(""String_Node_Str"");
    vtor.validate(requirementToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    vtor.resetProfiles();
    for (    Component component : requirementToCreate.getComponents()) {
      component=dalFacade.getComponentById(component.getId());
      if (requirementToCreate.getProjectId() != component.getProjectId()) {
        ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.VALIDATION,""String_Node_Str"");
      }
    }
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_REQUIREMENT,String.valueOf(requirementToCreate.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    Requirement createdRequirement=dalFacade.createRequirement(requirementToCreate,internalUserId);
    return new HttpResponse(gson.toJson(createdRequirement),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.9980816662099206
147511,"/** 
 * This method updates a specific requirement within a project and component.
 * @param requirementId id of the requirement to update
 * @param requirement   requirement as a JSON object
 * @return Response with updated requirement as a JSON object.
 */
@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_OK,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse updateRequirement(@PathParam(""String_Node_Str"") int requirementId,@ApiParam(value=""String_Node_Str"",required=true) String requirement){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Requirement requirementToUpdate=gson.fromJson(requirement,Requirement.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(requirementToUpdate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Modify_REQUIREMENT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    if (requirementToUpdate.getId() != 0 && requirementId != requirementToUpdate.getId()) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    }
    RequirementEx updatedRequirement=dalFacade.modifyRequirement(requirementToUpdate,internalUserId);
    return new HttpResponse(gson.toJson(updatedRequirement),HttpURLConnection.HTTP_OK);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * This method updates a specific requirement within a project and component.
 * @param requirementId id of the requirement to update
 * @param requirement   requirement as a JSON object
 * @return Response with updated requirement as a JSON object.
 */
@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_OK,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse updateRequirement(@PathParam(""String_Node_Str"") int requirementId,@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String requirement){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Requirement requirementToUpdate=gson.fromJson(requirement,Requirement.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(requirementToUpdate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Modify_REQUIREMENT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    if (requirementToUpdate.getId() != 0 && requirementId != requirementToUpdate.getId()) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    }
    RequirementEx updatedRequirement=dalFacade.modifyRequirement(requirementToUpdate,internalUserId);
    return new HttpResponse(gson.toJson(updatedRequirement),HttpURLConnection.HTTP_OK);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.9979110713219934
147512,"/** 
 * This method allows to create a new attachment.
 * @param attachmentType type of attachment
 * @param attachment     attachment as JSON object
 * @return Response with the created attachment as JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createAttachment(@ApiParam(value=""String_Node_Str"",allowableValues=""String_Node_Str"") @DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String attachmentType,@ApiParam(value=""String_Node_Str"",required=true) String attachment){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    Gson gson=new Gson();
    Attachment attachmentToCreate=gson.fromJson(attachment,Attachment.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(attachmentToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    Requirement requirement=dalFacade.getRequirementById(attachmentToCreate.getRequirementId(),internalUserId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_ATTACHMENT,String.valueOf(requirement.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    Attachment createdAttachment=dalFacade.createAttachment(attachmentToCreate);
    return new HttpResponse(gson.toJson(createdAttachment),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * This method allows to create a new attachment.
 * @param attachmentType type of attachment
 * @param attachment     attachment as JSON object
 * @return Response with the created attachment as JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.MULTIPART_FORM_DATA) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createAttachment(@ApiParam(value=""String_Node_Str"",allowableValues=""String_Node_Str"") @DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") String attachmentType,@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String attachment){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    Gson gson=new Gson();
    Attachment attachmentToCreate=gson.fromJson(attachment,Attachment.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(attachmentToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    Requirement requirement=dalFacade.getRequirementById(attachmentToCreate.getRequirementId(),internalUserId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_ATTACHMENT,String.valueOf(requirement.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    Attachment createdAttachment=dalFacade.createAttachment(attachmentToCreate);
    return new HttpResponse(gson.toJson(createdAttachment),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.9979016786570744
147513,"/** 
 * This method allows to create a new comment.
 * @param comment comment as JSON object
 * @return Response with the created comment as JSON object.
 */
@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createComment(@ApiParam(value=""String_Node_Str"",required=true) String comment){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    Gson gson=new Gson();
    Comment commentToCreate=gson.fromJson(comment,Comment.class);
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    Requirement requirement=dalFacade.getRequirementById(commentToCreate.getRequirementId(),internalUserId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_COMMENT,String.valueOf(requirement.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    commentToCreate.setCreatorId(internalUserId);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(commentToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    Comment createdComment=dalFacade.createComment(commentToCreate);
    return new HttpResponse(gson.toJson(createdComment),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * This method allows to create a new comment.
 * @param comment comment as JSON object
 * @return Response with the created comment as JSON object.
 */
@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createComment(@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String comment){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    Gson gson=new Gson();
    Comment commentToCreate=gson.fromJson(comment,Comment.class);
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    Requirement requirement=dalFacade.getRequirementById(commentToCreate.getRequirementId(),internalUserId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_COMMENT,String.valueOf(requirement.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    commentToCreate.setCreatorId(internalUserId);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(commentToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    Comment createdComment=dalFacade.createComment(commentToCreate);
    return new HttpResponse(gson.toJson(createdComment),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.9977426636568848
147514,"/** 
 * This method allows to create a new component.
 * @param component component as a JSON object
 * @return Response with the created project as a JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createComponent(@ApiParam(value=""String_Node_Str"",required=true) String component){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    Gson gson=new Gson();
    Component componentToCreate=gson.fromJson(component,Component.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(componentToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_COMPONENT,String.valueOf(componentToCreate.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    componentToCreate.setLeaderId(internalUserId);
    Component createdComponent=dalFacade.createComponent(componentToCreate);
    return new HttpResponse(gson.toJson(createdComponent),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * This method allows to create a new component.
 * @param component component as a JSON object
 * @return Response with the created project as a JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createComponent(@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String component){
  DALFacade dalFacade=null;
  try {
    long userId=((UserAgent)getActiveAgent()).getId();
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    Gson gson=new Gson();
    Component componentToCreate=gson.fromJson(component,Component.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(componentToCreate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_COMPONENT,String.valueOf(componentToCreate.getProjectId()),dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    componentToCreate.setLeaderId(internalUserId);
    Component createdComponent=dalFacade.createComponent(componentToCreate);
    return new HttpResponse(gson.toJson(createdComponent),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.997327224131348
147515,"/** 
 * Allows to update a certain component.
 * @param componentId id of the component under a given project
 * @param component   updated component as a JSON object
 * @return Response with the updated component as a JSON object.
 */
@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_OK,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse updateComponent(@PathParam(""String_Node_Str"") int componentId,@ApiParam(value=""String_Node_Str"",required=true) String component){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Component updatedComponent=gson.fromJson(component,Component.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(updatedComponent);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Modify_COMPONENT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    if (updatedComponent.getId() != 0 && componentId != updatedComponent.getId()) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    }
    updatedComponent=dalFacade.modifyComponent(updatedComponent);
    return new HttpResponse(gson.toJson(updatedComponent),HttpURLConnection.HTTP_OK);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * Allows to update a certain component.
 * @param componentId id of the component under a given project
 * @param component   updated component as a JSON object
 * @return Response with the updated component as a JSON object.
 */
@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_OK,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse updateComponent(@PathParam(""String_Node_Str"") int componentId,@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String component){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Component updatedComponent=gson.fromJson(component,Component.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(updatedComponent);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Modify_COMPONENT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    if (updatedComponent.getId() != 0 && componentId != updatedComponent.getId()) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    }
    updatedComponent=dalFacade.modifyComponent(updatedComponent);
    return new HttpResponse(gson.toJson(updatedComponent),HttpURLConnection.HTTP_OK);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.9978540772532188
147516,"/** 
 * Allows to update a certain project.
 * @param projectId id of the project to update
 * @param project   updated project as a JSON object
 * @return Response with the updated project as a JSON object.
 */
@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_OK,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse updateProject(@PathParam(""String_Node_Str"") int projectId,@ApiParam(value=""String_Node_Str"",required=true) String project){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Project projectToUpdate=gson.fromJson(project,Project.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(projectToUpdate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Modify_PROJECT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    if (projectToUpdate.getId() != 0 && projectId != projectToUpdate.getId()) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    }
    Project updatedProject=dalFacade.modifyProject(projectToUpdate);
    return new HttpResponse(gson.toJson(updatedProject),HttpURLConnection.HTTP_OK);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * Allows to update a certain project.
 * @param projectId id of the project to update
 * @param project   updated project as a JSON object
 * @return Response with the updated project as a JSON object.
 */
@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_OK,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_NOT_FOUND,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse updateProject(@PathParam(""String_Node_Str"") int projectId,@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String project){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Project projectToUpdate=gson.fromJson(project,Project.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(projectToUpdate);
    if (vtor.hasViolations()) {
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Modify_PROJECT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    if (projectToUpdate.getId() != 0 && projectId != projectToUpdate.getId()) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    }
    Project updatedProject=dalFacade.modifyProject(projectToUpdate);
    return new HttpResponse(gson.toJson(updatedProject),HttpURLConnection.HTTP_OK);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else     if (bex.getErrorCode() == ErrorCode.NOT_FOUND) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_NOT_FOUND);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.997825411618515
147517,"/** 
 * This method allows to create a new project.
 * @param project project as a JSON object
 * @return Response with the created project as a JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createProject(@ApiParam(value=""String_Node_Str"",required=true) String project){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Project projectToCreate=gson.fromJson(project,Project.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(projectToCreate);
    if (vtor.hasViolations())     ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_PROJECT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    projectToCreate.setLeaderId(internalUserId);
    Project createdProject=dalFacade.createProject(projectToCreate);
    return new HttpResponse(gson.toJson(createdProject),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}","/** 
 * This method allows to create a new project.
 * @param project project as a JSON object
 * @return Response with the created project as a JSON object.
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=HttpURLConnection.HTTP_CREATED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_UNAUTHORIZED,message=""String_Node_Str""),@ApiResponse(code=HttpURLConnection.HTTP_INTERNAL_ERROR,message=""String_Node_Str"")}) public HttpResponse createProject(@ApiParam(value=""String_Node_Str"",required=true) @ContentParam String project){
  DALFacade dalFacade=null;
  try {
    String registratorErrors=bazaarService.notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
    if (registratorErrors != null) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,registratorErrors);
    }
    long userId=((UserAgent)getActiveAgent()).getId();
    Gson gson=new Gson();
    Project projectToCreate=gson.fromJson(project,Project.class);
    Vtor vtor=bazaarService.getValidators();
    vtor.validate(projectToCreate);
    if (vtor.hasViolations())     ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    dalFacade=bazaarService.createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId(userId);
    boolean authorized=new AuthorizationManager().isAuthorized(internalUserId,PrivilegeEnum.Create_PROJECT,dalFacade);
    if (!authorized) {
      ExceptionHandler.getInstance().throwException(ExceptionLocation.BAZAARSERVICE,ErrorCode.AUTHORIZATION,Localization.getInstance().getResourceBundle().getString(""String_Node_Str""));
    }
    projectToCreate.setLeaderId(internalUserId);
    Project createdProject=dalFacade.createProject(projectToCreate);
    return new HttpResponse(gson.toJson(createdProject),HttpURLConnection.HTTP_CREATED);
  }
 catch (  BazaarException bex) {
    if (bex.getErrorCode() == ErrorCode.AUTHORIZATION) {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_UNAUTHORIZED);
    }
 else {
      return new HttpResponse(ExceptionHandler.getInstance().toJSON(bex),HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    return new HttpResponse(ExceptionHandler.getInstance().toJSON(bazaarException),HttpURLConnection.HTTP_INTERNAL_ERROR);
  }
 finally {
    bazaarService.closeConnection(dalFacade);
  }
}",0.9974226804123713
147518,"/** 
 * This method add the current user to the followers list of a given requirement
 * @param projectId     the ID of the project of the requirement.
 * @param componentId   the id of the component under a given project
 * @param requirementId the ID of the requirement.
 * @return
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Summary(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public String addUserToFollowers(@PathParam(""String_Node_Str"") int projectId,@PathParam(""String_Node_Str"") int componentId,@PathParam(""String_Node_Str"") int requirementId){
  long userId=((UserAgent)getActiveAgent()).getId();
  String registratorErrors=notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
  if (registratorErrors != null)   return registratorErrors;
  String resultJSON=""String_Node_Str"";
  DALFacade dalFacade=null;
  try {
    dalFacade=createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId((int)userId);
    if (internalUserId == null) {
      resultJSON=""String_Node_Str"";
    }
 else {
      dalFacade.follow(internalUserId,requirementId);
    }
  }
 catch (  BazaarException bex) {
    resultJSON=ExceptionHandler.getInstance().toJSON(bex);
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    resultJSON=ExceptionHandler.getInstance().toJSON(bazaarException);
  }
 finally {
    closeConnection(dalFacade);
  }
  return resultJSON;
}","/** 
 * This method add the current user to the followers list of a given requirement
 * @param projectId     the ID of the project of the requirement.
 * @param componentId   the id of the component under a given project
 * @param requirementId the ID of the requirement.
 * @return
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Summary(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public String addUserToFollowers(@PathParam(""String_Node_Str"") int projectId,@PathParam(""String_Node_Str"") int componentId,@PathParam(""String_Node_Str"") int requirementId){
  long userId=((UserAgent)getActiveAgent()).getId();
  String registratorErrors=notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
  if (registratorErrors != null)   return registratorErrors;
  String resultJSON=""String_Node_Str"";
  DALFacade dalFacade=null;
  try {
    dalFacade=createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId((int)userId);
    if (internalUserId == null) {
      resultJSON=""String_Node_Str"";
    }
 else {
      dalFacade.follow(internalUserId,requirementId);
    }
  }
 catch (  BazaarException bex) {
    resultJSON=ExceptionHandler.getInstance().toJSON(bex);
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    resultJSON=ExceptionHandler.getInstance().toJSON(bazaarException);
  }
 finally {
    closeConnection(dalFacade);
  }
  return resultJSON;
}",0.9883649724433556
147519,"/** 
 * This method creates a vote for the given requirement in the name of the current user.
 * @param projectId     the ID of the project of the requirement.
 * @param componentId   the id of the component under a given project
 * @param requirementId the ID of the requirement.
 * @return
 */
@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Summary(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public String addVote(@PathParam(""String_Node_Str"") int projectId,@PathParam(""String_Node_Str"") int componentId,@PathParam(""String_Node_Str"") int requirementId,@QueryParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") String direction){
  long userId=((UserAgent)getActiveAgent()).getId();
  String registratorErrors=notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
  if (registratorErrors != null)   return registratorErrors;
  DALFacade dalFacade=null;
  String resultJSON=""String_Node_Str"";
  try {
    if (!(direction.equals(""String_Node_Str"") || direction.equals(""String_Node_Str""))) {
      vtor.addViolation(new Violation(""String_Node_Str"",direction,direction));
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId((int)userId);
    if (internalUserId == null) {
      resultJSON=""String_Node_Str"";
    }
 else {
      dalFacade.vote(internalUserId,requirementId,direction.equals(""String_Node_Str""));
    }
  }
 catch (  BazaarException bex) {
    resultJSON=ExceptionHandler.getInstance().toJSON(bex);
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    resultJSON=ExceptionHandler.getInstance().toJSON(bazaarException);
  }
 finally {
    closeConnection(dalFacade);
  }
  return resultJSON;
}","/** 
 * This method creates a vote for the given requirement in the name of the current user.
 * @param projectId     the ID of the project of the requirement.
 * @param componentId   the id of the component under a given project
 * @param requirementId the ID of the requirement.
 * @return
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @Summary(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public String addVote(@PathParam(""String_Node_Str"") int projectId,@PathParam(""String_Node_Str"") int componentId,@PathParam(""String_Node_Str"") int requirementId,@QueryParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") String direction){
  long userId=((UserAgent)getActiveAgent()).getId();
  String registratorErrors=notifyRegistrators(EnumSet.of(BazaarFunction.VALIDATION,BazaarFunction.USER_FIRST_LOGIN_HANDLING));
  if (registratorErrors != null)   return registratorErrors;
  DALFacade dalFacade=null;
  String resultJSON=""String_Node_Str"";
  try {
    if (!(direction.equals(""String_Node_Str"") || direction.equals(""String_Node_Str""))) {
      vtor.addViolation(new Violation(""String_Node_Str"",direction,direction));
      ExceptionHandler.getInstance().handleViolations(vtor.getViolations());
    }
    dalFacade=createConnection();
    Integer internalUserId=dalFacade.getUserIdByLAS2PeerId((int)userId);
    if (internalUserId == null) {
      resultJSON=""String_Node_Str"";
    }
 else {
      dalFacade.vote(internalUserId,requirementId,direction.equals(""String_Node_Str""));
    }
  }
 catch (  BazaarException bex) {
    resultJSON=ExceptionHandler.getInstance().toJSON(bex);
  }
catch (  Exception ex) {
    BazaarException bazaarException=ExceptionHandler.getInstance().convert(ex,ExceptionLocation.BAZAARSERVICE,ErrorCode.UNKNOWN,""String_Node_Str"");
    resultJSON=ExceptionHandler.getInstance().toJSON(bazaarException);
  }
 finally {
    closeConnection(dalFacade);
  }
  return resultJSON;
}",0.990495247623812
147520,"public Comment(Builder builder){
  Id=builder.id;
  this.message=builder.message;
  this.creatorId=builder.userId;
  this.requirementId=builder.requirementId;
  this.creation_time=builder.creation_time;
}","public Comment(Builder builder){
  Id=builder.id;
  this.message=builder.message;
  this.creatorId=builder.userId;
  this.requirementId=builder.requirementId;
}",0.8791208791208791
147521,"/** 
 * Private constructor, should be called from its builder only.
 * @param builder
 */
private Component(Builder builder){
  this.id=builder.id;
  this.description=builder.description;
  this.name=builder.name;
  this.projectId=builder.projectId;
}","/** 
 * Private constructor, should be called from its builder only.
 * @param builder
 */
private Component(Builder builder){
  this.id=builder.id;
  this.description=builder.description;
  this.name=builder.name;
  this.projectId=builder.projectId;
  this.leaderId=builder.leaderId;
}",0.9368029739776952
147522,"public ProjectVisibility getVisibility(){
  return visibility;
}","public static ProjectVisibility getVisibility(final String visibilityChar){
  for (  ProjectVisibility vis : ProjectVisibility.values())   if (vis.asChar == visibilityChar)   return vis;
  return null;
}",0.352059925093633
147523,"@Override public CommentsRecord createRecord(Comment entity){
  CommentsRecord record=new CommentsRecord();
  record.setId(entity.getId());
  record.setUserId(entity.getCreatorId());
  record.setMessage(entity.getMessage());
  record.setRequirementId(entity.getRequirementId());
  return record;
}","@Override public CommentsRecord createRecord(Comment entity){
  CommentsRecord record=new CommentsRecord();
  record.setId(entity.getId());
  record.setUserId(entity.getCreatorId());
  record.setMessage(entity.getMessage());
  record.setRequirementId(entity.getRequirementId());
  record.setCreationTime(new Timestamp(Calendar.getInstance().getTime().getTime()));
  return record;
}",0.8748159057437408
147524,"@Override public ComponentsRecord createRecord(Component entry){
  ComponentsRecord record=new ComponentsRecord();
  record.setDescription(entry.getDescription());
  record.setName(entry.getName());
  return record;
}","@Override public ComponentsRecord createRecord(Component entry){
  ComponentsRecord record=new ComponentsRecord();
  record.setDescription(entry.getDescription());
  record.setName(entry.getName());
  record.setProjectId(entry.getProjectId());
  record.setId(entry.getId());
  record.setLeaderId(entry.getLeaderId());
  return record;
}",0.7848101265822784
147525,"@Override public Component mapToEntity(ComponentsRecord record){
  return Component.getBuilder(record.getName()).description(record.getDescription()).id(record.getId()).build();
}","@Override public Component mapToEntity(ComponentsRecord record){
  return Component.getBuilder(record.getName()).description(record.getDescription()).projectId(record.getProjectId()).id(record.getId()).leaderId(record.getLeaderId()).build();
}",0.7867298578199052
147526,"@Override public ProjectsRecord createRecord(Project entry){
  ProjectsRecord record=new ProjectsRecord();
  record.setDescription(entry.getDescription());
  record.setName(entry.getName());
  return record;
}","@Override public ProjectsRecord createRecord(Project entry){
  ProjectsRecord record=new ProjectsRecord();
  record.setDescription(entry.getDescription());
  record.setName(entry.getName());
  record.setLeaderId(entry.getLeaderId());
  record.setVisibility(entry.getVisibility().asChar());
  return record;
}",0.8085106382978723
147527,"@Override public Project mapToEntity(ProjectsRecord record){
  return Project.getBuilder(record.getName()).description(record.getDescription()).id(record.getId()).build();
}","@Override public Project mapToEntity(ProjectsRecord record){
  return Project.getBuilder(record.getName()).description(record.getDescription()).id(record.getId()).leaderId(record.getLeaderId()).visibility(Project.ProjectVisibility.getVisibility(record.getVisibility())).build();
}",0.7637969094922737
147528,"public void testCreateComponent() throws Exception {
  int createdComponentId=9;
  Component testComp9=Component.getBuilder(""String_Node_Str"").description(""String_Node_Str"").id(createdComponentId).projectId(1).build();
  facade.createComponent(testComp9);
  List<Component> components=facade.listComponentsByProjectId(1,ALL_IN_ONE_PAGE);
  assertNotNull(components);
  assertEquals(1,components.size());
  assertEquals(createdComponentId,components.get(0).getId());
  jooq.delete(Components.COMPONENTS).where(Components.COMPONENTS.ID.equal(createdComponentId)).execute();
}","public void testCreateComponent() throws Exception {
  int createdComponentId=9;
  Component testComp9=Component.getBuilder(""String_Node_Str"").description(""String_Node_Str"").id(createdComponentId).projectId(1).leaderId(1).build();
  facade.createComponent(testComp9);
  List<Component> components=facade.listComponentsByProjectId(1,ALL_IN_ONE_PAGE);
  assertNotNull(components);
  assertEquals(1,components.size());
  assertEquals(createdComponentId,components.get(0).getId());
  jooq.delete(Components.COMPONENTS).where(Components.COMPONENTS.ID.equal(createdComponentId)).execute();
}",0.9896373056994818
147529,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String orderAddTicket(@ModelAttribute(value=""String_Node_Str"") int row,@ModelAttribute(value=""String_Node_Str"") Sector sector,@RequestParam(value=""String_Node_Str"") int[] seat,Model model){
  model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  if (order.size() > 0) {
    ArrayList<Ticket> deletingTicket=new ArrayList<>();
    for (    Ticket ord : order) {
      if (ticketService.getTicketById(ord.getId()) == null)       deletingTicket.add(ord);
    }
    if (deletingTicket.size() == 1) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + deletingTicket.get(0).getId() + ""String_Node_Str"");
      order.remove(deletingTicket.get(0));
      orderPrice-=deletingTicket.get(0).getSector().getPrice();
    }
    if (deletingTicket.size() > 1) {
      StringBuilder builder=new StringBuilder(200);
      for (      Ticket tic : deletingTicket) {
        builder.append(tic.getId()).append(""String_Node_Str"");
        order.remove(tic);
        orderPrice-=tic.getSector().getPrice();
      }
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + builder + ""String_Node_Str"");
    }
  }
  for (  int seat1 : seat) {
    Ticket ticket=new Ticket();
    ticket.setSector(sector);
    ticket.setRow(row);
    ticket.setSeat(seat1);
    currentSeat=seat1;
    if (order.size() > 0) {
      for (      Ticket ord : order) {
        if (ord.getSector().equals(sector) && ord.getSeat() == seat1 && ord.getRow() == row)         return ""String_Node_Str"";
      }
    }
    ticketService.addTicket(ticket);
    order.add(ticket);
    orderPrice+=sector.getPrice();
  }
  if (seat.length == 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  if (seat.length > 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String orderAddTicket(@ModelAttribute(value=""String_Node_Str"") int row,@ModelAttribute(value=""String_Node_Str"") Sector sector,@RequestParam(value=""String_Node_Str"") int[] seat,Model model){
  model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  if (order.size() > 0) {
    ArrayList<Ticket> deletingTicket=new ArrayList<>();
    for (    Ticket ord : order) {
      if (ticketService.getTicketById(ord.getId()) == null)       deletingTicket.add(ord);
    }
    if (deletingTicket.size() == 1) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + deletingTicket.get(0).getId() + ""String_Node_Str"");
      order.remove(deletingTicket.get(0));
      orderPrice-=deletingTicket.get(0).getSector().getPrice();
    }
    if (deletingTicket.size() > 1) {
      StringBuilder builder=new StringBuilder(200);
      for (      Ticket tic : deletingTicket) {
        builder.append(tic.getId()).append(""String_Node_Str"");
        order.remove(tic);
        orderPrice-=tic.getSector().getPrice();
      }
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + builder + ""String_Node_Str"");
    }
  }
  for (  int seat1 : seat) {
    Ticket ticket=new Ticket();
    ticket.setSector(sector);
    ticket.setRow(row);
    ticket.setSeat(seat1);
    currentSeat=seat1;
    if (order.size() > 0) {
      for (      Ticket ord : order) {
        if (ord.getSector().equals(sector) && ord.getSeat() == seat1 && ord.getRow() == row)         return ""String_Node_Str"";
      }
    }
    ticketService.addTicket(ticket);
    order.add(ticket);
    orderPrice+=sector.getPrice();
  }
  model.addAttribute(""String_Node_Str"",currentSeat);
  if (seat.length == 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  if (seat.length > 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"";
}",0.9859154929577464
147530,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String orderBuy(Model model){
  if (order.size() == 0) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  if (order.size() > 0) {
    ArrayList<Ticket> deletingTicket=new ArrayList<>();
    for (    Ticket ord : order) {
      if (ticketService.getTicketById(ord.getId()) == null)       deletingTicket.add(ord);
    }
    if (deletingTicket.size() == 1) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + deletingTicket.get(0).getId() + ""String_Node_Str"");
      order.remove(deletingTicket.get(0));
      orderPrice-=deletingTicket.get(0).getSector().getPrice();
    }
    if (deletingTicket.size() > 1) {
      StringBuilder builder=new StringBuilder(200);
      for (      Ticket tic : deletingTicket) {
        builder.append(tic.getId()).append(""String_Node_Str"");
        order.remove(tic);
        orderPrice-=tic.getSector().getPrice();
      }
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + builder + ""String_Node_Str"");
    }
  }
  StringBuilder idBuy=new StringBuilder(200);
  for (  Ticket ticket : order) {
    ticket.setConfirmed(true);
    idBuy.append(ticket.getId()).append(""String_Node_Str"");
    ticketService.addTicket(ticket);
  }
  if (order.size() == 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"" + idBuy + ""String_Node_Str"");
  if (order.size() > 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"" + idBuy + ""String_Node_Str"");
  order.clear();
  orderPrice=0;
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String orderBuy(Model model){
  if (order.size() == 0) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  if (order.size() > 0) {
    ArrayList<Ticket> deletingTicket=new ArrayList<>();
    for (    Ticket ord : order) {
      if (ticketService.getTicketById(ord.getId()) == null)       deletingTicket.add(ord);
    }
    if (deletingTicket.size() == 1) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + deletingTicket.get(0).getId() + ""String_Node_Str"");
      order.remove(deletingTicket.get(0));
      orderPrice-=deletingTicket.get(0).getSector().getPrice();
    }
    if (deletingTicket.size() > 1) {
      StringBuilder builder=new StringBuilder(200);
      for (      Ticket tic : deletingTicket) {
        builder.append(tic.getId()).append(""String_Node_Str"");
        order.remove(tic);
        orderPrice-=tic.getSector().getPrice();
      }
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + builder + ""String_Node_Str"");
    }
  }
  StringBuilder idBuy=new StringBuilder(200);
  for (  Ticket ticket : order) {
    if (ticketService.getTicketById(ticket.getId()).isConfirmed()) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"" + ticket.getId() + ""String_Node_Str"");
      order.remove(ticket);
      orderPrice-=ticket.getSector().getPrice();
      return ""String_Node_Str"";
    }
  }
  for (  Ticket ticket : order) {
    ticket.setConfirmed(true);
    idBuy.append(ticket.getId()).append(""String_Node_Str"");
    ticketService.addTicket(ticket);
  }
  if (order.size() == 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"" + idBuy + ""String_Node_Str"");
  if (order.size() > 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"" + idBuy + ""String_Node_Str"");
  order.clear();
  orderPrice=0;
  return ""String_Node_Str"";
}",0.9165370658372214
147531,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String orderAddTicket(@ModelAttribute(value=""String_Node_Str"") int row,@ModelAttribute(value=""String_Node_Str"") Sector sector,@RequestParam(value=""String_Node_Str"") int seat,Model model){
  Ticket ticket=new Ticket();
  ticket.setSector(sector);
  ticket.setRow(row);
  ticket.setSeat(seat);
  currentSeat=seat;
  if (order.size() > 0) {
    for (    Ticket ord : order) {
      if (ord.getSector().equals(sector) && ord.getSeat() == seat && ord.getRow() == row)       return ""String_Node_Str"";
    }
  }
  ticket.setId(currentOrderId++);
  order.add(ticket);
  orderPrice+=sector.getPrice();
  model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String orderAddTicket(@ModelAttribute(value=""String_Node_Str"") int row,@ModelAttribute(value=""String_Node_Str"") Sector sector,@RequestParam(value=""String_Node_Str"") int seat[],Model model){
  for (  int seat1 : seat) {
    Ticket ticket=new Ticket();
    ticket.setSector(sector);
    ticket.setRow(row);
    ticket.setSeat(seat1);
    currentSeat=seat1;
    if (order.size() > 0) {
      for (      Ticket ord : order) {
        if (ord.getSector().equals(sector) && ord.getSeat() == seat1 && ord.getRow() == row)         return ""String_Node_Str"";
      }
    }
    ticket.setId(currentOrderId++);
    order.add(ticket);
    orderPrice+=sector.getPrice();
  }
  if (seat.length == 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  if (seat.length > 1)   model.addAttribute(""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"";
}",0.8610451306413301
147532,"public List<String> getLegenda(List<Sector> sector){
  List<Double> sortByPrice=new ArrayList<>();
  List<String> legenda=new ArrayList<>();
  StringBuilder buf=new StringBuilder(100);
  int index;
  sortByPrice.add(0,sector.get(0).getPrice());
  for (int i=1; i < sector.size(); i++) {
    if (sector.get(i).getPrice() > sector.get(i - 1).getPrice())     sortByPrice.add(sector.get(i).getPrice());
  }
  for (int j=0; j < sortByPrice.size(); j++) {
    buf.append(sortByPrice.get(j)).append(""String_Node_Str"");
    index=0;
    for (    Sector sector2 : sector) {
      if ((double)sector2.getPrice() == sortByPrice.get(j)) {
        if (index == 0)         buf.append(sector2.getName());
        if (index > 0)         buf.append(""String_Node_Str"").append(sector2.getName());
        index++;
      }
    }
    legenda.add(j,buf.toString());
    buf.delete(0,99);
  }
  return legenda;
}","public List<String> getLegenda(List<Sector> sector){
  List<Double> sortByPrice=new ArrayList<>();
  List<String> legenda=new ArrayList<>();
  StringBuilder buf=new StringBuilder(200);
  int index;
  sortByPrice.add(0,sector.get(0).getPrice());
  for (int i=1; i < sector.size(); i++) {
    if (sector.get(i).getPrice() > sector.get(i - 1).getPrice())     sortByPrice.add(sector.get(i).getPrice());
  }
  for (int j=0; j < sortByPrice.size(); j++) {
    buf.append(sortByPrice.get(j)).append(""String_Node_Str"");
    index=0;
    for (    Sector sector2 : sector) {
      if ((double)sector2.getPrice() == sortByPrice.get(j)) {
        if (index == 0)         buf.append(sector2.getName());
        if (index > 0)         buf.append(""String_Node_Str"").append(sector2.getName());
        index++;
      }
    }
    legenda.add(j,buf.toString());
    buf.delete(0,199);
  }
  return legenda;
}",0.9983136593591906
147533,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String editOperatorSave(@RequestParam(""String_Node_Str"") int id,@RequestParam(""String_Node_Str"") String name,@RequestParam(""String_Node_Str"") String surname,@RequestParam(""String_Node_Str"") String login,@RequestParam(""String_Node_Str"") String password,@RequestParam(""String_Node_Str"") String passwordNew,@RequestParam(""String_Node_Str"") String passwordNewRepeat,@RequestParam(""String_Node_Str"") String description,Model model){
  if (login.length() < 3) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Operator operator=operatorService.getOperatorById(id);
  if (!password.equals(operator.getPassword())) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (passwordNew.length() > 0 && passwordNew.length() < 6) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (passwordNew.length() > 0 && !passwordNew.equals(passwordNewRepeat)) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (passwordNew.length() > 0)   operator.setPassword(passwordNew);
 else   operator.setPassword(password);
  operator.setName(name);
  operator.setSurname(surname);
  operator.setLogin(login);
  operator.setDescription(description);
  List<Operator> operators=operatorService.getAllOperators();
  for (  Operator oper : operators) {
    if (oper.getLogin().equals(operator.getLogin()) && !oper.getId().equals(operator.getId())) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  operatorService.editOperator(operator);
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String editOperatorSave(@RequestParam(""String_Node_Str"") int id,@RequestParam(""String_Node_Str"") String name,@RequestParam(""String_Node_Str"") String surname,@RequestParam(""String_Node_Str"") String login,@RequestParam(""String_Node_Str"") String password,@RequestParam(""String_Node_Str"") String passwordNew,@RequestParam(""String_Node_Str"") String passwordNewRepeat,@RequestParam(""String_Node_Str"") String description,Model model){
  Operator operator=operatorService.getOperatorById(id);
  if (!password.equals(operator.getPassword())) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (passwordNew.length() > 0 && passwordNew.length() < 6) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (passwordNew.length() > 0 && !passwordNew.equals(passwordNewRepeat)) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (passwordNew.length() > 0)   operator.setPassword(passwordNew);
 else   operator.setPassword(password);
  operator.setName(name);
  operator.setSurname(surname);
  operator.setLogin(login);
  operator.setDescription(description);
  List<Operator> operators=operatorService.getAllOperators();
  for (  Operator oper : operators) {
    if (oper.getLogin().equals(operator.getLogin()) && !oper.getId().equals(operator.getId())) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  operatorService.editOperator(operator);
  return ""String_Node_Str"";
}",0.963855421686747
147534,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String operatorAdd(@RequestParam(""String_Node_Str"") String name,@RequestParam(""String_Node_Str"") String surname,@RequestParam(""String_Node_Str"") String login,@RequestParam(""String_Node_Str"") String password,@RequestParam(""String_Node_Str"") String passwordRepeat,@RequestParam(""String_Node_Str"") String description,Model model){
  if (login.length() < 3) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (password.length() < 6) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (!password.equals(passwordRepeat)) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Operator operator=new Operator();
  operator.setName(name);
  operator.setSurname(surname);
  operator.setLogin(login);
  operator.setPassword(password);
  operator.setDescription(description);
  List<Operator> operators=operatorService.getAllOperators();
  for (  Operator oper : operators) {
    if (oper.getLogin().equals(operator.getLogin())) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  operatorService.addOperator(operator);
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public String operatorAdd(@RequestParam(""String_Node_Str"") String name,@RequestParam(""String_Node_Str"") String surname,@RequestParam(""String_Node_Str"") String login,@RequestParam(""String_Node_Str"") String password,@RequestParam(""String_Node_Str"") String passwordRepeat,@RequestParam(""String_Node_Str"") String description,Model model){
  if (!password.equals(passwordRepeat)) {
    model.addAttribute(""String_Node_Str"",""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Operator operator=new Operator();
  operator.setName(name);
  operator.setSurname(surname);
  operator.setLogin(login);
  operator.setPassword(password);
  operator.setDescription(description);
  List<Operator> operators=operatorService.getAllOperators();
  for (  Operator oper : operators) {
    if (oper.getLogin().equals(operator.getLogin())) {
      model.addAttribute(""String_Node_Str"",""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  operatorService.addOperator(operator);
  return ""String_Node_Str"";
}",0.8953341740226987
147535,"private static Response makeURLConnectionRequest(RequestMethod method,String url,String params,String data) throws APIConnectionException, IOException {
  CloseableHttpResponse response=null;
  try {
switch (method) {
case GET:
      response=createGetConnection(url,params);
    break;
case PUT:
  response=createPutConnection(url,params);
break;
case POST:
response=createPostConnection(url,params,data);
break;
case DELETE:
response=createDeleteConnection(url,params);
break;
default :
throw new APIConnectionException(String.format(""String_Node_Str"",method));
}
HttpEntity entity=response.getEntity();
String responseBody=null;
int statusCode=response.getStatusLine().getStatusCode();
Header[] headers;
if (statusCode >= 200 && statusCode < 300) {
responseBody=getResponseBody(entity.getContent());
}
 else if (entity.getContent() != null) {
responseBody=getResponseBody(entity.getContent());
}
headers=response.getAllHeaders();
String responseMessage=EntityUtils.toString(entity);
return new Response(statusCode,responseBody,responseMessage,headers);
}
 catch (IOException e) {
throw new APIConnectionException(String.format(""String_Node_Str"",MAIN_HOST),e);
}
 finally {
if (response != null) {
response.close();
}
}
}","private static Response makeURLConnectionRequest(RequestMethod method,String url,String params,String data) throws APIConnectionException, IOException {
  CloseableHttpResponse response=null;
  try {
switch (method) {
case GET:
      response=createGetConnection(url,params);
    break;
case PUT:
  response=createPutConnection(url,params);
break;
case POST:
response=createPostConnection(url,params,data);
break;
case DELETE:
response=createDeleteConnection(url,params);
break;
default :
throw new APIConnectionException(String.format(""String_Node_Str"",method));
}
HttpEntity entity=response.getEntity();
String responseBody=null;
int statusCode=response.getStatusLine().getStatusCode();
Header[] headers;
if (statusCode >= 200 && statusCode < 300) {
responseBody=getResponseBody(entity.getContent());
}
 else if (entity.getContent() != null) {
responseBody=getResponseBody(entity.getContent());
}
headers=response.getAllHeaders();
String responseMessage=""String_Node_Str"";
return new Response(statusCode,responseBody,responseMessage,headers);
}
 catch (IOException e) {
throw new APIConnectionException(String.format(""String_Node_Str"",MAIN_HOST),e);
}
 finally {
if (response != null) {
response.close();
}
}
}",0.9815195071868584
147536,"/** 
 * @param state the state to set
 */
public void setState(int state){
  this.state=state;
}","/** 
 * @param state the state to set
 */
public void setState(Number state){
  this.state=state;
}",0.953846153846154
147537,"private List<Object> deserializeJSONArray(Object object,JsonArray arr){
  List<Object> elems=new ArrayList<>();
  Iterator<JsonElement> elemIter=arr.iterator();
  while (elemIter.hasNext()) {
    JsonElement elem=elemIter.next();
    elems.add(deserializeJSON(object,(JsonObject)elem));
  }
  return elems;
}","private List<Object> deserializeJSONArray(String key,JsonArray arr) throws IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  List<Object> elems=new ArrayList<>();
  Iterator<JsonElement> elemIter=arr.iterator();
  while (elemIter.hasNext()) {
    JsonElement elem=elemIter.next();
    elems.add(deserializeJSON(newInstance(objectClass.get(key)),(JsonObject)elem));
  }
  return elems;
}",0.7468354430379747
147538,"private Object deserializeJSON(Object object,JsonObject jsonObject){
  for (  Map.Entry<String,JsonElement> entry : jsonObject.entrySet()) {
    String key=entry.getKey();
    JsonElement element=entry.getValue();
    if (element.isJsonNull()) {
      try {
        setFieldValue(object,key,null);
      }
 catch (      NoSuchFieldException ex) {
      }
catch (      IllegalArgumentException|IllegalAccessException ex) {
        Logger.getLogger(DataObjectDeserializer.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else     if (element.isJsonObject()) {
      try {
        if (objectClass.get(key) != null) {
          setFieldValue(object,key,deserializeJSON(newInstance(objectClass.get(key)),element.getAsJsonObject()));
        }
      }
 catch (      NoSuchFieldException ex) {
      }
catch (      IllegalArgumentException|IllegalAccessException|SecurityException|InstantiationException|InvocationTargetException|NoSuchMethodException ex) {
        Logger.getLogger(DataObjectDeserializer.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else     if (element.isJsonPrimitive()) {
      try {
        setFieldValue(object,key,deserializeJsonPrimitive(element.getAsJsonPrimitive()));
      }
 catch (      NoSuchFieldException ex) {
      }
catch (      IllegalArgumentException|IllegalAccessException ex) {
      }
    }
 else     if (element.isJsonArray()) {
      try {
        if (objectClass.get(key) != null) {
          setFieldValue(object,key,deserializeJSONArray(newInstance(objectClass.get(key)),element.getAsJsonArray()));
        }
      }
 catch (      IllegalArgumentException|SecurityException|InstantiationException|IllegalAccessException|InvocationTargetException|NoSuchMethodException ex) {
        Logger.getLogger(DataObjectDeserializer.class.getName()).log(Level.SEVERE,null,ex);
      }
catch (      NoSuchFieldException ex) {
      }
    }
 else {
      System.err.println(""String_Node_Str"" + element + ""String_Node_Str"");
      return null;
    }
  }
  return object;
}","private Object deserializeJSON(Object object,JsonObject jsonObject){
  for (  Map.Entry<String,JsonElement> entry : jsonObject.entrySet()) {
    String key=entry.getKey();
    JsonElement element=entry.getValue();
    if (element.isJsonNull()) {
      try {
        setFieldValue(object,key,null);
      }
 catch (      NoSuchFieldException ex) {
      }
catch (      IllegalArgumentException|IllegalAccessException ex) {
        Logger.getLogger(DataObjectDeserializer.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else     if (element.isJsonObject()) {
      try {
        if (objectClass.get(key) != null) {
          setFieldValue(object,key,deserializeJSON(newInstance(objectClass.get(key)),element.getAsJsonObject()));
        }
      }
 catch (      NoSuchFieldException ex) {
      }
catch (      IllegalArgumentException|IllegalAccessException|SecurityException|InstantiationException|InvocationTargetException|NoSuchMethodException ex) {
        Logger.getLogger(DataObjectDeserializer.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
 else     if (element.isJsonPrimitive()) {
      try {
        setFieldValue(object,key,deserializeJsonPrimitive(element.getAsJsonPrimitive()));
      }
 catch (      NoSuchFieldException ex) {
      }
catch (      IllegalArgumentException|IllegalAccessException ex) {
      }
    }
 else     if (element.isJsonArray()) {
      try {
        if (objectClass.get(key) != null) {
          setFieldValue(object,key,deserializeJSONArray(key,element.getAsJsonArray()));
        }
      }
 catch (      IllegalArgumentException|SecurityException|InstantiationException|IllegalAccessException|InvocationTargetException|NoSuchMethodException ex) {
        Logger.getLogger(DataObjectDeserializer.class.getName()).log(Level.SEVERE,null,ex);
      }
catch (      NoSuchFieldException ex) {
      }
    }
 else {
      System.err.println(""String_Node_Str"" + element + ""String_Node_Str"");
      return null;
    }
  }
  return object;
}",0.992526158445441
147539,"/** 
 * @return the store_route
 */
public Boolean isStore_route(){
  return store_route;
}","/** 
 * @return the store_route
 */
public Boolean isStore_route(){
  return getStore_route();
}",0.962566844919786
147540,"/** 
 * @return the rt
 */
public Boolean isRt(){
  return rt;
}","/** 
 * @return the rt
 */
public Boolean isRt(){
  return getRt();
}",0.9473684210526316
147541,"/** 
 * @return the has_trailer
 */
public Boolean isHas_trailer(){
  return has_trailer;
}","/** 
 * @return the has_trailer
 */
public Boolean isHas_trailer(){
  return getHas_trailer();
}",0.962566844919786
147542,"/** 
 * @return the lock_last
 */
public Boolean isLock_last(){
  return lock_last;
}","/** 
 * @return the lock_last
 */
public Boolean isLock_last(){
  return getLock_last();
}",0.96
147543,"/** 
 * @return the disable_optimization
 */
public Boolean isDisable_optimization(){
  return disable_optimization;
}","/** 
 * @return the disable_optimization
 */
public Boolean isDisable_optimization(){
  return getDisable_optimization();
}",0.970954356846473
147544,"public static void updateForeignKeyRelatedInfo(String oldValue,String newValue,Object[] allForeignKeyAndInfos){
  if (allForeignKeyAndInfos == null || allForeignKeyAndInfos.length == 0) {
    return;
  }
  for (  Object obj : allForeignKeyAndInfos) {
    Element e=(Element)obj;
    String nodeValue=e.getChildNodes().item(0).getNodeValue();
    String source=e.getAttribute(""String_Node_Str"");
    if (source.equals(""String_Node_Str"")) {
      StringBuilder build=new StringBuilder();
      String[] splits=nodeValue.split(FKFilterParser.endSeparator);
      for (      String str : splits) {
        if (!str.trim().isEmpty() && str.startsWith(oldValue)) {
          str=str.replaceFirst(oldValue,newValue);
        }
        build.append(str).append(FKFilterParser.endSeparator);
      }
      e.getChildNodes().item(0).setNodeValue(build.toString());
    }
 else {
      boolean changed=false;
      if (nodeValue.contains(""String_Node_Str"")) {
        changed=nodeValue.startsWith(oldValue + ""String_Node_Str"");
      }
 else {
        changed=nodeValue.startsWith(oldValue);
      }
      if (changed) {
        nodeValue=nodeValue.replaceFirst(oldValue,newValue);
        e.getChildNodes().item(0).setNodeValue(nodeValue);
      }
    }
  }
}","public static void updateForeignKeyRelatedInfo(String oldValue,String newValue,Object[] allForeignKeyAndInfos){
  if (allForeignKeyAndInfos == null || allForeignKeyAndInfos.length == 0) {
    return;
  }
  for (  Object obj : allForeignKeyAndInfos) {
    Element e=(Element)obj;
    String nodeValue=e.getChildNodes().item(0).getNodeValue();
    String source=e.getAttribute(""String_Node_Str"");
    if (source.equals(""String_Node_Str"")) {
      StringBuilder build=new StringBuilder();
      String[] splits=nodeValue.split(FKFilterParser.endSeparator);
      for (      String str : splits) {
        if (!str.trim().isEmpty() && str.startsWith(oldValue)) {
          str=str.replaceFirst(oldValue,newValue);
        }
        build.append(str).append(FKFilterParser.endSeparator);
      }
      e.getChildNodes().item(0).setNodeValue(build.toString());
    }
 else {
      if (nodeValue.equals(oldValue)) {
        e.getChildNodes().item(0).setNodeValue(newValue);
      }
    }
  }
}",0.854586129753915
147545,"private static String getComponentName(Object component){
  if (component instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)component;
    return Messages.Util_34 + decl.getName() + Messages.Util_35;
  }
 else   if (component instanceof XSDParticle) {
    XSDParticle particle=(XSDParticle)component;
    XSDTerm term=particle.getTerm();
    if (term instanceof XSDElementDeclaration) {
      return Messages.Util_36 + ((XSDElementDeclaration)term).getName() + Messages.Util_37;
    }
  }
 else   if (component instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)component;
    return Messages.Util_36 + type.getName() + Messages.Util_37;
  }
 else   if (component instanceof XSDSimpleTypeDefinition) {
    return Messages.Util_38 + ((XSDSimpleTypeDefinition)component).getName() + Messages.Util_39;
  }
 else   if (component instanceof XSDIdentityConstraintDefinition) {
    XSDIdentityConstraintDefinition identify=(XSDIdentityConstraintDefinition)component;
    return Messages.Util_40 + identify.getName() + Messages.Util_41;
  }
 else   if (component instanceof XSDXPathDefinition) {
    XSDXPathDefinition path=(XSDXPathDefinition)component;
    return Messages.Util_42 + path.getValue() + Messages.Util_43;
  }
  return null;
}","public static String getComponentName(Object component){
  if (component instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)component;
    return Messages.Util_34 + decl.getName() + Messages.Util_35;
  }
 else   if (component instanceof XSDParticle) {
    XSDParticle particle=(XSDParticle)component;
    XSDTerm term=particle.getTerm();
    if (term instanceof XSDElementDeclaration) {
      return Messages.Util_36 + ((XSDElementDeclaration)term).getName() + Messages.Util_37;
    }
  }
 else   if (component instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)component;
    return Messages.Util_36 + type.getName() + Messages.Util_37;
  }
 else   if (component instanceof XSDSimpleTypeDefinition) {
    return Messages.Util_38 + ((XSDSimpleTypeDefinition)component).getName() + Messages.Util_39;
  }
 else   if (component instanceof XSDIdentityConstraintDefinition) {
    XSDIdentityConstraintDefinition identify=(XSDIdentityConstraintDefinition)component;
    return Messages.Util_40 + identify.getName() + Messages.Util_41;
  }
 else   if (component instanceof XSDXPathDefinition) {
    XSDXPathDefinition path=(XSDXPathDefinition)component;
    return Messages.Util_42 + path.getValue() + Messages.Util_43;
  }
  return null;
}",0.9958349110185536
147546,"public void setInfos(T[] objs){
  infos.clear();
  for (  T eachInputedObj : objs) {
    if (eachInputedObj == null) {
      continue;
    }
    infos.add(eachInputedObj);
  }
  tvInfos.setInput(infos);
  tvInfos.refresh();
}","public void setInfos(T[] objs){
  infos.clear();
  for (  T eachInputedObj : objs) {
    if (eachInputedObj == null) {
      continue;
    }
    infos.add(eachInputedObj);
  }
  tvInfos.refresh();
}",0.9361702127659576
147547,"/** 
 * random length, random content
 */
private String buildArbitraryString(String candidateChars,int resultMaxLen){
  StringBuilder builder=new StringBuilder();
  if (candidateChars != null) {
    int wholeLen=candidateChars.length();
    if (resultMaxLen < 1) {
      resultMaxLen=10;
    }
    char[] charArray=candidateChars.toCharArray();
    int randomIntValue=new Double(Math.floor(Math.random() * 100)).intValue();
    int size=randomIntValue % resultMaxLen;
    for (int i=0; i < size; i++) {
      int index=new Double(Math.floor(Math.random() * wholeLen)).intValue();
      builder.append(charArray[index]);
    }
  }
  return builder.toString();
}","/** 
 * random length, random content
 */
private String buildArbitraryString(String candidateChars,int resultMaxLen){
  StringBuilder builder=new StringBuilder();
  if (candidateChars != null) {
    int wholeLen=candidateChars.length();
    if (resultMaxLen < 1) {
      resultMaxLen=10;
    }
    char[] charArray=candidateChars.toCharArray();
    int randomIntValue=new Double(Math.floor(Math.random() * 100)).intValue();
    int size=randomIntValue % resultMaxLen + 1;
    for (int i=0; i < size; i++) {
      int index=new Double(Math.floor(Math.random() * wholeLen)).intValue();
      builder.append(charArray[index]);
    }
  }
  return builder.toString();
}",0.9969834087481146
147548,"private ReferenceFileItem findReferenceFileItem(Item item,IFile file){
  EList referenceResources=item.getReferenceResources();
  if (referenceResources != null) {
    for (    Object refObj : referenceResources) {
      ReferenceFileItem fileItem=(ReferenceFileItem)refObj;
      String name=fileItem.getName() + ""String_Node_Str"" + fileItem.getExtension();
      if (name != null && name.equals(file.getName())) {
        return fileItem;
      }
    }
  }
  return null;
}","private ReferenceFileItem findReferenceFileItem(Item item,IFile file){
  EList referenceResources=item.getReferenceResources();
  if (referenceResources != null) {
    for (    Object refObj : referenceResources) {
      ReferenceFileItem fileItem=(ReferenceFileItem)refObj;
      String name=null;
      if (fileItem.getName() != null) {
        name=fileItem.getName() + ""String_Node_Str"" + fileItem.getExtension();
      }
 else {
        URI uri=fileItem.getContent().eResource().getURI();
        name=uri.lastSegment();
      }
      if (name != null && name.equals(file.getName())) {
        return fileItem;
      }
    }
  }
  return null;
}",0.8444444444444444
147549,"@Override public IStatus doAction(){
  try {
    conceptList=WorkbenchClipboard.getWorkbenchClipboard().getConcepts();
    XSDFactory factory=XSDFactory.eINSTANCE;
    if (!conceptList.isEmpty()) {
      int index=0;
      for (Iterator<XSDElementDeclaration> it=conceptList.iterator(); it.hasNext(); ) {
        if (conceptList.get(index).getSchema() != null) {
          typeList=Util.getTypeDefinition(conceptList.get(index).getSchema());
        }
        index++;
        Object concept=it.next();
        if (concept instanceof XSDElementDeclaration) {
          XSDElementDeclaration copy_concept=(XSDElementDeclaration)concept;
          XSDElementDeclaration new_copy_concept=factory.createXSDElementDeclaration();
          new_copy_concept=(XSDElementDeclaration)copy_concept.cloneConcreteComponent(true,false);
          InputDialog id=new InputDialog(page.getSite().getShell(),Messages.XSDPasteConceptAction_CopyElement,Messages.XSDPasteConceptAction_DialogTip,Messages.bind(Messages.XSDPasteConceptAction_CopyOf,copy_concept.getName()),new IInputValidator(){
            public String isValid(            String newText){
              if ((newText == null) || ""String_Node_Str"".equals(newText)) {
                return Messages.XSDPasteConceptAction_NameCannNotbeEmpty;
              }
              EList<XSDElementDeclaration> list=schema.getElementDeclarations();
              for (              XSDElementDeclaration d : list) {
                if (d.getName().equalsIgnoreCase(newText)) {
                  return Messages.XSDPasteConceptAction_EntityAlreadyExists;
                }
              }
              return null;
            }
          }
);
          id.setBlockOnOpen(true);
          int ret=id.open();
          if (ret == Window.CANCEL) {
            return Status.CANCEL_STATUS;
          }
          new_copy_concept.setName(id.getValue());
          for (int i=0; i < new_copy_concept.getIdentityConstraintDefinitions().size(); i++) {
            String name=new_copy_concept.getIdentityConstraintDefinitions().get(i).getName().replaceAll(copy_concept.getName(),new_copy_concept.getName());
            new_copy_concept.getIdentityConstraintDefinitions().get(i).setName(name);
          }
          if (new_copy_concept.getAnonymousTypeDefinition() == null) {
            XSDComplexTypeDefinition copyType=(XSDComplexTypeDefinition)copy_concept.getTypeDefinition().cloneConcreteComponent(true,false);
            String originalName=copyType.getName();
            String typeName=""String_Node_Str"" + originalName;
            copyType.setName(typeName);
            schema.getContents().add(copyType);
            new_copy_concept.setTypeDefinition(copyType);
          }
          new_copy_concept.updateElement();
          schema.getContents().add(new_copy_concept);
          addAnnotationForXSDElementDeclaration(copy_concept,new_copy_concept);
        }
      }
      HashMap<String,XSDTypeDefinition> typeDef=Util.getTypeDefinition(schema);
      for (      XSDTypeDefinition type : copyTypeSet) {
        if (typeDef.containsKey(type.getName())) {
          continue;
        }
        XSDTypeDefinition typedefinitionClone=null;
        if (type instanceof XSDComplexTypeDefinition) {
          typedefinitionClone=factory.createXSDComplexTypeDefinition();
          typedefinitionClone=(XSDComplexTypeDefinition)type.cloneConcreteComponent(true,false);
          schema.getContents().add(typedefinitionClone);
          addAnnotationForComplexType((XSDComplexTypeDefinition)type,(XSDComplexTypeDefinition)typedefinitionClone);
        }
 else         if (type instanceof XSDSimpleTypeDefinition) {
          schema.getContents().add((XSDSimpleTypeDefinition)type.cloneConcreteComponent(true,false));
        }
      }
      schema.getElement();
      page.markDirty();
      page.refresh();
      getOperationHistory();
      WorkbenchClipboard.getWorkbenchClipboard().conceptsReset();
      typeList.clear();
      return Status.OK_STATUS;
    }
 else     if (WorkbenchClipboard.getWorkbenchClipboard().getParticles().size() > 0) {
      copyElements();
      WorkbenchClipboard.getWorkbenchClipboard().particlesReset();
      page.markDirty();
      page.refresh();
      getOperationHistory();
      return Status.OK_STATUS;
    }
 else {
      return Status.CANCEL_STATUS;
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),Messages._Error,Messages.bind(Messages.XSDPasteConceptAction_ErrorMsg1,e.getLocalizedMessage()));
  }
  return Status.OK_STATUS;
}","@Override public IStatus doAction(){
  try {
    conceptList=WorkbenchClipboard.getWorkbenchClipboard().getConcepts();
    XSDFactory factory=XSDFactory.eINSTANCE;
    if (!conceptList.isEmpty()) {
      int index=0;
      for (Iterator<XSDElementDeclaration> it=conceptList.iterator(); it.hasNext(); ) {
        if (conceptList.get(index).getSchema() != null) {
          typeList=Util.getTypeDefinition(conceptList.get(index).getSchema());
        }
        index++;
        Object concept=it.next();
        if (concept instanceof XSDElementDeclaration) {
          XSDElementDeclaration copy_concept=(XSDElementDeclaration)concept;
          XSDElementDeclaration new_copy_concept=factory.createXSDElementDeclaration();
          new_copy_concept=(XSDElementDeclaration)copy_concept.cloneConcreteComponent(true,false);
          InputDialog id=new InputDialog(page.getSite().getShell(),Messages.XSDPasteConceptAction_CopyElement,Messages.XSDPasteConceptAction_DialogTip,Messages.bind(Messages.XSDPasteConceptAction_CopyOf,copy_concept.getName()),new IInputValidator(){
            public String isValid(            String newText){
              if ((newText == null) || ""String_Node_Str"".equals(newText)) {
                return Messages.XSDPasteConceptAction_NameCannNotbeEmpty;
              }
              EList<XSDElementDeclaration> list=schema.getElementDeclarations();
              for (              XSDElementDeclaration d : list) {
                if (d.getName().equalsIgnoreCase(newText)) {
                  return Messages.XSDPasteConceptAction_EntityAlreadyExists;
                }
              }
              return null;
            }
          }
);
          id.setBlockOnOpen(true);
          int ret=id.open();
          if (ret == Window.CANCEL) {
            return Status.CANCEL_STATUS;
          }
          new_copy_concept.setName(id.getValue());
          for (int i=0; i < new_copy_concept.getIdentityConstraintDefinitions().size(); i++) {
            String name=new_copy_concept.getIdentityConstraintDefinitions().get(i).getName().replaceAll(copy_concept.getName(),new_copy_concept.getName());
            new_copy_concept.getIdentityConstraintDefinitions().get(i).setName(name);
          }
          if (new_copy_concept.getAnonymousTypeDefinition() == null) {
            XSDComplexTypeDefinition copyType=(XSDComplexTypeDefinition)copy_concept.getTypeDefinition().cloneConcreteComponent(true,false);
            String originalName=copyType.getName();
            String typeName=""String_Node_Str"" + originalName;
            copyType.setName(typeName);
            schema.getContents().add(copyType);
            new_copy_concept.setTypeDefinition(copyType);
          }
          new_copy_concept.updateElement();
          schema.getContents().add(new_copy_concept);
          addAnnotationForXSDElementDeclaration(copy_concept,new_copy_concept);
        }
      }
      Map<String,XSDTypeDefinition> typeDef=Util.getTypeDefinition(schema);
      for (      XSDTypeDefinition type : copyTypeSet) {
        if (typeDef.containsKey(type.getName())) {
          continue;
        }
        XSDTypeDefinition typedefinitionClone=null;
        if (type instanceof XSDComplexTypeDefinition) {
          typedefinitionClone=factory.createXSDComplexTypeDefinition();
          typedefinitionClone=(XSDComplexTypeDefinition)type.cloneConcreteComponent(true,false);
          schema.getContents().add(typedefinitionClone);
          addAnnotationForComplexType((XSDComplexTypeDefinition)type,(XSDComplexTypeDefinition)typedefinitionClone);
        }
 else         if (type instanceof XSDSimpleTypeDefinition) {
          schema.getContents().add((XSDSimpleTypeDefinition)type.cloneConcreteComponent(true,false));
        }
      }
      schema.getElement();
      page.markDirty();
      page.refresh();
      getOperationHistory();
      WorkbenchClipboard.getWorkbenchClipboard().conceptsReset();
      typeList.clear();
      return Status.OK_STATUS;
    }
 else     if (WorkbenchClipboard.getWorkbenchClipboard().getParticles().size() > 0) {
      copyElements();
      WorkbenchClipboard.getWorkbenchClipboard().particlesReset();
      page.markDirty();
      page.refresh();
      getOperationHistory();
      return Status.OK_STATUS;
    }
 else {
      return Status.CANCEL_STATUS;
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),Messages._Error,Messages.bind(Messages.XSDPasteConceptAction_ErrorMsg1,e.getLocalizedMessage()));
  }
  return Status.OK_STATUS;
}",0.9995635093845482
147550,"private static String getTopElement(XSDElementDeclaration parent,XSDElementDeclaration son,XSDComplexTypeDefinition type){
  List<XSDComplexTypeDefinition> hierarchyComplexTypes=getAllSuperComplexTypes(type);
  for (  XSDComplexTypeDefinition complexType : hierarchyComplexTypes) {
    if (complexType.getContent() instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)complexType.getContent();
      if (particle.getTerm() instanceof XSDModelGroup) {
        XSDModelGroup group=(XSDModelGroup)particle.getTerm();
        EList<XSDParticle> elist=group.getContents();
        for (        XSDParticle pt : elist) {
          if (pt.getContent() instanceof XSDElementDeclaration) {
            XSDElementDeclaration ele=(XSDElementDeclaration)pt.getContent();
            if (ele == son) {
              return ele.getName();
            }
          }
        }
      }
    }
  }
  return ""String_Node_Str"";
}","private static String getTopElement(XSDElementDeclaration parent,XSDElementDeclaration son){
  XSDTypeDefinition type=parent.getTypeDefinition();
  if (!(type instanceof XSDComplexTypeDefinition)) {
    return null;
  }
  List<XSDComplexTypeDefinition> hierarchyComplexTypes=getAllSuperComplexTypes((XSDComplexTypeDefinition)type);
  for (  XSDComplexTypeDefinition complexType : hierarchyComplexTypes) {
    if (complexType.getContent() instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)complexType.getContent();
      if (particle.getTerm() instanceof XSDModelGroup) {
        XSDModelGroup group=(XSDModelGroup)particle.getTerm();
        EList<XSDParticle> elist=group.getContents();
        for (        XSDParticle pt : elist) {
          if (pt.getContent() instanceof XSDElementDeclaration) {
            XSDElementDeclaration ele=(XSDElementDeclaration)pt.getContent();
            if (ele == son) {
              return ele.getName();
            }
          }
        }
      }
    }
  }
  return ""String_Node_Str"";
}",0.9302798982188296
147551,"public static void getForeignKeyofParcle(Set<String> list,XSDAnnotation annotation){
  if (annotation != null) {
    List<Element> annotList=annotation.getApplicationInformation();
    for (int k=0; k < annotList.size(); k++) {
      if (""String_Node_Str"".equals(annotList.get(k).getLocalName())) {
        Node source=annotList.get(k).getAttributes().getNamedItem(""String_Node_Str"");
        if (source == null) {
          continue;
        }
        String appinfoSource=annotList.get(k).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
        if (""String_Node_Str"".equals(appinfoSource)) {
          String path=annotList.get(k).getFirstChild().getNodeValue();
          list.add(getConceptFromPath(path));
        }
      }
    }
  }
}","public static void getForeignKeyofParcle(Set<String> list,XSDAnnotation annotation){
  if (annotation != null) {
    List<Element> annotList=annotation.getApplicationInformation();
    for (int k=0; k < annotList.size(); k++) {
      if (""String_Node_Str"".equals(annotList.get(k).getLocalName())) {
        Node source=annotList.get(k).getAttributes().getNamedItem(""String_Node_Str"");
        if (source == null) {
          continue;
        }
        String appinfoSource=source.getNodeValue();
        if (""String_Node_Str"".equals(appinfoSource)) {
          String path=annotList.get(k).getFirstChild().getNodeValue();
          list.add(getConceptFromPath(path));
        }
      }
    }
  }
}",0.951856946354883
147552,"/** 
 * set the list with foreign concept name of in the element
 * @author ymli
 * @param list
 * @param element
 */
public static void getforeignKeyOfElement(Set<String> list,XSDElementDeclaration element){
  if (element.getAnnotation() != null) {
    getForeignKeyofParcle(list,element.getAnnotation());
  }
  if (element.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
    if (fromcomplexType instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)fromcomplexType;
      if (particle.getTerm() instanceof XSDModelGroup) {
        XSDModelGroup modelGroup=((XSDModelGroup)particle.getTerm());
        EList<XSDParticle> fromlist=modelGroup.getContents();
        for (        XSDParticle el : fromlist.toArray(new XSDParticle[fromlist.size()])) {
          XSDTerm term=el.getTerm();
          if (term instanceof XSDElementDeclaration) {
            if (isReferrenced(element,(XSDElementDeclaration)term)) {
              continue;
            }
            XSDAnnotation annotation=((XSDElementDeclaration)term).getAnnotation();
            if (annotation != null) {
              getForeignKeyofParcle(list,annotation);
            }
            getforeignKeyOfElement(list,(XSDElementDeclaration)term);
          }
        }
      }
    }
  }
}","/** 
 * set the list with foreign concept name of in the element
 * @author ymli
 * @param list
 * @param element
 */
public static void getforeignKeyOfElement(Set<String> list,XSDElementDeclaration element){
  if (element != null) {
    if (element.getAnnotation() != null) {
      getForeignKeyofParcle(list,element.getAnnotation());
    }
    if (element.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
      XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
      if (fromcomplexType instanceof XSDParticle) {
        XSDParticle particle=(XSDParticle)fromcomplexType;
        if (particle.getTerm() instanceof XSDModelGroup) {
          XSDModelGroup modelGroup=((XSDModelGroup)particle.getTerm());
          EList<XSDParticle> fromlist=modelGroup.getContents();
          for (          XSDParticle el : fromlist.toArray(new XSDParticle[fromlist.size()])) {
            XSDTerm term=el.getTerm();
            if (term instanceof XSDElementDeclaration) {
              if (isReferrenced(element,(XSDElementDeclaration)term)) {
                continue;
              }
              getforeignKeyOfElement(list,(XSDElementDeclaration)term);
            }
          }
        }
      }
    }
  }
}",0.8858757062146893
147553,"private static ArrayList<XSDElementDeclaration> findOutAllSonElements(XSDElementDeclaration decl,Set<XSDConcreteComponent> complexTypes){
  ArrayList<XSDElementDeclaration> holder=new ArrayList<XSDElementDeclaration>();
  if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)decl.getTypeDefinition();
    if (complexTypes.contains(type)) {
      return holder;
    }
    if (type.getContent() instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)type.getContent();
      if (particle.getTerm() instanceof XSDModelGroup) {
        XSDModelGroup group=(XSDModelGroup)particle.getTerm();
        EList<XSDParticle> elist=group.getContents();
        boolean addComplexType=false;
        for (        XSDParticle pt : elist) {
          if (pt.getContent() instanceof XSDElementDeclaration) {
            XSDElementDeclaration elem=(XSDElementDeclaration)pt.getContent();
            if (!addComplexType) {
              complexTypes.add(type);
              addComplexType=true;
            }
            if (StringUtils.equals(elem.getName(),decl.getName())) {
              if (ObjectUtils.equals(elem.getType(),decl.getType())) {
                if (StringUtils.equals(elem.getTargetNamespace(),decl.getTargetNamespace())) {
                  continue;
                }
              }
            }
            holder.add(elem);
          }
        }
      }
    }
  }
  return holder;
}","private static List<XSDElementDeclaration> findOutAllSonElements(XSDElementDeclaration decl,Set<XSDConcreteComponent> complexTypes){
  List<XSDElementDeclaration> holder=new ArrayList<XSDElementDeclaration>();
  if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)decl.getTypeDefinition();
    if (complexTypes.contains(type)) {
      return holder;
    }
    if (type.getContent() instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)type.getContent();
      if (particle.getTerm() instanceof XSDModelGroup) {
        XSDModelGroup group=(XSDModelGroup)particle.getTerm();
        EList<XSDParticle> elist=group.getContents();
        boolean addComplexType=false;
        for (        XSDParticle pt : elist) {
          if (pt.getContent() instanceof XSDElementDeclaration) {
            XSDElementDeclaration elem=(XSDElementDeclaration)pt.getContent();
            if (!addComplexType) {
              complexTypes.add(type);
              addComplexType=true;
            }
            if (StringUtils.equals(elem.getName(),decl.getName())) {
              if (ObjectUtils.equals(elem.getType(),decl.getType())) {
                if (StringUtils.equals(elem.getTargetNamespace(),decl.getTargetNamespace())) {
                  continue;
                }
              }
            }
            holder.add(elem);
          }
        }
      }
    }
  }
  return holder;
}",0.9966055668703326
147554,"public static Object[] filterOutDuplicatedElems(XSDNamedComponent[] checkedElements){
  List<XSDNamedComponent> list=new ArrayList<XSDNamedComponent>();
  for (  XSDNamedComponent el : checkedElements) {
    boolean exist=false;
    for (    XSDNamedComponent xsdEl : list) {
      if (xsdEl.getName().equals(el.getName()) && xsdEl.getTargetNamespace() != null && el.getTargetNamespace() != null && xsdEl.getTargetNamespace().equals(el.getTargetNamespace())) {
        exist=true;
        break;
      }
 else       if (xsdEl.getName().equals(el.getName()) && xsdEl.getTargetNamespace() == null && el.getTargetNamespace() == null) {
        exist=true;
        break;
      }
    }
    if (!exist && (el.getTargetNamespace() != null && !el.getTargetNamespace().equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_2001)) || el.getTargetNamespace() == null) {
      list.add(el);
    }
  }
  return list.toArray(new Object[]{});
}","public static Object[] filterOutDuplicatedElems(XSDNamedComponent[] checkedElements){
  List<XSDNamedComponent> list=new ArrayList<XSDNamedComponent>();
  for (  XSDNamedComponent el : checkedElements) {
    boolean exist=false;
    for (    XSDNamedComponent xsdEl : list) {
      if (xsdEl.getName().equals(el.getName()) && xsdEl.getTargetNamespace() != null && el.getTargetNamespace() != null && xsdEl.getTargetNamespace().equals(el.getTargetNamespace())) {
        exist=true;
        break;
      }
 else       if (xsdEl.getName().equals(el.getName()) && xsdEl.getTargetNamespace() == null && el.getTargetNamespace() == null) {
        exist=true;
        break;
      }
    }
    if (!exist && ((el.getTargetNamespace() != null && !el.getTargetNamespace().equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_2001)) || el.getTargetNamespace() == null)) {
      list.add(el);
    }
  }
  return list.toArray(new Object[]{});
}",0.998911860718172
147555,"public static boolean checkConcept(XSDElementDeclaration decl){
  boolean isConcept=false;
  EList l=decl.getIdentityConstraintDefinitions();
  for (Iterator iter=l.iterator(); iter.hasNext(); ) {
    XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
    if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
      isConcept=true;
      break;
    }
  }
  return isConcept;
}","public static boolean checkConcept(XSDElementDeclaration decl){
  boolean isConcept=false;
  EList<XSDIdentityConstraintDefinition> list=decl.getIdentityConstraintDefinitions();
  for (Iterator<XSDIdentityConstraintDefinition> iter=list.iterator(); iter.hasNext(); ) {
    XSDIdentityConstraintDefinition icd=iter.next();
    if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
      isConcept=true;
      break;
    }
  }
  return isConcept;
}",0.7257203842049093
147556,"private static String getComponentName(Object component){
  if (component instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)component;
    return Messages.Util_34 + decl.getName() + Messages.Util_35;
  }
 else   if (component instanceof XSDParticle) {
    XSDParticle particle=(XSDParticle)component;
    XSDTerm term=particle.getTerm();
    if (term instanceof XSDElementDeclaration) {
      return Messages.Util_36 + ((XSDElementDeclaration)term).getName() + Messages.Util_37;
    }
  }
 else   if (component instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)component;
    return type.getName();
  }
 else   if (component instanceof XSDSimpleTypeDefinition) {
    return Messages.Util_38 + ((XSDSimpleTypeDefinition)component).getName() + Messages.Util_39;
  }
 else   if (component instanceof XSDIdentityConstraintDefinition) {
    XSDIdentityConstraintDefinition identify=(XSDIdentityConstraintDefinition)component;
    XSDConcreteComponent c=identify.getContainer();
    return Messages.Util_40 + identify.getName() + Messages.Util_41;
  }
 else   if (component instanceof XSDXPathDefinition) {
    XSDXPathDefinition path=(XSDXPathDefinition)component;
    return Messages.Util_42 + path.getValue() + Messages.Util_43;
  }
  return null;
}","private static String getComponentName(Object component){
  if (component instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)component;
    return Messages.Util_34 + decl.getName() + Messages.Util_35;
  }
 else   if (component instanceof XSDParticle) {
    XSDParticle particle=(XSDParticle)component;
    XSDTerm term=particle.getTerm();
    if (term instanceof XSDElementDeclaration) {
      return Messages.Util_36 + ((XSDElementDeclaration)term).getName() + Messages.Util_37;
    }
  }
 else   if (component instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)component;
    return Messages.Util_36 + type.getName() + Messages.Util_37;
  }
 else   if (component instanceof XSDSimpleTypeDefinition) {
    return Messages.Util_38 + ((XSDSimpleTypeDefinition)component).getName() + Messages.Util_39;
  }
 else   if (component instanceof XSDIdentityConstraintDefinition) {
    XSDIdentityConstraintDefinition identify=(XSDIdentityConstraintDefinition)component;
    return Messages.Util_40 + identify.getName() + Messages.Util_41;
  }
 else   if (component instanceof XSDXPathDefinition) {
    XSDXPathDefinition path=(XSDXPathDefinition)component;
    return Messages.Util_42 + path.getValue() + Messages.Util_43;
  }
  return null;
}",0.9661144578313252
147557,"public static Object getParent(Object son){
  if (!((son instanceof XSDElementDeclaration) || (son instanceof XSDParticle))) {
    return null;
  }
  XSDElementDeclaration elem=null;
  if (son instanceof XSDParticle) {
    elem=(XSDElementDeclaration)((XSDParticle)son).getContent();
  }
 else   if (son instanceof XSDElementDeclaration) {
    elem=(XSDElementDeclaration)son;
  }
  if (elem == null || elem.getSchema() == null) {
    return null;
  }
  EList<XSDSchemaContent> parentList=elem.getSchema().getContents();
  ArrayList<Object> list=new ArrayList<Object>();
  for (  XSDSchemaContent top : parentList) {
    list.clear();
    if (!(top instanceof XSDElementDeclaration) && !(top instanceof XSDComplexTypeDefinition)) {
      continue;
    }
    if (top instanceof XSDElementDeclaration) {
      XSDElementDeclaration decl=(XSDElementDeclaration)top;
      if (decl == son) {
        return decl;
      }
      if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
        XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)decl.getTypeDefinition();
        if (type.getContent() instanceof XSDParticle) {
          XSDParticle particle=(XSDParticle)type.getContent();
          if (particle.getTerm() instanceof XSDModelGroup) {
            XSDModelGroup group=(XSDModelGroup)particle.getTerm();
            EList<XSDParticle> elist=group.getContents();
            for (            XSDParticle pt : elist) {
              if (pt.getContent() instanceof XSDElementDeclaration) {
                if (((XSDElementDeclaration)pt.getContent()) == elem) {
                  return decl;
                }
              }
              Set<XSDConcreteComponent> complexTypes=new HashSet<XSDConcreteComponent>();
              XSDElementDeclaration spec=findOutSpecialSonElement((XSDElementDeclaration)pt.getContent(),elem,complexTypes);
              if (spec != null) {
                return spec;
              }
            }
          }
        }
      }
    }
 else {
      XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)top;
      if (type.getContent() instanceof XSDParticle) {
        XSDParticle particle=(XSDParticle)type.getContent();
        if (particle.getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)particle.getTerm();
          EList<XSDParticle> elist=group.getContents();
          for (          XSDParticle pt : elist) {
            if (pt.getContent() instanceof XSDElementDeclaration) {
              if (((XSDElementDeclaration)pt.getContent()) == elem) {
                return top;
              }
            }
            if (pt.getContent() instanceof XSDElementDeclaration) {
              Set<XSDConcreteComponent> complexTypes=new HashSet<XSDConcreteComponent>();
              XSDElementDeclaration spec=findOutSpecialSonElement((XSDElementDeclaration)pt.getContent(),elem,complexTypes);
              if (spec != null) {
                return spec;
              }
            }
          }
        }
      }
    }
  }
  return null;
}","public static Object getParent(Object son){
  if (!((son instanceof XSDElementDeclaration) || (son instanceof XSDParticle))) {
    return null;
  }
  XSDElementDeclaration elem=null;
  if (son instanceof XSDParticle) {
    elem=(XSDElementDeclaration)((XSDParticle)son).getContent();
  }
 else   if (son instanceof XSDElementDeclaration) {
    elem=(XSDElementDeclaration)son;
  }
  if (elem == null || elem.getSchema() == null) {
    return null;
  }
  EList<XSDSchemaContent> parentList=elem.getSchema().getContents();
  for (  XSDSchemaContent top : parentList) {
    if (!(top instanceof XSDElementDeclaration) && !(top instanceof XSDComplexTypeDefinition)) {
      continue;
    }
    if (top instanceof XSDElementDeclaration) {
      XSDElementDeclaration decl=(XSDElementDeclaration)top;
      if (decl == son) {
        return decl;
      }
      if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
        XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)decl.getTypeDefinition();
        if (type.getContent() instanceof XSDParticle) {
          XSDParticle particle=(XSDParticle)type.getContent();
          if (particle.getTerm() instanceof XSDModelGroup) {
            XSDModelGroup group=(XSDModelGroup)particle.getTerm();
            EList<XSDParticle> elist=group.getContents();
            for (            XSDParticle pt : elist) {
              if (pt.getContent() instanceof XSDElementDeclaration) {
                if (((XSDElementDeclaration)pt.getContent()) == elem) {
                  return decl;
                }
              }
              Set<XSDConcreteComponent> complexTypes=new HashSet<XSDConcreteComponent>();
              XSDElementDeclaration spec=findOutSpecialSonElement((XSDElementDeclaration)pt.getContent(),elem,complexTypes);
              if (spec != null) {
                return spec;
              }
            }
          }
        }
      }
    }
 else {
      XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)top;
      if (type.getContent() instanceof XSDParticle) {
        XSDParticle particle=(XSDParticle)type.getContent();
        if (particle.getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)particle.getTerm();
          EList<XSDParticle> elist=group.getContents();
          for (          XSDParticle pt : elist) {
            if (pt.getContent() instanceof XSDElementDeclaration) {
              if (((XSDElementDeclaration)pt.getContent()) == elem) {
                return top;
              }
            }
            if (pt.getContent() instanceof XSDElementDeclaration) {
              Set<XSDConcreteComponent> complexTypes=new HashSet<XSDConcreteComponent>();
              XSDElementDeclaration spec=findOutSpecialSonElement((XSDElementDeclaration)pt.getContent(),elem,complexTypes);
              if (spec != null) {
                return spec;
              }
            }
          }
        }
      }
    }
  }
  return null;
}",0.9767209843698038
147558,"public static List<XSDComplexTypeDefinition> getComplexTypes(XSDSchema xsd){
  EList<XSDTypeDefinition> contents=xsd.getTypeDefinitions();
  List<XSDComplexTypeDefinition> complexs=new ArrayList<XSDComplexTypeDefinition>();
  for (  XSDTypeDefinition type : contents) {
    if (type instanceof XSDComplexTypeDefinition) {
      boolean exist=false;
      for (      XSDComplexTypeDefinition xsdEl : complexs) {
        if (xsdEl.getName().equals(type.getName()) && xsdEl.getTargetNamespace() != null && type.getTargetNamespace() != null && xsdEl.getTargetNamespace().equals(type.getTargetNamespace())) {
          exist=true;
          break;
        }
 else         if (xsdEl.getTargetNamespace() == null && type.getTargetNamespace() == null && xsdEl.getName().equals(type.getName())) {
          exist=true;
          break;
        }
      }
      if (!exist && (type.getTargetNamespace() != null && !type.getTargetNamespace().equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_2001)) || type.getTargetNamespace() == null) {
        complexs.add((XSDComplexTypeDefinition)type);
      }
    }
  }
  return complexs;
}","public static List<XSDComplexTypeDefinition> getComplexTypes(XSDSchema xsd){
  EList<XSDTypeDefinition> contents=xsd.getTypeDefinitions();
  List<XSDComplexTypeDefinition> complexs=new ArrayList<XSDComplexTypeDefinition>();
  for (  XSDTypeDefinition type : contents) {
    if (type instanceof XSDComplexTypeDefinition) {
      boolean exist=false;
      for (      XSDComplexTypeDefinition xsdEl : complexs) {
        if (xsdEl.getName().equals(type.getName()) && xsdEl.getTargetNamespace() != null && type.getTargetNamespace() != null && xsdEl.getTargetNamespace().equals(type.getTargetNamespace())) {
          exist=true;
          break;
        }
 else         if (xsdEl.getTargetNamespace() == null && type.getTargetNamespace() == null && xsdEl.getName().equals(type.getName())) {
          exist=true;
          break;
        }
      }
      if (!exist && ((type.getTargetNamespace() != null && !type.getTargetNamespace().equals(XSDConstants.SCHEMA_FOR_SCHEMA_URI_2001)) || type.getTargetNamespace() == null)) {
        complexs.add((XSDComplexTypeDefinition)type);
      }
    }
  }
  return complexs;
}",0.9991007194244604
147559,"public static String[] getTextNodes(Node contextNode,String xPath,Node namespaceNode) throws XtentisException {
  String[] results=null;
  ;
  if (xPath.startsWith(""String_Node_Str"") && xPath.endsWith(""String_Node_Str"")) {
    return new String[]{xPath.substring(1,xPath.length() - 1)};
  }
  if (!xPath.matches(""String_Node_Str"")) {
    if (!xPath.endsWith(""String_Node_Str"")) {
      xPath+=""String_Node_Str"";
    }
  }
  try {
    XObject xo=XPathAPI.eval(contextNode,xPath,namespaceNode);
    if (xo.getType() == XObject.CLASS_NODESET) {
      NodeList l=xo.nodelist();
      int len=l.getLength();
      results=new String[len];
      for (int i=0; i < len; i++) {
        Node n=l.item(i);
        results[i]=n.getNodeValue();
      }
    }
 else {
      results=new String[]{xo.toString()};
    }
  }
 catch (  Exception e) {
    String err=Messages.Util_18 + xPath + Messages.Util_19+ e.getClass().getName()+ Messages.Util_20+ e.getLocalizedMessage();
    throw new XtentisException(err);
  }
  return results;
}","public static String[] getTextNodes(Node contextNode,String xPath,Node namespaceNode) throws XtentisException {
  String[] results=null;
  if (xPath.startsWith(""String_Node_Str"") && xPath.endsWith(""String_Node_Str"")) {
    return new String[]{xPath.substring(1,xPath.length() - 1)};
  }
  if (!xPath.matches(""String_Node_Str"")) {
    if (!xPath.endsWith(""String_Node_Str"")) {
      xPath+=""String_Node_Str"";
    }
  }
  try {
    XObject xo=XPathAPI.eval(contextNode,xPath,namespaceNode);
    if (xo.getType() == XObject.CLASS_NODESET) {
      NodeList l=xo.nodelist();
      int len=l.getLength();
      results=new String[len];
      for (int i=0; i < len; i++) {
        Node n=l.item(i);
        results[i]=n.getNodeValue();
      }
    }
 else {
      results=new String[]{xo.toString()};
    }
  }
 catch (  Exception e) {
    String err=Messages.Util_18 + xPath + Messages.Util_19+ e.getClass().getName()+ Messages.Util_20+ e.getLocalizedMessage();
    throw new XtentisException(err);
  }
  return results;
}",0.9980353634577604
147560,"/** 
 * the all the typeDefinition in the schema
 * @author ymli
 * @param schema
 * @return
 */
public static HashMap<String,XSDTypeDefinition> getTypeDefinition(XSDSchema schema){
  HashMap<String,XSDTypeDefinition> map=new HashMap<String,XSDTypeDefinition>();
  for (  XSDSchemaContent content : schema.getContents()) {
    if (content instanceof XSDTypeDefinition) {
      map.put(((XSDTypeDefinition)content).getName(),(XSDTypeDefinition)content);
    }
  }
  return map;
}","/** 
 * the all the typeDefinition in the schema
 * @author ymli
 * @param schema
 * @return
 */
public static Map<String,XSDTypeDefinition> getTypeDefinition(XSDSchema schema){
  HashMap<String,XSDTypeDefinition> map=new HashMap<String,XSDTypeDefinition>();
  for (  XSDSchemaContent content : schema.getContents()) {
    if (content instanceof XSDTypeDefinition) {
      map.put(((XSDTypeDefinition)content).getName(),(XSDTypeDefinition)content);
    }
  }
  return map;
}",0.3340336134453781
147561,"public static List<Object> getTopParent(Object son){
  if (!((son instanceof XSDElementDeclaration) || (son instanceof XSDParticle))) {
    return null;
  }
  XSDElementDeclaration elem=null;
  elem=(XSDElementDeclaration)son;
  if (elem.getSchema() == null) {
    return null;
  }
  EList<XSDSchemaContent> parentList=elem.getSchema().getContents();
  List<Object> list=new ArrayList<Object>();
  for (  XSDSchemaContent top : parentList) {
    list.clear();
    if (!(top instanceof XSDElementDeclaration)) {
      continue;
    }
    if (top instanceof XSDElementDeclaration) {
      XSDElementDeclaration decl=(XSDElementDeclaration)top;
      if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
        String primaryKey=getTopElement(decl,elem,(XSDComplexTypeDefinition)decl.getTypeDefinition());
        if (!""String_Node_Str"".equalsIgnoreCase(primaryKey)) {
          EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
          for (          XSDIdentityConstraintDefinition idty : idtylist) {
            EList<XSDXPathDefinition> fields=idty.getFields();
            for (            XSDXPathDefinition path : fields) {
              if ((path.getValue()).equals(primaryKey)) {
                list.add(idty);
                list.add(path);
                return list;
              }
            }
          }
        }
      }
    }
  }
  return null;
}","public static List<Object> getTopParent(Object son){
  if (!((son instanceof XSDElementDeclaration))) {
    return null;
  }
  XSDElementDeclaration elem=null;
  elem=(XSDElementDeclaration)son;
  if (elem.getSchema() == null) {
    return null;
  }
  EList<XSDSchemaContent> parentList=elem.getSchema().getContents();
  List<Object> list=new ArrayList<Object>();
  for (  XSDSchemaContent top : parentList) {
    list.clear();
    if (!(top instanceof XSDElementDeclaration)) {
      continue;
    }
    XSDElementDeclaration decl=(XSDElementDeclaration)top;
    if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
      String primaryKey=getTopElement(decl,elem);
      if (!""String_Node_Str"".equalsIgnoreCase(primaryKey)) {
        EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
        for (        XSDIdentityConstraintDefinition idty : idtylist) {
          EList<XSDXPathDefinition> fields=idty.getFields();
          for (          XSDXPathDefinition path : fields) {
            if ((path.getValue()).equals(primaryKey)) {
              list.add(idty);
              list.add(path);
              return list;
            }
          }
        }
      }
    }
  }
  return null;
}",0.8954664668415137
147562,"private static XSDElementDeclaration findOutSpecialSonElement(XSDElementDeclaration parent,XSDElementDeclaration son,Set<XSDConcreteComponent> complexTypes){
  ArrayList<XSDElementDeclaration> particleElemList=findOutAllSonElements(parent,complexTypes);
  XSDElementDeclaration specialParent=null;
  for (  XSDElementDeclaration e : particleElemList) {
    if (e == son) {
      specialParent=parent;
    }
  }
  if (specialParent == null) {
    for (    XSDElementDeclaration e : particleElemList) {
      specialParent=findOutSpecialSonElement(e,son,complexTypes);
      if (specialParent != null) {
        break;
      }
    }
  }
  return specialParent;
}","private static XSDElementDeclaration findOutSpecialSonElement(XSDElementDeclaration parent,XSDElementDeclaration son,Set<XSDConcreteComponent> complexTypes){
  List<XSDElementDeclaration> particleElemList=findOutAllSonElements(parent,complexTypes);
  XSDElementDeclaration specialParent=null;
  for (  XSDElementDeclaration e : particleElemList) {
    if (e == son) {
      specialParent=parent;
      break;
    }
  }
  if (specialParent == null) {
    for (    XSDElementDeclaration e : particleElemList) {
      specialParent=findOutSpecialSonElement(e,son,complexTypes);
      if (specialParent != null) {
        break;
      }
    }
  }
  return specialParent;
}",0.9864457831325302
147563,"public static List<String> retrieveXSDComponentPath(Object component,XSDSchema schema,List<String> buffer){
  String name=null;
  String elemType=""String_Node_Str"";
  if (component instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)component;
    name=decl.getName();
    buffer.add(""String_Node_Str"" + name + ""String_Node_Str"");
    if (decl.getContainer() instanceof XSDSchemaImpl) {
      return buffer;
    }
 else {
      return retrieveXSDComponentPath(decl.getContainer(),schema,buffer);
    }
  }
 else   if (component instanceof XSDParticle) {
    XSDParticle particle=(XSDParticle)component;
    XSDTerm term=particle.getTerm();
    if (term instanceof XSDElementDeclaration && !(((XSDElementDeclaration)term).getContainer() instanceof XSDParticle)) {
      String prefix=null;
      String ns=((XSDElementDeclaration)term).getTargetNamespace();
      Iterator<Map.Entry<String,String>> iter=schema.getQNamePrefixToNamespaceMap().entrySet().iterator();
      while (iter.hasNext() && ns != null) {
        Map.Entry<String,String> entry=iter.next();
        if (entry.getValue().equals(ns)) {
          prefix=entry.getKey();
        }
      }
      name=((XSDElementDeclaration)term).getName();
      buffer.add(""String_Node_Str"" + name + ""String_Node_Str""+ (prefix != null ? (prefix + ""String_Node_Str"" + name) : name)+ ""String_Node_Str"");
      return retrieveXSDComponentPath(particle.getContainer(),schema,buffer);
    }
 else {
      retrieveXSDComponentPath(particle.getContainer(),schema,buffer);
    }
  }
 else   if (component instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)component;
    name=type.getName();
    buffer.add(""String_Node_Str"" + (name != null ? ""String_Node_Str"" + name + ""String_Node_Str"" : ""String_Node_Str""));
    if (type.getContainer() instanceof XSDSchemaImpl) {
      return buffer;
    }
    return retrieveXSDComponentPath(type.getContainer(),schema,buffer);
  }
 else   if (component instanceof XSDSimpleTypeDefinition) {
    String typeName=((XSDSimpleTypeDefinition)component).getName();
    buffer.add(""String_Node_Str"" + typeName + ""String_Node_Str"");
    return buffer;
  }
 else   if (component instanceof XSDModelGroup) {
    XSDModelGroup group=(XSDModelGroup)component;
    String literal=group.getCompositor().getLiteral();
    buffer.add(""String_Node_Str"" + literal);
    return retrieveXSDComponentPath(group.getContainer(),schema,buffer);
  }
 else   if (component instanceof XSDIdentityConstraintDefinition) {
    XSDIdentityConstraintDefinition identify=(XSDIdentityConstraintDefinition)component;
    XSDConcreteComponent c=identify.getContainer();
    buffer.add(""String_Node_Str"" + identify.getName() + ""String_Node_Str"");
    return retrieveXSDComponentPath(c,schema,buffer);
  }
 else   if (component instanceof XSDXPathDefinition) {
    XSDXPathDefinition path=(XSDXPathDefinition)component;
    buffer.add(""String_Node_Str"" + path.getValue() + ""String_Node_Str"");
    return retrieveXSDComponentPath(path.getContainer(),schema,buffer);
  }
 else   if (component instanceof XSDAnnotation) {
    XSDAnnotation annon=(XSDAnnotation)component;
    buffer.add(""String_Node_Str"");
    return retrieveXSDComponentPath(annon.getContainer(),schema,buffer);
  }
 else {
    return buffer;
  }
  return buffer;
}","public static List<String> retrieveXSDComponentPath(Object component,XSDSchema schema,List<String> buffer){
  String name=null;
  if (component instanceof XSDElementDeclaration) {
    XSDElementDeclaration decl=(XSDElementDeclaration)component;
    name=decl.getName();
    buffer.add(""String_Node_Str"" + name + ""String_Node_Str"");
    if (decl.getContainer() instanceof XSDSchemaImpl) {
      return buffer;
    }
 else {
      return retrieveXSDComponentPath(decl.getContainer(),schema,buffer);
    }
  }
 else   if (component instanceof XSDParticle) {
    XSDParticle particle=(XSDParticle)component;
    XSDTerm term=particle.getTerm();
    if (term instanceof XSDElementDeclaration && !(((XSDElementDeclaration)term).getContainer() instanceof XSDParticle)) {
      String prefix=null;
      String ns=((XSDElementDeclaration)term).getTargetNamespace();
      Iterator<Map.Entry<String,String>> iter=schema.getQNamePrefixToNamespaceMap().entrySet().iterator();
      while (iter.hasNext() && ns != null) {
        Map.Entry<String,String> entry=iter.next();
        if (entry.getValue().equals(ns)) {
          prefix=entry.getKey();
        }
      }
      name=((XSDElementDeclaration)term).getName();
      buffer.add(""String_Node_Str"" + name + ""String_Node_Str""+ (prefix != null ? (prefix + ""String_Node_Str"" + name) : name)+ ""String_Node_Str"");
      return retrieveXSDComponentPath(particle.getContainer(),schema,buffer);
    }
 else {
      retrieveXSDComponentPath(particle.getContainer(),schema,buffer);
    }
  }
 else   if (component instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)component;
    name=type.getName();
    buffer.add(""String_Node_Str"" + (name != null ? ""String_Node_Str"" + name + ""String_Node_Str"" : ""String_Node_Str""));
    if (type.getContainer() instanceof XSDSchemaImpl) {
      return buffer;
    }
    return retrieveXSDComponentPath(type.getContainer(),schema,buffer);
  }
 else   if (component instanceof XSDSimpleTypeDefinition) {
    String typeName=((XSDSimpleTypeDefinition)component).getName();
    buffer.add(""String_Node_Str"" + typeName + ""String_Node_Str"");
    return buffer;
  }
 else   if (component instanceof XSDModelGroup) {
    XSDModelGroup group=(XSDModelGroup)component;
    String literal=group.getCompositor().getLiteral();
    buffer.add(""String_Node_Str"" + literal);
    return retrieveXSDComponentPath(group.getContainer(),schema,buffer);
  }
 else   if (component instanceof XSDIdentityConstraintDefinition) {
    XSDIdentityConstraintDefinition identify=(XSDIdentityConstraintDefinition)component;
    XSDConcreteComponent c=identify.getContainer();
    buffer.add(""String_Node_Str"" + identify.getName() + ""String_Node_Str"");
    return retrieveXSDComponentPath(c,schema,buffer);
  }
 else   if (component instanceof XSDXPathDefinition) {
    XSDXPathDefinition path=(XSDXPathDefinition)component;
    buffer.add(""String_Node_Str"" + path.getValue() + ""String_Node_Str"");
    return retrieveXSDComponentPath(path.getContainer(),schema,buffer);
  }
 else   if (component instanceof XSDAnnotation) {
    XSDAnnotation annon=(XSDAnnotation)component;
    buffer.add(""String_Node_Str"");
    return retrieveXSDComponentPath(annon.getContainer(),schema,buffer);
  }
 else {
    return buffer;
  }
  return buffer;
}",0.9944635642675446
147564,"public static String getContextPath(String urlPath){
  String contextPath=""String_Node_Str"";
  String path=urlPath;
  int index=path.indexOf(""String_Node_Str"");
  if (index != -1 && index != 0) {
    contextPath=path.substring(0,index);
  }
  return contextPath;
}","public static String getContextPath(String urlPath){
  String contextPath=""String_Node_Str"";
  if (urlPath != null) {
    String path=urlPath;
    int index=path.indexOf(""String_Node_Str"");
    if (index != -1 && index != 0) {
      contextPath=path.substring(0,index);
    }
  }
  return contextPath;
}",0.8606701940035273
147565,"/** 
 * Find elementDeclarations that use any types derived from a named type. <p> This shows one way to query the schema for elementDeclarations and then how to find specific kinds of typeDefinitions. </p>
 * @param objList collection set to search for elemDecls
 * @param localName for the type used
 * @return Boolean indicate any XSDElementDeclarations is found or not
 */
public static boolean findElementsUsingType(ArrayList<Object> objList,XSDTypeDefinition localTypedef){
  for (  Object obj : objList) {
    if (obj == localTypedef) {
      continue;
    }
    if (obj instanceof XSDElementDeclaration || obj instanceof XSDTypeDefinition) {
      XSDTypeDefinition typedef=null;
      if (obj instanceof XSDElementDeclaration) {
        XSDElementDeclaration elem=(XSDElementDeclaration)obj;
        if (elem.getAnonymousTypeDefinition() != null) {
          typedef=elem.getAnonymousTypeDefinition();
        }
 else         if (elem.getTypeDefinition() != null) {
          typedef=elem.getTypeDefinition();
        }
 else {
          continue;
        }
      }
 else {
        typedef=(XSDTypeDefinition)obj;
      }
      if (typedef instanceof XSDComplexTypeDefinition) {
        XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)typedef;
        if (localTypedef.getName().equals(type.getName()) && (localTypedef instanceof XSDComplexTypeDefinition)) {
          return true;
        }
        if (type.getContent() instanceof XSDParticle) {
          XSDParticle particle=(XSDParticle)type.getContent();
          if (particle.getTerm() instanceof XSDModelGroup) {
            XSDModelGroup group=(XSDModelGroup)particle.getTerm();
            EList<XSDParticle> elist=group.getContents();
            for (            XSDParticle pt : elist) {
              if (pt.getContent() instanceof XSDElementDeclaration) {
                XSDTypeDefinition typeDef=((XSDElementDeclaration)pt.getContent()).getTypeDefinition();
                if (typeDef != null && typeDef.getName() != null) {
                  if ((localTypedef.getName().equals(typeDef.getName()))) {
                    return true;
                  }
                }
              }
            }
          }
        }
      }
 else       if (typedef instanceof XSDSimpleTypeDefinition) {
        XSDSimpleTypeDefinition type=(XSDSimpleTypeDefinition)typedef;
        XSDSimpleTypeDefinition baseType=type.getBaseTypeDefinition();
        if (baseType != null && baseType.getName().equals(localTypedef.getName())) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Find elementDeclarations that use any types derived from a named type. <p> This shows one way to query the schema for elementDeclarations and then how to find specific kinds of typeDefinitions. </p>
 * @param objList collection set to search for elemDecls
 * @param localName for the type used
 * @return Boolean indicate any XSDElementDeclarations is found or not
 */
public static boolean findElementsUsingType(List<Object> objList,XSDTypeDefinition localTypedef){
  for (  Object obj : objList) {
    if (obj == localTypedef) {
      continue;
    }
    if (obj instanceof XSDParticle || obj instanceof XSDElementDeclaration || obj instanceof XSDTypeDefinition) {
      XSDTypeDefinition typedef=null;
      if (obj instanceof XSDParticle) {
        XSDParticle xsdParticle=(XSDParticle)obj;
        if (xsdParticle.getTerm() instanceof XSDElementDeclaration) {
          obj=xsdParticle.getTerm();
        }
      }
      if (obj instanceof XSDElementDeclaration) {
        XSDElementDeclaration elem=(XSDElementDeclaration)obj;
        if (elem.getAnonymousTypeDefinition() != null) {
          typedef=elem.getAnonymousTypeDefinition();
        }
 else         if (elem.getTypeDefinition() != null) {
          typedef=elem.getTypeDefinition();
        }
 else {
          continue;
        }
      }
 else {
        typedef=(XSDTypeDefinition)obj;
      }
      if (typedef instanceof XSDComplexTypeDefinition) {
        XSDComplexTypeDefinition type=(XSDComplexTypeDefinition)typedef;
        if (localTypedef.getName().equals(type.getName()) && (localTypedef instanceof XSDComplexTypeDefinition)) {
          return true;
        }
        if (type.getContent() instanceof XSDParticle) {
          XSDParticle particle=(XSDParticle)type.getContent();
          if (particle.getTerm() instanceof XSDModelGroup) {
            XSDModelGroup group=(XSDModelGroup)particle.getTerm();
            EList<XSDParticle> elist=group.getContents();
            for (            XSDParticle pt : elist) {
              if (pt.getContent() instanceof XSDElementDeclaration) {
                XSDTypeDefinition typeDef=((XSDElementDeclaration)pt.getContent()).getTypeDefinition();
                boolean sameType=(typeDef instanceof XSDComplexTypeDefinition && localTypedef instanceof XSDComplexTypeDefinition) || (typeDef instanceof XSDSimpleTypeDefinition && localTypedef instanceof XSDSimpleTypeDefinition);
                if (typeDef != null && typeDef.getName() != null && sameType) {
                  if ((localTypedef.getName().equals(typeDef.getName()))) {
                    return true;
                  }
                }
              }
            }
          }
        }
      }
 else       if (typedef instanceof XSDSimpleTypeDefinition) {
        XSDSimpleTypeDefinition type=(XSDSimpleTypeDefinition)typedef;
        XSDSimpleTypeDefinition baseType=type.getBaseTypeDefinition();
        if (baseType != null && baseType.getName().equals(localTypedef.getName()) && localTypedef instanceof XSDSimpleTypeDefinition) {
          return true;
        }
      }
    }
  }
  return false;
}",0.7005629838142153
147566,"public static XSDElementDeclaration findReference(String refName,XSDSchema schema){
  EList<XSDElementDeclaration> eDecls=schema.getElementDeclarations();
  if (refName.indexOf(""String_Node_Str"") != -1) {
    refName=refName.substring(0,refName.indexOf(""String_Node_Str""));
  }
  for (  XSDElementDeclaration d : eDecls) {
    if (d.getQName().equals(refName)) {
      return d;
    }
  }
  return null;
}","public static XSDElementDeclaration findReference(String refName,XSDSchema schema){
  if (refName != null && schema != null) {
    EList<XSDElementDeclaration> eDecls=schema.getElementDeclarations();
    if (refName.indexOf(""String_Node_Str"") != -1) {
      refName=refName.substring(0,refName.indexOf(""String_Node_Str""));
    }
    for (    XSDElementDeclaration d : eDecls) {
      if (d.getQName().equals(refName)) {
        return d;
      }
    }
  }
  return null;
}",0.9122006841505133
147567,"public boolean isShownInResultDialog(IRepositoryViewObject viewObj){
  return true;
}","@Override public boolean isShownInResultDialog(IRepositoryViewObject viewObj){
  return true;
}",0.9444444444444444
147568,"public void assertPropertyIsInited(Item item){
}","@Override public void assertPropertyIsInited(Item item){
}",0.9056603773584906
147569,"public boolean doDeployWSObject(TMDMService service,Object wsObj){
  return false;
}","@Override public boolean doDeployWSObject(TMDMService service,Object wsObj){
  return false;
}",0.9438202247191012
147570,"public List<IRepositoryViewObject> getAssociatedObjects(IRepositoryViewObject obj){
  return null;
}","@Override public List<IRepositoryViewObject> getAssociatedObjects(IRepositoryViewObject obj){
  return null;
}",0.9523809523809524
147571,"public Object convert(Item item,MDMServerObject serverObj){
  Object wsObj=Bean2EObjUtil.getInstance().convertFromEObj2Bean(serverObj);
  return wsObj;
}","@Override public Object convert(Item item,MDMServerObject serverObj){
  Object wsObj=Bean2EObjUtil.getInstance().convertFromEObj2Bean(serverObj);
  return wsObj;
}",0.9683544303797468
147572,"protected TMDMService getService(MDMServerDef serverDef) throws XtentisException {
  return RepositoryWebServiceAdapter.getMDMService(serverDef);
}","protected TMDMService getService(MDMServerDef serverDef) throws XtentisException {
  boolean workInUI=UIUtil.isWorkInUI();
  return RepositoryWebServiceAdapter.getMDMService(serverDef,workInUI);
}",0.8571428571428571
147573,"public boolean remove(AbstractDeployCommand cmd) throws XtentisException {
  TMDMService service=getService(cmd.getServerDef());
  return doRemove(service,cmd);
}","@Override public boolean remove(AbstractDeployCommand cmd) throws XtentisException {
  TMDMService service=getService(cmd.getServerDef());
  return doRemove(service,cmd);
}",0.9700598802395208
147574,"public boolean deploy(AbstractDeployCommand cmd) throws XtentisException {
  IRepositoryViewObject viewObj=cmd.getViewObject();
  Item item=viewObj.getProperty().getItem();
  MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
  Object wsObj=convert(item,serverObject);
  TMDMService service=getService(cmd.getServerDef());
  return doDeployWSObject(service,wsObj);
}","@Override public boolean deploy(AbstractDeployCommand cmd) throws XtentisException {
  IRepositoryViewObject viewObj=cmd.getViewObject();
  Item item=viewObj.getProperty().getItem();
  MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
  Object wsObj=convert(item,serverObject);
  TMDMService service=getService(cmd.getServerDef());
  return doDeployWSObject(service,wsObj);
}",0.987468671679198
147575,"@Override protected void doRun(){
  new Thread(new Runnable(){
    @Override public void run(){
      UIJob openJob=new OpenJob();
      if (exAdapter != null) {
        exAdapter.beforeRun(openJob);
      }
      openJob.schedule();
    }
  }
).start();
}","@Override protected void doRun(){
  new Thread(new Runnable(){
    @Override public void run(){
      UIJob openJob=new OpenJob();
      if (exAdapter != null) {
        if (toOpenDatamodel()) {
          exAdapter.beforeRun(openJob);
        }
      }
      openJob.schedule();
    }
    private boolean toOpenDatamodel(){
      boolean toOpenDatamodel=false;
      List<Object> selectedObject=getSelectedObject();
      if (!selectedObject.isEmpty()) {
        Object object=selectedObject.get(0);
        if (object instanceof IRepositoryViewObject) {
          IRepositoryViewObject viewObj=(IRepositoryViewObject)object;
          toOpenDatamodel=viewObj.getRepositoryObjectType() == IServerObjectRepositoryType.TYPE_DATAMODEL;
        }
      }
      return toOpenDatamodel;
    }
  }
).start();
}",0.4834749763928234
147576,"private CommandManager(){
  exAdapter=ExAdapterManager.getAdapter(this,ICommandManagerExAdapter.class);
}","public CommandManager(){
  exAdapter=ExAdapterManager.getAdapter(this,ICommandManagerExAdapter.class);
}",0.9569377990430622
147577,"private void updateEditorInputVersionInfo(IRepositoryViewEditorInput editorInput,IRepositoryViewObject viewObject){
  String version=viewObject.getVersion();
  try {
    if (!factory.isLocalConnectionProvider()) {
      IMDMSVNProviderService service=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
      if (service != null) {
        if (service.isProjectInSvnMode()) {
          String revisionNumStr=service.getCurrentSVNRevision(viewObject);
          if (revisionNumStr != null) {
            revisionNumStr=""String_Node_Str"" + revisionNumStr;
            version+=revisionNumStr;
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  editorInput.setVersion(version);
}","private void updateEditorInputVersionInfo(IRepositoryViewEditorInput editorInput,IRepositoryViewObject viewObject){
  String version=viewObject.getVersion();
  try {
    if (!factory.isLocalConnectionProvider()) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMDMSVNProviderService.class)) {
        IMDMSVNProviderService service=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
        if (service != null && service.isProjectInSvnMode()) {
          String revisionNumStr=service.getCurrentSVNRevision(viewObject);
          if (revisionNumStr != null) {
            revisionNumStr=""String_Node_Str"" + revisionNumStr;
            version+=revisionNumStr;
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  editorInput.setVersion(version);
}",0.9244604316546764
147578,"private IMDMSVNProviderService getSvnProviderService(){
  if (svnProviderService == null) {
    try {
      svnProviderService=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return svnProviderService;
}","private IMDMSVNProviderService getSvnProviderService(){
  if (svnProviderService == null) {
    try {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMDMSVNProviderService.class)) {
        svnProviderService=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return svnProviderService;
}",0.6948717948717948
147579,"private IGITProviderService getGitProviderService(){
  if (gitProviderService == null) {
    try {
      gitProviderService=(IGITProviderService)GlobalServiceRegister.getDefault().getService(IGITProviderService.class);
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return gitProviderService;
}","private IGITProviderService getGitProviderService(){
  if (gitProviderService == null) {
    try {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IGITProviderService.class)) {
        gitProviderService=(IGITProviderService)GlobalServiceRegister.getDefault().getService(IGITProviderService.class);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return gitProviderService;
}",0.8616600790513834
147580,"private void updateEditorInputVersionInfo(IRepositoryViewEditorInput editorInput,IRepositoryViewObject viewObject){
  String version=viewObject.getVersion();
  try {
    if (!factory.isLocalConnectionProvider()) {
      IMDMSVNProviderService service=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
      if (service != null) {
        if (service.isProjectInSvnMode()) {
          String revisionNumStr=service.getCurrentSVNRevision(viewObject);
          if (revisionNumStr != null) {
            revisionNumStr=""String_Node_Str"" + revisionNumStr;
            version+=revisionNumStr;
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  editorInput.setVersion(version);
}","private void updateEditorInputVersionInfo(IRepositoryViewEditorInput editorInput,IRepositoryViewObject viewObject){
  String version=viewObject.getVersion();
  try {
    if (!factory.isLocalConnectionProvider()) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMDMSVNProviderService.class)) {
        IMDMSVNProviderService service=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
        if (service != null && service.isProjectInSvnMode()) {
          String revisionNumStr=service.getCurrentSVNRevision(viewObject);
          if (revisionNumStr != null) {
            revisionNumStr=""String_Node_Str"" + revisionNumStr;
            version+=revisionNumStr;
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  editorInput.setVersion(version);
}",0.9244604316546764
147581,"private IMDMSVNProviderService getSvnProviderService(){
  if (svnProviderService == null) {
    try {
      svnProviderService=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return svnProviderService;
}","private IMDMSVNProviderService getSvnProviderService(){
  if (svnProviderService == null) {
    try {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMDMSVNProviderService.class)) {
        svnProviderService=(IMDMSVNProviderService)GlobalServiceRegister.getDefault().getService(IMDMSVNProviderService.class);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return svnProviderService;
}",0.6948717948717948
147582,"private IGITProviderService getGitProviderService(){
  if (gitProviderService == null) {
    try {
      gitProviderService=(IGITProviderService)GlobalServiceRegister.getDefault().getService(IGITProviderService.class);
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return gitProviderService;
}","private IGITProviderService getGitProviderService(){
  if (gitProviderService == null) {
    try {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IGITProviderService.class)) {
        gitProviderService=(IGITProviderService)GlobalServiceRegister.getDefault().getService(IGITProviderService.class);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return gitProviderService;
}",0.8616600790513834
147583,"private static String getModelContent(IRepositoryViewObject viewObj){
  Item item=viewObj.getProperty().getItem();
  IFile file=RepositoryResourceUtil.findReferenceFile(IServerObjectRepositoryType.TYPE_DATAMODEL,item,""String_Node_Str"");
  try {
    byte[] bytes=IOUtils.toByteArray(file.getContents());
    String xsd=new String(bytes);
    return xsd;
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
  return null;
}","private static String getModelContent(IRepositoryViewObject viewObj){
  Item item=viewObj.getProperty().getItem();
  IFile file=RepositoryResourceUtil.findReferenceFile(IServerObjectRepositoryType.TYPE_DATAMODEL,item,""String_Node_Str"");
  InputStream xsdFileStream=null;
  try {
    xsdFileStream=file.getContents();
    byte[] bytes=IOUtils.toByteArray(xsdFileStream);
    String xsd=new String(bytes);
    return xsd;
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (xsdFileStream != null) {
      try {
        xsdFileStream.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
  return null;
}",0.7603833865814696
147584,"private static String getModelContent(IRepositoryViewObject viewObj){
  Item item=viewObj.getProperty().getItem();
  IFile file=RepositoryResourceUtil.findReferenceFile(IServerObjectRepositoryType.TYPE_DATAMODEL,item,""String_Node_Str"");
  try {
    byte[] bytes=IOUtils.toByteArray(file.getContents());
    String xsd=new String(bytes);
    return xsd;
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
  return null;
}","private static String getModelContent(IRepositoryViewObject viewObj){
  Item item=viewObj.getProperty().getItem();
  IFile file=RepositoryResourceUtil.findReferenceFile(IServerObjectRepositoryType.TYPE_DATAMODEL,item,""String_Node_Str"");
  InputStream xsdFileStream=null;
  try {
    xsdFileStream=file.getContents();
    byte[] bytes=IOUtils.toByteArray(xsdFileStream);
    String xsd=new String(bytes);
    return xsd;
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (xsdFileStream != null) {
      try {
        xsdFileStream.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
  return null;
}",0.7603833865814696
147585,"/** 
 * DOC hbhong RemoveFromRepositoryAction constructor comment.
 * @param text
 */
public RemoveFromRepositoryAction(){
  super(Messages.RemoveFromRepositoryAction_removeFromRepository);
  setImageDescriptor(ImageCache.getImage(EImage.DELETE_OBJ.getPath()));
}","/** 
 * DOC hbhong RemoveFromRepositoryAction constructor comment.
 * @param text
 */
public RemoveFromRepositoryAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageCache.getImage(EImage.DELETE_OBJ.getPath()));
}",0.8542094455852156
147586,"@Override protected void doRun(){
  List<Object> selectedObject=getSelectedObject();
  int size=selectedObject.size();
  if (size > 0) {
    if (hasOpenedObject(selectedObject)) {
      MessageDialog.openWarning(getShell(),Messages.RemoveFromRepositoryAction_Title,Messages.RemoveFromRepositoryAction_CanNotDeleteFolder);
      return;
    }
    if (!MessageDialog.openConfirm(getShell(),Messages.RemoveFromRepositoryAction_Title,Messages.bind(Messages.RemoveFromRepositoryAction_confirm,size,size > 1 ? Messages.RemoveFromRepositoryAction_instances : Messages.RemoveFromRepositoryAction_instance))) {
      return;
    }
  }
  selectedObject.removeAll(lockedObjs);
  if (!handleDeleteEvent(selectedObject)) {
    return;
  }
  for (  Object obj : selectedObject) {
    if (obj instanceof IRepositoryViewObject) {
      IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
      if (isServerObject(viewObj)) {
        removeServerObject(viewObj);
      }
 else       if (RepositoryResourceUtil.hasContainerItem(obj,FolderType.FOLDER_LITERAL)) {
        removeFolderObject(viewObj);
      }
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  commonViewer.refresh();
  removed.clear();
  if (lockedObjs.size() > 0) {
    MessageDialog.openError(getShell(),Messages.AbstractRepositoryAction_lockedObjTitle,getAlertMsg());
  }
}","@Override protected void doRun(){
  List<Object> selectedObject=getSelectedObject();
  int size=selectedObject.size();
  if (size > 0) {
    if (hasOpenedObject(selectedObject)) {
      warn();
      return;
    }
    if (!confirm(size)) {
      return;
    }
  }
  selectedObject.removeAll(lockedObjs);
  if (!handleDeleteEvent(selectedObject)) {
    return;
  }
  for (  Object obj : selectedObject) {
    if (obj instanceof IRepositoryViewObject) {
      IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
      if (isServerObject(viewObj)) {
        removeServerObject(viewObj);
      }
 else       if (RepositoryResourceUtil.hasContainerItem(obj,FolderType.FOLDER_LITERAL)) {
        removeFolderObject(viewObj);
      }
    }
  }
  try {
    factory.saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  commonViewer.refresh();
  removed.clear();
  if (lockedObjs.size() > 0) {
    MessageDialog.openError(getShell(),Messages.AbstractRepositoryAction_lockedObjTitle,getAlertMsg());
  }
}",0.8226950354609929
147587,"/** 
 * DOC hbhong RemoveFromRepositoryAction constructor comment.
 * @param text
 */
public RenameObjectAction(){
  super(Messages.RenameObjectAction_rename);
  setImageDescriptor(ImageCache.getImage(EImage.RENAME.getPath()));
}","/** 
 * DOC hbhong RemoveFromRepositoryAction constructor comment.
 * @param text
 */
public RenameObjectAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageCache.getImage(EImage.RENAME.getPath()));
}",0.8888888888888888
147588,"@Before public void setUp() throws Exception {
  ResourceBundle rb=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb);
  PowerMockito.mockStatic(JFaceResources.class);
  ImageRegistry registry=mock(ImageRegistry.class);
  when(JFaceResources.getImageRegistry()).thenReturn(registry);
  PowerMockito.mockStatic(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"");
  IRepositoryResourceUtilExAdapter mockAdapter=PowerMockito.mock(IRepositoryResourceUtilExAdapter.class);
  PowerMockito.mockStatic(ExAdapterManager.class);
  PowerMockito.when(ExAdapterManager.getAdapter(new RepositoryResourceUtil(),IRepositoryResourceUtilExAdapter.class)).thenReturn(mockAdapter);
  PowerMockito.mockStatic(ImageCache.class);
  ImageDescriptor imgDesc=mock(ImageDescriptor.class);
  when(ImageCache.getImage(anyString())).thenReturn(imgDesc);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntimePlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntimePlugin);
  RepositoryContext contextMock=mock(RepositoryContext.class);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager pmMock=mock(ProjectManager.class);
  projectM=mock(Project.class);
  User userMock=mock(User.class);
  when(userMock.getLogin()).thenReturn(""String_Node_Str"");
  when(projectM.getAuthor()).thenReturn(userMock);
  when(pmMock.getCurrentProject()).thenReturn(projectM);
  when(ProjectManager.getInstance()).thenReturn(pmMock);
  when(contextMock.getUser()).thenReturn(userMock);
  repositoryFactory=mock(ProxyRepositoryFactory.class);
  RecycleBinNodeConfiguration recycleBinNodeConfiguration=mock(RecycleBinNodeConfiguration.class);
  PowerMockito.whenNew(RecycleBinNodeConfiguration.class).withNoArguments().thenReturn(recycleBinNodeConfiguration);
  stub(method(ProxyRepositoryFactory.class,""String_Node_Str"")).toReturn(repositoryFactory);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(repositoryFactory);
  IRepositoryFactory repositoryFactoryMock=mock(IRepositoryFactory.class);
  when(repositoryFactory.getRepositoryFactoryFromProvider()).thenReturn(repositoryFactoryMock);
  XmiResourceManager xmiResourceManager=mock(XmiResourceManager.class);
  when(repositoryFactoryMock.getResourceManager()).thenReturn(xmiResourceManager);
  PowerMockito.mockStatic(RepositoryNodeConfigurationManager.class);
  IRepositoryNodeConfiguration rncMock=mock(IRepositoryNodeConfiguration.class);
  when(RepositoryNodeConfigurationManager.getConfiguration((Item)anyObject())).thenReturn(rncMock);
  IRepositoryNodeResourceProvider resourceProviderM=mock(IRepositoryNodeResourceProvider.class);
  when(rncMock.getResourceProvider()).thenReturn(resourceProviderM);
  when(resourceProviderM.needSaveReferenceFile()).thenReturn(true);
  when(repositoryFactory.getRepositoryContext()).thenReturn(contextMock);
  when(repositoryFactory.isEditableAndLockIfPossible((Item)anyObject())).thenReturn(true);
}","@Before public void setUp() throws Exception {
  ResourceBundle rb=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb);
  PowerMockito.mockStatic(JFaceResources.class);
  ImageRegistry registry=mock(ImageRegistry.class);
  when(JFaceResources.getImageRegistry()).thenReturn(registry);
  PowerMockito.mockStatic(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"");
  IRepositoryResourceUtilExAdapter mockAdapter=PowerMockito.mock(IRepositoryResourceUtilExAdapter.class);
  PowerMockito.mockStatic(ExAdapterManager.class);
  PowerMockito.when(ExAdapterManager.getAdapter(new RepositoryResourceUtil(),IRepositoryResourceUtilExAdapter.class)).thenReturn(mockAdapter);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntimePlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntimePlugin);
  RepositoryContext contextMock=mock(RepositoryContext.class);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager pmMock=mock(ProjectManager.class);
  projectM=mock(Project.class);
  User userMock=mock(User.class);
  when(userMock.getLogin()).thenReturn(""String_Node_Str"");
  when(projectM.getAuthor()).thenReturn(userMock);
  when(pmMock.getCurrentProject()).thenReturn(projectM);
  when(ProjectManager.getInstance()).thenReturn(pmMock);
  when(contextMock.getUser()).thenReturn(userMock);
  repositoryFactory=mock(ProxyRepositoryFactory.class);
  RecycleBinNodeConfiguration recycleBinNodeConfiguration=mock(RecycleBinNodeConfiguration.class);
  PowerMockito.whenNew(RecycleBinNodeConfiguration.class).withNoArguments().thenReturn(recycleBinNodeConfiguration);
  stub(method(ProxyRepositoryFactory.class,""String_Node_Str"")).toReturn(repositoryFactory);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(repositoryFactory);
  IRepositoryFactory repositoryFactoryMock=mock(IRepositoryFactory.class);
  when(repositoryFactory.getRepositoryFactoryFromProvider()).thenReturn(repositoryFactoryMock);
  XmiResourceManager xmiResourceManager=mock(XmiResourceManager.class);
  when(repositoryFactoryMock.getResourceManager()).thenReturn(xmiResourceManager);
  PowerMockito.mockStatic(RepositoryNodeConfigurationManager.class);
  IRepositoryNodeConfiguration rncMock=mock(IRepositoryNodeConfiguration.class);
  when(RepositoryNodeConfigurationManager.getConfiguration((Item)anyObject())).thenReturn(rncMock);
  IRepositoryNodeResourceProvider resourceProviderM=mock(IRepositoryNodeResourceProvider.class);
  when(rncMock.getResourceProvider()).thenReturn(resourceProviderM);
  when(resourceProviderM.needSaveReferenceFile()).thenReturn(true);
  when(repositoryFactory.getRepositoryContext()).thenReturn(contextMock);
  when(repositoryFactory.isEditableAndLockIfPossible((Item)anyObject())).thenReturn(true);
}",0.9729639519359146
147589,"@Test public void doRunTest() throws Exception {
  RemoveFromRepositoryAction removeAction=new RemoveFromRepositoryAction();
  RemoveFromRepositoryAction removeActionM=spy(removeAction);
  CommonViewer commonViewerM=mock(CommonViewer.class);
  Whitebox.setInternalState(removeActionM,""String_Node_Str"",commonViewerM);
  IRepositoryViewObject objectRVO=mock(IRepositoryViewObject.class);
  MDMServerObjectItem mdmItemM=mock(MDMServerObjectItem.class);
  Property propertyM=mock(Property.class);
  when(objectRVO.getProperty()).thenReturn(propertyM);
  when(propertyM.getItem()).thenReturn(mdmItemM);
  FolderRepositoryObject folderRO=mock(FolderRepositoryObject.class);
  Property foldePropertyM=mock(Property.class);
  ContainerItem containerItem=mock(ContainerItem.class);
  when(folderRO.getProperty()).thenReturn(foldePropertyM);
  when(foldePropertyM.getItem()).thenReturn(containerItem);
  ItemState itemState=mock(ItemState.class);
  when(containerItem.getState()).thenReturn(itemState);
  when(itemState.getPath()).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(RepositoryNodeProviderRegistryReader.class);
  RepositoryNodeProviderRegistryReader reader=mock(RepositoryNodeProviderRegistryReader.class);
  PowerMockito.when(RepositoryNodeProviderRegistryReader.getInstance()).thenReturn(reader);
  ERepositoryObjectType typeM=ERepositoryObjectType.PROCESS;
  when(containerItem.getRepObjType()).thenReturn(typeM);
  MDMServerObject mdmServerObjectM=mock(MDMServerObject.class);
  when(mdmItemM.getMDMServerObject()).thenReturn(mdmServerObjectM);
  Shell shellM=mock(Shell.class);
  Control controlM=mock(Control.class);
  when(commonViewerM.getControl()).thenReturn(controlM);
  when(controlM.getShell()).thenReturn(shellM);
  List<Object> selectedObjects=new ArrayList<Object>();
  selectedObjects.add(objectRVO);
  selectedObjects.add(folderRO);
  when(removeActionM.getSelectedObject()).thenReturn(selectedObjects);
  Whitebox.setInternalState(removeActionM,""String_Node_Str"",Collections.EMPTY_LIST);
  PowerMockito.mockStatic(MessageDialog.class);
  when(MessageDialog.openConfirm((Shell)anyObject(),anyString(),anyString())).thenReturn(true);
  PowerMockito.mockStatic(RepositoryResourceUtil.class);
  when(RepositoryResourceUtil.isOpenedInEditor((IRepositoryViewObject)anyObject())).thenReturn(null);
  when(RepositoryResourceUtil.hasContainerItem(anyObject(),eq(FolderType.FOLDER_LITERAL))).thenReturn(true);
  PowerMockito.mockStatic(ContainerCacheService.class);
  FolderItem folderItemM=mock(FolderItem.class);
  when(repositoryFactory.getFolderItem(eq(projectM),eq(typeM),(IPath)anyObject())).thenReturn(folderItemM);
  when(folderItemM.getState()).thenReturn(itemState);
  removeActionM.doRun();
}","@Test public void doRunTest() throws Exception {
  PowerMockito.mockStatic(MDMWorbenchPlugin.class);
  when(MDMWorbenchPlugin.getImageDescriptor(anyString())).thenReturn(mock(ImageDescriptor.class));
  RemoveFromRepositoryAction removeAction=new RemoveFromRepositoryAction();
  RemoveFromRepositoryAction removeActionM=PowerMockito.spy(removeAction);
  CommonViewer commonViewerM=mock(CommonViewer.class);
  Whitebox.setInternalState(removeActionM,""String_Node_Str"",commonViewerM);
  PowerMockito.doReturn(true).when(removeActionM,""String_Node_Str"",2);
  PowerMockito.doNothing().when(removeActionM,""String_Node_Str"");
  IRepositoryViewObject objectRVO=mock(IRepositoryViewObject.class);
  MDMServerObjectItem mdmItemM=mock(MDMServerObjectItem.class);
  Property propertyM=mock(Property.class);
  when(objectRVO.getProperty()).thenReturn(propertyM);
  when(propertyM.getItem()).thenReturn(mdmItemM);
  FolderRepositoryObject folderRO=mock(FolderRepositoryObject.class);
  Property foldePropertyM=mock(Property.class);
  ContainerItem containerItem=mock(ContainerItem.class);
  when(folderRO.getProperty()).thenReturn(foldePropertyM);
  when(foldePropertyM.getItem()).thenReturn(containerItem);
  ItemState itemState=mock(ItemState.class);
  when(containerItem.getState()).thenReturn(itemState);
  when(itemState.getPath()).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(RepositoryNodeProviderRegistryReader.class);
  RepositoryNodeProviderRegistryReader reader=mock(RepositoryNodeProviderRegistryReader.class);
  PowerMockito.when(RepositoryNodeProviderRegistryReader.getInstance()).thenReturn(reader);
  ERepositoryObjectType typeM=ERepositoryObjectType.PROCESS;
  when(containerItem.getRepObjType()).thenReturn(typeM);
  MDMServerObject mdmServerObjectM=mock(MDMServerObject.class);
  when(mdmItemM.getMDMServerObject()).thenReturn(mdmServerObjectM);
  Shell shellM=mock(Shell.class);
  Control controlM=mock(Control.class);
  when(commonViewerM.getControl()).thenReturn(controlM);
  when(controlM.getShell()).thenReturn(shellM);
  List<Object> selectedObjects=new ArrayList<Object>();
  selectedObjects.add(objectRVO);
  selectedObjects.add(folderRO);
  when(removeActionM.getSelectedObject()).thenReturn(selectedObjects);
  Whitebox.setInternalState(removeActionM,""String_Node_Str"",Collections.EMPTY_LIST);
  PowerMockito.mockStatic(MessageDialog.class);
  when(MessageDialog.openConfirm((Shell)anyObject(),anyString(),anyString())).thenReturn(true);
  PowerMockito.mockStatic(RepositoryResourceUtil.class);
  when(RepositoryResourceUtil.isOpenedInEditor((IRepositoryViewObject)anyObject())).thenReturn(null);
  when(RepositoryResourceUtil.hasContainerItem(anyObject(),eq(FolderType.FOLDER_LITERAL))).thenReturn(true);
  PowerMockito.mockStatic(ContainerCacheService.class);
  FolderItem folderItemM=mock(FolderItem.class);
  when(repositoryFactory.getFolderItem(eq(projectM),eq(typeM),(IPath)anyObject())).thenReturn(folderItemM);
  when(folderItemM.getState()).thenReturn(itemState);
  removeActionM.doRun();
}",0.947661276299774
147590,"@Before public void setUp() throws Exception {
  ResourceBundle rb=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb);
  PowerMockito.mockStatic(JFaceResources.class);
  ImageRegistry registry=mock(ImageRegistry.class);
  when(JFaceResources.getImageRegistry()).thenReturn(registry);
  PowerMockito.mockStatic(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"");
  IRepositoryResourceUtilExAdapter mockAdapter=PowerMockito.mock(IRepositoryResourceUtilExAdapter.class);
  PowerMockito.mockStatic(ExAdapterManager.class);
  PowerMockito.when(ExAdapterManager.getAdapter(new RepositoryResourceUtil(),IRepositoryResourceUtilExAdapter.class)).thenReturn(mockAdapter);
  PowerMockito.mockStatic(ImageCache.class);
  ImageDescriptor imgDesc=mock(ImageDescriptor.class);
  when(ImageCache.getImage(anyString())).thenReturn(imgDesc);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntimePlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntimePlugin);
  RepositoryContext contextMock=mock(RepositoryContext.class);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager pmMock=mock(ProjectManager.class);
  projectM=mock(Project.class);
  User userMock=mock(User.class);
  when(userMock.getLogin()).thenReturn(""String_Node_Str"");
  when(projectM.getAuthor()).thenReturn(userMock);
  when(pmMock.getCurrentProject()).thenReturn(projectM);
  when(ProjectManager.getInstance()).thenReturn(pmMock);
  when(contextMock.getUser()).thenReturn(userMock);
  repositoryFactory=mock(IProxyRepositoryFactory.class);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(repositoryFactory);
  RecycleBinNodeConfiguration recycleBinNodeConfiguration=mock(RecycleBinNodeConfiguration.class);
  PowerMockito.whenNew(RecycleBinNodeConfiguration.class).withNoArguments().thenReturn(recycleBinNodeConfiguration);
  PowerMockito.mockStatic(ProxyRepositoryFactory.class);
  ProxyRepositoryFactory proxyRepositoryFactory=mock(ProxyRepositoryFactory.class);
  when(ProxyRepositoryFactory.getInstance()).thenReturn(proxyRepositoryFactory);
  IRepositoryFactory repositoryFactoryMock=mock(IRepositoryFactory.class);
  when(proxyRepositoryFactory.getRepositoryFactoryFromProvider()).thenReturn(repositoryFactoryMock);
  XmiResourceManager xmiResourceManager=mock(XmiResourceManager.class);
  when(repositoryFactoryMock.getResourceManager()).thenReturn(xmiResourceManager);
  PowerMockito.mockStatic(RepositoryNodeConfigurationManager.class);
  IRepositoryNodeConfiguration rncMock=mock(IRepositoryNodeConfiguration.class);
  when(RepositoryNodeConfigurationManager.getConfiguration((Item)anyObject())).thenReturn(rncMock);
  resourceProviderM=mock(IRepositoryNodeResourceProvider.class);
  when(rncMock.getResourceProvider()).thenReturn(resourceProviderM);
  when(repositoryFactory.isEditableAndLockIfPossible((Item)anyObject())).thenReturn(true);
}","@Before public void setUp() throws Exception {
  ResourceBundle rb=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb);
  PowerMockito.mockStatic(JFaceResources.class);
  ImageRegistry registry=mock(ImageRegistry.class);
  when(JFaceResources.getImageRegistry()).thenReturn(registry);
  PowerMockito.mockStatic(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"");
  IRepositoryResourceUtilExAdapter mockAdapter=PowerMockito.mock(IRepositoryResourceUtilExAdapter.class);
  PowerMockito.mockStatic(ExAdapterManager.class);
  PowerMockito.when(ExAdapterManager.getAdapter(new RepositoryResourceUtil(),IRepositoryResourceUtilExAdapter.class)).thenReturn(mockAdapter);
  PowerMockito.mockStatic(MDMWorbenchPlugin.class);
  when(MDMWorbenchPlugin.getImageDescriptor(anyString())).thenReturn(mock(ImageDescriptor.class));
  PowerMockito.mockStatic(ImageCache.class);
  ImageDescriptor imgDesc=mock(ImageDescriptor.class);
  when(ImageCache.getImage(anyString())).thenReturn(imgDesc);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntimePlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntimePlugin);
  RepositoryContext contextMock=mock(RepositoryContext.class);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager pmMock=mock(ProjectManager.class);
  projectM=mock(Project.class);
  User userMock=mock(User.class);
  when(userMock.getLogin()).thenReturn(""String_Node_Str"");
  when(projectM.getAuthor()).thenReturn(userMock);
  when(pmMock.getCurrentProject()).thenReturn(projectM);
  when(ProjectManager.getInstance()).thenReturn(pmMock);
  when(contextMock.getUser()).thenReturn(userMock);
  repositoryFactory=mock(IProxyRepositoryFactory.class);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(repositoryFactory);
  RecycleBinNodeConfiguration recycleBinNodeConfiguration=mock(RecycleBinNodeConfiguration.class);
  PowerMockito.whenNew(RecycleBinNodeConfiguration.class).withNoArguments().thenReturn(recycleBinNodeConfiguration);
  PowerMockito.mockStatic(ProxyRepositoryFactory.class);
  ProxyRepositoryFactory proxyRepositoryFactory=mock(ProxyRepositoryFactory.class);
  when(ProxyRepositoryFactory.getInstance()).thenReturn(proxyRepositoryFactory);
  IRepositoryFactory repositoryFactoryMock=mock(IRepositoryFactory.class);
  when(proxyRepositoryFactory.getRepositoryFactoryFromProvider()).thenReturn(repositoryFactoryMock);
  XmiResourceManager xmiResourceManager=mock(XmiResourceManager.class);
  when(repositoryFactoryMock.getResourceManager()).thenReturn(xmiResourceManager);
  PowerMockito.mockStatic(RepositoryNodeConfigurationManager.class);
  IRepositoryNodeConfiguration rncMock=mock(IRepositoryNodeConfiguration.class);
  when(RepositoryNodeConfigurationManager.getConfiguration((Item)anyObject())).thenReturn(rncMock);
  resourceProviderM=mock(IRepositoryNodeResourceProvider.class);
  when(rncMock.getResourceProvider()).thenReturn(resourceProviderM);
  when(repositoryFactory.isEditableAndLockIfPossible((Item)anyObject())).thenReturn(true);
}",0.9757585487237116
147591,"@Test public void doRunTest() throws Exception {
  RenameObjectAction renameAction=new RenameObjectAction();
  RenameObjectAction renameActionM=spy(renameAction);
  CommonViewer commonViewerM=mock(CommonViewer.class);
  Whitebox.setInternalState(renameActionM,""String_Node_Str"",commonViewerM);
  IRepositoryViewObject objectRVO=mock(IRepositoryViewObject.class);
  IRepositoryViewObject parentRVO=mock(IRepositoryViewObject.class);
  MDMServerObjectItem mdmItemM=mock(MDMServerObjectItem.class);
  ContainerItem parentItemM=mock(ContainerItem.class);
  Property propertyM=mock(Property.class);
  Property parentPropertyM=mock(Property.class);
  MDMServerObject mdmServerObjectM=mock(MDMServerObject.class);
  ItemState itemStateM=mock(ItemState.class);
  when(objectRVO.getProperty()).thenReturn(propertyM);
  when(propertyM.getItem()).thenReturn(mdmItemM);
  when(mdmItemM.getMDMServerObject()).thenReturn(mdmServerObjectM);
  when(mdmItemM.getState()).thenReturn(itemStateM);
  when(itemStateM.getPath()).thenReturn(""String_Node_Str"");
  when(parentRVO.getProperty()).thenReturn(parentPropertyM);
  when(parentPropertyM.getItem()).thenReturn(parentItemM);
  PowerMockito.mockStatic(RepositoryNodeProviderRegistryReader.class);
  RepositoryNodeProviderRegistryReader reader=mock(RepositoryNodeProviderRegistryReader.class);
  PowerMockito.when(RepositoryNodeProviderRegistryReader.getInstance()).thenReturn(reader);
  ERepositoryObjectType typeM=ERepositoryObjectType.PROCESS;
  when(resourceProviderM.getRepositoryObjectType(mdmItemM)).thenReturn(typeM);
  PowerMockito.mockStatic(ContainerCacheService.class);
  when(ContainerCacheService.get(eq(typeM),eq(""String_Node_Str""))).thenReturn(parentRVO);
  Shell shellM=mock(Shell.class);
  Control controlM=mock(Control.class);
  when(commonViewerM.getControl()).thenReturn(controlM);
  when(controlM.getShell()).thenReturn(shellM);
  List<Object> selectedObjects=new ArrayList<Object>();
  selectedObjects.add(objectRVO);
  when(renameActionM.getSelectedObject()).thenReturn(selectedObjects);
  InputDialog inputDialogM=mock(InputDialog.class);
  PowerMockito.whenNew(InputDialog.class).withArguments(eq(shellM),anyString(),anyString(),anyString(),anyObject()).thenReturn(inputDialogM);
  when(inputDialogM.open()).thenReturn(IDialogConstants.OK_ID);
  when(inputDialogM.getValue()).thenReturn(""String_Node_Str"");
  renameActionM.doRun();
}","@Test public void doRunTest() throws Exception {
  RenameObjectAction renameAction=new RenameObjectAction();
  RenameObjectAction renameActionM=PowerMockito.spy(renameAction);
  CommonViewer commonViewerM=mock(CommonViewer.class);
  Whitebox.setInternalState(renameActionM,""String_Node_Str"",commonViewerM);
  IRepositoryViewObject objectRVO=mock(IRepositoryViewObject.class);
  IRepositoryViewObject parentRVO=mock(IRepositoryViewObject.class);
  MDMServerObjectItem mdmItemM=mock(MDMServerObjectItem.class);
  ContainerItem parentItemM=mock(ContainerItem.class);
  Property propertyM=mock(Property.class);
  Property parentPropertyM=mock(Property.class);
  String name=""String_Node_Str"";
  MDMServerObject mdmServerObjectM=mock(MDMServerObject.class);
  when(mdmServerObjectM.getName()).thenReturn(name);
  ItemState itemStateM=mock(ItemState.class);
  when(objectRVO.getProperty()).thenReturn(propertyM);
  when(propertyM.getItem()).thenReturn(mdmItemM);
  when(mdmItemM.getMDMServerObject()).thenReturn(mdmServerObjectM);
  when(mdmItemM.getState()).thenReturn(itemStateM);
  when(itemStateM.getPath()).thenReturn(""String_Node_Str"");
  when(parentRVO.getProperty()).thenReturn(parentPropertyM);
  when(parentPropertyM.getItem()).thenReturn(parentItemM);
  PowerMockito.mockStatic(RepositoryNodeProviderRegistryReader.class);
  RepositoryNodeProviderRegistryReader reader=mock(RepositoryNodeProviderRegistryReader.class);
  PowerMockito.when(RepositoryNodeProviderRegistryReader.getInstance()).thenReturn(reader);
  ERepositoryObjectType typeM=ERepositoryObjectType.PROCESS;
  when(resourceProviderM.getRepositoryObjectType(mdmItemM)).thenReturn(typeM);
  PowerMockito.doReturn(""String_Node_Str"").when(renameActionM,""String_Node_Str"",typeM,parentItemM,name);
  PowerMockito.mockStatic(ContainerCacheService.class);
  when(ContainerCacheService.get(eq(typeM),eq(""String_Node_Str""))).thenReturn(parentRVO);
  Shell shellM=mock(Shell.class);
  Control controlM=mock(Control.class);
  when(commonViewerM.getControl()).thenReturn(controlM);
  when(controlM.getShell()).thenReturn(shellM);
  List<Object> selectedObjects=new ArrayList<Object>();
  selectedObjects.add(objectRVO);
  when(renameActionM.getSelectedObject()).thenReturn(selectedObjects);
  InputDialog inputDialogM=mock(InputDialog.class);
  PowerMockito.whenNew(InputDialog.class).withArguments(eq(shellM),anyString(),anyString(),anyString(),anyObject()).thenReturn(inputDialogM);
  when(inputDialogM.open()).thenReturn(IDialogConstants.OK_ID);
  when(inputDialogM.getValue()).thenReturn(""String_Node_Str"");
  renameActionM.doRun();
}",0.7752808988764045
147592,"@Test public void testCreateDeletedFolderViewObject() throws Exception {
  ERepositoryObjectType type=null;
  String path=""String_Node_Str"";
  String folderName=""String_Node_Str"";
  List<IRepositoryViewObject> children=new ArrayList<IRepositoryViewObject>();
  List<IRepositoryViewObject> spychildren=PowerMockito.spy(children);
  FolderRepositoryObject mockParentFolderObject=mock(FolderRepositoryObject.class);
  assertEquals(folderName,mockParentFolderObject.getClass().getName());
  when(mockParentFolderObject.getChildren()).thenReturn(spychildren);
  PowerMockito.mockStatic(ContainerCacheService.class);
  PowerMockito.doNothing().when(ContainerCacheService.class,""String_Node_Str"",Mockito.any(IRepositoryViewObject.class));
  FolderRepositoryObject deletedFolderViewObject=RepositoryResourceUtil.createDeletedFolderViewObject(type,path,folderName,mockParentFolderObject);
  assertNotNull(deletedFolderViewObject);
}","@Test public void testCreateDeletedFolderViewObject() throws Exception {
  ERepositoryObjectType type=null;
  String path=""String_Node_Str"";
  String folderName=""String_Node_Str"";
  List<IRepositoryViewObject> children=new ArrayList<IRepositoryViewObject>();
  List<IRepositoryViewObject> spychildren=PowerMockito.spy(children);
  StubFolderRepositoryObject mockParentFolderObject=mock(StubFolderRepositoryObject.class);
  when(mockParentFolderObject.getChildren()).thenReturn(spychildren);
  PowerMockito.mockStatic(ContainerCacheService.class);
  PowerMockito.doNothing().when(ContainerCacheService.class,""String_Node_Str"",Mockito.any(IRepositoryViewObject.class));
  FolderRepositoryObject deletedFolderViewObject=RepositoryResourceUtil.createDeletedFolderViewObject(type,path,folderName,mockParentFolderObject);
  assertNotNull(deletedFolderViewObject);
}",0.924803591470258
147593,"public static String uploadFileToAppServer(String URL,String localFilename,String username,String password) throws XtentisException {
  HttpUriRequest request=createUploadFileToServerRequest(URL,username,localFilename);
  DefaultHttpClient client=wrapAuthClient(URL,username,password);
  HttpContext preemptiveContext=getPreemptiveContext(URL);
  String errMessage=Messages.Util_21 + ""String_Node_Str"" + Messages.Util_22+ ""String_Node_Str"";
  String content=getTextContent(client,request,preemptiveContext,errMessage);
  if (null == content) {
    throw new XtentisException(""String_Node_Str"");
  }
  return content;
}","public static String uploadFileToAppServer(String URL,String localFilename,String username,String password) throws XtentisException {
  HttpUriRequest request=createUploadFileToServerRequest(URL,username,localFilename);
  DefaultHttpClient client=wrapAuthClient(URL,username,password);
  HttpContext preemptiveContext=getPreemptiveContext(URL);
  authenticate(username,password,request,preemptiveContext);
  String errMessage=Messages.Util_21 + ""String_Node_Str"" + Messages.Util_22+ ""String_Node_Str"";
  String content=getTextContent(client,request,preemptiveContext,errMessage);
  if (null == content) {
    throw new XtentisException(""String_Node_Str"");
  }
  return content;
}",0.9529683885890516
147594,"public static String uploadImageFile(String URL,String localFilename,String filename,String imageCatalog,String username,String password,HashMap<String,String> picturePathMap) throws XtentisException {
  HttpUriRequest request=createUploadRequest(URL,username,localFilename,filename,imageCatalog,picturePathMap);
  DefaultHttpClient client=wrapAuthClient(URL,username,password);
  HttpContext preemptiveContext=getPreemptiveContext(URL);
  String errMessage=Messages.Util_25 + ""String_Node_Str"" + Messages.Util_26+ ""String_Node_Str"";
  String content=getTextContent(client,request,preemptiveContext,errMessage);
  if (null == content) {
    throw new XtentisException(""String_Node_Str"");
  }
  if (content.contains(""String_Node_Str"")) {
    String returnValue=content.substring(content.indexOf(""String_Node_Str""),content.indexOf(""String_Node_Str"") - 1);
    if (picturePathMap != null) {
      File file=new File(localFilename);
      String fileName1=file.getName();
      picturePathMap.put(fileName1,returnValue);
    }
    return returnValue;
  }
 else {
    return ""String_Node_Str"";
  }
}","public static String uploadImageFile(String URL,String localFilename,String filename,String imageCatalog,String username,String password,HashMap<String,String> picturePathMap) throws XtentisException {
  HttpUriRequest request=createUploadRequest(URL,username,localFilename,filename,imageCatalog,picturePathMap);
  DefaultHttpClient client=wrapAuthClient(URL,username,password);
  HttpContext preemptiveContext=getPreemptiveContext(URL);
  authenticate(username,password,request,preemptiveContext);
  String errMessage=Messages.Util_25 + ""String_Node_Str"" + Messages.Util_26+ ""String_Node_Str"";
  String content=getTextContent(client,request,preemptiveContext,errMessage);
  if (null == content) {
    throw new XtentisException(""String_Node_Str"");
  }
  if (content.contains(""String_Node_Str"")) {
    String returnValue=content.substring(content.indexOf(""String_Node_Str""),content.indexOf(""String_Node_Str"") - 1);
    if (picturePathMap != null) {
      File file=new File(localFilename);
      String fileName1=file.getName();
      picturePathMap.put(fileName1,returnValue);
    }
    return returnValue;
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9728768341485104
147595,"/** 
 * Test for: getFolder(ERepositoryObjectType type, Item item)
 */
@Test public void testGetFolder2Args() throws PersistenceException {
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceModelUtils.class);
  IProject mockIProject=mock(IProject.class);
  when(ResourceModelUtils.getProject(mockProject)).thenReturn(mockIProject);
  Item mockItem=mock(Item.class);
  ItemState mockState=mock(ItemState.class);
  when(mockItem.getState()).thenReturn(mockState);
  when(mockState.getPath()).thenReturn(""String_Node_Str"");
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(""String_Node_Str"");
  IFolder mockFolder=mock(IFolder.class);
  when(mockIProject.getFolder(Mockito.anyString())).thenReturn(mockFolder);
  IFolder folder=RepositoryResourceUtil.getFolder(mockType,mockItem);
  assertEquals(mockFolder,folder);
}","/** 
 * Test for: getFolder(ERepositoryObjectType type, Item item)
 */
@Test public void testGetFolder2Args() throws PersistenceException {
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceUtils.class);
  IProject mockIProject=mock(IProject.class);
  when(ResourceUtils.getProject(mockProject)).thenReturn(mockIProject);
  Item mockItem=mock(Item.class);
  ItemState mockState=mock(ItemState.class);
  when(mockItem.getState()).thenReturn(mockState);
  when(mockState.getPath()).thenReturn(""String_Node_Str"");
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(""String_Node_Str"");
  IFolder mockFolder=mock(IFolder.class);
  when(mockIProject.getFolder(Mockito.anyString())).thenReturn(mockFolder);
  IFolder folder=RepositoryResourceUtil.getFolder(mockType,mockItem);
  assertEquals(mockFolder,folder);
}",0.995967741935484
147596,"/** 
 * Test for: findViewObjects(ERepositoryObjectType type, Item parentItem, boolean useRepositoryViewObject, boolean withDeleted)
 */
@Test public void testFindViewObjects4Args() throws Exception {
  boolean withDeleted=false;
  boolean useRepositoryViewObject=true;
  String path=""String_Node_Str"";
  String parentPath=""String_Node_Str"";
  Item mockParentItem=mock(Item.class);
  ItemState mockItemState=mock(ItemState.class);
  when(mockParentItem.getState()).thenReturn(mockItemState);
  when(mockItemState.getPath()).thenReturn(parentPath);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  IProject mockIProject=mock(IProject.class);
  PowerMockito.mockStatic(ResourceModelUtils.class);
  when(ResourceModelUtils.getProject(mockProject)).thenReturn(mockIProject);
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(path);
  IFolder mockFolder=mock(IFolder.class);
  when(mockIProject.getFolder(any(IPath.class))).thenReturn(mockFolder);
  List<IRepositoryViewObject> viewObjects=new ArrayList<IRepositoryViewObject>();
  viewObjects.add(mock(IRepositoryViewObject.class));
  PowerMockito.mockStatic(RepositoryResourceUtil.class);
  when(RepositoryResourceUtil.findViewObjects(mockType,mockParentItem,mockFolder,useRepositoryViewObject,withDeleted)).thenReturn(viewObjects);
  PowerMockito.doCallRealMethod().when(RepositoryResourceUtil.class,""String_Node_Str"",mockType,mockParentItem,useRepositoryViewObject,withDeleted);
  List<IRepositoryViewObject> result=RepositoryResourceUtil.findViewObjects(mockType,mockParentItem,useRepositoryViewObject,withDeleted);
  assertEquals(1,result.size());
  assertSame(viewObjects,result);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(""String_Node_Str"");
  result=RepositoryResourceUtil.findViewObjects(mockType,mockParentItem,useRepositoryViewObject,withDeleted);
  assertEquals(0,result.size());
  assertEquals(Collections.EMPTY_LIST,result);
}","/** 
 * Test for: findViewObjects(ERepositoryObjectType type, Item parentItem, boolean useRepositoryViewObject, boolean withDeleted)
 */
@Test public void testFindViewObjects4Args() throws Exception {
  boolean withDeleted=false;
  boolean useRepositoryViewObject=true;
  String path=""String_Node_Str"";
  String parentPath=""String_Node_Str"";
  Item mockParentItem=mock(Item.class);
  ItemState mockItemState=mock(ItemState.class);
  when(mockParentItem.getState()).thenReturn(mockItemState);
  when(mockItemState.getPath()).thenReturn(parentPath);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  IProject mockIProject=mock(IProject.class);
  PowerMockito.mockStatic(ResourceUtils.class);
  when(ResourceUtils.getProject(mockProject)).thenReturn(mockIProject);
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(path);
  IFolder mockFolder=mock(IFolder.class);
  when(mockIProject.getFolder(any(IPath.class))).thenReturn(mockFolder);
  List<IRepositoryViewObject> viewObjects=new ArrayList<IRepositoryViewObject>();
  viewObjects.add(mock(IRepositoryViewObject.class));
  PowerMockito.mockStatic(RepositoryResourceUtil.class);
  when(RepositoryResourceUtil.findViewObjects(mockType,mockParentItem,mockFolder,useRepositoryViewObject,withDeleted)).thenReturn(viewObjects);
  PowerMockito.doCallRealMethod().when(RepositoryResourceUtil.class,""String_Node_Str"",mockType,mockParentItem,useRepositoryViewObject,withDeleted);
  List<IRepositoryViewObject> result=RepositoryResourceUtil.findViewObjects(mockType,mockParentItem,useRepositoryViewObject,withDeleted);
  assertEquals(1,result.size());
  assertSame(viewObjects,result);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(""String_Node_Str"");
  result=RepositoryResourceUtil.findViewObjects(mockType,mockParentItem,useRepositoryViewObject,withDeleted);
  assertEquals(0,result.size());
  assertEquals(Collections.EMPTY_LIST,result);
}",0.9978156400174748
147597,"@Test public void testCreateFolderViewObject() throws Exception {
  boolean isSystem=false;
  String folderName=""String_Node_Str"";
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  Project mockProject=mock(Project.class);
  IProject mockIProject=mock(IProject.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  IFolder mockFolder=mock(IFolder.class);
  PowerMockito.mockStatic(ResourceModelUtils.class);
  when(ResourceModelUtils.getProject(mockProject)).thenReturn(mockIProject);
  when(mockIProject.getFolder(Mockito.anyString())).thenReturn(mockFolder);
  when(mockFolder.exists()).thenReturn(false);
  PowerMockito.mockStatic(ResourceUtils.class);
  PowerMockito.doNothing().when(ResourceUtils.class,""String_Node_Str"",mockFolder);
  ItemState mockItemState=mock(ItemState.class);
  when(mockItemState.getPath()).thenReturn(""String_Node_Str"");
  Item mockParentItem=mock(Item.class);
  when(mockParentItem.getState()).thenReturn(mockItemState);
  String processFolder=""String_Node_Str"";
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  when(mockType.getType()).thenReturn(""String_Node_Str"");
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(processFolder);
  IRepositoryViewObject folderViewObject=RepositoryResourceUtil.createFolderViewObject(mockType,folderName,mockParentItem,isSystem);
  assertNotNull(folderViewObject);
  PowerMockito.verifyStatic(Mockito.times(1));
  ResourceUtils.createFolder(mockFolder);
}","@Test public void testCreateFolderViewObject() throws Exception {
  boolean isSystem=false;
  String folderName=""String_Node_Str"";
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  Project mockProject=mock(Project.class);
  IProject mockIProject=mock(IProject.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  IFolder mockFolder=mock(IFolder.class);
  PowerMockito.mockStatic(ResourceUtils.class);
  when(ResourceUtils.getProject(mockProject)).thenReturn(mockIProject);
  when(mockIProject.getFolder(Mockito.anyString())).thenReturn(mockFolder);
  when(mockFolder.exists()).thenReturn(false);
  PowerMockito.doNothing().when(ResourceUtils.class,""String_Node_Str"",mockFolder);
  ItemState mockItemState=mock(ItemState.class);
  when(mockItemState.getPath()).thenReturn(""String_Node_Str"");
  Item mockParentItem=mock(Item.class);
  when(mockParentItem.getState()).thenReturn(mockItemState);
  String processFolder=""String_Node_Str"";
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  when(mockType.getType()).thenReturn(""String_Node_Str"");
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(processFolder);
  PowerMockito.mockStatic(ProxyRepositoryFactory.class);
  ProxyRepositoryFactory proxyRepositoryFactory=mock(ProxyRepositoryFactory.class);
  when(ProxyRepositoryFactory.getInstance()).thenReturn(proxyRepositoryFactory);
  Folder mockTalendFolder=mock(Folder.class);
  when(proxyRepositoryFactory.createFolder(any(Project.class),any(ERepositoryObjectType.class),any(IPath.class),anyString())).thenReturn(mockTalendFolder);
  IRepositoryViewObject folderViewObject=RepositoryResourceUtil.createFolderViewObject(mockType,folderName,mockParentItem,isSystem);
  assertNotNull(folderViewObject);
  verify(proxyRepositoryFactory,times(1)).createFolder(any(Project.class),any(ERepositoryObjectType.class),any(IPath.class),anyString());
}",0.6987060998151571
147598,"/** 
 * Test for: getFolder(ERepositoryObjectType type)
 */
@Test public void testGetFolder() throws Exception {
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  Project mockProject=mock(Project.class);
  IProject mockIProject=mock(IProject.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceModelUtils.class);
  when(ResourceModelUtils.getProject(Mockito.any(Project.class))).thenReturn(mockIProject);
  PowerMockito.mockStatic(ResourceUtils.class);
  IFolder mockFolder=mock(IFolder.class);
  String processFolder=""String_Node_Str"";
  when(ResourceUtils.getFolder(mockIProject,processFolder,true)).thenReturn(mockFolder);
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(processFolder);
  IFolder folder=RepositoryResourceUtil.getFolder(mockType);
  assertEquals(mockFolder,folder);
}","/** 
 * Test for: getFolder(ERepositoryObjectType type)
 */
@Test public void testGetFolder() throws Exception {
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceUtils.class);
  IProject mockIProject=mock(IProject.class);
  when(ResourceUtils.getProject(mockProject)).thenReturn(mockIProject);
  IFolder mockFolder=mock(IFolder.class);
  String processFolder=""String_Node_Str"";
  when(ResourceUtils.getFolder(mockIProject,processFolder,true)).thenReturn(mockFolder);
  PowerMockito.mockStatic(ERepositoryObjectType.class);
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  when(ERepositoryObjectType.getFolderName(mockType)).thenReturn(processFolder);
  IFolder folder=RepositoryResourceUtil.getFolder(mockType);
  assertEquals(mockFolder,folder);
}",0.875626423690205
147599,"@Test public void testCopyOSFileTOProject() throws Exception {
  String path=""String_Node_Str"";
  IFolder desFolder=mock(IFolder.class);
  String version=VersionUtils.DEFAULT_VERSION;
  boolean overwrite=true;
  IProgressMonitor progressMonitor=mock(IProgressMonitor.class);
  IProject mockIProject=mock(IProject.class);
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,null,desFolder,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(false);
    }
  }
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,path,null,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(false);
    }
  }
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceModelUtils.class);
  when(ResourceModelUtils.getProject(mockProject)).thenReturn(mockIProject);
  String invalidPath=""String_Node_Str"";
  when(desFolder.exists()).thenReturn(true);
  IFile copyOfFile=RepositoryResourceUtil.copyOSFileTOProject(null,invalidPath,desFolder,version,overwrite,progressMonitor);
  PowerMockito.verifyStatic(Mockito.atLeastOnce());
  ProjectManager.getInstance();
  ResourceModelUtils.getProject(Mockito.any(Project.class));
  assertNull(copyOfFile);
  String validPath=""String_Node_Str"";
  File file=new File(validPath);
  File spyFile=Mockito.spy(file);
  PowerMockito.whenNew(File.class).withArguments(validPath).thenReturn(spyFile);
  when(spyFile.exists()).thenReturn(true);
  when(spyFile.getName()).thenReturn(""String_Node_Str"");
  IFile mockIFile=mock(IFile.class);
  when(desFolder.getFile(Mockito.anyString())).thenReturn(mockIFile);
  IPath mockIPath=mock(IPath.class);
  when(mockIFile.getLocation()).thenReturn(mockIPath);
  when(mockIPath.toOSString()).thenReturn(validPath);
  FileInputStream inputStream=mock(FileInputStream.class);
  PowerMockito.whenNew(FileInputStream.class).withArguments(spyFile).thenReturn(inputStream);
  IFile copiedFile=RepositoryResourceUtil.copyOSFileTOProject(mockIProject,validPath,desFolder,version,overwrite,progressMonitor);
  assertNotNull(copiedFile);
  verify(inputStream,Mockito.times(1)).close();
}","@Test public void testCopyOSFileTOProject() throws Exception {
  String path=""String_Node_Str"";
  IFolder desFolder=mock(IFolder.class);
  String version=VersionUtils.DEFAULT_VERSION;
  boolean overwrite=true;
  IProgressMonitor progressMonitor=mock(IProgressMonitor.class);
  IProject mockIProject=mock(IProject.class);
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,null,desFolder,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(false);
    }
  }
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,path,null,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(false);
    }
  }
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceUtils.class);
  when(ResourceUtils.getProject(mockProject)).thenReturn(mockIProject);
  String invalidPath=""String_Node_Str"";
  when(desFolder.exists()).thenReturn(true);
  IFile copyOfFile=RepositoryResourceUtil.copyOSFileTOProject(null,invalidPath,desFolder,version,overwrite,progressMonitor);
  PowerMockito.verifyStatic(Mockito.atLeastOnce());
  ProjectManager.getInstance();
  ResourceUtils.getProject(Mockito.any(Project.class));
  assertNull(copyOfFile);
  String validPath=""String_Node_Str"";
  File file=new File(validPath);
  File spyFile=Mockito.spy(file);
  PowerMockito.whenNew(File.class).withArguments(validPath).thenReturn(spyFile);
  when(spyFile.exists()).thenReturn(true);
  when(spyFile.getName()).thenReturn(""String_Node_Str"");
  IFile mockIFile=mock(IFile.class);
  when(desFolder.getFile(Mockito.anyString())).thenReturn(mockIFile);
  IPath mockIPath=mock(IPath.class);
  when(mockIFile.getLocation()).thenReturn(mockIPath);
  when(mockIPath.toOSString()).thenReturn(validPath);
  FileInputStream inputStream=mock(FileInputStream.class);
  PowerMockito.whenNew(FileInputStream.class).withArguments(spyFile).thenReturn(inputStream);
  IFile copiedFile=RepositoryResourceUtil.copyOSFileTOProject(mockIProject,validPath,desFolder,version,overwrite,progressMonitor);
  assertNotNull(copiedFile);
  verify(inputStream,Mockito.times(1)).close();
}",0.9971059232104958
147600,"@Before public void setUp() throws Exception {
  ResourceBundle rb=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb);
  PowerMockito.mockStatic(JFaceResources.class);
  ImageRegistry registry=mock(ImageRegistry.class);
  when(JFaceResources.getImageRegistry()).thenReturn(registry);
  PowerMockito.mockStatic(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"");
  IRepositoryResourceUtilExAdapter mockAdapter=PowerMockito.mock(IRepositoryResourceUtilExAdapter.class);
  PowerMockito.mockStatic(ExAdapterManager.class);
  PowerMockito.when(ExAdapterManager.getAdapter(new RepositoryResourceUtil(),IRepositoryResourceUtilExAdapter.class)).thenReturn(mockAdapter);
  PowerMockito.mockStatic(ImageCache.class);
  ImageDescriptor imgDesc=mock(ImageDescriptor.class);
  when(ImageCache.getImage(anyString())).thenReturn(imgDesc);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntimePlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntimePlugin);
  PowerMockito.mockStatic(RepositoryNodeProviderRegistryReader.class);
  RepositoryNodeProviderRegistryReader reader=mock(RepositoryNodeProviderRegistryReader.class);
  PowerMockito.when(RepositoryNodeProviderRegistryReader.getInstance()).thenReturn(reader);
}","@Before public void setUp() throws Exception {
  ResourceBundle rb=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb);
  PowerMockito.mockStatic(JFaceResources.class);
  ImageRegistry registry=mock(ImageRegistry.class);
  when(JFaceResources.getImageRegistry()).thenReturn(registry);
  PowerMockito.mockStatic(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"");
  IRepositoryResourceUtilExAdapter mockAdapter=PowerMockito.mock(IRepositoryResourceUtilExAdapter.class);
  PowerMockito.mockStatic(ExAdapterManager.class);
  PowerMockito.when(ExAdapterManager.getAdapter(new RepositoryResourceUtil(),IRepositoryResourceUtilExAdapter.class)).thenReturn(mockAdapter);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntimePlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntimePlugin);
  PowerMockito.mockStatic(RepositoryNodeProviderRegistryReader.class);
  RepositoryNodeProviderRegistryReader reader=mock(RepositoryNodeProviderRegistryReader.class);
  PowerMockito.when(RepositoryNodeProviderRegistryReader.getInstance()).thenReturn(reader);
}",0.631578947368421
147601,"public void fireDirtyPropChange(){
  firePropertyChange(PROP_DIRTY);
}","public void fireDirtyPropChange(){
  getdMainPage().firePropertyChange();
}",0.8275862068965517
147602,"public void selectionChanged(SelectionChangedEvent event){
  boolean isSourcePage=false;
  if (PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage() != null) {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (page.getActivePart() instanceof XSDEditor) {
      if (getActiveEditor() instanceof StructuredTextEditor) {
        isSourcePage=true;
      }
    }
 else {
      return;
    }
  }
  if (isSourcePage) {
    ISelection selection=getDataModelEditorPage().getSelectionProvider().getSelection();
    if (selection instanceof IStructuredSelection) {
      List otherModelObjectList=new ArrayList();
      for (Iterator i=((IStructuredSelection)selection).iterator(); i.hasNext(); ) {
        Object modelObject=i.next();
        Object otherModelObject=getObjectForOtherModel(modelObject);
        if (otherModelObject != null) {
          otherModelObjectList.add(otherModelObject);
        }
      }
      if (!otherModelObjectList.isEmpty()) {
        StructuredSelection nodeSelection=new StructuredSelection(otherModelObjectList);
        getTextEditor().getSelectionProvider().setSelection(nodeSelection);
      }
    }
  }
}","public void selectionChanged(SelectionChangedEvent event){
  boolean isSourcePage=false;
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window != null && window.getActivePage() != null) {
    IWorkbenchPage page=window.getActivePage();
    if (page.getActivePart() instanceof XSDEditor) {
      if (getActiveEditor() instanceof StructuredTextEditor) {
        isSourcePage=true;
      }
    }
 else {
      return;
    }
  }
  if (isSourcePage) {
    ISelection selection=getDataModelEditorPage().getSelectionProvider().getSelection();
    if (selection instanceof IStructuredSelection) {
      List otherModelObjectList=new ArrayList();
      for (Iterator i=((IStructuredSelection)selection).iterator(); i.hasNext(); ) {
        Object modelObject=i.next();
        Object otherModelObject=getObjectForOtherModel(modelObject);
        if (otherModelObject != null) {
          otherModelObjectList.add(otherModelObject);
        }
      }
      if (!otherModelObjectList.isEmpty()) {
        StructuredSelection nodeSelection=new StructuredSelection(otherModelObjectList);
        getTextEditor().getSelectionProvider().setSelection(nodeSelection);
      }
    }
  }
}",0.9386401326699834
147603,"private void checkMenuEntry(WSMenuEntry entry,WSMenuEntryE entryE){
  assertEquals(entry.getApplication(),entryE.getApplication());
  assertEquals(entry.getContext(),entryE.getContext());
  assertEquals(entry.getIcon(),entryE.getIcon());
  assertEquals(entry.getId(),entryE.getId());
  List<Descriptions> ds=entry.getDescriptions();
  EList<WSMenuMenuEntriesDescriptionsE> des=entryE.getDescriptions();
  if (ds != null) {
    for (int i=0; i < ds.size(); i++) {
      checkDesc(ds.get(i),des.get(i));
    }
  }
}","private void checkMenuEntry(WSMenuEntry entry,WSMenuEntryE entryE){
  assertEquals(entry.getApplication(),entryE.getApplication());
  assertEquals(entry.getContext(),entryE.getContext());
  assertEquals(entry.getIcon(),entryE.getIcon());
  assertEquals(entry.getId(),entryE.getId());
  List<WSMenuMenuEntriesDescriptions> ds=entry.getDescriptions();
  EList<WSMenuMenuEntriesDescriptionsE> des=entryE.getDescriptions();
  if (ds != null) {
    for (int i=0; i < ds.size(); i++) {
      checkDesc(ds.get(i),des.get(i));
    }
  }
}",0.9837008628954936
147604,"private void checkDesc(Descriptions ds,WSMenuMenuEntriesDescriptionsE des){
  assertEquals(ds.getLabel(),des.getLabel());
  assertEquals(ds.getLanguage(),des.getLanguage());
}","private void checkDesc(WSMenuMenuEntriesDescriptions ds,WSMenuMenuEntriesDescriptionsE des){
  assertEquals(ds.getLabel(),des.getLabel());
  assertEquals(ds.getLanguage(),des.getLanguage());
}",0.9536784741144414
147605,"private void initBean(WSMenu menu){
  menu.setDescription(""String_Node_Str"");
  menu.setName(""String_Node_Str"");
  List<WSMenuEntry> menuEntries=new ArrayList<WSMenuEntry>();
  WSMenuEntry menuEntry=new WSMenuEntry();
  menuEntry.setApplication(""String_Node_Str"");
  menuEntry.setContext(""String_Node_Str"");
  menuEntry.setIcon(""String_Node_Str"");
  menuEntry.setId(""String_Node_Str"");
  Descriptions ds=new Descriptions();
  ds.setLabel(""String_Node_Str"");
  ds.setLanguage(""String_Node_Str"");
  menuEntry.getDescriptions().add(ds);
  menuEntries.add(menuEntry);
  menuEntry=new WSMenuEntry();
  menuEntry.setApplication(""String_Node_Str"");
  menuEntry.setContext(""String_Node_Str"");
  menuEntry.setIcon(""String_Node_Str"");
  menuEntry.setId(""String_Node_Str"");
  menuEntries.add(menuEntry);
  menu.getMenuEntries().add(menuEntry);
}","private void initBean(WSMenu menu){
  menu.setDescription(""String_Node_Str"");
  menu.setName(""String_Node_Str"");
  List<WSMenuEntry> menuEntries=new ArrayList<WSMenuEntry>();
  WSMenuEntry menuEntry=new WSMenuEntry();
  menuEntry.setApplication(""String_Node_Str"");
  menuEntry.setContext(""String_Node_Str"");
  menuEntry.setIcon(""String_Node_Str"");
  menuEntry.setId(""String_Node_Str"");
  WSMenuMenuEntriesDescriptions ds=new WSMenuMenuEntriesDescriptions();
  ds.setLabel(""String_Node_Str"");
  ds.setLanguage(""String_Node_Str"");
  menuEntry.getDescriptions().add(ds);
  menuEntries.add(menuEntry);
  menuEntry=new WSMenuEntry();
  menuEntry.setApplication(""String_Node_Str"");
  menuEntry.setContext(""String_Node_Str"");
  menuEntry.setIcon(""String_Node_Str"");
  menuEntry.setId(""String_Node_Str"");
  menuEntries.add(menuEntry);
  menu.getMenuEntries().add(menuEntry);
}",0.9800235017626322
147606,"@Test public void testConvertWhereCondition(){
  WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,""String_Node_Str"",WSStringPredicate.OR,false);
  String[] lines=Util.convertWhereCondition(wc);
  assertEquals(lines.length,4);
  assertEquals(lines[0],""String_Node_Str"");
  assertEquals(lines[1],""String_Node_Str"");
  assertEquals(lines[2],""String_Node_Str"");
  assertEquals(lines[3],""String_Node_Str"");
}","@Test public void testConvertWhereCondition(){
  WSWhereCondition wc=new WSWhereCondition(""String_Node_Str"",WSWhereOperator.CONTAINS,""String_Node_Str"",false,WSStringPredicate.OR);
  String[] lines=Util.convertWhereCondition(wc);
  assertEquals(lines.length,4);
  assertEquals(lines[0],""String_Node_Str"");
  assertEquals(lines[1],""String_Node_Str"");
  assertEquals(lines[2],""String_Node_Str"");
  assertEquals(lines[3],""String_Node_Str"");
}",0.9863013698630136
147607,"private TreeParent getServerRoot(){
  String serverName=""String_Node_Str"";
  String universe=""String_Node_Str"";
  String username=""String_Node_Str"";
  String password=""String_Node_Str"";
  String endpointaddress=""String_Node_Str"";
  TreeParent serverRoot=new TreeParent(serverName,null,TreeObject._SERVER_,endpointaddress,(""String_Node_Str"".equals(universe) ? ""String_Node_Str"" : universe + ""String_Node_Str"") + username + ""String_Node_Str""+ (password == null ? ""String_Node_Str"" : password));
  UserInfo user=new UserInfo();
  user.setUsername(username);
  user.setPassword(password);
  user.setServerUrl(endpointaddress);
  user.setUniverse(universe);
  serverRoot.setUser(user);
  return serverRoot;
}","private TreeParent getServerRoot(){
  String serverName=""String_Node_Str"";
  String universe=""String_Node_Str"";
  String username=""String_Node_Str"";
  String password=""String_Node_Str"";
  String endpointaddress=""String_Node_Str"";
  TreeParent serverRoot=new TreeParent(serverName,null,TreeObject._SERVER_,endpointaddress,(""String_Node_Str"".equals(universe) ? ""String_Node_Str"" : universe + ""String_Node_Str"") + username + ""String_Node_Str""+ (password == null ? ""String_Node_Str"" : password));
  UserInfo user=new UserInfo();
  user.setUsername(username);
  user.setPassword(password);
  user.setServerUrl(endpointaddress);
  serverRoot.setUser(user);
  return serverRoot;
}",0.936046511627907
147608,"@Override protected void focusLost(){
  if (validator != null && !validator.validate(xpath.getText())) {
    xpath.setText(oldPath);
  }
  super.focusLost();
}","@Override protected void focusLost(){
  restoreIfInvalid();
  super.focusLost();
}",0.5975103734439834
147609,"@Override protected Object doGetValue(){
  ComplexTableViewer.this.datamodelName=xpath.getDataModelName();
  if (context) {
    XpathSelectDialog.setContext(null);
  }
  return xpath.getText();
}","@Override protected Object doGetValue(){
  ComplexTableViewer.this.datamodelName=xpath.getDataModelName();
  if (context) {
    XpathSelectDialog.setContext(null);
  }
  restoreIfInvalid();
  return xpath.getText();
}",0.9466019417475728
147610,"private void hookContextMenu(){
  MenuManager menuMgr=new MenuManager();
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      manager.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new EditItemAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this.resultsViewer));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new DeleteItemsAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,getXObject(),RoutingEngineV2BrowserMainPage.this.resultsViewer));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,getXObject(),RoutingEngineV2BrowserMainPage.this.resultsViewer,true));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,getXObject(),RoutingEngineV2BrowserMainPage.this.resultsViewer,false));
    }
  }
);
  Menu menu=menuMgr.createContextMenu(resultsViewer.getControl());
  resultsViewer.getControl().setMenu(menu);
  getSite().registerContextMenu(menuMgr,resultsViewer);
}","private void hookContextMenu(){
  MenuManager menuMgr=new MenuManager();
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      manager.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new EditItemAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this.resultsViewer));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new DeleteItemsAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,RoutingEngineV2BrowserMainPage.this.resultsViewer));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,RoutingEngineV2BrowserMainPage.this.resultsViewer,true));
      manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,RoutingEngineV2BrowserMainPage.this.resultsViewer,false));
    }
  }
);
  Menu menu=menuMgr.createContextMenu(resultsViewer.getControl());
  resultsViewer.getControl().setMenu(menu);
  getSite().registerContextMenu(menuMgr,resultsViewer);
}",0.8044928044928045
147611,"public void menuAboutToShow(IMenuManager manager){
  manager.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new EditItemAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this.resultsViewer));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new DeleteItemsAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,getXObject(),RoutingEngineV2BrowserMainPage.this.resultsViewer));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,getXObject(),RoutingEngineV2BrowserMainPage.this.resultsViewer,true));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,getXObject(),RoutingEngineV2BrowserMainPage.this.resultsViewer,false));
}","public void menuAboutToShow(IMenuManager manager){
  manager.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new EditItemAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this.resultsViewer));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new DeleteItemsAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,RoutingEngineV2BrowserMainPage.this.resultsViewer));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,RoutingEngineV2BrowserMainPage.this.resultsViewer,true));
  manager.appendToGroup(IWorkbenchActionConstants.MB_ADDITIONS,new ExecuteRoutingOrdersAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),RoutingEngineV2BrowserMainPage.this,RoutingEngineV2BrowserMainPage.this.resultsViewer,false));
}",0.9815602836879432
147612,"public DeleteItemsAction(Shell shell,RoutingEngineV2BrowserMainPage routingEngineV2BrowserMainPage,TreeObject xObject,Viewer viewer){
  this.shell=shell;
  this.routingEngineV2BrowserMainPage=routingEngineV2BrowserMainPage;
  this.xObject=xObject;
  this.viewer=viewer;
  setImageDescriptor(ImageCache.getImage(""String_Node_Str""));
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if (selection.size() == 1) {
    setText(Messages.RoutingEngineV2BrowserMainPage_DelSelectedItem);
  }
 else {
    setText(Messages.bind(Messages.RoutingEngineV2BrowserMainPage_DeleteThese,selection.size()));
  }
  setToolTipText(""String_Node_Str"" + (selection.size() > 1 ? ""String_Node_Str"" : TEXT));
}","public DeleteItemsAction(Shell shell,RoutingEngineV2BrowserMainPage routingEngineV2BrowserMainPage,Viewer viewer){
  this.shell=shell;
  this.routingEngineV2BrowserMainPage=routingEngineV2BrowserMainPage;
  this.viewer=viewer;
  setImageDescriptor(ImageCache.getImage(""String_Node_Str""));
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if (selection.size() == 1) {
    setText(Messages.RoutingEngineV2BrowserMainPage_DelSelectedItem);
  }
 else {
    setText(Messages.bind(Messages.RoutingEngineV2BrowserMainPage_DeleteThese,selection.size()));
  }
  setToolTipText(""String_Node_Str"" + (selection.size() > 1 ? ""String_Node_Str"" : TEXT));
}",0.9690869877785766
147613,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(Messages.RoutingEngineV2BrowserMainPage_DeletingItems,lineItems.size());
    TMDMService service=Util.getMDMService(xObject);
    int i=0;
    for (    WSRoutingOrderV2 lineItem : lineItems) {
      monitor.subTask(Messages.RoutingEngineV2BrowserMainPage_ProcessingItem + (i++));
      if (monitor.isCanceled()) {
        MessageDialog.openWarning(this.parentShell,Messages.RoutingEngineV2BrowserMainPage_UserCancelDel,Messages.RoutingEngineV2BrowserMainPage_WarningMsg + i + Messages.RoutingEngineV2BrowserMainPage_WarningMsgA+ Messages.RoutingEngineV2BrowserMainPage_WarningMsgB);
        return;
      }
      service.deleteRoutingOrderV2(new WSDeleteRoutingOrderV2(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
      monitor.worked(1);
    }
    monitor.done();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    if (!Util.handleConnectionException(shell,e,Messages.RoutingEngineV2BrowserMainPage_ErrorDel)) {
      MessageDialog.openError(shell,Messages.RoutingEngineV2BrowserMainPage_ErrorDel,Messages.RoutingEngineV2BrowserMainPage_WarningMsg1 + e.getLocalizedMessage());
    }
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  try {
    monitor.beginTask(Messages.RoutingEngineV2BrowserMainPage_DeletingItems,lineItems.size());
    if (service != null) {
      int i=0;
      for (      WSRoutingOrderV2 lineItem : lineItems) {
        monitor.subTask(Messages.RoutingEngineV2BrowserMainPage_ProcessingItem + (i++));
        if (monitor.isCanceled()) {
          MessageDialog.openWarning(this.parentShell,Messages.RoutingEngineV2BrowserMainPage_UserCancelDel,Messages.RoutingEngineV2BrowserMainPage_WarningMsg + i + Messages.RoutingEngineV2BrowserMainPage_WarningMsgA+ Messages.RoutingEngineV2BrowserMainPage_WarningMsgB);
          return;
        }
        service.deleteRoutingOrderV2(new WSDeleteRoutingOrderV2(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
        monitor.worked(1);
      }
    }
    monitor.done();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    if (!Util.handleConnectionException(shell,e,Messages.RoutingEngineV2BrowserMainPage_ErrorDel)) {
      MessageDialog.openError(shell,Messages.RoutingEngineV2BrowserMainPage_ErrorDel,Messages.RoutingEngineV2BrowserMainPage_WarningMsg1 + e.getLocalizedMessage());
    }
  }
}",0.96656050955414
147614,"public DeleteItemsWithProgress(TreeObject object,Collection<WSRoutingOrderV2> lineItems,Shell shell){
  super();
  this.lineItems=lineItems;
  this.parentShell=shell;
}","public DeleteItemsWithProgress(TMDMService mdmService,Collection<WSRoutingOrderV2> lineItems,Shell shell){
  super();
  this.service=mdmService;
  this.lineItems=lineItems;
  this.parentShell=shell;
}",0.8260869565217391
147615,"public ExecuteRoutingOrdersAction(Shell shell,RoutingEngineV2BrowserMainPage routingEngineV2BrowserMainPage,TreeObject xObject,Viewer viewer,boolean synchronously){
  this.shell=shell;
  this.routingEngineV2BrowserMainPage=routingEngineV2BrowserMainPage;
  this.xObject=xObject;
  this.viewer=viewer;
  this.synchronously=synchronously;
  setImageDescriptor(ImageCache.getImage(""String_Node_Str""));
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if (selection.size() == 1) {
    setText(Messages.RoutingEngineV2BrowserMainPage_Text + (synchronously ? Messages.RoutingEngineV2BrowserMainPage_Text2 : Messages.RoutingEngineV2BrowserMainPage_Text3) + Messages.RoutingEngineV2BrowserMainPage_TextA);
  }
 else {
    setText(Messages.RoutingEngineV2BrowserMainPage_Text1 + (synchronously ? Messages.RoutingEngineV2BrowserMainPage_Text2 : Messages.RoutingEngineV2BrowserMainPage_Text3) + Messages.RoutingEngineV2BrowserMainPage_Text1A+ selection.size()+ Messages.RoutingEngineV2BrowserMainPage_Text1B);
  }
  setToolTipText(Messages.RoutingEngineV2BrowserMainPage_ActionTip + (synchronously ? Messages.RoutingEngineV2BrowserMainPage_Text2 : Messages.RoutingEngineV2BrowserMainPage_Text3) + Messages.RoutingEngineV2BrowserMainPage_ActionTipA+ (selection.size() > 1 ? ""String_Node_Str"" : TEXT));
}","public ExecuteRoutingOrdersAction(Shell shell,RoutingEngineV2BrowserMainPage routingEngineV2BrowserMainPage,Viewer viewer,boolean synchronously){
  this.shell=shell;
  this.routingEngineV2BrowserMainPage=routingEngineV2BrowserMainPage;
  this.viewer=viewer;
  this.synchronously=synchronously;
  setImageDescriptor(ImageCache.getImage(""String_Node_Str""));
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if (selection.size() == 1) {
    setText(Messages.RoutingEngineV2BrowserMainPage_Text + (synchronously ? Messages.RoutingEngineV2BrowserMainPage_Text2 : Messages.RoutingEngineV2BrowserMainPage_Text3) + Messages.RoutingEngineV2BrowserMainPage_TextA);
  }
 else {
    setText(Messages.RoutingEngineV2BrowserMainPage_Text1 + (synchronously ? Messages.RoutingEngineV2BrowserMainPage_Text2 : Messages.RoutingEngineV2BrowserMainPage_Text3) + Messages.RoutingEngineV2BrowserMainPage_Text1A+ selection.size()+ Messages.RoutingEngineV2BrowserMainPage_Text1B);
  }
  setToolTipText(Messages.RoutingEngineV2BrowserMainPage_ActionTip + (synchronously ? Messages.RoutingEngineV2BrowserMainPage_Text2 : Messages.RoutingEngineV2BrowserMainPage_Text3) + Messages.RoutingEngineV2BrowserMainPage_ActionTipA+ (selection.size() > 1 ? ""String_Node_Str"" : TEXT));
}",0.983493282149712
147616,"public ExecuteRoutingOrdersWithProgress(TreeObject object,Collection<WSRoutingOrderV2> lineItems,Shell shell){
  super();
  this.xObject=object;
  this.lineItems=lineItems;
  this.parentShell=shell;
}","public ExecuteRoutingOrdersWithProgress(TMDMService tmdmService,Collection<WSRoutingOrderV2> lineItems,Shell shell){
  super();
  this.service=tmdmService;
  this.lineItems=lineItems;
  this.parentShell=shell;
}",0.8321167883211679
147617,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.RoutingEngineV2BrowserMainPage_ExecutingRoutingOrders,lineItems.size());
  TMDMService service=null;
  try {
    service=Util.getMDMService(xObject);
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(shell,Messages.RoutingEngineV2BrowserMainPage_ErrorExecuting,Messages.bind(Messages.RoutingEngineV2BrowserMainPage_ErrorMsg5,e.getLocalizedMessage()));
  }
  String results=TEXT;
  for (  WSRoutingOrderV2 lineItem : lineItems) {
    monitor.subTask(Messages.RoutingEngineV2BrowserMainPage_ExecutingRoutingOrder + lineItem.getName());
    if (monitor.isCanceled()) {
      MessageDialog.openWarning(this.parentShell,Messages.RoutingEngineV2BrowserMainPage_WarningTitle,Messages.RoutingEngineV2BrowserMainPage_WraningMsg + lineItem.getName() + Messages.RoutingEngineV2BrowserMainPage_WraningMsgA+ Messages.RoutingEngineV2BrowserMainPage_WraningMsgB);
      return;
    }
    try {
      if (synchronously) {
        WSString wsResult=service.executeRoutingOrderV2Synchronously(new WSExecuteRoutingOrderV2Synchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
        if (wsResult.getValue() != null) {
          results+=lineItem.getName() + ""String_Node_Str"" + wsResult.getValue();
        }
      }
 else {
        service.executeRoutingOrderV2Asynchronously(new WSExecuteRoutingOrderV2Asynchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
      }
      monitor.worked(1);
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
      if (!Util.handleConnectionException(shell,e,Messages.RoutingEngineV2BrowserMainPage_ErrorExecuting)) {
        MessageDialog.openError(shell,Messages.RoutingEngineV2BrowserMainPage_ErrorExecuting,Messages.bind(Messages.RoutingEngineV2BrowserMainPage_ErrorMsg6,e.getLocalizedMessage()));
      }
    }
  }
  monitor.done();
  MessageDialog.openInformation(shell,Messages.RoutingEngineV2BrowserMainPage_InfoTitle,lineItems.size() + Messages.RoutingEngineV2BrowserMainPage_InfoContent + (TEXT.equals(results) ? TEXT : ""String_Node_Str"" + results));
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.RoutingEngineV2BrowserMainPage_ExecutingRoutingOrders,lineItems.size());
  String results=TEXT;
  if (service != null) {
    for (    WSRoutingOrderV2 lineItem : lineItems) {
      monitor.subTask(Messages.RoutingEngineV2BrowserMainPage_ExecutingRoutingOrder + lineItem.getName());
      if (monitor.isCanceled()) {
        MessageDialog.openWarning(this.parentShell,Messages.RoutingEngineV2BrowserMainPage_WarningTitle,Messages.RoutingEngineV2BrowserMainPage_WraningMsg + lineItem.getName() + Messages.RoutingEngineV2BrowserMainPage_WraningMsgA+ Messages.RoutingEngineV2BrowserMainPage_WraningMsgB);
        return;
      }
      try {
        if (synchronously) {
          WSString wsResult=service.executeRoutingOrderV2Synchronously(new WSExecuteRoutingOrderV2Synchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
          if (wsResult.getValue() != null) {
            results+=lineItem.getName() + ""String_Node_Str"" + wsResult.getValue();
          }
        }
 else {
          service.executeRoutingOrderV2Asynchronously(new WSExecuteRoutingOrderV2Asynchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
        }
        monitor.worked(1);
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
        if (!Util.handleConnectionException(shell,e,Messages.RoutingEngineV2BrowserMainPage_ErrorExecuting)) {
          MessageDialog.openError(shell,Messages.RoutingEngineV2BrowserMainPage_ErrorExecuting,Messages.bind(Messages.RoutingEngineV2BrowserMainPage_ErrorMsg6,e.getLocalizedMessage()));
        }
      }
    }
  }
  monitor.done();
  MessageDialog.openInformation(shell,Messages.RoutingEngineV2BrowserMainPage_InfoTitle,lineItems.size() + Messages.RoutingEngineV2BrowserMainPage_InfoContent + (TEXT.equals(results) ? TEXT : ""String_Node_Str"" + results));
}",0.7922636103151862
147618,"public void generateJobTemplate(int type,String processName,String[] returnMessages,boolean enableRedirect,String redirectUrl,List<IMDMJobTemplate> jobTemplates){
  if (type == ITransformerV2NodeConsDef.TYPE_SMARTVIEW) {
    return;
  }
  if (returnMessages == null || returnMessages.length < 2) {
    throw new IllegalArgumentException();
  }
  String infoType=null;
  String pMessage=null;
  if (type == ITransformerV2NodeConsDef.TYPE_BEFOREDEL || type == ITransformerV2NodeConsDef.TYPE_BEFORESAVE) {
    infoType=returnMessages[0];
    pMessage=returnMessages[1];
  }
  if (type == ITransformerV2NodeConsDef.TYPE_ENTITYACTION || type == ITransformerV2NodeConsDef.TYPE_WELCOMEACTION) {
    if (enableRedirect) {
      pMessage=""String_Node_Str"" + redirectUrl + ""String_Node_Str"";
    }
 else {
      pMessage=""String_Node_Str"";
    }
  }
  IValidateService validateService=(IValidateService)GlobalServiceRegister.getDefault().getService(IValidateService.class);
  for (  IMDMJobTemplate job : jobTemplates) {
    boolean result=true;
    if (validateService != null) {
      result=validateService.validateAndAlertObjectExistence(ERepositoryObjectType.PROCESS,processName,""String_Node_Str"");
    }
    if (result) {
      job.generateJobTemplate(type,processName,infoType,pMessage);
    }
  }
}","public void generateJobTemplate(int type,String processName,String[] returnMessages,boolean enableRedirect,String redirectUrl,List<IMDMJobTemplate> jobTemplates){
  if (type == ITransformerV2NodeConsDef.TYPE_SMARTVIEW) {
    return;
  }
  if (returnMessages == null || returnMessages.length < 2) {
    throw new IllegalArgumentException();
  }
  String infoType=null;
  String pMessage=null;
  if (type == ITransformerV2NodeConsDef.TYPE_BEFOREDEL || type == ITransformerV2NodeConsDef.TYPE_BEFORESAVE) {
    infoType=returnMessages[0];
    pMessage=returnMessages[1];
  }
  if (type == ITransformerV2NodeConsDef.TYPE_ENTITYACTION || type == ITransformerV2NodeConsDef.TYPE_WELCOMEACTION) {
    if (enableRedirect) {
      pMessage=""String_Node_Str"" + redirectUrl + ""String_Node_Str"";
    }
 else {
      pMessage=""String_Node_Str"";
    }
  }
  IValidateService validateService=(IValidateService)GlobalServiceRegister.getDefault().getService(IValidateService.class);
  for (  IMDMJobTemplate job : jobTemplates) {
    boolean result=true;
    processName=processName.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (validateService != null) {
      result=validateService.validateAndAlertObjectExistence(ERepositoryObjectType.PROCESS,processName,""String_Node_Str"");
    }
    if (result) {
      closeEditor(processName);
      job.generateJobTemplate(type,processName,infoType,pMessage);
    }
  }
}",0.9596445760829324
147619,"private void refreshJobEditorTitle(Item item){
  String label=item.getProperty().getLabel();
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  if (editorReferences != null) {
    for (    IEditorReference editorPart : editorReferences) {
      IEditorInput editorInput=editorPart.getEditor(false).getEditorInput();
      if (editorInput instanceof ProcessEditorInput) {
        ProcessEditorInput processInput=(ProcessEditorInput)editorInput;
        ProcessItem jobItem=(ProcessItem)processInput.getItem();
        MultiPageTalendEditor jobEditor=(MultiPageTalendEditor)editorPart.getEditor(false);
        if (jobItem.getProperty().getLabel().equals(label)) {
          jobEditor.refreshName();
          break;
        }
      }
    }
  }
}","private void refreshJobEditorTitle(Item item){
  String label=item.getProperty().getLabel();
  label=label.replaceAll(""String_Node_Str"",""String_Node_Str"");
  IWorkbenchPage activePage=getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  if (editorReferences != null) {
    for (    IEditorReference editorPart : editorReferences) {
      IEditorInput editorInput=editorPart.getEditor(false).getEditorInput();
      if (editorInput instanceof ProcessEditorInput) {
        ProcessEditorInput processInput=(ProcessEditorInput)editorInput;
        ProcessItem jobItem=(ProcessItem)processInput.getItem();
        MultiPageTalendEditor jobEditor=(MultiPageTalendEditor)editorPart.getEditor(false);
        String jobLabel=jobItem.getProperty().getLabel();
        if (jobLabel.equals(label)) {
          jobEditor.refreshName();
          break;
        }
      }
    }
  }
}",0.910935738444194
147620,"@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  RepositoryNode node=(RepositoryNode)obj;
  RepositoryObject repositoryObj=new RepositoryObject(node.getObject().getProperty());
  repositoryObj.setRepositoryNode(node.getObject().getRepositoryNode());
  MDMOpenExistVersionProcessWizard wizard=new MDMOpenExistVersionProcessWizard(repositoryObj);
  PropertyManagerWizardDialog dialog=new PropertyManagerWizardDialog(Display.getCurrent().getActiveShell(),wizard);
  dialog.setPageSize(300,250);
  if (dialog.open() == Dialog.OK) {
    if (wizard.getViewObj() != null) {
      obj=wizard.getViewObj();
    }
    if (obj == node.getObject()) {
      MDMRepositoryView.show().getCommonViewer().refresh(obj);
    }
 else {
      MDMRepositoryView.show().getCommonViewer().refresh(node.getParent().getObject());
    }
  }
}","@Override protected void doRun(){
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  RepositoryNode node=(RepositoryNode)obj;
  RepositoryObject repositoryObj=new RepositoryObject(node.getObject().getProperty());
  repositoryObj.setRepositoryNode(node.getObject().getRepositoryNode());
  MDMOpenExistVersionProcessWizard wizard=new MDMOpenExistVersionProcessWizard(repositoryObj);
  WizardDialog dialog=new WizardDialog(Display.getCurrent().getActiveShell(),wizard);
  dialog.setPageSize(300,250);
  if (dialog.open() == Dialog.OK) {
    if (wizard.getViewObj() != null) {
      obj=wizard.getViewObj();
    }
    if (obj == node.getObject()) {
      MDMRepositoryView.show().getCommonViewer().refresh(obj);
    }
 else {
      MDMRepositoryView.show().getCommonViewer().refresh(node.getParent().getObject());
    }
  }
}",0.9831838565022422
147621,"@Override protected IEditorPart getCorrespondingEditor(RepositoryNode node){
  IRepositoryViewObject viewObject=node.getObject();
  Item item=viewObject.getProperty().getItem();
  IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
  if (configuration != null) {
    IRepositoryNodeActionProvider actionProvider=configuration.getActionProvider();
    if (actionProvider != null) {
      IRepositoryViewEditorInput editorInput=actionProvider.getOpenEditorInput(viewObject);
      if (editorInput != null) {
        IWorkbenchPage page=MDMRepositoryView.show().getCommonViewer().getCommonNavigator().getSite().getWorkbenchWindow().getActivePage();
        try {
          return page.openEditor(editorInput,editorInput.getEditorId());
        }
 catch (        PartInitException e) {
          log.error(e.getMessage(),e);
        }
      }
    }
  }
  return null;
}","@Override protected IEditorPart getCorrespondingEditor(IRepositoryNode node){
  IRepositoryViewObject viewObject=node.getObject();
  Item item=viewObject.getProperty().getItem();
  IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
  if (configuration != null) {
    IRepositoryNodeActionProvider actionProvider=configuration.getActionProvider();
    if (actionProvider != null) {
      IRepositoryViewEditorInput editorInput=actionProvider.getOpenEditorInput(viewObject);
      if (editorInput != null) {
        IWorkbenchPage page=MDMRepositoryView.show().getCommonViewer().getCommonNavigator().getSite().getWorkbenchWindow().getActivePage();
        try {
          return page.openEditor(editorInput,editorInput.getEditorId());
        }
 catch (        PartInitException e) {
          log.error(e.getMessage(),e);
        }
      }
    }
  }
  return null;
}",0.9994538503549972
147622,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      String tValue=value.toString().trim();
      if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
        MessageDialog.openInformation(null,Messages.Warning,Messages.NotContainEmpty);
        return;
      }
      if (!value.toString().startsWith(BROWSE_ITEMS)) {
        MessageDialog.openInformation(null,Messages.Warning,Messages.bind(Messages.NameStartWith,BROWSE_ITEMS));
        return;
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      String declName=elem.getName();
      if (!(BROWSE_ITEMS + declName).equals(tValue)) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem) {
            continue;
          }
          if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
            MessageDialog.openInformation(null,Messages.Warning,Messages.BrowseNameExists);
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + declName);
        browseItemToRoles.remove(BROWSE_ITEMS + declName);
        int prex=tValue.indexOf(BROWSE_ITEMS);
        if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
          elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
        }
        browseItemToRoles.put(tValue,lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
        elem.setName(declName);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      applyChangeToRoles();
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (selection.size() > 1) {
        List selectObjs=selection.toList();
        refreshRoleView(selectObjs);
        UpdateComplexViewButton(true);
      }
 else       if (selection.size() == 1) {
        XSDElementDeclaration decl=(XSDElementDeclaration)selection.getFirstElement();
        refreshRoleView(BROWSE_ITEMS + decl.getName());
        UpdateComplexViewButton(true);
      }
    }
    private void UpdateComplexViewButton(    final boolean b){
      if (exAdapter != null) {
        exAdapter.UpdateComplexViewButton(b);
      }
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  if (exAdapter != null) {
    exAdapter.createRoleControl(composite);
  }
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      String tValue=value.toString().trim();
      if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
        MessageDialog.openInformation(null,Messages.Warning,Messages.NotContainEmpty);
        return;
      }
      if (!value.toString().startsWith(BROWSE_ITEMS)) {
        MessageDialog.openInformation(null,Messages.Warning,Messages.bind(Messages.NameStartWith,BROWSE_ITEMS));
        return;
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      String declName=elem.getName();
      if (!(BROWSE_ITEMS + declName).equals(tValue)) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem) {
            continue;
          }
          if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
            MessageDialog.openInformation(null,Messages.Warning,Messages.BrowseNameExists);
            return;
          }
        }
        String key=BROWSE_ITEMS + declName;
        for (        String k : browseItemToRoles.keySet()) {
          if (k.startsWith(key)) {
            key=k;
            break;
          }
        }
        List<Line> lines=browseItemToRoles.get(key);
        browseItemToRoles.remove(key);
        int prex=tValue.indexOf(BROWSE_ITEMS);
        if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
          elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
        }
        browseItemToRoles.put(tValue,lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
        elem.setName(declName);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      applyChangeToRoles();
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (selection.size() > 1) {
        List selectObjs=selection.toList();
        refreshRoleView(selectObjs);
        UpdateComplexViewButton(true);
      }
 else       if (selection.size() == 1) {
        XSDElementDeclaration decl=(XSDElementDeclaration)selection.getFirstElement();
        refreshRoleView(BROWSE_ITEMS + decl.getName());
        UpdateComplexViewButton(true);
      }
    }
    private void UpdateComplexViewButton(    final boolean b){
      if (exAdapter != null) {
        exAdapter.UpdateComplexViewButton(b);
      }
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  if (exAdapter != null) {
    exAdapter.createRoleControl(composite);
  }
  setControl(composite);
}",0.9692479447883892
147623,"public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  String tValue=value.toString().trim();
  if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
    MessageDialog.openInformation(null,Messages.Warning,Messages.NotContainEmpty);
    return;
  }
  if (!value.toString().startsWith(BROWSE_ITEMS)) {
    MessageDialog.openInformation(null,Messages.Warning,Messages.bind(Messages.NameStartWith,BROWSE_ITEMS));
    return;
  }
  XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
  String declName=elem.getName();
  if (!(BROWSE_ITEMS + declName).equals(tValue)) {
    for (    XSDElementDeclaration theElem : declList) {
      if (theElem == elem) {
        continue;
      }
      if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
        MessageDialog.openInformation(null,Messages.Warning,Messages.BrowseNameExists);
        return;
      }
    }
    List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + declName);
    browseItemToRoles.remove(BROWSE_ITEMS + declName);
    int prex=tValue.indexOf(BROWSE_ITEMS);
    if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
      elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
    }
    browseItemToRoles.put(tValue,lines);
    refreshRoleView(BROWSE_ITEMS + elem.getName());
    browseViewer.update(elem,null);
    elem.setName(declName);
  }
}","public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  String tValue=value.toString().trim();
  if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
    MessageDialog.openInformation(null,Messages.Warning,Messages.NotContainEmpty);
    return;
  }
  if (!value.toString().startsWith(BROWSE_ITEMS)) {
    MessageDialog.openInformation(null,Messages.Warning,Messages.bind(Messages.NameStartWith,BROWSE_ITEMS));
    return;
  }
  XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
  String declName=elem.getName();
  if (!(BROWSE_ITEMS + declName).equals(tValue)) {
    for (    XSDElementDeclaration theElem : declList) {
      if (theElem == elem) {
        continue;
      }
      if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
        MessageDialog.openInformation(null,Messages.Warning,Messages.BrowseNameExists);
        return;
      }
    }
    String key=BROWSE_ITEMS + declName;
    for (    String k : browseItemToRoles.keySet()) {
      if (k.startsWith(key)) {
        key=k;
        break;
      }
    }
    List<Line> lines=browseItemToRoles.get(key);
    browseItemToRoles.remove(key);
    int prex=tValue.indexOf(BROWSE_ITEMS);
    if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
      elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
    }
    browseItemToRoles.put(tValue,lines);
    refreshRoleView(BROWSE_ITEMS + elem.getName());
    browseViewer.update(elem,null);
    elem.setName(declName);
  }
}",0.796313949793454
147624,"public static void addStudioToken(HttpMessage httpMessage,String userName){
  if (httpMessage != null && userName != null) {
    String[] studioToken=getStudioToken(userName);
    httpMessage.addHeader(studioToken[0],studioToken[1]);
  }
}","public static void addStudioToken(HttpMessage httpMessage,String userName){
  if (httpMessage != null && userName != null) {
    String[] studioToken=getStudioToken(userName);
    if (studioToken != null && studioToken.length == 2) {
      httpMessage.addHeader(studioToken[0],studioToken[1]);
    }
  }
}",0.8786764705882353
147625,"private void multiCopy(){
  StringBuilder result=new StringBuilder();
  List<Object> selectedObject=getSelectedObject();
  for (  Object obj : selectedObject) {
    IRepositoryViewObject viewObject=(IRepositoryViewObject)obj;
    Item item=viewObject.getProperty().getItem();
    WSResourceE wsItem=null;
    if (!(item instanceof WSResourceItem)) {
      continue;
    }
    wsItem=((WSResourceItem)item).getResource();
    String catalog=wsItem.getImageCatalog();
    if (catalog == null) {
      continue;
    }
    String fileName=viewObject.getLabel() + '.' + wsItem.getFileExtension();
    MDMServerDef serverDef=RepositoryResourceUtil.getLastServerDef(viewObject);
    if (serverDef == null) {
      continue;
    }
    String contextPath=Util.getContextPath(serverDef.getPath());
    String uripre=serverDef.getProtocol() + serverDef.getHost() + ':'+ serverDef.getPort()+ contextPath;
    result.append(uripre);
    result.append(""String_Node_Str"" + catalog + '/'+ fileName);
    result.append('\n');
  }
  Clipboard cb=new Clipboard(Display.getCurrent());
  String textData=result.toString();
  TextTransfer transfer=TextTransfer.getInstance();
  cb.setContents(new Object[]{textData},new Transfer[]{transfer});
  cb.dispose();
}","private void multiCopy(){
  StringBuilder result=new StringBuilder();
  List<Object> selectedObject=getSelectedObject();
  for (  Object obj : selectedObject) {
    IRepositoryViewObject viewObject=(IRepositoryViewObject)obj;
    Item item=viewObject.getProperty().getItem();
    WSResourceE wsItem=null;
    if (!(item instanceof WSResourceItem)) {
      continue;
    }
    wsItem=((WSResourceItem)item).getResource();
    String catalog=wsItem.getImageCatalog();
    if (catalog == null) {
      continue;
    }
    String fileName=viewObject.getLabel() + '.' + wsItem.getFileExtension();
    MDMServerDef serverDef=RepositoryResourceUtil.getLastServerDef(viewObject);
    if (serverDef == null) {
      continue;
    }
    String contextPath=Util.getContextPath(serverDef.getPath());
    String uripre=serverDef.getProtocol() + serverDef.getHost() + ':'+ serverDef.getPort()+ contextPath;
    result.append(uripre);
    result.append(""String_Node_Str"" + catalog + '/'+ fileName);
    result.append('\n');
  }
  if (result.length() != 0) {
    Clipboard cb=new Clipboard(Display.getCurrent());
    String textData=result.toString();
    TextTransfer transfer=TextTransfer.getInstance();
    cb.setContents(new Object[]{textData},new Transfer[]{transfer});
    cb.dispose();
  }
}",0.9825396825396824
147626,"private ConsistencyService(){
}","private ConsistencyService(){
  exAdapter=ExAdapterManager.getAdapter(this,IConsistencyServiceExAdapter.class);
}",0.4305555555555556
147627,"private String getObjectName(TreeObject treeObj){
  int type=treeObj.getType();
  String objectName=treeObj.getDisplayName();
  ;
  if (type == TreeObject.CUSTOM_FORM) {
    WSCustomForm customForm=(WSCustomForm)treeObj.getWsObject();
    objectName=customForm.getDatamodel() + OBJ_NAME_DIVIDE + customForm.getEntity()+ OBJ_NAME_DIVIDE+ objectName;
  }
  return objectName;
}","private String getObjectName(TreeObject treeObj){
  String objectName=treeObj.getDisplayName();
  if (exAdapter != null) {
    objectName=exAdapter.getObjectNameForDigest(treeObj);
  }
  return objectName;
}",0.2268041237113402
147628,"/** 
 * DOC hbhong Comment method ""handlePictureResourceObject"".
 * @param treeObj
 * @throws IOException
 */
private WSResourceE handlePictureResourceObject(TreeObject treeObj) throws IOException {
  if (treeObj != null) {
    if (treeObj instanceof TreeParent) {
      return null;
    }
    String[] fileInfo=getPicResourceFileInfo(treeObj.getName());
    if (fileInfo != null) {
      String dirName=fileInfo[0];
      String fileQName=fileInfo[1];
      String fileExtension=fileInfo[2];
      String fileName=fileInfo[3];
      String encodedDirName=URLEncoder.encode(dirName,UTF8);
      fileQName=URLEncoder.encode(fileQName,UTF8);
      WSResourceE resource=MdmserverobjectFactory.eINSTANCE.createWSResourceE();
      resource.setName(fileName);
      resource.setFileExtension(fileExtension);
      StringBuffer strBuf=new StringBuffer();
      strBuf.append(serverDef.getProtocol()).append(serverDef.getHost()).append(""String_Node_Str"").append(serverDef.getPort()).append(""String_Node_Str"").append(encodedDirName).append(""String_Node_Str"").append(fileQName).append(""String_Node_Str"").append(fileExtension);
      String url=strBuf.toString();
      byte[] bytes=HttpClientUtil.downloadFile(url,serverDef.getUser(),serverDef.getPasswd());
      resource.setFileContent(bytes);
      resource.setImageCatalog(dirName);
      treeObj.setName(fileName);
      return resource;
    }
  }
  return null;
}","/** 
 * DOC hbhong Comment method ""handlePictureResourceObject"".
 * @param treeObj
 * @throws IOException
 */
private WSResourceE handlePictureResourceObject(TreeObject treeObj) throws IOException {
  if (treeObj != null) {
    if (treeObj instanceof TreeParent) {
      return null;
    }
    String[] fileInfo=getPicResourceFileInfo(treeObj.getName());
    if (fileInfo != null) {
      String dirName=fileInfo[0];
      String fileQName=fileInfo[1];
      String fileExtension=fileInfo[2];
      String fileName=fileInfo[3];
      String encodedDirName=URLEncoder.encode(dirName,UTF8);
      fileQName=URLEncoder.encode(fileQName,UTF8);
      WSResourceE resource=MdmserverobjectFactory.eINSTANCE.createWSResourceE();
      resource.setName(fileName);
      resource.setFileExtension(fileExtension);
      StringBuffer strBuf=new StringBuffer();
      strBuf.append(serverDef.getProtocol()).append(serverDef.getHost()).append(""String_Node_Str"").append(serverDef.getPort()).append(Util.getContextPath(serverDef.getPath())).append(""String_Node_Str"").append(encodedDirName).append(""String_Node_Str"").append(fileQName).append(""String_Node_Str"").append(fileExtension);
      String url=strBuf.toString();
      byte[] bytes=HttpClientUtil.downloadFile(url,serverDef.getUser(),serverDef.getPasswd());
      resource.setFileContent(bytes);
      resource.setImageCatalog(dirName);
      treeObj.setName(fileName);
      return resource;
    }
  }
  return null;
}",0.9829208783548274
147629,"/** 
 * if using XML DB and the return records exceed limit, it will return null;
 * @param port
 * @param dataClusterName
 * @return
 */
public static DataProcessRule createProcessRouterFromRemote(TMDMService service,String dataClusterName){
  WsGetConceptsInDataCluster param=new WsGetConceptsInDataCluster(new WsDataClusterPK(dataClusterName));
  WsStringArray concepts=service.getConceptsInDataCluster(param);
  if (concepts != null) {
    DataProcessRule rule=new DataProcessRule();
    for (    String concept : concepts.getStrings()) {
      rule.addNewEnityUnit(concept);
    }
    return rule;
  }
  return null;
}","/** 
 * if using XML DB and the return records exceed limit, it will return null;
 * @param port
 * @param dataClusterName
 * @return
 */
public static DataProcessRule createProcessRouterFromRemote(TMDMService service,String dataClusterName){
  WSGetConceptsInDataCluster param=new WSGetConceptsInDataCluster(new WSDataClusterPK(dataClusterName));
  WSStringArray concepts=service.getConceptsInDataCluster(param);
  if (concepts != null) {
    DataProcessRule rule=new DataProcessRule();
    for (    String concept : concepts.getStrings()) {
      rule.addNewEnityUnit(concept);
    }
    return rule;
  }
  return null;
}",0.9935794542536116
147630,"protected Mapping getWSItemMapping() throws IOException, MappingException {
  URL mappingUrl=this.getClass().getResource(""String_Node_Str"");
  Mapping mapping=new Mapping(WsItem.class.getClassLoader());
  mapping.loadMapping(mappingUrl);
  return mapping;
}","protected Mapping getWSItemMapping() throws IOException, MappingException {
  URL mappingUrl=this.getClass().getResource(""String_Node_Str"");
  Mapping mapping=new Mapping(WSItem.class.getClassLoader());
  mapping.loadMapping(mappingUrl);
  return mapping;
}",0.9961089494163424
147631,"protected int exportCluster(TMDMService service,String tempFolderPath,String dName,IProgressMonitor monitor){
  String encodedID=null;
  WsDataClusterPK pk=new WsDataClusterPK(dName);
  try {
    List<String> items=new ArrayList<String>();
    List<WsItemPKsByCriteriaResponseResults> results=service.getItemPKsByCriteria(new WsGetItemPKsByCriteria(null,null,(long)-1,null,null,MAX_EXPORT_COUNT,0,(long)-1,pk)).getResults();
    if (results == null) {
      return -1;
    }
    monitor.beginTask(Messages.ExportDataClusterAction_exportContent,results.size() + 10);
    monitor.subTask(Messages.ExportDataClusterAction_exporting);
    int totalSize=0;
    int maxSize=results.size() - 1;
    if (maxSize > 0) {
      totalSize=Integer.parseInt(Util.parse(results.get(0).getWsItemPK().getConceptName()).getDocumentElement().getTextContent());
      if (maxSize > MAX_EXPORT_COUNT) {
        maxSize=MAX_EXPORT_COUNT;
      }
    }
    Mapping mapping=getWSItemMapping();
    for (int i=1; i <= maxSize; i++) {
      WsItemPKsByCriteriaResponseResults item=results.get(i);
      WsItem wsitem=service.getItem(new WsGetItem(item.getWsItemPK()));
      StringWriter sw=new StringWriter();
      Marshaller marshaller=new Marshaller(sw);
      marshaller.setMapping(mapping);
      marshaller.marshal(wsitem);
      String uniqueId=pk.getPk() + ""String_Node_Str"" + wsitem.getConceptName();
      for (      String id : wsitem.getIds()) {
        uniqueId=uniqueId + ""String_Node_Str"" + id;
      }
      encodedID=URLEncoder.encode(uniqueId,""String_Node_Str"");
      writeString(tempFolderPath,sw.toString(),pk.getPk() + ""String_Node_Str"" + encodedID);
      items.add(TreeObject.DATACONTAINER_COTENTS + ""String_Node_Str"" + pk.getPk()+ ""String_Node_Str""+ encodedID);
      monitor.worked(1);
    }
    return totalSize;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return -1;
}","protected int exportCluster(TMDMService service,String tempFolderPath,String dName,IProgressMonitor monitor){
  String encodedID=null;
  WSDataClusterPK pk=new WSDataClusterPK(dName);
  try {
    List<String> items=new ArrayList<String>();
    List<WSItemPKsByCriteriaResponseResults> results=service.getItemPKsByCriteria(new WSGetItemPKsByCriteria(null,null,(long)-1,null,null,MAX_EXPORT_COUNT,0,(long)-1,pk)).getResults();
    if (results == null) {
      return -1;
    }
    monitor.beginTask(Messages.ExportDataClusterAction_exportContent,results.size() + 10);
    monitor.subTask(Messages.ExportDataClusterAction_exporting);
    int totalSize=0;
    int maxSize=results.size() - 1;
    if (maxSize > 0) {
      totalSize=Integer.parseInt(Util.parse(results.get(0).getWsItemPK().getConceptName()).getDocumentElement().getTextContent());
      if (maxSize > MAX_EXPORT_COUNT) {
        maxSize=MAX_EXPORT_COUNT;
      }
    }
    Mapping mapping=getWSItemMapping();
    for (int i=1; i <= maxSize; i++) {
      WSItemPKsByCriteriaResponseResults item=results.get(i);
      WSItem wsitem=service.getItem(new WSGetItem(item.getWsItemPK()));
      StringWriter sw=new StringWriter();
      Marshaller marshaller=new Marshaller(sw);
      marshaller.setMapping(mapping);
      marshaller.marshal(wsitem);
      String uniqueId=pk.getPk() + ""String_Node_Str"" + wsitem.getConceptName();
      for (      String id : wsitem.getIds()) {
        uniqueId=uniqueId + ""String_Node_Str"" + id;
      }
      encodedID=URLEncoder.encode(uniqueId,""String_Node_Str"");
      writeString(tempFolderPath,sw.toString(),pk.getPk() + ""String_Node_Str"" + encodedID);
      items.add(TreeObject.DATACONTAINER_COTENTS + ""String_Node_Str"" + pk.getPk()+ ""String_Node_Str""+ encodedID);
      monitor.worked(1);
    }
    return totalSize;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return -1;
}",0.9963060686015832
147632,"protected void importClusterContents(IProgressMonitor monitor){
  String url=serverDef.getProtocol() + serverDef.getHost() + ""String_Node_Str""+ serverDef.getPort()+ ""String_Node_Str"";
  String userName=serverDef.getUser();
  String password=serverDef.getPasswd();
  Reader reader=null;
  List<File> files=getFilesOrderByRule();
  monitor.beginTask(Messages.ImportDataClusterAction_importProcessTitle,files.size() + 10);
  Map<String,List<String>> conceptMap=new LinkedHashMap<String,List<String>>();
  Unmarshaller unmarshaller=new Unmarshaller(WsItem.class);
  try {
    Mapping mapping=getWSItemMapping();
    unmarshaller.setWhitespacePreserve(true);
    unmarshaller.setMapping(mapping);
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage(),e);
    IStatus errStatus=new Status(IStatus.ERROR,RepositoryPlugin.PLUGIN_ID,Messages.ImportDataClusterAction_errorTitle,e);
    getResult().add(errStatus);
    return;
  }
  for (  File file : files) {
    String concept=""String_Node_Str"";
    try {
      reader=new InputStreamReader(new FileInputStream(file),""String_Node_Str"");
      WsItem wsItem=(WsItem)unmarshaller.unmarshal(reader);
      String key=wsItem.getWsDataClusterPK().getPk() + ""String_Node_Str"" + wsItem.getConceptName()+ ""String_Node_Str""+ wsItem.getDataModelName();
      List<String> list=null;
      list=conceptMap.get(key);
      if (list == null) {
        list=new ArrayList<String>();
        conceptMap.put(key,list);
      }
      String content=wsItem.getContent();
      list.add(content);
    }
 catch (    Exception e) {
      log.error(e.getLocalizedMessage(),e);
      String msg=Messages.bind(Messages.ImportDataClusterAction_importErrorMsg,concept,dName,e.getLocalizedMessage());
      IStatus errStatus=new Status(IStatus.ERROR,RepositoryPlugin.PLUGIN_ID,msg,e);
      getResult().add(errStatus);
      return;
    }
 finally {
      try {
        if (reader != null) {
          reader.close();
        }
      }
 catch (      Exception e) {
      }
    }
    monitor.worked(1);
  }
  for (  Entry<String,List<String>> entry : conceptMap.entrySet()) {
    String[] keys=entry.getKey().split(""String_Node_Str"");
    String cluster=keys[0];
    String concept=keys[1];
    String datamodel=keys[2];
    BulkloadClient bulkloadClient=new BulkloadClient(url,userName,password,null,cluster,concept,datamodel);
    bulkloadClient.setOptions(new BulkloadOptions(false,false,500));
    StringBuilder sb=new StringBuilder();
    for (    String xml : entry.getValue()) {
      sb.append(xml).append(""String_Node_Str"");
    }
    try {
      InputStreamMerger manager=bulkloadClient.load();
      InputStream bin=new ByteArrayInputStream(sb.toString().getBytes(""String_Node_Str""));
      manager.push(bin);
      manager.close();
    }
 catch (    Exception e) {
      log.error(e.getLocalizedMessage(),e);
      String msg=Messages.bind(Messages.ImportDataClusterAction_importErrorMsg,concept,dName,e.getLocalizedMessage());
      IStatus errStatus=new Status(IStatus.ERROR,RepositoryPlugin.PLUGIN_ID,msg,e);
      getResult().add(errStatus);
    }
    monitor.worked(1);
  }
  monitor.done();
  return;
}","protected void importClusterContents(IProgressMonitor monitor){
  String url=serverDef.getProtocol() + serverDef.getHost() + ""String_Node_Str""+ serverDef.getPort()+ ""String_Node_Str"";
  String userName=serverDef.getUser();
  String password=serverDef.getPasswd();
  Reader reader=null;
  List<File> files=getFilesOrderByRule();
  monitor.beginTask(Messages.ImportDataClusterAction_importProcessTitle,files.size() + 10);
  Map<String,List<String>> conceptMap=new LinkedHashMap<String,List<String>>();
  Unmarshaller unmarshaller=new Unmarshaller(WSItem.class);
  try {
    Mapping mapping=getWSItemMapping();
    unmarshaller.setWhitespacePreserve(true);
    unmarshaller.setMapping(mapping);
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage(),e);
    IStatus errStatus=new Status(IStatus.ERROR,RepositoryPlugin.PLUGIN_ID,Messages.ImportDataClusterAction_errorTitle,e);
    getResult().add(errStatus);
    return;
  }
  for (  File file : files) {
    String concept=""String_Node_Str"";
    try {
      reader=new InputStreamReader(new FileInputStream(file),""String_Node_Str"");
      WSItem wsItem=(WSItem)unmarshaller.unmarshal(reader);
      String key=wsItem.getWsDataClusterPK().getPk() + ""String_Node_Str"" + wsItem.getConceptName()+ ""String_Node_Str""+ wsItem.getDataModelName();
      List<String> list=null;
      list=conceptMap.get(key);
      if (list == null) {
        list=new ArrayList<String>();
        conceptMap.put(key,list);
      }
      String content=wsItem.getContent();
      list.add(content);
    }
 catch (    Exception e) {
      log.error(e.getLocalizedMessage(),e);
      String msg=Messages.bind(Messages.ImportDataClusterAction_importErrorMsg,concept,dName,e.getLocalizedMessage());
      IStatus errStatus=new Status(IStatus.ERROR,RepositoryPlugin.PLUGIN_ID,msg,e);
      getResult().add(errStatus);
      return;
    }
 finally {
      try {
        if (reader != null) {
          reader.close();
        }
      }
 catch (      Exception e) {
      }
    }
    monitor.worked(1);
  }
  for (  Entry<String,List<String>> entry : conceptMap.entrySet()) {
    String[] keys=entry.getKey().split(""String_Node_Str"");
    String cluster=keys[0];
    String concept=keys[1];
    String datamodel=keys[2];
    BulkloadClient bulkloadClient=new BulkloadClient(url,userName,password,null,cluster,concept,datamodel);
    bulkloadClient.setOptions(new BulkloadOptions(false,false,500));
    StringBuilder sb=new StringBuilder();
    for (    String xml : entry.getValue()) {
      sb.append(xml).append(""String_Node_Str"");
    }
    try {
      InputStreamMerger manager=bulkloadClient.load();
      InputStream bin=new ByteArrayInputStream(sb.toString().getBytes(""String_Node_Str""));
      manager.push(bin);
      manager.close();
    }
 catch (    Exception e) {
      log.error(e.getLocalizedMessage(),e);
      String msg=Messages.bind(Messages.ImportDataClusterAction_importErrorMsg,concept,dName,e.getLocalizedMessage());
      IStatus errStatus=new Status(IStatus.ERROR,RepositoryPlugin.PLUGIN_ID,msg,e);
      getResult().add(errStatus);
    }
    monitor.worked(1);
  }
  monitor.done();
  return;
}",0.9990467111534796
147633,"@Override public Object[] getPropertys(Object obj){
  if (obj == null || !(obj instanceof WsRoutingRuleOperator)) {
    throw new IllegalArgumentException();
  }
  WsRoutingRuleOperator operator=(WsRoutingRuleOperator)obj;
  return new Object[]{operator.value()};
}","@Override public Object[] getPropertys(Object obj){
  if (obj == null || !(obj instanceof WSRoutingRuleOperator)) {
    throw new IllegalArgumentException();
  }
  WSRoutingRuleOperator operator=(WSRoutingRuleOperator)obj;
  return new Object[]{operator.value()};
}",0.9886792452830188
147634,"public Class getWSObjectClass(){
  return WsDataCluster.class;
}","public Class getWSObjectClass(){
  return WSDataCluster.class;
}",0.984375
147635,"public Class<?> getWSObjectClass(){
  return WsDataModel.class;
}","public Class<?> getWSObjectClass(){
  return WSDataModel.class;
}",0.9846153846153848
147636,"public Class<?> getWSObjectClass(){
  return WsMenu.class;
}","public Class<?> getWSObjectClass(){
  return WSMenu.class;
}",0.9833333333333332
147637,"public Class getWSObjectClass(){
  return WsRoutingRule.class;
}","public Class getWSObjectClass(){
  return WSRoutingRule.class;
}",0.984375
147638,"public Class getWSObjectClass(){
  return WsStoredProcedure.class;
}","public Class getWSObjectClass(){
  return WSStoredProcedure.class;
}",0.9852941176470588
147639,"public Class getWSObjectClass(){
  return WsTransformerV2.class;
}","public Class getWSObjectClass(){
  return WSTransformerV2.class;
}",0.9848484848484848
147640,"public Class<?> getWSObjectClass(){
  return WsView.class;
}","public Class<?> getWSObjectClass(){
  return WSView.class;
}",0.9833333333333332
147641,"protected void inputChanged(Object component){
  if (component instanceof XSDAnnotation) {
    annotation=(XSDAnnotation)component;
    if (annotation.getContainer() instanceof XSDElementDeclaration) {
      declaration=(XSDElementDeclaration)annotation.getContainer();
    }
 else     if (annotation.getContainer() instanceof XSDComplexTypeDefinition) {
      complexTypeDef=(XSDComplexTypeDefinition)annotation.getContainer();
    }
  }
  if (component instanceof XSDElementDeclaration) {
    declaration=(XSDElementDeclaration)component;
    if (declaration.getAnnotation() == null) {
      XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
      annotation=factory.createXSDAnnotation();
    }
 else {
      annotation=declaration.getAnnotation();
    }
  }
  if (component instanceof XSDComplexTypeDefinition) {
    complexTypeDef=(XSDComplexTypeDefinition)component;
    if (complexTypeDef.getAnnotation() == null) {
      XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
      annotation=factory.createXSDAnnotation();
    }
 else {
      annotation=complexTypeDef.getAnnotation();
    }
  }
  if (component instanceof XSDModelGroup) {
    XSDModelGroup group=(XSDModelGroup)component;
    if (group.getContainer().getContainer() instanceof XSDComplexTypeDefinition) {
      complexTypeDef=(XSDComplexTypeDefinition)group.getContainer().getContainer();
      if (complexTypeDef.getAnnotation() == null) {
        XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
        annotation=factory.createXSDAnnotation();
      }
 else {
        annotation=complexTypeDef.getAnnotation();
      }
    }
  }
  if (component instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)component).getTerm();
    if (term instanceof XSDElementDeclaration) {
      declaration=(XSDElementDeclaration)term;
      if (declaration.getAnnotation() == null) {
        XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
        annotation=factory.createXSDAnnotation();
      }
 else {
        annotation=declaration.getAnnotation();
      }
    }
  }
}","protected void inputChanged(Object component){
  if (component instanceof XSDAnnotation) {
    annotation=(XSDAnnotation)component;
    if (annotation.getContainer() instanceof XSDElementDeclaration) {
      declaration=(XSDElementDeclaration)annotation.getContainer();
    }
 else     if (annotation.getContainer() instanceof XSDComplexTypeDefinition) {
      complexTypeDef=(XSDComplexTypeDefinition)annotation.getContainer();
    }
  }
  if (component instanceof XSDElementDeclaration) {
    declaration=(XSDElementDeclaration)component;
    if (declaration.getAnnotation() == null) {
      XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
      annotation=factory.createXSDAnnotation();
    }
 else {
      annotation=declaration.getAnnotation();
    }
  }
  if (component instanceof XSDComplexTypeDefinition) {
    complexTypeDef=(XSDComplexTypeDefinition)component;
    componet=complexTypeDef;
    if (complexTypeDef.getAnnotation() == null) {
      XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
      annotation=factory.createXSDAnnotation();
    }
 else {
      annotation=complexTypeDef.getAnnotation();
    }
  }
  if (component instanceof XSDModelGroup) {
    XSDModelGroup group=(XSDModelGroup)component;
    if (group.getContainer().getContainer() instanceof XSDComplexTypeDefinition) {
      complexTypeDef=(XSDComplexTypeDefinition)group.getContainer().getContainer();
      if (complexTypeDef.getAnnotation() == null) {
        XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
        annotation=factory.createXSDAnnotation();
      }
 else {
        annotation=complexTypeDef.getAnnotation();
      }
    }
  }
  if (component instanceof XSDParticle) {
    XSDTerm term=((XSDParticle)component).getTerm();
    if (term instanceof XSDElementDeclaration) {
      declaration=(XSDElementDeclaration)term;
      if (declaration.getAnnotation() == null) {
        XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
        annotation=factory.createXSDAnnotation();
      }
 else {
        annotation=declaration.getAnnotation();
      }
    }
  }
}",0.9911377245508982
147642,"private boolean addAppInfo(String type,String value){
  if (declaration != null) {
    if (declaration.getAnnotation() == null) {
      declaration.setAnnotation(annotation);
    }
  }
 else   if (complexTypeDef != null) {
    if (complexTypeDef.getAnnotation() == null) {
      complexTypeDef.setAnnotation(annotation);
    }
  }
 else {
    return true;
  }
  Element appinfo=annotation.createApplicationInformation(type);
  Node text=appinfo.getOwnerDocument().createTextNode(value);
  appinfo.appendChild(text);
  annotation.getElement().appendChild(appinfo);
  hasChanged=true;
  return true;
}","private boolean addAppInfo(String type,String value){
  if (declaration != null) {
    if (declaration.getAnnotation() == null) {
      declaration.setAnnotation(annotation);
    }
  }
 else   if (complexTypeDef != null && type.startsWith(""String_Node_Str"")) {
    if (complexTypeDef.getAnnotation() == null) {
      complexTypeDef.setAnnotation(annotation);
    }
  }
 else {
    return true;
  }
  Element appinfo=annotation.createApplicationInformation(type);
  Node text=appinfo.getOwnerDocument().createTextNode(value);
  appinfo.appendChild(text);
  annotation.getElement().appendChild(appinfo);
  hasChanged=true;
  return true;
}",0.9692556634304208
147643,"@Override public void focusLost(FocusEvent e){
  boolean isComboSelected=false;
  CCombo comboBox=getComboBox();
  int selectionIndex=comboBox.getSelectionIndex();
  if (selectionIndex != -1 && selectionIndex < comboBox.getItemCount()) {
    if (comboBox.getItem(selectionIndex).equals(user_var)) {
      isComboSelected=true;
    }
  }
  if (!getButton().isFocusControl() && !isComboSelected) {
    UserSecurityComboBoxDialogCellEditor.this.focusLost();
  }
}","@Override public void focusLost(FocusEvent e){
}",0.1889763779527559
147644,"@Override protected FocusListener getComboFocusListener(){
  return new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      boolean isComboSelected=false;
      CCombo comboBox=getComboBox();
      int selectionIndex=comboBox.getSelectionIndex();
      if (selectionIndex != -1 && selectionIndex < comboBox.getItemCount()) {
        if (comboBox.getItem(selectionIndex).equals(user_var)) {
          isComboSelected=true;
        }
      }
      if (!getButton().isFocusControl() && !isComboSelected) {
        UserSecurityComboBoxDialogCellEditor.this.focusLost();
      }
    }
  }
;
}","@Override protected FocusListener getComboFocusListener(){
  return new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
    }
  }
;
}",0.40625
147645,"@Override protected Control createControl(Composite parent){
  Font font=parent.getFont();
  Color bg=parent.getBackground();
  editor=new Composite(parent,getStyle());
  editor.setFont(font);
  editor.setBackground(bg);
  editor.setLayout(new DialogCellLayout());
  contents=createContents(editor);
  updateContents(value);
  button=createButton(editor);
  button.setFont(font);
  button.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.character == '\u001b') {
        fireCancelEditor();
      }
    }
  }
);
  button.addFocusListener(getButtonFocusListener());
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      button.removeFocusListener(getButtonFocusListener());
      Object newValue=openDialogBox(editor);
      button.addFocusListener(getButtonFocusListener());
      if (newValue != null) {
        boolean newValidState=isCorrect(newValue);
        if (newValidState) {
          markDirty();
          doSetValue(newValue);
        }
 else {
          setErrorMessage(MessageFormat.format(getErrorMessage(),new Object[]{newValue.toString()}));
        }
        fireApplyEditorValue();
      }
    }
  }
);
  setValueValid(true);
  return editor;
}","@Override protected Control createControl(Composite parent){
  Font font=parent.getFont();
  Color bg=parent.getBackground();
  editor=new Composite(parent,getStyle());
  editor.setFont(font);
  editor.setBackground(bg);
  editor.setLayout(new DialogCellLayout());
  contents=createContents(editor);
  updateContents(value);
  button=createButton(editor);
  button.setFont(font);
  button.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.character == '\u001b') {
        fireCancelEditor();
      }
    }
  }
);
  button.addFocusListener(getButtonFocusListener());
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      button.removeFocusListener(getButtonFocusListener());
      Object newValue=openDialogBox(editor);
      button.addFocusListener(getButtonFocusListener());
      if (newValue != null) {
        boolean newValidState=isCorrect(newValue);
        if (newValidState) {
          markDirty();
          doSetValue(newValue);
        }
 else {
          setErrorMessage(MessageFormat.format(getErrorMessage(),new Object[]{newValue.toString()}));
        }
      }
    }
  }
);
  if (parent instanceof Table) {
    ((Table)parent).addMouseListener(new MouseAdapter(){
      @Override public void mouseUp(      MouseEvent e){
        if (!isMouseInControl(e)) {
          focusLost();
        }
      }
    }
);
  }
  setValueValid(true);
  return editor;
}",0.8702838663312972
147646,"@Override public void focusLost(FocusEvent e){
  boolean isComboSelected=false;
  CCombo comboBox=getComboBox();
  int selectionIndex=comboBox.getSelectionIndex();
  if (selectionIndex != -1 && selectionIndex < comboBox.getItemCount()) {
    if (comboBox.getItem(selectionIndex).equals(user_var)) {
      isComboSelected=true;
    }
  }
  if (!getButton().isFocusControl() && !isComboSelected) {
    UserSecurityComboBoxDialogCellEditor.this.focusLost();
  }
}","@Override public void focusLost(FocusEvent e){
}",0.1889763779527559
147647,"@Override protected FocusListener getComboFocusListener(){
  return new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      boolean isComboSelected=false;
      CCombo comboBox=getComboBox();
      int selectionIndex=comboBox.getSelectionIndex();
      if (selectionIndex != -1 && selectionIndex < comboBox.getItemCount()) {
        if (comboBox.getItem(selectionIndex).equals(user_var)) {
          isComboSelected=true;
        }
      }
      if (!getButton().isFocusControl() && !isComboSelected) {
        UserSecurityComboBoxDialogCellEditor.this.focusLost();
      }
    }
  }
;
}","@Override protected FocusListener getComboFocusListener(){
  return new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
    }
  }
;
}",0.40625
147648,"@Override protected Control createControl(Composite parent){
  Font font=parent.getFont();
  Color bg=parent.getBackground();
  editor=new Composite(parent,getStyle());
  editor.setFont(font);
  editor.setBackground(bg);
  editor.setLayout(new DialogCellLayout());
  contents=createContents(editor);
  updateContents(value);
  button=createButton(editor);
  button.setFont(font);
  button.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.character == '\u001b') {
        fireCancelEditor();
      }
    }
  }
);
  button.addFocusListener(getButtonFocusListener());
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      button.removeFocusListener(getButtonFocusListener());
      Object newValue=openDialogBox(editor);
      button.addFocusListener(getButtonFocusListener());
      if (newValue != null) {
        boolean newValidState=isCorrect(newValue);
        if (newValidState) {
          markDirty();
          doSetValue(newValue);
        }
 else {
          setErrorMessage(MessageFormat.format(getErrorMessage(),new Object[]{newValue.toString()}));
        }
        fireApplyEditorValue();
      }
    }
  }
);
  setValueValid(true);
  return editor;
}","@Override protected Control createControl(Composite parent){
  Font font=parent.getFont();
  Color bg=parent.getBackground();
  editor=new Composite(parent,getStyle());
  editor.setFont(font);
  editor.setBackground(bg);
  editor.setLayout(new DialogCellLayout());
  contents=createContents(editor);
  updateContents(value);
  button=createButton(editor);
  button.setFont(font);
  button.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.character == '\u001b') {
        fireCancelEditor();
      }
    }
  }
);
  button.addFocusListener(getButtonFocusListener());
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      button.removeFocusListener(getButtonFocusListener());
      Object newValue=openDialogBox(editor);
      button.addFocusListener(getButtonFocusListener());
      if (newValue != null) {
        boolean newValidState=isCorrect(newValue);
        if (newValidState) {
          markDirty();
          doSetValue(newValue);
        }
 else {
          setErrorMessage(MessageFormat.format(getErrorMessage(),new Object[]{newValue.toString()}));
        }
      }
    }
  }
);
  if (parent instanceof Table) {
    ((Table)parent).addMouseListener(new MouseAdapter(){
      @Override public void mouseUp(      MouseEvent e){
        if (!isMouseInControl(e)) {
          focusLost();
        }
      }
    }
);
  }
  setValueValid(true);
  return editor;
}",0.8702838663312972
147649,"public List<URL> getTalendRoutines(){
  return FilesUtils.getFilesFromFolder(Activator.getDefault().getBundle(),""String_Node_Str"",""String_Node_Str"");
}","public List<URL> getTalendRoutines(){
  return Collections.emptyList();
}",0.5267857142857143
147650,"private void createTable(Composite mainComp){
  int style=SWT.MULTI | SWT.BORDER | SWT.H_SCROLL| SWT.FULL_SELECTION| SWT.HIDE_SELECTION;
  resultsViewer=new TableViewer(mainComp,style);
  resultsViewer.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  resultsViewer.getTable().setHeaderVisible(true);
  resultsViewer.getTable().setLinesVisible(true);
  resultsViewer.setContentProvider(getContentProvider());
  TableViewerColumn column=new TableViewerColumn(resultsViewer,SWT.NONE);
  column.getColumn().setText(Messages.UpdateAutoIncrementDialog_entity);
  column.getColumn().setResizable(true);
  column.getColumn().setWidth(300);
  column.setLabelProvider(new CustomedLabelProvider(0));
  column.setEditingSupport(null);
  column=new TableViewerColumn(resultsViewer,SWT.NONE);
  column.getColumn().setText(Messages.UpdateAutoIncrementDialog_value);
  column.getColumn().setResizable(true);
  column.getColumn().setWidth(100);
  column.setLabelProvider(new CustomedLabelProvider(1));
  column.setEditingSupport(new EditingSupport(resultsViewer){
    @Override protected CellEditor getCellEditor(    Object element){
      return new VerificableTextCellEditor(resultsViewer.getTable());
    }
    @Override protected boolean canEdit(    Object element){
      return true;
    }
    @Override protected Object getValue(    Object element){
      Line line=(Line)element;
      return line.keyValues.get(1).value;
    }
    @Override protected void setValue(    Object element,    Object value){
      Line line=(Line)element;
      line.keyValues.get(1).value=value.toString();
      resultsViewer.refresh();
    }
  }
);
  resultsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)resultsViewer.getSelection();
      resetBtn.setEnabled(!selection.isEmpty());
    }
  }
);
  List<Line> lines=getInput();
  resultsViewer.setInput(lines);
}","private void createTable(Composite mainComp){
  int style=SWT.MULTI | SWT.BORDER | SWT.H_SCROLL| SWT.FULL_SELECTION;
  resultsViewer=new TableViewer(mainComp,style);
  resultsViewer.getTable().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  resultsViewer.getTable().setHeaderVisible(true);
  resultsViewer.getTable().setLinesVisible(true);
  resultsViewer.setContentProvider(getContentProvider());
  TableViewerColumn column=new TableViewerColumn(resultsViewer,SWT.NONE);
  column.getColumn().setText(Messages.UpdateAutoIncrementDialog_entity);
  column.getColumn().setResizable(true);
  column.getColumn().setWidth(300);
  column.setLabelProvider(new CustomedLabelProvider(0));
  column.setEditingSupport(null);
  column=new TableViewerColumn(resultsViewer,SWT.NONE);
  column.getColumn().setText(Messages.UpdateAutoIncrementDialog_value);
  column.getColumn().setResizable(true);
  column.getColumn().setWidth(100);
  column.setLabelProvider(new CustomedLabelProvider(1));
  column.setEditingSupport(new EditingSupport(resultsViewer){
    @Override protected CellEditor getCellEditor(    Object element){
      return new VerificableTextCellEditor(resultsViewer.getTable());
    }
    @Override protected boolean canEdit(    Object element){
      return true;
    }
    @Override protected Object getValue(    Object element){
      Line line=(Line)element;
      return line.keyValues.get(1).value;
    }
    @Override protected void setValue(    Object element,    Object value){
      Line line=(Line)element;
      line.keyValues.get(1).value=value.toString();
      resultsViewer.refresh();
    }
  }
);
  resultsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)resultsViewer.getSelection();
      resetBtn.setEnabled(!selection.isEmpty());
    }
  }
);
  List<Line> lines=getInput();
  resultsViewer.setInput(lines);
}",0.9949849548645938
147651,"private void removeLastServerInfo(Item item){
  Property property=item.getProperty();
  EMap additionalProperties=property.getAdditionalProperties();
  if (additionalProperties != null) {
    RepositoryResourceUtil.setLastServerDef(item,null);
    ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      item=RepositoryResourceUtil.assertItem(item);
      factory.save(item,true);
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}","private void removeLastServerInfo(Item item){
  Property property=item.getProperty();
  EMap additionalProperties=property.getAdditionalProperties();
  if (additionalProperties != null && additionalProperties.containsKey(RepositoryResourceUtil.PROP_LAST_SERVER_DEF)) {
    RepositoryResourceUtil.setLastServerDef(item,null);
    ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      item=RepositoryResourceUtil.assertItem(item);
      factory.save(item,true);
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}",0.9250693802035151
147652,"public static List<IRepositoryViewObject> findViewObjectsByNamePattern(ERepositoryObjectType type,String namePattern,boolean withDeleted){
  if (type == null || namePattern == null) {
    throw new IllegalArgumentException();
  }
  List<IRepositoryViewObject> viewObjects=findAllViewObjects(type,true,withDeleted);
  if (viewObjects != null) {
    List<IRepositoryViewObject> foundViewObjs=new LinkedList<IRepositoryViewObject>();
    Pattern pattern=Pattern.compile(namePattern);
    for (    IRepositoryViewObject viewObj : viewObjects) {
      String label=viewObj.getProperty().getLabel();
      if (pattern.matcher(label).matches()) {
        foundViewObjs.add(viewObj);
      }
    }
    if (!foundViewObjs.isEmpty()) {
      return foundViewObjs;
    }
  }
  return null;
}","public static List<IRepositoryViewObject> findViewObjectsByNamePattern(ERepositoryObjectType type,String namePattern,boolean withDeleted){
  if (type == null || namePattern == null) {
    throw new IllegalArgumentException();
  }
  List<IRepositoryViewObject> viewObjects=findAllViewObjects(type,true,withDeleted);
  if (viewObjects != null) {
    List<IRepositoryViewObject> foundViewObjs=new LinkedList<IRepositoryViewObject>();
    Pattern pattern=Pattern.compile(namePattern);
    for (    IRepositoryViewObject viewObj : viewObjects) {
      String label=viewObj.getProperty().getLabel();
      if (pattern.matcher(label).matches()) {
        foundViewObjs.add(viewObj);
      }
    }
    return foundViewObjs;
  }
  return null;
}",0.9538258575197888
147653,"private void initListener2BtnEditField(){
  lBtnEditFieldListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FieldWrapper[] selectedFields=getSelectedFields();
      if (selectedFields.length == 0)       return;
      try {
        KeyWrapper[] selectedKeys=getSelectedKeys();
        List<String> topChilds=getTopChildrenNames();
        List<String> fieldNames=getFieldNames(selectedKeys[0].getSourceKey());
        for (        String fdv : fieldNames) {
          if (topChilds.contains(fdv))           topChilds.remove(fdv);
        }
        SelectFieldDialog selectFieldDlg=new SelectFieldDialog(getShell(),""String_Node_Str"",topChilds,selectedFields[0].getXPath());
        if (selectFieldDlg.open() != Window.OK)         return;
        selectedFields[0].setXPath(selectFieldDlg.getField().trim());
        tvFields.refresh();
        if (section != null)         section.autoCommit();
      }
 catch (      Exception exp) {
        log.error(exp.getMessage(),exp);
      }
    }
  }
;
}","private void initListener2BtnEditField(){
  lBtnEditFieldListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FieldWrapper[] selectedFields=getSelectedFields();
      if (selectedFields.length == 0) {
        return;
      }
      try {
        KeyWrapper[] selectedKeys=getSelectedKeys();
        List<String> topChilds=getTopChildrenNames();
        List<String> fieldNames=getFieldNames(selectedKeys[0].getSourceKey());
        for (        String fdv : fieldNames) {
          if (topChilds.contains(fdv)) {
            topChilds.remove(fdv);
          }
        }
        SelectFieldDialog selectFieldDlg=new SelectFieldDialog(getShell(),""String_Node_Str"",topChilds,selectedFields[0].getXPath());
        if (selectFieldDlg.open() != Window.OK) {
          return;
        }
        selectedFields[0].setXPath(selectFieldDlg.getField().trim());
        tvFields.refresh();
        if (section != null) {
          section.autoCommit();
        }
      }
 catch (      Exception exp) {
        log.error(exp.getMessage(),exp);
      }
    }
  }
;
}",0.9739292364990688
147654,"private void initListener2ComboSelector(){
  lComboSelectorMouseListener=new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      initComboSelectorContents();
    }
  }
;
  lComboSelectorModifyListner=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length > 0 && selectedKeys[0].getSelector().equals(comboSelector.getText().trim()))       return;
      if (!isSelectorValid(comboSelector.getText().trim())) {
        if (selectedKeys.length > 0)         comboSelector.setText(selectedKeys[0].getSelector());
        return;
      }
      getSelectedKeys()[0].setSelector(comboSelector.getText().trim());
      if (section != null)       section.autoCommit();
    }
  }
;
}","private void initListener2ComboSelector(){
  lComboSelectorMouseListener=new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      initComboSelectorContents();
    }
  }
;
  lComboSelectorModifyListner=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length > 0 && selectedKeys[0].getSelector().equals(comboSelector.getText().trim())) {
        return;
      }
      if (!isSelectorValid(comboSelector.getText().trim())) {
        if (selectedKeys.length > 0) {
          comboSelector.setText(selectedKeys[0].getSelector());
        }
        return;
      }
      getSelectedKeys()[0].setSelector(comboSelector.getText().trim());
      if (section != null) {
        section.autoCommit();
      }
    }
  }
;
}",0.9765432098765432
147655,"private void initListener2BtnAddKey(){
  lBtnAddKeyListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        List<String> topChilds=getTopChildrenNames();
        IdentityConstraintInputDialog dialog=new IdentityConstraintInputDialog(entityWrapper.getSourceEntity(),getShell(),Messages.EntityKeyConfigComposite_AddANewKey,topChilds,entityWrapper.getSourceEntityName());
        dialog.setInputValidator(new NewKeyWrapperValidator(entityWrapper));
        if (dialog.open() != Window.OK)         return;
        KeyWrapper newKeyWrapper=new KeyWrapper(dialog.getKeyName(),""String_Node_Str"",dialog.getType(),new FieldWrapper[]{new FieldWrapper(dialog.getFieldName())});
        entityWrapper.addKey(newKeyWrapper);
        tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
        tvKeys.setSelection(new StructuredSelection(newKeyWrapper));
        if (section != null)         section.autoCommit();
      }
 catch (      Exception exp) {
        log.error(exp.getMessage(),exp);
      }
    }
  }
;
}","private void initListener2BtnAddKey(){
  lBtnAddKeyListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        List<String> topChilds=getTopChildrenNames();
        IdentityConstraintInputDialog dialog=new IdentityConstraintInputDialog(entityWrapper.getSourceEntity(),getShell(),Messages.EntityKeyConfigComposite_AddANewKey,topChilds,entityWrapper.getSourceEntityName());
        dialog.setInputValidator(new NewKeyWrapperValidator(entityWrapper));
        if (dialog.open() != Window.OK) {
          return;
        }
        KeyWrapper newKeyWrapper=new KeyWrapper(dialog.getKeyName(),""String_Node_Str"",dialog.getType(),new FieldWrapper[]{new FieldWrapper(dialog.getFieldName())});
        entityWrapper.addKey(newKeyWrapper);
        tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
        tvKeys.setSelection(new StructuredSelection(newKeyWrapper));
        if (section != null) {
          section.autoCommit();
        }
      }
 catch (      Exception exp) {
        log.error(exp.getMessage(),exp);
      }
    }
  }
;
}",0.987037037037037
147656,"public void setXSDElement(EntityWrapper sourceEntityWrapper){
  entityWrapper=sourceEntityWrapper;
  removeUIListeners();
  tvKeys.setInput(new ArrayList<KeyWrapper>());
  if (entityWrapper != null)   tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
  initUIContents();
  addUIListeners();
  selectFirstKeyInCurKeyList();
  refreshUI();
}","public void setXSDElement(EntityWrapper sourceEntityWrapper){
  entityWrapper=sourceEntityWrapper;
  removeUIListeners();
  tvKeys.setInput(new ArrayList<KeyWrapper>());
  if (entityWrapper != null) {
    tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
  }
  initUIContents();
  addUIListeners();
  selectFirstKeyInCurKeyList();
  refreshUI();
}",0.9885714285714284
147657,"private FieldWrapper[] getSelectedFields(){
  if (!isFieldSelected())   return new FieldWrapper[0];
  List<FieldWrapper> results=new ArrayList<FieldWrapper>();
  for (  Object eachSelectedObj : ((IStructuredSelection)tvFields.getSelection()).toArray()) {
    if (eachSelectedObj instanceof FieldWrapper)     results.add((FieldWrapper)eachSelectedObj);
  }
  return results.toArray(new FieldWrapper[0]);
}","private FieldWrapper[] getSelectedFields(){
  if (!isFieldSelected()) {
    return new FieldWrapper[0];
  }
  List<FieldWrapper> results=new ArrayList<FieldWrapper>();
  for (  Object eachSelectedObj : ((IStructuredSelection)tvFields.getSelection()).toArray()) {
    if (eachSelectedObj instanceof FieldWrapper) {
      results.add((FieldWrapper)eachSelectedObj);
    }
  }
  return results.toArray(new FieldWrapper[0]);
}",0.9782082324455206
147658,"private String isKeyNameValid(String keyName,KeyWrapper keyBeforeModified){
  if (entityWrapper == null)   return Messages.EntityKeyConfigComposite_EntityCannotbeNull;
  return new EditKeyWrapperNameValidator(entityWrapper,keyBeforeModified).isValid(keyName);
}","private String isKeyNameValid(String keyName,KeyWrapper keyBeforeModified){
  if (entityWrapper == null) {
    return Messages.EntityKeyConfigComposite_EntityCannotbeNull;
  }
  return new EditKeyWrapperNameValidator(entityWrapper,keyBeforeModified).isValid(keyName);
}",0.9849056603773584
147659,"@Override public void widgetSelected(SelectionEvent e){
  try {
    List<String> topChilds=getTopChildrenNames();
    IdentityConstraintInputDialog dialog=new IdentityConstraintInputDialog(entityWrapper.getSourceEntity(),getShell(),Messages.EntityKeyConfigComposite_AddANewKey,topChilds,entityWrapper.getSourceEntityName());
    dialog.setInputValidator(new NewKeyWrapperValidator(entityWrapper));
    if (dialog.open() != Window.OK)     return;
    KeyWrapper newKeyWrapper=new KeyWrapper(dialog.getKeyName(),""String_Node_Str"",dialog.getType(),new FieldWrapper[]{new FieldWrapper(dialog.getFieldName())});
    entityWrapper.addKey(newKeyWrapper);
    tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
    tvKeys.setSelection(new StructuredSelection(newKeyWrapper));
    if (section != null)     section.autoCommit();
  }
 catch (  Exception exp) {
    log.error(exp.getMessage(),exp);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  try {
    List<String> topChilds=getTopChildrenNames();
    IdentityConstraintInputDialog dialog=new IdentityConstraintInputDialog(entityWrapper.getSourceEntity(),getShell(),Messages.EntityKeyConfigComposite_AddANewKey,topChilds,entityWrapper.getSourceEntityName());
    dialog.setInputValidator(new NewKeyWrapperValidator(entityWrapper));
    if (dialog.open() != Window.OK) {
      return;
    }
    KeyWrapper newKeyWrapper=new KeyWrapper(dialog.getKeyName(),""String_Node_Str"",dialog.getType(),new FieldWrapper[]{new FieldWrapper(dialog.getFieldName())});
    entityWrapper.addKey(newKeyWrapper);
    tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
    tvKeys.setSelection(new StructuredSelection(newKeyWrapper));
    if (section != null) {
      section.autoCommit();
    }
  }
 catch (  Exception exp) {
    log.error(exp.getMessage(),exp);
  }
}",0.9889867841409692
147660,"@Override public String isValid(String keyName,XSDIdentityConstraintCategory type,XSDElementDeclaration element){
  if (keyName == null || ""String_Node_Str"".equals(keyName.trim()))   return Messages.EntityKeyConfigComposite_ValidInfo4;
  for (  XSDIdentityConstraintDefinition eachKey : getSchema().getIdentityConstraintDefinitions()) {
    if (eachKey.getContainer().equals(element)) {
      continue;
    }
    if (eachKey.getName().equals(keyName)) {
      return Messages.bind(Messages.EntityKeyConfigComposite_ValidInfo5,keyName);
    }
  }
  for (  KeyWrapper eachKeyWrapper : entityWrapper.getKeys()) {
    if (type.equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL) && eachKeyWrapper.getType().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
      return Messages.EntityKeyConfigComposite_ValidInfo6;
    }
    if (eachKeyWrapper.getName().equals(keyName)) {
      return Messages.bind(Messages.EntityKeyConfigComposite_ValidInfo7,keyName);
    }
  }
  return null;
}","@Override public String isValid(String keyName,XSDIdentityConstraintCategory type,XSDElementDeclaration element){
  if (keyName == null || ""String_Node_Str"".equals(keyName.trim())) {
    return Messages.EntityKeyConfigComposite_ValidInfo4;
  }
  for (  XSDIdentityConstraintDefinition eachKey : getSchema().getIdentityConstraintDefinitions()) {
    if (eachKey.getContainer().equals(element)) {
      continue;
    }
    if (eachKey.getName().equals(keyName)) {
      return Messages.bind(Messages.EntityKeyConfigComposite_ValidInfo5,keyName);
    }
  }
  for (  KeyWrapper eachKeyWrapper : entityWrapper.getKeys()) {
    if (type.equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL) && eachKeyWrapper.getType().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL)) {
      return Messages.EntityKeyConfigComposite_ValidInfo6;
    }
    if (eachKeyWrapper.getName().equals(keyName)) {
      return Messages.bind(Messages.EntityKeyConfigComposite_ValidInfo7,keyName);
    }
  }
  return null;
}",0.9959555106167848
147661,"private void initListener2BtnRemoveField(){
  lBtnRemoveFieldListner=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length == 0)       return;
      FieldWrapper[] selectedFields=getSelectedFields();
      if (selectedFields.length == 0)       return;
      if (getAllFields().length == selectedFields.length) {
        MessageDialog.openWarning(getShell(),Messages.Warning,Messages.EntityKeyConfigComposite_WarningMsg);
        return;
      }
      for (      FieldWrapper eachRemovedField : selectedFields)       selectedKeys[0].removeField(eachRemovedField);
      tvFields.setInput(Arrays.asList(selectedKeys[0].getFields()));
      if (section != null)       section.autoCommit();
    }
  }
;
}","private void initListener2BtnRemoveField(){
  lBtnRemoveFieldListner=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length == 0) {
        return;
      }
      FieldWrapper[] selectedFields=getSelectedFields();
      if (selectedFields.length == 0) {
        return;
      }
      if (getAllFields().length == selectedFields.length) {
        MessageDialog.openWarning(getShell(),Messages.Warning,Messages.EntityKeyConfigComposite_WarningMsg);
        return;
      }
      for (      FieldWrapper eachRemovedField : selectedFields) {
        selectedKeys[0].removeField(eachRemovedField);
      }
      tvFields.setInput(Arrays.asList(selectedKeys[0].getFields()));
      if (section != null) {
        section.autoCommit();
      }
    }
  }
;
}",0.9690107270560192
147662,"public void modifyText(ModifyEvent e){
  KeyWrapper[] selectedKeys=getSelectedKeys();
  if (selectedKeys.length > 0 && selectedKeys[0].getSelector().equals(comboSelector.getText().trim()))   return;
  if (!isSelectorValid(comboSelector.getText().trim())) {
    if (selectedKeys.length > 0)     comboSelector.setText(selectedKeys[0].getSelector());
    return;
  }
  getSelectedKeys()[0].setSelector(comboSelector.getText().trim());
  if (section != null)   section.autoCommit();
}","public void modifyText(ModifyEvent e){
  KeyWrapper[] selectedKeys=getSelectedKeys();
  if (selectedKeys.length > 0 && selectedKeys[0].getSelector().equals(comboSelector.getText().trim())) {
    return;
  }
  if (!isSelectorValid(comboSelector.getText().trim())) {
    if (selectedKeys.length > 0) {
      comboSelector.setText(selectedKeys[0].getSelector());
    }
    return;
  }
  getSelectedKeys()[0].setSelector(comboSelector.getText().trim());
  if (section != null) {
    section.autoCommit();
  }
}",0.973630831643002
147663,"private void initListener2BtnRemoveKey(){
  lBtnRemoveKeySelectionListner=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length == 0)       return;
      for (      KeyWrapper eachSelectedKey : selectedKeys)       entityWrapper.removeKey(eachSelectedKey);
      tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
      selectFirstKeyInCurKeyList();
      if (section != null)       section.autoCommit();
    }
  }
;
}","private void initListener2BtnRemoveKey(){
  lBtnRemoveKeySelectionListner=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length == 0) {
        return;
      }
      for (      KeyWrapper eachSelectedKey : selectedKeys) {
        entityWrapper.removeKey(eachSelectedKey);
      }
      tvKeys.setInput(Arrays.asList(entityWrapper.getKeys()));
      selectFirstKeyInCurKeyList();
      if (section != null) {
        section.autoCommit();
      }
    }
  }
;
}",0.9640287769784172
147664,"private boolean isSelectorValid(String selector){
  if (selector == null || ""String_Node_Str"".equals(selector.trim()))   return false;
  return true;
}","private boolean isSelectorValid(String selector){
  if (selector == null || ""String_Node_Str"".equals(selector.trim())) {
    return false;
  }
  return true;
}",0.9741935483870968
147665,"private void initListener2BtnAddField(){
  lBtnAddFieldListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        KeyWrapper[] selectedKeys=getSelectedKeys();
        if (selectedKeys.length == 0)         return;
        List<String> topChilds=getTopChildrenNames();
        List<String> fieldNames=getFieldNames(selectedKeys[0].getSourceKey());
        for (        String fdv : fieldNames) {
          if (topChilds.contains(fdv))           topChilds.remove(fdv);
        }
        SelectFieldDialog selectFieldDlg=new SelectFieldDialog(getShell(),Messages.EntityKeyConfigComposite_SelectOneField,topChilds,null);
        if (selectFieldDlg.open() != Window.OK)         return;
        if (""String_Node_Str"".equals(selectFieldDlg.getField().trim()))         return;
        FieldWrapper newFieldWrapper=new FieldWrapper(selectFieldDlg.getField().trim());
        selectedKeys[0].addField(newFieldWrapper);
        tvFields.setInput(Arrays.asList(selectedKeys[0].getFields()));
        tvFields.setSelection(new StructuredSelection(newFieldWrapper));
        if (section != null)         section.autoCommit();
      }
 catch (      Exception exp) {
        log.error(exp.getMessage(),exp);
      }
    }
  }
;
}","private void initListener2BtnAddField(){
  lBtnAddFieldListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        KeyWrapper[] selectedKeys=getSelectedKeys();
        if (selectedKeys.length == 0) {
          return;
        }
        List<String> topChilds=getTopChildrenNames();
        List<String> fieldNames=getFieldNames(selectedKeys[0].getSourceKey());
        for (        String fdv : fieldNames) {
          if (topChilds.contains(fdv)) {
            topChilds.remove(fdv);
          }
        }
        SelectFieldDialog selectFieldDlg=new SelectFieldDialog(getShell(),Messages.EntityKeyConfigComposite_SelectOneField,topChilds,null);
        if (selectFieldDlg.open() != Window.OK) {
          return;
        }
        if (""String_Node_Str"".equals(selectFieldDlg.getField().trim())) {
          return;
        }
        FieldWrapper newFieldWrapper=new FieldWrapper(selectFieldDlg.getField().trim());
        selectedKeys[0].addField(newFieldWrapper);
        tvFields.setInput(Arrays.asList(selectedKeys[0].getFields()));
        tvFields.setSelection(new StructuredSelection(newFieldWrapper));
        if (section != null) {
          section.autoCommit();
        }
      }
 catch (      Exception exp) {
        log.error(exp.getMessage(),exp);
      }
    }
  }
;
}",0.9724349157733536
147666,"private KeyWrapper[] getSelectedKeys(){
  if (!isKeySelected())   return new KeyWrapper[0];
  List<KeyWrapper> results=new ArrayList<KeyWrapper>();
  for (  Object eachSelectedObj : ((IStructuredSelection)tvKeys.getSelection()).toArray()) {
    if (eachSelectedObj instanceof KeyWrapper)     results.add((KeyWrapper)eachSelectedObj);
  }
  return results.toArray(new KeyWrapper[0]);
}","private KeyWrapper[] getSelectedKeys(){
  if (!isKeySelected()) {
    return new KeyWrapper[0];
  }
  List<KeyWrapper> results=new ArrayList<KeyWrapper>();
  for (  Object eachSelectedObj : ((IStructuredSelection)tvKeys.getSelection()).toArray()) {
    if (eachSelectedObj instanceof KeyWrapper) {
      results.add((KeyWrapper)eachSelectedObj);
    }
  }
  return results.toArray(new KeyWrapper[0]);
}",0.9770992366412212
147667,"private void initListener2TxtKeyName(){
  lTxtKeyNameModifyListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length > 0 && selectedKeys[0].getName().equals(txtKeyName.getText().trim()))       return;
      String errMsg=isKeyNameValid(txtKeyName.getText().trim(),selectedKeys[0]);
      lblKeyNameErrIndicator.setVisible(errMsg != null);
      lblKeyNameErrIndicator.setToolTipText(errMsg == null ? ""String_Node_Str"" : errMsg);
      getSelectedKeys()[0].setName(txtKeyName.getText().trim());
      tvKeys.refresh();
      if (section != null)       section.autoCommit();
    }
  }
;
}","private void initListener2TxtKeyName(){
  lTxtKeyNameModifyListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      KeyWrapper[] selectedKeys=getSelectedKeys();
      if (selectedKeys.length > 0 && selectedKeys[0].getName().equals(txtKeyName.getText().trim())) {
        return;
      }
      String errMsg=isKeyNameValid(txtKeyName.getText().trim(),selectedKeys[0]);
      lblKeyNameErrIndicator.setVisible(errMsg != null);
      lblKeyNameErrIndicator.setToolTipText(errMsg == null ? ""String_Node_Str"" : errMsg);
      getSelectedKeys()[0].setName(txtKeyName.getText().trim());
      tvKeys.refresh();
      if (section != null) {
        section.autoCommit();
      }
    }
  }
;
}",0.9799713876967096
147668,"private void openItem(IRepositoryViewObject viewObject){
  Item item=viewObject.getProperty().getItem();
  item=RepositoryResourceUtil.assertItem(item);
  IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
  if (configuration != null) {
    IRepositoryNodeActionProvider actionProvider=configuration.getActionProvider();
    if (actionProvider != null) {
      IRepositoryViewEditorInput editorInput=actionProvider.getOpenEditorInput(viewObject);
      if (editorInput != null) {
        if (page == null) {
          this.page=getCommonViewer().getCommonNavigator().getSite().getWorkbenchWindow().getActivePage();
        }
        MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
        if (!checkMissingJar(serverObject)) {
          return;
        }
        boolean selected=doSelectServer(item,editorInput);
        if (!selected) {
          return;
        }
        try {
          ERepositoryStatus status=factory.getStatus(item);
          if (factory.isEditableAndLockIfPossible(item)) {
            getCommonViewer().refresh(viewObject);
          }
          editorInput.setReadOnly(status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.READ_ONLY);
          if (!editorInput.isReadOnly()) {
            editorInput.setReadOnly(item.getState().isDeleted());
          }
          updateEditorInputVersionInfo(editorInput,viewObject);
          IEditorPart editor=this.page.openEditor(editorInput,editorInput.getEditorId());
          if (marker != null) {
            IDE.gotoMarker(editor,marker);
          }
        }
 catch (        PartInitException e) {
          log.error(e.getMessage(),e);
        }
      }
 else {
        AbstractRepositoryAction openAction=actionProvider.getOpenAction(viewObject);
        if (openAction != null) {
          openAction.selectionChanged(getStructuredSelection());
          openAction.run();
        }
      }
    }
  }
}","private void openItem(IRepositoryViewObject viewObject){
  Item item=viewObject.getProperty().getItem();
  item=RepositoryResourceUtil.assertItem(item);
  item=reloadIfResourceMissed(item);
  IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
  if (configuration != null) {
    IRepositoryNodeActionProvider actionProvider=configuration.getActionProvider();
    if (actionProvider != null) {
      IRepositoryViewEditorInput editorInput=actionProvider.getOpenEditorInput(viewObject);
      if (editorInput != null) {
        if (page == null) {
          this.page=getCommonViewer().getCommonNavigator().getSite().getWorkbenchWindow().getActivePage();
        }
        MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
        if (!checkMissingJar(serverObject)) {
          return;
        }
        boolean selected=doSelectServer(item,editorInput);
        if (!selected) {
          return;
        }
        try {
          ERepositoryStatus status=factory.getStatus(item);
          if (factory.isEditableAndLockIfPossible(item)) {
            getCommonViewer().refresh(viewObject);
          }
          editorInput.setReadOnly(status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.READ_ONLY);
          if (!editorInput.isReadOnly()) {
            editorInput.setReadOnly(item.getState().isDeleted());
          }
          updateEditorInputVersionInfo(editorInput,viewObject);
          IEditorPart editor=this.page.openEditor(editorInput,editorInput.getEditorId());
          if (marker != null) {
            IDE.gotoMarker(editor,marker);
          }
        }
 catch (        PartInitException e) {
          log.error(e.getMessage(),e);
        }
      }
 else {
        AbstractRepositoryAction openAction=actionProvider.getOpenAction(viewObject);
        if (openAction != null) {
          openAction.selectionChanged(getStructuredSelection());
          openAction.run();
        }
      }
    }
  }
}",0.9907523119220196
147669,"public List<Change> getChanges(){
  List<Change> changes=new LinkedList<ModelImpactAnalyseService.Change>();
  for (  Severity severity : getSeverities()) {
    if (severity.getChanges() != null) {
      for (      Change change : severity.getChanges()) {
        int s=0;
        if (severity instanceof SeverityHigh) {
          s=HIGH;
        }
 else         if (severity instanceof SeverityMedium) {
          s=MEDIUM;
        }
 else         if (severity instanceof SeverityLow) {
          s=LOW;
        }
        change.setSeverity(s);
        changes.add(change);
      }
    }
  }
  return changes;
}","public List<Change> getChanges(){
  List<Change> changes=new LinkedList<ModelImpactAnalyseService.Change>();
  if (getSeverities() != null) {
    for (    Severity severity : getSeverities()) {
      if (severity.getChanges() != null) {
        for (        Change change : severity.getChanges()) {
          int s=0;
          if (severity instanceof SeverityHigh) {
            s=HIGH;
          }
 else           if (severity instanceof SeverityMedium) {
            s=MEDIUM;
          }
 else           if (severity instanceof SeverityLow) {
            s=LOW;
          }
          change.setSeverity(s);
          changes.add(change);
        }
      }
    }
  }
  return changes;
}",0.8009223674096848
147670,"public List<Severity> getSeverities(){
  return this.severities;
}","public List<Severity> getSeverities(){
  return severities;
}",0.9606299212598424
147671,"@Override protected void openAnotherVersion(RepositoryNode node,boolean readonly){
  IRepositoryViewObject viewObject=node.getObject();
  Item item=viewObject.getProperty().getItem();
  IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
  if (configuration != null) {
    IRepositoryNodeActionProvider actionProvider=configuration.getActionProvider();
    if (actionProvider != null) {
      IRepositoryViewEditorInput editorInput=actionProvider.getOpenEditorInput(viewObject);
      editorInput.setReadOnly(readonly);
      if (editorInput != null) {
        IWorkbenchPage page=MDMRepositoryView.show().getCommonViewer().getCommonNavigator().getSite().getWorkbenchWindow().getActivePage();
        try {
          updateEditorInputVersionInfo(editorInput,viewObject);
          page.openEditor(editorInput,editorInput.getEditorId(),readonly);
          this.viewObject=viewObject;
        }
 catch (        PartInitException e) {
          log.error(e.getMessage(),e);
        }
      }
    }
  }
}","@Override protected void openAnotherVersion(final RepositoryNode node,boolean readonly){
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      IRepositoryViewObject viewObject=node.getObject();
      Item item=viewObject.getProperty().getItem();
      boolean latestVersion=isLatestVersion(viewObject);
      IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
      if (configuration != null) {
        IRepositoryNodeActionProvider actionProvider=configuration.getActionProvider();
        if (actionProvider != null) {
          IRepositoryViewEditorInput editorInput=actionProvider.getOpenEditorInput(viewObject);
          editorInput.setReadOnly(latestVersion);
          if (editorInput != null) {
            IWorkbenchPage page=MDMRepositoryView.show().getCommonViewer().getCommonNavigator().getSite().getWorkbenchWindow().getActivePage();
            try {
              updateEditorInputVersionInfo(editorInput,viewObject);
              page.openEditor(editorInput,editorInput.getEditorId(),!latestVersion);
              setViewObj(viewObject);
            }
 catch (            PartInitException e) {
              log.error(e.getMessage(),e);
            }
          }
        }
      }
    }
    private boolean isLatestVersion(    final IRepositoryViewObject viewObj){
      String selectedVersion=viewObj.getProperty().getVersion();
      int compare=VersionUtils.compareTo(selectedVersion,getOriginVersion());
      return compare >= 0;
    }
  }
);
}",0.7622350674373796
147672,"private void callModelService(AbstractDeployCommand cmd){
  ICommandParameter parameter=cmd.getParameter();
  if (parameter != null) {
    ImpactOperation operation=(ImpactOperation)parameter.getParameter();
    Boolean force=null;
    if (operation == ImpactOperation.APPLY_LOW_CHANGE) {
      force=false;
    }
 else     if (operation == ImpactOperation.RECREATE_TABLE) {
      force=true;
    }
    try {
      ModelImpactAnalyseService.updateModel(cmd.getServerDef(),cmd.getViewObject(),force);
    }
 catch (    XtentisException e) {
      log.error(e.getMessage(),e);
    }
  }
}","private void callModelService(AbstractDeployCommand cmd) throws XtentisException {
  ICommandParameter parameter=cmd.getParameter();
  if (parameter != null) {
    ImpactOperation operation=(ImpactOperation)parameter.getParameter();
    Boolean force=null;
    if (operation == ImpactOperation.APPLY_LOW_CHANGE) {
      force=false;
    }
 else     if (operation == ImpactOperation.RECREATE_TABLE) {
      force=true;
    }
    ModelImpactAnalyseService.updateModel(cmd.getServerDef(),cmd.getViewObject(),force);
  }
}",0.8931159420289855
147673,"public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if (selection.isEmpty()) {
    return;
  }
  int elem=getElementType(selection.getFirstElement());
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (  IAvailableModel model : availablemodels) {
    model.doubleClickOnElement(elem,DataModelMainPage.this,dataModelName);
  }
switch (elem) {
case 0:
    editConceptAction.run();
  break;
case 1:
editElementAction.run();
break;
case 2:
editComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case 8:
changeSubElementGroupAction.run();
break;
case 201:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 202:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 203:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 204:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 205:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 206:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 207:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 208:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 209:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 210:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 211:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 212:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 101:
setAnnotationLabelAction.run();
break;
case 102:
setAnnotationForeignKeyAction.run();
break;
case 103:
setAnnotationForeignKeyInfoAction.run();
break;
case 112:
setAnnotationFKFilterAction.run();
break;
case 104:
break;
case 105:
break;
case 106:
setAnnotationDescriptionsAction.run();
break;
case 110:
setFacetMsgAction.run();
break;
case 113:
setAnnotationDisplayFomatAction.run();
break;
case 114:
setAnnotationLookupFieldsAction.run();
break;
case 115:
setAnnotationPrimaryKeyInfoAction.run();
break;
case 107:
case 108:
case 116:
case 117:
if (exAdapter != null) {
exAdapter.doubleClick(elem);
}
case 121:
setAnnotationFKIntegrity.run();
break;
case 122:
setAnnotationFKIntegrityOverride.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) {
drillDownAdapter.goInto();
}
}
}","public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=((IStructuredSelection)viewer.getSelection());
  if (selection.isEmpty()) {
    return;
  }
  int elem=getElementType(selection.getFirstElement());
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (  IAvailableModel model : availablemodels) {
    model.doubleClickOnElement(elem,DataModelMainPage.this,dataModelName);
  }
switch (elem) {
case 0:
    editConceptAction.run();
  break;
case 1:
editElementAction.run();
break;
case 2:
editComplexTypeAction.run();
break;
case 3:
editIdentityConstraintAction.run();
break;
case 4:
editXPathAction.run();
break;
case 5:
changeBaseTypeAction.run();
break;
case 6:
setAnnotationDescriptionsAction.run();
break;
case 7:
editParticleAction.run();
break;
case 8:
changeSubElementGroupAction.run();
break;
case 201:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 202:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 203:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 204:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 205:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 206:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 207:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 208:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 209:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 210:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 211:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 212:
initxsdEditFacetAction(""String_Node_Str"");
break;
case 101:
setAnnotationLabelAction.run();
break;
case 102:
setAnnotationForeignKeyAction.run();
break;
case 103:
setAnnotationForeignKeyInfoAction.run();
break;
case 112:
setAnnotationFKFilterAction.run();
break;
case 104:
break;
case 105:
break;
case 106:
setAnnotationDescriptionsAction.run();
break;
case 110:
setFacetMsgAction.run();
break;
case 113:
setAnnotationDisplayFomatAction.run();
break;
case 114:
setAnnotationLookupFieldsAction.run();
break;
case 115:
setAnnotationPrimaryKeyInfoAction.run();
break;
case 107:
case 108:
case 116:
case 117:
if (exAdapter != null) {
exAdapter.doubleClick(elem);
}
break;
case 121:
setAnnotationFKIntegrity.run();
break;
case 122:
setAnnotationFKIntegrityOverride.run();
break;
case -1:
if (drillDownAdapter.canGoInto() == true) {
drillDownAdapter.goInto();
}
}
}",0.9985504245185338
147674,"@Override public void run(){
  try {
    final XtentisPort port=Util.getPort(new URL(oldServerDef.getUrl()),oldServerDef.getUniverse(),oldServerDef.getUser(),oldServerDef.getPasswd());
    NewItemHandler.createItemRecord(port,log,shell,new WSDataClusterPK(getDataContainer()));
    clusterComposite.doSearch();
  }
 catch (  MalformedURLException e) {
    log.error(e.getMessage(),e);
  }
catch (  XtentisException e) {
    log.error(e.getMessage(),e);
  }
}","@Override public void run(){
  try {
    final XtentisPort port=Util.getPort(new URL(oldServerDef.getUrl()),oldServerDef.getUniverse(),oldServerDef.getUser(),oldServerDef.getPasswd());
    NewItemHandler.createItemRecord(port,shell,new WSDataClusterPK(getDataContainer()));
    clusterComposite.doSearch();
  }
 catch (  MalformedURLException e) {
    log.error(e.getMessage(),e);
  }
catch (  XtentisException e) {
    log.error(e.getMessage(),e);
  }
}",0.9956140350877192
147675,"private List<MDMServerDef> getAllServerDefs(){
  if (allServerDefs == null) {
    ILegendServerDefService serverDefService=(ILegendServerDefService)GlobalServiceRegister.getDefault().getService(ILegendServerDefService.class);
    allServerDefs=serverDefService.getLegendServerDefs();
  }
  return allServerDefs;
}","private List<MDMServerDef> getAllServerDefs(){
  if (allServerDefs == null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILegendServerDefService.class)) {
      ILegendServerDefService serverDefService=(ILegendServerDefService)GlobalServiceRegister.getDefault().getService(ILegendServerDefService.class);
      allServerDefs=serverDefService.getLegendServerDefs();
    }
  }
  return allServerDefs;
}",0.6466575716234653
147676,"public void handleEvent(Event event){
  if (event.button == DOMViewDialog.BUTTON_SAVE) {
    try {
      WSPutItem putItem=new WSPutItem(dataClusterPk,d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false);
      WSPutItemWithReport item=new WSPutItemWithReport(putItem,""String_Node_Str"",d.isBeforeVerification());
      if (d.isTriggerProcess()) {
        port.putItemWithReport(item);
      }
 else {
        port.putItem(putItem);
      }
    }
 catch (    Exception e) {
      if (log != null) {
        log.error(e.getMessage(),e);
      }
      MessageDialog.openError(shell,Messages.DataClusterBrowserMainPage_100,Messages.bind(Messages.DataClusterBrowserMainPage_101,Util.formatErrorMessage(e.getLocalizedMessage())));
      return;
    }
  }
  d.close();
}","public void handleEvent(Event event){
  if (event.button == DOMViewDialog.BUTTON_SAVE) {
    try {
      WSPutItem putItem=new WSPutItem(dataClusterPk,d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false);
      WSPutItemWithReport item=new WSPutItemWithReport(putItem,""String_Node_Str"",d.isBeforeVerification());
      if (d.isTriggerProcess()) {
        port.putItemWithReport(item);
      }
 else {
        port.putItem(putItem);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
      MessageDialog.openError(shell,Messages.DataClusterBrowserMainPage_100,Messages.bind(Messages.DataClusterBrowserMainPage_101,Util.formatErrorMessage(e.getLocalizedMessage())));
      return;
    }
  }
  d.close();
}",0.9783013019218848
147677,"public static void createItemRecord(final XtentisPort port,final Log log,final Shell ashell,final WSDataClusterPK dataClusterPk){
  if (port == null || dataClusterPk == null) {
    throw new IllegalArgumentException();
  }
  final Shell shell=ashell != null ? ashell : Display.getCurrent().getActiveShell();
  try {
    String xml=""String_Node_Str"";
    WSDataModelPKArray dataModelPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str""));
    List<WSDataModelPK> dmPKs=dataModelPKs.getWsDataModelPKs();
    List<String> dataModels=new ArrayList<String>();
    if (dmPKs != null) {
      for (      WSDataModelPK pk : dmPKs) {
        if (!""String_Node_Str"".equals(pk.getPk())) {
          dataModels.add(pk.getPk());
        }
      }
    }
    final DataContainerDOMViewDialog d=new DataContainerDOMViewDialog(shell,port,Util.parse(xml),dataModels,DOMViewDialog.SOURCE_VIEWER,null);
    d.addListener(new Listener(){
      public void handleEvent(      Event event){
        if (event.button == DOMViewDialog.BUTTON_SAVE) {
          try {
            WSPutItem putItem=new WSPutItem(dataClusterPk,d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false);
            WSPutItemWithReport item=new WSPutItemWithReport(putItem,""String_Node_Str"",d.isBeforeVerification());
            if (d.isTriggerProcess()) {
              port.putItemWithReport(item);
            }
 else {
              port.putItem(putItem);
            }
          }
 catch (          Exception e) {
            if (log != null) {
              log.error(e.getMessage(),e);
            }
            MessageDialog.openError(shell,Messages.DataClusterBrowserMainPage_100,Messages.bind(Messages.DataClusterBrowserMainPage_101,Util.formatErrorMessage(e.getLocalizedMessage())));
            return;
          }
        }
        d.close();
      }
    }
);
    d.setBlockOnOpen(true);
    d.open();
  }
 catch (  Exception e) {
    if (log != null) {
      log.error(e.getMessage(),e);
    }
    if (!Util.handleConnectionException(shell,e,null)) {
      MessageDialog.openError(shell,Messages._Error,Messages.bind(Messages.DataClusterBrowserMainPage_103,e.getLocalizedMessage()));
    }
  }
}","public static void createItemRecord(final XtentisPort port,final Shell ashell,final WSDataClusterPK dataClusterPk){
  if (port == null || dataClusterPk == null) {
    throw new IllegalArgumentException();
  }
  final Shell shell=ashell != null ? ashell : Display.getCurrent().getActiveShell();
  try {
    String xml=""String_Node_Str"";
    WSDataModelPKArray dataModelPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str""));
    List<WSDataModelPK> dmPKs=dataModelPKs.getWsDataModelPKs();
    List<String> dataModels=new ArrayList<String>();
    if (dmPKs != null) {
      for (      WSDataModelPK pk : dmPKs) {
        if (!""String_Node_Str"".equals(pk.getPk())) {
          dataModels.add(pk.getPk());
        }
      }
    }
    final DataContainerDOMViewDialog d=new DataContainerDOMViewDialog(shell,port,Util.parse(xml),dataModels,DOMViewDialog.SOURCE_VIEWER,null);
    d.addListener(new Listener(){
      public void handleEvent(      Event event){
        if (event.button == DOMViewDialog.BUTTON_SAVE) {
          try {
            WSPutItem putItem=new WSPutItem(dataClusterPk,d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false);
            WSPutItemWithReport item=new WSPutItemWithReport(putItem,""String_Node_Str"",d.isBeforeVerification());
            if (d.isTriggerProcess()) {
              port.putItemWithReport(item);
            }
 else {
              port.putItem(putItem);
            }
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
            MessageDialog.openError(shell,Messages.DataClusterBrowserMainPage_100,Messages.bind(Messages.DataClusterBrowserMainPage_101,Util.formatErrorMessage(e.getLocalizedMessage())));
            return;
          }
        }
        d.close();
      }
    }
);
    d.setBlockOnOpen(true);
    d.open();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    if (!Util.handleConnectionException(shell,e,null)) {
      MessageDialog.openError(shell,Messages._Error,Messages.bind(Messages.DataClusterBrowserMainPage_103,e.getLocalizedMessage()));
    }
  }
}",0.9789666209419297
147678,"protected WSRoutingOrderV2[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=getPort();
    long from=-1;
    long to=-1;
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!BLANK.equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),Messages.Warning,Messages.RoutingEngineV2BrowserMainPage_FormatIllegal);
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!BLANK.equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),Messages.Warning,Messages.RoutingEngineV2BrowserMainPage_FormatIllegal);
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    long timeCreatedMin=-1;
    long timeCreatedMax=-1;
    long timeScheduledMin=-1;
    long timeScheduledMax=-1;
    long timeLastRunStartedMin=-1;
    long timeLastRunStartedMax=-1;
    long timeLastRunCompletedMin=-1;
    long timeLastRunCompletedMax=-1;
    WSRoutingOrderV2Status status=null;
    String statusText=statusCombo.getItem(statusCombo.getSelectionIndex());
    if (""String_Node_Str"".equals(statusText)) {
      timeCreatedMin=from;
      timeCreatedMax=to;
      status=WSRoutingOrderV2Status.ACTIVE;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.COMPLETED;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.FAILED;
    }
 else {
      throw new XtentisException(Messages.RoutingEngineV2BrowserMainPage_ExceptionInfo + statusText + Messages.RoutingEngineV2BrowserMainPage_ExceptionInfoA);
    }
    String serviceJNDI=serviceCombo.getItem(serviceCombo.getSelectionIndex());
    if (BLANK.equals(serviceJNDI)) {
      serviceJNDI=null;
    }
    int start=pageToolBar.getStart();
    int limit=pageToolBar.getLimit();
    List<WSRoutingOrderV2> wsRoutingOrder=port.getRoutingOrderV2ByCriteriaWithPaging(new WSGetRoutingOrderV2ByCriteriaWithPaging(new WSRoutingOrderV2SearchCriteriaWithPaging(status,""String_Node_Str"".equals(anyFieldText.getText()) || BLANK.equals(anyFieldText.getText()) ? null : anyFieldText.getText(),null,timeCreatedMin,timeCreatedMax,timeScheduledMin,timeScheduledMax,timeLastRunStartedMin,timeLastRunStartedMax,timeLastRunCompletedMin,timeLastRunCompletedMax,""String_Node_Str"".equals(documentTypeText.getText()) || BLANK.equals(documentTypeText.getText()) ? null : documentTypeText.getText(),""String_Node_Str"".equals(idText.getText()) || BLANK.equals(idText.getText()) ? null : idText.getText(),serviceJNDI,null,null,start,limit,true))).getWsRoutingOrder();
    if (wsRoutingOrder.size() == 1) {
      MessageDialog.openInformation(this.getSite().getShell(),Messages.RoutingEngineV2BrowserMainPage_Info,Messages.RoutingEngineV2BrowserMainPage_SorryNoResult);
      return new WSRoutingOrderV2[0];
    }
    int totalSize=Integer.parseInt(wsRoutingOrder.get(0).getName());
    pageToolBar.setTotalsize(totalSize);
    pageToolBar.refreshUI();
    WSRoutingOrderV2[] resultOrderV2s=new WSRoutingOrderV2[wsRoutingOrder.size() - 1];
    System.arraycopy(wsRoutingOrder,1,resultOrderV2s,0,resultOrderV2s.length);
    return resultOrderV2s;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str"")) {
      MessageDialog.openError(this.getSite().getShell(),Messages.RoutingEngineV2BrowserMainPage_TooManyResults,Messages.RoutingEngineV2BrowserMainPage_ErrorMsg1);
    }
 else     if (!Util.handleConnectionException(this.getSite().getShell(),e,null)) {
      MessageDialog.openError(this.getSite().getShell(),Messages.ErrorTitle1,e.getLocalizedMessage());
    }
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      if (waitCursor != null) {
        waitCursor.dispose();
      }
    }
 catch (    Exception e) {
    }
  }
}","protected WSRoutingOrderV2[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=getPort();
    long from=-1;
    long to=-1;
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!BLANK.equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),Messages.Warning,Messages.RoutingEngineV2BrowserMainPage_FormatIllegal);
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!BLANK.equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),Messages.Warning,Messages.RoutingEngineV2BrowserMainPage_FormatIllegal);
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    long timeCreatedMin=-1;
    long timeCreatedMax=-1;
    long timeScheduledMin=-1;
    long timeScheduledMax=-1;
    long timeLastRunStartedMin=-1;
    long timeLastRunStartedMax=-1;
    long timeLastRunCompletedMin=-1;
    long timeLastRunCompletedMax=-1;
    WSRoutingOrderV2Status status=null;
    String statusText=statusCombo.getItem(statusCombo.getSelectionIndex());
    if (""String_Node_Str"".equals(statusText)) {
      timeCreatedMin=from;
      timeCreatedMax=to;
      status=WSRoutingOrderV2Status.ACTIVE;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.COMPLETED;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.FAILED;
    }
 else {
      throw new XtentisException(Messages.RoutingEngineV2BrowserMainPage_ExceptionInfo + statusText + Messages.RoutingEngineV2BrowserMainPage_ExceptionInfoA);
    }
    String serviceJNDI=serviceCombo.getItem(serviceCombo.getSelectionIndex());
    if (BLANK.equals(serviceJNDI)) {
      serviceJNDI=null;
    }
    int start=pageToolBar.getStart();
    int limit=pageToolBar.getLimit();
    List<WSRoutingOrderV2> wsRoutingOrder=port.getRoutingOrderV2ByCriteriaWithPaging(new WSGetRoutingOrderV2ByCriteriaWithPaging(new WSRoutingOrderV2SearchCriteriaWithPaging(status,""String_Node_Str"".equals(anyFieldText.getText()) || BLANK.equals(anyFieldText.getText()) ? null : anyFieldText.getText(),null,timeCreatedMin,timeCreatedMax,timeScheduledMin,timeScheduledMax,timeLastRunStartedMin,timeLastRunStartedMax,timeLastRunCompletedMin,timeLastRunCompletedMax,""String_Node_Str"".equals(documentTypeText.getText()) || BLANK.equals(documentTypeText.getText()) ? null : documentTypeText.getText(),""String_Node_Str"".equals(idText.getText()) || BLANK.equals(idText.getText()) ? null : idText.getText(),serviceJNDI,null,null,start,limit,true))).getWsRoutingOrder();
    if (wsRoutingOrder.size() == 1) {
      MessageDialog.openInformation(this.getSite().getShell(),Messages.RoutingEngineV2BrowserMainPage_Info,Messages.RoutingEngineV2BrowserMainPage_SorryNoResult);
      return new WSRoutingOrderV2[0];
    }
    int totalSize=Integer.parseInt(wsRoutingOrder.get(0).getName());
    pageToolBar.setTotalsize(totalSize);
    pageToolBar.refreshUI();
    WSRoutingOrderV2[] resultOrderV2s=new WSRoutingOrderV2[wsRoutingOrder.size() - 1];
    System.arraycopy(wsRoutingOrder.toArray(new WSRoutingOrderV2[0]),1,resultOrderV2s,0,resultOrderV2s.length);
    return resultOrderV2s;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str"")) {
      MessageDialog.openError(this.getSite().getShell(),Messages.RoutingEngineV2BrowserMainPage_TooManyResults,Messages.RoutingEngineV2BrowserMainPage_ErrorMsg1);
    }
 else     if (!Util.handleConnectionException(this.getSite().getShell(),e,null)) {
      MessageDialog.openError(this.getSite().getShell(),Messages.ErrorTitle1,e.getLocalizedMessage());
    }
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      if (waitCursor != null) {
        waitCursor.dispose();
      }
    }
 catch (    Exception e) {
    }
  }
}",0.9965361603862706
147679,"public String getSelectedBaseTypeName(){
  if (radCustomTypes.getSelection())   return comboCustomTypes.getCombo().getText();
  return comboBuildInTypes.getCombo().getText();
}","public String getSelectedBaseTypeName(){
  if (radCustomTypes.getSelection()) {
    return comboCustomTypes.getCombo().getText();
  }
  return comboBuildInTypes.getCombo().getText();
}",0.9777777777777776
147680,"@Override public int compare(Viewer viewer,Object e1,Object e2){
  String typeName1=getTypeName(e1);
  String typeName2=getTypeName(e2);
  if (""String_Node_Str"".equals(typeName1) || ""String_Node_Str"".equals(typeName2))   return super.compare(viewer,e1,e2);
  int typeCode1=getTypeCode(typeName1);
  int typeCode2=getTypeCode(typeName2);
  if (typeCode1 != typeCode2)   return (typeCode1 - typeCode2);
  return typeName1.compareTo(typeName2);
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  String typeName1=getTypeName(e1);
  String typeName2=getTypeName(e2);
  if (""String_Node_Str"".equals(typeName1) || ""String_Node_Str"".equals(typeName2)) {
    return super.compare(viewer,e1,e2);
  }
  int typeCode1=getTypeCode(typeName1);
  int typeCode2=getTypeCode(typeName2);
  if (typeCode1 != typeCode2) {
    return (typeCode1 - typeCode2);
  }
  return typeName1.compareTo(typeName2);
}",0.9822616407982262
147681,"private void initUIContentForCompFacet(XSDSimpleTypeDefinition baseTypeDef){
  if (baseTypeDef == null) {
    compProperty.setPropertySources(new IPropertySource<?>[0]);
    return;
  }
  List<IPropertySource<?>> propertySources=new ArrayList<IPropertySource<?>>();
  for (  String eachFacetName : baseTypeDef.getValidFacets()) {
    IPropertySource<?> propSource=SimpleTypeFacetPropSourceBuilder.createFacetPropSource(xsdSimpleType,baseTypeDef,eachFacetName,compProperty.getPropertyViewer().getTree());
    if (propSource == null)     continue;
    propertySources.add(propSource);
  }
  compProperty.setPropertySources(propertySources.toArray(new IPropertySource<?>[0]));
}","private void initUIContentForCompFacet(XSDSimpleTypeDefinition baseTypeDef){
  if (baseTypeDef == null) {
    compProperty.setPropertySources(new IPropertySource<?>[0]);
    return;
  }
  List<IPropertySource<?>> propertySources=new ArrayList<IPropertySource<?>>();
  for (  String eachFacetName : baseTypeDef.getValidFacets()) {
    IPropertySource<?> propSource=SimpleTypeFacetPropSourceBuilder.createFacetPropSource(xsdSimpleType,baseTypeDef,eachFacetName,compProperty.getPropertyViewer().getTree());
    if (propSource == null) {
      continue;
    }
    propertySources.add(propSource);
  }
  compProperty.setPropertySources(propertySources.toArray(new IPropertySource<?>[0]));
}",0.9926470588235294
147682,"private XSDSimpleTypeDefinition getCurSelectedBuildInBaseType(){
  IStructuredSelection selection=(IStructuredSelection)comboBuildInTypes.getSelection();
  if (selection == null || selection.isEmpty())   return null;
  return (XSDSimpleTypeDefinition)selection.getFirstElement();
}","private XSDSimpleTypeDefinition getCurSelectedBuildInBaseType(){
  IStructuredSelection selection=(IStructuredSelection)comboBuildInTypes.getSelection();
  if (selection == null || selection.isEmpty()) {
    return null;
  }
  return (XSDSimpleTypeDefinition)selection.getFirstElement();
}",0.9859649122807016
147683,"private void initUIContentsForComboCustomTypes(){
  comboCustomTypes.removeSelectionChangedListener(customChangedListener);
  List<String> allCustomTypeNames=null;
  if (xsdSimpleType.getSchema() != null) {
    allCustomTypeNames=Util.getAllCustomTypeNames(xsdSimpleType.getSchema());
  }
  if (xsdSimpleType.getName() != null && allCustomTypeNames != null) {
    allCustomTypeNames.remove(xsdSimpleType.getName());
  }
  if (allCustomTypeNames != null)   comboCustomTypes.setInput(allCustomTypeNames);
  if (xsdSimpleType.getBaseType() != null && xsdSimpleType.getBaseType().getName() != null) {
    comboCustomTypes.setSelection(new StructuredSelection(xsdSimpleType.getBaseType().getName()));
  }
  radCustomTypes.setSelection(!comboCustomTypes.getSelection().isEmpty());
  comboCustomTypes.addSelectionChangedListener(customChangedListener);
}","private void initUIContentsForComboCustomTypes(){
  comboCustomTypes.removeSelectionChangedListener(customChangedListener);
  List<String> allCustomTypeNames=null;
  if (xsdSimpleType.getSchema() != null) {
    allCustomTypeNames=Util.getAllCustomTypeNames(xsdSimpleType.getSchema());
  }
  if (xsdSimpleType.getName() != null && allCustomTypeNames != null) {
    allCustomTypeNames.remove(xsdSimpleType.getName());
  }
  if (allCustomTypeNames != null) {
    comboCustomTypes.setInput(allCustomTypeNames);
  }
  if (xsdSimpleType.getBaseType() != null && xsdSimpleType.getBaseType().getName() != null) {
    comboCustomTypes.setSelection(new StructuredSelection(xsdSimpleType.getBaseType().getName()));
  }
  radCustomTypes.setSelection(!comboCustomTypes.getSelection().isEmpty());
  comboCustomTypes.addSelectionChangedListener(customChangedListener);
}",0.9952996474735604
147684,"public void mouseDown(MouseEvent e){
  ISelection oldSelection=comboBuildInTypes.getSelection();
  comboBuildInTypes.setInput(Util.getAllBuildInTypes(xsdSimpleType.getSchema()));
  comboBuildInTypes.setSelection(oldSelection);
}","@Override public void mouseDown(MouseEvent e){
  ISelection oldSelection=comboBuildInTypes.getSelection();
  comboBuildInTypes.setInput(Util.getAllBuildInTypes(xsdSimpleType.getSchema()));
  comboBuildInTypes.setSelection(oldSelection);
}",0.9785407725321889
147685,"private XSDSimpleTypeDefinition getCurSelectedCustomBaseType(){
  IStructuredSelection selection=(IStructuredSelection)comboCustomTypes.getSelection();
  if (selection == null || selection.isEmpty())   return null;
  XSDSimpleTypeDefinition curSelectedCustomBaseType=xsdSimpleType.getSchema().resolveSimpleTypeDefinition(xsdSimpleType.getSchema().getSchemaForSchemaNamespace(),(String)selection.getFirstElement());
  if (!xsdSimpleType.getSchema().getTypeDefinitions().contains(curSelectedCustomBaseType))   return xsdSimpleType.getSchema().resolveSimpleTypeDefinition(xsdSimpleType.getSchema().getSchemaForSchemaNamespace(),""String_Node_Str"");
  return curSelectedCustomBaseType;
}","private XSDSimpleTypeDefinition getCurSelectedCustomBaseType(){
  IStructuredSelection selection=(IStructuredSelection)comboCustomTypes.getSelection();
  if (selection == null || selection.isEmpty()) {
    return null;
  }
  XSDSimpleTypeDefinition curSelectedCustomBaseType=xsdSimpleType.getSchema().resolveSimpleTypeDefinition(xsdSimpleType.getSchema().getSchemaForSchemaNamespace(),(String)selection.getFirstElement());
  if (!xsdSimpleType.getSchema().getTypeDefinitions().contains(curSelectedCustomBaseType)) {
    return xsdSimpleType.getSchema().resolveSimpleTypeDefinition(xsdSimpleType.getSchema().getSchemaForSchemaNamespace(),""String_Node_Str"");
  }
  return curSelectedCustomBaseType;
}",0.9884057971014492
147686,"private String getTypeName(Object typeObj){
  if (typeObj instanceof XSDSimpleTypeDefinition)   return ((XSDSimpleTypeDefinition)typeObj).getName();
  if (typeObj instanceof String)   return (String)typeObj;
  return ""String_Node_Str"";
}","private String getTypeName(Object typeObj){
  if (typeObj instanceof XSDSimpleTypeDefinition) {
    return ((XSDSimpleTypeDefinition)typeObj).getName();
  }
  if (typeObj instanceof String) {
    return (String)typeObj;
  }
  return ""String_Node_Str"";
}",0.9673469387755104
147687,"public void setSimpleType(XSDSimpleTypeDefinition xsdSimpleType){
  if (xsdSimpleType == null)   return;
  this.xsdSimpleType=xsdSimpleType;
  initUIContent();
}","public void setSimpleType(XSDSimpleTypeDefinition xsdSimpleType){
  if (xsdSimpleType == null) {
    return;
  }
  this.xsdSimpleType=xsdSimpleType;
  initUIContent();
}",0.9757575757575756
147688,"public XSDSimpleTypeDefinition getSelectedBaseType(){
  if (radCustomTypes.getSelection())   return getCurSelectedCustomBaseType();
  return getCurSelectedBuildInBaseType();
}","public XSDSimpleTypeDefinition getSelectedBaseType(){
  if (radCustomTypes.getSelection()) {
    return getCurSelectedCustomBaseType();
  }
  return getCurSelectedBuildInBaseType();
}",0.9776536312849162
147689,"private void initUIListenerForBaseTypeCombos(){
  customChangedListener=new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (section != null && getSelectedBaseTypeName().length() > 0) {
        section.autoCommit();
      }
    }
  }
;
  comboCustomTypes.getCombo().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ISelection oldSelection=comboCustomTypes.getSelection();
      List<String> allCustomTypeNames=Util.getAllCustomTypeNames(xsdSimpleType.getSchema());
      allCustomTypeNames.remove(xsdSimpleType.getName());
      comboCustomTypes.setInput(allCustomTypeNames);
      comboCustomTypes.setSelection(oldSelection);
    }
  }
);
  buildInChangedListener=new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (section != null && getSelectedBaseTypeName().length() > 0) {
        section.autoCommit();
      }
    }
  }
;
  comboBuildInTypes.getCombo().addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      ISelection oldSelection=comboBuildInTypes.getSelection();
      comboBuildInTypes.setInput(Util.getAllBuildInTypes(xsdSimpleType.getSchema()));
      comboBuildInTypes.setSelection(oldSelection);
    }
  }
);
}","private void initUIListenerForBaseTypeCombos(){
  customChangedListener=new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (section != null && getSelectedBaseTypeName().length() > 0) {
        section.autoCommit();
      }
    }
  }
;
  comboCustomTypes.getCombo().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ISelection oldSelection=comboCustomTypes.getSelection();
      List<String> allCustomTypeNames=Util.getAllCustomTypeNames(xsdSimpleType.getSchema());
      allCustomTypeNames.remove(xsdSimpleType.getName());
      comboCustomTypes.setInput(allCustomTypeNames);
      comboCustomTypes.setSelection(oldSelection);
    }
  }
);
  buildInChangedListener=new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (section != null && getSelectedBaseTypeName().length() > 0) {
        section.autoCommit();
      }
    }
  }
;
  comboBuildInTypes.getCombo().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ISelection oldSelection=comboBuildInTypes.getSelection();
      comboBuildInTypes.setInput(Util.getAllBuildInTypes(xsdSimpleType.getSchema()));
      comboBuildInTypes.setSelection(oldSelection);
    }
  }
);
}",0.9962292609351432
147690,"private void initUIContentForTxtName(){
  removeNameTxtListener();
  String name=xsdSimpleType.getName() == null ? ""String_Node_Str"" : xsdSimpleType.getName();
  txtName.setText(name);
  Set<String> uuidtypes=EUUIDCustomType.allTypes();
  if (uuidtypes.contains(name)) {
    txtName.setEditable(false);
  }
  if (name != null) {
    int length=name.length();
    if (length >= caretOffset) {
      txtName.setSelection(caretOffset,caretOffset);
    }
 else {
      txtName.setSelection(length,length);
    }
  }
  addNameTxtListener();
}","private void initUIContentForTxtName(){
  removeNameTxtListener();
  String name=xsdSimpleType.getName() == null ? ""String_Node_Str"" : xsdSimpleType.getName();
  txtName.setText(name);
  Set<String> uuidTypes=new HashSet<String>();
  for (  EUUIDCustomType current : EUUIDCustomType.values()) {
    uuidTypes.add(current.getName());
  }
  if (uuidTypes.contains(name)) {
    txtName.setEditable(false);
  }
  if (name != null) {
    int length=name.length();
    if (length >= caretOffset) {
      txtName.setSelection(caretOffset,caretOffset);
    }
 else {
      txtName.setSelection(length,length);
    }
  }
  addNameTxtListener();
}",0.879045996592845
147691,"public Map<String,Object> getPropertyName2Values(){
  Map<String,Object> results=new HashMap<String,Object>();
  for (  Entry<String,IPropertySource<?>> eachPropName2PropSource : getPropertySources().entrySet())   results.put(eachPropName2PropSource.getKey(),eachPropName2PropSource.getValue().getPropertyValue());
  return results;
}","public Map<String,Object> getPropertyName2Values(){
  Map<String,Object> results=new HashMap<String,Object>();
  for (  Entry<String,IPropertySource<?>> eachPropName2PropSource : getPropertySources().entrySet()) {
    results.put(eachPropName2PropSource.getKey(),eachPropName2PropSource.getValue().getPropertyValue());
  }
  return results;
}",0.9881656804733728
147692,"public Map<String,IPropertySource<?>> getPropertySources(){
  Map<String,IPropertySource<?>> results=new HashMap<String,IPropertySource<?>>();
  for (  IPropertySource<?> eachPropSource : compProperty.getProperySources())   results.put(eachPropSource.getPropertyName(),eachPropSource);
  return results;
}","public Map<String,IPropertySource<?>> getPropertySources(){
  Map<String,IPropertySource<?>> results=new HashMap<String,IPropertySource<?>>();
  for (  IPropertySource<?> eachPropSource : compProperty.getProperySources()) {
    results.put(eachPropSource.getPropertyName(),eachPropSource);
  }
  return results;
}",0.9870550161812298
147693,"private int getTypeCode(String typeName){
  if (EUUIDCustomType.allTypes().contains(typeName))   return 0;
  return 1;
}","private int getTypeCode(String typeName){
  Set<String> uuidTypes=new HashSet<String>();
  for (  EUUIDCustomType current : EUUIDCustomType.values()) {
    uuidTypes.add(current.getName());
  }
  if (uuidTypes.contains(typeName)) {
    return 0;
  }
  return 1;
}",0.4856396866840731
147694,"/** 
 * DOC hbhong Comment method ""getFileInfo"".
 * @param input
 * @return // dirName result[0] // fileQName result[1] // fileExtension result[2] // fileName result[3] // versionresult[4]
 */
private String[] getPicResourceFileInfo(String input){
  Matcher m=picFileNamePattern.matcher(input);
  if (m.matches()) {
    String[] result=new String[5];
    result[0]=m.group(1);
    result[1]=m.group(2);
    result[2]=m.group(3);
    result[3]=result[1];
    result[4]=VersionUtils.DEFAULT_VERSION;
    Matcher versionM=picFileVersionPattern.matcher(result[1]);
    if (versionM.matches()) {
      result[3]=versionM.group(1);
      result[4]=versionM.group(2);
    }
    return result;
  }
 else {
    log.error(""String_Node_Str"" + input);
    return null;
  }
}","/** 
 * DOC hbhong Comment method ""getFileInfo"".
 * @param input
 * @return // dirName result[0] // fileQName result[1] // fileExtension result[2] // fileName result[3] // versionresult[4]
 */
private String[] getPicResourceFileInfo(String input){
  Matcher m=picFileNamePattern.matcher(input);
  if (m.matches()) {
    String[] result=new String[5];
    result[0]=m.group(1);
    result[1]=m.group(2);
    result[2]=m.group(3);
    result[3]=result[1];
    result[4]=VersionUtils.DEFAULT_VERSION;
    Matcher versionM=picFileVersionPattern.matcher(result[1]);
    if (versionM.matches()) {
      result[3]=versionM.group(1);
      result[4]=versionM.group(2);
    }
    return result;
  }
 else {
    return null;
  }
}",0.97165991902834
147695,"/** 
 * DOC hbhong Comment method ""handlePictureResourceObject"".
 * @param treeObj
 * @throws IOException
 */
private WSResourceE handlePictureResourceObject(TreeObject treeObj) throws IOException {
  String[] fileInfo=getPicResourceFileInfo(treeObj.getName());
  if (fileInfo != null) {
    String dirName=fileInfo[0];
    String fileQName=fileInfo[1];
    String fileExtension=fileInfo[2];
    String fileName=fileInfo[3];
    String encodedDirName=URLEncoder.encode(dirName,UTF8);
    fileQName=URLEncoder.encode(fileQName,UTF8);
    WSResourceE resource=MdmserverobjectFactory.eINSTANCE.createWSResourceE();
    resource.setName(fileName);
    resource.setFileExtension(fileExtension);
    StringBuffer strBuf=new StringBuffer();
    strBuf.append(serverDef.getProtocol()).append(serverDef.getHost()).append(""String_Node_Str"").append(serverDef.getPort()).append(""String_Node_Str"").append(encodedDirName).append(""String_Node_Str"").append(fileQName).append(""String_Node_Str"").append(fileExtension);
    String url=strBuf.toString();
    byte[] bytes=HttpClientUtil.downloadFile(url,serverDef.getUser(),serverDef.getPasswd());
    resource.setFileContent(bytes);
    resource.setImageCatalog(dirName);
    treeObj.setName(fileName);
    return resource;
  }
  return null;
}","/** 
 * DOC hbhong Comment method ""handlePictureResourceObject"".
 * @param treeObj
 * @throws IOException
 */
private WSResourceE handlePictureResourceObject(TreeObject treeObj) throws IOException {
  if (treeObj != null) {
    if (treeObj instanceof TreeParent) {
      return null;
    }
    String[] fileInfo=getPicResourceFileInfo(treeObj.getName());
    if (fileInfo != null) {
      String dirName=fileInfo[0];
      String fileQName=fileInfo[1];
      String fileExtension=fileInfo[2];
      String fileName=fileInfo[3];
      String encodedDirName=URLEncoder.encode(dirName,UTF8);
      fileQName=URLEncoder.encode(fileQName,UTF8);
      WSResourceE resource=MdmserverobjectFactory.eINSTANCE.createWSResourceE();
      resource.setName(fileName);
      resource.setFileExtension(fileExtension);
      StringBuffer strBuf=new StringBuffer();
      strBuf.append(serverDef.getProtocol()).append(serverDef.getHost()).append(""String_Node_Str"").append(serverDef.getPort()).append(""String_Node_Str"").append(encodedDirName).append(""String_Node_Str"").append(fileQName).append(""String_Node_Str"").append(fileExtension);
      String url=strBuf.toString();
      byte[] bytes=HttpClientUtil.downloadFile(url,serverDef.getUser(),serverDef.getPasswd());
      resource.setFileContent(bytes);
      resource.setImageCatalog(dirName);
      treeObj.setName(fileName);
      return resource;
    }
  }
  return null;
}",0.8566108007448789
147696,"private boolean showLockedObjDialog(Object[] objs){
  if (objs == null) {
    return true;
  }
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : objs) {
    TreeObject treeObj=(TreeObject)obj;
    String treeObjName=treeObj.getName();
    ERepositoryObjectType type=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
    if (type != null && treeObjName != null) {
      String uniqueName=getUniqueName(treeObj,treeObjName);
      IRepositoryViewObject viewObject=RepositoryResourceUtil.findViewObjectByName(type,uniqueName);
      if (viewObject != null) {
        viewObjs.add(viewObject);
      }
    }
  }
  LockedObjectDialog lockDialog=new LockedObjectDialog(getShell(),Messages.ImportServerObjectWizard_lockedObjectMessage,viewObjs);
  if (lockDialog.needShowDialog() && lockDialog.open() == IDialogConstants.CANCEL_ID) {
    return false;
  }
  return true;
}","private boolean showLockedObjDialog(Object[] objs){
  if (objs == null) {
    return true;
  }
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : objs) {
    TreeObject treeObj=(TreeObject)obj;
    if (treeObj != null && treeObj instanceof TreeParent) {
      continue;
    }
    String treeObjName=treeObj.getName();
    ERepositoryObjectType type=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
    if (type != null && treeObjName != null) {
      String uniqueName=getUniqueName(treeObj,treeObjName);
      IRepositoryViewObject viewObject=RepositoryResourceUtil.findViewObjectByName(type,uniqueName);
      if (viewObject != null) {
        viewObjs.add(viewObject);
      }
    }
  }
  LockedObjectDialog lockDialog=new LockedObjectDialog(getShell(),Messages.ImportServerObjectWizard_lockedObjectMessage,viewObjs);
  if (lockDialog.needShowDialog() && lockDialog.open() == IDialogConstants.CANCEL_ID) {
    return false;
  }
  return true;
}",0.957948717948718
147697,"/** 
 * DOC hbhong Comment method ""getFileInfo"".
 * @param input
 * @return // dirName result[0] // fileQName result[1] // fileExtension result[2] // fileName result[3] // versionresult[4]
 */
private String[] getPicResourceFileInfo(String input){
  Matcher m=picFileNamePattern.matcher(input);
  if (m.matches()) {
    String[] result=new String[5];
    result[0]=m.group(1);
    result[1]=m.group(2);
    result[2]=m.group(3);
    result[3]=result[1];
    result[4]=VersionUtils.DEFAULT_VERSION;
    Matcher versionM=picFileVersionPattern.matcher(result[1]);
    if (versionM.matches()) {
      result[3]=versionM.group(1);
      result[4]=versionM.group(2);
    }
    return result;
  }
 else {
    log.error(""String_Node_Str"" + input);
    return null;
  }
}","/** 
 * DOC hbhong Comment method ""getFileInfo"".
 * @param input
 * @return // dirName result[0] // fileQName result[1] // fileExtension result[2] // fileName result[3] // versionresult[4]
 */
private String[] getPicResourceFileInfo(String input){
  Matcher m=picFileNamePattern.matcher(input);
  if (m.matches()) {
    String[] result=new String[5];
    result[0]=m.group(1);
    result[1]=m.group(2);
    result[2]=m.group(3);
    result[3]=result[1];
    result[4]=VersionUtils.DEFAULT_VERSION;
    Matcher versionM=picFileVersionPattern.matcher(result[1]);
    if (versionM.matches()) {
      result[3]=versionM.group(1);
      result[4]=versionM.group(2);
    }
    return result;
  }
 else {
    return null;
  }
}",0.97165991902834
147698,"/** 
 * DOC hbhong Comment method ""handlePictureResourceObject"".
 * @param treeObj
 * @throws IOException
 */
private WSResourceE handlePictureResourceObject(TreeObject treeObj) throws IOException {
  String[] fileInfo=getPicResourceFileInfo(treeObj.getName());
  if (fileInfo != null) {
    String dirName=fileInfo[0];
    String fileQName=fileInfo[1];
    String fileExtension=fileInfo[2];
    String fileName=fileInfo[3];
    String encodedDirName=URLEncoder.encode(dirName,UTF8);
    fileQName=URLEncoder.encode(fileQName,UTF8);
    WSResourceE resource=MdmserverobjectFactory.eINSTANCE.createWSResourceE();
    resource.setName(fileName);
    resource.setFileExtension(fileExtension);
    StringBuffer strBuf=new StringBuffer();
    strBuf.append(serverDef.getProtocol()).append(serverDef.getHost()).append(""String_Node_Str"").append(serverDef.getPort()).append(""String_Node_Str"").append(encodedDirName).append(""String_Node_Str"").append(fileQName).append(""String_Node_Str"").append(fileExtension);
    String url=strBuf.toString();
    byte[] bytes=Util.downloadFile(url,serverDef.getUser(),serverDef.getPasswd());
    resource.setFileContent(bytes);
    resource.setImageCatalog(dirName);
    treeObj.setName(fileName);
    return resource;
  }
  return null;
}","/** 
 * DOC hbhong Comment method ""handlePictureResourceObject"".
 * @param treeObj
 * @throws IOException
 */
private WSResourceE handlePictureResourceObject(TreeObject treeObj) throws IOException {
  if (treeObj != null) {
    if (treeObj instanceof TreeParent) {
      return null;
    }
    String[] fileInfo=getPicResourceFileInfo(treeObj.getName());
    if (fileInfo != null) {
      String dirName=fileInfo[0];
      String fileQName=fileInfo[1];
      String fileExtension=fileInfo[2];
      String fileName=fileInfo[3];
      String encodedDirName=URLEncoder.encode(dirName,UTF8);
      fileQName=URLEncoder.encode(fileQName,UTF8);
      WSResourceE resource=MdmserverobjectFactory.eINSTANCE.createWSResourceE();
      resource.setName(fileName);
      resource.setFileExtension(fileExtension);
      StringBuffer strBuf=new StringBuffer();
      strBuf.append(serverDef.getProtocol()).append(serverDef.getHost()).append(""String_Node_Str"").append(serverDef.getPort()).append(""String_Node_Str"").append(encodedDirName).append(""String_Node_Str"").append(fileQName).append(""String_Node_Str"").append(fileExtension);
      String url=strBuf.toString();
      byte[] bytes=Util.downloadFile(url,serverDef.getUser(),serverDef.getPasswd());
      resource.setFileContent(bytes);
      resource.setImageCatalog(dirName);
      treeObj.setName(fileName);
      return resource;
    }
  }
  return null;
}",0.8555347091932458
147699,"private boolean showLockedObjDialog(Object[] objs){
  if (objs == null) {
    return true;
  }
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : objs) {
    TreeObject treeObj=(TreeObject)obj;
    String treeObjName=treeObj.getName();
    ERepositoryObjectType type=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
    if (type != null && treeObjName != null) {
      String uniqueName=getUniqueName(treeObj,treeObjName);
      IRepositoryViewObject viewObject=RepositoryResourceUtil.findViewObjectByName(type,uniqueName);
      if (viewObject != null) {
        viewObjs.add(viewObject);
      }
    }
  }
  LockedObjectDialog lockDialog=new LockedObjectDialog(getShell(),Messages.ImportServerObjectWizard_lockedObjectMessage,viewObjs);
  if (lockDialog.needShowDialog() && lockDialog.open() == IDialogConstants.CANCEL_ID) {
    return false;
  }
  return true;
}","private boolean showLockedObjDialog(Object[] objs){
  if (objs == null) {
    return true;
  }
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : objs) {
    TreeObject treeObj=(TreeObject)obj;
    if (treeObj != null && treeObj instanceof TreeParent) {
      continue;
    }
    String treeObjName=treeObj.getName();
    ERepositoryObjectType type=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
    if (type != null && treeObjName != null) {
      String uniqueName=getUniqueName(treeObj,treeObjName);
      IRepositoryViewObject viewObject=RepositoryResourceUtil.findViewObjectByName(type,uniqueName);
      if (viewObject != null) {
        viewObjs.add(viewObject);
      }
    }
  }
  LockedObjectDialog lockDialog=new LockedObjectDialog(getShell(),Messages.ImportServerObjectWizard_lockedObjectMessage,viewObjs);
  if (lockDialog.needShowDialog() && lockDialog.open() == IDialogConstants.CANCEL_ID) {
    return false;
  }
  return true;
}",0.957948717948718
147700,"private boolean saveResourceToRepository(){
  XObjectEditorInput2 editorInput=(XObjectEditorInput2)this.getEditorInput();
  TreeObject xobject=(TreeObject)editorInput.getModel();
  MDMServerObjectItem serverObjectItem=(MDMServerObjectItem)editorInput.getInputItem();
  MDMServerObject serverObject=serverObjectItem.getMDMServerObject();
  EObject eObj=Bean2EObjUtil.getInstance().convertFromBean2EObj(xobject.getWsObject(),serverObject);
  if (eObj != null) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(serverObjectItem);
      editorDirtyStateChanged();
      refreshDirtyCue();
      DeployService deployService=DeployService.getInstance();
      if (deployService.isAutoDeploy()) {
        autoDeployProcess(deployService);
      }
 else       if (serverObject.getLastServerDef() != null) {
        CommandManager.getInstance().pushCommand(ICommand.CMD_MODIFY,editorInput.getViewObject());
      }
      return true;
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
  return false;
}","private boolean saveResourceToRepository(){
  XObjectEditorInput2 editorInput=(XObjectEditorInput2)this.getEditorInput();
  TreeObject xobject=(TreeObject)editorInput.getModel();
  MDMServerObjectItem serverObjectItem=(MDMServerObjectItem)editorInput.getInputItem();
  MDMServerObject serverObject=serverObjectItem.getMDMServerObject();
  EObject eObj=Bean2EObjUtil.getInstance().convertFromBean2EObj(xobject.getWsObject(),serverObject);
  if (eObj != null) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      Item newItem=RepositoryResourceUtil.assertItem(serverObjectItem);
      if (newItem != serverObjectItem) {
        editorInput.updateViewObject(ContainerCacheService.get(newItem.getProperty()));
        serverObjectItem=(MDMServerObjectItem)newItem;
      }
      factory.save(serverObjectItem);
      editorDirtyStateChanged();
      refreshDirtyCue();
      DeployService deployService=DeployService.getInstance();
      if (deployService.isAutoDeploy()) {
        autoDeployProcess(deployService);
      }
 else       if (serverObject.getLastServerDef() != null) {
        CommandManager.getInstance().pushCommand(ICommand.CMD_MODIFY,editorInput.getViewObject());
      }
      return true;
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
  return false;
}",0.8936341659951652
147701,"@Test public void testCreateItemWith2Args() throws Exception {
  String propLabel=""String_Node_Str"";
  String nextId=""String_Node_Str"";
  Item mockItem=mock(Item.class);
  ItemState mockItemState=mock(ItemState.class);
  when(mockItem.getState()).thenReturn(mockItemState);
  when(mockItem.getState().getPath()).thenReturn(""String_Node_Str"");
  IProxyRepositoryFactory repositoryFactory=mock(IProxyRepositoryFactory.class);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(repositoryFactory);
  RepositoryContext mockContext=mock(RepositoryContext.class);
  when(repositoryFactory.getRepositoryContext()).thenReturn(mockContext);
  when(repositoryFactory.getNextId()).thenReturn(nextId);
  Property mockProperty=mock(Property.class);
  when(mockItem.getProperty()).thenReturn(mockProperty);
  PropertiesFactory proFactory=PropertiesFactory.eINSTANCE;
  PropertiesFactory spyProFactory=PowerMockito.spy(proFactory);
  when(spyProFactory.createProperty()).thenReturn(mockProperty);
  User user=mock(User.class);
  when(mockContext.getUser()).thenReturn(user);
  RecycleBinNodeConfiguration mockRBNConf=mock(RecycleBinNodeConfiguration.class);
  PowerMockito.whenNew(RecycleBinNodeConfiguration.class).withNoArguments().thenReturn(mockRBNConf);
  PowerMockito.mockStatic(RepositoryNodeConfigurationManager.class);
  IRepositoryNodeConfiguration mockConfManager=mock(IRepositoryNodeConfiguration.class);
  when(RepositoryNodeConfigurationManager.getConfiguration(Mockito.any(Item.class))).thenReturn(mockConfManager);
  IRepositoryNodeResourceProvider mockResourceProvider=mock(IRepositoryNodeResourceProvider.class);
  when(mockConfManager.getResourceProvider()).thenReturn(mockResourceProvider);
  when(mockResourceProvider.needSaveReferenceFile()).thenReturn(true);
  when(repositoryFactory.isEditableAndLockIfPossible(mockItem)).thenReturn(true);
  boolean createItem=RepositoryResourceUtil.createItem(mockItem,propLabel);
  verify(mockProperty,times(1)).setId(nextId);
  verify(mockProperty,times(1)).setVersion(Mockito.anyString());
  verify(mockProperty,times(1)).setAuthor(user);
  verify(mockProperty,times(1)).setLabel(propLabel);
  verify(repositoryFactory,times(1)).create(Mockito.any(Item.class),Mockito.any(IPath.class),Mockito.any(Boolean.class));
  verify(mockResourceProvider,times(1)).handleReferenceFile(mockItem);
  verify(repositoryFactory,times(1)).unlock(mockItem);
  assertTrue(createItem);
}","@Test public void testCreateItemWith2Args() throws Exception {
  String propLabel=""String_Node_Str"";
  String nextId=""String_Node_Str"";
  Item mockItem=mock(Item.class);
  ItemState mockItemState=mock(ItemState.class);
  when(mockItem.getState()).thenReturn(mockItemState);
  when(mockItem.getState().getPath()).thenReturn(""String_Node_Str"");
  IProxyRepositoryFactory repositoryFactory=mock(IProxyRepositoryFactory.class);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(repositoryFactory);
  RepositoryContext mockContext=mock(RepositoryContext.class);
  when(repositoryFactory.getRepositoryContext()).thenReturn(mockContext);
  when(repositoryFactory.getNextId()).thenReturn(nextId);
  Property mockProperty=mock(Property.class);
  when(mockItem.getProperty()).thenReturn(mockProperty);
  PropertiesFactory proFactory=PropertiesFactory.eINSTANCE;
  PropertiesFactory spyProFactory=PowerMockito.spy(proFactory);
  when(spyProFactory.createProperty()).thenReturn(mockProperty);
  User user=mock(User.class);
  when(mockContext.getUser()).thenReturn(user);
  RecycleBinNodeConfiguration mockRBNConf=mock(RecycleBinNodeConfiguration.class);
  PowerMockito.whenNew(RecycleBinNodeConfiguration.class).withNoArguments().thenReturn(mockRBNConf);
  PowerMockito.mockStatic(RepositoryNodeConfigurationManager.class);
  IRepositoryNodeConfiguration mockConfManager=mock(IRepositoryNodeConfiguration.class);
  when(RepositoryNodeConfigurationManager.getConfiguration(Mockito.any(Item.class))).thenReturn(mockConfManager);
  IRepositoryNodeResourceProvider mockResourceProvider=mock(IRepositoryNodeResourceProvider.class);
  when(mockConfManager.getResourceProvider()).thenReturn(mockResourceProvider);
  when(mockResourceProvider.needSaveReferenceFile()).thenReturn(true);
  when(repositoryFactory.isEditableAndLockIfPossible(mockItem)).thenReturn(true);
  boolean createItem=RepositoryResourceUtil.createItem(mockItem,propLabel);
  verify(mockProperty,times(1)).setId(nextId);
  verify(mockProperty,times(1)).setVersion(Mockito.anyString());
  verify(mockProperty,times(1)).setAuthor(user);
  verify(mockProperty,times(1)).setLabel(propLabel);
  verify(repositoryFactory,times(1)).create(Mockito.any(Item.class),Mockito.any(IPath.class));
  verify(mockResourceProvider,times(1)).handleReferenceFile(mockItem);
  verify(repositoryFactory,times(1)).unlock(mockItem);
  assertTrue(createItem);
}",0.958616429894997
147702,"@Test public void testCopyOSFileTOProject() throws Exception {
  String path=""String_Node_Str"";
  IFolder desFolder=mock(IFolder.class);
  String version=VersionUtils.DEFAULT_VERSION;
  boolean overwrite=true;
  IProgressMonitor progressMonitor=mock(IProgressMonitor.class);
  IProject mockIProject=mock(IProject.class);
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,null,desFolder,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException)     assertTrue(true);
 else {
      assertTrue(false);
    }
  }
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,path,null,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException)     assertTrue(true);
 else {
      assertTrue(false);
    }
  }
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceModelUtils.class);
  when(ResourceModelUtils.getProject(mockProject)).thenReturn(mockIProject);
  String invalidPath=""String_Node_Str"";
  when(desFolder.exists()).thenReturn(true);
  IFile copyOfFile=RepositoryResourceUtil.copyOSFileTOProject(null,invalidPath,desFolder,version,overwrite,progressMonitor);
  PowerMockito.verifyStatic(Mockito.atLeastOnce());
  ProjectManager.getInstance();
  ResourceModelUtils.getProject(Mockito.any(Project.class));
  assertNull(copyOfFile);
  String validPath=""String_Node_Str"";
  File file=new File(validPath);
  File spyFile=Mockito.spy(file);
  PowerMockito.whenNew(File.class).withArguments(validPath).thenReturn(spyFile);
  when(spyFile.exists()).thenReturn(true);
  when(spyFile.getName()).thenReturn(""String_Node_Str"");
  IFile mockIFile=mock(IFile.class);
  when(desFolder.getFile(Mockito.anyString())).thenReturn(mockIFile);
  IPath mockIPath=mock(IPath.class);
  when(mockIFile.getLocation()).thenReturn(mockIPath);
  when(mockIPath.toOSString()).thenReturn(validPath);
  FileInputStream inputStream=mock(FileInputStream.class);
  PowerMockito.whenNew(FileInputStream.class).withArguments(spyFile).thenReturn(inputStream);
  IFile copiedFile=RepositoryResourceUtil.copyOSFileTOProject(mockIProject,validPath,desFolder,version,overwrite,progressMonitor);
  assertNotNull(copiedFile);
  verify(inputStream,Mockito.times(1)).close();
}","@Test public void testCopyOSFileTOProject() throws Exception {
  String path=""String_Node_Str"";
  IFolder desFolder=mock(IFolder.class);
  String version=VersionUtils.DEFAULT_VERSION;
  boolean overwrite=true;
  IProgressMonitor progressMonitor=mock(IProgressMonitor.class);
  IProject mockIProject=mock(IProject.class);
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,null,desFolder,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(false);
    }
  }
  try {
    RepositoryResourceUtil.copyOSFileTOProject(mockIProject,path,null,version,overwrite,progressMonitor);
    fail();
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(false);
    }
  }
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager mockProjectManager=mock(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(mockProjectManager);
  Project mockProject=mock(Project.class);
  when(ProjectManager.getInstance().getCurrentProject()).thenReturn(mockProject);
  PowerMockito.mockStatic(ResourceModelUtils.class);
  when(ResourceModelUtils.getProject(mockProject)).thenReturn(mockIProject);
  String invalidPath=""String_Node_Str"";
  when(desFolder.exists()).thenReturn(true);
  IFile copyOfFile=RepositoryResourceUtil.copyOSFileTOProject(null,invalidPath,desFolder,version,overwrite,progressMonitor);
  PowerMockito.verifyStatic(Mockito.atLeastOnce());
  ProjectManager.getInstance();
  ResourceModelUtils.getProject(Mockito.any(Project.class));
  assertNull(copyOfFile);
  String validPath=""String_Node_Str"";
  File file=new File(validPath);
  File spyFile=Mockito.spy(file);
  PowerMockito.whenNew(File.class).withArguments(validPath).thenReturn(spyFile);
  when(spyFile.exists()).thenReturn(true);
  when(spyFile.getName()).thenReturn(""String_Node_Str"");
  IFile mockIFile=mock(IFile.class);
  when(desFolder.getFile(Mockito.anyString())).thenReturn(mockIFile);
  IPath mockIPath=mock(IPath.class);
  when(mockIFile.getLocation()).thenReturn(mockIPath);
  when(mockIPath.toOSString()).thenReturn(validPath);
  FileInputStream inputStream=mock(FileInputStream.class);
  PowerMockito.whenNew(FileInputStream.class).withArguments(spyFile).thenReturn(inputStream);
  IFile copiedFile=RepositoryResourceUtil.copyOSFileTOProject(mockIProject,validPath,desFolder,version,overwrite,progressMonitor);
  assertNotNull(copiedFile);
  verify(inputStream,Mockito.times(1)).close();
}",0.9961375048281188
147703,"@Test public void testRemoveViewObjectPhysically() throws PersistenceException {
  String name=""String_Node_Str"";
  String version=VersionUtils.DEFAULT_VERSION;
  String path=""String_Node_Str"";
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  try {
    RepositoryResourceUtil.removeViewObjectPhysically(null,name,version,path);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException)     assertTrue(true);
 else     assertTrue(""String_Node_Str"",false);
  }
  try {
    RepositoryResourceUtil.removeViewObjectPhysically(mockType,null,version,path);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException)     assertTrue(true);
 else     assertTrue(""String_Node_Str"",false);
  }
  IProxyRepositoryFactory mockFactory=mock(IProxyRepositoryFactory.class);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(mockFactory);
  List<IRepositoryViewObject> viewObjects=new ArrayList<IRepositoryViewObject>();
  for (int i=0; i < 3; i++) {
    IRepositoryViewObject mockViewObject=createMockedViewObject(name,version,path);
    viewObjects.add(mockViewObject);
  }
  when(mockFactory.getAll(mockType)).thenReturn(viewObjects);
  RepositoryResourceUtil.removeViewObjectPhysically(mockType,name,version,path);
  verify(mockFactory,Mockito.atLeastOnce()).deleteObjectPhysical(Mockito.any(IRepositoryViewObject.class),eq(version));
}","@Test public void testRemoveViewObjectPhysically() throws PersistenceException {
  String name=""String_Node_Str"";
  String version=VersionUtils.DEFAULT_VERSION;
  String path=""String_Node_Str"";
  ERepositoryObjectType mockType=mock(ERepositoryObjectType.class);
  try {
    RepositoryResourceUtil.removeViewObjectPhysically(null,name,version,path);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(""String_Node_Str"",false);
    }
  }
  try {
    RepositoryResourceUtil.removeViewObjectPhysically(mockType,null,version,path);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    if (e instanceof IllegalArgumentException) {
      assertTrue(true);
    }
 else {
      assertTrue(""String_Node_Str"",false);
    }
  }
  IProxyRepositoryFactory mockFactory=mock(IProxyRepositoryFactory.class);
  when(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory()).thenReturn(mockFactory);
  List<IRepositoryViewObject> viewObjects=new ArrayList<IRepositoryViewObject>();
  for (int i=0; i < 3; i++) {
    IRepositoryViewObject mockViewObject=createMockedViewObject(name,version,path);
    viewObjects.add(mockViewObject);
  }
  when(mockFactory.getAll(mockType)).thenReturn(viewObjects);
  RepositoryResourceUtil.removeViewObjectPhysically(mockType,name,version,path);
  verify(mockFactory,Mockito.atLeastOnce()).deleteObjectPhysical(Mockito.any(IRepositoryViewObject.class),eq(version));
}",0.9811447811447812
147704,"private void updateButtons(){
  try {
    WSRoutingEngineV2Status status=getServerRoutingStatus();
    startButton.setEnabled(status != WSRoutingEngineV2Status.RUNNING);
    suspendButton.setEnabled(status != WSRoutingEngineV2Status.SUSPENDED);
    stopButton.setEnabled(status != WSRoutingEngineV2Status.STOPPED);
    statusLabel.setText(status.getValue());
  }
 catch (  RemoteException e) {
    startButton.setEnabled(true);
    suspendButton.setEnabled(false);
    stopButton.setEnabled(false);
    statusLabel.setText(""String_Node_Str"");
    log.debug(e.getMessage(),e);
  }
}","protected void updateButtons(){
  try {
    WSRoutingEngineV2Status status=getServerRoutingStatus();
    startButton.setEnabled(status != WSRoutingEngineV2Status.RUNNING);
    suspendButton.setEnabled(status != WSRoutingEngineV2Status.SUSPENDED);
    stopButton.setEnabled(status != WSRoutingEngineV2Status.STOPPED);
    statusLabel.setText(status.getValue());
  }
 catch (  RemoteException e) {
    startButton.setEnabled(true);
    suspendButton.setEnabled(false);
    stopButton.setEnabled(false);
    statusLabel.setText(""String_Node_Str"");
    log.debug(e.getMessage(),e);
  }
}",0.9896907216494846
147705,"private WSRoutingEngineV2Status getServerRoutingStatus() throws RemoteException {
  XtentisPort port=getPort();
  WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.STATUS));
  return status;
}","protected WSRoutingEngineV2Status getServerRoutingStatus() throws RemoteException {
  XtentisPort port=getPort();
  WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.STATUS));
  return status;
}",0.9766536964980544
147706,"@Override protected URL getSourceURL(String path){
  if (null == path) {
    return null;
  }
  if (path.startsWith(""String_Node_Str"")) {
    String modelName=path.substring(5);
    IRepositoryViewObject rvobject=RepositoryResourceUtil.findViewObjectByName(IServerObjectRepositoryType.TYPE_DATAMODEL,modelName);
    if (null == rvobject) {
      return null;
    }
    String prjLabel=rvobject.getProjectLabel();
    String parentPath=buildParentPath(rvobject);
    String sep=""String_Node_Str"" + IPath.SEPARATOR;
    String fileName=""String_Node_Str"" + ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString() + sep+ prjLabel.toUpperCase()+ sep+ ""String_Node_Str""+ sep+ ""String_Node_Str""+ parentPath+ rvobject.getLabel()+ ""String_Node_Str""+ rvobject.getVersion()+ ""String_Node_Str"";
    return super.getSourceURL(fileName);
  }
 else {
    return super.getSourceURL(path);
  }
}","@Override protected URL getSourceURL(String path){
  if (null == path) {
    return null;
  }
  if (path.startsWith(""String_Node_Str"")) {
    String modelName=path.substring(5);
    IRepositoryViewObject rvobject=RepositoryResourceUtil.findViewObjectByName(IServerObjectRepositoryType.TYPE_DATAMODEL,modelName);
    if (null == rvobject) {
      return null;
    }
    String prjLabel=rvobject.getProjectLabel();
    String parentPath=buildParentPath(rvobject);
    if (!parentPath.startsWith(""String_Node_Str"")) {
      parentPath=""String_Node_Str"" + parentPath;
    }
    String sep=""String_Node_Str"" + IPath.SEPARATOR;
    String fileName=""String_Node_Str"" + ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString() + sep+ prjLabel.toUpperCase()+ sep+ ""String_Node_Str""+ sep+ ""String_Node_Str""+ parentPath+ rvobject.getLabel()+ ""String_Node_Str""+ rvobject.getVersion()+ ""String_Node_Str"";
    return super.getSourceURL(fileName);
  }
 else {
    return super.getSourceURL(path);
  }
}",0.9427966101694916
147707,"/** 
 * Create the dialog.
 * @param parentShell
 * @param conflictCount
 */
public ConsistencyConflictDialog(Shell parentShell,int conflictCount,Map<IRepositoryViewObject,WSDigest> viewObjMap){
  super(parentShell);
  this.conflictCount=conflictCount;
  this.viewObjMap=viewObjMap;
  setShellStyle(getShellStyle() | SWT.RESIZE);
}","/** 
 * Create the dialog.
 * @param parentShell
 * @param conflictCount
 */
public ConsistencyConflictDialog(Shell parentShell,int conflictCount,Map<IRepositoryViewObject,WSDigest> viewObjMap){
  super(parentShell);
  this.conflictCount=conflictCount;
  this.viewObjMap=viewObjMap;
  setShellStyle(SWT.TITLE | SWT.RESIZE);
}",0.9634146341463414
147708,"/** 
 * Getter for result.
 * @return the result
 */
public ConsistencyCheckResult getResult(){
  return this.result;
}","/** 
 * Getter for result.
 * @return the result
 */
public ConsistencyCheckResult getResult(){
  if (result == null) {
    result=new ConsistencyService.ConsistencyCheckResult();
  }
  return this.result;
}",0.6257668711656442
147709,"@Override public String getText(Object element){
  if (element instanceof IRepositoryViewObject && curServerDef != null && !(element instanceof FolderRepositoryObject)) {
    ConsistencyData consistencyData=getConsistencyData(curServerDef,(IRepositoryViewObject)element);
    if (consistencyData != null) {
      CompareResultEnum compareResult=consistencyData.getCompareResult();
switch (compareResult) {
case NOT_EXIST_IN_SERVER:
        return Messages.ConsistencyConflictt_NotDeployed;
case SAME:
case CONFLICT:
case MODIFIED_LOCALLY:
      return Messages.ConsistencyConflictt_Deployed;
case NOT_SUPPORT:
    return Messages.ConsistencyConflict_undefined;
}
}
}
return ""String_Node_Str"";
}","@Override public String getText(Object element){
  if (element instanceof IRepositoryViewObject && curServerDef != null && !(element instanceof FolderRepositoryObject)) {
    ConsistencyData consistencyData=getConsistencyData(curServerDef,(IRepositoryViewObject)element);
    if (consistencyData != null) {
      CompareResultEnum compareResult=consistencyData.getCompareResult();
      if (compareResult != null) {
switch (compareResult) {
case NOT_EXIST_IN_SERVER:
          return Messages.ConsistencyConflictt_NotDeployed;
case SAME:
case CONFLICT:
case MODIFIED_LOCALLY:
        return Messages.ConsistencyConflictt_Deployed;
case NOT_SUPPORT:
      return Messages.ConsistencyConflict_undefined;
  }
}
}
}
return ""String_Node_Str"";
}",0.9685973482205164
147710,"private synchronized ConsistencyData getConsistencyData(MDMServerDef serverDef,IRepositoryViewObject viewObj){
  ConsistencyData consistencyData=consistencyMap.get(viewObj);
  if (consistencyData != null) {
    return consistencyData;
  }
  try {
    ConsistencyService consistencyService=ConsistencyService.getInstance();
    consistencyData=new ConsistencyData();
    ERepositoryObjectType viewType=viewObj.getRepositoryObjectType();
    if (viewType == null) {
      return null;
    }
    if (viewType == IServerObjectRepositoryType.TYPE_RESOURCE || viewType == IServerObjectRepositoryType.TYPE_JOB || viewType == IServerObjectRepositoryType.TYPE_WORKFLOW) {
      consistencyData.setCompareResult(CompareResultEnum.NOT_SUPPORT);
    }
 else {
      ArrayList<IRepositoryViewObject> viewObjs=new ArrayList<IRepositoryViewObject>();
      viewObjs.add(viewObj);
      Map<IRepositoryViewObject,WSDigest> digestValueResult=consistencyService.queryServerDigestValue(serverDef,viewObjs);
      WSDigest serverDigestTime=digestValueResult.get(viewObj);
      consistencyData.setServerDigestTime(serverDigestTime);
      consistencyService.updateCurrentDigestValue(viewObj);
      Item item=viewObj.getProperty().getItem();
      String ld=consistencyService.getLocalDigestValue(item);
      String cd=consistencyService.getCurrentDigestValue(item);
      long localTimestamp=consistencyService.getLocalTimestamp(item);
      String type=viewObj.getRepositoryObjectType().getKey();
      String objectName=viewObj.getLabel();
      WSDigestKey key=new WSDigestKey(type,objectName);
      consistencyData.setLocalDigestTime(new WSDigest(key,ld,localTimestamp));
      CompareResultEnum result;
      if (serverDigestTime == null || serverDigestTime.getDigestValue() == null) {
        result=CompareResultEnum.NOT_EXIST_IN_SERVER;
      }
 else {
        String rd=serverDigestTime.getDigestValue();
        result=consistencyService.getCompareResult(cd,ld,rd);
      }
      consistencyData.setCompareResult(result);
    }
    consistencyMap.put(viewObj,consistencyData);
  }
 catch (  RemoteException e) {
    log.error(e.getMessage(),e);
  }
catch (  XtentisException e) {
    log.error(e.getMessage(),e);
  }
  return consistencyData;
}","private synchronized ConsistencyData getConsistencyData(MDMServerDef serverDef,IRepositoryViewObject viewObj){
  ConsistencyData consistencyData=consistencyMap.get(viewObj);
  if (consistencyData != null) {
    return consistencyData;
  }
  try {
    ConsistencyService consistencyService=ConsistencyService.getInstance();
    consistencyData=new ConsistencyData();
    ERepositoryObjectType viewType=viewObj.getRepositoryObjectType();
    if (viewType == null) {
      return null;
    }
    if (viewType == IServerObjectRepositoryType.TYPE_RESOURCE || viewType == IServerObjectRepositoryType.TYPE_JOB || viewType == IServerObjectRepositoryType.TYPE_WORKFLOW) {
      consistencyData.setCompareResult(CompareResultEnum.NOT_SUPPORT);
    }
 else {
      List<IRepositoryViewObject> viewObjs=new ArrayList<IRepositoryViewObject>();
      viewObjs.add(viewObj);
      Map<IRepositoryViewObject,WSDigest> digestValueResult=consistencyService.queryServerDigestValue(serverDef,viewObjs);
      WSDigest serverDigestTime=digestValueResult.get(viewObj);
      consistencyData.setServerDigestTime(serverDigestTime);
      consistencyService.updateCurrentDigestValue(viewObj);
      Item item=viewObj.getProperty().getItem();
      String ld=consistencyService.getLocalDigestValue(item);
      String cd=consistencyService.getCurrentDigestValue(item);
      long localTimestamp=consistencyService.getLocalTimestamp(item);
      String type=viewObj.getRepositoryObjectType().getKey();
      String objectName=viewObj.getLabel();
      WSDigestKey key=new WSDigestKey(type,objectName);
      consistencyData.setLocalDigestTime(new WSDigest(key,ld,localTimestamp));
      CompareResultEnum result;
      if (serverDigestTime == null || serverDigestTime.getDigestValue() == null) {
        result=CompareResultEnum.NOT_EXIST_IN_SERVER;
      }
 else {
        String rd=serverDigestTime.getDigestValue();
        result=consistencyService.getCompareResult(cd,ld,rd);
      }
      consistencyData.setCompareResult(result);
    }
    consistencyMap.put(viewObj,consistencyData);
  }
 catch (  RemoteException e) {
    log.error(e.getMessage(),e);
  }
catch (  XtentisException e) {
    log.error(e.getMessage(),e);
  }
  return consistencyData;
}",0.9988811814723652
147711,"private static ExternalInfoHolder<?> getHolderFromExtension(String type){
  IExtensionPoint point=Platform.getExtensionRegistry().getExtensionPoint(holderExtension);
  if (null == point) {
    return null;
  }
  for (  IExtension ext : point.getExtensions()) {
    IConfigurationElement[] configurationElements=ext.getConfigurationElements();
    for (    IConfigurationElement ce : configurationElements) {
      String id=ce.getAttribute(""String_Node_Str"");
      if (type.equals(id)) {
        try {
          return (ExternalInfoHolder<?>)ce.createExecutableExtension(""String_Node_Str"");
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return null;
}","private static ExternalInfoHolder<?> getHolderFromExtension(String type){
  IExtensionPoint point=Platform.getExtensionRegistry().getExtensionPoint(holderExtension);
  if (null == point) {
    return null;
  }
  for (  IExtension ext : point.getExtensions()) {
    IConfigurationElement[] configurationElements=ext.getConfigurationElements();
    for (    IConfigurationElement ce : configurationElements) {
      String id=ce.getAttribute(""String_Node_Str"");
      if (type.equals(id)) {
        try {
          return (ExternalInfoHolder<?>)ce.createExecutableExtension(""String_Node_Str"");
        }
 catch (        CoreException e) {
          log.error(e.getMessage());
        }
      }
    }
  }
  return null;
}",0.9706293706293706
147712,"public ConsistencyCheckResult checkConsistency(MDMServerDef serverDef,Collection<IRepositoryViewObject> viewObjs) throws XtentisException, RemoteException {
  updateLocalDigestValue(viewObjs);
  Map<IRepositoryViewObject,WSDigestValueTimeStamp> viewObjMap=queryServerDigestValue(serverDef,viewObjs);
  int conflictCount=getConflictCount(viewObjMap);
  if (conflictCount > 0) {
    if (isWarnUserWhenConflict()) {
      ConfirmConflictMessageDialog confirmDialog=new ConfirmConflictMessageDialog(getShell(),conflictCount);
      int returnValue=confirmDialog.open();
      if (returnValue == IDialogConstants.OK_ID) {
        int strategy=confirmDialog.getStrategy();
        return getCheckResultByStrategy(strategy,viewObjMap);
      }
 else       if (returnValue == IDialogConstants.DETAILS_ID) {
        ConsistencyConflictDialog dialog=new ConsistencyConflictDialog(getShell(),conflictCount,viewObjMap);
        dialog.open();
        return dialog.getResult();
      }
 else {
        return new ConsistencyCheckResult();
      }
    }
 else {
      int strategy=getConflictStrategy();
      return getCheckResultByStrategy(strategy,viewObjMap);
    }
  }
 else {
    return new ConsistencyCheckResult(viewObjs);
  }
}","public ConsistencyCheckResult checkConsistency(MDMServerDef serverDef,Collection<IRepositoryViewObject> viewObjs) throws XtentisException, RemoteException {
  updateLocalDigestValue(viewObjs);
  Map<IRepositoryViewObject,WSDigest> viewObjMap=queryServerDigestValue(serverDef,viewObjs);
  int conflictCount=getConflictCount(viewObjMap);
  if (conflictCount > 0) {
    if (isWarnUserWhenConflict()) {
      ConfirmConflictMessageDialog confirmDialog=new ConfirmConflictMessageDialog(getShell(),conflictCount);
      int returnValue=confirmDialog.open();
      if (returnValue == IDialogConstants.OK_ID) {
        int strategy=confirmDialog.getStrategy();
        return getCheckResultByStrategy(strategy,viewObjMap);
      }
 else       if (returnValue == IDialogConstants.DETAILS_ID) {
        ConsistencyConflictDialog dialog=new ConsistencyConflictDialog(getShell(),conflictCount,viewObjMap);
        dialog.open();
        return dialog.getResult();
      }
 else {
        return new ConsistencyCheckResult();
      }
    }
 else {
      int strategy=getConflictStrategy();
      return getCheckResultByStrategy(strategy,viewObjMap);
    }
  }
 else {
    return new ConsistencyCheckResult(viewObjs);
  }
}",0.9942434210526316
147713,"private int getConflictCount(Map<IRepositoryViewObject,WSDigestValueTimeStamp> map){
  int total=0;
  for (  IRepositoryViewObject viewObj : map.keySet()) {
    WSDigestValueTimeStamp digestTime=map.get(viewObj);
    if (digestTime != null && digestTime.getDigestValue() != null) {
      String localDigestValue=getLocalDigestValue(viewObj.getProperty().getItem());
      if (localDigestValue != null) {
        if (!localDigestValue.equals(digestTime.getDigestValue())) {
          total++;
        }
      }
    }
  }
  return total;
}","private int getConflictCount(Map<IRepositoryViewObject,WSDigest> map){
  int total=0;
  for (  IRepositoryViewObject viewObj : map.keySet()) {
    WSDigest digestTime=map.get(viewObj);
    if (digestTime != null && digestTime.getDigestValue() != null) {
      String localDigestValue=getLocalDigestValue(viewObj.getProperty().getItem());
      if (localDigestValue != null) {
        if (!localDigestValue.equals(digestTime.getDigestValue())) {
          total++;
        }
      }
    }
  }
  return total;
}",0.9732313575525812
147714,"private ConsistencyCheckResult getCheckResultByStrategy(int strategy,Map<IRepositoryViewObject,WSDigestValueTimeStamp> viewObjMap){
  List<IRepositoryViewObject> toDeployObjs=new LinkedList<IRepositoryViewObject>();
  List<IRepositoryViewObject> toSkipObjs=new LinkedList<IRepositoryViewObject>();
  for (  IRepositoryViewObject viewObj : viewObjMap.keySet()) {
    WSDigestValueTimeStamp dt=viewObjMap.get(viewObj);
    if (dt == null) {
      toDeployObjs.add(viewObj);
    }
 else {
      Item item=viewObj.getProperty().getItem();
      String localDigestValue=ConsistencyService.getInstance().getLocalDigestValue(item);
      String serverDigestValue=dt.getDigestValue();
      if (localDigestValue.equals(serverDigestValue)) {
        if (strategy == CONFLICT_STRATEGY_DEFAULT || strategy == CONFLICT_STRATEGY_SKIP_DIFFERENCE) {
          toSkipObjs.add(viewObj);
        }
 else         if (strategy == CONFLICT_STRATEGY_OVERWRITE) {
          toDeployObjs.add(viewObj);
        }
      }
 else {
        if (strategy == CONFLICT_STRATEGY_SKIP_DIFFERENCE) {
          toSkipObjs.add(viewObj);
        }
 else         if (strategy == CONFLICT_STRATEGY_DEFAULT || strategy == CONFLICT_STRATEGY_OVERWRITE) {
          toDeployObjs.add(viewObj);
        }
      }
    }
  }
  return new ConsistencyCheckResult(toDeployObjs,toSkipObjs);
}","private ConsistencyCheckResult getCheckResultByStrategy(int strategy,Map<IRepositoryViewObject,WSDigest> viewObjMap){
  List<IRepositoryViewObject> toDeployObjs=new LinkedList<IRepositoryViewObject>();
  List<IRepositoryViewObject> toSkipObjs=new LinkedList<IRepositoryViewObject>();
  for (  IRepositoryViewObject viewObj : viewObjMap.keySet()) {
    WSDigest dt=viewObjMap.get(viewObj);
    if (dt == null) {
      toDeployObjs.add(viewObj);
    }
 else {
      Item item=viewObj.getProperty().getItem();
      String localDigestValue=ConsistencyService.getInstance().getLocalDigestValue(item);
      String serverDigestValue=dt.getDigestValue();
      if (localDigestValue.equals(serverDigestValue)) {
        if (strategy == CONFLICT_STRATEGY_DEFAULT || strategy == CONFLICT_STRATEGY_SKIP_DIFFERENCE) {
          toSkipObjs.add(viewObj);
        }
 else         if (strategy == CONFLICT_STRATEGY_OVERWRITE) {
          toDeployObjs.add(viewObj);
        }
      }
 else {
        if (strategy == CONFLICT_STRATEGY_SKIP_DIFFERENCE) {
          toSkipObjs.add(viewObj);
        }
 else         if (strategy == CONFLICT_STRATEGY_DEFAULT || strategy == CONFLICT_STRATEGY_OVERWRITE) {
          toDeployObjs.add(viewObj);
        }
      }
    }
  }
  return new ConsistencyCheckResult(toDeployObjs,toSkipObjs);
}",0.9894419306184012
147715,"public <T>Map<T,WSDigestValueTimeStamp> queryServerDigestValue(MDMServerDef serverDef,Collection<T> objs) throws XtentisException, RemoteException {
  Map<T,WSDigestValueTimeStamp> result=new LinkedHashMap<T,WSDigestValueTimeStamp>();
  XtentisPort port=RepositoryWebServiceAdapter.getXtentisPort(serverDef);
  for (  T obj : objs) {
    String type=null;
    String objectName=null;
    if (obj instanceof IRepositoryViewObject) {
      IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
      type=viewObj.getRepositoryObjectType().getKey();
      objectName=viewObj.getLabel();
    }
 else     if (obj instanceof TreeObject) {
      TreeObject treeObj=(TreeObject)obj;
      ERepositoryObjectType repositoryObjectType=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
      if (type != null) {
        type=repositoryObjectType.getKey();
        objectName=treeObj.getDisplayName();
      }
    }
    if (type != null && objectName != null) {
      WSDigestValueTimeStamp digest=port.getDigest(new WSDigestValueKey(type,objectName));
      result.put(obj,digest);
    }
  }
  return result;
}","public <T>Map<T,WSDigest> queryServerDigestValue(MDMServerDef serverDef,Collection<T> objs) throws XtentisException, RemoteException {
  Map<T,WSDigest> result=new LinkedHashMap<T,WSDigest>();
  XtentisPort port=RepositoryWebServiceAdapter.getXtentisPort(serverDef);
  for (  T obj : objs) {
    String type=null;
    String objectName=null;
    if (obj instanceof IRepositoryViewObject) {
      IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
      type=viewObj.getRepositoryObjectType().getKey();
      objectName=viewObj.getLabel();
    }
 else     if (obj instanceof TreeObject) {
      TreeObject treeObj=(TreeObject)obj;
      ERepositoryObjectType repositoryObjectType=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
      if (type != null) {
        type=repositoryObjectType.getKey();
        objectName=treeObj.getDisplayName();
      }
    }
    if (type != null && objectName != null) {
      WSDigest digest=port.getDigest(new WSDigestKey(type,objectName));
      result.put(obj,digest);
    }
  }
  return result;
}",0.971979788700046
147716,"public void updateDigestValue(MDMServerDef serverDef,IRepositoryViewObject viewObj) throws XtentisException {
  XtentisPort port=RepositoryWebServiceAdapter.getXtentisPort(serverDef);
  updateLocalDigestValue(viewObj);
  Item item=viewObj.getProperty().getItem();
  WSDigestValueTimeStamp value=new WSDigestValueTimeStamp(getLocalDigestValue(item),0L);
  String type=viewObj.getRepositoryObjectType().getKey();
  String objectName=viewObj.getLabel();
  WSDigestValueKey key=new WSDigestValueKey(type,objectName);
  WSLong timeValue=port.updateDigest(key,value);
  if (timeValue != null) {
    updateLocalTimestamp(item,timeValue.getValue());
  }
}","public void updateDigestValue(MDMServerDef serverDef,IRepositoryViewObject viewObj) throws XtentisException, RemoteException {
  XtentisPort port=RepositoryWebServiceAdapter.getXtentisPort(serverDef);
  updateLocalDigestValue(viewObj);
  Item item=viewObj.getProperty().getItem();
  String type=viewObj.getRepositoryObjectType().getKey();
  String objectName=viewObj.getLabel();
  WSDigestKey key=new WSDigestKey(type,objectName);
  WSDigest value=new WSDigest(key,getLocalDigestValue(item),0L);
  WSLong timeValue=port.updateDigest(value);
  if (timeValue != null) {
    updateLocalTimestamp(item,timeValue.getValue());
  }
}",0.5498821681068342
147717,"private void updateServerConsistencyStatus(MDMServerDef serverDef,Collection<IRepositoryViewObject> viewObjs) throws XtentisException {
  ConsistencyService consistencyService=ConsistencyService.getInstance();
  for (  IRepositoryViewObject viewObj : viewObjs) {
    consistencyService.updateDigestValue(serverDef,viewObj);
  }
}","private void updateServerConsistencyStatus(MDMServerDef serverDef,Collection<IRepositoryViewObject> viewObjs) throws XtentisException, RemoteException {
  ConsistencyService consistencyService=ConsistencyService.getInstance();
  for (  IRepositoryViewObject viewObj : viewObjs) {
    consistencyService.updateDigestValue(serverDef,viewObj);
  }
}",0.9748148148148148
147718,"public void runWithType(ERepositoryObjectType type){
  DeployAllDialog dialog=new DeployAllDialog(getShell(),type);
  if (dialog.open() == IDialogConstants.OK_ID) {
    List<AbstractDeployCommand> selectededCommands=dialog.getSelectedCommands();
    if (selectededCommands.size() >= 0) {
      DeployService deployService=DeployService.getInstance();
      deployViewObject=deployService.getDeployViewObject(selectededCommands);
      IModelValidateResult validateResult=deployService.validateModel(deployViewObject);
      int selectedButton=validateResult.getSelectedButton();
      if (selectedButton == IModelValidationService.BUTTON_CANCEL) {
        return;
      }
      List<IRepositoryViewObject> validObjects=validateResult.getValidObjects(selectedButton);
      List<IRepositoryViewObject> invalidObjects=validateResult.getInvalidObjects(selectedButton);
      MDMServerDef serverDef=dialog.getServerDef();
      ConsistencyCheckResult consistencyCheckResult=deployService.checkConsistency(serverDef,validObjects);
      if (consistencyCheckResult == null || consistencyCheckResult.isCanceled()) {
        return;
      }
 else {
        validObjects=consistencyCheckResult.getToDeployObjects();
      }
      deployService.removeInvalidCommands(invalidObjects,selectededCommands);
      deployService.removeInvalidCommands(consistencyCheckResult.getToSkipObjects(),selectededCommands);
      LockedDirtyObjectDialog lockDirtyDialog=new LockedDirtyObjectDialog(getShell(),Messages.AbstractDeployAction_promptToSaveEditors,validObjects);
      if (lockDirtyDialog.needShowDialog() && lockDirtyDialog.open() == IDialogConstants.CANCEL_ID) {
        return;
      }
      lockDirtyDialog.saveDirtyObjects();
      IStatus status=deployService.runCommands(selectededCommands,serverDef);
      try {
        deployService.updateServerConsistencyStatus(serverDef,status);
      }
 catch (      XtentisException e) {
        log.error(e.getMessage(),e);
      }
      deployService.generateValidationFailedDeployStatus(status,invalidObjects);
      deployService.generateConsistencyCancelDeployStatus(status,consistencyCheckResult.getToSkipObjects());
      updateChangedStatus(status);
      if (status.isMultiStatus()) {
        showDeployStatus(status);
      }
      updateLastServer(status,new NullProgressMonitor());
    }
  }
}","public void runWithType(ERepositoryObjectType type){
  DeployAllDialog dialog=new DeployAllDialog(getShell(),type);
  if (dialog.open() == IDialogConstants.OK_ID) {
    List<AbstractDeployCommand> selectededCommands=dialog.getSelectedCommands();
    if (selectededCommands.size() >= 0) {
      DeployService deployService=DeployService.getInstance();
      deployViewObject=deployService.getDeployViewObject(selectededCommands);
      IModelValidateResult validateResult=deployService.validateModel(deployViewObject);
      int selectedButton=validateResult.getSelectedButton();
      if (selectedButton == IModelValidationService.BUTTON_CANCEL) {
        return;
      }
      List<IRepositoryViewObject> validObjects=validateResult.getValidObjects(selectedButton);
      List<IRepositoryViewObject> invalidObjects=validateResult.getInvalidObjects(selectedButton);
      MDMServerDef serverDef=dialog.getServerDef();
      ConsistencyCheckResult consistencyCheckResult=deployService.checkConsistency(serverDef,validObjects);
      if (consistencyCheckResult == null || consistencyCheckResult.isCanceled()) {
        return;
      }
 else {
        validObjects=consistencyCheckResult.getToDeployObjects();
      }
      deployService.removeInvalidCommands(invalidObjects,selectededCommands);
      deployService.removeInvalidCommands(consistencyCheckResult.getToSkipObjects(),selectededCommands);
      LockedDirtyObjectDialog lockDirtyDialog=new LockedDirtyObjectDialog(getShell(),Messages.AbstractDeployAction_promptToSaveEditors,validObjects);
      if (lockDirtyDialog.needShowDialog() && lockDirtyDialog.open() == IDialogConstants.CANCEL_ID) {
        return;
      }
      lockDirtyDialog.saveDirtyObjects();
      IStatus status=deployService.runCommands(selectededCommands,serverDef);
      try {
        deployService.updateServerConsistencyStatus(serverDef,status);
      }
 catch (      XtentisException e) {
        log.error(e.getMessage(),e);
      }
catch (      RemoteException e) {
        log.error(e.getMessage(),e);
      }
      deployService.generateValidationFailedDeployStatus(status,invalidObjects);
      deployService.generateConsistencyCancelDeployStatus(status,consistencyCheckResult.getToSkipObjects());
      updateChangedStatus(status);
      if (status.isMultiStatus()) {
        showDeployStatus(status);
      }
      updateLastServer(status,new NullProgressMonitor());
    }
  }
}",0.9833859095688748
147719,"/** 
 * Create the dialog.
 * @param parentShell
 * @param conflictCount
 */
public ConsistencyConflictDialog(Shell parentShell,int conflictCount,Map<IRepositoryViewObject,WSDigestValueTimeStamp> viewObjMap){
  super(parentShell);
  this.conflictCount=conflictCount;
  this.viewObjMap=viewObjMap;
  setShellStyle(getShellStyle() | SWT.RESIZE);
}","/** 
 * Create the dialog.
 * @param parentShell
 * @param conflictCount
 */
public ConsistencyConflictDialog(Shell parentShell,int conflictCount,Map<IRepositoryViewObject,WSDigest> viewObjMap){
  super(parentShell);
  this.conflictCount=conflictCount;
  this.viewObjMap=viewObjMap;
  setShellStyle(getShellStyle() | SWT.RESIZE);
}",0.9792899408284024
147720,"public String getColumnText(Object element,int columnIndex){
  IRepositoryViewObject viewObj=(IRepositoryViewObject)element;
  if (element instanceof FolderRepositoryObject) {
    if (columnIndex == 0) {
      return getViewObjName(viewObj);
    }
  }
 else {
switch (columnIndex) {
case 0:
      return getViewObjName(viewObj);
case 1:
    CompareResultEnum compareResult=getCompareResult(viewObj);
switch (compareResult) {
case NOT_EXIST_IN_SERVER:
    return Messages.ConsistencyConflictDialog_notExist;
case SAME:
  return Messages.ConsistencyConflict_Same;
case DIFFERENT:
return Messages.ConsistencyConflict_Different;
}
break;
case 2:
return getOperationLabel(viewObj);
case 3:
Item item=viewObj.getProperty().getItem();
long localTimestamp=ConsistencyService.getInstance().getLocalTimestamp(item);
if (localTimestamp > 0) {
return df.format(new Date(localTimestamp));
}
break;
case 4:
WSDigestValueTimeStamp dt=viewObjMap.get(viewObj);
if (dt != null) {
return df.format(new Date(dt.getTimeStamp()));
}
break;
}
}
return ""String_Node_Str"";
}","public String getColumnText(Object element,int columnIndex){
  IRepositoryViewObject viewObj=(IRepositoryViewObject)element;
  if (element instanceof FolderRepositoryObject) {
    if (columnIndex == 0) {
      return getViewObjName(viewObj);
    }
  }
 else {
switch (columnIndex) {
case 0:
      return getViewObjName(viewObj);
case 1:
    CompareResultEnum compareResult=getCompareResult(viewObj);
switch (compareResult) {
case NOT_EXIST_IN_SERVER:
    return Messages.ConsistencyConflictDialog_notExist;
case SAME:
  return Messages.ConsistencyConflict_Same;
case DIFFERENT:
return Messages.ConsistencyConflict_Different;
}
break;
case 2:
return getOperationLabel(viewObj);
case 3:
Item item=viewObj.getProperty().getItem();
long localTimestamp=ConsistencyService.getInstance().getLocalTimestamp(item);
if (localTimestamp > 0) {
return df.format(new Date(localTimestamp));
}
break;
case 4:
WSDigest dt=viewObjMap.get(viewObj);
if (dt != null) {
return df.format(new Date(dt.getTimeStamp()));
}
break;
}
}
return ""String_Node_Str"";
}",0.9932821497120922
147721,"private CompareResultEnum getCompareResult(IRepositoryViewObject viewObj){
  CompareResultEnum result=compareResultMap.get(viewObj);
  if (result == null) {
    WSDigestValueTimeStamp dt=viewObjMap.get(viewObj);
    if (dt == null) {
      result=CompareResultEnum.NOT_EXIST_IN_SERVER;
    }
 else {
      Item item=viewObj.getProperty().getItem();
      String localDigestValue=ConsistencyService.getInstance().getLocalDigestValue(item);
      String serverDigestValue=dt.getDigestValue();
      if (localDigestValue.equals(serverDigestValue)) {
        result=CompareResultEnum.SAME;
      }
 else {
        result=CompareResultEnum.DIFFERENT;
      }
    }
    compareResultMap.put(viewObj,result);
  }
  return result;
}","private CompareResultEnum getCompareResult(IRepositoryViewObject viewObj){
  CompareResultEnum result=compareResultMap.get(viewObj);
  if (result == null) {
    WSDigest dt=viewObjMap.get(viewObj);
    if (dt == null) {
      result=CompareResultEnum.NOT_EXIST_IN_SERVER;
    }
 else {
      Item item=viewObj.getProperty().getItem();
      String localDigestValue=ConsistencyService.getInstance().getLocalDigestValue(item);
      String serverDigestValue=dt.getDigestValue();
      if (localDigestValue.equals(serverDigestValue)) {
        result=CompareResultEnum.SAME;
      }
 else {
        result=CompareResultEnum.DIFFERENT;
      }
    }
    compareResultMap.put(viewObj,result);
  }
  return result;
}",0.99023709902371
147722,"public void setLocalDigestTime(WSDigestValueTimeStamp localDigestTime){
  this.localDigestTime=localDigestTime;
}","public void setLocalDigestTime(WSDigest localDigestTime){
  this.localDigestTime=localDigestTime;
}",0.9339622641509434
147723,"public WSDigestValueTimeStamp getServerDigestTime(){
  return this.serverDigestTime;
}","public WSDigest getServerDigestTime(){
  return this.serverDigestTime;
}",0.9113924050632912
147724,"public void setServerDigestTime(WSDigestValueTimeStamp serverDigestTime){
  this.serverDigestTime=serverDigestTime;
}","public void setServerDigestTime(WSDigest serverDigestTime){
  this.serverDigestTime=serverDigestTime;
}",0.9363636363636364
147725,"public WSDigestValueTimeStamp getLocalDigestTime(){
  return this.localDigestTime;
}","public WSDigest getLocalDigestTime(){
  return this.localDigestTime;
}",0.9090909090909092
147726,"private Map<TreeObject,ConsistencyData> initConsistencyData(MDMServerDef serverDef,List<TreeObject> treeObjs){
  Map<TreeObject,ConsistencyData> map=new HashMap<TreeObject,TreeObjectCheckTreeViewer.ConsistencyData>();
  try {
    ConsistencyService consistencyService=ConsistencyService.getInstance();
    Map<TreeObject,WSDigestValueTimeStamp> serverDigestValues=consistencyService.queryServerDigestValue(serverDef,treeObjs);
    for (    TreeObject treeObject : treeObjs) {
      ConsistencyData consistencyData=new ConsistencyData();
      WSDigestValueTimeStamp serverDigestTime=serverDigestValues.get(treeObject);
      consistencyData.setServerDigestTime(serverDigestTime);
      String objName=treeObject.getDisplayName();
      ERepositoryObjectType viewType=RepositoryQueryService.getRepositoryObjectType(treeObject.getType());
      if (viewType == null) {
        continue;
      }
      IRepositoryViewObject viewObj=RepositoryResourceUtil.findViewObjectByName(viewType,objName);
      if (viewObj == null) {
        consistencyData.setCompareResult(CompareResultEnum.NOT_EXIST_IN_LOCAL);
      }
 else {
        Item item=viewObj.getProperty().getItem();
        consistencyService.updateLocalDigestValue(viewObj);
        String digestValue=consistencyService.getLocalDigestValue(item);
        long localTimestamp=consistencyService.getLocalTimestamp(item);
        consistencyData.setLocalDigestTime(new WSDigestValueTimeStamp(digestValue,localTimestamp));
        CompareResultEnum result;
        if (serverDigestTime == null) {
          result=CompareResultEnum.NOT_EXIST_IN_SERVER;
        }
 else {
          if (serverDigestTime.getDigestValue().equals(digestValue)) {
            result=CompareResultEnum.SAME;
          }
 else {
            result=CompareResultEnum.DIFFERENT;
          }
        }
        consistencyData.setCompareResult(result);
      }
      map.put(treeObject,consistencyData);
    }
  }
 catch (  RemoteException e) {
    log.error(e.getMessage(),e);
  }
catch (  XtentisException e) {
    log.error(e.getMessage(),e);
  }
  return map;
}","private Map<TreeObject,ConsistencyData> initConsistencyData(MDMServerDef serverDef,List<TreeObject> treeObjs){
  Map<TreeObject,ConsistencyData> map=new HashMap<TreeObject,TreeObjectCheckTreeViewer.ConsistencyData>();
  try {
    ConsistencyService consistencyService=ConsistencyService.getInstance();
    Map<TreeObject,WSDigest> serverDigestValues=consistencyService.queryServerDigestValue(serverDef,treeObjs);
    for (    TreeObject treeObject : treeObjs) {
      ConsistencyData consistencyData=new ConsistencyData();
      WSDigest serverDigestTime=serverDigestValues.get(treeObject);
      consistencyData.setServerDigestTime(serverDigestTime);
      String objName=treeObject.getDisplayName();
      ERepositoryObjectType viewType=RepositoryQueryService.getRepositoryObjectType(treeObject.getType());
      if (viewType == null) {
        continue;
      }
      IRepositoryViewObject viewObj=RepositoryResourceUtil.findViewObjectByName(viewType,objName);
      if (viewObj == null) {
        consistencyData.setCompareResult(CompareResultEnum.NOT_EXIST_IN_LOCAL);
      }
 else {
        Item item=viewObj.getProperty().getItem();
        consistencyService.updateLocalDigestValue(viewObj);
        String digestValue=consistencyService.getLocalDigestValue(item);
        long localTimestamp=consistencyService.getLocalTimestamp(item);
        String type=viewObj.getRepositoryObjectType().getKey();
        String objectName=viewObj.getLabel();
        WSDigestKey key=new WSDigestKey(type,objectName);
        consistencyData.setLocalDigestTime(new WSDigest(key,digestValue,localTimestamp));
        CompareResultEnum result;
        if (serverDigestTime == null) {
          result=CompareResultEnum.NOT_EXIST_IN_SERVER;
        }
 else {
          if (serverDigestTime.getDigestValue().equals(digestValue)) {
            result=CompareResultEnum.SAME;
          }
 else {
            result=CompareResultEnum.DIFFERENT;
          }
        }
        consistencyData.setCompareResult(result);
      }
      map.put(treeObject,consistencyData);
    }
  }
 catch (  RemoteException e) {
    log.error(e.getMessage(),e);
  }
catch (  XtentisException e) {
    log.error(e.getMessage(),e);
  }
  return map;
}",0.9349442379182156
147727,"@Override public String getText(Object element){
  if (!(element instanceof TreeParent)) {
    ConsistencyData consistencyData=consistencyMap.get(element);
    WSDigestValueTimeStamp dt=isLocal ? consistencyData.getLocalDigestTime() : consistencyData.getServerDigestTime();
    if (dt != null) {
      return DATE_FORMAT.format(new Date(dt.getTimeStamp()));
    }
  }
  return ""String_Node_Str"";
}","@Override public String getText(Object element){
  if (!(element instanceof TreeParent)) {
    ConsistencyData consistencyData=consistencyMap.get(element);
    WSDigest dt=isLocal ? consistencyData.getLocalDigestTime() : consistencyData.getServerDigestTime();
    if (dt != null) {
      return DATE_FORMAT.format(new Date(dt.getTimeStamp()));
    }
  }
  return ""String_Node_Str"";
}",0.982051282051282
147728,"@Override protected void doRun(){
  List<IRepositoryViewObject> viewObjs=getSelectedViewObject();
  DeployOnMDMExportWizard publishWizard=new DeployOnMDMExportWizard();
  publishWizard.setWindowTitle(EXPORTJOBSCRIPTS);
  publishWizard.init(getWorkbench(),(IStructuredSelection)this.getSelection());
  Shell activeShell=Display.getCurrent().getActiveShell();
  WizardDialog dialog=new WizardDialog(activeShell,publishWizard);
  dialog.open();
  boolean deploySucceed=publishWizard.isDeploySucceed();
  if (deploySucceed) {
    IRemoveCommandService service=(IRemoveCommandService)GlobalServiceRegister.getDefault().getService(IRemoveCommandService.class);
    SpagoBiServer spagoBiServer=publishWizard.getMdmServer();
    MDMServerDef mdmServer=getMdmServer(spagoBiServer);
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      for (      IRepositoryViewObject viewObj : viewObjs) {
        Item item=viewObj.getProperty().getItem();
        Property property=item.getProperty();
        if (property != null) {
          property.getAdditionalProperties().put(PROP_LAST_SERVER_DEF,mdmServer.getName());
          factory.save(item);
        }
        service.removeDeployPhaseCommandOf(ERepositoryObjectType.PROCESS,item);
      }
      Collection<IEditorPart> editors=WorkbenchUtil.getSelectDirtyEditor((IStructuredSelection)getSelection(),ERepositoryObjectType.PROCESS);
      for (      IEditorPart part : editors) {
        if (part instanceof MultiPageTalendEditor) {
          MultiPageTalendEditor mptEditor=(MultiPageTalendEditor)part;
          mptEditor.doSave(new NullProgressMonitor());
          mptEditor.refreshName();
        }
      }
      refreshMdmRepositoryViewTree();
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}","@Override protected void doRun(){
  List<IRepositoryViewObject> viewObjs=getSelectedViewObject();
  DeployOnMDMExportWizard publishWizard=new DeployOnMDMExportWizard();
  publishWizard.setWindowTitle(EXPORTJOBSCRIPTS);
  publishWizard.init(getWorkbench(),(IStructuredSelection)this.getSelection());
  Shell activeShell=Display.getCurrent().getActiveShell();
  WizardDialog dialog=new WizardDialog(activeShell,publishWizard);
  dialog.open();
  boolean deploySucceed=publishWizard.isDeploySucceed();
  if (deploySucceed) {
    IRemoveCommandService service=(IRemoveCommandService)GlobalServiceRegister.getDefault().getService(IRemoveCommandService.class);
    SpagoBiServer spagoBiServer=publishWizard.getMdmServer();
    MDMServerDef mdmServer=getMdmServer(spagoBiServer);
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      for (      IRepositoryViewObject viewObj : viewObjs) {
        Item item=viewObj.getProperty().getItem();
        Property property=item.getProperty();
        if (property != null) {
          property.getAdditionalProperties().put(PROP_LAST_SERVER_DEF,mdmServer.getName());
          factory.save(item);
        }
        Collection<IEditorPart> editors=WorkbenchUtil.getSelectDirtyEditor((IStructuredSelection)getSelection(),ERepositoryObjectType.PROCESS);
        for (        IEditorPart part : editors) {
          if (part instanceof MultiPageTalendEditor) {
            MultiPageTalendEditor mptEditor=(MultiPageTalendEditor)part;
            mptEditor.doSave(new NullProgressMonitor());
            mptEditor.refreshName();
          }
        }
        refreshMdmRepositoryViewTree();
        service.removeDeployPhaseCommandOf(ERepositoryObjectType.PROCESS,item);
      }
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}",0.7068685776095187
147729,"public static IEditorPart getRepositoryEditor(RepositoryNode node){
  IEditorPart[] parts=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getDirtyEditors();
  for (  IEditorPart part : parts) {
    IEditorInput inputObj=part.getEditorInput();
    if (inputObj instanceof RepositoryEditorInput) {
      RepositoryEditorInput input=(RepositoryEditorInput)inputObj;
      if (input.getRepositoryNode().equals(node)) {
        return part;
      }
    }
  }
  return null;
}","public static IEditorPart getRepositoryEditor(RepositoryNode node){
  IEditorPart[] parts=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getDirtyEditors();
  for (  IEditorPart part : parts) {
    IEditorInput inputObj=part.getEditorInput();
    if (inputObj instanceof RepositoryEditorInput) {
      RepositoryEditorInput input=(RepositoryEditorInput)inputObj;
      if (equals(input.getRepositoryNode(),node)) {
        return part;
      }
    }
  }
  return null;
}",0.9837067209775968
147730,"private boolean isInSvnMode(){
  if (isInSvnMode == null) {
    try {
      if (!factory.isLocalConnectionProvider()) {
        if (svnProviderSerice != null && svnProviderSerice.isProjectInSvnMode()) {
          isInSvnMode=Boolean.TRUE;
        }
      }
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
    if (isInSvnMode == null) {
      isInSvnMode=Boolean.FALSE;
    }
  }
  return isInSvnMode.booleanValue();
}","private boolean isInSvnMode(){
  if (isInSvnMode == null) {
    try {
      if (!factory.isLocalConnectionProvider()) {
        IMDMSVNProviderService service=getSvnProviderService();
        if (service != null && service.isProjectInSvnMode()) {
          isInSvnMode=Boolean.TRUE;
        }
      }
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
    if (isInSvnMode == null) {
      isInSvnMode=Boolean.FALSE;
    }
  }
  return isInSvnMode.booleanValue();
}",0.8991596638655462
147731,"@Override public String getToolTipText(Object element){
  if (isInSvnMode()) {
    IRepositoryViewObject viewObj=(IRepositoryViewObject)element;
    String toolTip=svnProviderSerice.getLockInfo(viewObj);
    return toolTip;
  }
  return null;
}","@Override public String getToolTipText(Object element){
  if (isInSvnMode()) {
    IRepositoryViewObject viewObj=(IRepositoryViewObject)element;
    if (getSvnProviderService() != null) {
      String toolTip=getSvnProviderService().getLockInfo(viewObj);
      return toolTip;
    }
  }
  return null;
}",0.8263254113345521
147732,public com.amalto.workbench.webservices.WSDigestValueTimeStamp getDigest(WSDigestKey wsDigestKey) throws java.rmi.RemoteException ;,public com.amalto.workbench.webservices.WSDigest getDigest(WSDigestKey wsDigestKey) throws java.rmi.RemoteException ;,0.9435483870967742
147733,"public WSDigestValueTimeStamp getDigest(WSDigestKey wsDigestKey) throws RemoteException {
  return null;
}","public WSDigest getDigest(WSDigestKey wsDigestKey) throws RemoteException {
  return null;
}",0.9292929292929292
147734,"public void openConsole(){
  List<MDMServerDef> allServerDefs=ServerDefService.getAllServerDefs();
  if (allServerDefs == null || allServerDefs.isEmpty()) {
    MessageDialog.openInformation(null,Messages.ShowMDMServerConsole_InfoDialog_Title,Messages.ShowMDMServerConsole_InfoDialog_Message);
  }
 else   if (allServerDefs.size() == 1) {
    MDMServerDef serverDef=allServerDefs.get(0).getDecryptedServerDef();
    showMDMServerConsole(serverDef);
  }
 else {
    SelectServerDefDialog d=new SelectServerDefDialog(new Shell());
    d.create();
    d.setSelectServer(allServerDefs.get(0));
    if (d.open() == IDialogConstants.OK_ID) {
      MDMServerDef serverDef=d.getSelectedServerDef();
      showMDMServerConsole(serverDef);
    }
  }
}","public void openConsole(){
  List<MDMServerDef> allServerDefs=ServerDefService.getAllServerDefs();
  if (allServerDefs == null || allServerDefs.isEmpty()) {
    MessageDialog.openInformation(null,Messages.ShowMDMServerConsole_InfoDialog_Title,Messages.ShowMDMServerConsole_InfoDialog_Message);
  }
 else   if (allServerDefs.size() == 1) {
    MDMServerDef serverDef=allServerDefs.get(0);
    showMDMServerConsole(serverDef);
  }
 else {
    SelectServerDefDialog d=new SelectServerDefDialog(new Shell());
    d.create();
    d.setSelectServer(allServerDefs.get(0));
    if (d.open() == IDialogConstants.OK_ID) {
      MDMServerDef serverDef=d.getSelectedServerDef();
      showMDMServerConsole(serverDef);
    }
  }
}",0.9835390946502056
147735,"public static DefaultHttpClient createClient(URI uri,String username,String password) throws SecurityException {
  HttpParams params=new BasicHttpParams();
  params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,CONNECT_TIMEOUT);
  params.setParameter(CoreConnectionPNames.SO_TIMEOUT,SOCKET_TIMEOUT);
  params.setParameter(CoreConnectionPNames.TCP_NODELAY,false);
  ClientConnectionManager cm=new ThreadSafeClientConnManager();
  HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
  DefaultHttpClient client=new DefaultHttpClient(cm,params);
  if (""String_Node_Str"".equals(uri.getScheme())) {
    client=enableSSL(client,uri.getPort());
  }
  AuthScope authScope=new AuthScope(uri.getHost(),uri.getPort());
  UsernamePasswordCredentials credentials=new UsernamePasswordCredentials(username,password);
  client.getCredentialsProvider().setCredentials(authScope,credentials);
  return client;
}","public static DefaultHttpClient createClient(String url,String username,String password) throws SecurityException {
  URI uri=URI.create(url);
  HttpParams params=new BasicHttpParams();
  params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,CONNECT_TIMEOUT);
  params.setParameter(CoreConnectionPNames.SO_TIMEOUT,SOCKET_TIMEOUT);
  params.setParameter(CoreConnectionPNames.TCP_NODELAY,false);
  ClientConnectionManager cm=new ThreadSafeClientConnManager();
  HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
  DefaultHttpClient client=new DefaultHttpClient(cm,params);
  if (""String_Node_Str"".equals(uri.getScheme())) {
    client=enableSSL(client,uri.getPort());
  }
  AuthScope authScope=new AuthScope(uri.getHost(),uri.getPort());
  UsernamePasswordCredentials credentials=new UsernamePasswordCredentials(username,password);
  client.getCredentialsProvider().setCredentials(authScope,credentials);
  return client;
}",0.9186550976138828
147736,"public static DefaultHttpClient enableSSL(DefaultHttpClient client,String url) throws SecurityException, IllegalArgumentException {
  int port=getPortFromUrl(url);
  return enableSSL(client,port);
}","public static DefaultHttpClient enableSSL(DefaultHttpClient client,String url){
  int port=getPortFromUrl(url);
  return enableSSL(client,port);
}",0.8488372093023255
147737,"public static int getPortFromUrl(String url) throws IllegalArgumentException {
  if (url == null) {
    throw new IllegalArgumentException();
  }
  Matcher m=Pattern.compile(PATTERN_URL).matcher(url);
  if (m.find()) {
    String portStr=m.group(1);
    return Integer.parseInt(portStr);
  }
 else {
    return 80;
  }
}","public static int getPortFromUrl(String url){
  if (url == null) {
    throw new IllegalArgumentException();
  }
  Matcher m=Pattern.compile(PATTERN_URL).matcher(url);
  if (m.find()) {
    String portStr=m.group(1);
    return Integer.parseInt(portStr);
  }
 else {
    return 80;
  }
}",0.9456342668863262
147738,"public static String uploadFileToAppServer(String URL,String localFilename,String username,String password) throws XtentisException {
  HttpUriRequest request=createUploadFileToServerRequest(URL,localFilename);
  try {
    DefaultHttpClient client=createClient(URI.create(URL),username,password);
    HttpResponse response=client.execute(request);
    if (HttpStatus.SC_OK != response.getStatusLine().getStatusCode()) {
      throw new XtentisException(Messages.Util_21 + response.getStatusLine().getStatusCode() + Messages.Util_22+ response.getStatusLine().getReasonPhrase());
    }
    HttpEntity rentity=response.getEntity();
    return EntityUtils.toString(rentity);
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    throw new XtentisException(e.getClass().getName() + Messages.Util_23 + e.getLocalizedMessage());
  }
 finally {
    request.abort();
  }
}","public static String uploadFileToAppServer(String URL,String localFilename,String username,String password) throws XtentisException {
  HttpUriRequest request=createUploadFileToServerRequest(URL,localFilename);
  DefaultHttpClient client=createClient(URL,username,password);
  String errMessage=Messages.Util_21 + ""String_Node_Str"" + Messages.Util_22+ ""String_Node_Str"";
  byte[] data=getResponseEntityIfOk(client,request,errMessage);
  return new String(data);
}",0.4932735426008968
147739,"private static HttpUriRequest createUploadRequest(String URL,String localFilename,String filename,String imageCatalog){
  HttpPost request=new HttpPost(URI.create(URL));
  MultipartEntity entity=new MultipartEntity();
  if (!Messages.Util_24.equalsIgnoreCase(localFilename)) {
    File file=new File(localFilename);
    if (file.exists()) {
      entity.addPart(""String_Node_Str"",new FileBody(file));
    }
  }
  if (imageCatalog != null) {
    entity.addPart(""String_Node_Str"",StringBody.create(imageCatalog,STRING_CONTENT_TYPE,null));
  }
  if (filename != null) {
    int pos=filename.lastIndexOf('.');
    if (pos != -1) {
      filename=filename.substring(0,pos);
    }
    entity.addPart(""String_Node_Str"",StringBody.create(filename,STRING_CONTENT_TYPE,null));
  }
  request.setEntity(entity);
  return request;
}","static HttpUriRequest createUploadRequest(String URL,String localFilename,String filename,String imageCatalog,HashMap<String,String> picturePathMap){
  HttpPost request=new HttpPost(URL);
  MultipartEntity entity=new MultipartEntity();
  if (!Messages.Util_24.equalsIgnoreCase(localFilename)) {
    File file=new File(localFilename);
    if (file.exists()) {
      entity.addPart(""String_Node_Str"",new FileBody(file));
    }
  }
  if (imageCatalog != null) {
    entity.addPart(""String_Node_Str"",StringBody.create(imageCatalog,STRING_CONTENT_TYPE,null));
  }
  if (filename != null) {
    int pos=filename.lastIndexOf('.');
    if (pos != -1) {
      filename=filename.substring(0,pos);
    }
    entity.addPart(""String_Node_Str"",StringBody.create(filename,STRING_CONTENT_TYPE,null));
  }
  request.setEntity(entity);
  return request;
}",0.964975845410628
147740,"private static HttpUriRequest createUploadFileToServerRequest(String URL,final String fileName){
  HttpPost request=new HttpPost(URI.create(URL));
  String path=fileName;
  if (URL.indexOf(""String_Node_Str"") == -1) {
    if (URL.indexOf(""String_Node_Str"") != -1) {
      path=URL.substring(URL.indexOf(""String_Node_Str"") + 1);
    }
    MultipartEntity entity=new MultipartEntity();
    entity.addPart(path,new FileBody(new File(fileName)));
    request.setEntity(entity);
  }
  return request;
}","static HttpUriRequest createUploadFileToServerRequest(String URL,final String fileName){
  HttpPost request=new HttpPost(URL);
  String path=fileName;
  if (URL.indexOf(""String_Node_Str"") == -1) {
    if (URL.indexOf(""String_Node_Str"") != -1) {
      path=URL.substring(URL.indexOf(""String_Node_Str"") + 1);
    }
    MultipartEntity entity=new MultipartEntity();
    entity.addPart(path,new FileBody(new File(fileName)));
    request.setEntity(entity);
  }
  return request;
}",0.7674897119341564
147741,"public static String uploadImageFile(String URL,String localFilename,String filename,String imageCatalog,String username,String password,HashMap<String,String> picturePathMap) throws XtentisException {
  HttpUriRequest request=createUploadRequest(URL,localFilename,filename,imageCatalog);
  try {
    DefaultHttpClient client=createClient(URI.create(URL),username,password);
    HttpResponse response=client.execute(request);
    if (HttpStatus.SC_OK != response.getStatusLine().getStatusCode()) {
      throw new XtentisException(Messages.Util_25 + response.getStatusLine().getStatusCode() + Messages.Util_26+ response.getStatusLine().getReasonPhrase());
    }
    HttpEntity rentity=response.getEntity();
    String content=EntityUtils.toString(rentity);
    log.debug(""String_Node_Str"" + content);
    if (content.contains(""String_Node_Str"")) {
      String returnValue=content.substring(content.indexOf(""String_Node_Str""),content.indexOf(""String_Node_Str"") - 1);
      if (picturePathMap != null) {
        File file=new File(localFilename);
        String fileName1=file.getName();
        picturePathMap.put(fileName1,returnValue);
      }
      return returnValue;
    }
 else {
      log.warn(""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    throw new XtentisException(e.getClass().getName() + ""String_Node_Str"" + e.getLocalizedMessage());
  }
 finally {
    request.abort();
  }
}","public static String uploadImageFile(String URL,String localFilename,String filename,String imageCatalog,String username,String password,HashMap<String,String> picturePathMap) throws XtentisException {
  HttpUriRequest request=createUploadRequest(URL,localFilename,filename,imageCatalog,picturePathMap);
  DefaultHttpClient client=createClient(URL,username,password);
  String errMessage=Messages.Util_25 + ""String_Node_Str"" + Messages.Util_26+ ""String_Node_Str"";
  byte[] data=getResponseEntityIfOk(client,request,errMessage);
  String content=new String(data);
  if (content.contains(""String_Node_Str"")) {
    String returnValue=content.substring(content.indexOf(""String_Node_Str""),content.indexOf(""String_Node_Str"") - 1);
    if (picturePathMap != null) {
      File file=new File(localFilename);
      String fileName1=file.getName();
      picturePathMap.put(fileName1,returnValue);
    }
    return returnValue;
  }
 else {
    log.warn(""String_Node_Str"");
    return ""String_Node_Str"";
  }
}",0.6563769293257514
147742,"@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error != ValidationError.XML_SCHEMA) {
    int group;
    try {
      ComplexTypeMetadata containingType=field.getContainingType();
      while (containingType instanceof ContainedComplexTypeMetadata) {
        containingType=((ContainedComplexTypeMetadata)containingType).getContainerType();
      }
      group=containingType.isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
    }
 catch (    Exception e) {
      group=IComponentValidationRule.MSG_GROUP_ENTITY;
    }
    ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,group,element,getEntityName(field),getEntityName(field),getPath(field));
    addMessage(lineNumber,columnNumber,error,validationMessage);
    errorCount++;
  }
}","@Override public void error(FieldMetadata field,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  if (error != ValidationError.XML_SCHEMA) {
    int group;
    try {
      ComplexTypeMetadata containingType=field.getContainingType();
      while (containingType instanceof ContainedComplexTypeMetadata) {
        containingType=((ContainedComplexTypeMetadata)containingType).getContainerType();
      }
      group=containingType.isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
    }
 catch (    Exception e) {
      group=IComponentValidationRule.MSG_GROUP_ENTITY;
    }
    ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,getValue(lineNumber,-1),getValue(columnNumber,-1),group,element,getEntityName(field),getEntityName(field),getPath(field));
    addMessage(getValue(lineNumber,-1),getValue(columnNumber,-1),error,validationMessage);
    errorCount++;
  }
}",0.9650145772594751
147743,"private void addMessage(int lineNumber,int columnNumber,ValidationError error,ModelValidationMessage validationMessage){
  MultiKeyMap errorsByType=errors.get(error);
  if (errorsByType == null) {
    errorsByType=new MultiKeyMap();
    errors.put(error,errorsByType);
  }
  errorsByType.put(lineNumber,columnNumber,validationMessage);
}","private void addMessage(int lineNumber,int columnNumber,ValidationError error,ModelValidationMessage validationMessage){
  MultiKeyMap errorsByType=errors.get(error);
  if (errorsByType == null) {
    errorsByType=new MultiKeyMap();
    errors.put(error,errorsByType);
  }
  errorsByType.put(getValue(lineNumber,-1),getValue(columnNumber,-1),validationMessage);
}",0.9628571428571427
147744,"@Override public void fatal(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  error(field,message,element,lineNumber,columnNumber,error);
}","@Override public void fatal(FieldMetadata field,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  error(field,message,element,getValue(lineNumber,-1),getValue(columnNumber,-1),error);
}",0.786046511627907
147745,"@Override public void warning(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  int group=field.getContainingType().isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_WARNING,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,group,element,getEntityName(field),getEntityName(field),getPath(field));
  addMessage(lineNumber,columnNumber,error,validationMessage);
}","@Override public void warning(FieldMetadata field,String message,Element element,Integer lineNumber,Integer columnNumber,ValidationError error){
  int group=field.getContainingType().isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_WARNING,message,""String_Node_Str"",dataModelName,getValue(lineNumber,-1),getValue(columnNumber,-1),group,element,getEntityName(field),getEntityName(field),getPath(field));
  addMessage(getValue(lineNumber,-1),getValue(columnNumber,-1),error,validationMessage);
}",0.8865478119935171
147746,"private Object[] getExpandedEntityElements(DataModelMainPage mainPage){
  TreeViewer elementsViewer=mainPage.getElementsViewer();
  SchemaTreeContentProvider contentProvider=(SchemaTreeContentProvider)elementsViewer.getContentProvider();
  Object[] xsdDeclarations=getChildren(contentProvider.getXsdSchema(),contentProvider);
  List<Object> result=new ArrayList<Object>();
  Deque<XSDNode> nodeStack=new LinkedList<XSDNode>();
  Deque<Object> elementStack=new LinkedList<Object>();
  Map<XSDNode,XSDElementDeclaration> expandedRoots=new HashMap<XSDNode,XSDElementDeclaration>();
  for (  Object obj : xsdDeclarations) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    String name=decl.getName();
    for (    XSDNode node : expandedElements) {
      if (name.equals(((XSDElementDeclaration)node.data).getName())) {
        expandedRoots.put(node,decl);
        result.add(decl);
        nodeStack.add(node);
        elementStack.add(decl);
        break;
      }
    }
  }
  while (!nodeStack.isEmpty() && !elementStack.isEmpty()) {
    XSDNode node=nodeStack.pollFirst();
    Object element=elementStack.pollFirst();
    List<XSDNode> nodes=node.childs;
    Object[] elementChildren=getChildren(element,contentProvider);
    if (nodes != null && nodes.size() > 0 && elementChildren != null) {
      Map<XSDNode,Object> nodeElementPairs=getNodeElementPairs(elementChildren,nodes);
      for (      XSDNode node2 : nodeElementPairs.keySet()) {
        nodeStack.add(node2);
        elementStack.add(nodeElementPairs.get(node2));
        result.add(nodeElementPairs.get(node2));
      }
    }
  }
  return result.toArray();
}","private Object[] getExpandedEntityElements(DataModelMainPage mainPage){
  TreeViewer elementsViewer=mainPage.getElementsViewer();
  SchemaTreeContentProvider contentProvider=(SchemaTreeContentProvider)elementsViewer.getContentProvider();
  Object[] xsdDeclarations=getChildren(contentProvider.getXsdSchema(),contentProvider);
  List<Object> result=new ArrayList<Object>();
  Deque<ExpandInfoNode> nodeStack=new LinkedList<ExpandInfoNode>();
  Deque<Object> elementStack=new LinkedList<Object>();
  Map<ExpandInfoNode,XSDElementDeclaration> expandedRoots=new HashMap<ExpandInfoNode,XSDElementDeclaration>();
  for (  Object obj : xsdDeclarations) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    String name=decl.getName();
    for (    ExpandInfoNode node : expandedElements) {
      if (name.equals(node.name)) {
        expandedRoots.put(node,decl);
        result.add(decl);
        nodeStack.add(node);
        elementStack.add(decl);
        break;
      }
    }
  }
  while (!nodeStack.isEmpty() && !elementStack.isEmpty()) {
    ExpandInfoNode node=nodeStack.pollFirst();
    Object element=elementStack.pollFirst();
    List<ExpandInfoNode> nodes=node.childs;
    Object[] elementChildren=getChildren(element,contentProvider);
    if (nodes != null && nodes.size() > 0 && elementChildren != null) {
      Map<ExpandInfoNode,Object> nodeElementPairs=getNodeElementPairs(elementChildren,nodes);
      for (      ExpandInfoNode node2 : nodeElementPairs.keySet()) {
        nodeStack.add(node2);
        elementStack.add(nodeElementPairs.get(node2));
        result.add(nodeElementPairs.get(node2));
      }
    }
  }
  return result.toArray();
}",0.948547215496368
147747,"private TreePath[] removeInvalidTreePaths(TreePath[] expandedElementPaths){
  Map<Integer,Set<TreePath>> pathMaps=new HashMap<Integer,Set<TreePath>>();
  int maxSegmentCount=-1;
  for (  TreePath path : expandedElementPaths) {
    int segmentCount=path.getSegmentCount();
    Set<TreePath> pathSet=pathMaps.get(segmentCount);
    if (pathSet == null) {
      pathSet=new HashSet<TreePath>();
      pathMaps.put(segmentCount,pathSet);
    }
    pathSet.add(path);
    if (maxSegmentCount < segmentCount)     maxSegmentCount=segmentCount;
  }
  Set<TreePath> roots=pathMaps.get(1);
  if (roots == null || roots.size() == 0) {
    return new TreePath[0];
  }
  List<TreePath> paths=new ArrayList<TreePath>();
  paths.addAll(roots);
  for (int i=2; i < maxSegmentCount + 1; i++) {
    Set<TreePath> set=pathMaps.get(i);
    if (set == null || set.size() == 0)     break;
    Set<TreePath> parents=pathMaps.get(i - 1);
    for (    TreePath path : set) {
      if (parents.contains(path.getParentPath()))       paths.add(path);
 else       set.remove(path);
    }
  }
  return paths.toArray(new TreePath[0]);
}","private TreePath[] removeInvalidTreePaths(TreePath[] expandedElementPaths){
  Map<Integer,Set<TreePath>> pathMaps=new HashMap<Integer,Set<TreePath>>();
  int maxSegmentCount=-1;
  for (  TreePath path : expandedElementPaths) {
    int segmentCount=path.getSegmentCount();
    Set<TreePath> pathSet=pathMaps.get(segmentCount);
    if (pathSet == null) {
      pathSet=new HashSet<TreePath>();
      pathMaps.put(segmentCount,pathSet);
    }
    pathSet.add(path);
    if (maxSegmentCount < segmentCount)     maxSegmentCount=segmentCount;
  }
  Set<TreePath> roots=pathMaps.get(1);
  if (roots == null || roots.size() == 0) {
    return new TreePath[0];
  }
  List<TreePath> paths=new ArrayList<TreePath>();
  paths.addAll(roots);
  for (int i=2; i < maxSegmentCount + 1; i++) {
    Set<TreePath> set=pathMaps.get(i);
    if (set == null || set.size() == 0)     break;
    Set<TreePath> parents=pathMaps.get(i - 1);
    Iterator<TreePath> iterator=set.iterator();
    while (iterator.hasNext()) {
      TreePath path=iterator.next();
      if (parents.contains(path.getParentPath()))       paths.add(path);
 else       iterator.remove();
    }
  }
  return paths.toArray(new TreePath[0]);
}",0.9332751853467074
147748,"private Object[] getExpandedTypeElements(DataModelMainPage mainPage){
  TreeViewer typesViewer=mainPage.getTypesViewer();
  SchemaTreeContentProvider contentProvider=(SchemaTreeContentProvider)typesViewer.getContentProvider();
  Object[] xsdDeclarations=getChildren(contentProvider.getXsdSchema(),contentProvider);
  List<Object> result=new ArrayList<Object>();
  Deque<XSDNode> nodeStack=new LinkedList<XSDNode>();
  Deque<Object> elementStack=new LinkedList<Object>();
  Map<XSDNode,XSDTypeDefinition> expandedRoots=new HashMap<XSDNode,XSDTypeDefinition>();
  for (  Object obj : xsdDeclarations) {
    XSDTypeDefinition type=(XSDTypeDefinition)obj;
    String name=type.getName();
    for (    XSDNode node : expandedTypes) {
      if (name.equals(((XSDTypeDefinition)node.data).getName())) {
        expandedRoots.put(node,type);
        result.add(type);
        nodeStack.add(node);
        elementStack.add(type);
        break;
      }
    }
  }
  while (!nodeStack.isEmpty() && !elementStack.isEmpty()) {
    XSDNode node=nodeStack.pollFirst();
    Object element=elementStack.pollFirst();
    List<XSDNode> nodes=node.childs;
    Object[] elementChildren=getChildren(element,contentProvider);
    if (nodes != null && nodes.size() > 0 && elementChildren != null) {
      Map<XSDNode,Object> nodeElementPairs=getNodeElementPairs(elementChildren,nodes);
      for (      XSDNode node2 : nodeElementPairs.keySet()) {
        nodeStack.add(node2);
        elementStack.add(nodeElementPairs.get(node2));
        result.add(nodeElementPairs.get(node2));
      }
    }
  }
  return result.toArray();
}","private Object[] getExpandedTypeElements(DataModelMainPage mainPage){
  TreeViewer typesViewer=mainPage.getTypesViewer();
  SchemaTreeContentProvider contentProvider=(SchemaTreeContentProvider)typesViewer.getContentProvider();
  Object[] xsdDeclarations=getChildren(contentProvider.getXsdSchema(),contentProvider);
  List<Object> result=new ArrayList<Object>();
  Deque<ExpandInfoNode> nodeStack=new LinkedList<ExpandInfoNode>();
  Deque<Object> elementStack=new LinkedList<Object>();
  Map<ExpandInfoNode,XSDTypeDefinition> expandedRoots=new HashMap<ExpandInfoNode,XSDTypeDefinition>();
  for (  Object obj : xsdDeclarations) {
    XSDTypeDefinition type=(XSDTypeDefinition)obj;
    String name=type.getName();
    for (    ExpandInfoNode node : expandedTypes) {
      if (name.equals(node.name)) {
        expandedRoots.put(node,type);
        result.add(type);
        nodeStack.add(node);
        elementStack.add(type);
        break;
      }
    }
  }
  while (!nodeStack.isEmpty() && !elementStack.isEmpty()) {
    ExpandInfoNode node=nodeStack.pollFirst();
    Object element=elementStack.pollFirst();
    List<ExpandInfoNode> nodes=node.childs;
    Object[] elementChildren=getChildren(element,contentProvider);
    if (nodes != null && nodes.size() > 0 && elementChildren != null) {
      Map<ExpandInfoNode,Object> nodeElementPairs=getNodeElementPairs(elementChildren,nodes);
      for (      ExpandInfoNode node2 : nodeElementPairs.keySet()) {
        nodeStack.add(node2);
        elementStack.add(nodeElementPairs.get(node2));
        result.add(nodeElementPairs.get(node2));
      }
    }
  }
  return result.toArray();
}",0.9487654320987654
147749,"private boolean isSameXSDElement(Object objA,Object objB){
  if (objA != null && objB != null) {
    if (objA.getClass().getName().equals(objB.getClass().getName())) {
      if (objA instanceof XSDElementDeclaration) {
        XSDElementDeclaration declA=(XSDElementDeclaration)objA;
        XSDElementDeclaration declB=(XSDElementDeclaration)objB;
        if (declA.getName().equals(declB.getName()))         return true;
      }
 else       if (objA instanceof XSDModelGroup) {
        XSDModelGroup goupA=(XSDModelGroup)objA;
        XSDModelGroup goupB=(XSDModelGroup)objB;
        String nameA=getModelGroupName(goupA);
        String nameB=getModelGroupName(goupB);
        if (nameA == null && nameB == null)         return true;
        if (nameA != null && nameB != null && nameA.equals(nameB))         return true;
      }
 else       if (objA instanceof XSDModelGroupDefinition) {
        XSDModelGroupDefinition goupA=(XSDModelGroupDefinition)objA;
        XSDModelGroupDefinition goupB=(XSDModelGroupDefinition)objB;
        if (goupA.getName() == null && goupB.getName() == null)         return true;
        if (goupA.getName().equals(goupB.getName()))         return true;
      }
 else       if (objA instanceof XSDParticle) {
        XSDParticle particleA=(XSDParticle)objA;
        XSDParticle particleB=(XSDParticle)objB;
        if (particleA.getTerm() instanceof XSDElementDeclaration && particleB.getTerm() instanceof XSDElementDeclaration) {
          XSDElementDeclaration declA=(XSDElementDeclaration)particleA.getTerm();
          XSDElementDeclaration declB=(XSDElementDeclaration)particleB.getTerm();
          if (declA.getName().equals(declB.getName()))           return true;
        }
      }
 else       if (objA instanceof XSDAnnotation) {
        return true;
      }
 else       if (objA instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition constraintA=(XSDIdentityConstraintDefinition)objA;
        XSDIdentityConstraintDefinition constraintB=(XSDIdentityConstraintDefinition)objA;
        if (constraintA.getName().equals(constraintB.getName()))         return true;
      }
 else       if (objA instanceof XSDSimpleTypeDefinition) {
        XSDSimpleTypeDefinition simpleDefineA=(XSDSimpleTypeDefinition)objA;
        XSDSimpleTypeDefinition simpleDefineB=(XSDSimpleTypeDefinition)objB;
        if (simpleDefineA.getName().equals(simpleDefineB.getName()))         return true;
      }
    }
  }
  return false;
}","private boolean isSameXSDElement(Object objA,ExpandInfoNode objB){
  if (objA != null && objB != null) {
    if (objA.getClass().getName().equals(objB.type)) {
      if (objA instanceof XSDElementDeclaration) {
        XSDElementDeclaration declA=(XSDElementDeclaration)objA;
        if (declA.getName().equals(objB.name))         return true;
      }
 else       if (objA instanceof XSDModelGroup) {
        XSDModelGroup goupA=(XSDModelGroup)objA;
        String nameA=getName(goupA);
        String nameB=objB.name;
        if (nameA == null && nameB == null)         return true;
        if (nameA != null && nameB != null && nameA.equals(nameB))         return true;
      }
 else       if (objA instanceof XSDModelGroupDefinition) {
        XSDModelGroupDefinition goupA=(XSDModelGroupDefinition)objA;
        if (goupA.getName() == null && objB.name == null)         return true;
        if (goupA.getName().equals(objB.name))         return true;
      }
 else       if (objA instanceof XSDParticle) {
        XSDParticle particleA=(XSDParticle)objA;
        if (particleA.getTerm() instanceof XSDElementDeclaration) {
          XSDElementDeclaration declA=(XSDElementDeclaration)particleA.getTerm();
          if (declA.getName().equals(objB.name))           return true;
        }
      }
 else       if (objA instanceof XSDAnnotation) {
        return true;
      }
 else       if (objA instanceof XSDIdentityConstraintDefinition) {
        XSDIdentityConstraintDefinition constraintA=(XSDIdentityConstraintDefinition)objA;
        if (constraintA.getName().equals(objB.name))         return true;
      }
 else       if (objA instanceof XSDSimpleTypeDefinition) {
        XSDSimpleTypeDefinition simpleDefineA=(XSDSimpleTypeDefinition)objA;
        if (simpleDefineA.getName() == null && objB.name == null)         return true;
        if (simpleDefineA.getName().equals(objB.name))         return true;
      }
 else       if (objA instanceof XSDComplexTypeDefinition) {
        XSDComplexTypeDefinition complexDefineA=(XSDComplexTypeDefinition)objA;
        if (complexDefineA.getName() == null && objB.name == null)         return true;
        if (complexDefineA.getName().equals(objB.name))         return true;
      }
    }
  }
  return false;
}",0.279216677195199
147750,"private List<XSDNode> getExpandedNodes(TreePath[] expandedElementPaths){
  TreePath[] expandedPaths=removeInvalidTreePaths(expandedElementPaths);
  List<XSDNode> expanded=new ArrayList<XSDNode>();
  XSDNode rootNode=null;
  for (  TreePath path : expandedPaths) {
    int segmentCount=path.getSegmentCount();
    rootNode=XSDNode.newNode(path.getFirstSegment());
    if (expanded.contains(rootNode)) {
      rootNode=expanded.get(expanded.indexOf(rootNode));
    }
 else {
      expanded.add(rootNode);
    }
    for (int i=1; i < segmentCount; i++) {
      Object segment=path.getSegment(i);
      XSDNode newNode=XSDNode.newNode(segment);
      if (rootNode.childs == null)       rootNode.addChild(newNode);
 else {
        if (rootNode.childs.contains(newNode)) {
          newNode=rootNode.childs.get(rootNode.childs.indexOf(newNode));
        }
 else {
          rootNode.addChild(newNode);
        }
      }
      rootNode=newNode;
    }
  }
  return expanded;
}","private List<ExpandInfoNode> getExpandedNodes(TreePath[] expandedElementPaths){
  TreePath[] expandedPaths=removeInvalidTreePaths(expandedElementPaths);
  List<ExpandInfoNode> expanded=new ArrayList<ExpandInfoNode>();
  ExpandInfoNode rootNode=null;
  for (  TreePath path : expandedPaths) {
    int segmentCount=path.getSegmentCount();
    Object firstSegment=path.getFirstSegment();
    rootNode=ExpandInfoNode.create(getName(firstSegment),firstSegment.getClass().getName());
    if (expanded.contains(rootNode)) {
      rootNode=expanded.get(expanded.indexOf(rootNode));
    }
 else {
      expanded.add(rootNode);
    }
    for (int i=1; i < segmentCount; i++) {
      Object segment=path.getSegment(i);
      ExpandInfoNode newNode=ExpandInfoNode.create(getName(segment),segment.getClass().getName());
      if (rootNode.childs == null)       rootNode.addChild(newNode);
 else {
        if (rootNode.childs.contains(newNode)) {
          newNode=rootNode.childs.get(rootNode.childs.indexOf(newNode));
        }
 else {
          rootNode.addChild(newNode);
        }
      }
      rootNode=newNode;
    }
  }
  return expanded;
}",0.2359657469077069
147751,"@Override public int hashCode(){
  if (data != null)   return data.hashCode();
  return super.hashCode();
}","@Override public int hashCode(){
  if (name != null)   return (name + ""String_Node_Str"" + type).hashCode();
 else   return type.hashCode();
}",0.7983870967741935
147752,"private Map<XSDNode,Object> getNodeElementPairs(Object[] elementChildrens,List<XSDNode> nodes){
  Map<XSDNode,Object> pairs=new HashMap<XSDNode,Object>();
  for (  Object child : elementChildrens) {
    for (    XSDNode node : nodes)     if (isSameXSDElement(child,node.data)) {
      pairs.put(node,child);
    }
  }
  return pairs;
}","private Map<ExpandInfoNode,Object> getNodeElementPairs(Object[] elementChildrens,List<ExpandInfoNode> nodes){
  Map<ExpandInfoNode,Object> pairs=new HashMap<ExpandInfoNode,Object>();
  for (  Object child : elementChildrens) {
    for (    ExpandInfoNode node : nodes)     if (isSameXSDElement(child,node)) {
      pairs.put(node,child);
    }
  }
  return pairs;
}",0.08
147753,"@Override public boolean equals(Object obj){
  if (obj == null)   return false;
  if (obj instanceof XSDNode) {
    XSDNode node=(XSDNode)obj;
    return node.data == data;
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == null)   return false;
  if (obj instanceof ExpandInfoNode) {
    ExpandInfoNode node=(ExpandInfoNode)obj;
    if (name != null)     return name.equals(node.name) && type.equals(node.type);
 else     return type.equals(node.type);
  }
  return false;
}",0.6441351888667992
147754,"public void addChild(XSDNode obj){
  if (childs == null) {
    childs=new ArrayList<XSDNode>();
  }
  childs.add(obj);
}","public void addChild(ExpandInfoNode obj){
  if (childs == null) {
    childs=new ArrayList<ExpandInfoNode>();
  }
  childs.add(obj);
}",0.8976377952755905
147755,"public TreeExpandHelper(){
  expandedElements=new ArrayList<TreeExpandHelper.XSDNode>();
  expandedTypes=new ArrayList<TreeExpandHelper.XSDNode>();
}","public TreeExpandHelper(){
  expandedElements=new ArrayList<TreeExpandHelper.ExpandInfoNode>();
  expandedTypes=new ArrayList<TreeExpandHelper.ExpandInfoNode>();
}",0.9166666666666666
147756,"@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error != ValidationError.XML_SCHEMA) {
    ComplexTypeMetadata containingType=field.getContainingType();
    while (containingType instanceof ContainedComplexTypeMetadata) {
      containingType=((ContainedComplexTypeMetadata)containingType).getContainerType();
    }
    int group=containingType.isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
    ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,group,element,getEntityName(field),getEntityName(field),getPath(field));
    addMessage(lineNumber,columnNumber,error,validationMessage);
    errorCount++;
  }
}","@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error != ValidationError.XML_SCHEMA) {
    int group;
    try {
      ComplexTypeMetadata containingType=field.getContainingType();
      while (containingType instanceof ContainedComplexTypeMetadata) {
        containingType=((ContainedComplexTypeMetadata)containingType).getContainerType();
      }
      group=containingType.isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
    }
 catch (    Exception e) {
      group=IComponentValidationRule.MSG_GROUP_ENTITY;
    }
    ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,group,element,getEntityName(field),getEntityName(field),getPath(field));
    addMessage(lineNumber,columnNumber,error,validationMessage);
    errorCount++;
  }
}",0.9300587293112652
147757,"private boolean doValidateAndAlertObjectExistence(int result,String name,ERepositoryObjectType objectType,String typeName){
  if (result == STATUS_OK) {
    return true;
  }
 else {
    String message=null;
    if (typeName == null) {
      typeName=objectType.getLabel();
    }
    if (result == STATUS_EXISTED) {
      message=Messages.bind(Messages.ValidateService_ObjectExist,name,typeName);
    }
 else     if (result == STATUS_DELETED) {
      message=Messages.bind(Messages.ValidateService_DeletedObjectExist,name,typeName);
    }
    return MessageDialog.openConfirm(getShell(),Messages.Confirm_Overwrite,message);
  }
}","private boolean doValidateAndAlertObjectExistence(int result,String name,ERepositoryObjectType objectType,String typeName){
  if (result == STATUS_OK) {
    return true;
  }
 else {
    String message=null;
    if (typeName == null) {
      typeName=objectType.toString();
    }
    if (result == STATUS_EXISTED) {
      message=Messages.bind(Messages.ValidateService_ObjectExist,name,typeName);
    }
 else     if (result == STATUS_DELETED) {
      message=Messages.bind(Messages.ValidateService_DeletedObjectExist,name,typeName);
    }
    return MessageDialog.openConfirm(getShell(),Messages.Confirm_Overwrite,message);
  }
}",0.9872611464968152
147758,"public String getText(Object element){
  WSWhereCondition wc=(WSWhereCondition)element;
  String text=wc.getLeftPath() + ""String_Node_Str"";
  if (wc.getOperator().equals(WSWhereOperator.CONTAINS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.EQUALS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN_OR_EQUAL))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.JOIN))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN_OR_EQUAL))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.NOT_EQUALS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.STARTSWITH))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.STRICTCONTAINS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.EMPTY_NULL))   text+=""String_Node_Str"";
  text+=""String_Node_Str"";
  if (!wc.getOperator().equals(WSWhereOperator.JOIN))   text+=""String_Node_Str"";
  text+=wc.getRightValueOrPath();
  if (!wc.getOperator().equals(WSWhereOperator.JOIN))   text+=""String_Node_Str"";
  text+=""String_Node_Str"";
  if (wc.getStringPredicate().equals(WSStringPredicate.AND))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.EXACTLY))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.NONE))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.NOT))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.OR))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.STRICTAND))   text+=""String_Node_Str"";
  return text;
}","public String getText(Object element){
  WSWhereCondition wc=(WSWhereCondition)element;
  String text=wc.getLeftPath() + ""String_Node_Str"";
  if (wc.getOperator().equals(WSWhereOperator.CONTAINS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.CONTAINS_TEXT_OF))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.EQUALS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN_OR_EQUAL))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.JOIN))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN_OR_EQUAL))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.NOT_EQUALS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.STARTSWITH))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.STRICTCONTAINS))   text+=""String_Node_Str"";
 else   if (wc.getOperator().equals(WSWhereOperator.EMPTY_NULL))   text+=""String_Node_Str"";
  text+=""String_Node_Str"";
  if (!wc.getOperator().equals(WSWhereOperator.JOIN))   text+=""String_Node_Str"";
  text+=wc.getRightValueOrPath();
  if (!wc.getOperator().equals(WSWhereOperator.JOIN))   text+=""String_Node_Str"";
  text+=""String_Node_Str"";
  if (wc.getStringPredicate().equals(WSStringPredicate.AND))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.EXACTLY))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.NONE))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.NOT))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.OR))   text+=""String_Node_Str"";
 else   if (wc.getStringPredicate().equals(WSStringPredicate.STRICTAND))   text+=""String_Node_Str"";
  return text;
}",0.9760156632403328
147759,"@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    Label vbeLabel=toolkit.createLabel(charComposite,Messages.ViewBrowserMainPage_ViewableElements,SWT.NULL);
    vbeLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    Label sbeLabel=toolkit.createLabel(charComposite,Messages.ViewBrowserMainPage_SearchableElements,SWT.NULL);
    sbeLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    viewableBEsList=new List(charComposite,SWT.SINGLE | SWT.V_SCROLL | SWT.BORDER);
    viewableBEsList.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    ((GridData)viewableBEsList.getLayoutData()).heightHint=100;
    searchableBEsList=new List(charComposite,SWT.SINGLE | SWT.V_SCROLL | SWT.BORDER);
    searchableBEsList.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    ((GridData)searchableBEsList.getLayoutData()).heightHint=100;
    Label wcLabel=toolkit.createLabel(charComposite,Messages.ViewBrowserMainPage_Conditions,SWT.NULL);
    wcLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    wcListViewer=new ListViewer(charComposite,SWT.BORDER);
    wcListViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
    ((GridData)wcListViewer.getControl().getLayoutData()).minimumHeight=100;
    wcListViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        return ((WSView)inputElement).getWhereConditions() == null ? new WSWhereCondition[0] : ((WSView)inputElement).getWhereConditions();
      }
    }
);
    wcListViewer.setLabelProvider(new ILabelProvider(){
      public Image getImage(      Object element){
        return null;
      }
      public String getText(      Object element){
        WSWhereCondition wc=(WSWhereCondition)element;
        String text=wc.getLeftPath() + ""String_Node_Str"";
        if (wc.getOperator().equals(WSWhereOperator.CONTAINS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.EQUALS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN_OR_EQUAL))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.JOIN))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN_OR_EQUAL))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.NOT_EQUALS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.STARTSWITH))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.STRICTCONTAINS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.EMPTY_NULL))         text+=""String_Node_Str"";
        text+=""String_Node_Str"";
        if (!wc.getOperator().equals(WSWhereOperator.JOIN))         text+=""String_Node_Str"";
        text+=wc.getRightValueOrPath();
        if (!wc.getOperator().equals(WSWhereOperator.JOIN))         text+=""String_Node_Str"";
        text+=""String_Node_Str"";
        if (wc.getStringPredicate().equals(WSStringPredicate.AND))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.EXACTLY))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.NONE))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.NOT))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.OR))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.STRICTAND))         text+=""String_Node_Str"";
        return text;
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void dispose(){
      }
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void removeListener(      ILabelProviderListener listener){
      }
    }
);
    Composite resultsGroup=this.getNewSectionComposite(Messages.ViewBrowserMainPage_SearchAndResults);
    resultsGroup.setLayout(new GridLayout(4,false));
    Label descriptionLabel=toolkit.createLabel(resultsGroup,Messages.ViewBrowserMainPage_Search,SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    dataClusterCombo=new Combo(resultsGroup,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    dataClusterCombo.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    ((GridData)dataClusterCombo.getLayoutData()).minimumWidth=100;
    searchText=toolkit.createText(resultsGroup,""String_Node_Str"",SWT.BORDER);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          ViewBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Button bSearch=toolkit.createButton(resultsGroup,Messages.ViewBrowserMainPage_Search,SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        ViewBrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    matchAllWords=toolkit.createButton(resultsGroup,Messages.ViewBrowserMainPage_MatchWholeSentence,SWT.CHECK);
    matchAllWords.setSelection(true);
    resultsLabel=toolkit.createLabel(resultsGroup,Messages.ViewBrowserMainPage_Search,SWT.NULL);
    resultsLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,4,1));
    resultsLabel.setText(""String_Node_Str"");
    resultsViewer=new TableViewer(resultsGroup);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new XMLTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new DOMViewAction(ViewBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(ViewBrowserMainPage.this.getSite().getShell(),Messages._Error,Messages.bind(Messages.ViewBrowserMainPage_ErrorMsg,e.getClass().getName(),e.getLocalizedMessage()));
        }
      }
    }
);
    hookContextMenu();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}","@Override protected void createCharacteristicsContent(FormToolkit toolkit,Composite charComposite){
  try {
    Label vbeLabel=toolkit.createLabel(charComposite,Messages.ViewBrowserMainPage_ViewableElements,SWT.NULL);
    vbeLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    Label sbeLabel=toolkit.createLabel(charComposite,Messages.ViewBrowserMainPage_SearchableElements,SWT.NULL);
    sbeLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
    viewableBEsList=new List(charComposite,SWT.SINGLE | SWT.V_SCROLL | SWT.BORDER);
    viewableBEsList.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    ((GridData)viewableBEsList.getLayoutData()).heightHint=100;
    searchableBEsList=new List(charComposite,SWT.SINGLE | SWT.V_SCROLL | SWT.BORDER);
    searchableBEsList.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    ((GridData)searchableBEsList.getLayoutData()).heightHint=100;
    Label wcLabel=toolkit.createLabel(charComposite,Messages.ViewBrowserMainPage_Conditions,SWT.NULL);
    wcLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,2,1));
    wcListViewer=new ListViewer(charComposite,SWT.BORDER);
    wcListViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
    ((GridData)wcListViewer.getControl().getLayoutData()).minimumHeight=100;
    wcListViewer.setContentProvider(new IStructuredContentProvider(){
      public void dispose(){
      }
      public void inputChanged(      Viewer viewer,      Object oldInput,      Object newInput){
      }
      public Object[] getElements(      Object inputElement){
        return ((WSView)inputElement).getWhereConditions() == null ? new WSWhereCondition[0] : ((WSView)inputElement).getWhereConditions();
      }
    }
);
    wcListViewer.setLabelProvider(new ILabelProvider(){
      public Image getImage(      Object element){
        return null;
      }
      public String getText(      Object element){
        WSWhereCondition wc=(WSWhereCondition)element;
        String text=wc.getLeftPath() + ""String_Node_Str"";
        if (wc.getOperator().equals(WSWhereOperator.CONTAINS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.CONTAINS_TEXT_OF))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.EQUALS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.GREATER_THAN_OR_EQUAL))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.JOIN))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.LOWER_THAN_OR_EQUAL))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.NOT_EQUALS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.STARTSWITH))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.STRICTCONTAINS))         text+=""String_Node_Str"";
 else         if (wc.getOperator().equals(WSWhereOperator.EMPTY_NULL))         text+=""String_Node_Str"";
        text+=""String_Node_Str"";
        if (!wc.getOperator().equals(WSWhereOperator.JOIN))         text+=""String_Node_Str"";
        text+=wc.getRightValueOrPath();
        if (!wc.getOperator().equals(WSWhereOperator.JOIN))         text+=""String_Node_Str"";
        text+=""String_Node_Str"";
        if (wc.getStringPredicate().equals(WSStringPredicate.AND))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.EXACTLY))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.NONE))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.NOT))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.OR))         text+=""String_Node_Str"";
 else         if (wc.getStringPredicate().equals(WSStringPredicate.STRICTAND))         text+=""String_Node_Str"";
        return text;
      }
      public void addListener(      ILabelProviderListener listener){
      }
      public void dispose(){
      }
      public boolean isLabelProperty(      Object element,      String property){
        return false;
      }
      public void removeListener(      ILabelProviderListener listener){
      }
    }
);
    Composite resultsGroup=this.getNewSectionComposite(Messages.ViewBrowserMainPage_SearchAndResults);
    resultsGroup.setLayout(new GridLayout(4,false));
    Label descriptionLabel=toolkit.createLabel(resultsGroup,Messages.ViewBrowserMainPage_Search,SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    dataClusterCombo=new Combo(resultsGroup,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
    dataClusterCombo.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
    ((GridData)dataClusterCombo.getLayoutData()).minimumWidth=100;
    searchText=toolkit.createText(resultsGroup,""String_Node_Str"",SWT.BORDER);
    searchText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    searchText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          ViewBrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Button bSearch=toolkit.createButton(resultsGroup,Messages.ViewBrowserMainPage_Search,SWT.CENTER);
    bSearch.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        ViewBrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    matchAllWords=toolkit.createButton(resultsGroup,Messages.ViewBrowserMainPage_MatchWholeSentence,SWT.CHECK);
    matchAllWords.setSelection(true);
    resultsLabel=toolkit.createLabel(resultsGroup,Messages.ViewBrowserMainPage_Search,SWT.NULL);
    resultsLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,4,1));
    resultsLabel.setText(""String_Node_Str"");
    resultsViewer=new TableViewer(resultsGroup);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,1));
    ((GridData)resultsViewer.getControl().getLayoutData()).heightHint=500;
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new XMLTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new DOMViewAction(ViewBrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(ViewBrowserMainPage.this.getSite().getShell(),Messages._Error,Messages.bind(Messages.ViewBrowserMainPage_ErrorMsg,e.getClass().getName(),e.getLocalizedMessage()));
        }
      }
    }
);
    hookContextMenu();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}",0.9925514626218852
147760,"@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error != ValidationError.XML_SCHEMA) {
    int group=field.getContainingType().isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
    ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,group,element,getEntityName(field),getEntityName(field),getPath(field));
    addMessage(lineNumber,columnNumber,error,validationMessage);
    errorCount++;
  }
}","@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  if (error != ValidationError.XML_SCHEMA) {
    ComplexTypeMetadata containingType=field.getContainingType();
    while (containingType instanceof ContainedComplexTypeMetadata) {
      containingType=((ContainedComplexTypeMetadata)containingType).getContainerType();
    }
    int group=containingType.isInstantiable() ? IComponentValidationRule.MSG_GROUP_ENTITY : IComponentValidationRule.MSG_GROUP_TYPE;
    ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,group,element,getEntityName(field),getEntityName(field),getPath(field));
    addMessage(lineNumber,columnNumber,error,validationMessage);
    errorCount++;
  }
}",0.8457516339869281
147761,"private static String getEntityName(FieldMetadata field){
  try {
    return field.getContainingType().getName();
  }
 catch (  Exception e) {
    return ""String_Node_Str"";
  }
}","private static String getEntityName(FieldMetadata field){
  try {
    ComplexTypeMetadata containingType=field.getContainingType();
    while (containingType instanceof ContainedComplexTypeMetadata) {
      containingType=((ContainedComplexTypeMetadata)containingType).getContainerType();
    }
    String name=containingType.getName();
    if (name.startsWith(MetadataRepository.ANONYMOUS_PREFIX)) {
      name=ANONYMOUS_TYPE_NAME;
    }
    return name;
  }
 catch (  Exception e) {
    return ""String_Node_Str"";
  }
}",0.4097421203438395
147762,"@Override public void error(FieldMetadata field,String message,int lineNumber,int columnNumber,ValidationError error){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,field.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),getEntityName(field),null,getPath(field));
  addMessage(lineNumber,columnNumber,error,validationMessage);
  errorCount++;
}","@Override public void error(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,element,getEntityName(field),null,getPath(field));
  addMessage(lineNumber,columnNumber,error,validationMessage);
  errorCount++;
}",0.9182643794147326
147763,"@Override public void fatal(FieldMetadata field,String message,int lineNumber,int columnNumber,ValidationError error){
  error(field,message,lineNumber,columnNumber,error);
}","@Override public void fatal(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  error(field,message,element,lineNumber,columnNumber,error);
}",0.935483870967742
147764,"@Override public void warning(FieldMetadata field,String message,int lineNumber,int columnNumber,ValidationError error){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_WARNING,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,field.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),getEntityName(field),null,getPath(field));
  addMessage(lineNumber,columnNumber,error,validationMessage);
}","@Override public void warning(FieldMetadata field,String message,Element element,int lineNumber,int columnNumber,ValidationError error){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_WARNING,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,element,getEntityName(field),null,getPath(field));
  addMessage(lineNumber,columnNumber,error,validationMessage);
}",0.9162357807652534
147765,"@Override public void warning(FieldMetadata field,String message,int lineNumber,int columnNumber){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_WARNING,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,field.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),getFieldName(field),null,getPath(field));
  messages.add(validationMessage);
}","@Override public void warning(FieldMetadata field,String message,int lineNumber,int columnNumber){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_WARNING,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,field.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),getEntityName(field),null,getPath(field));
  messages.add(validationMessage);
}",0.9877913429522752
147766,"@Override public void error(FieldMetadata field,String message,int lineNumber,int columnNumber){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,field.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),getFieldName(field),null,getPath(field));
  messages.add(validationMessage);
  errorCount++;
}","@Override public void error(FieldMetadata field,String message,int lineNumber,int columnNumber){
  ModelValidationMessage validationMessage=new ModelValidationMessage(IComponentValidationRule.SEV_ERROR,message,""String_Node_Str"",dataModelName,lineNumber,columnNumber,IComponentValidationRule.MSG_GROUP_ELEMENT,field.<Element>getData(MetadataRepository.XSD_DOM_ELEMENT),getEntityName(field),null,getPath(field));
  messages.add(validationMessage);
  errorCount++;
}",0.988108108108108
147767,"public void showMDMServerConsole(MDMServerDef serverDef){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return;
  }
  IWorkbenchPage page=window.getActivePage();
  if (page == null) {
    return;
  }
  Map<String,MDMServerMessageConsole> serverToConsole=MDMServerExplorerPlugin.getDefault().getServerToConsole();
  MDMServerMessageConsole mdmServerConsole=serverToConsole.get(serverDef.getName());
  if (mdmServerConsole == null) {
    mdmServerConsole=new MDMServerMessageConsole(serverDef);
    serverToConsole.put(serverDef.getName(),mdmServerConsole);
  }
  if (!containedMDMServerMessageConsole(mdmServerConsole)) {
    IConsoleManager consoleManager=ConsolePlugin.getDefault().getConsoleManager();
    consoleManager.addConsoles(new IConsole[]{mdmServerConsole});
  }
  Map<String,IConsoleView> serverToView=MDMServerExplorerPlugin.getDefault().getServerToView();
  IConsoleView consoleView=serverToView.get(serverDef.getName());
  if (consoleView == null) {
    consoleView=showConsoleView(serverDef);
    Assert.isNotNull(consoleView);
    serverToView.put(serverDef.getName(),consoleView);
  }
  mdmServerConsole.activate();
}","public void showMDMServerConsole(MDMServerDef serverDef){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return;
  }
  IWorkbenchPage page=window.getActivePage();
  if (page == null) {
    return;
  }
  Map<String,MDMServerMessageConsole> serverToConsole=MDMServerExplorerPlugin.getDefault().getServerToConsole();
  MDMServerMessageConsole mdmServerConsole=serverToConsole.get(serverDef.getName());
  if (mdmServerConsole == null) {
    mdmServerConsole=new MDMServerMessageConsole(serverDef);
    serverToConsole.put(serverDef.getName(),mdmServerConsole);
  }
  if (!containedMDMServerMessageConsole(mdmServerConsole)) {
    IConsoleManager consoleManager=ConsolePlugin.getDefault().getConsoleManager();
    consoleManager.addConsoles(new IConsole[]{mdmServerConsole});
  }
  showConsoleView(serverDef.getName());
  mdmServerConsole.activate();
}",0.831353919239905
147768,"private IConsoleView showConsoleView(MDMServerDef serverDef){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return null;
  }
  IWorkbenchPage page=window.getActivePage();
  if (page == null) {
    return null;
  }
  try {
    return (IConsoleView)page.showView(IConsoleConstants.ID_CONSOLE_VIEW,serverDef.getName(),IWorkbenchPage.VIEW_ACTIVATE);
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
  return null;
}","private void showConsoleView(String serverName){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return;
  }
  IWorkbenchPage page=window.getActivePage();
  if (page == null) {
    return;
  }
  try {
    page.showView(IConsoleConstants.ID_CONSOLE_VIEW,serverName,IWorkbenchPage.VIEW_ACTIVATE);
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
}",0.6885964912280702
147769,"@Override public IPageBookViewPage createPage(IConsoleView view){
  IOConsolePage consolePage=new IOConsolePage(this,view){
    @Override protected void contextMenuAboutToShow(    IMenuManager menuManager){
      super.contextMenuAboutToShow(menuManager);
      menuManager.add(new Separator());
      menuManager.add(reloadAction);
      menuManager.add(monitorAction);
      menuManager.add(downloadAction);
    }
    @Override public void dispose(){
      disposeTimer();
      PlatformUI.getPreferenceStore().removePropertyChangeListener(MDMServerMessageConsole.this);
      MDMServerExplorerPlugin.getDefault().getServerToConsole().remove(serverDef.getName());
      MDMServerExplorerPlugin.getDefault().getServerToView().remove(serverDef.getName());
      ConsolePlugin.getDefault().getConsoleManager().removeConsoles(new IConsole[]{MDMServerMessageConsole.this});
      super.dispose();
    }
  }
;
  consolePage.setReadOnly();
  return consolePage;
}","@Override public IPageBookViewPage createPage(IConsoleView view){
  IOConsolePage consolePage=new IOConsolePage(this,view){
    @Override protected void contextMenuAboutToShow(    IMenuManager menuManager){
      super.contextMenuAboutToShow(menuManager);
      menuManager.add(new Separator());
      menuManager.add(reloadAction);
      menuManager.add(monitorAction);
      menuManager.add(downloadAction);
    }
    @Override public void dispose(){
      disposeTimer();
      PlatformUI.getPreferenceStore().removePropertyChangeListener(MDMServerMessageConsole.this);
      MDMServerExplorerPlugin.getDefault().getServerToConsole().remove(serverDef.getName());
      ConsolePlugin.getDefault().getConsoleManager().removeConsoles(new IConsole[]{MDMServerMessageConsole.this});
      super.dispose();
    }
  }
;
  consolePage.setReadOnly();
  return consolePage;
}",0.950711938663746
147770,"@Override public void dispose(){
  disposeTimer();
  PlatformUI.getPreferenceStore().removePropertyChangeListener(MDMServerMessageConsole.this);
  MDMServerExplorerPlugin.getDefault().getServerToConsole().remove(serverDef.getName());
  MDMServerExplorerPlugin.getDefault().getServerToView().remove(serverDef.getName());
  ConsolePlugin.getDefault().getConsoleManager().removeConsoles(new IConsole[]{MDMServerMessageConsole.this});
  super.dispose();
}","@Override public void dispose(){
  disposeTimer();
  PlatformUI.getPreferenceStore().removePropertyChangeListener(MDMServerMessageConsole.this);
  MDMServerExplorerPlugin.getDefault().getServerToConsole().remove(serverDef.getName());
  ConsolePlugin.getDefault().getConsoleManager().removeConsoles(new IConsole[]{MDMServerMessageConsole.this});
  super.dispose();
}",0.8946078431372549
147771,"@Override public void stop(BundleContext context) throws Exception {
  if (serverToConsole != null) {
    serverToConsole.clear();
    serverToConsole=null;
  }
  if (serverToView != null) {
    serverToView.clear();
    serverToView=null;
  }
  plugin=null;
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  if (serverToConsole != null) {
    serverToConsole.clear();
    serverToConsole=null;
  }
  plugin=null;
  super.stop(context);
}",0.6873706004140787
147772,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  serverToConsole=new HashMap<String,MDMServerMessageConsole>();
  serverToView=new HashMap<String,IConsoleView>();
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  serverToConsole=new HashMap<String,MDMServerMessageConsole>();
}",0.8728179551122195
147773,"/** 
 * set the list with foreign concept name of in the element
 * @author ymli
 * @param list
 * @param element
 */
public static void getforeignKeyOfElement(Set<String> list,XSDElementDeclaration element){
  if (element.getAnnotation() != null) {
    getForeignKeyofParcle(list,element.getAnnotation());
  }
  if (element.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
    if (fromcomplexType instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)fromcomplexType;
      if (particle.getTerm() instanceof XSDModelGroup) {
        XSDModelGroup modelGroup=((XSDModelGroup)particle.getTerm());
        EList fromlist=modelGroup.getContents();
        for (        XSDParticle el : (XSDParticle[])fromlist.toArray(new XSDParticle[fromlist.size()])) {
          XSDTerm term=el.getTerm();
          if (term instanceof XSDElementDeclaration) {
            if (term.equals(element)) {
              continue;
            }
            XSDAnnotation annotation=((XSDElementDeclaration)term).getAnnotation();
            if (annotation != null) {
              getForeignKeyofParcle(list,annotation);
            }
            getforeignKeyOfElement(list,(XSDElementDeclaration)term);
          }
        }
      }
    }
  }
}","/** 
 * set the list with foreign concept name of in the element
 * @author ymli
 * @param list
 * @param element
 */
public static void getforeignKeyOfElement(Set<String> list,XSDElementDeclaration element){
  if (element.getAnnotation() != null) {
    getForeignKeyofParcle(list,element.getAnnotation());
  }
  if (element.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent fromcomplexType=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
    if (fromcomplexType instanceof XSDParticle) {
      XSDParticle particle=(XSDParticle)fromcomplexType;
      if (particle.getTerm() instanceof XSDModelGroup) {
        XSDModelGroup modelGroup=((XSDModelGroup)particle.getTerm());
        EList fromlist=modelGroup.getContents();
        for (        XSDParticle el : (XSDParticle[])fromlist.toArray(new XSDParticle[fromlist.size()])) {
          XSDTerm term=el.getTerm();
          if (term instanceof XSDElementDeclaration) {
            if (isReferrenced(element,(XSDElementDeclaration)term)) {
              continue;
            }
            XSDAnnotation annotation=((XSDElementDeclaration)term).getAnnotation();
            if (annotation != null) {
              getForeignKeyofParcle(list,annotation);
            }
            getforeignKeyOfElement(list,(XSDElementDeclaration)term);
          }
        }
      }
    }
  }
}",0.9752186588921284
147774,"public ERepositoryObjectType getRepositoryObjectType(Item item){
  if (item instanceof ProcessItem || item instanceof ContainerItem) {
    return ERepositoryObjectType.PROCESS;
  }
  return null;
}","public ERepositoryObjectType getRepositoryObjectType(Item item){
  if (item.eClass().getInstanceClass() == ProcessItem.class || item instanceof ContainerItem) {
    return ERepositoryObjectType.PROCESS;
  }
  return null;
}",0.8857142857142857
147775,"public Resource save(Item item) throws PersistenceException {
  return null;
}","@Override public Resource save(Item item) throws PersistenceException {
  return null;
}",0.9397590361445785
147776,"public String getDescription(Object anElement){
  if (anElement instanceof IRepositoryViewObject) {
    Property property=((IRepositoryViewObject)anElement).getProperty();
    Item item=property.getItem();
    if (item instanceof MDMServerObjectItem) {
      MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
      if (serverObject != null) {
        return serverObject.getName();
      }
    }
    String label=property.getLabel();
    return label;
  }
  return null;
}","public String getDescription(Object anElement){
  if (anElement instanceof IRepositoryViewObject) {
    Property property=((IRepositoryViewObject)anElement).getProperty();
    Item item=property.getItem();
    if (item instanceof MDMServerObjectItem) {
      String label=getServerObjectItemText(item);
      if (label != null) {
        return label;
      }
    }
    String label=property.getLabel();
    return label;
  }
  return null;
}",0.6829268292682927
147777,"public static List<IRepositoryViewObject> findViewObjects(ERepositoryObjectType type,Item parentItem,IFolder folder,boolean useRepositoryViewObject,boolean withDeleted){
  List<IRepositoryViewObject> viewObjects=new LinkedList<IRepositoryViewObject>();
  try {
    for (    IResource res : folder.members()) {
      if (res instanceof IFolder) {
        if (!isDeletedFolder((IFolder)res) && !isSVNFolder((IFolder)res)) {
          IRepositoryViewObject folderObject=createFolderViewObject(type,res.getName(),parentItem,false);
          viewObjects.add(folderObject);
        }
      }
    }
    List<IRepositoryViewObject> children=findViewObjectsInFolder(type,parentItem,useRepositoryViewObject,withDeleted);
    viewObjects.addAll(children);
  }
 catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
  return viewObjects;
}","public static List<IRepositoryViewObject> findViewObjects(ERepositoryObjectType type,Item parentItem,IFolder folder,boolean useRepositoryViewObject,boolean withDeleted){
  List<IRepositoryViewObject> viewObjects=new LinkedList<IRepositoryViewObject>();
  try {
    for (    IResource res : folder.members()) {
      if (res instanceof IFolder) {
        if (!isDeletedFolder((IFolder)res) && !isSVNFolder((IFolder)res)) {
          IRepositoryViewObject folderObject=null;
          String resPath=parentItem.getState().getPath() + IPath.SEPARATOR + res.getName();
          folderObject=ContainerCacheService.get(type,resPath);
          if (folderObject == null) {
            folderObject=createFolderViewObject(type,res.getName(),parentItem,false);
          }
          viewObjects.add(folderObject);
        }
      }
    }
    List<IRepositoryViewObject> children=findViewObjectsInFolder(type,parentItem,useRepositoryViewObject,withDeleted);
    viewObjects.addAll(children);
  }
 catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
  return viewObjects;
}",0.833420365535248
147778,"public void stop(BundleContext context) throws Exception {
  if (jobResourceListener != null)   ResourcesPlugin.getWorkspace().removeResourceChangeListener(jobResourceListener);
  plugin=null;
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  if (jobListener != null) {
    ProxyRepositoryFactory.getInstance().removePropertyChangeListener(jobListener);
  }
  plugin=null;
  super.stop(context);
}",0.7782805429864253
147779,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(jobResourceListener);
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  ProxyRepositoryFactory.getInstance().addPropertyChangeListener(jobListener);
}",0.827027027027027
147780,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  ECodeLanguage language=((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getProject().getLanguage();
  if (selection.isEmpty() || language == ECodeLanguage.PERL) {
    setEnabled(false);
    return;
  }
  if (MDMServerHelper.getServers().size() == 0) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.PROCESS) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  ECodeLanguage language=((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getProject().getLanguage();
  if (selection.isEmpty() || language == ECodeLanguage.PERL) {
    setEnabled(false);
    return;
  }
  if (MDMServerHelper.getServers().size() == 0) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() == ENodeType.REPOSITORY_ELEMENT && node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.PROCESS) {
      continue;
    }
    canWork=false;
    break;
  }
  setEnabled(canWork);
}",0.9479305740987984
147781,"protected void doRun(){
  DeployOnMDMExportWizard publishWizard=new DeployOnMDMExportWizard();
  publishWizard.setWindowTitle(EXPORTJOBSCRIPTS);
  publishWizard.init(getWorkbench(),(IStructuredSelection)this.getSelection());
  Shell activeShell=Display.getCurrent().getActiveShell();
  WizardDialog dialog=new WizardDialog(activeShell,publishWizard);
  int returnCode=dialog.open();
  if (returnCode == IDialogConstants.OK_ID) {
    SpagoBiServer spagoBiServer=publishWizard.getMdmServer();
    MDMServerDef mdmServer=getMdmServer(spagoBiServer);
    IRepositoryViewObject viewObj=getSelectedViewObject();
    Item item=viewObj.getProperty().getItem();
    Property property=item.getProperty();
    if (property != null) {
      property.getAdditionalProperties().put(PROP_LAST_SERVER_DEF,mdmServer.getName());
    }
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(item);
      refreshMdmRepositoryViewTree();
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}","protected void doRun(){
  IRepositoryViewObject viewObj=getSelectedViewObject();
  DeployOnMDMExportWizard publishWizard=new DeployOnMDMExportWizard();
  publishWizard.setWindowTitle(EXPORTJOBSCRIPTS);
  publishWizard.init(getWorkbench(),(IStructuredSelection)this.getSelection());
  Shell activeShell=Display.getCurrent().getActiveShell();
  WizardDialog dialog=new WizardDialog(activeShell,publishWizard);
  int returnCode=dialog.open();
  if (returnCode == IDialogConstants.OK_ID) {
    SpagoBiServer spagoBiServer=publishWizard.getMdmServer();
    MDMServerDef mdmServer=getMdmServer(spagoBiServer);
    Item item=viewObj.getProperty().getItem();
    Property property=item.getProperty();
    if (property != null) {
      property.getAdditionalProperties().put(PROP_LAST_SERVER_DEF,mdmServer.getName());
    }
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(item);
      refreshMdmRepositoryViewTree();
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}",0.9461467038068708
147782,"protected void doRun(){
  DeployOnMDMExportWizard publishWizard=new DeployOnMDMExportWizard();
  publishWizard.setWindowTitle(EXPORTJOBSCRIPTS);
  publishWizard.init(getWorkbench(),(IStructuredSelection)this.getSelection());
  Shell activeShell=Display.getCurrent().getActiveShell();
  WizardDialog dialog=new WizardDialog(activeShell,publishWizard);
  int returnCode=dialog.open();
  if (returnCode == IDialogConstants.OK_ID) {
    SpagoBiServer spagoBiServer=publishWizard.getMdmServer();
    MDMServerDef mdmServer=getMdmServer(spagoBiServer);
    IRepositoryViewObject viewObj=getSelectedViewObject();
    Item item=viewObj.getProperty().getItem();
    Property property=item.getProperty();
    if (property != null) {
      property.getAdditionalProperties().put(PROP_LAST_SERVER_DEF,mdmServer.getName());
    }
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(item);
      refreshMdmRepositoryViewTree();
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}","protected void doRun(){
  IRepositoryViewObject viewObj=getSelectedViewObject();
  DeployOnMDMExportWizard publishWizard=new DeployOnMDMExportWizard();
  publishWizard.setWindowTitle(EXPORTJOBSCRIPTS);
  publishWizard.init(getWorkbench(),(IStructuredSelection)this.getSelection());
  Shell activeShell=Display.getCurrent().getActiveShell();
  WizardDialog dialog=new WizardDialog(activeShell,publishWizard);
  int returnCode=dialog.open();
  if (returnCode == IDialogConstants.OK_ID) {
    SpagoBiServer spagoBiServer=publishWizard.getMdmServer();
    MDMServerDef mdmServer=getMdmServer(spagoBiServer);
    Item item=viewObj.getProperty().getItem();
    Property property=item.getProperty();
    if (property != null) {
      property.getAdditionalProperties().put(PROP_LAST_SERVER_DEF,mdmServer.getName());
    }
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(item);
      refreshMdmRepositoryViewTree();
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
}",0.9461467038068708
147783,"protected List<IRepositoryViewObject> getSelectedRepositoryViewObject(){
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : getSelectedObject()) {
    if (obj instanceof IRepositoryViewObject)     viewObjs.add((IRepositoryViewObject)obj);
  }
  return viewObjs;
}","protected List<IRepositoryViewObject> getSelectedRepositoryViewObject(){
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : getSelectedObject()) {
    if (obj instanceof IRepositoryViewObject)     viewObjs.add((IRepositoryViewObject)obj);
  }
  reorderRepositoryViewObjects(viewObjs);
  return viewObjs;
}",0.9373134328358208
147784,"public void runWithType(ERepositoryObjectType type){
  DeployAllDialog dialog=new DeployAllDialog(getShell(),type);
  if (dialog.open() == IDialogConstants.OK_ID) {
    List<AbstractDeployCommand> selectededCommands=dialog.getSelectedCommands();
    if (selectededCommands.size() >= 0) {
      LockedDirtyObjectDialog lockDirtyDialog=new LockedDirtyObjectDialog(getShell(),Messages.AbstractDeployAction_promptToSaveEditors,getDeployViewObject(selectededCommands));
      if (lockDirtyDialog.needShowDialog() && lockDirtyDialog.open() == IDialogConstants.CANCEL_ID) {
        return;
      }
      lockDirtyDialog.saveDirtyObjects();
      MDMServerDef serverDef=dialog.getServerDef();
      IStatus status=DeployService.getInstance().runCommands(selectededCommands,serverDef);
      updateChangedStatus(status);
      if (status.isMultiStatus()) {
        showDeployStatus(status);
      }
      updateLastServer(status,new NullProgressMonitor());
    }
  }
  commonViewer.refresh();
}","public void runWithType(ERepositoryObjectType type){
  DeployAllDialog dialog=new DeployAllDialog(getShell(),type);
  if (dialog.open() == IDialogConstants.OK_ID) {
    List<AbstractDeployCommand> selectededCommands=dialog.getSelectedCommands();
    if (selectededCommands.size() >= 0) {
      LockedDirtyObjectDialog lockDirtyDialog=new LockedDirtyObjectDialog(getShell(),Messages.AbstractDeployAction_promptToSaveEditors,getDeployViewObject(selectededCommands));
      if (lockDirtyDialog.needShowDialog() && lockDirtyDialog.open() == IDialogConstants.CANCEL_ID) {
        return;
      }
      lockDirtyDialog.saveDirtyObjects();
      MDMServerDef serverDef=dialog.getServerDef();
      reorderCommandObjects(selectededCommands);
      IStatus status=DeployService.getInstance().runCommands(selectededCommands,serverDef);
      updateChangedStatus(status);
      if (status.isMultiStatus()) {
        showDeployStatus(status);
      }
      updateLastServer(status,new NullProgressMonitor());
    }
  }
  commonViewer.refresh();
}",0.9757305596830114
147785,"public char[] getCompletionProposalAutoActivationCharacters(){
  return new char[]{'<'};
}","public char[] getCompletionProposalAutoActivationCharacters(){
  return new char[]{START};
}",0.956043956043956
147786,"public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> proposals=new ArrayList<ICompletionProposal>();
  if (keyWordProvider != null) {
    String[] keyWords=keyWordProvider.getCurrentKeyWords();
    if (keyWords != null) {
      for (int i=0; i < keyWords.length; i++) {
        String entityName=keyWords[i];
        String replacementString=""String_Node_Str"" + entityName + ""String_Node_Str""+ entityName+ ""String_Node_Str"";
        CompletionProposal proposal=new CompletionProposal(replacementString,offset - 1,1,entityName.length() + 2);
        proposals.add(proposal);
      }
    }
  }
  return proposals.toArray(new ICompletionProposal[0]);
}","public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  List<ICompletionProposal> proposals=new ArrayList<ICompletionProposal>();
  if (keyWordProvider != null) {
    IDocument document=viewer.getDocument();
    int start=getInputPos(document,offset);
    String input=null;
    if (start > 0) {
      try {
        input=document.get(start,offset - start);
      }
 catch (      BadLocationException e) {
      }
    }
    if (input != null) {
      String[] keyWords=keyWordProvider.getCurrentKeyWords();
      int len=offset - start;
      if (keyWords != null) {
        boolean showAll=input.length() == 0;
        for (int i=0; i < keyWords.length; i++) {
          String entityName=keyWords[i];
          if (showAll || entityName.toLowerCase().startsWith(input)) {
            String replacementString=START + entityName + ""String_Node_Str""+ entityName+ ""String_Node_Str"";
            CompletionProposal proposal=new CompletionProposal(replacementString,offset - len - 1,len + 1,entityName.length() + 2);
            proposals.add(proposal);
          }
        }
      }
    }
  }
  return proposals.toArray(new ICompletionProposal[0]);
}",0.6409714889123548
147787,"@Override public boolean isProcess(Item item){
  return false;
}","public boolean isProcess(Item item){
  return false;
}",0.9152542372881356
147788,"@Override public IImage getIcon(ERepositoryObjectType type){
  if (type == TYPE_MENU) {
    return ServerObjectImage.MENU_ICON;
  }
  if (type == TYPE_ROLE) {
    return ServerObjectImage.ROLE_ICON;
  }
  if (type == TYPE_DATACLUSTER) {
    return ServerObjectImage.DATACLUSTER_ICON;
  }
  if (type == TYPE_DATAMODEL) {
    return ServerObjectImage.DATAMODEL_ICON;
  }
  if (type == TYPE_EVENTMANAGER) {
    return ServerObjectImage.EVENTMANAGER_ICON;
  }
  if (type == TYPE_JOBMODEL) {
    return ServerObjectImage.JOBMODEL_ICON;
  }
  if (type == TYPE_RESOURCE) {
    return ServerObjectImage.RESOURCE_ICON;
  }
  if (type == TYPE_ROUTINGRULE) {
    return ServerObjectImage.ROUTINGRULE_ICON;
  }
  if (type == TYPE_SERVICECONFIGURATION) {
    return ServerObjectImage.SERVICECONFIGURATION_ICON;
  }
  if (type == TYPE_STOREPROCEDURE) {
    return ServerObjectImage.STOREPROCEDURE_ICON;
  }
  if (type == TYPE_SYNCHRONIZATIONPLAN) {
    return ServerObjectImage.SYNCHRONIZATIONPLAN_ICON;
  }
  if (type == TYPE_TRANSFORMERV2) {
    return ServerObjectImage.TRANSFORMERV2_ICON;
  }
  if (type == TYPE_UNIVERSE) {
    return ServerObjectImage.UNIVERSE_ICON;
  }
  if (type == TYPE_VIEW) {
    return ServerObjectImage.VIEW_ICON;
  }
  if (type == TYPE_WORKFLOW) {
    return ServerObjectImage.WORKFLOW_ICON;
  }
  if (type == TYPE_CUSTOM_FORM) {
    return ServerObjectImage.CUSTOMFORM_ICON;
  }
  return null;
}","public IImage getIcon(Item item){
  return null;
}",0.0615595075239398
147789,"private String rebuildItemPath(String processName){
  String path=parentItem.getState().getPath();
  if (path.isEmpty()) {
    if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_BEFORESAVE))     path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_BEFORESAVE;
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_BEFOREDEL)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_BEFOREDEL;
    }
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_RUNNABLE)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_ENTITYACTION;
    }
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_STANDLONE)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_WELCOMEACTION;
    }
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_SMARTVIEW)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_SMARTVIEW;
    }
 else {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_OTHER;
    }
  }
  return path;
}","private String rebuildItemPath(String processName){
  String path=parentItem.getState().getPath();
  processName=processName.toLowerCase();
  if (path.isEmpty()) {
    if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_BEFORESAVE))     path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_BEFORESAVE;
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_BEFOREDEL)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_BEFOREDEL;
    }
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_RUNNABLE)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_ENTITYACTION;
    }
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_STANDLONE)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_WELCOMEACTION;
    }
 else     if (processName.startsWith(ITransformerV2NodeConsDef.Prefix_SMARTVIEW)) {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_SMARTVIEW;
    }
 else {
      path=IPath.SEPARATOR + ITransformerV2NodeConsDef.PATH_OTHER;
    }
  }
  return path;
}",0.9803168506961114
147790,"protected Item createServerObject(String key){
  WSViewItem item=MdmpropertiesFactory.eINSTANCE.createWSViewItem();
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  item.setState(itemState);
  WSViewE view=newView(key);
  item.setWsView(view);
  if (parentItem != null) {
    String path=parentItem.getState().getPath();
    if (path.isEmpty()) {
      if (key.startsWith(IViewNodeConstDef.ViewPrefix))       path=IPath.SEPARATOR + IViewNodeConstDef.PATH_WEBFILTER;
 else {
        path=IPath.SEPARATOR + IViewNodeConstDef.PATH_SEARCHFILTER;
      }
    }
    item.getState().setPath(path);
  }
 else {
    item.getState().setPath(""String_Node_Str"");
  }
  RepositoryResourceUtil.createItem(item,key);
  return item;
}","protected Item createServerObject(String key){
  WSViewItem item=MdmpropertiesFactory.eINSTANCE.createWSViewItem();
  ItemState itemState=PropertiesFactory.eINSTANCE.createItemState();
  item.setState(itemState);
  WSViewE view=newView(key);
  item.setWsView(view);
  if (parentItem != null) {
    String path=parentItem.getState().getPath();
    if (path.isEmpty()) {
      if (key.startsWith(IViewNodeConstDef.ViewPrefix))       path=IPath.SEPARATOR + IViewNodeConstDef.PATH_WEBFILTER;
 else {
        path=IPath.SEPARATOR + IViewNodeConstDef.PATH_SEARCHFILTER;
      }
    }
    item.getState().setPath(path);
  }
 else {
    if (key.toLowerCase().startsWith(IViewNodeConstDef.ViewPrefix))     item.getState().setPath(IViewNodeConstDef.PATH_WEBFILTER);
 else {
      item.getState().setPath(IViewNodeConstDef.PATH_SEARCHFILTER);
    }
  }
  RepositoryResourceUtil.createItem(item,key);
  return item;
}",0.8790273556231003
147791,"protected void createMainPart(Composite container){
  GridLayout gridLayout=(GridLayout)container.getLayout();
  gridLayout.numColumns=3;
  Label label2=new Label(container,SWT.NONE);
  label2.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  label2.setText(Messages.RenameViewDialog_Entity);
  entityText=new Text(container,SWT.SINGLE | SWT.BORDER | SWT.WRAP);
  GridData layoutData=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  layoutData.widthHint=330;
  entityText.setLayoutData(layoutData);
  Button openDLG=new Button(container,SWT.NONE);
  openDLG.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setToolTipText(Messages.ViewInputDialog_SelectOneEntity);
  Label lblFilterName=new Label(container,SWT.NONE);
  lblFilterName.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblFilterName.setText(Messages.ViewInputDialog_lblFilterName_text);
  filterText=new Text(container,SWT.BORDER);
  GridData layoutData2=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  layoutData2.widthHint=310;
  filterText.setLayoutData(layoutData2);
  filterText.setText(Messages.RenameViewDialog_DefaultFilter);
  new Label(container,SWT.NONE);
  final Label internalLabel=new Label(container,SWT.NONE | SWT.WRAP);
  internalLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,3,1));
  internalLabel.setText(Messages.RenameViewDialog_InternalName);
  internalLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
  filterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (okBtn != null)       okBtn.setEnabled(true);
      internalLabel.setText(Messages.bind(Messages.RenameViewDialog_InternalNameX,IViewNodeConstDef.ViewPrefix + entityText.getText() + ""String_Node_Str""+ filterText.getText()));
    }
  }
);
  entityText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (okBtn != null)       okBtn.setEnabled(true);
      internalLabel.setText(Messages.bind(Messages.RenameViewDialog_InternalNameX,IViewNodeConstDef.ViewPrefix + entityText.getText() + ""String_Node_Str""+ filterText.getText()));
    }
  }
);
  if (value != null) {
    String[] split=value.split(""String_Node_Str"");
    entityText.setText(split[0]);
    if (split.length == 1)     filterText.setText(""String_Node_Str"");
 else     filterText.setText(split[1]);
    internalLabel.setText(Messages.bind(Messages.RenameViewDialog_InternalNameX,IViewNodeConstDef.ViewPrefix + entityText.getText() + ""String_Node_Str""+ filterText.getText()));
  }
}","protected void createMainPart(Composite container){
  GridLayout gridLayout=(GridLayout)container.getLayout();
  gridLayout.numColumns=3;
  Label label2=new Label(container,SWT.NONE);
  label2.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  label2.setText(Messages.RenameViewDialog_Entity);
  entityText=new Text(container,SWT.SINGLE | SWT.BORDER | SWT.WRAP);
  GridData layoutData=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  layoutData.widthHint=330;
  entityText.setLayoutData(layoutData);
  Button openDLG=new Button(container,SWT.NONE);
  openDLG.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setToolTipText(Messages.ViewInputDialog_SelectOneEntity);
  Label lblFilterName=new Label(container,SWT.NONE);
  lblFilterName.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblFilterName.setText(Messages.ViewInputDialog_lblFilterName_text);
  filterText=new Text(container,SWT.BORDER);
  GridData layoutData2=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  layoutData2.widthHint=310;
  filterText.setLayoutData(layoutData2);
  filterText.setText(Messages.RenameViewDialog_DefaultFilter);
  new Label(container,SWT.NONE);
  final Label internalLabel=new Label(container,SWT.NONE | SWT.WRAP);
  internalLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,3,1));
  internalLabel.setText(Messages.RenameViewDialog_InternalName);
  internalLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
  filterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (okBtn != null)       okBtn.setEnabled(true);
      internalLabel.setText(getInternalName());
    }
  }
);
  entityText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (okBtn != null)       okBtn.setEnabled(true);
      internalLabel.setText(getInternalName());
    }
  }
);
  if (value != null) {
    String[] split=value.split(""String_Node_Str"");
    entityText.setText(split[0]);
    if (split.length == 1)     filterText.setText(""String_Node_Str"");
 else     filterText.setText(split[1]);
    internalLabel.setText(getInternalName());
  }
}",0.906268656716418
147792,"public void modifyText(ModifyEvent e){
  if (okBtn != null)   okBtn.setEnabled(true);
  internalLabel.setText(Messages.bind(Messages.RenameViewDialog_InternalNameX,IViewNodeConstDef.ViewPrefix + entityText.getText() + ""String_Node_Str""+ filterText.getText()));
}","public void modifyText(ModifyEvent e){
  if (okBtn != null)   okBtn.setEnabled(true);
  internalLabel.setText(getInternalName());
}",0.6615776081424937
147793,"private Composite getBottom1(Composite botComposite){
  Composite panel1=new Composite(botComposite,SWT.NONE);
  GridLayout layout=new GridLayout(3,false);
  panel1.setLayout(layout);
  Label label2=new Label(panel1,SWT.NONE);
  label2.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  label2.setText(Messages.ViewInputDialog_Entity);
  entityText=new Text(panel1,getInputTextStyle() | SWT.WRAP);
  GridData layoutData=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  entityText.setLayoutData(layoutData);
  openDLG=new Button(panel1,SWT.NONE);
  openDLG.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(Messages.ViewInputDialog_SelectOneEntity);
  lblFilterName=new Label(panel1,SWT.NONE);
  lblFilterName.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblFilterName.setText(Messages.ViewInputDialog_lblFilterName_text);
  filterText1=new Text(panel1,SWT.BORDER);
  GridData layoutData2=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  layoutData2.widthHint=330;
  filterText1.setLayoutData(layoutData2);
  filterText1.setText(Messages.ViewInputDialog_Default);
  new Label(panel1,SWT.NONE);
  final Label internalLabel=new Label(panel1,SWT.NONE | SWT.WRAP);
  internalLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,3,1));
  internalLabel.setText(Messages.ViewInputDialog_InternalName);
  internalLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
  filterText1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getOkButton().setEnabled(true);
      internalLabel.setText(Messages.bind(Messages.ViewInputDialog_InternalNameX,getInternalName()));
    }
  }
);
  entityText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getOkButton().setEnabled(true);
      internalLabel.setText(Messages.bind(Messages.ViewInputDialog_InternalNameX,getInternalName()));
    }
  }
);
  return panel1;
}","private Composite getBottom1(Composite botComposite){
  Composite panel1=new Composite(botComposite,SWT.NONE);
  GridLayout layout=new GridLayout(3,false);
  panel1.setLayout(layout);
  Label label2=new Label(panel1,SWT.NONE);
  label2.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
  label2.setText(Messages.ViewInputDialog_Entity);
  entityText=new Text(panel1,getInputTextStyle() | SWT.WRAP);
  GridData layoutData=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  entityText.setLayoutData(layoutData);
  openDLG=new Button(panel1,SWT.NONE);
  openDLG.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  openDLG.addSelectionListener(this);
  openDLG.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  openDLG.setVisible(isBtnShow);
  openDLG.setToolTipText(Messages.ViewInputDialog_SelectOneEntity);
  lblFilterName=new Label(panel1,SWT.NONE);
  lblFilterName.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lblFilterName.setText(Messages.ViewInputDialog_lblFilterName_text);
  filterText1=new Text(panel1,SWT.BORDER);
  GridData layoutData2=new GridData(SWT.FILL,SWT.CENTER,true,false,1,1);
  layoutData2.widthHint=330;
  filterText1.setLayoutData(layoutData2);
  filterText1.setText(Messages.ViewInputDialog_Default);
  filterText1.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_GRAY));
  new Label(panel1,SWT.NONE);
  final Label internalLabel=new Label(panel1,SWT.NONE | SWT.WRAP);
  internalLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,3,1));
  internalLabel.setText(Messages.bind(Messages.ViewInputDialog_InternalNameX,getInternalName()));
  internalLabel.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
  filterText1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getOkButton().setEnabled(true);
      internalLabel.setText(Messages.bind(Messages.ViewInputDialog_InternalNameX,getInternalName()));
      filterText1.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
    }
  }
);
  filterText1.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      if (filterText1.getText().equals(Messages.ViewInputDialog_Default)) {
        filterText1.setText(""String_Node_Str"");
        filterText1.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
      }
    }
    @Override public void focusLost(    FocusEvent e){
      if (filterText1.getText().isEmpty()) {
        filterText1.setText(Messages.ViewInputDialog_Default);
        filterText1.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_GRAY));
      }
    }
  }
);
  entityText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getOkButton().setEnabled(true);
      internalLabel.setText(Messages.bind(Messages.ViewInputDialog_InternalNameX,getInternalName()));
    }
  }
);
  return panel1;
}",0.7300469483568075
147794,"private String getInternalName(){
  StringBuffer internalBuffer=new StringBuffer();
  internalBuffer.append(IViewNodeConstDef.ViewPrefix);
  internalBuffer.append(entityText.getText());
  if (!filterText1.getText().isEmpty()) {
    internalBuffer.append(""String_Node_Str"");
    internalBuffer.append(filterText1.getText());
  }
  return internalBuffer.toString();
}","private String getInternalName(){
  StringBuffer internalBuffer=new StringBuffer();
  internalBuffer.append(IViewNodeConstDef.ViewPrefix);
  internalBuffer.append(entityText.getText());
  if (!filterText1.getText().isEmpty() && !filterText1.getText().equalsIgnoreCase(Messages.ViewInputDialog_Default)) {
    internalBuffer.append(""String_Node_Str"");
    internalBuffer.append(filterText1.getText());
  }
  return internalBuffer.toString();
}",0.9045848822800496
147795,"@Override protected void buttonPressed(int buttonId){
  if (buttonId == IDialogConstants.OK_ID) {
    if (parentType == 1) {
      value=entityText.getText();
      filterName=filterText1.getText();
      if (value.isEmpty()) {
        MessageDialog.openError(getShell(),Messages.Warning,Messages.ViewInputDialog_NameCannotbeEmpty);
        return;
      }
    }
    if (parentType == 2) {
      value=filterText2.getText();
      if (value.isEmpty()) {
        MessageDialog.openError(getShell(),Messages.Warning,Messages.ViewInputDialog_NameCannotbeEmpty);
        return;
      }
    }
  }
  super.buttonPressed(buttonId);
}","@Override protected void buttonPressed(int buttonId){
  if (buttonId == IDialogConstants.OK_ID) {
    if (parentType == 1) {
      value=entityText.getText();
      filterName=filterText1.getText();
      if (filterName.equals(Messages.ViewInputDialog_Default))       filterName=""String_Node_Str"";
      if (value.isEmpty()) {
        MessageDialog.openError(getShell(),Messages.Warning,Messages.ViewInputDialog_NameCannotbeEmpty);
        return;
      }
    }
    if (parentType == 2) {
      value=filterText2.getText();
      if (value.isEmpty()) {
        MessageDialog.openError(getShell(),Messages.Warning,Messages.ViewInputDialog_NameCannotbeEmpty);
        return;
      }
    }
  }
  super.buttonPressed(buttonId);
}",0.926829268292683
147796,"public static String bind(String message,String... bindings){
  return bind(message,bindings);
}","public static String bind(String message,String... bindings){
  return NLS.bind(message,bindings);
}",0.979591836734694
147797,"public static String bind(String message,String... bindings){
  return bind(message,bindings);
}","public static String bind(String message,String... bindings){
  return NLS.bind(message,bindings);
}",0.979591836734694
147798,"private String validateDiagnoses(String msg_omit[]){
  xsdSchema.clearDiagnostics();
  xsdSchema.validate();
  EList<XSDDiagnostic> diagnoses=xsdSchema.getAllDiagnostics();
  String error=""String_Node_Str"";
  Set<String> errors=new HashSet<String>();
  for (int i=0; i < diagnoses.size(); i++) {
    XSDDiagnostic dia=diagnoses.get(i);
    XSDDiagnosticSeverity servity=dia.getSeverity();
    if (servity == XSDDiagnosticSeverity.ERROR_LITERAL || servity == XSDDiagnosticSeverity.FATAL_LITERAL) {
      boolean omit=false;
      for (      String msg : msg_omit) {
        if (dia.getMessage().indexOf(msg) != -1) {
          omit=true;
          break;
        }
      }
      if (!omit && !errors.contains(dia.getMessage())) {
        error+=dia.getMessage() + ""String_Node_Str"";
        errors.add(dia.getMessage());
      }
    }
  }
  return error;
}","private String validateDiagnoses(String msg_omit[]){
  xsdSchema.clearDiagnostics();
  xsdSchema.getAllDiagnostics().clear();
  xsdSchema.validate();
  EList<XSDDiagnostic> diagnoses=xsdSchema.getAllDiagnostics();
  String error=""String_Node_Str"";
  Set<String> errors=new HashSet<String>();
  for (int i=0; i < diagnoses.size(); i++) {
    XSDDiagnostic dia=diagnoses.get(i);
    XSDDiagnosticSeverity servity=dia.getSeverity();
    if (servity == XSDDiagnosticSeverity.ERROR_LITERAL || servity == XSDDiagnosticSeverity.FATAL_LITERAL) {
      boolean omit=false;
      for (      String msg : msg_omit) {
        if (dia.getMessage().indexOf(msg) != -1) {
          omit=true;
          break;
        }
      }
      if (!omit && !errors.contains(dia.getMessage())) {
        error+=dia.getMessage() + ""String_Node_Str"";
        errors.add(dia.getMessage());
      }
    }
  }
  return error;
}",0.9765848086807538
147799,"public boolean copyViewObj(IRepositoryViewObject dragViewObj,IRepositoryViewObject dropViewObj){
  if (dropViewObj != null && dragViewObj != null) {
    Property dragProp=dragViewObj.getProperty();
    Property dropProp=dropViewObj.getProperty();
    Item item=dragProp.getItem();
    String name;
    if (item instanceof MDMServerObjectItem) {
      MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      name=serverObj.getName();
    }
 else {
      name=dragProp.getLabel();
    }
    IRepositoryViewObject dragParentViewObj=getParentRepositoryViewObject(dragViewObj);
    ContainerItem dragParentItem=(ContainerItem)dragParentViewObj.getProperty().getItem();
    String newName=showPasteDlg(dragParentItem.getRepObjType(),dragParentItem,""String_Node_Str"" + name);
    if (newName != null) {
      String pathStr=dropProp.getItem().getState().getPath();
      IPath path=new Path(pathStr);
      ERepositoryObjectType type=dropViewObj.getRepositoryObjectType();
      if (type == IServerObjectRepositoryType.TYPE_WORKFLOW) {
        EList refFiles=item.getReferenceResources();
        if (!refFiles.isEmpty()) {
          ReferenceFileItem refFileItem=(ReferenceFileItem)refFiles.get(0);
          byte[] content=refFileItem.getContent().getInnerContent();
          IFolder folder=RepositoryResourceUtil.getFolder(type);
          String fileName=refFileItem.getName().replace(name,newName);
          fileName=fileName.replace(""String_Node_Str"",""String_Node_Str"");
          IFile file=folder.getFile(fileName);
          InputStream inputStream=new ByteArrayInputStream(content);
          try {
            if (!file.exists())             file.create(new ByteArrayInputStream(content),IFile.FORCE,new NullProgressMonitor());
 else             file.setContents(new ByteArrayInputStream(content),IFile.FORCE,new NullProgressMonitor());
            file.refreshLocal(IResource.DEPTH_ZERO,new NullProgressMonitor());
            IMDMRepositoryEnterpriseServiceExt service=(IMDMRepositoryEnterpriseServiceExt)GlobalServiceRegister.getDefault().getService(IMDMRepositoryEnterpriseServiceExt.class);
            if (service != null) {
              service.updateWorkflowContent(newName,fileName,inputStream,dragParentViewObj);
            }
            return true;
          }
 catch (          CoreException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
 else {
        IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        Item copy=null;
        try {
          copy=factory.copy(item,path,true);
          if (factory.isEditableAndLockIfPossible(copy)) {
            if (copy instanceof MDMServerObjectItem) {
              ((MDMServerObjectItem)copy).getMDMServerObject().setName(newName);
              ((MDMServerObjectItem)copy).getMDMServerObject().setLastServerDef(null);
              CommandManager.getInstance().pushCommand(ICommand.CMD_ADD,copy.getProperty().getId(),newName);
            }
            copy.getProperty().setLabel(newName);
            RepositoryResourceUtil.setLastServerDef(copy,null);
            factory.save(copy);
            return true;
          }
        }
 catch (        PersistenceException e) {
          log.error(e.getMessage(),e);
        }
catch (        BusinessException e) {
          log.error(e.getMessage(),e);
        }
 finally {
          try {
            factory.unlock(copy);
          }
 catch (          PersistenceException e) {
            log.error(e.getMessage(),e);
          }
catch (          LoginException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
    }
  }
  return false;
}","public boolean copyViewObj(IRepositoryViewObject dragViewObj,IRepositoryViewObject dropViewObj){
  if (dropViewObj != null && dragViewObj != null) {
    Property dragProp=dragViewObj.getProperty();
    Property dropProp=dropViewObj.getProperty();
    Item item=dragProp.getItem();
    String name;
    if (item instanceof MDMServerObjectItem) {
      MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      name=serverObj.getName();
    }
 else {
      name=dragProp.getLabel();
    }
    IRepositoryViewObject dragParentViewObj=getParentRepositoryViewObject(dragViewObj);
    ContainerItem dragParentItem=(ContainerItem)dragParentViewObj.getProperty().getItem();
    String newName=showPasteDlg(dragParentItem.getRepObjType(),dragParentItem,""String_Node_Str"" + name);
    if (newName != null) {
      String pathStr=dropProp.getItem().getState().getPath();
      IPath path=new Path(pathStr);
      ERepositoryObjectType type=dropViewObj.getRepositoryObjectType();
      if (type == IServerObjectRepositoryType.TYPE_WORKFLOW) {
        EList refFiles=item.getReferenceResources();
        if (!refFiles.isEmpty()) {
          ReferenceFileItem refFileItem=(ReferenceFileItem)refFiles.get(0);
          byte[] content=refFileItem.getContent().getInnerContent();
          IFolder folder=RepositoryResourceUtil.getFolder(type);
          String fileName=refFileItem.getName().replace(name,newName);
          fileName=fileName.replace(""String_Node_Str"",""String_Node_Str"");
          IFile file=folder.getFile(fileName);
          InputStream inputStream=new ByteArrayInputStream(content);
          try {
            if (!file.exists())             file.create(new ByteArrayInputStream(content),IFile.FORCE,new NullProgressMonitor());
 else             file.setContents(new ByteArrayInputStream(content),IFile.FORCE,new NullProgressMonitor());
            file.refreshLocal(IResource.DEPTH_ZERO,new NullProgressMonitor());
            IMDMRepositoryEnterpriseServiceExt service=(IMDMRepositoryEnterpriseServiceExt)GlobalServiceRegister.getDefault().getService(IMDMRepositoryEnterpriseServiceExt.class);
            newName=newName.replace(""String_Node_Str"",""String_Node_Str"");
            if (service != null) {
              service.updateWorkflowContent(newName,fileName,inputStream,dragParentViewObj);
            }
            return true;
          }
 catch (          CoreException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
 else {
        IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
        Item copy=null;
        try {
          copy=factory.copy(item,path,true);
          if (factory.isEditableAndLockIfPossible(copy)) {
            if (copy instanceof MDMServerObjectItem) {
              ((MDMServerObjectItem)copy).getMDMServerObject().setName(newName);
              ((MDMServerObjectItem)copy).getMDMServerObject().setLastServerDef(null);
              CommandManager.getInstance().pushCommand(ICommand.CMD_ADD,copy.getProperty().getId(),newName);
            }
            copy.getProperty().setLabel(newName);
            RepositoryResourceUtil.setLastServerDef(copy,null);
            factory.save(copy);
            return true;
          }
        }
 catch (        PersistenceException e) {
          log.error(e.getMessage(),e);
        }
catch (        BusinessException e) {
          log.error(e.getMessage(),e);
        }
 finally {
          try {
            factory.unlock(copy);
          }
 catch (          PersistenceException e) {
            log.error(e.getMessage(),e);
          }
catch (          LoginException e) {
            log.error(e.getMessage(),e);
          }
        }
      }
    }
  }
  return false;
}",0.9900671140939598
147800,"public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    isConcept=false;
    TreePath tPath=null;
    if (((TreeSelection)selection).getPaths().length > 0)     tPath=((TreeSelection)selection).getPaths()[0];
    if (declNew != null) {
      decl=declNew;
      checkConcept();
    }
 else     if (selection.getFirstElement() instanceof XSDModelGroup) {
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDElementDeclaration)         decl=(XSDElementDeclaration)tPath.getSegment(i);
 else         if (tPath.getSegment(i) instanceof XSDParticle)         decl=(XSDElementDeclaration)((XSDParticle)tPath.getSegment(i)).getTerm();
      }
      checkConcept();
    }
 else     if (selection.getFirstElement() instanceof XSDElementDeclaration) {
      decl=(XSDElementDeclaration)selection.getFirstElement();
      checkConcept();
    }
 else     if (selection.getFirstElement() instanceof XSDParticle) {
      decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getContent();
    }
 else {
      if (selection.getFirstElement() != null) {
        decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getTerm();
      }
    }
    List<XSDComplexTypeDefinition> types=Util.getComplexTypes(decl.getSchema());
    if (showDlg) {
      if (tPath != null)       for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDElementDeclaration) {
          XSDTypeDefinition type=(((XSDElementDeclaration)tPath.getSegment(i)).getTypeDefinition());
          if (!type.equals(decl.getTypeDefinition()))           types.remove(type);
        }
        if (tPath.getSegment(i) instanceof XSDParticle) {
          XSDTypeDefinition type=((XSDElementDeclaration)(((XSDParticle)tPath.getSegment(i)).getTerm())).getTypeDefinition();
          if (!type.equals(decl.getTypeDefinition()))           types.remove(type);
        }
      }
      dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),schema,decl.getTypeDefinition(),types,isXSDModelGroup);
      dialog.setBlockOnOpen(true);
      int ret=dialog.open();
      if (ret == Dialog.CANCEL) {
        return Status.CANCEL_STATUS;
      }
    }
    if (!showDlg && !validateType()) {
      return Status.CANCEL_STATUS;
    }
    XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
    boolean anonymous=(typeName == null) || (""String_Node_Str"".equals(typeName));
    boolean alreadyExists=false;
    XSDComplexTypeDefinition complexType=null;
    XSDParticle subParticle=null;
    XSDParticle groupParticle=null;
    XSDElementDeclaration subElement=null;
    XSDElementDeclaration parent=null;
    Object pObject=Util.getParent(decl);
    if (pObject instanceof XSDElementDeclaration)     parent=(XSDElementDeclaration)pObject;
 else     if (pObject instanceof XSDComplexTypeDefinition)     complexType=(XSDComplexTypeDefinition)pObject;
    if (!anonymous) {
      EList list=schema.getTypeDefinitions();
      String ns=""String_Node_Str"";
      if (typeName.lastIndexOf(""String_Node_Str"") != -1) {
        ns=typeName.substring(typeName.lastIndexOf(""String_Node_Str"") + 3);
        typeName=typeName.substring(0,typeName.lastIndexOf(""String_Node_Str""));
      }
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDTypeDefinition td=(XSDTypeDefinition)iter.next();
        if ((td.getName().equals(typeName) && (td instanceof XSDComplexTypeDefinition))) {
          alreadyExists=true;
          complexType=(XSDComplexTypeDefinition)td;
          break;
        }
      }
    }
 else {
      if (parent != null && decl.getTypeDefinition() instanceof XSDComplexTypeDefinition)       complexType=(XSDComplexTypeDefinition)decl.getTypeDefinition();
      if (complexType != null && complexType.getName() == null) {
        alreadyExists=true;
      }
      if (decl.getTypeDefinition() instanceof XSDSimpleTypeDefinition)       alreadyExists=false;
    }
    if (parent != null && complexType != null) {
      XSDParticleImpl partCnt=(XSDParticleImpl)complexType.getContentType();
      XSDModelGroupImpl mdlGrp=(XSDModelGroupImpl)partCnt.getTerm();
      if (isChoice)       mdlGrp.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else       if (isAll) {
        mdlGrp.setCompositor(XSDCompositor.ALL_LITERAL);
      }
 else {
        mdlGrp.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
      }
      partCnt.unsetMaxOccurs();
      partCnt.unsetMinOccurs();
      XSDTypeDefinition superType=null;
      for (      XSDTypeDefinition type : types) {
        if (type.getName().equals(superTypeName)) {
          superType=type;
          break;
        }
      }
      if (superType != null) {
        complexType.setDerivationMethod(XSDDerivationMethod.EXTENSION_LITERAL);
        complexType.setBaseTypeDefinition(superType);
      }
      if (isAbstract)       complexType.setAbstract(isAbstract);
 else       complexType.unsetAbstract();
      if (parent != null)       parent.updateElement();
      if (complexType != null)       complexType.updateElement();
    }
    if (!alreadyExists) {
      subElement=factory.createXSDElementDeclaration();
      subElement.setName(""String_Node_Str"");
      subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
      subParticle=factory.createXSDParticle();
      subParticle.unsetMaxOccurs();
      subParticle.unsetMinOccurs();
      subParticle.setContent(subElement);
      subParticle.updateElement();
      XSDModelGroup group=factory.createXSDModelGroup();
      if (isChoice)       group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else       if (isAll)       group.setCompositor(XSDCompositor.ALL_LITERAL);
 else       group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
      group.getContents().add(0,subParticle);
      group.updateElement();
      complexType=factory.createXSDComplexTypeDefinition();
      if (!anonymous) {
        XSDTypeDefinition superType=null;
        for (        XSDTypeDefinition type : types) {
          if (type.getName().equals(superTypeName)) {
            superType=type;
            break;
          }
        }
        complexType.setName(typeName);
        if (superType != null) {
          complexType.setDerivationMethod(XSDDerivationMethod.EXTENSION_LITERAL);
          complexType.setBaseTypeDefinition(superType);
        }
        if (isAbstract)         complexType.setAbstract(isAbstract);
 else         complexType.unsetAbstract();
        schema.getContents().add(complexType);
      }
      complexType.updateElement();
      groupParticle=factory.createXSDParticle();
      groupParticle.unsetMaxOccurs();
      groupParticle.unsetMinOccurs();
      groupParticle.setContent(group);
      groupParticle.updateElement();
      complexType.setContent(groupParticle);
      complexType.updateElement();
    }
    if (anonymous)     decl.setAnonymousTypeDefinition(complexType);
 else {
      decl.setTypeDefinition(complexType);
    }
    if (isConcept) {
      ArrayList keys=new ArrayList();
      EList list=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         keys.add(icd);
      }
      decl.getIdentityConstraintDefinitions().removeAll(keys);
      XSDElementDeclaration firstDecl=null;
      if (complexType.getContent() instanceof XSDParticle) {
        if (((XSDParticle)complexType.getContent()).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)((XSDParticle)complexType.getContent()).getTerm();
          EList gpl=group.getContents();
          for (Iterator iter=gpl.iterator(); iter.hasNext(); ) {
            XSDParticle part=(XSDParticle)iter.next();
            if (part.getTerm() instanceof XSDElementDeclaration) {
              firstDecl=(XSDElementDeclaration)part.getTerm();
              break;
            }
          }
        }
      }
      if (firstDecl != null) {
        XSDIdentityConstraintDefinition uniqueKey=factory.createXSDIdentityConstraintDefinition();
        uniqueKey.setIdentityConstraintCategory(XSDIdentityConstraintCategory.UNIQUE_LITERAL);
        uniqueKey.setName(decl.getName());
        XSDXPathDefinition selector=factory.createXSDXPathDefinition();
        selector.setVariety(XSDXPathVariety.SELECTOR_LITERAL);
        selector.setValue(""String_Node_Str"");
        uniqueKey.setSelector(selector);
        XSDXPathDefinition field=factory.createXSDXPathDefinition();
        field.setVariety(XSDXPathVariety.FIELD_LITERAL);
        field.setValue(firstDecl.getAliasName());
        uniqueKey.getFields().add(field);
        decl.getIdentityConstraintDefinitions().add(uniqueKey);
      }
    }
    decl.updateElement();
    schema.update();
    page.refresh();
    declNew=null;
    page.markDirty();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
    isConcept=false;
    TreePath tPath=null;
    if (((TreeSelection)selection).getPaths().length > 0)     tPath=((TreeSelection)selection).getPaths()[0];
    if (declNew != null) {
      decl=declNew;
      checkConcept();
    }
 else     if (selection.getFirstElement() instanceof XSDModelGroup) {
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDElementDeclaration)         decl=(XSDElementDeclaration)tPath.getSegment(i);
 else         if (tPath.getSegment(i) instanceof XSDParticle)         decl=(XSDElementDeclaration)((XSDParticle)tPath.getSegment(i)).getTerm();
      }
      checkConcept();
    }
 else     if (selection.getFirstElement() instanceof XSDElementDeclaration) {
      decl=(XSDElementDeclaration)selection.getFirstElement();
      checkConcept();
    }
 else     if (selection.getFirstElement() instanceof XSDParticle) {
      decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getContent();
    }
 else {
      if (selection.getFirstElement() != null) {
        decl=(XSDElementDeclaration)((XSDParticle)selection.getFirstElement()).getTerm();
      }
    }
    List<XSDComplexTypeDefinition> types=Util.getComplexTypes(decl.getSchema());
    if (showDlg) {
      if (tPath != null)       for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDElementDeclaration) {
          XSDTypeDefinition type=(((XSDElementDeclaration)tPath.getSegment(i)).getTypeDefinition());
          if (!type.equals(decl.getTypeDefinition()))           types.remove(type);
        }
        if (tPath.getSegment(i) instanceof XSDParticle) {
          XSDTypeDefinition type=((XSDElementDeclaration)(((XSDParticle)tPath.getSegment(i)).getTerm())).getTypeDefinition();
          if (!type.equals(decl.getTypeDefinition()))           types.remove(type);
        }
      }
      dialog=new ComplexTypeInputDialog(this,page.getSite().getShell(),schema,decl.getTypeDefinition(),types,isXSDModelGroup);
      dialog.setBlockOnOpen(true);
      int ret=dialog.open();
      if (ret == Dialog.CANCEL) {
        return Status.CANCEL_STATUS;
      }
    }
    if (!showDlg && !validateType()) {
      return Status.CANCEL_STATUS;
    }
    XSDFactory factory=XSDSchemaBuildingTools.getXSDFactory();
    boolean anonymous=(typeName == null) || (""String_Node_Str"".equals(typeName));
    boolean alreadyExists=false;
    XSDComplexTypeDefinition complexType=null;
    XSDParticle subParticle=null;
    XSDParticle groupParticle=null;
    XSDElementDeclaration subElement=null;
    XSDElementDeclaration parent=null;
    Object pObject=Util.getParent(decl);
    if (pObject instanceof XSDElementDeclaration)     parent=(XSDElementDeclaration)pObject;
 else     if (pObject instanceof XSDComplexTypeDefinition)     complexType=(XSDComplexTypeDefinition)pObject;
    if (!anonymous) {
      EList list=schema.getTypeDefinitions();
      String ns=""String_Node_Str"";
      if (typeName.lastIndexOf(""String_Node_Str"") != -1) {
        ns=typeName.substring(typeName.lastIndexOf(""String_Node_Str"") + 3);
        typeName=typeName.substring(0,typeName.lastIndexOf(""String_Node_Str""));
      }
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDTypeDefinition td=(XSDTypeDefinition)iter.next();
        if ((td.getName().equals(typeName) && (td instanceof XSDComplexTypeDefinition))) {
          alreadyExists=true;
          complexType=(XSDComplexTypeDefinition)td;
          break;
        }
      }
    }
 else {
      if (parent != null && decl.getTypeDefinition() instanceof XSDComplexTypeDefinition)       complexType=(XSDComplexTypeDefinition)decl.getTypeDefinition();
      if (complexType != null && complexType.getSchema() != null && complexType.getName() == null) {
        alreadyExists=true;
      }
      if (decl.getTypeDefinition() instanceof XSDSimpleTypeDefinition)       alreadyExists=false;
    }
    if (parent != null && complexType != null && complexType.getSchema() != null) {
      XSDParticleImpl partCnt=(XSDParticleImpl)complexType.getContentType();
      XSDModelGroupImpl mdlGrp=(XSDModelGroupImpl)partCnt.getTerm();
      if (mdlGrp.getSchema() != null) {
        if (isChoice)         mdlGrp.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else         if (isAll) {
          mdlGrp.setCompositor(XSDCompositor.ALL_LITERAL);
        }
 else {
          mdlGrp.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
        }
      }
      partCnt.unsetMaxOccurs();
      partCnt.unsetMinOccurs();
      XSDTypeDefinition superType=null;
      for (      XSDTypeDefinition type : types) {
        if (type.getName().equals(superTypeName)) {
          superType=type;
          break;
        }
      }
      if (superType != null) {
        complexType.setDerivationMethod(XSDDerivationMethod.EXTENSION_LITERAL);
        complexType.setBaseTypeDefinition(superType);
      }
      if (isAbstract)       complexType.setAbstract(isAbstract);
 else       complexType.unsetAbstract();
      if (parent != null)       parent.updateElement();
      if (complexType != null)       complexType.updateElement();
    }
    if (!alreadyExists) {
      subElement=factory.createXSDElementDeclaration();
      subElement.setName(""String_Node_Str"");
      subElement.setTypeDefinition(schema.resolveSimpleTypeDefinition(schema.getSchemaForSchemaNamespace(),""String_Node_Str""));
      subParticle=factory.createXSDParticle();
      subParticle.unsetMaxOccurs();
      subParticle.unsetMinOccurs();
      subParticle.setContent(subElement);
      subParticle.updateElement();
      XSDModelGroup group=factory.createXSDModelGroup();
      if (isChoice)       group.setCompositor(XSDCompositor.CHOICE_LITERAL);
 else       if (isAll)       group.setCompositor(XSDCompositor.ALL_LITERAL);
 else       group.setCompositor(XSDCompositor.SEQUENCE_LITERAL);
      group.getContents().add(0,subParticle);
      group.updateElement();
      complexType=factory.createXSDComplexTypeDefinition();
      if (!anonymous) {
        XSDTypeDefinition superType=null;
        for (        XSDTypeDefinition type : types) {
          if (type.getName().equals(superTypeName)) {
            superType=type;
            break;
          }
        }
        complexType.setName(typeName);
        if (superType != null) {
          complexType.setDerivationMethod(XSDDerivationMethod.EXTENSION_LITERAL);
          complexType.setBaseTypeDefinition(superType);
        }
        if (isAbstract)         complexType.setAbstract(isAbstract);
 else         complexType.unsetAbstract();
        schema.getContents().add(complexType);
      }
      complexType.updateElement();
      groupParticle=factory.createXSDParticle();
      groupParticle.unsetMaxOccurs();
      groupParticle.unsetMinOccurs();
      groupParticle.setContent(group);
      groupParticle.updateElement();
      complexType.setContent(groupParticle);
      complexType.updateElement();
    }
    if (anonymous)     decl.setAnonymousTypeDefinition(complexType);
 else {
      decl.setTypeDefinition(complexType);
    }
    if (isConcept) {
      ArrayList keys=new ArrayList();
      EList list=decl.getIdentityConstraintDefinitions();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        XSDIdentityConstraintDefinition icd=(XSDIdentityConstraintDefinition)iter.next();
        if (icd.getIdentityConstraintCategory().equals(XSDIdentityConstraintCategory.UNIQUE_LITERAL))         keys.add(icd);
      }
      decl.getIdentityConstraintDefinitions().removeAll(keys);
      XSDElementDeclaration firstDecl=null;
      if (complexType.getContent() instanceof XSDParticle) {
        if (((XSDParticle)complexType.getContent()).getTerm() instanceof XSDModelGroup) {
          XSDModelGroup group=(XSDModelGroup)((XSDParticle)complexType.getContent()).getTerm();
          EList gpl=group.getContents();
          for (Iterator iter=gpl.iterator(); iter.hasNext(); ) {
            XSDParticle part=(XSDParticle)iter.next();
            if (part.getTerm() instanceof XSDElementDeclaration) {
              firstDecl=(XSDElementDeclaration)part.getTerm();
              break;
            }
          }
        }
      }
      if (firstDecl != null) {
        XSDIdentityConstraintDefinition uniqueKey=factory.createXSDIdentityConstraintDefinition();
        uniqueKey.setIdentityConstraintCategory(XSDIdentityConstraintCategory.UNIQUE_LITERAL);
        uniqueKey.setName(decl.getName());
        XSDXPathDefinition selector=factory.createXSDXPathDefinition();
        selector.setVariety(XSDXPathVariety.SELECTOR_LITERAL);
        selector.setValue(""String_Node_Str"");
        uniqueKey.setSelector(selector);
        XSDXPathDefinition field=factory.createXSDXPathDefinition();
        field.setVariety(XSDXPathVariety.FIELD_LITERAL);
        field.setValue(firstDecl.getAliasName());
        uniqueKey.getFields().add(field);
        decl.getIdentityConstraintDefinitions().add(uniqueKey);
      }
    }
    decl.updateElement();
    schema.update();
    page.refresh();
    declNew=null;
    page.markDirty();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9929794702691204
147801,"private String[] getAllReferences(){
  ArrayList<String> elementDeclarations=new ArrayList<String>();
  elementDeclarations.add(""String_Node_Str"");
  if (curXSDParticle == null)   return elementDeclarations.toArray(new String[0]);
  for (  XSDElementDeclaration eachXSDEleDeclaration : curXSDParticle.getSchema().getElementDeclarations()) {
    if (eachXSDEleDeclaration.getTargetNamespace() != null && eachXSDEleDeclaration.getTargetNamespace().equals(IConstants.DEFAULT_NAME_SPACE))     continue;
    elementDeclarations.add(eachXSDEleDeclaration.getQName() + (eachXSDEleDeclaration.getTargetNamespace() != null ? ""String_Node_Str"" + eachXSDEleDeclaration.getTargetNamespace() : ""String_Node_Str""));
  }
  return elementDeclarations.toArray(new String[0]);
}","private String[] getAllReferences(){
  ArrayList<String> elementDeclarations=new ArrayList<String>();
  elementDeclarations.add(""String_Node_Str"");
  if (curXSDParticle == null)   return elementDeclarations.toArray(new String[0]);
  if (curXSDParticle.getSchema() == null)   return new String[0];
  for (  XSDElementDeclaration eachXSDEleDeclaration : curXSDParticle.getSchema().getElementDeclarations()) {
    if (eachXSDEleDeclaration.getTargetNamespace() != null && eachXSDEleDeclaration.getTargetNamespace().equals(IConstants.DEFAULT_NAME_SPACE))     continue;
    elementDeclarations.add(eachXSDEleDeclaration.getQName() + (eachXSDEleDeclaration.getTargetNamespace() != null ? ""String_Node_Str"" + eachXSDEleDeclaration.getTargetNamespace() : ""String_Node_Str""));
  }
  return elementDeclarations.toArray(new String[0]);
}",0.9583858764186634
147802,"private void initUIContentsForComboCustomTypes(){
  comboCustomTypes.removeSelectionChangedListener(customChangedListener);
  List<String> allCustomTypeNames=null;
  if (xsdSimpleType.getSchema() != null) {
    allCustomTypeNames=Util.getAllCustomTypeNames(xsdSimpleType.getSchema());
  }
  if (xsdSimpleType.getName() != null) {
    allCustomTypeNames.remove(xsdSimpleType.getName());
  }
  comboCustomTypes.setInput(allCustomTypeNames);
  if (xsdSimpleType.getBaseType() != null) {
    comboCustomTypes.setSelection(new StructuredSelection(xsdSimpleType.getBaseType().getName()));
  }
  radCustomTypes.setSelection(!comboCustomTypes.getSelection().isEmpty());
  comboCustomTypes.addSelectionChangedListener(customChangedListener);
}","private void initUIContentsForComboCustomTypes(){
  comboCustomTypes.removeSelectionChangedListener(customChangedListener);
  List<String> allCustomTypeNames=null;
  if (xsdSimpleType.getSchema() != null) {
    allCustomTypeNames=Util.getAllCustomTypeNames(xsdSimpleType.getSchema());
  }
  if (xsdSimpleType.getName() != null && allCustomTypeNames != null) {
    allCustomTypeNames.remove(xsdSimpleType.getName());
  }
  if (allCustomTypeNames != null)   comboCustomTypes.setInput(allCustomTypeNames);
  if (xsdSimpleType.getBaseType() != null) {
    comboCustomTypes.setSelection(new StructuredSelection(xsdSimpleType.getBaseType().getName()));
  }
  radCustomTypes.setSelection(!comboCustomTypes.getSelection().isEmpty());
  comboCustomTypes.addSelectionChangedListener(customChangedListener);
}",0.7676240208877284
147803,"public String getText(Object obj){
  if (obj instanceof XSDElementDeclaration) {
    String name=((XSDElementDeclaration)obj).getName();
    if (((XSDElementDeclaration)obj).isAbstract())     name+=""String_Node_Str"";
    String tail=((XSDElementDeclaration)obj).getTargetNamespace() != null ? ""String_Node_Str"" + ((XSDElementDeclaration)obj).getTargetNamespace() : ""String_Node_Str"";
    return name + tail;
  }
  if (obj instanceof XSDParticle) {
    XSDParticle xsdParticle=(XSDParticle)obj;
    XSDParticleContent content=xsdParticle.getContent();
    XSDTerm xsdTerm=xsdParticle.getTerm();
    String name=""String_Node_Str"";
    if (content instanceof XSDElementDeclaration) {
      XSDElementDeclaration decl=(XSDElementDeclaration)content;
      name+=(decl.getName() == null ? ""String_Node_Str"" : decl.getName());
      if (decl.getTypeDefinition() == null) {
        name+=""String_Node_Str"" + ((XSDElementDeclaration)xsdTerm).getName() + ""String_Node_Str"";
      }
    }
 else     if (content instanceof XSDModelGroup) {
      if (xsdParticle.getContainer() instanceof XSDComplexTypeDefinition) {
        String ctdName=((XSDComplexTypeDefinition)xsdParticle.getContainer()).getName();
        name=(ctdName != null ? ctdName : ""String_Node_Str"");
      }
    }
 else {
      name=""String_Node_Str"";
    }
    if (!((xsdParticle.getMinOccurs() == 1) && (xsdParticle.getMaxOccurs() == 1))) {
      name+=""String_Node_Str"";
      name+=xsdParticle.getMinOccurs();
      name+=""String_Node_Str"";
      name+=(xsdParticle.getMaxOccurs() == -1) ? ""String_Node_Str"" : ""String_Node_Str"" + xsdParticle.getMaxOccurs();
      name+=""String_Node_Str"";
    }
    return name;
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    return getSimpleTypeDefinition((XSDSimpleTypeDefinition)obj);
  }
  if (obj instanceof XSDModelGroup) {
    XSDParticle particle=(XSDParticle)(((XSDModelGroup)obj).getContainer());
    String name=((XSDComplexTypeDefinition)particle.getContainer()).getName();
    if (name == null)     name=""String_Node_Str"";
    if (!((particle.getMinOccurs() == 1) && (particle.getMaxOccurs() == 1))) {
      name+=""String_Node_Str"";
      name+=particle.getMinOccurs();
      name+=""String_Node_Str"";
      name+=(particle.getMaxOccurs() == -1) ? ""String_Node_Str"" : ""String_Node_Str"" + particle.getMaxOccurs();
      name+=""String_Node_Str"";
    }
    String tail=particle.getSchema().getTargetNamespace() == null ? ""String_Node_Str"" : ""String_Node_Str"" + particle.getSchema().getTargetNamespace();
    return name + tail;
  }
  if (obj instanceof XSDFacet) {
    return ((XSDFacet)obj).getFacetName() + ""String_Node_Str"" + ((XSDFacet)obj).getLexicalValue();
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    return ((XSDIdentityConstraintDefinition)obj).getName();
  }
  if (obj instanceof XSDXPathDefinition) {
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    return xpath.getValue();
  }
  if (obj instanceof XSDAttributeGroupDefinition) {
    XSDAttributeGroupDefinition attributeGroupDefinition=(XSDAttributeGroupDefinition)obj;
    String name=(attributeGroupDefinition.getName() == null ? ""String_Node_Str"" : attributeGroupDefinition.getName());
    if (attributeGroupDefinition.getContents().size() == 0)     name+=""String_Node_Str"" + attributeGroupDefinition.getResolvedAttributeGroupDefinition().getName() + ""String_Node_Str"";
    return name;
  }
  if (obj instanceof XSDAttributeUse) {
    XSDAttributeUse attributeUse=(XSDAttributeUse)obj;
    String name=attributeUse.getAttributeDeclaration().getName();
    if (name == null)     name=""String_Node_Str"" + attributeUse.getAttributeDeclaration().getResolvedAttributeDeclaration().getName() + ""String_Node_Str"";
    return name;
  }
  if (obj instanceof XSDAnnotation) {
    return ""String_Node_Str"";
  }
  if (obj instanceof Element) {
    try {
      Element e=(Element)obj;
      if (e.getLocalName().equals(""String_Node_Str"")) {
        return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
      }
 else       if (e.getLocalName().equals(""String_Node_Str"")) {
        String source=e.getAttribute(""String_Node_Str"");
        if (source != null) {
          if (source.startsWith(""String_Node_Str"")) {
            return Util.iso2lang.get(source.substring(8).toLowerCase()) + ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.startsWith(""String_Node_Str"")) {
            return Util.iso2lang.get(source.substring(14).toLowerCase()) + ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.startsWith(""String_Node_Str"")) {
            return source.substring(2,7) + ""String_Node_Str"" + source.substring(8)+ ""String_Node_Str""+ e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.startsWith(""String_Node_Str"")) {
            return source + ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            String pattern=(String)e.getFirstChild().getUserData(""String_Node_Str"");
            if (pattern == null) {
              Element el=Util.parse(e.getChildNodes().item(0).getNodeValue()).getDocumentElement();
              if (el.getAttributes().getNamedItem(""String_Node_Str"") != null)               pattern=el.getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
            }
            return ""String_Node_Str"" + (pattern == null ? ""String_Node_Str"" : pattern);
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
          if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else {
            return source + ""String_Node_Str"" + Util.nodeToString((Element)obj);
          }
        }
 else {
          return Util.nodeToString((Element)obj);
        }
      }
 else {
        return Util.nodeToString((Element)obj);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  if (obj == null)   return ""String_Node_Str"";
  return ""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ obj.toString();
}","public String getText(Object obj){
  if (obj instanceof XSDElementDeclaration) {
    String name=((XSDElementDeclaration)obj).getName();
    if (((XSDElementDeclaration)obj).isAbstract())     name+=""String_Node_Str"";
    String tail=((XSDElementDeclaration)obj).getTargetNamespace() != null ? ""String_Node_Str"" + ((XSDElementDeclaration)obj).getTargetNamespace() : ""String_Node_Str"";
    return name + tail;
  }
  if (obj instanceof XSDParticle) {
    XSDParticle xsdParticle=(XSDParticle)obj;
    XSDParticleContent content=xsdParticle.getContent();
    XSDTerm xsdTerm=xsdParticle.getTerm();
    String name=""String_Node_Str"";
    if (content instanceof XSDElementDeclaration) {
      XSDElementDeclaration decl=(XSDElementDeclaration)content;
      name+=(decl.getName() == null ? ""String_Node_Str"" : decl.getName());
      if (decl.getTypeDefinition() == null) {
        name+=""String_Node_Str"" + ((XSDElementDeclaration)xsdTerm).getName() + ""String_Node_Str"";
      }
    }
 else     if (content instanceof XSDModelGroup) {
      if (xsdParticle.getContainer() instanceof XSDComplexTypeDefinition) {
        String ctdName=((XSDComplexTypeDefinition)xsdParticle.getContainer()).getName();
        name=(ctdName != null ? ctdName : ""String_Node_Str"");
      }
    }
 else {
      name=""String_Node_Str"";
    }
    if (!((xsdParticle.getMinOccurs() == 1) && (xsdParticle.getMaxOccurs() == 1))) {
      name+=""String_Node_Str"";
      name+=xsdParticle.getMinOccurs();
      name+=""String_Node_Str"";
      name+=(xsdParticle.getMaxOccurs() == -1) ? ""String_Node_Str"" : ""String_Node_Str"" + xsdParticle.getMaxOccurs();
      name+=""String_Node_Str"";
    }
    return name;
  }
  if (obj instanceof XSDSimpleTypeDefinition) {
    return getSimpleTypeDefinition((XSDSimpleTypeDefinition)obj);
  }
  if (obj instanceof XSDModelGroup) {
    XSDParticle particle=(XSDParticle)(((XSDModelGroup)obj).getContainer());
    String name=((XSDComplexTypeDefinition)particle.getContainer()).getName();
    if (name == null)     name=""String_Node_Str"";
    if (!((particle.getMinOccurs() == 1) && (particle.getMaxOccurs() == 1))) {
      name+=""String_Node_Str"";
      name+=particle.getMinOccurs();
      name+=""String_Node_Str"";
      name+=(particle.getMaxOccurs() == -1) ? ""String_Node_Str"" : ""String_Node_Str"" + particle.getMaxOccurs();
      name+=""String_Node_Str"";
    }
    XSDSchema schema=particle.getSchema();
    String tail=""String_Node_Str"";
    if (schema != null && schema.getTargetNamespace() != null) {
      tail=""String_Node_Str"" + schema.getTargetNamespace();
    }
    return name + tail;
  }
  if (obj instanceof XSDFacet) {
    return ((XSDFacet)obj).getFacetName() + ""String_Node_Str"" + ((XSDFacet)obj).getLexicalValue();
  }
  if (obj instanceof XSDIdentityConstraintDefinition) {
    return ((XSDIdentityConstraintDefinition)obj).getName();
  }
  if (obj instanceof XSDXPathDefinition) {
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    return xpath.getValue();
  }
  if (obj instanceof XSDAttributeGroupDefinition) {
    XSDAttributeGroupDefinition attributeGroupDefinition=(XSDAttributeGroupDefinition)obj;
    String name=(attributeGroupDefinition.getName() == null ? ""String_Node_Str"" : attributeGroupDefinition.getName());
    if (attributeGroupDefinition.getContents().size() == 0)     name+=""String_Node_Str"" + attributeGroupDefinition.getResolvedAttributeGroupDefinition().getName() + ""String_Node_Str"";
    return name;
  }
  if (obj instanceof XSDAttributeUse) {
    XSDAttributeUse attributeUse=(XSDAttributeUse)obj;
    String name=attributeUse.getAttributeDeclaration().getName();
    if (name == null)     name=""String_Node_Str"" + attributeUse.getAttributeDeclaration().getResolvedAttributeDeclaration().getName() + ""String_Node_Str"";
    return name;
  }
  if (obj instanceof XSDAnnotation) {
    return ""String_Node_Str"";
  }
  if (obj instanceof Element) {
    try {
      Element e=(Element)obj;
      if (e.getLocalName().equals(""String_Node_Str"")) {
        return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
      }
 else       if (e.getLocalName().equals(""String_Node_Str"")) {
        String source=e.getAttribute(""String_Node_Str"");
        if (source != null) {
          if (source.startsWith(""String_Node_Str"")) {
            return Util.iso2lang.get(source.substring(8).toLowerCase()) + ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.startsWith(""String_Node_Str"")) {
            return Util.iso2lang.get(source.substring(14).toLowerCase()) + ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.startsWith(""String_Node_Str"")) {
            return source.substring(2,7) + ""String_Node_Str"" + source.substring(8)+ ""String_Node_Str""+ e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.startsWith(""String_Node_Str"")) {
            return source + ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            String pattern=(String)e.getFirstChild().getUserData(""String_Node_Str"");
            if (pattern == null) {
              Element el=Util.parse(e.getChildNodes().item(0).getNodeValue()).getDocumentElement();
              if (el.getAttributes().getNamedItem(""String_Node_Str"") != null)               pattern=el.getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
            }
            return ""String_Node_Str"" + (pattern == null ? ""String_Node_Str"" : pattern);
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else           if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
          if (source.equals(""String_Node_Str"")) {
            return ""String_Node_Str"" + e.getChildNodes().item(0).getNodeValue();
          }
 else {
            return source + ""String_Node_Str"" + Util.nodeToString((Element)obj);
          }
        }
 else {
          return Util.nodeToString((Element)obj);
        }
      }
 else {
        return Util.nodeToString((Element)obj);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  if (obj == null)   return ""String_Node_Str"";
  return ""String_Node_Str"" + obj.getClass().getName() + ""String_Node_Str""+ obj.toString();
}",0.988347098088019
147804,"public static List<Object> getTopParent(Object son){
  if (!((son instanceof XSDElementDeclaration) || (son instanceof XSDParticle))) {
    return null;
  }
  XSDElementDeclaration elem=null;
  elem=(XSDElementDeclaration)son;
  EList<XSDSchemaContent> parentList=elem.getSchema().getContents();
  ArrayList<Object> list=new ArrayList<Object>();
  for (  XSDSchemaContent top : parentList) {
    list.clear();
    if (!(top instanceof XSDElementDeclaration)) {
      continue;
    }
    if (top instanceof XSDElementDeclaration) {
      XSDElementDeclaration decl=(XSDElementDeclaration)top;
      if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
        String primaryKey=getTopElement(decl,elem,(XSDComplexTypeDefinition)decl.getTypeDefinition());
        if (!""String_Node_Str"".equalsIgnoreCase(primaryKey)) {
          EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
          for (          XSDIdentityConstraintDefinition idty : idtylist) {
            EList<XSDXPathDefinition> fields=idty.getFields();
            for (            XSDXPathDefinition path : fields) {
              if ((path.getValue()).equals(primaryKey)) {
                list.add(idty);
                list.add(path);
                return list;
              }
            }
          }
        }
      }
    }
  }
  return null;
}","public static List<Object> getTopParent(Object son){
  if (!((son instanceof XSDElementDeclaration) || (son instanceof XSDParticle))) {
    return null;
  }
  XSDElementDeclaration elem=null;
  elem=(XSDElementDeclaration)son;
  if (elem.getSchema() == null)   return null;
  EList<XSDSchemaContent> parentList=elem.getSchema().getContents();
  ArrayList<Object> list=new ArrayList<Object>();
  for (  XSDSchemaContent top : parentList) {
    list.clear();
    if (!(top instanceof XSDElementDeclaration)) {
      continue;
    }
    if (top instanceof XSDElementDeclaration) {
      XSDElementDeclaration decl=(XSDElementDeclaration)top;
      if (decl.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
        String primaryKey=getTopElement(decl,elem,(XSDComplexTypeDefinition)decl.getTypeDefinition());
        if (!""String_Node_Str"".equalsIgnoreCase(primaryKey)) {
          EList<XSDIdentityConstraintDefinition> idtylist=decl.getIdentityConstraintDefinitions();
          for (          XSDIdentityConstraintDefinition idty : idtylist) {
            EList<XSDXPathDefinition> fields=idty.getFields();
            for (            XSDXPathDefinition path : fields) {
              if ((path.getValue()).equals(primaryKey)) {
                list.add(idty);
                list.add(path);
                return list;
              }
            }
          }
        }
      }
    }
  }
  return null;
}",0.983160157649588
147805,"public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(Messages.Deploy_text + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Deploy_successfully_text);
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Create_successfully_text);
      }
 else       return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName);
    }
 catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,Messages.Deploy_notSupport_text + ""String_Node_Str"" + objectName+ ""String_Node_Str"");
  }
}","public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(Messages.Deploy_text + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Deploy_successfully_text);
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Create_successfully_text);
      }
 else       return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName);
    }
 catch (    OperationCanceledException e) {
      return DeployStatus.getInfoStatus(this,Messages.Deploy_cancel_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str"");
    }
catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,Messages.Deploy_notSupport_text + ""String_Node_Str"" + objectName+ ""String_Node_Str"");
  }
}",0.8795966785290629
147806,"public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(Messages.Deploy_text + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Deploy_successfully_text);
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Create_successfully_text);
      }
 else       return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName);
    }
 catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,Messages.Deploy_notSupport_text + ""String_Node_Str"" + objectName+ ""String_Node_Str"");
  }
}","public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(Messages.Deploy_text + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Deploy_successfully_text);
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Create_successfully_text);
      }
 else       return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName);
    }
 catch (    OperationCanceledException e) {
      return DeployStatus.getInfoStatus(this,Messages.Deploy_cancel_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str"");
    }
catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,Messages.Deploy_notSupport_text + ""String_Node_Str"" + objectName+ ""String_Node_Str"");
  }
}",0.8795966785290629
147807,"public static boolean createServerDef(MDMServerDef serverDef){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  RepositoryContext context=factory.getRepositoryContext();
  MDMServerDefItem item=MdmpropertiesFactory.eINSTANCE.createMDMServerDefItem();
  item.setServerDef(serverDef);
  Property prop=PropertiesFactory.eINSTANCE.createProperty();
  item.setProperty(prop);
  try {
    String nextId=factory.getNextId();
    Property property=item.getProperty();
    property.setId(nextId);
    property.setVersion(VersionUtils.DEFAULT_VERSION);
    property.setAuthor(context.getUser());
    property.setLabel(item.getServerDef().getName());
    factory.create(item,new Path(""String_Node_Str""));
    return true;
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return false;
}","public static String createServerDef(MDMServerDef serverDef){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  RepositoryContext context=factory.getRepositoryContext();
  MDMServerDefItem item=MdmpropertiesFactory.eINSTANCE.createMDMServerDefItem();
  item.setServerDef(serverDef);
  Property prop=PropertiesFactory.eINSTANCE.createProperty();
  item.setProperty(prop);
  try {
    String nextId=factory.getNextId();
    Property property=item.getProperty();
    property.setId(nextId);
    property.setVersion(VersionUtils.DEFAULT_VERSION);
    property.setAuthor(context.getUser());
    property.setLabel(item.getServerDef().getName());
    factory.create(item,new Path(""String_Node_Str""));
    return nextId;
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return null;
}",0.876905041031653
147808,"/** 
 * Warning: the return result is a encrypted List
 * @return
 */
public static List<IRepositoryViewObject> getAllServerDefViewObjects(){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    return factory.getAll(REPOSITORY_TYPE_SERVER_DEF);
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return null;
}","/** 
 * Warning: the return result is a encrypted List
 * @return
 */
public static List<IRepositoryViewObject> getAllServerDefViewObjects(){
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<IRepositoryViewObject> viewObjects=factory.getAll(REPOSITORY_TYPE_SERVER_DEF);
    if (viewObjects != null) {
      for (      IRepositoryViewObject viewObj : viewObjects) {
        if (tmpPasswordCache.containsKey(viewObj.getId())) {
          String tmpPasswd=tmpPasswordCache.get(viewObj.getId());
          Item item=viewObj.getProperty().getItem();
          MDMServerDef serverDef=((MDMServerDefItem)item).getServerDef();
          if (serverDef != null) {
            serverDef.setTempPasswd(tmpPasswd);
          }
        }
      }
      return viewObjects;
    }
    return null;
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return null;
}",0.5804511278195489
147809,"@Override public void widgetSelected(SelectionEvent e){
  passwordText.setText(""String_Node_Str"");
}","@Override public void widgetSelected(SelectionEvent e){
}",0.7261146496815286
147810,"public ServerDefDialog(Shell parentShell,MDMServerDef serverDef,boolean needDecrypted){
  this(parentShell,serverDef);
  this.needDecrypted=needDecrypted;
}","/** 
 * Create the dialog.
 * @param parentShell
 */
public ServerDefDialog(Shell parentShell,MDMServerDef serverDef){
  super(parentShell);
  this.serverDef=serverDef;
  isUpdateServerDef=serverDef != null;
  if (isUpdateServerDef) {
    newName=serverDef.getName();
  }
 else {
    this.serverDef=MdmmetadataFactory.eINSTANCE.createMDMServerDef();
  }
  isEnterprise=Util.IsEnterPrise();
}",0.2449725776965265
147811,"/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  if (isUpdateServerDef) {
    setTitle(Messages.ServerDefDialog_UpdateServer);
  }
 else {
    setTitle(Messages.ServerDefDialog_AddServer);
    this.serverDef=MdmmetadataFactory.eINSTANCE.createMDMServerDef();
  }
  Composite area=(Composite)super.createDialogArea(parent);
  Composite container=new Composite(area,SWT.NONE);
  container.setLayout(new GridLayout(2,false));
  container.setLayoutData(new GridData(GridData.FILL_BOTH));
  new Label(container,SWT.NONE).setText(Messages.ServerDefDialog_Name);
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  nameText.setFocus();
  new Label(container,SWT.NONE).setText(Messages.ServerDefDialog_Server);
  urlText=new Text(container,SWT.BORDER);
  urlText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  Group grpAuthentication=new Group(container,SWT.NONE);
  grpAuthentication.setText(Messages.ServerDefDialog_Authentication);
  grpAuthentication.setLayout(new GridLayout(2,false));
  GridData gd_grpAuthentication=new GridData(SWT.FILL,SWT.CENTER,true,false,2,1);
  gd_grpAuthentication.widthHint=439;
  grpAuthentication.setLayoutData(gd_grpAuthentication);
  new Label(grpAuthentication,SWT.NONE).setText(Messages.ServerDefDialog_UserName);
  userNameText=new Text(grpAuthentication,SWT.BORDER);
  userNameText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  new Label(grpAuthentication,SWT.NONE).setText(Messages.ServerDefDialog_Password);
  passwordText=new Text(grpAuthentication,SWT.BORDER | SWT.PASSWORD);
  passwordText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  sharePwdBtn=new Button(grpAuthentication,SWT.CHECK);
  sharePwdBtn.setText(Messages.SharePassword);
  sharePwdBtn.setToolTipText(Messages.OnlyApplicableShared);
  sharePwdBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      passwordText.setText(""String_Node_Str"");
    }
  }
);
  if (isLocalMode()) {
    sharePwdBtn.setEnabled(false);
    sharePwdBtn.setText(Messages.SharePassword);
    sharePwdBtn.setToolTipText(Messages.OnlyApplicableShared);
  }
  if (isEnterprise) {
    new Label(container,SWT.NONE).setText(Messages.ServerDefDialog_Version);
    universeCombo=new Combo(container,SWT.NONE);
    universeCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  }
  initValue();
  initListener();
  return area;
}","/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  if (isUpdateServerDef) {
    setTitle(Messages.ServerDefDialog_UpdateServer);
  }
 else {
    setTitle(Messages.ServerDefDialog_AddServer);
    this.serverDef=MdmmetadataFactory.eINSTANCE.createMDMServerDef();
  }
  Composite area=(Composite)super.createDialogArea(parent);
  Composite container=new Composite(area,SWT.NONE);
  container.setLayout(new GridLayout(2,false));
  container.setLayoutData(new GridData(GridData.FILL_BOTH));
  new Label(container,SWT.NONE).setText(Messages.ServerDefDialog_Name);
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  nameText.setFocus();
  new Label(container,SWT.NONE).setText(Messages.ServerDefDialog_Server);
  urlText=new Text(container,SWT.BORDER);
  urlText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  Group grpAuthentication=new Group(container,SWT.NONE);
  grpAuthentication.setText(Messages.ServerDefDialog_Authentication);
  grpAuthentication.setLayout(new GridLayout(2,false));
  GridData gd_grpAuthentication=new GridData(SWT.FILL,SWT.CENTER,true,false,2,1);
  gd_grpAuthentication.widthHint=439;
  grpAuthentication.setLayoutData(gd_grpAuthentication);
  new Label(grpAuthentication,SWT.NONE).setText(Messages.ServerDefDialog_UserName);
  userNameText=new Text(grpAuthentication,SWT.BORDER);
  userNameText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  new Label(grpAuthentication,SWT.NONE).setText(Messages.ServerDefDialog_Password);
  passwordText=new Text(grpAuthentication,SWT.BORDER | SWT.PASSWORD);
  passwordText.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  sharePwdBtn=new Button(grpAuthentication,SWT.CHECK);
  sharePwdBtn.setText(Messages.SharePassword);
  sharePwdBtn.setToolTipText(Messages.OnlyApplicableShared);
  sharePwdBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
    }
  }
);
  if (isLocalMode()) {
    sharePwdBtn.setEnabled(false);
    sharePwdBtn.setText(Messages.SharePassword);
    sharePwdBtn.setToolTipText(Messages.OnlyApplicableShared);
  }
  if (isEnterprise) {
    new Label(container,SWT.NONE).setText(Messages.ServerDefDialog_Version);
    universeCombo=new Combo(container,SWT.NONE);
    universeCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  }
  initValue();
  initListener();
  return area;
}",0.9908185192420396
147812,"public void modifyText(ModifyEvent e){
  serverDef.setUniverse(universeCombo.getText().trim());
}","public void modifyText(ModifyEvent e){
  newUniverse=universeCombo.getText().trim();
}",0.907103825136612
147813,"private boolean validateInput(){
  if (newName.length() == 0) {
    setErrorMessage(Messages.ServerDefDialog_NameCanNotBeEmpty);
    nameText.setFocus();
    return false;
  }
  if (ServerDefService.isExistServerDefName(newName)) {
    if ((!isUpdateServerDef) || (isUpdateServerDef() && (!serverDef.getName().equalsIgnoreCase(newName)))) {
      setErrorMessage(Messages.ServerDefDialog_SameName);
      nameText.setFocus();
      return false;
    }
  }
  if (urlText.getText().trim().length() == 0) {
    setErrorMessage(Messages.ServerDefDialog_ServerCanNotBeEmpty);
    urlText.setFocus();
    return false;
  }
  if (!serverDef.validate(serverDef.getUrl())) {
    setErrorMessage(Messages.ServerDefDialog_ServerInvalid);
    urlText.setFocus();
    return false;
  }
  if (serverDef.getUser().length() == 0) {
    setErrorMessage(Messages.ServerDefDialog_UsernameCanNotBeEmpty);
    userNameText.setFocus();
    return false;
  }
  if (serverDef.getPasswd().length() == 0 && (serverDef.getTempPasswd() != null && serverDef.getTempPasswd().length() == 0)) {
    setErrorMessage(Messages.ServerDefDialog_PasswordCanNotBeEmpty);
    passwordText.setFocus();
    return false;
  }
  setErrorMessage(null);
  return true;
}","private boolean validateInput(){
  if (newName.length() == 0) {
    setErrorMessage(Messages.ServerDefDialog_NameCanNotBeEmpty);
    nameText.setFocus();
    return false;
  }
  if (ServerDefService.isExistServerDefName(newName)) {
    if ((!isUpdateServerDef) || (isUpdateServerDef() && (!serverDef.getName().equalsIgnoreCase(newName)))) {
      setErrorMessage(Messages.ServerDefDialog_SameName);
      nameText.setFocus();
      return false;
    }
  }
  if (newUrl == null || newUrl.length() == 0) {
    setErrorMessage(Messages.ServerDefDialog_ServerCanNotBeEmpty);
    urlText.setFocus();
    return false;
  }
  if (!serverDef.validate(newUrl)) {
    setErrorMessage(Messages.ServerDefDialog_ServerInvalid);
    urlText.setFocus();
    return false;
  }
  if (newUserName == null || newUserName.length() == 0) {
    setErrorMessage(Messages.ServerDefDialog_UsernameCanNotBeEmpty);
    userNameText.setFocus();
    return false;
  }
  if (newPassword == null || newPassword.length() == 0) {
    setErrorMessage(Messages.ServerDefDialog_PasswordCanNotBeEmpty);
    passwordText.setFocus();
    return false;
  }
  setErrorMessage(null);
  return true;
}",0.7128463476070529
147814,"private void initValue(){
  nameText.setText(serverDef.getName());
  urlText.setText(serverDef.getUrl());
  userNameText.setText(serverDef.getUser());
  if (isLocalMode() && !(serverDef.getName().equals(""String_Node_Str""))) {
    String decryptedPassword=PasswordUtil.decryptPassword(serverDef.getPasswd());
    passwordText.setText(decryptedPassword);
  }
 else {
    passwordText.setText(serverDef.getPasswd());
  }
  if (!isLocalMode() && (!serverDef.getPasswd().equals(""String_Node_Str""))) {
    String decryptedPassword=PasswordUtil.decryptPassword(serverDef.getPasswd());
    passwordText.setText(decryptedPassword);
  }
  if (serverDef.getPasswd().equals(""String_Node_Str"") && serverDef.getTempPasswd() != null) {
    passwordText.setText(serverDef.getTempPasswd());
  }
  sharePwdBtn.setSelection(!serverDef.getPasswd().equals(""String_Node_Str""));
  if (serverDef.getName().equals(""String_Node_Str"")) {
    sharePwdBtn.setSelection(true);
  }
  if (Util.IsEnterPrise()) {
    universeCombo.setText(serverDef.getUniverse());
  }
}","private void initValue(){
  newName=serverDef.getName();
  nameText.setText(newName);
  newUrl=serverDef.getUrl();
  urlText.setText(newUrl);
  newUserName=serverDef.getUser();
  userNameText.setText(newUserName);
  String passwd=serverDef.getPasswd();
  if (passwd != null && passwd.length() > 0) {
    passwordText.setText(PasswordUtil.decryptPassword(passwd));
    sharePwdBtn.setSelection(true);
  }
 else {
    if (isLocalMode()) {
      passwordText.setText(""String_Node_Str"");
      sharePwdBtn.setSelection(true);
    }
 else {
      passwd=serverDef.getTempPasswd();
      if (passwd != null && passwd.length() > 0) {
        passwordText.setText(passwd);
      }
 else {
        passwordText.setText(""String_Node_Str"");
      }
      sharePwdBtn.setSelection(false);
    }
  }
  newPassword=passwordText.getText().trim();
  if (Util.IsEnterPrise()) {
    newUniverse=serverDef.getUniverse();
    universeCombo.setText(newUniverse);
  }
  if (!isUpdateServerDef) {
    sharePwdBtn.setSelection(true);
  }
}",0.2446393762183235
147815,"private void initListener(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      newName=nameText.getText().trim();
    }
  }
);
  urlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      serverDef.setUrl(urlText.getText().trim());
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      serverDef.setUser(userNameText.getText().trim());
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      serverDef.setPasswd(passwordText.getText().trim());
      needDecrypted=false;
    }
  }
);
  if (isEnterprise) {
    universeCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        serverDef.setUniverse(universeCombo.getText().trim());
      }
    }
);
    FocusListener listener=new FocusAdapter(){
      @Override public void focusLost(      FocusEvent e){
        updateUniverseValues();
      }
    }
;
    urlText.addFocusListener(listener);
    userNameText.addFocusListener(listener);
    passwordText.addFocusListener(listener);
  }
}","private void initListener(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      newName=nameText.getText().trim();
    }
  }
);
  urlText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      newUrl=urlText.getText().trim();
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      newUserName=userNameText.getText().trim();
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      newPassword=passwordText.getText().trim();
    }
  }
);
  if (isEnterprise) {
    universeCombo.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        newUniverse=universeCombo.getText().trim();
      }
    }
);
    FocusListener listener=new FocusAdapter(){
      @Override public void focusLost(      FocusEvent e){
        updateUniverseValues();
      }
    }
;
    urlText.addFocusListener(listener);
    userNameText.addFocusListener(listener);
    passwordText.addFocusListener(listener);
  }
}",0.8130563798219584
147816,"@Override protected void buttonPressed(int buttonId){
  if (buttonId == IDialogConstants.OK_ID) {
    if (!validateInput())     return;
    serverDef.parse(urlText.getText());
    serverDef.setName(nameText.getText());
    String encryptedPassword=PasswordUtil.encryptPassword(passwordText.getText());
    serverDef.setPasswd(encryptedPassword);
    if (!isLocalMode() && (!sharePwdBtn.getSelection())) {
      serverDef.setPasswd(""String_Node_Str"");
      serverDef.setTempPasswd(passwordText.getText());
    }
  }
  if (buttonId == CHECK_CONNECTION_ID) {
    if (!validateInput())     return;
    boolean check=false;
    String msg=null;
    if (needDecrypted) {
      MDMServerDef serverDefinition=serverDef.getDecryptedServerDef();
      check=ServerDefService.checkMDMConnection(serverDefinition);
      msg=check ? Messages.ServerExplorer_ConnectSuccessful : Messages.ServerExplorer_ConnectFailed;
    }
 else {
      check=ServerDefService.checkMDMConnection(serverDef);
      msg=check ? Messages.ServerExplorer_ConnectSuccessful : Messages.ServerExplorer_ConnectFailed;
    }
    if (check) {
      setMessage(msg);
    }
 else {
      setErrorMessage(msg);
    }
  }
  super.buttonPressed(buttonId);
}","@Override protected void buttonPressed(int buttonId){
  if (buttonId == IDialogConstants.OK_ID) {
    if (!validateInput())     return;
    updateUI2Model(serverDef);
  }
  if (buttonId == CHECK_CONNECTION_ID) {
    if (!validateInput())     return;
    boolean check=false;
    String msg=null;
    MDMServerDef tmpServerDef=MdmmetadataFactory.eINSTANCE.createMDMServerDef();
    updateUI2Model(tmpServerDef);
    check=ServerDefService.checkMDMConnection(tmpServerDef.getDecryptedServerDef());
    msg=check ? Messages.ServerExplorer_ConnectSuccessful : Messages.ServerExplorer_ConnectFailed;
    if (check) {
      setMessage(msg);
    }
 else {
      setErrorMessage(msg);
    }
  }
  super.buttonPressed(buttonId);
}",0.5442317640972582
147817,"private void multiCopy(){
  StringBuilder result=new StringBuilder();
  List<Object> selectedObject=getSelectedObject();
  for (  Object obj : selectedObject) {
    IRepositoryViewObject viewObject=(IRepositoryViewObject)obj;
    Item item=viewObject.getProperty().getItem();
    String fileExtension=((WSResourceItem)item).getResource().getFileExtension();
    String fileName=viewObject.getLabel();
    String version=viewObject.getVersion();
    String repositoryName=fileName + ""String_Node_Str"" + version+ ""String_Node_Str""+ fileExtension;
    MDMServerDef serverDef=RepositoryResourceUtil.getLastServerDef(viewObject);
    if (serverDef == null)     continue;
    String uripre=""String_Node_Str"" + serverDef.getHost() + ""String_Node_Str""+ serverDef.getPort();
    result.append(uripre);
    result.append(""String_Node_Str"" + repositoryName);
    result.append(""String_Node_Str"");
  }
  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
  StringSelection text=new StringSelection(result.toString());
  clipboard.setContents(text,null);
}","private void multiCopy(){
  StringBuilder result=new StringBuilder();
  List<Object> selectedObject=getSelectedObject();
  for (  Object obj : selectedObject) {
    IRepositoryViewObject viewObject=(IRepositoryViewObject)obj;
    Item item=viewObject.getProperty().getItem();
    WSResourceE wsItem=null;
    if (!(item instanceof WSResourceItem)) {
      continue;
    }
    wsItem=((WSResourceItem)item).getResource();
    String catalog=wsItem.getImageCatalog();
    if (catalog == null)     continue;
    String fileName=viewObject.getLabel() + '.' + wsItem.getFileExtension();
    MDMServerDef serverDef=RepositoryResourceUtil.getLastServerDef(viewObject);
    if (serverDef == null)     continue;
    String uripre=""String_Node_Str"" + serverDef.getHost() + ':'+ serverDef.getPort();
    result.append(uripre);
    result.append(""String_Node_Str"" + catalog + '/'+ fileName);
    result.append('\n');
  }
  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
  StringSelection text=new StringSelection(result.toString());
  clipboard.setContents(text,null);
}",0.4657022865142324
147818,"/** 
 * DOC hbhong Comment method ""getUniqueName"".
 * @param treeObj
 * @return
 */
private String getUniqueName(TreeObject treeObj,String name){
  int type=treeObj.getType();
  if (type == TreeObject.PICTURES_RESOURCE) {
    if (name == null) {
      name=treeObj.getName();
    }
    String[] fileInfo=getPicResourceFileInfo(name);
    if (fileInfo != null) {
      return fileInfo[3] + ""String_Node_Str"" + fileInfo[2];
    }
  }
  if (type == TreeObject.WORKFLOW_PROCESS) {
    WSWorkflowProcessDefinitionUUID wsKey=(WSWorkflowProcessDefinitionUUID)treeObj.getWsKey();
    return wsKey.getProcessName();
  }
  return treeObj.getName();
}","/** 
 * DOC hbhong Comment method ""getUniqueName"".
 * @param treeObj
 * @return
 */
private String getUniqueName(TreeObject treeObj,String name){
  int type=treeObj.getType();
  if (type == TreeObject.PICTURES_RESOURCE) {
    if (name == null) {
      name=treeObj.getName();
    }
    String[] fileInfo=getPicResourceFileInfo(name);
    if (fileInfo != null) {
      return fileInfo[3];
    }
  }
  if (type == TreeObject.WORKFLOW_PROCESS) {
    WSWorkflowProcessDefinitionUUID wsKey=(WSWorkflowProcessDefinitionUUID)treeObj.getWsKey();
    return wsKey.getProcessName();
  }
  return treeObj.getName();
}",0.9727126805778492
147819,"protected void okPressed(){
  typeName=conceptPanel.getText();
  superTypeName=conceptPanel.getSuperName();
  isAbstract=conceptPanel.isAbstract();
  setReturnCode(OK);
}","protected void okPressed(){
  typeName=conceptPanel.getText();
  superTypeName=conceptPanel.getSuperName();
  isAbstract=conceptPanel.isAbstract();
  if (superTypeName.equals(typeName)) {
    MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    setReturnCode(CANCEL);
    return;
  }
  setReturnCode(OK);
}",0.6367041198501873
147820,"protected void okPressed(){
  typeName=conceptPanel.getText();
  superTypeName=conceptPanel.getSuperName();
  isAbstract=conceptPanel.isAbstract();
  setReturnCode(OK);
}","protected void okPressed(){
  typeName=conceptPanel.getText();
  superTypeName=conceptPanel.getSuperName();
  isAbstract=conceptPanel.isAbstract();
  if (superTypeName.equals(typeName)) {
    MessageDialog.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    setReturnCode(CANCEL);
    return;
  }
  setReturnCode(OK);
}",0.6367041198501873
147821,"private static List<XSDTypeDefinition> getParentTypes(XSDTypeDefinition type,List<XSDTypeDefinition> results){
  XSDTypeDefinition baseType=type.getBaseType();
  if (!results.contains(baseType))   results.add(baseType);
  if (baseType == null || baseType.equals(type.getSchema().resolveTypeDefinition(type.getSchema().getSchemaForSchemaNamespace(),""String_Node_Str"")))   return results;
  return getParentTypes(baseType,results);
}","private static List<XSDTypeDefinition> getParentTypes(XSDTypeDefinition type,List<XSDTypeDefinition> results){
  XSDTypeDefinition baseType=type.getBaseType();
  if (baseType == type.getBaseType()) {
    return results;
  }
  if (!results.contains(baseType))   results.add(baseType);
  if (baseType == null || baseType.equals(type.getSchema().resolveTypeDefinition(type.getSchema().getSchemaForSchemaNamespace(),""String_Node_Str"")))   return results;
  return getParentTypes(baseType,results);
}",0.9308855291576674
147822,"/** 
 * DOC hcw Comment method ""removeSelectedText"".
 */
private void removeSelectedText(){
  if (control instanceof Text) {
    Text text=((Text)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
      insertionPos=text.getSelection().x;
    }
  }
 else   if (control instanceof StyledText) {
    StyledText text=((StyledText)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
      insertionPos=text.getSelection().x;
    }
  }
}","/** 
 * DOC hcw Comment method ""removeSelectedText"".
 */
private void removeSelectedText(){
  if (control instanceof Text) {
    Text text=((Text)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
    }
  }
 else   if (control instanceof StyledText) {
    StyledText text=((StyledText)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
    }
  }
}",0.9379615952732644
147823,"private void proposalAccepted(IContentProposal proposal){
  final Object[] listenerArray=proposalListeners.getListeners();
  for (int i=0; i < listenerArray.length; i++) {
    if (listenerArray[i] instanceof IContentProposalExtendedListener) {
      ((IContentProposalExtendedListener)listenerArray[i]).proposalBeforeModifyControl(proposal);
    }
  }
  if (controlContentAdapter instanceof IControlContentAdapterExtended) {
    ((IControlContentAdapterExtended)controlContentAdapter).setUsedFilterValue(filterText);
  }
  removeSelectedText();
switch (proposalAcceptanceStyle) {
case (PROPOSAL_REPLACE):
    setControlContent(proposal.getContent(),proposal.getCursorPosition());
  break;
case (PROPOSAL_INSERT):
insertControlContent(proposal.getContent(),proposal.getCursorPosition());
break;
default :
break;
}
for (int i=0; i < listenerArray.length; i++) {
((IContentProposalListener)listenerArray[i]).proposalAccepted(proposal);
}
}","private void proposalAccepted(IContentProposal proposal){
  final Object[] listenerArray=proposalListeners.getListeners();
  for (int i=0; i < listenerArray.length; i++) {
    if (listenerArray[i] instanceof IContentProposalExtendedListener) {
      ((IContentProposalExtendedListener)listenerArray[i]).proposalBeforeModifyControl(proposal);
    }
  }
  if (controlContentAdapter instanceof IControlContentAdapterExtended) {
    ((IControlContentAdapterExtended)controlContentAdapter).setUsedFilterValue(filterText);
  }
switch (proposalAcceptanceStyle) {
case (PROPOSAL_REPLACE):
    setControlContent(proposal.getContent(),proposal.getCursorPosition());
  break;
case (PROPOSAL_INSERT):
insertControlContent(proposal.getContent(),proposal.getCursorPosition());
break;
default :
break;
}
for (int i=0; i < listenerArray.length; i++) {
((IContentProposalListener)listenerArray[i]).proposalAccepted(proposal);
}
}",0.987012987012987
147824,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      String tValue=value.toString().trim();
      if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(tValue)) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=tValue.indexOf(BROWSE_ITEMS);
        if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
          elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
        }
        browseItemToRoles.put(tValue,lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      applyChangeToRoles();
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (selection.size() > 1) {
        List selectObjs=selection.toList();
        refreshRoleView(selectObjs);
        UpdateComplexViewButton(true);
      }
 else       if (selection.size() == 1) {
        XSDElementDeclaration decl=(XSDElementDeclaration)selection.getFirstElement();
        refreshRoleView(BROWSE_ITEMS + decl.getName());
        UpdateComplexViewButton(true);
      }
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  if (Util.IsEnterPrise()) {
    Label infoLabel=new Label(composite,SWT.NONE);
    infoLabel.setText(""String_Node_Str"");
    ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
    ruleColumn.setColumnWidth(250);
    List<String> roles=getAllRoleNames();
    ruleColumn.setComboValues(roles.toArray(new String[]{}));
    ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
    acsColumn.setColumnWidth(250);
    acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
    complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),WidgetFactory.getWidgetFactory(),composite);
    complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
    complexTableViewer.create();
    complexTableViewer.getViewer().setInput(new ArrayList<Line>());
    UpdateComplexViewButton(false);
  }
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      String tValue=value.toString().trim();
      if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
        MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
      if (!value.toString().startsWith(BROWSE_ITEMS)) {
        MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + BROWSE_ITEMS);
        return;
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(tValue)) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
            MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=tValue.indexOf(BROWSE_ITEMS);
        if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
          elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
        }
        browseItemToRoles.put(tValue,lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      applyChangeToRoles();
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (selection.size() > 1) {
        List selectObjs=selection.toList();
        refreshRoleView(selectObjs);
        UpdateComplexViewButton(true);
      }
 else       if (selection.size() == 1) {
        XSDElementDeclaration decl=(XSDElementDeclaration)selection.getFirstElement();
        refreshRoleView(BROWSE_ITEMS + decl.getName());
        UpdateComplexViewButton(true);
      }
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  if (Util.IsEnterPrise()) {
    Label infoLabel=new Label(composite,SWT.NONE);
    infoLabel.setText(Messages.getString(""String_Node_Str""));
    ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
    ruleColumn.setColumnWidth(250);
    List<String> roles=getAllRoleNames();
    ruleColumn.setComboValues(roles.toArray(new String[]{}));
    ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
    acsColumn.setColumnWidth(250);
    acsColumn.setComboValues(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
    complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),WidgetFactory.getWidgetFactory(),composite);
    complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
    complexTableViewer.create();
    complexTableViewer.getViewer().setInput(new ArrayList<Line>());
    UpdateComplexViewButton(false);
  }
  setControl(composite);
}",0.923247641945626
147825,"public AddBrowseItemsWizard(DataModelMainPage launchPage){
  super();
  setWindowTitle(""String_Node_Str"");
  page=launchPage;
}","public AddBrowseItemsWizard(DataModelMainPage launchPage){
  super();
  setWindowTitle(Messages.getString(""String_Node_Str""));
  page=launchPage;
}",0.927007299270073
147826,"private boolean saveConfiguration(){
  Iterator<String> browseIterator=browseItemToRoles.keySet().iterator();
  while (browseIterator.hasNext()) {
    String browse=browseIterator.next();
    List<Line> roles=browseItemToRoles.get(browse);
    try {
      newBrowseItemView(browse);
      modifyRolesWithAttachedBrowseItem(browse,roles);
    }
 catch (    RemoteException e) {
      MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
      return false;
    }
  }
  return true;
}","private boolean saveConfiguration(){
  Iterator<String> browseIterator=browseItemToRoles.keySet().iterator();
  while (browseIterator.hasNext()) {
    String browse=browseIterator.next();
    List<Line> roles=browseItemToRoles.get(browse);
    try {
      newBrowseItemView(browse);
      modifyRolesWithAttachedBrowseItem(browse,roles);
    }
 catch (    RemoteException e) {
      MessageDialog.openError(page.getSite().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + e.getLocalizedMessage());
      return false;
    }
  }
  return true;
}",0.9644760213143873
147827,"public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  String tValue=value.toString().trim();
  if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
    MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
    return;
  }
  XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
  if (!(BROWSE_ITEMS + elem.getName()).equals(tValue)) {
    for (    XSDElementDeclaration theElem : declList) {
      if (theElem == elem)       continue;
      if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
    }
    List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
    browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
    int prex=tValue.indexOf(BROWSE_ITEMS);
    if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
      elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
    }
    browseItemToRoles.put(tValue,lines);
    refreshRoleView(BROWSE_ITEMS + elem.getName());
    browseViewer.update(elem,null);
  }
}","public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  String tValue=value.toString().trim();
  if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || tValue.replaceAll(""String_Node_Str"",""String_Node_Str"").length() != tValue.length()) {
    MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return;
  }
  if (!value.toString().startsWith(BROWSE_ITEMS)) {
    MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + BROWSE_ITEMS);
    return;
  }
  XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
  if (!(BROWSE_ITEMS + elem.getName()).equals(tValue)) {
    for (    XSDElementDeclaration theElem : declList) {
      if (theElem == elem)       continue;
      if ((BROWSE_ITEMS + theElem.getName()).equals(tValue)) {
        MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
    }
    List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
    browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
    int prex=tValue.indexOf(BROWSE_ITEMS);
    if (prex != -1 && (prex + BROWSE_ITEMS.length()) <= tValue.length()) {
      elem.setName(tValue.substring(prex + BROWSE_ITEMS.length()));
    }
    browseItemToRoles.put(tValue,lines);
    refreshRoleView(BROWSE_ITEMS + elem.getName());
    browseViewer.update(elem,null);
  }
}",0.4461867426942266
147828,"public ConfigureRolePage(){
  super(""String_Node_Str"");
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  setPageComplete(true);
}","public ConfigureRolePage(){
  super(Messages.getString(""String_Node_Str""));
  setTitle(Messages.getString(""String_Node_Str""));
  setDescription(Messages.getString(""String_Node_Str""));
  setPageComplete(true);
}",0.8333333333333334
147829,"public void resourceChanged(IResourceChangeEvent event){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished())   return;
  IResourceDelta delta=event.getDelta();
  try {
    delta.accept(visitor);
  }
 catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
}","public void resourceChanged(IResourceChangeEvent event){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished())   return;
  IResourceDelta delta=event.getDelta();
  try {
    if (delta != null) {
      delta.accept(visitor);
    }
  }
 catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
}",0.9445378151260504
147830,"public void run(){
  if (viewObj != null) {
    try {
      IViewPart viewPart=RepositoryPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(getContentService().getViewerId());
      if (viewPart != null && viewPart instanceof CommonNavigator) {
        ((CommonNavigator)viewPart).getCommonViewer().refresh(viewObj);
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
}","public void run(){
  if (viewObj != null) {
    try {
      IViewPart viewPart=RepositoryPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(getContentService().getViewerId());
      if (viewPart != null && viewPart instanceof CommonNavigator) {
        ((CommonNavigator)viewPart).getCommonViewer().refresh(viewObj);
      }
      Item item=viewObj.getProperty().getItem();
      if (item instanceof ContainerItem) {
        ERepositoryObjectType repObjType=((ContainerItem)item).getRepObjType();
        if (repObjType == IServerObjectRepositoryType.TYPE_TRANSFORMERV2) {
          ContainerCacheService.refreshRepositoryRoot(IServerObjectRepositoryType.TYPE_EVENTMANAGER,((CommonNavigator)viewPart).getCommonViewer());
        }
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
}",0.6800618238021638
147831,"private void refreshContainer(final IRepositoryViewObject viewObj){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (viewObj != null) {
        try {
          IViewPart viewPart=RepositoryPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(getContentService().getViewerId());
          if (viewPart != null && viewPart instanceof CommonNavigator) {
            ((CommonNavigator)viewPart).getCommonViewer().refresh(viewObj);
          }
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
        }
      }
    }
  }
);
}","private void refreshContainer(final IRepositoryViewObject viewObj){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (viewObj != null) {
        try {
          IViewPart viewPart=RepositoryPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(getContentService().getViewerId());
          if (viewPart != null && viewPart instanceof CommonNavigator) {
            ((CommonNavigator)viewPart).getCommonViewer().refresh(viewObj);
          }
          Item item=viewObj.getProperty().getItem();
          if (item instanceof ContainerItem) {
            ERepositoryObjectType repObjType=((ContainerItem)item).getRepObjType();
            if (repObjType == IServerObjectRepositoryType.TYPE_TRANSFORMERV2) {
              ContainerCacheService.refreshRepositoryRoot(IServerObjectRepositoryType.TYPE_EVENTMANAGER,((CommonNavigator)viewPart).getCommonViewer());
            }
          }
        }
 catch (        Exception e) {
          log.error(e.getMessage(),e);
        }
      }
    }
  }
);
}",0.7365911799761621
147832,"public XpathSelectDialog(Shell parentShell,TreeParent parent,String title,IWorkbenchPartSite site,boolean isMulti,String dataModelName,boolean isAbsolutePath){
  super(parentShell);
  this.title=title;
  this.parent=parent;
  this.site=site;
  this.isMulti=isMulti;
  this.isAbsolutePath=isAbsolutePath;
  if (dataModelName != null)   this.dataModelName=dataModelName;
  if (this.site == null && this.parent != null)   this.site=ServerView.show().getSite();
 else {
    this.site=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor().getSite();
  }
}","public XpathSelectDialog(Shell parentShell,TreeParent parent,String title,IWorkbenchPartSite site,boolean isMulti,String dataModelName,boolean isAbsolutePath){
  super(parentShell);
  this.title=title;
  this.parent=parent;
  this.site=site;
  this.isMulti=isMulti;
  this.isAbsolutePath=isAbsolutePath;
  if (dataModelName != null)   this.dataModelName=dataModelName;
  if (this.site == null && this.parent != null)   this.site=ServerView.show().getSite();
 else {
    this.site=MDMRepositoryViewExtensionService.getMDMRepositoryViewSite();
  }
}",0.8814159292035398
147833,"protected ValidationRuleExcpressDialog getExpressDialog(){
  return new ValidationRuleExcpressDialog(page.getSite().getShell(),getTreeParent(),Messages.getMessage(""String_Node_Str""),struc.getDefaultValueRule(),conceptName,false,false);
}","protected ValidationRuleExcpressDialog getExpressDialog(){
  return new ValidationRuleExcpressDialog(page.getSite().getShell(),getTreeParent(),Messages.getString(""String_Node_Str""),struc.getDefaultValueRule(),conceptName,false,false);
}",0.9725158562367864
147834,"public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save)       page.SaveWithForce(new NullProgressMonitor());
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    conceptName=Util.getConceptName(xSDCom);
    struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    if (!isDelete) {
      ValidationRuleExcpressDialog dlg=getExpressDialog();
      dlg.create();
      dlg.getShell().setMaximized(false);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        struc.setDefaultValueRule(dlg.getExpression());
      }
    }
 else {
      struc.setDefaultValueRule(""String_Node_Str"");
    }
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
      if (save) {
        IEditorPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveEditor(part,false);
      }
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    conceptName=Util.getConceptName(xSDCom);
    struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(Messages.getString(""String_Node_Str"") + xSDCom.getClass().getName());
    }
    if (!isDelete) {
      ValidationRuleExcpressDialog dlg=getExpressDialog();
      dlg.create();
      dlg.getShell().setMaximized(false);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        struc.setDefaultValueRule(dlg.getExpression());
      }
    }
 else {
      struc.setDefaultValueRule(""String_Node_Str"");
    }
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9040683073832244
147835,"public XSDDefaultValueRuleAction(DataModelMainPage page,String dataModelName,boolean isDelete){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.DELETE_OBJ.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
  this.dataModelName=dataModelName;
  this.isDelete=isDelete;
}","public XSDDefaultValueRuleAction(DataModelMainPage page,String dataModelName,boolean isDelete){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.DELETE_OBJ.getPath()));
  setText(Messages.getString(""String_Node_Str""));
  setToolTipText(Messages.getString(""String_Node_Str""));
  this.dataModelName=dataModelName;
  this.isDelete=isDelete;
}",0.93993993993994
147836,"protected FKFilterDialog getNewFKFilterDialog(Shell shell,String filter,DataModelMainPage page,String conceptName){
  return new FKFilterDialog(shell,""String_Node_Str"",filter,page,conceptName);
}","protected FKFilterDialog getNewFKFilterDialog(Shell shell,String filter,DataModelMainPage page,String conceptName){
  return new FKFilterDialog(shell,Messages.getString(""String_Node_Str""),filter,page,conceptName);
}",0.951219512195122
147837,"public XSDSetAnnotationFKFilterAction(DataModelMainPage page,String dataModelName){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.FILTER_PS.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
  this.dataModelName=dataModelName;
}","public XSDSetAnnotationFKFilterAction(DataModelMainPage page,String dataModelName){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.FILTER_PS.getPath()));
  setText(Messages.getString(""String_Node_Str""));
  setToolTipText(Messages.getString(""String_Node_Str""));
  this.dataModelName=dataModelName;
}",0.9319727891156464
147838,"public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save)       page.SaveWithForce(new NullProgressMonitor());
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    String conceptName=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    if (xSDCom instanceof XSDElementDeclaration) {
      conceptName=xSDCom.getElement().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
    }
    if (xSDCom instanceof XSDParticle) {
    }
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    fkd=getNewFKFilterDialog(page.getSite().getShell(),struc.getFKFilter(),page,conceptName);
    fkd.setBlockOnOpen(true);
    int ret=fkd.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    String fkfilter=fkd.getFilter();
    struc.setFKFilter(fkfilter);
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
      if (save) {
        IEditorPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveEditor(part,false);
      }
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    String conceptName=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    if (xSDCom instanceof XSDElementDeclaration) {
      conceptName=xSDCom.getElement().getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
    }
    if (xSDCom instanceof XSDParticle) {
    }
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(Messages.getString(""String_Node_Str"") + xSDCom.getClass().getName());
    }
    fkd=getNewFKFilterDialog(page.getSite().getShell(),struc.getFKFilter(),page,conceptName);
    fkd.setBlockOnOpen(true);
    int ret=fkd.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    String fkfilter=fkd.getFilter();
    struc.setFKFilter(fkfilter);
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9103286384976526
147839,"public XSDSetAnnotationForeignKeyAction(DataModelMainPage page,String dataModelName){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.PRIMARYKEY.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
  this.dataModelName=dataModelName;
}","public XSDSetAnnotationForeignKeyAction(DataModelMainPage page,String dataModelName){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.PRIMARYKEY.getPath()));
  setText(Messages.getString(""String_Node_Str""));
  setToolTipText(Messages.getString(""String_Node_Str""));
  this.dataModelName=dataModelName;
}",0.9326599326599326
147840,"public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save) {
        IEditorPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveEditor(part,false);
      }
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    sxid=getNewSimpleXpathInputDlg(struc.getForeignKey());
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    String fk=""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (Util.getForeignKeys() != null && fk != null) {
      if (struc.getForeignKey() != null)       Util.getForeignKeys().remove(Util.getConceptFromPath(struc.getForeignKey()));
      Util.getForeignKeys().add(Util.getConceptFromPath(fk));
    }
    struc.setForeignKey(fk);
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
      if (save) {
        IEditorPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveEditor(part,false);
      }
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(Messages.getString(""String_Node_Str"") + xSDCom.getClass().getName());
    }
    sxid=getNewSimpleXpathInputDlg(struc.getForeignKey());
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    String fk=""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (Util.getForeignKeys() != null && fk != null) {
      if (struc.getForeignKey() != null)       Util.getForeignKeys().remove(Util.getConceptFromPath(struc.getForeignKey()));
      Util.getForeignKeys().add(Util.getConceptFromPath(fk));
    }
    struc.setForeignKey(fk);
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9739549135478224
147841,"protected SimpleXpathInputDialog getNewSimpleXpathInputDlg(String foreignKey){
  return new SimpleXpathInputDialog(page,""String_Node_Str"",""String_Node_Str"",foreignKey,new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      sxid.close();
    }
  }
,dataModelName);
}","protected SimpleXpathInputDialog getNewSimpleXpathInputDlg(String foreignKey){
  return new SimpleXpathInputDialog(page,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),foreignKey,new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      sxid.close();
    }
  }
,dataModelName);
}",0.9329073482428116
147842,"public XSDSetAnnotationForeignKeyInfoAction(DataModelMainPage page,String dataModelName){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.KEYINFO.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
  this.dataModelName=dataModelName;
}","public XSDSetAnnotationForeignKeyInfoAction(DataModelMainPage page,String dataModelName){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.KEYINFO.getPath()));
  setText(Messages.getString(""String_Node_Str""));
  setToolTipText(Messages.getString(""String_Node_Str""));
  this.dataModelName=dataModelName;
}",0.9328859060402684
147843,"protected AnnotationOrderedListsDialog getNewAnnotaionOrderedListsDialog(Collection<String> values){
  return new AnnotationOrderedListsDialog(new ArrayList<String>(values),new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dlg.close();
    }
  }
,page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType,dataModelName);
}","protected AnnotationOrderedListsDialog getNewAnnotaionOrderedListsDialog(Collection<String> values){
  return new AnnotationOrderedListsDialog(new ArrayList<String>(values),new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dlg.close();
    }
  }
,page.getSite().getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"",page,AnnotationOrderedListsDialog.AnnotationForeignKeyInfo_ActionType,dataModelName);
}",0.9772727272727272
147844,"public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save)       page.SaveWithForce(new NullProgressMonitor());
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    dlg=getNewAnnotaionOrderedListsDialog(struc.getForeignKeyInfos().values());
    dlg.setRetrieveFKinfos(struc.getRetrieveFKinfos());
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKeyInfos(dlg.getXPaths());
    struc.setRetrieveFKinfos(dlg.isRetrieveFKinfos());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
      if (save) {
        IEditorPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveEditor(part,false);
      }
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=new XSDAnnotationsStructure(xSDCom);
    if (struc.getAnnotation() == null) {
      throw new RuntimeException(Messages.getString(""String_Node_Str"") + xSDCom.getClass().getName());
    }
    dlg=getNewAnnotaionOrderedListsDialog(struc.getForeignKeyInfos().values());
    dlg.setRetrieveFKinfos(struc.getRetrieveFKinfos());
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    struc.setForeignKeyInfos(dlg.getXPaths());
    struc.setRetrieveFKinfos(dlg.isRetrieveFKinfos());
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.901673640167364
147845,"private void importSchemaFromFile(String fileName) throws Exception {
  InputSource source=null;
  Pattern httpUrl=Pattern.compile(""String_Node_Str"");
  Matcher match=httpUrl.matcher(fileName);
  if (match.matches()) {
    URL url=new URL(fileName);
    String urlContent=IOUtils.toString(url.openConnection().getInputStream());
    urlContent=urlContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
    source=new InputSource(IOUtils.toInputStream(urlContent));
    importSchema(source,fileName);
  }
 else {
    String inputType=fileName.substring(fileName.lastIndexOf(""String_Node_Str""));
    if (!inputType.equals(""String_Node_Str""))     return;
    File file=new File(fileName);
    source=new InputSource(new FileInputStream(file));
    importSchema(source,file.getAbsolutePath());
  }
}","private void importSchemaFromFile(String fileName) throws Exception {
  InputSource source=null;
  Pattern httpUrl=Pattern.compile(""String_Node_Str"");
  Matcher match=httpUrl.matcher(fileName);
  if (match.matches()) {
    URL url=new URL(fileName);
    String urlContent=IOUtils.toString(url.openConnection().getInputStream());
    urlContent=urlContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
    source=new InputSource(IOUtils.toInputStream(urlContent));
    importSchema(source,fileName);
  }
 else {
    String inputType=""String_Node_Str"";
    if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
      inputType=fileName.substring(fileName.lastIndexOf(""String_Node_Str""));
    }
    if (!inputType.equals(""String_Node_Str""))     return;
    File file=new File(fileName);
    source=new InputSource(new FileInputStream(file));
    importSchema(source,file.getAbsolutePath());
  }
}",0.9078014184397164
147846,"@Override protected XpathSelectDialog getXPathSelectDialog(){
  return new XpathSelectDialog2(parent.getShell(),Messages.SchematronExpressBuilder_selectXPath,ServerView.show().getSite(),false,null,isAbsoluteXPath);
}","@Override protected XpathSelectDialog getXPathSelectDialog(){
  return new XpathSelectDialog2(parent.getShell(),Messages.SchematronExpressBuilder_selectXPath,MDMRepositoryView.show().getSite(),false,null,isAbsoluteXPath);
}",0.9567198177676538
147847,"@Override public void fillContextMenu(IMenuManager menu){
  IStructuredSelection selection=(IStructuredSelection)getContext().getSelection();
  List<AbstractRepositoryAction> finalActions=null;
  for (Iterator il=selection.iterator(); il.hasNext(); ) {
    Object obj=il.next();
    if (obj instanceof IRepositoryViewObject) {
      IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
      IRepositoryNodeConfiguration conf=RepositoryNodeConfigurationManager.getConfiguration(viewObj);
      IRepositoryNodeActionProvider actionProvider=conf.getActionProvider();
      if (conf != null && actionProvider != null) {
        actionProvider.updateSelection(selection);
        List<AbstractRepositoryAction> actions=actionProvider.getActions(viewObj);
        if (actions != null) {
          if (finalActions == null) {
            finalActions=actions;
          }
          finalActions=combineActions(finalActions,actions);
          if (finalActions.size() == 0) {
            return;
          }
        }
      }
    }
  }
  for (  IAction action : finalActions) {
    if (action instanceof AbstractRepositoryAction) {
      AbstractRepositoryAction groupAction=(AbstractRepositoryAction)action;
      groupAction.selectionChanged(selection);
      if (groupAction.getGroupName() != null) {
        menu.appendToGroup(groupAction.getGroupName(),action);
      }
 else {
        menu.add(action);
      }
    }
  }
}","@Override public void fillContextMenu(IMenuManager menu){
  if (ProxyRepositoryFactory.getInstance().isUserReadOnlyOnCurrentProject()) {
    return;
  }
  IStructuredSelection selection=(IStructuredSelection)getContext().getSelection();
  List<AbstractRepositoryAction> finalActions=null;
  for (Iterator il=selection.iterator(); il.hasNext(); ) {
    Object obj=il.next();
    if (obj instanceof IRepositoryViewObject) {
      IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
      IRepositoryNodeConfiguration conf=RepositoryNodeConfigurationManager.getConfiguration(viewObj);
      IRepositoryNodeActionProvider actionProvider=conf.getActionProvider();
      if (conf != null && actionProvider != null) {
        actionProvider.updateSelection(selection);
        List<AbstractRepositoryAction> actions=actionProvider.getActions(viewObj);
        if (actions != null) {
          if (finalActions == null) {
            finalActions=actions;
          }
          finalActions=combineActions(finalActions,actions);
          if (finalActions.size() == 0) {
            return;
          }
        }
      }
    }
  }
  for (  IAction action : finalActions) {
    if (action instanceof AbstractRepositoryAction) {
      AbstractRepositoryAction groupAction=(AbstractRepositoryAction)action;
      groupAction.selectionChanged(selection);
      if (groupAction.getGroupName() != null) {
        menu.appendToGroup(groupAction.getGroupName(),action);
      }
 else {
        menu.add(action);
      }
    }
  }
}",0.96776382762131
147848,"public static List<String> findAllDataModelNames(){
  IMDMRepositoryViewServiceExt service=getRepositoryViewService();
  if (service != null)   return service.findAllWorkflowNames();
 else   return null;
}","public static List<String> findAllDataModelNames(){
  IMDMRepositoryViewServiceExt service=getRepositoryViewService();
  if (service != null)   return service.findAllDataModelNames();
 else   return null;
}",0.9586374695863747
147849,"public XpathSelectDialog(Shell parentShell,TreeParent parent,String title,IWorkbenchPartSite site,boolean isMulti,String dataModelName,boolean isAbsolutePath){
  super(parentShell);
  this.title=title;
  this.parent=parent;
  this.site=site;
  this.isMulti=isMulti;
  this.isAbsolutePath=isAbsolutePath;
  if (dataModelName != null)   this.dataModelName=dataModelName;
  if (this.site == null)   this.site=ServerView.show().getSite();
}","public XpathSelectDialog(Shell parentShell,TreeParent parent,String title,IWorkbenchPartSite site,boolean isMulti,String dataModelName,boolean isAbsolutePath){
  super(parentShell);
  this.title=title;
  this.parent=parent;
  this.site=site;
  this.isMulti=isMulti;
  this.isAbsolutePath=isAbsolutePath;
  if (dataModelName != null)   this.dataModelName=dataModelName;
  if (this.site == null && this.parent != null)   this.site=ServerView.show().getSite();
 else {
    this.site=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor().getSite();
  }
}",0.8557409224730128
147850,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent == null ? null : this.parent.findServerFolder(TreeObject.DATA_MODEL);
  avaiList=getAvailableDataModel();
  dataModelCombo.setItems(avaiList.toArray(new String[avaiList.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree,filterText.getText());
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  Label filterLabel=new Label(composite,SWT.NONE);
  filterLabel.setText(""String_Node_Str"");
  filterLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
  filterText=new Text(composite,SWT.BORDER);
  filterText.setEditable(true);
  filterText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (conceptName != null)   filterText.setText(conceptName);
 else   filterText.setText(""String_Node_Str"");
  filterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String filter=((Text)e.widget).getText();
      changeDomTree(tree,filter);
    }
  }
);
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=avaiList.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree,filterText.getText());
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=400;
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.makeColumnsEqualWidth=false;
  layout.numColumns=2;
  Label datamoelsLabel=new Label(composite,SWT.NONE);
  GridData dg=new GridData(SWT.FILL,SWT.FILL,false,true,1,1);
  datamoelsLabel.setLayoutData(dg);
  datamoelsLabel.setText(""String_Node_Str"");
  dg=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  dg.widthHint=400;
  dataModelCombo=new Combo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.SINGLE);
  dataModelCombo.setLayoutData(dg);
  final TreeParent tree=this.parent == null ? null : this.parent.findServerFolder(TreeObject.DATA_MODEL);
  if (tree != null)   avaiList=getAvailableDataModel();
 else   avaiList=MDMRepositoryViewExtensionService.findAllDataModelNames();
  dataModelCombo.setItems(avaiList.toArray(new String[avaiList.size()]));
  dataModelCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      changeDomTree(tree,filterText.getText());
    }
  }
);
  schemaLabel=new Label(composite,SWT.NONE);
  schemaLabel.setText(""String_Node_Str"");
  schemaLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  ((GridData)schemaLabel.getLayoutData()).widthHint=10;
  xpathText=new Text(composite,SWT.BORDER);
  xpathText.setEditable(false);
  xpathText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  Label filterLabel=new Label(composite,SWT.NONE);
  filterLabel.setText(""String_Node_Str"");
  filterLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
  filterText=new Text(composite,SWT.BORDER);
  filterText.setEditable(true);
  filterText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  if (conceptName != null)   filterText.setText(conceptName);
 else   filterText.setText(""String_Node_Str"");
  filterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String filter=((Text)e.widget).getText();
      changeDomTree(tree,filter);
    }
  }
);
  if (isMulti) {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.MULTI | SWT.V_SCROLL| SWT.BORDER);
  }
 else {
    domViewer=new TreeViewer(composite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
  }
  int index=avaiList.indexOf(dataModelName);
  if (index < 0)   dataModelCombo.select(0);
 else   dataModelCombo.select(index);
  changeDomTree(tree,filterText.getText());
  domViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  ((GridData)domViewer.getControl().getLayoutData()).heightHint=400;
  ((GridData)domViewer.getControl().getLayoutData()).widthHint=400;
  return composite;
}",0.983092638252906
147851,"protected void changeDomTree(final TreeParent pObject,String filter){
  String modelDisplay=dataModelCombo.getText();
  if (modelDisplay.length() == 0)   return;
  this.dataModelName=modelDisplay;
  XtentisPort port=null;
  try {
    port=Util.getPort(pObject);
  }
 catch (  XtentisException e3) {
    log.error(e3.getMessage(),e3);
  }
catch (  Exception e3) {
    log.error(e3.getMessage(),e3);
  }
  WSDataModel wsDataModel=null;
  try {
    wsDataModel=port.getDataModel(new WSGetDataModel(new WSDataModelPK(dataModelName)));
  }
 catch (  RemoteException e2) {
    log.error(e2.getMessage(),e2);
  }
  try {
    String schema=wsDataModel.getXsdSchema();
    XSDSchema xsd=Util.createXsdSchema(schema,pObject);
    provideViwerContent(xsd,filter);
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
  }
}","protected void changeDomTree(final TreeParent pObject,String filter){
  String modelDisplay=dataModelCombo.getText();
  if (modelDisplay.length() == 0)   return;
  this.dataModelName=modelDisplay;
  XtentisPort port=null;
  try {
    port=Util.getPort(pObject);
  }
 catch (  XtentisException e3) {
    log.error(e3.getMessage(),e3);
  }
catch (  Exception e3) {
    log.error(e3.getMessage(),e3);
  }
  WSDataModel wsDataModel=null;
  String schema=null;
  XSDSchema xsd=null;
  if (port == null) {
    xsd=MDMRepositoryViewExtensionService.getDataModelXsd(pObject,filter,dataModelName);
    provideViwerContent(xsd,filter);
  }
 else {
    try {
      wsDataModel=port.getDataModel(new WSGetDataModel(new WSDataModelPK(dataModelName)));
    }
 catch (    RemoteException e2) {
      log.error(e2.getMessage(),e2);
    }
    try {
      schema=wsDataModel.getXsdSchema();
      xsd=Util.createXsdSchema(schema,pObject);
      provideViwerContent(xsd,filter);
    }
 catch (    Exception e1) {
      log.error(e1.getMessage(),e1);
    }
  }
}",0.8235924932975871
147852,"protected XpathSelectDialog getXPathSelectDialog(){
  return new XpathSelectDialog(parent.getShell(),treeParent,Messages.getString(""String_Node_Str""),ServerView.show().getSite(),false,null,isAbsoluteXPath);
}","protected XpathSelectDialog getXPathSelectDialog(){
  if (treeParent != null)   return new XpathSelectDialog(parent.getShell(),treeParent,Messages.getString(""String_Node_Str""),ServerView.show().getSite(),false,null,isAbsoluteXPath);
 else   return new XpathSelectDialog(parent.getShell(),treeParent,Messages.getString(""String_Node_Str""),null,false,null,isAbsoluteXPath);
}",0.7172413793103448
147853,"private void importSchema(InputSource source,String uri) throws Exception {
  String ns=""String_Node_Str"";
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setNamespaceAware(true);
  documentBuilderFactory.setValidating(false);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document document=documentBuilder.parse(source);
  ns=document.getDocumentElement().getAttribute(""String_Node_Str"");
  if (xsdSchema == null)   xsdSchema=getXSDSchema(Util.nodeToString(document));
 else {
    WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
    xsdSchema=Util.createXsdSchema(wsObject.getXsdSchema(),xobject);
  }
  boolean exist=false;
  for (int i=0; i < xsdSchema.getContents().size(); i++) {
    XSDSchemaContent xsdComp=xsdSchema.getContents().get(i);
    if (ns != null && !ns.equals(""String_Node_Str"")) {
      if (xsdComp instanceof XSDImport && ((XSDImport)xsdComp).getNamespace().equals(ns)) {
        for (        Map.Entry entry : xsdSchema.getQNamePrefixToNamespaceMap().entrySet()) {
          if (entry.getValue().equals(((XSDImport)xsdComp).getNamespace())) {
            exist=true;
            break;
          }
        }
        break;
      }
    }
 else {
      if (xsdComp instanceof XSDInclude) {
        String xsdLocation=((XSDInclude)xsdComp).getSchemaLocation();
        if (xsdLocation.equals(uri)) {
          exist=true;
          break;
        }
      }
    }
  }
  if (!exist) {
    if (ns != null && !ns.equals(""String_Node_Str"")) {
      int last=ns.lastIndexOf(""String_Node_Str"");
      xsdSchema.getQNamePrefixToNamespaceMap().put(ns.substring(last + 1).replaceAll(""String_Node_Str"",""String_Node_Str""),ns);
      XSDImport xsdImport=XSDFactory.eINSTANCE.createXSDImport();
      xsdImport.setNamespace(ns);
      xsdImport.setSchemaLocation(uri);
      xsdSchema.getContents().add(0,xsdImport);
    }
 else {
      XSDInclude xsdInclude=XSDFactory.eINSTANCE.createXSDInclude();
      xsdInclude.setSchemaLocation(uri);
      xsdSchema.getContents().add(0,xsdInclude);
    }
    String xsd=Util.nodeToString(xsdSchema.getDocument());
    setXsdSchema(xsdSchema);
    WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
    wsObject.setXsdSchema(xsd);
  }
}","protected void importSchema(InputSource source,String uri) throws Exception {
  String ns=""String_Node_Str"";
  DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
  documentBuilderFactory.setNamespaceAware(true);
  documentBuilderFactory.setValidating(false);
  DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
  Document document=documentBuilder.parse(source);
  ns=document.getDocumentElement().getAttribute(""String_Node_Str"");
  if (xsdSchema == null)   xsdSchema=getXSDSchema(Util.nodeToString(document));
 else {
    WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
    xsdSchema=Util.createXsdSchema(wsObject.getXsdSchema(),xobject);
  }
  boolean exist=false;
  for (int i=0; i < xsdSchema.getContents().size(); i++) {
    XSDSchemaContent xsdComp=xsdSchema.getContents().get(i);
    if (ns != null && !ns.equals(""String_Node_Str"")) {
      if (xsdComp instanceof XSDImport && ((XSDImport)xsdComp).getNamespace().equals(ns)) {
        for (        Map.Entry entry : xsdSchema.getQNamePrefixToNamespaceMap().entrySet()) {
          if (entry.getValue().equals(((XSDImport)xsdComp).getNamespace())) {
            exist=true;
            break;
          }
        }
        break;
      }
    }
 else {
      if (xsdComp instanceof XSDInclude) {
        String xsdLocation=((XSDInclude)xsdComp).getSchemaLocation();
        if (xsdLocation.equals(uri)) {
          exist=true;
          break;
        }
      }
    }
  }
  if (!exist) {
    if (ns != null && !ns.equals(""String_Node_Str"")) {
      int last=ns.lastIndexOf(""String_Node_Str"");
      xsdSchema.getQNamePrefixToNamespaceMap().put(ns.substring(last + 1).replaceAll(""String_Node_Str"",""String_Node_Str""),ns);
      XSDImport xsdImport=XSDFactory.eINSTANCE.createXSDImport();
      xsdImport.setNamespace(ns);
      xsdImport.setSchemaLocation(uri);
      xsdSchema.getContents().add(0,xsdImport);
    }
 else {
      XSDInclude xsdInclude=XSDFactory.eINSTANCE.createXSDInclude();
      xsdInclude.setSchemaLocation(uri);
      xsdSchema.getContents().add(0,xsdInclude);
    }
    String xsd=Util.nodeToString(xsdSchema.getDocument());
    setXsdSchema(xsdSchema);
    WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
    wsObject.setXsdSchema(xsd);
  }
}",0.9973901696389734
147854,"private void importSchemaFromFile(String fileName) throws Exception {
  InputSource source=null;
  Pattern httpUrl=Pattern.compile(""String_Node_Str"");
  Matcher match=httpUrl.matcher(fileName);
  if (match.matches()) {
    URL url=new URL(fileName);
    String urlContent=IOUtils.toString(url.openConnection().getInputStream());
    urlContent=urlContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
    source=new InputSource(IOUtils.toInputStream(urlContent));
    importSchema(source,fileName);
  }
 else {
    String inputType=""String_Node_Str"";
    if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
      inputType=fileName.substring(fileName.lastIndexOf(""String_Node_Str""));
    }
    if (!inputType.equals(""String_Node_Str""))     return;
    File file=new File(fileName);
    source=new InputSource(new FileInputStream(file));
    importSchema(source,file.getAbsolutePath());
  }
}","private void importSchemaFromFile(String fileName) throws Exception {
  InputSource source=null;
  Pattern httpUrl=Pattern.compile(""String_Node_Str"");
  Matcher match=httpUrl.matcher(fileName);
  if (match.matches()) {
    URL url=new URL(fileName);
    String urlContent=IOUtils.toString(url.openConnection().getInputStream());
    urlContent=urlContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
    source=new InputSource(IOUtils.toInputStream(urlContent));
    importSchema(source,fileName);
  }
 else {
    importFromFile(source,fileName);
  }
}",0.7484493452791179
147855,"@Override protected String getUrl(){
  return ""String_Node_Str"" + serverDef.getHost() + ""String_Node_Str""+ serverDef.getPort()+ ""String_Node_Str"";
}","@Override protected String getUrl(){
  return ""String_Node_Str"";
}",0.616822429906542
147856,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(Messages.getString(""String_Node_Str""));
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    @Override public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    @Override public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(Messages.getString(""String_Node_Str""));
  addXSDFromLocal.setToolTipText(Messages.getString(""String_Node_Str""));
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(Messages.getString(""String_Node_Str""));
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(Messages.getString(""String_Node_Str""));
    addXSDFromWebSite.setToolTipText(Messages.getString(""String_Node_Str""));
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),Messages.getString(""String_Node_Str""));
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          if (port == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          if (getUrl() == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(Messages.getString(""String_Node_Str""));
  impXSDFromExchange.setToolTipText(Messages.getString(""String_Node_Str""));
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(Messages.getString(""String_Node_Str""));
  addXSDFromInputDlg.setToolTipText(Messages.getString(""String_Node_Str""));
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return Messages.getString(""String_Node_Str"");
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(Messages.getString(""String_Node_Str""));
  delLabelButton.setToolTipText(Messages.getString(""String_Node_Str""));
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(Messages.getString(""String_Node_Str""));
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    @Override public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    @Override public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(Messages.getString(""String_Node_Str""));
  addXSDFromLocal.setToolTipText(Messages.getString(""String_Node_Str""));
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(Messages.getString(""String_Node_Str""));
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(Messages.getString(""String_Node_Str""));
    addXSDFromWebSite.setToolTipText(Messages.getString(""String_Node_Str""));
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),Messages.getString(""String_Node_Str""));
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          resolveSchemaList(schemaList,dlg);
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          if (getUrl() == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(Messages.getString(""String_Node_Str""));
  impXSDFromExchange.setToolTipText(Messages.getString(""String_Node_Str""));
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(Messages.getString(""String_Node_Str""));
  addXSDFromInputDlg.setToolTipText(Messages.getString(""String_Node_Str""));
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return Messages.getString(""String_Node_Str"");
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(Messages.getString(""String_Node_Str""));
  delLabelButton.setToolTipText(Messages.getString(""String_Node_Str""));
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}",0.9580390527627752
147857,"public boolean copyViewObj(IRepositoryViewObject dragViewObj,IRepositoryViewObject dropViewObj){
  if (dropViewObj != null && dragViewObj != null) {
    Property dragProp=dragViewObj.getProperty();
    Property dropProp=dropViewObj.getProperty();
    Item item=dragProp.getItem();
    String name;
    if (item instanceof MDMServerObjectItem) {
      MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      name=serverObj.getName();
    }
 else {
      name=dragProp.getLabel();
    }
    IRepositoryViewObject dragParentViewObj=getParentRepositoryViewObject(dragViewObj);
    ContainerItem dragParentItem=(ContainerItem)dragParentViewObj.getProperty().getItem();
    String newName=showPasteDlg(dragParentItem.getRepObjType(),dragParentItem,""String_Node_Str"" + name);
    if (newName != null) {
      String pathStr=dropProp.getItem().getState().getPath();
      IPath path=new Path(pathStr);
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      Item copy=null;
      try {
        copy=factory.copy(item,path,true);
        if (factory.isEditableAndLockIfPossible(copy)) {
          if (copy instanceof MDMServerObjectItem) {
            ((MDMServerObjectItem)copy).getMDMServerObject().setName(newName);
          }
          copy.getProperty().setLabel(newName);
          RepositoryResourceUtil.setLastServerDef(copy,null);
          factory.save(copy);
          return true;
        }
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
catch (      BusinessException e) {
        log.error(e.getMessage(),e);
      }
 finally {
        try {
          factory.unlock(copy);
        }
 catch (        PersistenceException e) {
          log.error(e.getMessage(),e);
        }
catch (        LoginException e) {
          log.error(e.getMessage(),e);
        }
      }
    }
  }
  return false;
}","public boolean copyViewObj(IRepositoryViewObject dragViewObj,IRepositoryViewObject dropViewObj){
  if (dropViewObj != null && dragViewObj != null) {
    Property dragProp=dragViewObj.getProperty();
    Property dropProp=dropViewObj.getProperty();
    Item item=dragProp.getItem();
    String name;
    if (item instanceof MDMServerObjectItem) {
      MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      name=serverObj.getName();
    }
 else {
      name=dragProp.getLabel();
    }
    IRepositoryViewObject dragParentViewObj=getParentRepositoryViewObject(dragViewObj);
    ContainerItem dragParentItem=(ContainerItem)dragParentViewObj.getProperty().getItem();
    String newName=showPasteDlg(dragParentItem.getRepObjType(),dragParentItem,""String_Node_Str"" + name);
    if (newName != null) {
      String pathStr=dropProp.getItem().getState().getPath();
      IPath path=new Path(pathStr);
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      Item copy=null;
      try {
        copy=factory.copy(item,path,true);
        if (factory.isEditableAndLockIfPossible(copy)) {
          if (copy instanceof MDMServerObjectItem) {
            ((MDMServerObjectItem)copy).getMDMServerObject().setName(newName);
            ((MDMServerObjectItem)copy).getMDMServerObject().setLastServerDef(null);
            CommandManager.getInstance().pushCommand(ICommand.CMD_ADD,copy.getProperty().getId(),newName);
          }
          copy.getProperty().setLabel(newName);
          RepositoryResourceUtil.setLastServerDef(copy,null);
          factory.save(copy);
          return true;
        }
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
catch (      BusinessException e) {
        log.error(e.getMessage(),e);
      }
 finally {
        try {
          factory.unlock(copy);
        }
 catch (        PersistenceException e) {
          log.error(e.getMessage(),e);
        }
catch (        LoginException e) {
          log.error(e.getMessage(),e);
        }
      }
    }
  }
  return false;
}",0.9365394149727316
147858,"/** 
 * DOC hcw Comment method ""removeSelectedText"".
 */
private void removeSelectedText(){
  if (control instanceof Text) {
    Text text=((Text)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
      insertionPos=text.getSelection().x;
      text.setText(content);
    }
  }
 else   if (control instanceof StyledText) {
    StyledText text=((StyledText)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
      insertionPos=text.getSelection().x;
      text.setText(content);
    }
  }
}","/** 
 * DOC hcw Comment method ""removeSelectedText"".
 */
private void removeSelectedText(){
  if (control instanceof Text) {
    Text text=((Text)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
      insertionPos=text.getSelection().x;
    }
  }
 else   if (control instanceof StyledText) {
    StyledText text=((StyledText)control);
    if (text.getSelectionCount() > 0) {
      Point selection=text.getSelection();
      String content=text.getText().substring(0,selection.x) + text.getText().substring(selection.y);
      insertionPos=text.getSelection().x;
    }
  }
}",0.961229946524064
147859,"public void createNewView(String viewName){
  RepositoryResourceUtil.removeViewObjectPhysically(IServerObjectRepositoryType.TYPE_VIEW,viewName,null,null);
  createServerObject(viewName);
  refreshRepositoryRoot(IServerObjectRepositoryType.TYPE_VIEW);
}","public void createNewView(String viewName){
  RepositoryResourceUtil.removeViewObjectPhysically(IServerObjectRepositoryType.TYPE_VIEW,viewName,null,null);
  createServerObject(viewName);
  refreshRepositoryRoot(IServerObjectRepositoryType.TYPE_VIEW);
  refreshRepositoryRoot(IServerObjectRepositoryType.TYPE_ROLE);
}",0.8873239436619719
147860,"@Override protected void modifyRolesWithAttachedBrowseItem(String browseItem,List<Line> roles) throws RemoteException {
  for (  Line line : roles) {
    List<KeyValue> keyValues=line.keyValues;
    String roleName=keyValues.get(0).value;
    MDMServerObjectItem roleItem=RepositoryQueryService.findServerObjectItemByName(IServerObjectRepositoryType.TYPE_ROLE,roleName);
    if (roleItem != null) {
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      if (factory.isEditableAndLockIfPossible(roleItem)) {
        WSRoleE role=((WSRoleItem)roleItem).getWsRole();
        for (        WSRoleSpecificationE spec : role.getSpecification()) {
          if (spec.getObjectType().equals(""String_Node_Str"")) {
            EList<WSRoleSpecificationInstanceE> specInstance=spec.getInstance();
            WSRoleSpecificationInstanceE newInstance=MdmserverobjectFactory.eINSTANCE.createWSRoleSpecificationInstanceE();
            newInstance.setInstanceName(browseItem);
            newInstance.setWritable(keyValues.get(1).value.equals(""String_Node_Str"") ? false : true);
            specInstance.add(newInstance);
            break;
          }
        }
        RepositoryResourceUtil.saveItem(roleItem);
      }
      try {
        factory.unlock(roleItem);
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
catch (      LoginException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}","@Override protected void modifyRolesWithAttachedBrowseItem(String browseItem,List<Line> roles) throws RemoteException {
  for (  Line line : roles) {
    List<KeyValue> keyValues=line.keyValues;
    String roleName=keyValues.get(0).value;
    MDMServerObjectItem roleItem=RepositoryQueryService.findServerObjectItemByName(IServerObjectRepositoryType.TYPE_ROLE,roleName);
    CommandManager.getInstance().pushCommand(ICommand.CMD_MODIFY,roleItem.getProperty().getId(),roleItem.getMDMServerObject().getName());
    if (roleItem != null) {
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      if (factory.isEditableAndLockIfPossible(roleItem)) {
        WSRoleE role=((WSRoleItem)roleItem).getWsRole();
        for (        WSRoleSpecificationE spec : role.getSpecification()) {
          if (spec.getObjectType().equals(""String_Node_Str"")) {
            EList<WSRoleSpecificationInstanceE> specInstance=spec.getInstance();
            WSRoleSpecificationInstanceE newInstance=MdmserverobjectFactory.eINSTANCE.createWSRoleSpecificationInstanceE();
            newInstance.setInstanceName(browseItem);
            newInstance.setWritable(keyValues.get(1).value.equals(""String_Node_Str"") ? false : true);
            specInstance.add(newInstance);
            break;
          }
        }
        RepositoryResourceUtil.saveItem(roleItem);
      }
      try {
        factory.unlock(roleItem);
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
catch (      LoginException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}",0.9555984555984556
147861,"protected XpathSelectDialog getNewXpathDlgInstance(){
  return new XpathSelectDialog(table.getShell(),getCurrentTreeParent(),""String_Node_Str"",ServerView.show().getSite(),true,getDatamodelName());
}","protected XpathSelectDialog getNewXpathDlgInstance(){
  return new XpathSelectDialog(table.getShell(),getCurrentTreeParent(),Messages.getString(""String_Node_Str""),ServerView.show().getSite(),true,getDatamodelName());
}",0.9519230769230768
147862,"@Override protected void createViewer(){
  super.createTable();
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  table.setLayoutData(gd);
  gd.heightHint=80;
  Composite stepUpDownComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  stepUpDownComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  GridLayout layout=new GridLayout(8,false);
  layout.marginTop=0;
  layout.marginBottom=0;
  layout.marginHeight=0;
  stepUpDownComposite.setLayout(layout);
  addButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  addButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  addButton.setToolTipText(""String_Node_Str"");
  if (isXpath()) {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_NEWXPATH.getPath()));
  }
 else {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  }
  addButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> list=(List<Line>)getViewer().getInput();
      Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getInitValues());
      list.add(line);
      viewer.setSelection(null);
      viewer.refresh();
      viewer.getTable().select(viewer.getTable().getItemCount() - 1);
      markDirty();
    }
  }
);
  if (isAddMulti()) {
    Button selNewPathButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
    selNewPathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    selNewPathButton.setToolTipText(""String_Node_Str"");
    selNewPathButton.setImage(ImageCache.getCreatedImage(EImage.SELECT_NEWXPATH.getPath()));
    selNewPathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      @SuppressWarnings(""String_Node_Str"") public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        xpathDialog=getNewXpathDlgInstance();
        xpathDialog.setConceptName(conceptName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          datamodelName=xpathDialog.getDataModelName();
          String[] xpaths=xpathDialog.getXpath().split(""String_Node_Str"");
          for (          String xpath : xpaths) {
            List<Line> list=(List<Line>)getViewer().getInput();
            Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getLineValues(xpath,0));
            list.add(line);
          }
          viewer.setSelection(null);
          viewer.refresh();
          viewer.getTable().select(viewer.getTable().getItemCount() - 1);
          markDirty();
        }
      }
    }
);
  }
  deleteButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteButton.setToolTipText(""String_Node_Str"");
  deleteButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> input=(List<Line>)viewer.getInput();
      TableItem[] items=viewer.getTable().getSelection();
      for (int i=0; i < items.length; i++) {
        input.remove(items[i].getData());
      }
      viewer.setInput(input);
      markDirty();
    }
  }
);
  deleteButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  Button deleteAllButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteAllButton.setToolTipText(""String_Node_Str"");
  deleteAllButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteAllButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> items=(List<Line>)viewer.getInput();
      items.clear();
      viewer.refresh();
      markDirty();
    }
  }
);
  deleteAllButton.setImage(ImageCache.getCreatedImage(EImage.PROGRESS_REMALL.getPath()));
  upButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  upButton.setToolTipText(""String_Node_Str"");
  upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
  upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  upButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index > 0 && index < viewer.getTable().getItemCount()) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index - 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  downButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  downButton.setToolTipText(""String_Node_Str"");
  downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
  downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  downButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount() - 1) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index + 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  copyButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  copyButton.setToolTipText(""String_Node_Str"");
  copyButton.setImage(ImageCache.getCreatedImage(EImage.COPY.getPath()));
  copyButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  copyButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int[] indexs=viewer.getTable().getSelectionIndices();
      List<Line> copyLines=new ArrayList<Line>();
      for (      int index : indexs) {
        if (index >= 0 && index <= viewer.getTable().getItemCount() - 1) {
          List<Line> items=(List<Line>)viewer.getInput();
          Line line=items.get(index);
          Line copyLine=line.clone();
          copyLines.add(copyLine);
        }
      }
      if (indexs.length > 0) {
        HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
        if (btns != null)         for (        Button btn : btns) {
          if (btn != null)           btn.setEnabled(true);
        }
        WorkbenchClipboard.getWorkbenchClipboard().setLines(String.valueOf(columns.size()),copyLines);
      }
    }
  }
);
  pastButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  pastButton.setToolTipText(""String_Node_Str"");
  pastButton.setImage(ImageCache.getCreatedImage(EImage.PASTE.getPath()));
  pastButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  pastButton.setEnabled(false);
  pastButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      if (mainPage != null) {
        mainPage.setComitting(true);
      }
      boolean dirty=false;
      List<Line> items=(List<Line>)viewer.getInput();
      List<Line> cacheLine=WorkbenchClipboard.getWorkbenchClipboard().getLines(String.valueOf(columns.size()));
      List<Line> coloneLine=new ArrayList<Line>();
      for (      Line l : cacheLine) {
        coloneLine.add(l.clone());
      }
      if (cacheLine.size() > 0) {
        items.addAll(coloneLine);
        dirty=true;
      }
      viewer.refresh();
      if (mainPage != null) {
        mainPage.setComitting(false);
      }
      if (dirty)       markDirty();
    }
  }
);
  HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
  if (btns == null) {
    btns=new HashSet<Button>();
    pastBtns.put(String.valueOf(columns.size()),btns);
  }
  btns.add(pastButton);
  CellEditor[] editors=new CellEditor[columns.size()];
  for (int i=0; i < columns.size(); i++) {
    if (columns.get(i).isText()) {
      editors[i]=new TextCellEditor(table);
    }
 else     if (columns.get(i).isCombo()) {
      editors[i]=new ComboBoxCellEditor(table,((ComplexTableViewerColumn)columns.get(i)).getComboValues(),SWT.READ_ONLY);
    }
 else     if (columns.get(i).isXPATH()) {
      editors[i]=new XpathCellEditor(table);
    }
 else     if (columns.get(i).isMultiMessage()) {
      editors[i]=new MultiMessageEditor(table);
      multiMsg.setColumn(table.getColumn(i));
    }
 else     if (columns.get(i).isValidationRule()) {
      editors[i]=createValidationRuleEditor();
      validationRule.setColumn(table.getColumn(i));
    }
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    @SuppressWarnings(""String_Node_Str"") public Object[] getElements(    Object inputElement){
      ArrayList<Line> lines=(ArrayList<Line>)inputElement;
      return lines.toArray(new Line[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      Line line=(Line)element;
      if (columnIndex >= 0 && columnIndex < columns.size()) {
        for (        KeyValue keyvalue : line.keyValues) {
          if (keyvalue.key.equals(columns.get(columnIndex).getName())) {
            String val=keyvalue.value;
            if (columns.get(columnIndex).isNillable()) {
              if (columns.get(columnIndex).getNillValue().equals(val))               val=columns.get(columnIndex).getNillDisplay();
            }
            return val;
          }
        }
      }
      return ""String_Node_Str"";
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  ArrayList<String> columnNames=new ArrayList<String>();
  for (  ComplexTableViewerColumn column : columns) {
    columnNames.add(column.getName());
  }
  viewer.setColumnProperties(columnNames.toArray(new String[columnNames.size()]));
  viewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return editable;
    }
    @SuppressWarnings(""String_Node_Str"") public void modify(    Object element,    String property,    Object value){
      if (value instanceof Integer) {
        if (Integer.valueOf(value.toString()) == -1)         return;
      }
      TableItem item=(TableItem)element;
      Line line=(Line)item.getData();
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      if (columnIndex >= 0 && columnIndex < viewer.getColumnProperties().length) {
        if (isAColumnWithCombo(columnIndex)) {
          String[] attrs=columns.get(columnIndex).getComboValues();
          value=attrs[Integer.parseInt(value.toString())];
        }
        KeyValue kv=line.keyValues.get(columnIndex);
        boolean noChange=kv.value.equals(value.toString());
        kv.value=value.toString();
        viewer.refresh();
        if (!noChange) {
          markDirty();
        }
      }
    }
    public Object getValue(    Object element,    String property){
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      Line line=(Line)element;
      if (isAColumnWithCombo(columnIndex)) {
        String value=line.keyValues.get(columnIndex).value;
        String[] attrs=columns.get(columnIndex).getComboValues();
        return Arrays.asList(attrs).indexOf(value);
      }
      for (      KeyValue keyvalue : line.keyValues) {
        if (property.equals(keyvalue.key)) {
          if (keyvalue.value.equals(""String_Node_Str"")) {
            return columns.get(columnIndex).getNillDisplay();
          }
          return keyvalue.value;
        }
      }
      return null;
    }
    private boolean isAColumnWithCombo(    int columnIdx){
      return columns.get(columnIdx).isCombo();
    }
  }
);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
        Line line=(Line)((IStructuredSelection)viewer.getSelection()).getFirstElement();
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(line);
        viewer.refresh();
        markDirty();
      }
    }
  }
);
  viewer.getTable().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
      btns.remove(pastButton);
    }
  }
);
}","@Override protected void createViewer(){
  super.createTable();
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  table.setLayoutData(gd);
  gd.heightHint=80;
  Composite stepUpDownComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  stepUpDownComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  GridLayout layout=new GridLayout(8,false);
  layout.marginTop=0;
  layout.marginBottom=0;
  layout.marginHeight=0;
  stepUpDownComposite.setLayout(layout);
  addButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  addButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  addButton.setToolTipText(Messages.getString(""String_Node_Str""));
  if (isXpath()) {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_NEWXPATH.getPath()));
  }
 else {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  }
  addButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> list=(List<Line>)getViewer().getInput();
      Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getInitValues());
      list.add(line);
      viewer.setSelection(null);
      viewer.refresh();
      viewer.getTable().select(viewer.getTable().getItemCount() - 1);
      markDirty();
    }
  }
);
  if (isAddMulti()) {
    Button selNewPathButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
    selNewPathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    selNewPathButton.setToolTipText(Messages.getString(""String_Node_Str""));
    selNewPathButton.setImage(ImageCache.getCreatedImage(EImage.SELECT_NEWXPATH.getPath()));
    selNewPathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      @SuppressWarnings(""String_Node_Str"") public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        xpathDialog=getNewXpathDlgInstance();
        xpathDialog.setConceptName(conceptName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          datamodelName=xpathDialog.getDataModelName();
          String[] xpaths=xpathDialog.getXpath().split(""String_Node_Str"");
          for (          String xpath : xpaths) {
            List<Line> list=(List<Line>)getViewer().getInput();
            Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getLineValues(xpath,0));
            list.add(line);
          }
          viewer.setSelection(null);
          viewer.refresh();
          viewer.getTable().select(viewer.getTable().getItemCount() - 1);
          markDirty();
        }
      }
    }
);
  }
  deleteButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteButton.setToolTipText(Messages.getString(""String_Node_Str""));
  deleteButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> input=(List<Line>)viewer.getInput();
      TableItem[] items=viewer.getTable().getSelection();
      for (int i=0; i < items.length; i++) {
        input.remove(items[i].getData());
      }
      viewer.setInput(input);
      markDirty();
    }
  }
);
  deleteButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  Button deleteAllButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteAllButton.setToolTipText(Messages.getString(""String_Node_Str""));
  deleteAllButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteAllButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> items=(List<Line>)viewer.getInput();
      items.clear();
      viewer.refresh();
      markDirty();
    }
  }
);
  deleteAllButton.setImage(ImageCache.getCreatedImage(EImage.PROGRESS_REMALL.getPath()));
  upButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  upButton.setToolTipText(Messages.getString(""String_Node_Str""));
  upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
  upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  upButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index > 0 && index < viewer.getTable().getItemCount()) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index - 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  downButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  downButton.setToolTipText(Messages.getString(""String_Node_Str""));
  downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
  downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  downButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount() - 1) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index + 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  copyButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  copyButton.setToolTipText(Messages.getString(""String_Node_Str""));
  copyButton.setImage(ImageCache.getCreatedImage(EImage.COPY.getPath()));
  copyButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  copyButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int[] indexs=viewer.getTable().getSelectionIndices();
      List<Line> copyLines=new ArrayList<Line>();
      for (      int index : indexs) {
        if (index >= 0 && index <= viewer.getTable().getItemCount() - 1) {
          List<Line> items=(List<Line>)viewer.getInput();
          Line line=items.get(index);
          Line copyLine=line.clone();
          copyLines.add(copyLine);
        }
      }
      if (indexs.length > 0) {
        HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
        if (btns != null)         for (        Button btn : btns) {
          if (btn != null)           btn.setEnabled(true);
        }
        WorkbenchClipboard.getWorkbenchClipboard().setLines(String.valueOf(columns.size()),copyLines);
      }
    }
  }
);
  pastButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  pastButton.setToolTipText(Messages.getString(""String_Node_Str""));
  pastButton.setImage(ImageCache.getCreatedImage(EImage.PASTE.getPath()));
  pastButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  pastButton.setEnabled(false);
  pastButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      if (mainPage != null) {
        mainPage.setComitting(true);
      }
      boolean dirty=false;
      List<Line> items=(List<Line>)viewer.getInput();
      List<Line> cacheLine=WorkbenchClipboard.getWorkbenchClipboard().getLines(String.valueOf(columns.size()));
      List<Line> coloneLine=new ArrayList<Line>();
      for (      Line l : cacheLine) {
        coloneLine.add(l.clone());
      }
      if (cacheLine.size() > 0) {
        items.addAll(coloneLine);
        dirty=true;
      }
      viewer.refresh();
      if (mainPage != null) {
        mainPage.setComitting(false);
      }
      if (dirty)       markDirty();
    }
  }
);
  HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
  if (btns == null) {
    btns=new HashSet<Button>();
    pastBtns.put(String.valueOf(columns.size()),btns);
  }
  btns.add(pastButton);
  CellEditor[] editors=new CellEditor[columns.size()];
  for (int i=0; i < columns.size(); i++) {
    if (columns.get(i).isText()) {
      editors[i]=new TextCellEditor(table);
    }
 else     if (columns.get(i).isCombo()) {
      editors[i]=new ComboBoxCellEditor(table,((ComplexTableViewerColumn)columns.get(i)).getComboValues(),SWT.READ_ONLY);
    }
 else     if (columns.get(i).isXPATH()) {
      editors[i]=new XpathCellEditor(table);
    }
 else     if (columns.get(i).isMultiMessage()) {
      editors[i]=new MultiMessageEditor(table);
      multiMsg.setColumn(table.getColumn(i));
    }
 else     if (columns.get(i).isValidationRule()) {
      editors[i]=createValidationRuleEditor();
      validationRule.setColumn(table.getColumn(i));
    }
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    @SuppressWarnings(""String_Node_Str"") public Object[] getElements(    Object inputElement){
      ArrayList<Line> lines=(ArrayList<Line>)inputElement;
      return lines.toArray(new Line[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      Line line=(Line)element;
      if (columnIndex >= 0 && columnIndex < columns.size()) {
        for (        KeyValue keyvalue : line.keyValues) {
          if (keyvalue.key.equals(columns.get(columnIndex).getName())) {
            String val=keyvalue.value;
            if (columns.get(columnIndex).isNillable()) {
              if (columns.get(columnIndex).getNillValue().equals(val))               val=columns.get(columnIndex).getNillDisplay();
            }
            return val;
          }
        }
      }
      return ""String_Node_Str"";
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  ArrayList<String> columnNames=new ArrayList<String>();
  for (  ComplexTableViewerColumn column : columns) {
    columnNames.add(column.getName());
  }
  viewer.setColumnProperties(columnNames.toArray(new String[columnNames.size()]));
  viewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return editable;
    }
    @SuppressWarnings(""String_Node_Str"") public void modify(    Object element,    String property,    Object value){
      if (value instanceof Integer) {
        if (Integer.valueOf(value.toString()) == -1)         return;
      }
      TableItem item=(TableItem)element;
      Line line=(Line)item.getData();
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      if (columnIndex >= 0 && columnIndex < viewer.getColumnProperties().length) {
        if (isAColumnWithCombo(columnIndex)) {
          String[] attrs=columns.get(columnIndex).getComboValues();
          value=attrs[Integer.parseInt(value.toString())];
        }
        KeyValue kv=line.keyValues.get(columnIndex);
        boolean noChange=kv.value.equals(value.toString());
        kv.value=value.toString();
        viewer.refresh();
        if (!noChange) {
          markDirty();
        }
      }
    }
    public Object getValue(    Object element,    String property){
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      Line line=(Line)element;
      if (isAColumnWithCombo(columnIndex)) {
        String value=line.keyValues.get(columnIndex).value;
        String[] attrs=columns.get(columnIndex).getComboValues();
        return Arrays.asList(attrs).indexOf(value);
      }
      for (      KeyValue keyvalue : line.keyValues) {
        if (property.equals(keyvalue.key)) {
          if (keyvalue.value.equals(""String_Node_Str"")) {
            return columns.get(columnIndex).getNillDisplay();
          }
          return keyvalue.value;
        }
      }
      return null;
    }
    private boolean isAColumnWithCombo(    int columnIdx){
      return columns.get(columnIdx).isCombo();
    }
  }
);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
        Line line=(Line)((IStructuredSelection)viewer.getSelection()).getFirstElement();
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(line);
        viewer.refresh();
        markDirty();
      }
    }
  }
);
  viewer.getTable().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
      btns.remove(pastButton);
    }
  }
);
}",0.994530662473508
147863,"private void create(){
  composite=toolkit.createComposite(parent,SWT.NO_FOCUS);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  composite.setLayout(layout);
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
  textGD=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  text.setLayoutData(textGD);
  button=toolkit.createButton(composite,""String_Node_Str"",SWT.PUSH);
  button.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=new Shell(composite.getDisplay(),SWT.BORDER);
      createValidationRuleExcpressDialog(shell);
      dlg.create();
      dlg.getShell().setMaximized(false);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        text.setText(dlg.getExpression());
      }
    }
  }
);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  button.setToolTipText(""String_Node_Str"");
}","private void create(){
  composite=toolkit.createComposite(parent,SWT.NO_FOCUS);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  composite.setLayout(layout);
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
  textGD=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  text.setLayoutData(textGD);
  button=toolkit.createButton(composite,""String_Node_Str"",SWT.PUSH);
  button.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=new Shell(composite.getDisplay(),SWT.BORDER);
      createValidationRuleExcpressDialog(shell);
      dlg.create();
      dlg.getShell().setMaximized(false);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        text.setText(dlg.getExpression());
      }
    }
  }
);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  button.setToolTipText(Messages.getString(""String_Node_Str""));
}",0.9914821124361158
147864,"public int compare(Viewer theViewer,Object e1,Object e2){
  int cat1=category(e1);
  int cat2=category(e2);
  return cat1 - cat2;
}","@Override public int compare(Viewer theViewer,Object e1,Object e2){
  int cat1=category(e1);
  int cat2=category(e2);
  return cat1 - cat2;
}",0.9632352941176472
147865,"public String isValid(String newText){
  if ((newText == null) || ""String_Node_Str"".equals(newText))   return ""String_Node_Str"";
  return null;
}","public String isValid(String newText){
  if ((newText == null) || ""String_Node_Str"".equals(newText))   return Messages.getString(""String_Node_Str"");
  return null;
}",0.935483870967742
147866,"@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          if (port == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          if (getUrl() == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(Messages.getString(""String_Node_Str""));
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    @Override public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    @Override public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(Messages.getString(""String_Node_Str""));
  addXSDFromLocal.setToolTipText(Messages.getString(""String_Node_Str""));
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(Messages.getString(""String_Node_Str""));
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(Messages.getString(""String_Node_Str""));
    addXSDFromWebSite.setToolTipText(Messages.getString(""String_Node_Str""));
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),Messages.getString(""String_Node_Str""));
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          if (port == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          if (getUrl() == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(Messages.getString(""String_Node_Str""));
  impXSDFromExchange.setToolTipText(Messages.getString(""String_Node_Str""));
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(Messages.getString(""String_Node_Str""));
  addXSDFromInputDlg.setToolTipText(Messages.getString(""String_Node_Str""));
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return Messages.getString(""String_Node_Str"");
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(Messages.getString(""String_Node_Str""));
  delLabelButton.setToolTipText(Messages.getString(""String_Node_Str""));
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}",0.9617581905095022
147867,"public int category(Object element){
  if (element instanceof XSDDesc) {
    return ((XSDDesc)element).getType();
  }
  return -1;
}","@Override public int category(Object element){
  if (element instanceof XSDDesc) {
    return ((XSDDesc)element).getType();
  }
  return -1;
}",0.9635036496350364
147868,"public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save)       page.SaveWithForce(new NullProgressMonitor());
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    sxid=getNewSimpleXpathInputDlg(struc.getForeignKey());
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    String fk=""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (Util.getForeignKeys() != null && fk != null) {
      if (struc.getForeignKey() != null)       Util.getForeignKeys().remove(Util.getConceptFromPath(struc.getForeignKey()));
      Util.getForeignKeys().add(Util.getConceptFromPath(fk));
    }
    struc.setForeignKey(fk);
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save) {
        IEditorPart part=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveEditor(part,false);
      }
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    sxid=getNewSimpleXpathInputDlg(struc.getForeignKey());
    sxid.setBlockOnOpen(true);
    int ret=sxid.open();
    if (ret == Window.CANCEL) {
      return Status.CANCEL_STATUS;
    }
    String fk=""String_Node_Str"".equals(sxid.getXpath()) ? null : sxid.getXpath().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (Util.getForeignKeys() != null && fk != null) {
      if (struc.getForeignKey() != null)       Util.getForeignKeys().remove(Util.getConceptFromPath(struc.getForeignKey()));
      Util.getForeignKeys().add(Util.getConceptFromPath(fk));
    }
    struc.setForeignKey(fk);
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9385370413648048
147869,"protected XtentisPort getPort() throws XtentisException {
  SelectServerDefDialog dialog=new SelectServerDefDialog(getShell());
  if (dialog.open() == IDialogConstants.OK_ID) {
    MDMServerDef serverDef=dialog.getSelectedServerDef();
    this.serverDef=serverDef;
    return RepositoryWebServiceAdapter.getXtentisPort(serverDef);
  }
  return null;
}","@Override protected XtentisPort getPort() throws XtentisException {
  SelectServerDefDialog dialog=new SelectServerDefDialog(getShell());
  if (dialog.open() == IDialogConstants.OK_ID) {
    MDMServerDef serverDef=dialog.getSelectedServerDef();
    this.serverDef=serverDef;
    return RepositoryWebServiceAdapter.getXtentisPort(serverDef);
  }
  return null;
}",0.9859550561797752
147870,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getLocal_mdm_url() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getLocalMdmUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}",0.9995017438963628
147871,"protected XtentisPort getPort(){
  try {
    return Util.getPort(treeObject);
  }
 catch (  XtentisException e) {
    log.error(e.getMessage(),e);
  }
  return null;
}","protected XtentisPort getPort() throws XtentisException {
  return Util.getPort(treeObject);
}",0.5593869731800766
147872,"protected SelectImportedModulesDialog createSelectImportedModulesDialog(){
  return new SelectImportedModulesDialog(getSite().getShell(),xsdSchema,xobject,""String_Node_Str"");
}","protected SelectImportedModulesDialog createSelectImportedModulesDialog(){
  return new SelectImportedModulesDialog(getSite().getShell(),xsdSchema,xobject,Messages.getString(""String_Node_Str""));
}",0.946236559139785
147873,"public void activateEditor(IWorkbenchPage aPage,IStructuredSelection selection){
  initOpenAction();
  openAction.selectionChanged(selection);
  for (  IEditorPart editor : PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditors()) {
    if (editor instanceof XObjectEditor2) {
      if (selection.getFirstElement() == ((XObjectEditorInput2)editor.getEditorInput()).getViewObject()) {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().bringToTop(editor);
      }
    }
    if (editor instanceof XSDEditor2) {
      if (selection.getFirstElement() == ((XSDEditorInput2)editor.getEditorInput()).getViewObject()) {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().bringToTop(editor);
      }
    }
  }
}","public void activateEditor(IWorkbenchPage aPage,IStructuredSelection selection){
  initOpenAction();
  openAction.selectionChanged(selection);
}",0.3120260021668472
147874,"public void update(ViewerCell cell){
  Object element=cell.getElement();
  if (element instanceof XSDDesc) {
    XSDDesc xsdDesc=(XSDDesc)element;
    cell.setText(xsdDesc.getURL());
    cell.setImage(xsdDesc.getImage());
  }
 else {
    cell.setText(""String_Node_Str"");
  }
  super.update(cell);
}","@Override public void update(ViewerCell cell){
  Object element=cell.getElement();
  if (element instanceof XSDDesc) {
    XSDDesc xsdDesc=(XSDDesc)element;
    cell.setText(xsdDesc.getURL());
    cell.setImage(xsdDesc.getImage());
  }
 else {
    cell.setText(""String_Node_Str"");
  }
  super.update(cell);
}",0.9834983498349836
147875,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          if (port == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          if (getUrl() == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          if (port == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          if (getUrl() == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}",0.9994049035943824
147876,"protected void measure(Event event,Object element){
  super.measure(event,element);
}","@Override protected void measure(Event event,Object element){
  super.measure(event,element);
}",0.9444444444444444
147877,"protected Control createButtonBar(Composite parent){
  Control control=super.createButtonBar(parent);
  getButton(IDialogConstants.OK_ID).setEnabled(false);
  delLabelButton.setEnabled(false);
  return control;
}","@Override protected Control createButtonBar(Composite parent){
  Control control=super.createButtonBar(parent);
  getButton(IDialogConstants.OK_ID).setEnabled(false);
  delLabelButton.setEnabled(false);
  return control;
}",0.976958525345622
147878,"@Override protected void createViewer(){
  super.createTable();
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  table.setLayoutData(gd);
  gd.heightHint=80;
  Composite stepUpDownComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  stepUpDownComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  GridLayout layout=new GridLayout(8,false);
  layout.marginTop=0;
  layout.marginBottom=0;
  layout.marginHeight=0;
  stepUpDownComposite.setLayout(layout);
  addButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  addButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  addButton.setToolTipText(""String_Node_Str"");
  if (isXpath()) {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_NEWXPATH.getPath()));
  }
 else {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  }
  addButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> list=(List<Line>)getViewer().getInput();
      Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getInitValues());
      list.add(line);
      viewer.setSelection(null);
      viewer.refresh();
      viewer.getTable().select(viewer.getTable().getItemCount() - 1);
      markDirty();
    }
  }
);
  if (isAddMulti()) {
    Button selNewPathButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
    selNewPathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    selNewPathButton.setToolTipText(""String_Node_Str"");
    selNewPathButton.setImage(ImageCache.getCreatedImage(EImage.SELECT_NEWXPATH.getPath()));
    selNewPathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      @SuppressWarnings(""String_Node_Str"") public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        xpathDialog=getNewXpathDlgInstance();
        xpathDialog.setConceptName(conceptName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          datamodelName=xpathDialog.getDataModelName();
          String[] xpaths=xpathDialog.getXpath().split(""String_Node_Str"");
          for (          String xpath : xpaths) {
            List<Line> list=(List<Line>)getViewer().getInput();
            Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getLineValues(xpath,0));
            list.add(line);
          }
          viewer.setSelection(null);
          viewer.refresh();
          viewer.getTable().select(viewer.getTable().getItemCount() - 1);
          markDirty();
        }
      }
    }
);
  }
  deleteButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteButton.setToolTipText(""String_Node_Str"");
  deleteButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> input=(List<Line>)viewer.getInput();
      TableItem[] items=viewer.getTable().getSelection();
      for (int i=0; i < items.length; i++) {
        input.remove(items[i].getData());
      }
      viewer.setInput(input);
      markDirty();
    }
  }
);
  deleteButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  Button deleteAllButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteAllButton.setToolTipText(""String_Node_Str"");
  deleteAllButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteAllButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> items=(List<Line>)viewer.getInput();
      items.clear();
      viewer.refresh();
      markDirty();
    }
  }
);
  deleteAllButton.setImage(ImageCache.getCreatedImage(EImage.PROGRESS_REMALL.getPath()));
  upButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  upButton.setToolTipText(""String_Node_Str"");
  upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
  upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  upButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index > 0 && index < viewer.getTable().getItemCount()) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index - 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  downButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  downButton.setToolTipText(""String_Node_Str"");
  downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
  downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  downButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount() - 1) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index + 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  copyButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  copyButton.setToolTipText(""String_Node_Str"");
  copyButton.setImage(ImageCache.getCreatedImage(EImage.COPY.getPath()));
  copyButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  copyButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int[] indexs=viewer.getTable().getSelectionIndices();
      List<Line> copyLines=new ArrayList<Line>();
      for (      int index : indexs) {
        if (index >= 0 && index <= viewer.getTable().getItemCount() - 1) {
          List<Line> items=(List<Line>)viewer.getInput();
          Line line=items.get(index);
          Line copyLine=line.clone();
          copyLines.add(copyLine);
        }
      }
      if (indexs.length > 0) {
        HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
        if (btns != null)         for (        Button btn : btns) {
          if (btn != null)           btn.setEnabled(true);
        }
        WorkbenchClipboard.getWorkbenchClipboard().setLines(String.valueOf(columns.size()),copyLines);
      }
    }
  }
);
  pastButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  pastButton.setToolTipText(""String_Node_Str"");
  pastButton.setImage(ImageCache.getCreatedImage(EImage.PASTE.getPath()));
  pastButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  pastButton.setEnabled(false);
  pastButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      if (mainPage != null) {
        mainPage.setComitting(true);
      }
      boolean dirty=false;
      List<Line> items=(List<Line>)viewer.getInput();
      List<Line> cacheLine=WorkbenchClipboard.getWorkbenchClipboard().getLines(String.valueOf(columns.size()));
      List<Line> coloneLine=new ArrayList<Line>();
      for (      Line l : cacheLine) {
        coloneLine.add(l.clone());
      }
      if (cacheLine.size() > 0) {
        items.addAll(coloneLine);
        dirty=true;
      }
      viewer.refresh();
      if (mainPage != null) {
        mainPage.setComitting(false);
      }
      if (dirty)       markDirty();
    }
  }
);
  HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
  if (btns == null) {
    btns=new HashSet<Button>();
    pastBtns.put(String.valueOf(columns.size()),btns);
  }
  btns.add(pastButton);
  CellEditor[] editors=new CellEditor[columns.size()];
  for (int i=0; i < columns.size(); i++) {
    if (columns.get(i).isText()) {
      editors[i]=new TextCellEditor(table);
    }
 else     if (columns.get(i).isCombo()) {
      editors[i]=new ComboBoxCellEditor(table,((ComplexTableViewerColumn)columns.get(i)).getComboValues(),SWT.READ_ONLY);
    }
 else     if (columns.get(i).isXPATH()) {
      editors[i]=new XpathCellEditor(table);
    }
 else     if (columns.get(i).isMultiMessage()) {
      editors[i]=new MultiMessageEditor(table);
      multiMsg.setColumn(table.getColumn(i));
    }
 else     if (columns.get(i).isValidationRule()) {
      editors[i]=new ValidationRuleEditor(table);
      validationRule.setColumn(table.getColumn(i));
    }
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    @SuppressWarnings(""String_Node_Str"") public Object[] getElements(    Object inputElement){
      ArrayList<Line> lines=(ArrayList<Line>)inputElement;
      return lines.toArray(new Line[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      Line line=(Line)element;
      if (columnIndex >= 0 && columnIndex < columns.size()) {
        for (        KeyValue keyvalue : line.keyValues) {
          if (keyvalue.key.equals(columns.get(columnIndex).getName())) {
            String val=keyvalue.value;
            if (columns.get(columnIndex).isNillable()) {
              if (columns.get(columnIndex).getNillValue().equals(val))               val=columns.get(columnIndex).getNillDisplay();
            }
            return val;
          }
        }
      }
      return ""String_Node_Str"";
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  ArrayList<String> columnNames=new ArrayList<String>();
  for (  ComplexTableViewerColumn column : columns) {
    columnNames.add(column.getName());
  }
  viewer.setColumnProperties(columnNames.toArray(new String[columnNames.size()]));
  viewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return editable;
    }
    @SuppressWarnings(""String_Node_Str"") public void modify(    Object element,    String property,    Object value){
      if (value instanceof Integer) {
        if (Integer.valueOf(value.toString()) == -1)         return;
      }
      TableItem item=(TableItem)element;
      Line line=(Line)item.getData();
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      if (columnIndex >= 0 && columnIndex < viewer.getColumnProperties().length) {
        if (isAColumnWithCombo(columnIndex)) {
          String[] attrs=columns.get(columnIndex).getComboValues();
          value=attrs[Integer.parseInt(value.toString())];
        }
        KeyValue kv=line.keyValues.get(columnIndex);
        boolean noChange=kv.value.equals(value.toString());
        kv.value=value.toString();
        viewer.refresh();
        if (!noChange) {
          markDirty();
        }
      }
    }
    public Object getValue(    Object element,    String property){
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      Line line=(Line)element;
      if (isAColumnWithCombo(columnIndex)) {
        String value=line.keyValues.get(columnIndex).value;
        String[] attrs=columns.get(columnIndex).getComboValues();
        return Arrays.asList(attrs).indexOf(value);
      }
      for (      KeyValue keyvalue : line.keyValues) {
        if (property.equals(keyvalue.key)) {
          if (keyvalue.value.equals(""String_Node_Str"")) {
            return columns.get(columnIndex).getNillDisplay();
          }
          return keyvalue.value;
        }
      }
      return null;
    }
    private boolean isAColumnWithCombo(    int columnIdx){
      return columns.get(columnIdx).isCombo();
    }
  }
);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
        Line line=(Line)((IStructuredSelection)viewer.getSelection()).getFirstElement();
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(line);
        viewer.refresh();
        markDirty();
      }
    }
  }
);
  viewer.getTable().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
      btns.remove(pastButton);
    }
  }
);
}","@Override protected void createViewer(){
  super.createTable();
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  table.setLayoutData(gd);
  gd.heightHint=80;
  Composite stepUpDownComposite=toolkit.createComposite(mainComposite,SWT.NONE);
  stepUpDownComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  GridLayout layout=new GridLayout(8,false);
  layout.marginTop=0;
  layout.marginBottom=0;
  layout.marginHeight=0;
  stepUpDownComposite.setLayout(layout);
  addButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  addButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  addButton.setToolTipText(""String_Node_Str"");
  if (isXpath()) {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_NEWXPATH.getPath()));
  }
 else {
    addButton.setImage(ImageCache.getCreatedImage(EImage.ADD_OBJ.getPath()));
  }
  addButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> list=(List<Line>)getViewer().getInput();
      Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getInitValues());
      list.add(line);
      viewer.setSelection(null);
      viewer.refresh();
      viewer.getTable().select(viewer.getTable().getItemCount() - 1);
      markDirty();
    }
  }
);
  if (isAddMulti()) {
    Button selNewPathButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
    selNewPathButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    selNewPathButton.setToolTipText(""String_Node_Str"");
    selNewPathButton.setImage(ImageCache.getCreatedImage(EImage.SELECT_NEWXPATH.getPath()));
    selNewPathButton.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      @SuppressWarnings(""String_Node_Str"") public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        xpathDialog=getNewXpathDlgInstance();
        xpathDialog.setConceptName(conceptName);
        xpathDialog.setBlockOnOpen(true);
        xpathDialog.open();
        if (xpathDialog.getReturnCode() == Window.OK) {
          datamodelName=xpathDialog.getDataModelName();
          String[] xpaths=xpathDialog.getXpath().split(""String_Node_Str"");
          for (          String xpath : xpaths) {
            List<Line> list=(List<Line>)getViewer().getInput();
            Line line=new Line(columns.toArray(new ComplexTableViewerColumn[columns.size()]),getLineValues(xpath,0));
            list.add(line);
          }
          viewer.setSelection(null);
          viewer.refresh();
          viewer.getTable().select(viewer.getTable().getItemCount() - 1);
          markDirty();
        }
      }
    }
);
  }
  deleteButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteButton.setToolTipText(""String_Node_Str"");
  deleteButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> input=(List<Line>)viewer.getInput();
      TableItem[] items=viewer.getTable().getSelection();
      for (int i=0; i < items.length; i++) {
        input.remove(items[i].getData());
      }
      viewer.setInput(input);
      markDirty();
    }
  }
);
  deleteButton.setImage(ImageCache.getCreatedImage(EImage.DELETE_OBJ.getPath()));
  Button deleteAllButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  deleteAllButton.setToolTipText(""String_Node_Str"");
  deleteAllButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  deleteAllButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      List<Line> items=(List<Line>)viewer.getInput();
      items.clear();
      viewer.refresh();
      markDirty();
    }
  }
);
  deleteAllButton.setImage(ImageCache.getCreatedImage(EImage.PROGRESS_REMALL.getPath()));
  upButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  upButton.setToolTipText(""String_Node_Str"");
  upButton.setImage(ImageCache.getCreatedImage(EImage.PREV_NAV.getPath()));
  upButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  upButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index > 0 && index < viewer.getTable().getItemCount()) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index - 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  downButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  downButton.setToolTipText(""String_Node_Str"");
  downButton.setImage(ImageCache.getCreatedImage(EImage.NEXT_NAV.getPath()));
  downButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  downButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      int index=viewer.getTable().getSelectionIndex();
      if (index >= 0 && index < viewer.getTable().getItemCount() - 1) {
        if (mainPage != null) {
          mainPage.setComitting(true);
        }
        List<Line> items=(List<Line>)viewer.getInput();
        Line line=items.get(index);
        items.remove(index);
        items.add(index + 1,line);
        viewer.refresh();
        if (mainPage != null) {
          mainPage.setComitting(false);
        }
        markDirty();
      }
    }
  }
);
  copyButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  copyButton.setToolTipText(""String_Node_Str"");
  copyButton.setImage(ImageCache.getCreatedImage(EImage.COPY.getPath()));
  copyButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  copyButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int[] indexs=viewer.getTable().getSelectionIndices();
      List<Line> copyLines=new ArrayList<Line>();
      for (      int index : indexs) {
        if (index >= 0 && index <= viewer.getTable().getItemCount() - 1) {
          List<Line> items=(List<Line>)viewer.getInput();
          Line line=items.get(index);
          Line copyLine=line.clone();
          copyLines.add(copyLine);
        }
      }
      if (indexs.length > 0) {
        HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
        if (btns != null)         for (        Button btn : btns) {
          if (btn != null)           btn.setEnabled(true);
        }
        WorkbenchClipboard.getWorkbenchClipboard().setLines(String.valueOf(columns.size()),copyLines);
      }
    }
  }
);
  pastButton=toolkit.createButton(stepUpDownComposite,""String_Node_Str"",SWT.PUSH | SWT.CENTER);
  pastButton.setToolTipText(""String_Node_Str"");
  pastButton.setImage(ImageCache.getCreatedImage(EImage.PASTE.getPath()));
  pastButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
  pastButton.setEnabled(false);
  pastButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      if (mainPage != null) {
        mainPage.setComitting(true);
      }
      boolean dirty=false;
      List<Line> items=(List<Line>)viewer.getInput();
      List<Line> cacheLine=WorkbenchClipboard.getWorkbenchClipboard().getLines(String.valueOf(columns.size()));
      List<Line> coloneLine=new ArrayList<Line>();
      for (      Line l : cacheLine) {
        coloneLine.add(l.clone());
      }
      if (cacheLine.size() > 0) {
        items.addAll(coloneLine);
        dirty=true;
      }
      viewer.refresh();
      if (mainPage != null) {
        mainPage.setComitting(false);
      }
      if (dirty)       markDirty();
    }
  }
);
  HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
  if (btns == null) {
    btns=new HashSet<Button>();
    pastBtns.put(String.valueOf(columns.size()),btns);
  }
  btns.add(pastButton);
  CellEditor[] editors=new CellEditor[columns.size()];
  for (int i=0; i < columns.size(); i++) {
    if (columns.get(i).isText()) {
      editors[i]=new TextCellEditor(table);
    }
 else     if (columns.get(i).isCombo()) {
      editors[i]=new ComboBoxCellEditor(table,((ComplexTableViewerColumn)columns.get(i)).getComboValues(),SWT.READ_ONLY);
    }
 else     if (columns.get(i).isXPATH()) {
      editors[i]=new XpathCellEditor(table);
    }
 else     if (columns.get(i).isMultiMessage()) {
      editors[i]=new MultiMessageEditor(table);
      multiMsg.setColumn(table.getColumn(i));
    }
 else     if (columns.get(i).isValidationRule()) {
      editors[i]=createValidationRuleEditor();
      validationRule.setColumn(table.getColumn(i));
    }
  }
  viewer.setCellEditors(editors);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    @SuppressWarnings(""String_Node_Str"") public Object[] getElements(    Object inputElement){
      ArrayList<Line> lines=(ArrayList<Line>)inputElement;
      return lines.toArray(new Line[lines.size()]);
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      Line line=(Line)element;
      if (columnIndex >= 0 && columnIndex < columns.size()) {
        for (        KeyValue keyvalue : line.keyValues) {
          if (keyvalue.key.equals(columns.get(columnIndex).getName())) {
            String val=keyvalue.value;
            if (columns.get(columnIndex).isNillable()) {
              if (columns.get(columnIndex).getNillValue().equals(val))               val=columns.get(columnIndex).getNillDisplay();
            }
            return val;
          }
        }
      }
      return ""String_Node_Str"";
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  ArrayList<String> columnNames=new ArrayList<String>();
  for (  ComplexTableViewerColumn column : columns) {
    columnNames.add(column.getName());
  }
  viewer.setColumnProperties(columnNames.toArray(new String[columnNames.size()]));
  viewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return editable;
    }
    @SuppressWarnings(""String_Node_Str"") public void modify(    Object element,    String property,    Object value){
      if (value instanceof Integer) {
        if (Integer.valueOf(value.toString()) == -1)         return;
      }
      TableItem item=(TableItem)element;
      Line line=(Line)item.getData();
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      if (columnIndex >= 0 && columnIndex < viewer.getColumnProperties().length) {
        if (isAColumnWithCombo(columnIndex)) {
          String[] attrs=columns.get(columnIndex).getComboValues();
          value=attrs[Integer.parseInt(value.toString())];
        }
        KeyValue kv=line.keyValues.get(columnIndex);
        boolean noChange=kv.value.equals(value.toString());
        kv.value=value.toString();
        viewer.refresh();
        if (!noChange) {
          markDirty();
        }
      }
    }
    public Object getValue(    Object element,    String property){
      int columnIndex=Arrays.asList(viewer.getColumnProperties()).indexOf(property);
      Line line=(Line)element;
      if (isAColumnWithCombo(columnIndex)) {
        String value=line.keyValues.get(columnIndex).value;
        String[] attrs=columns.get(columnIndex).getComboValues();
        return Arrays.asList(attrs).indexOf(value);
      }
      for (      KeyValue keyvalue : line.keyValues) {
        if (property.equals(keyvalue.key)) {
          if (keyvalue.value.equals(""String_Node_Str"")) {
            return columns.get(columnIndex).getNillDisplay();
          }
          return keyvalue.value;
        }
      }
      return null;
    }
    private boolean isAColumnWithCombo(    int columnIdx){
      return columns.get(columnIdx).isCombo();
    }
  }
);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
    }
    @SuppressWarnings(""String_Node_Str"") public void keyReleased(    KeyEvent e){
      if ((e.stateMask == 0) && (e.character == SWT.DEL) && (viewer.getSelection() != null)) {
        Line line=(Line)((IStructuredSelection)viewer.getSelection()).getFirstElement();
        List<Line> items=(List<Line>)viewer.getInput();
        items.remove(line);
        viewer.refresh();
        markDirty();
      }
    }
  }
);
  viewer.getTable().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      HashSet<Button> btns=pastBtns.get(String.valueOf(columns.size()));
      btns.remove(pastButton);
    }
  }
);
}",0.9994844829363853
147879,"@Override public void widgetSelected(SelectionEvent e){
  Shell shell=new Shell(composite.getDisplay(),SWT.BORDER);
  dlg=new ValidationRuleExcpressDialog(shell,treeParent,""String_Node_Str"",text.getText(),conceptName,false,true);
  dlg.create();
  dlg.getShell().setMaximized(false);
  dlg.setBlockOnOpen(true);
  int ret=dlg.open();
  if (ret == Window.OK) {
    text.setText(dlg.getExpression());
  }
}","@Override public void widgetSelected(SelectionEvent e){
  Shell shell=new Shell(composite.getDisplay(),SWT.BORDER);
  createValidationRuleExcpressDialog(shell);
  dlg.create();
  dlg.getShell().setMaximized(false);
  dlg.setBlockOnOpen(true);
  int ret=dlg.open();
  if (ret == Window.OK) {
    text.setText(dlg.getExpression());
  }
}",0.8903924221921515
147880,"private void create(){
  composite=toolkit.createComposite(parent,SWT.NO_FOCUS);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  composite.setLayout(layout);
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
  textGD=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  text.setLayoutData(textGD);
  button=toolkit.createButton(composite,""String_Node_Str"",SWT.PUSH);
  button.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=new Shell(composite.getDisplay(),SWT.BORDER);
      dlg=new ValidationRuleExcpressDialog(shell,treeParent,""String_Node_Str"",text.getText(),conceptName,false,true);
      dlg.create();
      dlg.getShell().setMaximized(false);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        text.setText(dlg.getExpression());
      }
    }
  }
);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  button.setToolTipText(""String_Node_Str"");
}","private void create(){
  composite=toolkit.createComposite(parent,SWT.NO_FOCUS);
  GridLayout layout=new GridLayout(2,false);
  layout.marginWidth=0;
  layout.marginLeft=0;
  layout.marginTop=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  composite.setLayout(layout);
  text=toolkit.createText(composite,""String_Node_Str"",SWT.BORDER | SWT.MULTI | SWT.LEFT);
  textGD=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  text.setLayoutData(textGD);
  button=toolkit.createButton(composite,""String_Node_Str"",SWT.PUSH);
  button.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Shell shell=new Shell(composite.getDisplay(),SWT.BORDER);
      createValidationRuleExcpressDialog(shell);
      dlg.create();
      dlg.getShell().setMaximized(false);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        text.setText(dlg.getExpression());
      }
    }
  }
);
  button.setImage(ImageCache.getCreatedImage(EImage.DOTS_BUTTON.getPath()));
  button.setToolTipText(""String_Node_Str"");
}",0.9662077596996246
147881,"public String[] getGlobalInfos(){
  if (propSection.getTreeObject() == null)   return new String[0];
  if (propSection.getTreeObject().getServerRoot() == null) {
    if (typeCode == TreeObject.ROLE)     return MDMRepositoryViewExtensionService.findAllRoleNames().toArray(new String[0]);
    if (typeCode == TreeObject.WORKFLOW_PROCESS)     return MDMRepositoryViewExtensionService.findAllWorkflowNames().toArray(new String[0]);
  }
  return Util.getChildren(propSection.getTreeObject().getServerRoot(),typeCode).toArray(new String[0]);
}","public String[] getGlobalInfos(){
  if (propSection.getTreeObject() == null)   return new String[0];
  if (propSection.getTreeObject().getServerRoot() == null) {
    if (typeCode == TreeObject.ROLE)     return MDMRepositoryViewExtensionService.findAllRoleNames().toArray(new String[0]);
    if (typeCode == TreeObject.WORKFLOW_PROCESS)     return MDMRepositoryViewExtensionService.findAllWorkflowNames().toArray(new String[0]);
    if (typeCode == TreeObject.DATA_MODEL)     return MDMRepositoryViewExtensionService.findAllDataModelNames().toArray(new String[0]);
  }
  return Util.getChildren(propSection.getTreeObject().getServerRoot(),typeCode).toArray(new String[0]);
}",0.7801652892561983
147882,"public SelectImportedModulesDialog(Shell parentShell,XSDSchema schema,TreeObject treeObj,String title){
  super(parentShell);
  this.shell=parentShell;
  this.treeObject=treeObj;
  this.title=title;
  this.xsdSchema=schema;
  String endpointIpAddress=treeObject.getEndpointIpAddress();
  if (endpointIpAddress != null && endpointIpAddress.length() > 0) {
    local_mdm_url=endpointIpAddress + ""String_Node_Str"";
  }
}","public SelectImportedModulesDialog(Shell parentShell,XSDSchema schema,TreeObject treeObj,String title){
  super(parentShell);
  this.shell=parentShell;
  this.treeObject=treeObj;
  this.title=title;
  this.xsdSchema=schema;
  String endpointIpAddress=treeObject.getEndpointIpAddress();
  if (endpointIpAddress != null && endpointIpAddress.length() > 0) {
    url=endpointIpAddress + ""String_Node_Str"";
  }
}",0.9878640776699028
147883,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getLocalMdmUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          if (port == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          if (getUrl() == null) {
            MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getUrl() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}",0.9764978080857282
147884,"private void removeServerObject(IRepositoryViewObject viewObj){
  try {
    Item item=viewObj.getProperty().getItem();
    IEditorReference ref=RepositoryResourceUtil.isOpenedInEditor((IRepositoryViewObject)viewObj);
    if (ref != null) {
      RepositoryResourceUtil.closeEditor(ref,true);
    }
    MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
    factory.deleteObjectLogical(viewObj);
    CommandManager.getInstance().pushCommand(ICommand.CMD_DELETE,viewObj.getId(),serverObj.getName());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}","private void removeServerObject(IRepositoryViewObject viewObj){
  try {
    Item item=viewObj.getProperty().getItem();
    IEditorReference ref=RepositoryResourceUtil.isOpenedInEditor((IRepositoryViewObject)viewObj);
    if (ref != null) {
      RepositoryResourceUtil.closeEditor(ref,true);
    }
    MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
    factory.deleteObjectLogical(viewObj);
    CommandManager.getInstance().pushCommand(ICommand.CMD_DELETE,viewObj.getId(),serverObj.getName());
  }
 catch (  BusinessException e) {
    MessageDialog.openError(getShell(),Messages.Common_Error,e.getMessage());
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}",0.8763523956723338
147885,"private void setAnnotationActions2(Object obj,IMenuManager manager){
  if (obj instanceof XSDElementDeclaration) {
    manager.add(setAnnotationLabelAction);
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLookupFieldsAction);
    manager.add(setAnnotationPrimaryKeyInfoAction);
  }
  if (obj instanceof XSDParticle) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLabelAction);
  }
  if (Util.IsEnterPrise()) {
    manager.add(new Separator());
    manager.add(setAnnotationWriteAction);
    manager.add(setAnnotationNoAction);
    if (obj instanceof XSDParticle) {
      manager.add(visibleRuleAction);
      manager.add(defaultValueRuleAction);
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
}","private void setAnnotationActions2(Object obj,IMenuManager manager){
  if (obj instanceof XSDElementDeclaration) {
    manager.add(setAnnotationLabelAction);
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLookupFieldsAction);
    manager.add(setAnnotationPrimaryKeyInfoAction);
  }
  if (obj instanceof XSDParticle) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLabelAction);
  }
  if (Util.IsEnterPrise()) {
    manager.add(new Separator());
    manager.add(setAnnotationWriteAction);
    manager.add(setAnnotationNoAction);
    if (obj instanceof XSDParticle) {
      manager.add(visibleRuleAction);
      manager.add(defaultValueRuleAction);
      defaultValueRuleAction.setEnabled(!isAutoGeneratedType((XSDParticle)obj));
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
}",0.962929061784897
147886,"private void setAnnotationActions(Object obj,IMenuManager manager){
  if (obj instanceof XSDElementDeclaration) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLookupFieldsAction);
    manager.add(setAnnotationPrimaryKeyInfoAction);
  }
  if (obj instanceof XSDParticle) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLabelAction);
    manager.add(setAnnotationForeignKeyAction);
    manager.add(setAnnotationFKFilterAction);
    manager.add(setAnnotationForeignKeyInfoAction);
  }
  if (Util.IsEnterPrise()) {
    manager.add(new Separator());
    manager.add(setAnnotationWriteAction);
    manager.add(setAnnotationNoAction);
    if (obj instanceof XSDParticle) {
      XSDAnnotationsStructure struc=getStructureByActiveItem();
      manager.add(visibleRuleAction);
      if (struc != null) {
        if (struc.getVisibleRule() != null) {
          XSDVisibleRuleAction deleteVisibleRuleAction=new XSDVisibleRuleAction(this,dataModelName,true);
          manager.add(deleteVisibleRuleAction);
        }
      }
      manager.add(defaultValueRuleAction);
      if (struc != null) {
        if (struc.getDefaultValueRule() != null) {
          XSDDefaultValueRuleAction deleteDefaultRuleAction=new XSDDefaultValueRuleAction(this,dataModelName,true);
          manager.add(deleteDefaultRuleAction);
        }
      }
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
}","private void setAnnotationActions(Object obj,IMenuManager manager){
  if (obj instanceof XSDElementDeclaration) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLookupFieldsAction);
    manager.add(setAnnotationPrimaryKeyInfoAction);
  }
  if (obj instanceof XSDParticle) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLabelAction);
    manager.add(setAnnotationForeignKeyAction);
    manager.add(setAnnotationFKFilterAction);
    manager.add(setAnnotationForeignKeyInfoAction);
  }
  if (Util.IsEnterPrise()) {
    manager.add(new Separator());
    manager.add(setAnnotationWriteAction);
    manager.add(setAnnotationNoAction);
    if (obj instanceof XSDParticle) {
      XSDAnnotationsStructure struc=getStructureByActiveItem();
      manager.add(visibleRuleAction);
      if (struc != null) {
        if (struc.getVisibleRule() != null) {
          XSDVisibleRuleAction deleteVisibleRuleAction=new XSDVisibleRuleAction(this,dataModelName,true);
          manager.add(deleteVisibleRuleAction);
        }
      }
      boolean enabled=!isAutoGeneratedType((XSDParticle)obj);
      manager.add(defaultValueRuleAction);
      defaultValueRuleAction.setEnabled(enabled);
      if (struc != null) {
        if (struc.getDefaultValueRule() != null) {
          XSDDefaultValueRuleAction deleteDefaultRuleAction=new XSDDefaultValueRuleAction(this,dataModelName,true);
          manager.add(deleteDefaultRuleAction);
          deleteDefaultRuleAction.setEnabled(enabled);
        }
      }
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
}",0.953778023802934
147887,"public ISelection getSelection(){
  List<Object> selectedObjects=action.getSelectedObject();
  if (!selectedObjects.isEmpty()) {
    Object object=selectedObjects.get(0);
    if (object instanceof IRepositoryViewObject) {
      IRepositoryViewObject viewObj=(IRepositoryViewObject)object;
      RepositoryNode node=RepositoryResourceUtil.convertToNode(viewObj);
      return new StructuredSelection(node);
    }
  }
  return new StructuredSelection();
}","public ISelection getSelection(){
  List<Object> selectedObjects=action.getSelectedObject();
  if (!selectedObjects.isEmpty()) {
    List<RepositoryNode> selectedNodes=new ArrayList<RepositoryNode>();
    for (    Object object : selectedObjects) {
      if (object instanceof IRepositoryViewObject) {
        IRepositoryViewObject viewObj=(IRepositoryViewObject)object;
        RepositoryNode node=RepositoryResourceUtil.convertToNode(viewObj);
        if (node != null) {
          selectedNodes.add(node);
        }
      }
    }
    return new StructuredSelection(selectedNodes);
  }
  return new StructuredSelection();
}",0.37291280148423
147888,"protected void showDeployStatus(IStatus status){
  String prompt;
  if (status.getSeverity() < IStatus.ERROR) {
    prompt=Messages.bind(Messages.AbstractDeployAction_deployMessage,status.getChildren().length);
  }
 else {
    prompt=Messages.bind(Messages.AbstractDeployAction_deployFailure,status.getChildren().length);
  }
  MultiStatusDialog dialog=new MultiStatusDialog(getShell(),prompt,status);
  dialog.open();
}","protected void showDeployStatus(IStatus status){
  String prompt;
  int count=0;
  if (status.isMultiStatus()) {
    for (    IStatus child : status.getChildren()) {
      if (child.isMultiStatus()) {
        count+=child.getChildren().length;
      }
 else {
        count++;
      }
    }
  }
  if (status.getSeverity() < IStatus.ERROR) {
    prompt=Messages.bind(Messages.AbstractDeployAction_deployMessage,count);
  }
 else {
    prompt=Messages.bind(Messages.AbstractDeployAction_deployFailure,count);
  }
  MultiStatusDialog dialog=new MultiStatusDialog(getShell(),prompt,status);
  dialog.open();
}",0.7141463414634146
147889,"public static String formatErrorMessage(String sourceMessage){
  String result=null;
  Pattern pattern=null;
  Matcher matcher=null;
  String saxExceptionPattern=""String_Node_Str"";
  String nestedExceptionPattern=""String_Node_Str"";
  pattern=Pattern.compile(saxExceptionPattern);
  matcher=pattern.matcher(sourceMessage);
  result=matcher.replaceFirst(""String_Node_Str"");
  pattern=Pattern.compile(nestedExceptionPattern);
  matcher=pattern.matcher(result);
  result=matcher.replaceFirst(""String_Node_Str"");
  return result;
}","public static String formatErrorMessage(String sourceMessage){
  String saxExceptionPattern=""String_Node_Str"";
  String nestedExceptionPattern=""String_Node_Str"";
  Pattern pattern=Pattern.compile(saxExceptionPattern);
  Matcher matcher=pattern.matcher(sourceMessage);
  String result=matcher.replaceFirst(""String_Node_Str"");
  pattern=Pattern.compile(nestedExceptionPattern);
  matcher=pattern.matcher(result);
  result=matcher.replaceFirst(""String_Node_Str"");
  return result;
}",0.290547263681592
147890,"public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=new LinkedList<AbstractRepositoryAction>();
  Item item=viewObj.getProperty().getItem();
  if (item instanceof MDMItem) {
    if (item instanceof ContainerItem) {
      FolderType type=((FolderItem)item).getType();
switch (type.getValue()) {
case FolderType.SYSTEM_FOLDER:
        actions.add(createFolderAction);
      addAction(actions,pasteAction,viewObj);
    actions.add(importServerObjectAction);
  actions.add(importObjectAction);
break;
case FolderType.STABLE_SYSTEM_FOLDER:
break;
case FolderType.FOLDER:
actions.add(createFolderAction);
actions.add(removeFromRepositoryAction);
addAction(actions,pasteAction,viewObj);
break;
}
}
 else if (item instanceof MDMServerObjectItem) {
actions.add(removeFromRepositoryAction);
actions.add(mdmEditPropertyAction);
actions.add(openVersionAction);
addAction(actions,copyAction,viewObj);
addAction(actions,pasteAction,viewObj);
actions.add(duplicateAction);
}
}
actions.add(refreshAction);
actions.add(exportObjectAction);
for (IRepositoryNodeActionProvider provider : getExtendActionProviders()) {
List<AbstractRepositoryAction> providerActions=provider.getActions(viewObj);
if (providerActions != null) {
actions.addAll(providerActions);
}
}
if (viewObj.getRepositoryObjectType() != null && IServerObjectRepositoryType.TYPE_EVENTMANAGER.equals(viewObj.getRepositoryObjectType())) {
actions.add(emAction);
}
return actions;
}","public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=new LinkedList<AbstractRepositoryAction>();
  Item item=viewObj.getProperty().getItem();
  if (item instanceof MDMItem) {
    if (item instanceof ContainerItem) {
      FolderType type=((FolderItem)item).getType();
switch (type.getValue()) {
case FolderType.SYSTEM_FOLDER:
        actions.add(createFolderAction);
      addAction(actions,pasteAction,viewObj);
    actions.add(importServerObjectAction);
  actions.add(importObjectAction);
break;
case FolderType.STABLE_SYSTEM_FOLDER:
break;
case FolderType.FOLDER:
actions.add(createFolderAction);
actions.add(removeFromRepositoryAction);
addAction(actions,pasteAction,viewObj);
break;
}
}
 else if (item instanceof MDMServerObjectItem) {
actions.add(removeFromRepositoryAction);
actions.add(mdmEditPropertyAction);
actions.add(openVersionAction);
addAction(actions,copyAction,viewObj);
addAction(actions,pasteAction,viewObj);
actions.add(duplicateAction);
}
 else if (item instanceof WorkspaceRootItem) {
actions.add(importObjectAction);
}
}
actions.add(refreshAction);
actions.add(exportObjectAction);
for (IRepositoryNodeActionProvider provider : getExtendActionProviders()) {
List<AbstractRepositoryAction> providerActions=provider.getActions(viewObj);
if (providerActions != null) {
actions.addAll(providerActions);
}
}
if (viewObj.getRepositoryObjectType() != null && IServerObjectRepositoryType.TYPE_EVENTMANAGER.equals(viewObj.getRepositoryObjectType())) {
actions.add(emAction);
}
return actions;
}",0.9733246584255042
147891,"@Override public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=super.getActions(viewObj);
  if (RepositoryResourceUtil.hasContainerItem(viewObj,FolderType.SYSTEM_FOLDER_LITERAL,FolderType.FOLDER_LITERAL)) {
    actions.add(addAction);
  }
  if (viewObj.getProperty().getItem() instanceof MDMServerObjectItem) {
    actions.add(renameAction);
    actions.add(deployToAction);
    addAction(actions,deployToLastServerAction,viewObj);
    actions.add(exportDataClusterAction);
  }
  actions.add(deployAllAction);
  actions.add(importDataClusterAction);
  return actions;
}","@Override public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=super.getActions(viewObj);
  if (RepositoryResourceUtil.hasContainerItem(viewObj,FolderType.SYSTEM_FOLDER_LITERAL,FolderType.FOLDER_LITERAL)) {
    actions.add(addAction);
  }
  if (viewObj.getProperty().getItem() instanceof MDMServerObjectItem) {
    actions.add(renameAction);
    actions.add(deployToAction);
    addAction(actions,deployToLastServerAction,viewObj);
    actions.add(exportDataClusterAction);
    actions.add(importDataClusterAction);
  }
  actions.add(deployAllAction);
  return actions;
}",0.9311424100156496
147892,"public void activateEditor(IWorkbenchPage aPage,IStructuredSelection selection){
  initOpenAction();
  openAction.selectionChanged(selection);
  openAction.run();
}","public void activateEditor(IWorkbenchPage aPage,IStructuredSelection selection){
  initOpenAction();
  openAction.selectionChanged(selection);
  for (  IEditorPart editor : PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditors()) {
    if (editor instanceof XObjectEditor2) {
      if (selection.getFirstElement() == ((XObjectEditorInput2)editor.getEditorInput()).getViewObject()) {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().bringToTop(editor);
      }
    }
    if (editor instanceof XSDEditor2) {
      if (selection.getFirstElement() == ((XSDEditorInput2)editor.getEditorInput()).getViewObject()) {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().bringToTop(editor);
      }
    }
  }
}",0.3266171792152704
147893,"public IStructuredSelection findSelection(IEditorInput input){
  if (input instanceof IRepositoryViewEditorInput) {
    IRepositoryViewEditorInput rInput=(IRepositoryViewEditorInput)input;
    return new StructuredSelection(rInput.getViewObject());
  }
  return StructuredSelection.EMPTY;
}","public IStructuredSelection findSelection(IEditorInput input){
  if (input instanceof IRepositoryViewEditorInput) {
    IRepositoryViewEditorInput rInput=(IRepositoryViewEditorInput)input;
    return new StructuredSelection(rInput.getViewObject());
  }
  if (input instanceof ProcessEditorInput) {
    IRepositoryViewObject theViewObj=getViewObjForJob(input);
    return new StructuredSelection(theViewObj);
  }
  return StructuredSelection.EMPTY;
}",0.7848443843031123
147894,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=Util.getPort(treeObject);
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(LOCAL_MDM_URL + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(this.title);
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=2;
  Label label=new Label(composite,SWT.NONE);
  label.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,false,false,2,1));
  label.setText(""String_Node_Str"");
  tableViewer=new TableViewer(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData data=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);
  tableViewer.getControl().setLayoutData(data);
  ((GridData)tableViewer.getControl().getLayoutData()).heightHint=250;
  ((GridData)tableViewer.getControl().getLayoutData()).widthHint=300;
  XSDSchemaLabelProvider labelProvider=new XSDSchemaLabelProvider();
  XSDSchemaContentProvider contentProvider=new XSDSchemaContentProvider();
  tableViewer.setContentProvider(contentProvider);
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setInput(new Object());
  tableViewer.setSorter(new ViewerSorter(){
    public int category(    Object element){
      if (element instanceof XSDDesc) {
        return ((XSDDesc)element).getType();
      }
      return -1;
    }
    public int compare(    Viewer theViewer,    Object e1,    Object e2){
      int cat1=category(e1);
      int cat2=category(e2);
      return cat1 - cat2;
    }
  }
);
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      delLabelButton.setEnabled(!selection.isEmpty());
    }
  }
);
  Composite compositeBtn=new Composite(composite,SWT.FILL);
  compositeBtn.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  compositeBtn.setLayout(new GridLayout(1,false));
  Button addXSDFromLocal=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromLocal.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromLocal.setText(""String_Node_Str"");
  addXSDFromLocal.setToolTipText(""String_Node_Str"");
  addXSDFromLocal.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      FileDialog fd=new FileDialog(shell.getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      File file=new File(filename);
      try {
        log.info(file.toURL());
      }
 catch (      MalformedURLException e1) {
        log.error(e1.getMessage(),e1);
      }
      XSDDesc xsdDesc=buildUp(filename,LOCAL,0);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  if (Util.IsEnterPrise()) {
    Button addXSDFromWebSite=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
    addXSDFromWebSite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
    addXSDFromWebSite.setText(""String_Node_Str"");
    addXSDFromWebSite.setToolTipText(""String_Node_Str"");
    addXSDFromWebSite.addSelectionListener(new SelectionListener(){
      public void widgetDefaultSelected(      org.eclipse.swt.events.SelectionEvent e){
      }
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent e){
        MDMXSDSchemaEntryDialog dlg=new MDMXSDSchemaEntryDialog(shell.getShell(),""String_Node_Str"");
        try {
          ArrayList<String> schemaList=new ArrayList<String>();
          XtentisPort port=getPort();
          WSDataModelPK[] xdmPKs=port.getDataModelPKs(new WSRegexDataModelPKs(""String_Node_Str"")).getWsDataModelPKs();
          if (xdmPKs != null) {
            for (int i=0; i < xdmPKs.length; i++) {
              String name=xdmPKs[i].getPk();
              if (!name.startsWith(""String_Node_Str"")) {
                schemaList.add(name);
              }
            }
            dlg.create();
            dlg.retrieveDataModels(schemaList,false);
          }
        }
 catch (        Exception es) {
          log.error(es.getMessage(),es);
          return;
        }
        dlg.setBlockOnOpen(true);
        dlg.open();
        if (dlg.getReturnCode() == Window.OK) {
          List<String> urls=dlg.getMDMDataModelUrls();
          for (          String url : urls) {
            XSDDesc xsdDesc=buildUp(getLocal_mdm_url() + url + ""String_Node_Str"",MDM_WEB,1);
            include(xsdDesc);
          }
          getButton(IDialogConstants.OK_ID).setEnabled(true);
          tableViewer.refresh();
        }
      }
    }
);
  }
  Button impXSDFromExchange=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  impXSDFromExchange.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  impXSDFromExchange.setText(""String_Node_Str"");
  impXSDFromExchange.setToolTipText(""String_Node_Str"");
  impXSDFromExchange.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      HttpClient client=new HttpClient();
      String importFolder=System.getProperty(""String_Node_Str"");
      StringBuffer repository=new StringBuffer();
      ImportExchangeOptionsDialog dlg=new ImportExchangeOptionsDialog(shell.getShell(),null,false,repository);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        File dir=new File(repository.toString());
        for (        File file : dir.listFiles()) {
          if (file.getName().endsWith(""String_Node_Str"")) {
            XSDDesc xsdDesc=buildUp(file.getAbsolutePath(),MDM_WEB,1);
            include(xsdDesc);
          }
        }
        getButton(IDialogConstants.OK_ID).setEnabled(true);
        tableViewer.refresh();
      }
    }
  }
);
  Button addXSDFromInputDlg=new Button(compositeBtn,SWT.PUSH | SWT.FILL);
  addXSDFromInputDlg.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  addXSDFromInputDlg.setText(""String_Node_Str"");
  addXSDFromInputDlg.setToolTipText(""String_Node_Str"");
  addXSDFromInputDlg.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      InputDialog id=new InputDialog(shell.getShell(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new IInputValidator(){
        public String isValid(        String newText){
          if ((newText == null) || ""String_Node_Str"".equals(newText))           return ""String_Node_Str"";
          return null;
        }
      }
);
      id.setBlockOnOpen(true);
      int ret=id.open();
      if (ret == Window.CANCEL) {
        return;
      }
      XSDDesc xsdDesc=buildUp(id.getValue(),OTHER_WEB,2);
      include(xsdDesc);
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  delLabelButton=new Button(compositeBtn,SWT.PUSH);
  delLabelButton.setLayoutData(new GridData(SWT.FILL,SWT.NONE,false,false,1,1));
  delLabelButton.setText(""String_Node_Str"");
  delLabelButton.setToolTipText(""String_Node_Str"");
  delLabelButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    org.eclipse.swt.events.SelectionEvent e){
    }
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      for (Iterator<XSDDesc> iter=selection.iterator(); iter.hasNext(); ) {
        XSDDesc desc=(XSDDesc)iter.next();
        xsdDescList.remove(desc);
        toDelList.add(desc.getURL());
      }
      getButton(IDialogConstants.OK_ID).setEnabled(true);
      tableViewer.refresh();
    }
  }
);
  countImportListInSchema();
  tableViewer.setInput(xsdDescList);
  return composite;
}",0.9973861090365944
147895,"public SelectImportedModulesDialog(Shell parentShell,XSDSchema schema,TreeObject treeObj,String title){
  super(parentShell);
  this.shell=parentShell;
  this.treeObject=treeObj;
  this.title=title;
  this.xsdSchema=schema;
  String endpointIpAddress=treeObject.getEndpointIpAddress();
  if (endpointIpAddress != null && endpointIpAddress.length() > 0) {
    LOCAL_MDM_URL=endpointIpAddress + ""String_Node_Str"";
  }
}","public SelectImportedModulesDialog(Shell parentShell,XSDSchema schema,TreeObject treeObj,String title){
  super(parentShell);
  this.shell=parentShell;
  this.treeObject=treeObj;
  this.title=title;
  this.xsdSchema=schema;
  String endpointIpAddress=treeObject.getEndpointIpAddress();
  if (endpointIpAddress != null && endpointIpAddress.length() > 0) {
    local_mdm_url=endpointIpAddress + ""String_Node_Str"";
  }
}",0.973621103117506
147896,"private void createToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridData gd=new GridData(SWT.FILL,SWT.TOP,true,false,2,1);
  gd.heightHint=25;
  toolBarComp.setLayoutData(gd);
  final GridLayout glToolBarBackground=new GridLayout();
  glToolBarBackground.verticalSpacing=0;
  glToolBarBackground.marginWidth=0;
  glToolBarBackground.marginHeight=0;
  glToolBarBackground.horizontalSpacing=0;
  toolBarComp.setLayout(glToolBarBackground);
  ToolBar resultToolBar=new ToolBar(toolBarComp,SWT.FLAT | SWT.HORIZONTAL);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  resultToolBar.setLayoutData(gd);
  ToolItem importToolItem=new ToolItem(resultToolBar,SWT.PUSH);
  importToolItem.setImage(ImageCache.getCreatedImage(EImage.IMPORT.getPath()));
  importToolItem.setToolTipText(""String_Node_Str"");
  ToolItem exportToolItem=new ToolItem(resultToolBar,SWT.PUSH);
  exportToolItem.setImage(ImageCache.getCreatedImage(EImage.EXPORT.getPath()));
  exportToolItem.setToolTipText(""String_Node_Str"");
  ToolItem importSchemalItem=new ToolItem(resultToolBar,SWT.PUSH);
  importSchemalItem.setImage(ImageCache.getCreatedImage(EImage.CHECKIN_ACTION.getPath()));
  importSchemalItem.setToolTipText(""String_Node_Str"");
  importToolItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog fd=new FileDialog(getSite().getShell(),SWT.OPEN);
      fd.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      fd.setFilterPath(Platform.getInstanceLocation().getURL().getPath().substring(1));
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      xsdSchema=null;
      inferXsdFromXml(filename);
    }
    private void inferXsdFromXml(    String xmlFile){
      int infer=0;
      String xsd=""String_Node_Str"";
      try {
        String inputType=xmlFile.substring(xmlFile.lastIndexOf(""String_Node_Str""));
        if (inputType.equals(""String_Node_Str"")) {
          xsd=Util.getXML(xmlFile);
          xsdSchema=Util.createXsdSchema(xsd,xobject);
          xsd=Util.nodeToString(xsdSchema.getDocument());
        }
 else {
          XSDDriver d=new XSDDriver();
          infer=d.doMain(new String[]{xmlFile,""String_Node_Str""});
          if (infer == 0) {
            xsd=d.outputXSD();
          }
        }
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
        infer=2;
      }
 finally {
        if (infer == 0 && !xsd.equals(""String_Node_Str"")) {
          WSDataModel wsObj=(WSDataModel)(xobject.getWsObject());
          wsObj.setXsdSchema(xsd);
          validateSchema(xsd);
          refreshData();
          markDirtyWithoutCommit();
        }
 else         if (infer != 0) {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    void validateSchema(    String xsd){
      try {
        boolean elem=false;
        XSDSchema schema=getXSDSchema(xsd);
        NodeList nodeList=schema.getDocument().getDocumentElement().getChildNodes();
        for (int idx=0; idx < nodeList.getLength(); idx++) {
          Node node=nodeList.item(idx);
          if (node instanceof Element && node.getLocalName().indexOf(""String_Node_Str"") >= 0) {
            elem=true;
            break;
          }
        }
        if (!elem) {
          MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
      }
    }
  }
);
  exportToolItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog fd=new FileDialog(getSite().getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setFilterPath(Platform.getInstanceLocation().getURL().getPath().substring(1));
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      inferXsdFromDataModule(filename);
    }
    private void inferXsdFromDataModule(    String xmlFile){
      WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
      XSDDriver d=new XSDDriver();
      if (d.outputXSD_UTF_8(wsObject.getXsdSchema(),xmlFile) != null) {
        MessageDialog.openInformation(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      }
 else {
        MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  importSchemalItem.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectImportedModulesDialog dlg=new SelectImportedModulesDialog(getSite().getShell(),xsdSchema,xobject,""String_Node_Str"");
      dlg.create();
      dlg.setBlockOnOpen(true);
      dlg.open();
      if (dlg.getReturnCode() == Window.OK) {
        doImportSchema(dlg.getImportedXSDList(),dlg.getToDelXSDList());
      }
    }
  }
);
}","private void createToolBar(Composite parent){
  Composite toolBarComp=new Composite(parent,SWT.BORDER);
  GridData gd=new GridData(SWT.FILL,SWT.TOP,true,false,2,1);
  gd.heightHint=25;
  toolBarComp.setLayoutData(gd);
  final GridLayout glToolBarBackground=new GridLayout();
  glToolBarBackground.verticalSpacing=0;
  glToolBarBackground.marginWidth=0;
  glToolBarBackground.marginHeight=0;
  glToolBarBackground.horizontalSpacing=0;
  toolBarComp.setLayout(glToolBarBackground);
  ToolBar resultToolBar=new ToolBar(toolBarComp,SWT.FLAT | SWT.HORIZONTAL);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  resultToolBar.setLayoutData(gd);
  ToolItem importToolItem=new ToolItem(resultToolBar,SWT.PUSH);
  importToolItem.setImage(ImageCache.getCreatedImage(EImage.IMPORT.getPath()));
  importToolItem.setToolTipText(""String_Node_Str"");
  ToolItem exportToolItem=new ToolItem(resultToolBar,SWT.PUSH);
  exportToolItem.setImage(ImageCache.getCreatedImage(EImage.EXPORT.getPath()));
  exportToolItem.setToolTipText(""String_Node_Str"");
  ToolItem importSchemalItem=new ToolItem(resultToolBar,SWT.PUSH);
  importSchemalItem.setImage(ImageCache.getCreatedImage(EImage.CHECKIN_ACTION.getPath()));
  importSchemalItem.setToolTipText(""String_Node_Str"");
  importToolItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog fd=new FileDialog(getSite().getShell(),SWT.OPEN);
      fd.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      fd.setFilterPath(Platform.getInstanceLocation().getURL().getPath().substring(1));
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      xsdSchema=null;
      inferXsdFromXml(filename);
    }
    private void inferXsdFromXml(    String xmlFile){
      int infer=0;
      String xsd=""String_Node_Str"";
      try {
        String inputType=xmlFile.substring(xmlFile.lastIndexOf(""String_Node_Str""));
        if (inputType.equals(""String_Node_Str"")) {
          xsd=Util.getXML(xmlFile);
          xsdSchema=Util.createXsdSchema(xsd,xobject);
          xsd=Util.nodeToString(xsdSchema.getDocument());
        }
 else {
          XSDDriver d=new XSDDriver();
          infer=d.doMain(new String[]{xmlFile,""String_Node_Str""});
          if (infer == 0) {
            xsd=d.outputXSD();
          }
        }
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
        infer=2;
      }
 finally {
        if (infer == 0 && !xsd.equals(""String_Node_Str"")) {
          WSDataModel wsObj=(WSDataModel)(xobject.getWsObject());
          wsObj.setXsdSchema(xsd);
          validateSchema(xsd);
          refreshData();
          markDirtyWithoutCommit();
        }
 else         if (infer != 0) {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    void validateSchema(    String xsd){
      try {
        boolean elem=false;
        XSDSchema schema=getXSDSchema(xsd);
        NodeList nodeList=schema.getDocument().getDocumentElement().getChildNodes();
        for (int idx=0; idx < nodeList.getLength(); idx++) {
          Node node=nodeList.item(idx);
          if (node instanceof Element && node.getLocalName().indexOf(""String_Node_Str"") >= 0) {
            elem=true;
            break;
          }
        }
        if (!elem) {
          MessageDialog.openWarning(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
      }
    }
  }
);
  exportToolItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog fd=new FileDialog(getSite().getShell(),SWT.SAVE);
      fd.setFilterExtensions(new String[]{""String_Node_Str""});
      fd.setFilterPath(Platform.getInstanceLocation().getURL().getPath().substring(1));
      fd.setText(""String_Node_Str"");
      String filename=fd.open();
      if (filename == null)       return;
      inferXsdFromDataModule(filename);
    }
    private void inferXsdFromDataModule(    String xmlFile){
      WSDataModel wsObject=(WSDataModel)(xobject.getWsObject());
      XSDDriver d=new XSDDriver();
      if (d.outputXSD_UTF_8(wsObject.getXsdSchema(),xmlFile) != null) {
        MessageDialog.openInformation(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      }
 else {
        MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  importSchemalItem.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      SelectImportedModulesDialog dlg=createSelectImportedModulesDialog();
      dlg.create();
      dlg.setBlockOnOpen(true);
      dlg.open();
      if (dlg.getReturnCode() == Window.OK) {
        doImportSchema(dlg.getImportedXSDList(),dlg.getToDelXSDList());
      }
    }
  }
);
}",0.993421052631579
147897,"public void widgetSelected(SelectionEvent e){
  SelectImportedModulesDialog dlg=new SelectImportedModulesDialog(getSite().getShell(),xsdSchema,xobject,""String_Node_Str"");
  dlg.create();
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    doImportSchema(dlg.getImportedXSDList(),dlg.getToDelXSDList());
  }
}","public void widgetSelected(SelectionEvent e){
  SelectImportedModulesDialog dlg=createSelectImportedModulesDialog();
  dlg.create();
  dlg.setBlockOnOpen(true);
  dlg.open();
  if (dlg.getReturnCode() == Window.OK) {
    doImportSchema(dlg.getImportedXSDList(),dlg.getToDelXSDList());
  }
}",0.8958990536277602
147898,"private boolean showLockedObjDialog(Object[] objs){
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : objs) {
    TreeObject treeObj=(TreeObject)obj;
    String treeObjName=treeObj.getName();
    ERepositoryObjectType type=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
    if (type != null && treeObjName != null) {
      String uniqueName=getUniqueName(treeObj,treeObjName);
      IRepositoryViewObject viewObject=RepositoryResourceUtil.findViewObjectByName(type,uniqueName);
      viewObjs.add(viewObject);
    }
  }
  LockedObjectDialog lockDialog=new LockedObjectDialog(getShell(),Messages.ImportServerObjectWizard_lockedObjectMessage,viewObjs);
  if (lockDialog.needShowDialog() && lockDialog.open() == IDialogConstants.CANCEL_ID) {
    return false;
  }
  return true;
}","private boolean showLockedObjDialog(Object[] objs){
  List<IRepositoryViewObject> viewObjs=new LinkedList<IRepositoryViewObject>();
  for (  Object obj : objs) {
    TreeObject treeObj=(TreeObject)obj;
    String treeObjName=treeObj.getName();
    ERepositoryObjectType type=RepositoryQueryService.getRepositoryObjectType(treeObj.getType());
    if (type != null && treeObjName != null) {
      String uniqueName=getUniqueName(treeObj,treeObjName);
      IRepositoryViewObject viewObject=RepositoryResourceUtil.findViewObjectByName(type,uniqueName);
      if (viewObject != null)       viewObjs.add(viewObject);
    }
  }
  LockedObjectDialog lockDialog=new LockedObjectDialog(getShell(),Messages.ImportServerObjectWizard_lockedObjectMessage,viewObjs);
  if (lockDialog.needShowDialog() && lockDialog.open() == IDialogConstants.CANCEL_ID) {
    return false;
  }
  return true;
}",0.9826388888888888
147899,"protected XpathWidget getNewXpathWidget(Composite parent){
  return new XpathWidget(parent,treeParent,false);
}","protected XpathWidget getNewXpathWidget(Composite parent){
  if (treeParent == null)   treeParent=(TreeParent)((IAdaptable)mainPage).getAdapter(TreeParent.class);
  return new XpathWidget(parent,treeParent,false);
}",0.6809815950920245
147900,"public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(""String_Node_Str"" + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str"");
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else       return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName);
    }
 catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,""String_Node_Str"" + objectName + ""String_Node_Str"");
  }
}","public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(Messages.Deploy_text + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Deploy_successfully_text);
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str""+ Messages.Create_successfully_text);
      }
 else       return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName);
    }
 catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,Messages.Deploy_fail_text + ""String_Node_Str"" + typeLabel+ ""String_Node_Str""+ objectName+ ""String_Node_Str""+ Messages.Causeis_text+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,Messages.Deploy_notSupport_text + ""String_Node_Str"" + objectName+ ""String_Node_Str"");
  }
}",0.8884283246977548
147901,"public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(""String_Node_Str"" + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str"");
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else       return DeployStatus.getInfoStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName+ ""String_Node_Str"");
    }
 catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,""String_Node_Str"" + objectName + ""String_Node_Str"");
  }
}","public IStatus execute(Object params,IProgressMonitor monitor){
  ERepositoryObjectType type=getViewObjectType();
  String objectName=getLabel();
  IInteractiveHandler handler=InteractiveService.findHandler(type);
  if (handler != null) {
    String typeLabel=handler.getLabel();
    monitor.subTask(""String_Node_Str"" + typeLabel + ""String_Node_Str"");
    try {
      if (handler.deploy(this)) {
        if (getCommandType() == CMD_MODIFY)         return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str"");
        return DeployStatus.getOKStatus(this,typeLabel + ""String_Node_Str"" + objectName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else       return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName);
    }
 catch (    RemoteException e) {
      return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName+ ""String_Node_Str""+ e.getMessage(),e);
    }
catch (    XtentisException e) {
      return DeployStatus.getErrorStatus(this,""String_Node_Str"" + typeLabel + ""String_Node_Str""+ objectName+ ""String_Node_Str""+ e.getMessage(),e);
    }
  }
 else {
    return DeployStatus.getErrorStatus(this,""String_Node_Str"" + objectName + ""String_Node_Str"");
  }
}",0.9894019682059046
147902,"public void handleEvent(Event event){
  if (event.button == DOMViewDialog.BUTTON_SAVE) {
    try {
      final XtentisPort port=Util.getPort(getXObject());
      WSPutItem putItem=new WSPutItem((WSDataClusterPK)getXObject().getWsKey(),d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false);
      WSPutItemWithReport item=new WSPutItemWithReport(putItem,""String_Node_Str"",d.isBeforeVerification());
      if (d.isTriggerProcess()) {
        port.putItemWithReport(item);
      }
 else {
        port.putItem(putItem);
      }
      doSearch();
    }
 catch (    Exception e) {
      MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
      return;
    }
  }
  d.close();
}","public void handleEvent(Event event){
  if (event.button == DOMViewDialog.BUTTON_SAVE) {
    try {
      final XtentisPort port=Util.getPort(getXObject());
      WSPutItem putItem=new WSPutItem((WSDataClusterPK)getXObject().getWsKey(),d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false);
      WSPutItemWithReport item=new WSPutItemWithReport(putItem,""String_Node_Str"",d.isBeforeVerification());
      if (d.isTriggerProcess()) {
        port.putItemWithReport(item);
      }
 else {
        port.putItem(putItem);
      }
      doSearch();
    }
 catch (    Exception e) {
      MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + Util.formatErrorMessage(e.getLocalizedMessage()));
      return;
    }
  }
  d.close();
}",0.9841068022886204
147903,"protected void showDeployStatus(IStatus status){
  String prompt;
  if (status.getSeverity() < IStatus.ERROR)   prompt=Messages.AbstractDeployAction_deployMessage;
 else   prompt=Messages.AbstractDeployAction_deployFailure;
  MultiStatusDialog dialog=new MultiStatusDialog(getShell(),status.getChildren().length + prompt,status);
  dialog.open();
}","protected void showDeployStatus(IStatus status){
  String prompt;
  MultiStatusDialog dialog=null;
  if (status.getSeverity() < IStatus.ERROR) {
    prompt=Messages.AbstractDeployAction_deployMessage;
    dialog=new MultiStatusDialog(getShell(),status.getChildren().length + prompt,status);
  }
 else {
    prompt=Messages.bind(Messages.AbstractDeployAction_deployFailure,status.getChildren().length);
    dialog=new MultiStatusDialog(getShell(),prompt,status);
  }
  dialog.open();
}",0.6634615384615384
147904,"public static ArrayList<Object> getComplexTypeDefinitionChildren(XSDComplexTypeDefinition complexTypeDefinition){
  XSDComplexTypeContent xsdComplexTypeContent=complexTypeDefinition.getContent();
  ArrayList<Object> list=new ArrayList<Object>();
  if (xsdComplexTypeContent == null) {
    XSDTypeDefinition typeDefinition=complexTypeDefinition.getBaseTypeDefinition();
    if (typeDefinition instanceof XSDSimpleTypeDefinition) {
      list.add(typeDefinition);
      return list;
    }
 else {
    }
    xsdComplexTypeContent=((XSDComplexTypeDefinition)typeDefinition).getContent();
  }
  if (""String_Node_Str"".equals(complexTypeDefinition.getDerivationMethod().getName())) {
    if (complexTypeDefinition.getBaseTypeDefinition() instanceof XSDComplexTypeDefinition) {
      list.addAll(getComplexTypeDefinitionChildren((XSDComplexTypeDefinition)complexTypeDefinition.getBaseTypeDefinition()));
    }
  }
  if (complexTypeDefinition.getAttributeContents() != null)   list.addAll(complexTypeDefinition.getAttributeContents());
  if (complexTypeDefinition.getAnnotations() != null)   list.addAll(complexTypeDefinition.getAnnotations());
  if (xsdComplexTypeContent instanceof XSDSimpleTypeDefinition) {
    list.add(xsdComplexTypeContent);
    return list;
  }
  if (xsdComplexTypeContent instanceof XSDParticle) {
    if (((XSDParticle)xsdComplexTypeContent).getTerm() instanceof XSDModelGroup) {
      list.add(((XSDParticle)xsdComplexTypeContent).getTerm());
      return list;
    }
 else {
      list.add(((XSDParticle)xsdComplexTypeContent).getTerm());
      return list;
    }
  }
  list.add(xsdComplexTypeContent);
  return list;
}","public static ArrayList<Object> getComplexTypeDefinitionChildren(XSDComplexTypeDefinition complexTypeDefinition){
  XSDComplexTypeContent xsdComplexTypeContent=complexTypeDefinition.getContent();
  ArrayList<Object> list=new ArrayList<Object>();
  if (xsdComplexTypeContent == null) {
    XSDTypeDefinition typeDefinition=complexTypeDefinition.getBaseTypeDefinition();
    if (typeDefinition instanceof XSDSimpleTypeDefinition) {
      list.add(typeDefinition);
      return list;
    }
 else {
    }
    xsdComplexTypeContent=((XSDComplexTypeDefinition)typeDefinition).getContent();
  }
  if (""String_Node_Str"".equals(complexTypeDefinition.getDerivationMethod().getName())) {
    if (complexTypeDefinition.getBaseTypeDefinition() instanceof XSDComplexTypeDefinition) {
      String name=((XSDComplexTypeDefinition)complexTypeDefinition.getBaseTypeDefinition()).getDerivationMethod().getName();
      if (name.equals(""String_Node_Str""))       list.addAll(getComplexTypeDefinitionChildren((XSDComplexTypeDefinition)complexTypeDefinition.getBaseTypeDefinition()));
    }
  }
  if (complexTypeDefinition.getAttributeContents() != null)   list.addAll(complexTypeDefinition.getAttributeContents());
  if (complexTypeDefinition.getAnnotations() != null)   list.addAll(complexTypeDefinition.getAnnotations());
  if (xsdComplexTypeContent instanceof XSDSimpleTypeDefinition) {
    list.add(xsdComplexTypeContent);
    return list;
  }
  if (xsdComplexTypeContent instanceof XSDParticle) {
    if (((XSDParticle)xsdComplexTypeContent).getTerm() instanceof XSDModelGroup) {
      list.add(((XSDParticle)xsdComplexTypeContent).getTerm());
      return list;
    }
 else {
      list.add(((XSDParticle)xsdComplexTypeContent).getTerm());
      return list;
    }
  }
  list.add(xsdComplexTypeContent);
  return list;
}",0.9514957885564914
147905,"public void run(){
  try {
    if (treeEntry.getParentTreeEntry() == null) {
      WSMenu menu=((WSMenu)viewer.getInput());
      if (menu.getMenuEntries().length == 1) {
        MessageDialog.openWarning(MenuMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return;
      }
      ArrayList<WSMenuEntry> subMenus=new ArrayList(Arrays.asList(menu.getMenuEntries()));
      subMenus.remove(treeEntry.getWsMenuEntry());
      menu.setMenuEntries(subMenus.toArray(new WSMenuEntry[subMenus.size()]));
    }
 else {
      ArrayList<WSMenuEntry> subMenus=new ArrayList(Arrays.asList(treeEntry.getParentTreeEntry().getWsMenuEntry().getSubMenus()));
      subMenus.remove(treeEntry.getWsMenuEntry());
      treeEntry.getParentTreeEntry().getWsMenuEntry().setSubMenus(subMenus.toArray(new WSMenuEntry[subMenus.size()]));
    }
    viewer.setExpandedState(treeEntry.getParentTreeEntry(),true);
    viewer.refresh(treeEntry.getParentTreeEntry(),false);
    markDirtyWithoutCommit();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(viewer.getControl().getShell(),""String_Node_Str"",""String_Node_Str"" + treeEntry.getWsMenuEntry().getId() + ""String_Node_Str""+ e.getLocalizedMessage());
  }
}","public void run(){
  try {
    if (treeEntry.getParentTreeEntry() == null) {
      WSMenu menu=((WSMenu)viewer.getInput());
      if (menu.getMenuEntries().length == 1) {
        MessageDialog.openWarning(MenuMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return;
      }
      ArrayList<WSMenuEntry> subMenus=new ArrayList(Arrays.asList(menu.getMenuEntries()));
      subMenus.remove(treeEntry.getWsMenuEntry());
      menu.setMenuEntries(subMenus.toArray(new WSMenuEntry[subMenus.size()]));
    }
 else {
      ArrayList<WSMenuEntry> subMenus=new ArrayList(Arrays.asList(treeEntry.getParentTreeEntry().getWsMenuEntry().getSubMenus()));
      subMenus.remove(treeEntry.getWsMenuEntry());
      treeEntry.getParentTreeEntry().getWsMenuEntry().setSubMenus(subMenus.toArray(new WSMenuEntry[subMenus.size()]));
    }
    if (treeEntry.getParentTreeEntry() != null) {
      viewer.setExpandedState(treeEntry.getParentTreeEntry(),true);
      viewer.refresh(treeEntry.getParentTreeEntry(),false);
    }
    viewer.refresh();
    markDirtyWithoutCommit();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(viewer.getControl().getShell(),""String_Node_Str"",""String_Node_Str"" + treeEntry.getWsMenuEntry().getId() + ""String_Node_Str""+ e.getLocalizedMessage());
  }
}",0.9681923972071372
147906,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || value.toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"").length() != value.toString().trim().length()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString().trim())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString().trim())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().trim().indexOf(BROWSE_ITEMS);
        elem.setName(value.toString().trim().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString().trim(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      applyChangeToRoles();
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (selection.size() > 1) {
        List selectObjs=selection.toList();
        refreshRoleView(selectObjs);
        UpdateComplexViewButton(true);
      }
 else       if (selection.size() == 1) {
        XSDElementDeclaration decl=(XSDElementDeclaration)selection.getFirstElement();
        refreshRoleView(BROWSE_ITEMS + decl.getName());
        UpdateComplexViewButton(true);
      }
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  if (Util.IsEnterPrise()) {
    Label infoLabel=new Label(composite,SWT.NONE);
    infoLabel.setText(""String_Node_Str"");
    ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
    ruleColumn.setColumnWidth(250);
    List<String> roles=getAllRoleNames();
    ruleColumn.setComboValues(roles.toArray(new String[]{}));
    ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
    acsColumn.setColumnWidth(250);
    acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
    complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),WidgetFactory.getWidgetFactory(),composite);
    complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
    complexTableViewer.create();
    complexTableViewer.getViewer().setInput(new ArrayList<Line>());
    UpdateComplexViewButton(false);
  }
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(1,false));
  browseViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd.widthHint=600;
  browseViewer.getControl().setLayoutData(gd);
  ((GridData)browseViewer.getControl().getLayoutData()).heightHint=100;
  Table table=browseViewer.getTable();
  TableColumn column=new TableColumn(table,SWT.CENTER);
  column.setText(INSTANCE_NAME);
  column.setWidth(615);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  CellEditor[] editors=new CellEditor[1];
  editors[0]=new TextCellEditor(table);
  browseViewer.setCellEditors(editors);
  browseViewer.setContentProvider(new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      ArrayList<XSDElementDeclaration> values=(ArrayList<XSDElementDeclaration>)inputElement;
      return values.toArray(new XSDElementDeclaration[values.size()]);
    }
  }
);
  browseViewer.setLabelProvider(new ITableLabelProvider(){
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public String getColumnText(    Object element,    int columnIndex){
      return BROWSE_ITEMS + ((XSDElementDeclaration)element).getName();
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
  }
);
  browseViewer.setCellModifier(new ICellModifier(){
    public boolean canModify(    Object element,    String property){
      return true;
    }
    public void modify(    Object element,    String property,    Object value){
      TableItem item=(TableItem)element;
      if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || value.toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"").length() != value.toString().trim().length()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
      XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
      if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString().trim())) {
        for (        XSDElementDeclaration theElem : declList) {
          if (theElem == elem)           continue;
          if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString().trim())) {
            MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
            return;
          }
        }
        List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
        browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
        int prex=value.toString().trim().indexOf(BROWSE_ITEMS);
        if ((prex + BROWSE_ITEMS.length()) <= value.toString().trim().length())         elem.setName(value.toString().trim().substring(prex + BROWSE_ITEMS.length()));
        browseItemToRoles.put(value.toString().trim(),lines);
        refreshRoleView(BROWSE_ITEMS + elem.getName());
        browseViewer.update(elem,null);
      }
    }
    public Object getValue(    Object element,    String property){
      XSDElementDeclaration elem=(XSDElementDeclaration)element;
      return BROWSE_ITEMS + elem.getName();
    }
  }
);
  browseViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      applyChangeToRoles();
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (selection.size() > 1) {
        List selectObjs=selection.toList();
        refreshRoleView(selectObjs);
        UpdateComplexViewButton(true);
      }
 else       if (selection.size() == 1) {
        XSDElementDeclaration decl=(XSDElementDeclaration)selection.getFirstElement();
        refreshRoleView(BROWSE_ITEMS + decl.getName());
        UpdateComplexViewButton(true);
      }
    }
  }
);
  browseViewer.setInput(declList);
  browseViewer.setColumnProperties(new String[]{INSTANCE_NAME});
  browseViewer.refresh();
  if (Util.IsEnterPrise()) {
    Label infoLabel=new Label(composite,SWT.NONE);
    infoLabel.setText(""String_Node_Str"");
    ComplexTableViewerColumn ruleColumn=roleConfigurationColumns[0];
    ruleColumn.setColumnWidth(250);
    List<String> roles=getAllRoleNames();
    ruleColumn.setComboValues(roles.toArray(new String[]{}));
    ComplexTableViewerColumn acsColumn=roleConfigurationColumns[1];
    acsColumn.setColumnWidth(250);
    acsColumn.setComboValues(new String[]{""String_Node_Str"",""String_Node_Str""});
    complexTableViewer=new ComplexTableViewer(Arrays.asList(roleConfigurationColumns),WidgetFactory.getWidgetFactory(),composite);
    complexTableViewer.setKeyColumns(new ComplexTableViewerColumn[]{roleConfigurationColumns[0]});
    complexTableViewer.create();
    complexTableViewer.getViewer().setInput(new ArrayList<Line>());
    UpdateComplexViewButton(false);
  }
  setControl(composite);
}",0.9923838537699924
147907,"public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || value.toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"").length() != value.toString().trim().length()) {
    MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
    return;
  }
  XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
  if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString().trim())) {
    for (    XSDElementDeclaration theElem : declList) {
      if (theElem == elem)       continue;
      if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString().trim())) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
    }
    List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
    browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
    int prex=value.toString().trim().indexOf(BROWSE_ITEMS);
    elem.setName(value.toString().trim().substring(prex + BROWSE_ITEMS.length()));
    browseItemToRoles.put(value.toString().trim(),lines);
    refreshRoleView(BROWSE_ITEMS + elem.getName());
    browseViewer.update(elem,null);
  }
}","public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  if (Pattern.compile(""String_Node_Str"").matcher(value.toString()).matches() || value.toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"").length() != value.toString().trim().length()) {
    MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
    return;
  }
  XSDElementDeclaration elem=(XSDElementDeclaration)item.getData();
  if (!(BROWSE_ITEMS + elem.getName()).equals(value.toString().trim())) {
    for (    XSDElementDeclaration theElem : declList) {
      if (theElem == elem)       continue;
      if ((BROWSE_ITEMS + theElem.getName()).equals(value.toString().trim())) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        return;
      }
    }
    List<Line> lines=browseItemToRoles.get(BROWSE_ITEMS + elem.getName());
    browseItemToRoles.remove(BROWSE_ITEMS + elem.getName());
    int prex=value.toString().trim().indexOf(BROWSE_ITEMS);
    if ((prex + BROWSE_ITEMS.length()) <= value.toString().trim().length())     elem.setName(value.toString().trim().substring(prex + BROWSE_ITEMS.length()));
    browseItemToRoles.put(value.toString().trim(),lines);
    refreshRoleView(BROWSE_ITEMS + elem.getName());
    browseViewer.update(elem,null);
  }
}",0.8742283950617284
147908,"protected void linkReferenceFile(Item item,IFile file){
  try {
    file.refreshLocal(0,null);
    ReferenceFileItem procFileItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    byteArray.setInnerContentFromFile(file);
    procFileItem.setContent(byteArray);
    procFileItem.setExtension(file.getFileExtension());
    procFileItem.setName(file.getName());
    item.getReferenceResources().clear();
    item.getReferenceResources().add(procFileItem);
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
}","public void linkReferenceFile(Item item,IFile file){
  try {
    file.refreshLocal(0,null);
    ReferenceFileItem fileItem=findReferenceFileItem(item,file);
    if (fileItem != null) {
      fileItem.getContent().setInnerContentFromFile(file);
    }
 else {
      ReferenceFileItem procFileItem=PropertiesFactory.eINSTANCE.createReferenceFileItem();
      ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
      byteArray.setInnerContentFromFile(file);
      procFileItem.setContent(byteArray);
      procFileItem.setExtension(file.getFileExtension());
      procFileItem.setName(file.getName());
      item.getReferenceResources().clear();
      item.getReferenceResources().add(procFileItem);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  CoreException e) {
    log.error(e.getMessage(),e);
  }
}",0.8676761026991442
147909,"private boolean isExist(TreeObject treeObj){
  List<IRepositoryViewObject> children=getRelatedChildren(treeObj.getType());
  if (children == null)   return false;
  for (  IRepositoryViewObject viewObject : children) {
    Item item=viewObject.getProperty().getItem();
    MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
    if (serverObj != null && treeObj.getName().equals(serverObj.getName())) {
      return true;
    }
  }
  return false;
}","private boolean isExist(TreeObject treeObj){
  if (treeObj instanceof TreeParent) {
    return false;
  }
  int type=treeObj.getType();
  ERepositoryObjectType rType=RepositoryQueryService.getRepositoryObjectType(type);
  if (rType == null) {
    return false;
  }
  List<IRepositoryViewObject> children=RepositoryResourceUtil.findAllViewObjectsWithDeleted(rType);
  if (children == null)   return false;
  String treeObjName=treeObj.getName();
  if (type == TreeObject.PICTURES_RESOURCE) {
    int index=treeObjName.indexOf(""String_Node_Str"");
    if (index > 0) {
      treeObjName=treeObjName.substring(index + 1);
    }
  }
  for (  IRepositoryViewObject viewObject : children) {
    Item item=viewObject.getProperty().getItem();
    if (item instanceof MDMServerObjectItem) {
      MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      String name=serverObj.getName();
      if (type == TreeObject.WORKFLOW_PROCESS) {
        name=name + ""String_Node_Str"" + viewObject.getVersion();
      }
      if (type == TreeObject.PICTURES_RESOURCE) {
        name=name + ""String_Node_Str"" + viewObject.getVersion()+ ""String_Node_Str""+ ((WSResourceE)serverObj).getFileExtension();
      }
      if (serverObj != null && treeObjName.equals(name)) {
        return true;
      }
    }
  }
  return false;
}",0.282379099499722
147910,"public static void setImporting(boolean importing){
  ImportService.importing=importing;
}","public synchronized static void setImporting(boolean importing){
  ImportService.importing=importing;
}",0.932642487046632
147911,"public static boolean isImporting(){
  return importing;
}","public synchronized static boolean isImporting(){
  return importing;
}",0.8992248062015504
147912,"public void handleEvent(Event event){
  if (event.button == DOMViewDialog.BUTTON_SAVE) {
    try {
      final XtentisPort port=Util.getPort(getXObject());
      WSPutItemWithReport item=new WSPutItemWithReport(new WSPutItem((WSDataClusterPK)getXObject().getWsKey(),d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false),""String_Node_Str"",d.isTriggerProcess());
      port.putItemWithReport(item);
    }
 catch (    Exception e) {
      MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
      return;
    }
  }
  d.close();
}","public void handleEvent(Event event){
  if (event.button == DOMViewDialog.BUTTON_SAVE) {
    try {
      final XtentisPort port=Util.getPort(getXObject());
      WSPutItemWithReport item=new WSPutItemWithReport(new WSPutItem((WSDataClusterPK)getXObject().getWsKey(),d.getXML(),""String_Node_Str"".equals(d.getDataModelName()) ? null : new WSDataModelPK(d.getDataModelName()),false),""String_Node_Str"",d.isTriggerProcess());
      port.putItemWithReport(item);
      doSearch();
    }
 catch (    Exception e) {
      MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
      return;
    }
  }
  d.close();
}",0.9858712715855572
147913,"public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  return false;
}","public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  return true;
}",0.7589285714285714
147914,"public boolean remove(AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  IRepositoryViewObject viewObj=cmd.getViewObject();
  Item item=viewObj.getProperty().getItem();
  MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
  Object wsObj=convert(item,serverObject);
  XtentisPort port=getPort(cmd.getServerDef());
  return doRemove(port,wsObj);
}","public boolean remove(AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  XtentisPort port=getPort(cmd.getServerDef());
  return doRemove(port,cmd);
}",0.5921985815602837
147915,"public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  if (wsObj != null) {
    WSCustomForm wsForm=(WSCustomForm)wsObj;
    port.deleteCustomForm(new WSDeleteCustomForm(new WSCustomFormPK(wsForm.getDatamodel(),wsForm.getEntity(),wsForm.getName())));
    return true;
  }
  return false;
}","public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  IRepositoryViewObject viewObj=cmd.getViewObject();
  Item item=viewObj.getProperty().getItem();
  MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
  Object wsObj=convert(item,serverObject);
  if (wsObj != null) {
    WSCustomForm wsForm=(WSCustomForm)wsObj;
    port.deleteCustomForm(new WSDeleteCustomForm(new WSCustomFormPK(wsForm.getDatamodel(),wsForm.getEntity(),cmd.getObjName())));
    return true;
  }
  return false;
}",0.6644067796610169
147916,"@Override public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSDataClusterPK pk=new WSDataClusterPK();
  String name=((WSDataCluster)wsObj).getName();
  pk.setPk(name);
  port.deleteDataCluster(new WSDeleteDataCluster(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.DataCluster.getName());
  return true;
}","@Override public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSDataClusterPK pk=new WSDataClusterPK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteDataCluster(new WSDeleteDataCluster(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.DataCluster.getName());
  return true;
}",0.8885976408912188
147917,"@Override public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSDataModelPK pk=new WSDataModelPK();
  String name=((WSDataModel)wsObj).getName();
  pk.setPk(name);
  port.deleteDataModel(new WSDeleteDataModel(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.DataMODEL.getName());
  return true;
}","@Override public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSDataModelPK pk=new WSDataModelPK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteDataModel(new WSDeleteDataModel(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.DataMODEL.getName());
  return true;
}",0.8879892037786775
147918,"@Override public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSMenuPK pk=new WSMenuPK();
  String name=((WSMenu)wsObj).getName();
  pk.setPk(name);
  port.deleteMenu(new WSDeleteMenu(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Menu.getName());
  return true;
}","@Override public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSMenuPK pk=new WSMenuPK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteMenu(new WSDeleteMenu(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Menu.getName());
  return true;
}",0.8862973760932945
147919,"@Override public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSRolePK pk=new WSRolePK();
  String name=((WSRole)wsObj).getName();
  pk.setPk(name);
  port.deleteRole(new WSDeleteRole(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Role.getName());
  return true;
}","@Override public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSRolePK pk=new WSRolePK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteRole(new WSDeleteRole(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Role.getName());
  return true;
}",0.8862973760932945
147920,"@Override public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSRoutingRulePK pk=new WSRoutingRulePK();
  String name=((WSRoutingRule)wsObj).getName();
  pk.setPk(name);
  port.deleteRoutingRule(new WSDeleteRoutingRule(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.RoutingRule.getName());
  return true;
}","@Override public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSRoutingRulePK pk=new WSRoutingRulePK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteRoutingRule(new WSDeleteRoutingRule(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.RoutingRule.getName());
  return true;
}",0.8885976408912188
147921,"public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSStoredProcedurePK pk=new WSStoredProcedurePK();
  String name=((WSStoredProcedure)wsObj).getName();
  pk.setPk(name);
  port.deleteStoredProcedure(new WSDeleteStoredProcedure(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.StoredProcedure.getName());
  return true;
}","public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSStoredProcedurePK pk=new WSStoredProcedurePK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteStoredProcedure(new WSDeleteStoredProcedure(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.StoredProcedure.getName());
  return true;
}",0.8869123252858958
147922,"public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSSynchronizationPlanPK pk=new WSSynchronizationPlanPK();
  String name=((WSSynchronizationPlan)wsObj).getName();
  pk.setPk(name);
  port.deleteSynchronizationPlan(new WSDeleteSynchronizationPlan(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.SynchronizationPlan.getName());
  return true;
}","public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSSynchronizationPlanPK pk=new WSSynchronizationPlanPK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteSynchronizationPlan(new WSDeleteSynchronizationPlan(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.SynchronizationPlan.getName());
  return true;
}",0.8880866425992779
147923,"public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSTransformerV2PK pk=new WSTransformerV2PK();
  String name=((WSTransformerV2)wsObj).getName();
  pk.setPk(name);
  port.deleteTransformerV2(new WSDeleteTransformerV2(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Transformer.getName());
  return true;
}","public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSTransformerV2PK pk=new WSTransformerV2PK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteTransformerV2(new WSDeleteTransformerV2(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Transformer.getName());
  return true;
}",0.8699080157687253
147924,"public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSUniversePK pk=new WSUniversePK();
  String name=((WSUniverse)wsObj).getName();
  pk.setPk(name);
  port.deleteUniverse(new WSDeleteUniverse(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Universe.getName());
  return true;
}","public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSUniversePK pk=new WSUniversePK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteUniverse(new WSDeleteUniverse(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.Universe.getName());
  return true;
}",0.8845070422535212
147925,"public boolean doRemove(XtentisPort port,Object wsObj) throws RemoteException {
  WSViewPK pk=new WSViewPK();
  String name=((WSView)wsObj).getName();
  pk.setPk(name);
  port.deleteView(new WSDeleteView(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.View.getName());
  return true;
}","public boolean doRemove(XtentisPort port,AbstractDeployCommand cmd) throws RemoteException, XtentisException {
  WSViewPK pk=new WSViewPK();
  String name=cmd.getObjName();
  pk.setPk(name);
  port.deleteView(new WSDeleteView(pk));
  TreeObjectUtil.deleteSpecificationFromAttachedRole(port,name,EXtentisObjects.View.getName());
  return true;
}",0.8828828828828829
147926,"public void restoreState(IMemento aMemento){
  commandId=aMemento.getString(PROP_ID);
  this.objName=aMemento.getString(PROP_OBJ_NAME);
  this.lastName=aMemento.getString(PROP_LAST_OBJ_NAME);
}","public void restoreState(IMemento aMemento){
  commandId=aMemento.getString(PROP_ID);
  this.objName=aMemento.getString(PROP_OBJ_NAME);
  this.lastName=aMemento.getString(PROP_LAST_OBJ_NAME);
  Integer phaseObj=aMemento.getInteger(PROP_PHASE);
  if (phaseObj != null) {
    runPhase=phaseObj.intValue();
  }
}",0.7689243027888446
147927,"public void saveState(IMemento aMemento){
  aMemento.putString(PROP_ID,commandId);
  aMemento.putInteger(PROP_TYPE,getCommandType());
  aMemento.putString(PROP_OBJ_NAME,objName);
  aMemento.putString(PROP_LAST_OBJ_NAME,lastName);
}","public void saveState(IMemento aMemento){
  aMemento.putString(PROP_ID,commandId);
  aMemento.putInteger(PROP_TYPE,getCommandType());
  aMemento.putString(PROP_OBJ_NAME,objName);
  aMemento.putString(PROP_LAST_OBJ_NAME,lastName);
  aMemento.putInteger(PROP_PHASE,getToRunPhase());
}",0.9005847953216374
147928,"public List<AbstractDeployCommand> getAllDeployCommands(){
  List<AbstractDeployCommand> cmds=new ArrayList<AbstractDeployCommand>();
  for (  CommandStack stack : map.values()) {
    ICommand validCommand=stack.getValidCommand();
    if (validCommand != null) {
      if (validCommand instanceof AbstractDeployCommand) {
        fillViewObjectToCommand(validCommand);
        AbstractDeployCommand deployCommand=(AbstractDeployCommand)validCommand;
        cmds.add(deployCommand);
      }
    }
  }
  return cmds;
}","public List<AbstractDeployCommand> getAllDeployCommands(){
  List<AbstractDeployCommand> cmds=new ArrayList<AbstractDeployCommand>();
  for (  CommandStack stack : map.values()) {
    ICommand validCommand=stack.getValidDeployCommand();
    if (validCommand != null) {
      if (validCommand instanceof AbstractDeployCommand) {
        fillViewObjectToCommand(validCommand);
        AbstractDeployCommand deployCommand=(AbstractDeployCommand)validCommand;
        cmds.add(deployCommand);
      }
    }
  }
  return cmds;
}",0.9942307692307693
147929,"public void removeCommandStack(String id){
  if (id == null)   return;
  map.remove(id);
}","public void removeCommandStack(String id,int phase){
  if (id == null)   return;
  CommandStack stack=map.get(id);
  if (stack != null) {
    stack.removeCommandsByPhase(phase);
    if (stack.isEmpty()) {
      map.remove(id);
    }
  }
}",0.4512195121951219
147930,"private void pushCommand(ICommand command){
  CommandStack commandStack=map.get(command.getCommandId());
  if (commandStack == null) {
    commandStack=new CommandStack();
    if (commandStack.pushCommand(command)) {
      map.put(command.getCommandId(),commandStack);
    }
  }
 else {
    commandStack.pushCommand(command);
  }
}","public void pushCommand(ICommand command){
  CommandStack commandStack=map.get(command.getCommandId());
  if (commandStack == null) {
    commandStack=new CommandStack();
    if (commandStack.pushCommand(command)) {
      map.put(command.getCommandId(),commandStack);
    }
  }
 else {
    commandStack.pushCommand(command);
  }
}",0.9863842662632376
147931,"/** 
 * DOC hbhong Comment method ""getDeployCommands"".
 * @param viewObjs
 * @param defaultCmdType if none then assign -1
 * @return
 */
public List<AbstractDeployCommand> getDeployCommands(List<IRepositoryViewObject> viewObjs,int defaultCmdType){
  List<AbstractDeployCommand> cmds=new LinkedList<AbstractDeployCommand>();
  for (  IRepositoryViewObject viewObj : viewObjs) {
    CommandStack stack=findCommandStack(viewObj.getId());
    if (stack == null) {
      stack=new CommandStack();
      ICommand cmd=getNewCommand(ICommand.CMD_MODIFY);
      cmd.init(viewObj);
      stack.pushCommand(cmd);
    }
    ICommand validCommand=stack.getValidCommand();
    if (validCommand != null) {
      if (validCommand instanceof AbstractDeployCommand) {
        fillViewObjectToCommand(validCommand);
        AbstractDeployCommand deployCommand=(AbstractDeployCommand)validCommand;
        cmds.add(deployCommand);
      }
 else       if (validCommand instanceof NOPCommand && defaultCmdType > 0) {
        ICommand cmd=getNewCommand(defaultCmdType);
        if (cmd instanceof AbstractDeployCommand) {
          cmd.init(viewObj);
          cmds.add((AbstractDeployCommand)cmd);
        }
      }
    }
  }
  return cmds;
}","/** 
 * DOC hbhong Comment method ""getDeployCommands"".
 * @param viewObjs
 * @param defaultCmdType if none then assign -1
 * @return
 */
public List<AbstractDeployCommand> getDeployCommands(List<IRepositoryViewObject> viewObjs,int defaultCmdType){
  List<AbstractDeployCommand> cmds=new LinkedList<AbstractDeployCommand>();
  for (  IRepositoryViewObject viewObj : viewObjs) {
    CommandStack stack=findCommandStack(viewObj.getId());
    if (stack == null) {
      stack=new CommandStack();
      ICommand cmd=getNewCommand(ICommand.CMD_MODIFY);
      cmd.init(viewObj);
      stack.pushCommand(cmd);
    }
    ICommand validCommand=stack.getValidDeployCommand();
    if (validCommand != null) {
      if (validCommand instanceof AbstractDeployCommand) {
        fillViewObjectToCommand(validCommand);
        AbstractDeployCommand deployCommand=(AbstractDeployCommand)validCommand;
        cmds.add(deployCommand);
      }
 else       if (validCommand instanceof NOPCommand && defaultCmdType > 0) {
        ICommand cmd=getNewCommand(defaultCmdType);
        if (cmd instanceof AbstractDeployCommand) {
          cmd.init(viewObj);
          cmds.add((AbstractDeployCommand)cmd);
        }
      }
    }
  }
  return cmds;
}",0.9975470155355682
147932,"public ICommand getNewCommand(int type){
switch (type) {
case ICommand.CMD_NOP:
    return new NOPCommand();
case ICommand.CMD_ADD:
  return new AddCommand();
case ICommand.CMD_DELETE:
return new DeleteCommand();
case ICommand.CMD_MODIFY:
return new ModifyCommand();
case ICommand.CMD_RENAME:
return new RenameCommand();
case ICommand.CMD_RESTORE:
return new RestoreCommand();
}
return null;
}","public ICommand getNewCommand(int type){
switch (type) {
case ICommand.CMD_NOP:
    return new NOPCommand();
case ICommand.CMD_ADD:
  return new AddCommand();
case ICommand.CMD_DELETE:
return new DeleteCommand();
case ICommand.CMD_MODIFY:
return new ModifyCommand();
case ICommand.CMD_RENAME:
return new RenameCommand();
case ICommand.CMD_RESTORE:
return new RestoreCommand();
case ICommand.CMD_UPDATE_SERVER:
return new UpdateLastServerCommand();
case ICommand.CMD_PUSH_COMMAND:
return new PushCmdCommand();
}
return null;
}",0.8562091503267973
147933,"public void restoreState(IMemento aMemento){
  IMemento[] children=aMemento.getChildren(ICommand.MEM_TYPE_COMMAND);
  if (children != null) {
    commands.clear();
    for (    IMemento childMem : children) {
      ICommand cmd=manager.restoreCommand(childMem);
      if (cmd != null) {
        pushCommand(cmd,false);
      }
    }
    calValidCommand();
  }
}","public void restoreState(IMemento aMemento){
  IMemento[] children=aMemento.getChildren(ICommand.MEM_TYPE_COMMAND);
  if (children != null) {
    commands.clear();
    for (    IMemento childMem : children) {
      ICommand cmd=manager.restoreCommand(childMem);
      if (cmd != null) {
        pushCommand(cmd,false);
      }
    }
    calValidDeployCommand();
  }
}",0.9917582417582418
147934,"public boolean pushCommand(ICommand cmd,boolean updateValidCmd){
  if (commands.isEmpty()) {
    if (cmd.getCommandType() == ICommand.CMD_RESTORE) {
      return false;
    }
    commands.add(cmd);
    cmdId=cmd.getCommandId();
    if (updateValidCmd) {
      calValidCommand();
    }
    return true;
  }
  String commandId=cmd.getCommandId();
  if (commandId != null && commandId.equals(cmdId)) {
    commands.add(cmd);
    if (updateValidCmd) {
      calValidCommand();
    }
    return true;
  }
  return false;
}","public boolean pushCommand(ICommand cmd,boolean updateValidCmd){
  if (commands.isEmpty()) {
    if (cmd.getCommandType() == ICommand.CMD_RESTORE) {
      return false;
    }
    commands.add(cmd);
    cmdId=cmd.getCommandId();
    if (updateValidCmd) {
      calValidDeployCommand();
    }
    return true;
  }
  String commandId=cmd.getCommandId();
  if (commandId != null && commandId.equals(cmdId)) {
    commands.add(cmd);
    if (updateValidCmd) {
      calValidDeployCommand();
    }
    return true;
  }
  return false;
}",0.988527724665392
147935,"protected void createTreeViewer(Composite itemComposite){
  filteredCheckboxTree=new FilteredCheckboxTree(itemComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI){
    ContainerCheckedTreeViewer treeViewer;
    @Override protected CheckboxTreeViewer doCreateTreeViewer(    Composite parent,    int style){
      IRepositoryViewObject[] categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
      treeViewer=new ContainerCheckedTreeViewer(parent);
      treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
      treeViewer.setContentProvider(new CommonMDMRepositoryContentProvider());
      treeViewer.setInput(categoryViewObjects);
      return treeViewer;
    }
    @Override protected void refreshCompleted(){
      treeViewer.expandToLevel(3);
      restoreCheckedElements();
    }
    @Override protected boolean isNodeCollectable(    TreeItem item){
      return false;
    }
  }
;
}","protected void createTreeViewer(Composite itemComposite){
  filteredCheckboxTree=new FilteredCheckboxTree(itemComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI){
    ContainerCheckedTreeViewer treeViewer;
    @Override protected CheckboxTreeViewer doCreateTreeViewer(    Composite parent,    int style){
      IRepositoryViewObject[] categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
      treeViewer=new ContainerCheckedTreeViewer(parent);
      treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
      treeViewer.setContentProvider(new MDMRepositoryContentProvider());
      treeViewer.setInput(categoryViewObjects);
      return treeViewer;
    }
    @Override protected void refreshCompleted(){
      treeViewer.expandToLevel(3);
      restoreCheckedElements();
    }
    @Override protected boolean isNodeCollectable(    TreeItem item){
      return false;
    }
  }
;
}",0.996742671009772
147936,"@Override protected CheckboxTreeViewer doCreateTreeViewer(Composite parent,int style){
  IRepositoryViewObject[] categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
  treeViewer=new ContainerCheckedTreeViewer(parent);
  treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
  treeViewer.setContentProvider(new CommonMDMRepositoryContentProvider());
  treeViewer.setInput(categoryViewObjects);
  return treeViewer;
}","@Override protected CheckboxTreeViewer doCreateTreeViewer(Composite parent,int style){
  IRepositoryViewObject[] categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
  treeViewer=new ContainerCheckedTreeViewer(parent);
  treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
  treeViewer.setContentProvider(new MDMRepositoryContentProvider());
  treeViewer.setInput(categoryViewObjects);
  return treeViewer;
}",0.9931506849315068
147937,"protected Composite initItemTreeViewer(Composite composite){
  Composite returnComposite=checkTreeViewer.createItemList(composite);
  checkTreeViewer.setItemText(Messages.MDMExportRepositoryItemsWizard_exportItem);
  return returnComposite;
}","protected Composite initItemTreeViewer(Composite composite){
  Composite returnComposite=checkTreeViewer.createItemList(composite);
  checkTreeViewer.setItemText(Messages.MDMExportRepositoryItemsWizard_exportItem);
  checkTreeViewer.getViewer().expandAll();
  ((CheckboxTreeViewer)checkTreeViewer.getViewer()).expandToLevel(2);
  return returnComposite;
}",0.8107202680067002
147938,"/** 
 * DOC hbhong RepositoryObjectCheckTreeViewer constructor comment.
 * @param selection
 */
public ExportRepositoryObjectCheckTreeViewer(IStructuredSelection selection){
  super(selection);
}","public ExportRepositoryObjectCheckTreeViewer(IStructuredSelection selection){
  super(selection);
}",0.673469387755102
147939,"protected void createTreeViewer(Composite itemComposite){
  filteredCheckboxTree=new FilteredCheckboxTree(itemComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI){
    ContainerCheckedTreeViewer treeViewer;
    @Override protected CheckboxTreeViewer doCreateTreeViewer(    Composite parent,    int style){
      IRepositoryViewObject[] categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
      treeViewer=new ContainerCheckedTreeViewer(parent);
      treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
      treeViewer.setContentProvider(new MDMRepositoryContentProvider());
      treeViewer.setInput(categoryViewObjects);
      return treeViewer;
    }
    @Override protected void refreshCompleted(){
      treeViewer.expandToLevel(3);
      restoreCheckedElements();
    }
    @Override protected boolean isNodeCollectable(    TreeItem item){
      return false;
    }
  }
;
}","protected void createTreeViewer(Composite itemComposite){
  filteredCheckboxTree=new FilteredCheckboxTree(itemComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI){
    ContainerCheckedTreeViewer treeViewer;
    @Override protected CheckboxTreeViewer doCreateTreeViewer(    Composite parent,    int style){
      categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
      IRepositoryViewObject[] viewObjs=getSortedViewObjects(categoryViewObjects);
      treeViewer=new ContainerCheckedTreeViewer(parent);
      treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
      treeViewer.setContentProvider(new MDMRepositoryContentProvider());
      treeViewer.setInput(viewObjs);
      return treeViewer;
    }
    @Override protected void refreshCompleted(){
      treeViewer.expandToLevel(3);
      restoreCheckedElements();
    }
    @Override protected boolean isNodeCollectable(    TreeItem item){
      return false;
    }
  }
;
}",0.9081253319171536
147940,"@Override protected CheckboxTreeViewer doCreateTreeViewer(Composite parent,int style){
  IRepositoryViewObject[] categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
  treeViewer=new ContainerCheckedTreeViewer(parent);
  treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
  treeViewer.setContentProvider(new MDMRepositoryContentProvider());
  treeViewer.setInput(categoryViewObjects);
  return treeViewer;
}","@Override protected CheckboxTreeViewer doCreateTreeViewer(Composite parent,int style){
  categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
  IRepositoryViewObject[] viewObjs=getSortedViewObjects(categoryViewObjects);
  treeViewer=new ContainerCheckedTreeViewer(parent);
  treeViewer.setLabelProvider(new MDMRepositoryLabelProvider());
  treeViewer.setContentProvider(new MDMRepositoryContentProvider());
  treeViewer.setInput(viewObjs);
  return treeViewer;
}",0.8608981380065718
147941,"public ViewMainPage(FormEditor editor){
  super(editor,ViewMainPage.class.getName(),""String_Node_Str"" + ((XObjectEditorInput)editor.getEditorInput()).getName() + Util.getRevision((TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel()));
  this.viewName=((XObjectEditorInput)editor.getEditorInput()).getName();
}","public ViewMainPage(FormEditor editor){
  super(editor,ViewMainPage.class.getName(),""String_Node_Str"" + ((XObjectEditorInput)editor.getEditorInput()).getName() + Util.getRevision((TreeObject)((XObjectEditorInput)editor.getEditorInput()).getModel()));
  Object model=((XObjectEditorInput)editor.getEditorInput()).getModel();
  this.viewName=((TreeObject)model).getName();
}",0.812051649928264
147942,"public String[] getGlobalInfos(){
  if (propSection.getTreeObject() == null)   return new String[0];
  if (propSection.getTreeObject().getServerRoot() == null && typeCode == TreeObject.ROLE) {
    return MDMRepositoryViewExtensionService.findAllRoleNames().toArray(new String[0]);
  }
  return Util.getChildren(propSection.getTreeObject().getServerRoot(),typeCode).toArray(new String[0]);
}","public String[] getGlobalInfos(){
  if (propSection.getTreeObject() == null)   return new String[0];
  if (propSection.getTreeObject().getServerRoot() == null) {
    if (typeCode == TreeObject.ROLE)     return MDMRepositoryViewExtensionService.findAllRoleNames().toArray(new String[0]);
    if (typeCode == TreeObject.WORKFLOW_PROCESS)     return MDMRepositoryViewExtensionService.findAllWorkflowNames().toArray(new String[0]);
  }
  return Util.getChildren(propSection.getTreeObject().getServerRoot(),typeCode).toArray(new String[0]);
}",0.6925566343042071
147943,"public static List<String> findAllRoleNames(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IExtensionPoint extensionPoint=registry.getExtensionPoint(PLUGIN,EXTENSION_POINT);
  if (extensionPoint != null && extensionPoint.isValid()) {
    IExtension[] extensions=extensionPoint.getExtensions();
    for (    IExtension s : extensions) {
      IConfigurationElement[] elements=s.getConfigurationElements();
      for (      IConfigurationElement element : elements) {
        if (element.getAttribute(PROP_CLASS) != null) {
          try {
            IMDMRepositoryViewServiceExt repositoryViewService=(IMDMRepositoryViewServiceExt)element.createExecutableExtension(PROP_CLASS);
            return repositoryViewService.findAllRoleNames();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
            return null;
          }
        }
      }
    }
  }
  return null;
}","public static List<String> findAllRoleNames(){
  IMDMRepositoryViewServiceExt service=getRepositoryViewService();
  if (service != null)   return service.findAllRoleNames();
 else   return null;
}",0.3098842386464826
147944,"public void stepUp(TreeViewer targetTreeViewer){
  TreeItem item;
  TreeItem[] items=targetTreeViewer.getTree().getSelection();
  for (int i=0; i < items.length; i++) {
    item=items[i];
    if (!(item.getData() instanceof XSDConcreteComponent))     continue;
    XSDConcreteComponent component=(XSDConcreteComponent)item.getData();
    if (!(component instanceof XSDParticle))     continue;
 else {
      XSDParticle particle=(XSDParticle)component;
      if (particle.getContainer() instanceof XSDModelGroup) {
        XSDModelGroup mp=(XSDModelGroup)particle.getContainer();
        int index=mp.getContents().indexOf(particle);
        if (index > 0) {
          mp.getContents().move(index - 1,index);
          this.refresh();
        }
      }
    }
  }
  this.markDirtyWithoutCommit();
}","public void stepUp(TreeViewer targetTreeViewer){
  TreeItem item;
  TreeItem[] items=targetTreeViewer.getTree().getSelection();
  boolean isDirty=false;
  for (int i=0; i < items.length; i++) {
    item=items[i];
    Object data=item.getData();
    EList content=getXSDComponentContainer(data);
    if (content != null) {
      int index=content.indexOf(data);
      if (index > 0) {
        content.move(index - 1,index);
        isDirty=true;
        this.refresh();
      }
    }
  }
  if (isDirty)   this.markDirtyWithoutCommit();
}",0.5675675675675675
147945,"public void stepDown(TreeViewer targetTreeViewer){
  TreeItem item;
  TreeItem[] items=targetTreeViewer.getTree().getSelection();
  for (int i=items.length - 1; i >= 0; i--) {
    item=items[i];
    if (!(item.getData() instanceof XSDConcreteComponent))     continue;
    XSDConcreteComponent component=(XSDConcreteComponent)item.getData();
    if (!(component instanceof XSDParticle))     continue;
 else {
      XSDParticle particle=(XSDParticle)component;
      if (particle.getContainer() instanceof XSDModelGroup) {
        XSDModelGroup mp=(XSDModelGroup)particle.getContainer();
        int index=mp.getContents().indexOf(particle);
        if (index < mp.getContents().size() - 1) {
          mp.getContents().move(index,index + 1);
          this.refresh();
        }
      }
    }
  }
  this.markDirtyWithoutCommit();
}","public void stepDown(TreeViewer targetTreeViewer){
  TreeItem item;
  TreeItem[] items=targetTreeViewer.getTree().getSelection();
  boolean isDirty=false;
  for (int i=items.length - 1; i >= 0; i--) {
    item=items[i];
    Object data=item.getData();
    EList content=getXSDComponentContainer(data);
    if (content != null) {
      int index=content.indexOf(data);
      if (index < content.size() - 1) {
        content.move(index,index + 1);
        this.refresh();
      }
    }
  }
  if (isDirty)   this.markDirtyWithoutCommit();
}",0.5749817117776153
147946,"@Override public void initCommonViewer(CommonViewer commonViewer){
  super.initCommonViewer(commonViewer);
  addAction=new NewDataContainerAction();
  addAction.initCommonViewer(commonViewer);
}","@Override public void initCommonViewer(CommonViewer commonViewer){
  super.initCommonViewer(commonViewer);
  addAction=initRepositoryAction(new NewDataContainerAction(),commonViewer);
  exportDataClusterAction=initRepositoryAction(new ExportDataClusterAction(),commonViewer);
}",0.7091295116772823
147947,"@Override public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=super.getActions(viewObj);
  if (RepositoryResourceUtil.hasContainerItem(viewObj,FolderType.SYSTEM_FOLDER_LITERAL,FolderType.FOLDER_LITERAL)) {
    actions.add(addAction);
  }
  if (viewObj.getProperty().getItem() instanceof MDMServerObjectItem) {
    actions.add(renameAction);
    actions.add(deployToAction);
    addAction(actions,deployToLastServerAction,viewObj);
  }
  actions.add(deployAllAction);
  return actions;
}","@Override public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=super.getActions(viewObj);
  if (RepositoryResourceUtil.hasContainerItem(viewObj,FolderType.SYSTEM_FOLDER_LITERAL,FolderType.FOLDER_LITERAL)) {
    actions.add(addAction);
  }
  if (viewObj.getProperty().getItem() instanceof MDMServerObjectItem) {
    actions.add(renameAction);
    actions.add(deployToAction);
    addAction(actions,deployToLastServerAction,viewObj);
    actions.add(exportDataClusterAction);
  }
  actions.add(deployAllAction);
  return actions;
}",0.9636048526863084
147948,"@Override public void initCommonViewer(CommonViewer commonViewer){
  super.initCommonViewer(commonViewer);
  addAction=initRepositoryAction(new NewDataContainerAction(),commonViewer);
  exportDataClusterAction=initRepositoryAction(new ExportDataClusterAction(),commonViewer);
}","@Override public void initCommonViewer(CommonViewer commonViewer){
  super.initCommonViewer(commonViewer);
  addAction=initRepositoryAction(new NewDataContainerAction(),commonViewer);
  exportDataClusterAction=initRepositoryAction(new ExportDataClusterAction(),commonViewer);
  importDataClusterAction=initRepositoryAction(new ImportDataClusterAction(),commonViewer);
}",0.8575851393188855
147949,"@Override public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=super.getActions(viewObj);
  if (RepositoryResourceUtil.hasContainerItem(viewObj,FolderType.SYSTEM_FOLDER_LITERAL,FolderType.FOLDER_LITERAL)) {
    actions.add(addAction);
  }
  if (viewObj.getProperty().getItem() instanceof MDMServerObjectItem) {
    actions.add(renameAction);
    actions.add(deployToAction);
    addAction(actions,deployToLastServerAction,viewObj);
    actions.add(exportDataClusterAction);
  }
  actions.add(deployAllAction);
  return actions;
}","@Override public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=super.getActions(viewObj);
  if (RepositoryResourceUtil.hasContainerItem(viewObj,FolderType.SYSTEM_FOLDER_LITERAL,FolderType.FOLDER_LITERAL)) {
    actions.add(addAction);
  }
  if (viewObj.getProperty().getItem() instanceof MDMServerObjectItem) {
    actions.add(renameAction);
    actions.add(deployToAction);
    addAction(actions,deployToLastServerAction,viewObj);
    actions.add(exportDataClusterAction);
  }
  actions.add(deployAllAction);
  actions.add(importDataClusterAction);
  return actions;
}",0.9627831715210357
147950,"public boolean copyViewObj(IRepositoryViewObject dragViewObj,IRepositoryViewObject dropViewObj){
  if (dropViewObj != null && dragViewObj != null) {
    Property dragProp=dropViewObj.getProperty();
    MDMServerObject serverObj=((MDMServerObjectItem)dragProp.getItem()).getMDMServerObject();
    IRepositoryViewObject dragParentViewObj=getParentRepositoryViewObject(dragViewObj);
    ContainerItem dragParentItem=(ContainerItem)dragParentViewObj.getProperty().getItem();
    String newName=showPasteDlg(dragParentItem.getRepObjType(),dragParentItem,""String_Node_Str"" + serverObj.getName());
    if (newName != null) {
      String pathStr=dragProp.getItem().getState().getPath();
      IPath path=new Path(pathStr);
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      try {
        Item copy=factory.copy(dragProp.getItem(),path,true);
        if (copy instanceof MDMServerObjectItem) {
          ((MDMServerObjectItem)copy).getMDMServerObject().setName(newName);
        }
        newName=RepositoryResourceUtil.escapeSpecialCharacters(newName);
        copy.getProperty().setLabel(newName);
        factory.save(copy);
        return true;
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
catch (      BusinessException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
  return false;
}","public boolean copyViewObj(IRepositoryViewObject dragViewObj,IRepositoryViewObject dropViewObj){
  if (dropViewObj != null && dragViewObj != null) {
    Property dragProp=dropViewObj.getProperty();
    MDMServerObject serverObj=((MDMServerObjectItem)dragProp.getItem()).getMDMServerObject();
    IRepositoryViewObject dragParentViewObj=getParentRepositoryViewObject(dragViewObj);
    ContainerItem dragParentItem=(ContainerItem)dragParentViewObj.getProperty().getItem();
    String newName=showPasteDlg(dragParentItem.getRepObjType(),dragParentItem,""String_Node_Str"" + serverObj.getName());
    if (newName != null) {
      String pathStr=dragProp.getItem().getState().getPath();
      IPath path=new Path(pathStr);
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      try {
        Item copy=factory.copy(dragProp.getItem(),path,true);
        if (copy instanceof MDMServerObjectItem) {
          ((MDMServerObjectItem)copy).getMDMServerObject().setName(newName);
        }
        copy.getProperty().setLabel(newName);
        factory.save(copy);
        return true;
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
catch (      BusinessException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
  return false;
}",0.9731518940787054
147951,"@Override public void run(){
  Object obj=getSelectedObject().get(0);
  if (obj instanceof IRepositoryViewObject) {
    IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
    MDMServerObjectItem item=(MDMServerObjectItem)viewObj.getProperty().getItem();
    MDMServerObject serverObject=item.getMDMServerObject();
    IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (configuration != null) {
      ERepositoryObjectType type=configuration.getResourceProvider().getRepositoryObjectType(item);
      IRepositoryViewObject parentViewObj=ContainerCacheService.get(type,item.getState().getPath());
      try {
        if (serverObject != null) {
          String oldName=serverObject.getName();
          String newName=showRenameDlg(type,(ContainerItem)parentViewObj.getProperty().getItem(),oldName);
          if (newName != null) {
            serverObject.setName(newName);
            newName=RepositoryResourceUtil.escapeSpecialCharacters(newName);
            viewObj.getProperty().setLabel(newName);
            factory.save(viewObj.getProperty().getItem(),false);
            CommandManager.getInstance().pushCommand(ICommand.CMD_RENAME,viewObj.getId(),new String[]{oldName,newName});
          }
        }
        commonViewer.refresh(obj);
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}","@Override public void run(){
  Object obj=getSelectedObject().get(0);
  if (obj instanceof IRepositoryViewObject) {
    IRepositoryViewObject viewObj=(IRepositoryViewObject)obj;
    MDMServerObjectItem item=(MDMServerObjectItem)viewObj.getProperty().getItem();
    MDMServerObject serverObject=item.getMDMServerObject();
    IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (configuration != null) {
      ERepositoryObjectType type=configuration.getResourceProvider().getRepositoryObjectType(item);
      IRepositoryViewObject parentViewObj=ContainerCacheService.get(type,item.getState().getPath());
      try {
        if (serverObject != null) {
          String oldName=serverObject.getName();
          String newName=showRenameDlg(type,(ContainerItem)parentViewObj.getProperty().getItem(),oldName);
          if (newName != null) {
            serverObject.setName(newName);
            viewObj.getProperty().setLabel(newName);
            factory.save(viewObj.getProperty().getItem(),false);
            CommandManager.getInstance().pushCommand(ICommand.CMD_RENAME,viewObj.getId(),new String[]{oldName,newName});
          }
        }
        commonViewer.refresh(obj);
      }
 catch (      PersistenceException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}",0.972091337441102
147952,"@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  MDMServerObjectItem item=(MDMServerObjectItem)object.getProperty().getItem();
  String newName=object.getLabel();
  MDMServerObject serverObject=item.getMDMServerObject();
  try {
    if (serverObject != null) {
      String oldName=serverObject.getName();
      if (newName != null) {
        serverObject.setName(newName);
        newName=RepositoryResourceUtil.escapeSpecialCharacters(newName);
        object.getProperty().setLabel(newName);
        factory.save(object.getProperty().getItem(),false);
        if (!oldName.equals(newName)) {
          CommandManager.getInstance().pushCommand(ICommand.CMD_RENAME,object.getId(),new String[]{oldName,newName});
        }
      }
    }
  }
 catch (  PersistenceException e) {
    MessageBoxExceptionHandler.process(e);
    return false;
  }
  return true;
}","@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  MDMServerObjectItem item=(MDMServerObjectItem)object.getProperty().getItem();
  String newName=object.getLabel();
  MDMServerObject serverObject=item.getMDMServerObject();
  try {
    if (serverObject != null) {
      String oldName=serverObject.getName();
      if (newName != null) {
        serverObject.setName(newName);
        object.getProperty().setLabel(newName);
        factory.save(object.getProperty().getItem(),false);
        if (!oldName.equals(newName)) {
          CommandManager.getInstance().pushCommand(ICommand.CMD_RENAME,object.getId(),new String[]{oldName,newName});
        }
      }
    }
  }
 catch (  PersistenceException e) {
    MessageBoxExceptionHandler.process(e);
    return false;
  }
  return true;
}",0.962077922077922
147953,"public static IFile findReferenceFile(ERepositoryObjectType type,Item item,String fileExtension){
  IFolder folder=RepositoryResourceUtil.getFolder(type);
  String path=item.getState().getPath();
  if (path != null && path.length() > 0) {
    folder=folder.getFolder(path);
  }
  String name=null;
  Property property=item.getProperty();
  name=property.getLabel();
  String fileName=name + UNDERLINE + property.getVersion()+ DOT+ (fileExtension != null ? fileExtension : ""String_Node_Str"");
  IFile file=folder.getFile(fileName);
  return file;
}","public static IFile findReferenceFile(ERepositoryObjectType type,Item item,String fileExtension){
  IFolder folder=RepositoryResourceUtil.getFolder(type);
  String path=item.getState().getPath();
  if (path != null && path.length() > 0) {
    folder=folder.getFolder(path);
  }
  Property property=item.getProperty();
  String fileName=ResourceFilenameHelper.getExpectedFileName(property.getLabel(),property.getVersion()) + DOT + (fileExtension != null ? fileExtension : ""String_Node_Str"");
  IFile file=folder.getFile(fileName);
  return file;
}",0.8252516010978957
147954,"public static boolean createItem(Item item,String propLabel,String version,boolean pushCommandStack){
  String name=propLabel;
  propLabel=escapeSpecialCharacters(propLabel);
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  RepositoryContext context=factory.getRepositoryContext();
  Property prop=PropertiesFactory.eINSTANCE.createProperty();
  item.setProperty(prop);
  try {
    String nextId=factory.getNextId();
    Property property=item.getProperty();
    property.setId(nextId);
    property.setVersion(version);
    property.setAuthor(context.getUser());
    property.setLabel(propLabel);
    factory.create(item,new Path(item.getState().getPath()));
    IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (configuration != null) {
      IRepositoryNodeResourceProvider resourceProvider=configuration.getResourceProvider();
      if (resourceProvider.needSaveReferenceFile()) {
        resourceProvider.handleReferenceFile(item);
      }
    }
    if (pushCommandStack) {
      CommandManager.getInstance().pushCommand(ICommand.CMD_ADD,nextId,name);
    }
    return true;
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return false;
}","public static boolean createItem(Item item,String propLabel,String version,boolean pushCommandStack){
  String name=propLabel;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  RepositoryContext context=factory.getRepositoryContext();
  Property prop=PropertiesFactory.eINSTANCE.createProperty();
  item.setProperty(prop);
  try {
    String nextId=factory.getNextId();
    Property property=item.getProperty();
    property.setId(nextId);
    property.setVersion(version);
    property.setAuthor(context.getUser());
    property.setLabel(propLabel);
    factory.create(item,new Path(item.getState().getPath()));
    IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (configuration != null) {
      IRepositoryNodeResourceProvider resourceProvider=configuration.getResourceProvider();
      if (resourceProvider.needSaveReferenceFile()) {
        resourceProvider.handleReferenceFile(item);
      }
    }
    if (pushCommandStack) {
      CommandManager.getInstance().pushCommand(ICommand.CMD_ADD,nextId,name);
    }
    return true;
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return false;
}",0.9809220985691574
147955,"protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=(XSDDeleteConceptAction)getAdapter(XSDDeleteConceptAction.class);
  this.newBrowseItemAction=new XSDNewBrowseItemViewAction(this);
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this,false);
  this.changeSubElementGroupAction=new XSDChangeToComplexTypeAction(this,true);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=(XSDSetAnnotationForeignKeyAction)getAdapter(XSDSetAnnotationForeignKeyAction.class);
  visibleRuleAction=new XSDVisibleRuleAction(this,dataModelName);
  defaultValueRuleAction=new XSDDefaultValueRuleAction(this,dataModelName);
  this.setAnnotationFKFilterAction=(XSDSetAnnotationFKFilterAction)getAdapter(XSDSetAnnotationFKFilterAction.class);
  this.setAnnotationForeignKeyInfoAction=(XSDSetAnnotationForeignKeyInfoAction)getAdapter(XSDSetAnnotationForeignKeyInfoAction.class);
  this.setAnnotationWriteAction=(XSDSetAnnotationWriteAction)getAdapter(XSDSetAnnotationWriteAction.class);
  this.setAnnotationWrapWriteAction=(XSDSetAnnotationWrapWriteAction)getAdapter(XSDSetAnnotationWrapWriteAction.class);
  this.setAnnotationNoAction=(XSDSetAnnotationNoAction)getAdapter(XSDSetAnnotationNoAction.class);
  this.setAnnotationWrapNoAction=(XSDSetAnnotationWrapNoAction)getAdapter(XSDSetAnnotationWrapNoAction.class);
  this.setAnnotationDisplayFomatAction=new XSDSetAnnotaionDisplayFormatAction(this);
  this.setAnnotationLookupFieldsAction=new XSDAnnotationLookupFieldsAction(this);
  this.setAnnotationPrimaryKeyInfoAction=new XSDSetAnnotationPrimaryKeyInfoAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}","protected void createActions(){
  this.newConceptAction=new XSDNewConceptAction(this);
  this.deleteConceptAction=(XSDDeleteConceptAction)getAdapter(XSDDeleteConceptAction.class);
  createNewBrowseItemViewAction();
  this.deleteConceptWrapAction=new XSDDeleteConceptWrapAction(this);
  this.newElementAction=new XSDNewElementAction(this);
  this.deleteElementAction=new XSDDeleteElementAction(this);
  this.changeToComplexTypeAction=new XSDChangeToComplexTypeAction(this,false);
  this.changeSubElementGroupAction=new XSDChangeToComplexTypeAction(this,true);
  this.deleteParticleAction=new XSDDeleteParticleAction(this);
  this.newParticleFromTypeAction=new XSDNewParticleFromTypeAction(this);
  this.newParticleFromParticleAction=new XSDNewParticleFromParticleAction(this);
  this.newGroupFromTypeAction=new XSDNewGroupFromTypeAction(this);
  this.editParticleAction=new XSDEditParticleAction(this);
  this.editConceptAction=new XSDEditConceptAction(this);
  this.editElementAction=new XSDEditElementAction(this);
  this.deleteIdentityConstraintAction=new XSDDeleteIdentityConstraintAction(this);
  this.editIdentityConstraintAction=new XSDEditIdentityConstraintAction(this);
  this.newIdentityConstraintAction=new XSDNewIdentityConstraintAction(this);
  this.deleteXPathAction=new XSDDeleteXPathAction(this);
  this.newXPathAction=new XSDNewXPathAction(this);
  this.editXPathAction=new XSDEditXPathAction(this);
  this.changeToSimpleTypeAction=new XSDChangeToSimpleTypeAction(this);
  this.changeBaseTypeAction=new XSDChangeBaseTypeAction(this);
  this.getXPathAction=new XSDGetXPathAction(this);
  this.setAnnotationLabelAction=new XSDSetAnnotationLabelAction(this);
  this.setAnnotationDescriptionsAction=new XSDSetAnnotationDescriptionsAction(this);
  this.setAnnotationForeignKeyAction=(XSDSetAnnotationForeignKeyAction)getAdapter(XSDSetAnnotationForeignKeyAction.class);
  visibleRuleAction=new XSDVisibleRuleAction(this,dataModelName);
  defaultValueRuleAction=new XSDDefaultValueRuleAction(this,dataModelName);
  this.setAnnotationFKFilterAction=(XSDSetAnnotationFKFilterAction)getAdapter(XSDSetAnnotationFKFilterAction.class);
  this.setAnnotationForeignKeyInfoAction=(XSDSetAnnotationForeignKeyInfoAction)getAdapter(XSDSetAnnotationForeignKeyInfoAction.class);
  this.setAnnotationWriteAction=(XSDSetAnnotationWriteAction)getAdapter(XSDSetAnnotationWriteAction.class);
  this.setAnnotationWrapWriteAction=(XSDSetAnnotationWrapWriteAction)getAdapter(XSDSetAnnotationWrapWriteAction.class);
  this.setAnnotationNoAction=(XSDSetAnnotationNoAction)getAdapter(XSDSetAnnotationNoAction.class);
  this.setAnnotationWrapNoAction=(XSDSetAnnotationWrapNoAction)getAdapter(XSDSetAnnotationWrapNoAction.class);
  this.setAnnotationDisplayFomatAction=new XSDSetAnnotaionDisplayFormatAction(this);
  this.setAnnotationLookupFieldsAction=new XSDAnnotationLookupFieldsAction(this);
  this.setAnnotationPrimaryKeyInfoAction=new XSDSetAnnotationPrimaryKeyInfoAction(this);
  this.deleteTypeDefinition=new XSDDeleteTypeDefinition(this);
  this.newComplexTypeAction=new XSDNewComplexTypeDefinition(this);
  this.newSimpleTypeAction=new XSDNewSimpleTypeDefinition(this);
  this.editComplexTypeAction=new XSDEditComplexTypeAction(this);
  this.setFacetMsgAction=new XSDSetFacetMessageAction(this);
  deleteConceptWrapAction.regisDelAction(XSDElementDeclarationImpl.class,deleteConceptAction);
  deleteConceptWrapAction.regisDelAction(XSDParticleImpl.class,deleteParticleAction);
  deleteConceptWrapAction.regisDelAction(XSDIdentityConstraintDefinitionImpl.class,deleteIdentityConstraintAction);
  deleteConceptWrapAction.regisDelAction(XSDXPathDefinitionImpl.class,deleteXPathAction);
  deleteConceptWrapAction.regisDelAction(null,deleteElementAction);
  deleteConceptWrapAction.regisDelAction(XSDComplexTypeDefinitionImpl.class,deleteTypeDefinition);
  deleteConceptWrapAction.regisDelAction(XSDSimpleTypeDefinitionImpl.class,deleteTypeDefinition);
}",0.9944402324993682
147956,"@Override protected void doSave(WSDataModel wsObject) throws Exception {
  XObjectEditorInput2 editorInput=(XObjectEditorInput2)getEditorInput();
  if (xsdFile != null) {
    String xsd=getXSDSchemaString();
    xsdFile.setCharset(""String_Node_Str"",null);
    xsdFile.setContents(new ByteArrayInputStream(xsd.getBytes(""String_Node_Str"")),IFile.FORCE,null);
  }
  MDMServerObjectItem serverObjectItem=(MDMServerObjectItem)editorInput.getInputItem();
  MDMServerObject serverObject=serverObjectItem.getMDMServerObject();
  EObject eObj=Bean2EObjUtil.getInstance().convertFromBean2EObj(wsObject,serverObject);
  if (eObj != null) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(serverObjectItem);
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
  refreshDirtyCue();
  if (PlatformUI.getPreferenceStore().getBoolean(PreferenceConstants.P_AUTO_DEPLOY)) {
    autoDeploy(serverObject);
  }
}","@Override protected void doSave(WSDataModel wsObject) throws Exception {
  XObjectEditorInput2 editorInput=(XObjectEditorInput2)getEditorInput();
  if (isGenView && xsdFile != null) {
    String xsd=getXSDSchemaString();
    xsdFile.setCharset(""String_Node_Str"",null);
    xsdFile.setContents(new ByteArrayInputStream(xsd.getBytes(""String_Node_Str"")),IFile.FORCE,null);
  }
  MDMServerObjectItem serverObjectItem=(MDMServerObjectItem)editorInput.getInputItem();
  MDMServerObject serverObject=serverObjectItem.getMDMServerObject();
  EObject eObj=Bean2EObjUtil.getInstance().convertFromBean2EObj(wsObject,serverObject);
  if (eObj != null) {
    IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
    try {
      factory.save(serverObjectItem);
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage(),e);
    }
  }
  refreshDirtyCue();
  if (PlatformUI.getPreferenceStore().getBoolean(PreferenceConstants.P_AUTO_DEPLOY)) {
    autoDeploy(serverObject);
  }
}",0.9935802469135804
147957,"private boolean importServerItem(Collection<ItemRecord> items){
  if (items.size() == 0) {
    return true;
  }
  Iterator<ItemRecord> itemIt=items.iterator();
  while (itemIt.hasNext()) {
    ItemRecord itemRecord=itemIt.next();
    if (itemRecord.getExistingItemWithSameId() == null && itemRecord.getErrors() != null) {
      return true;
    }
  }
  return false;
}","private boolean importServerItem(Collection<ItemRecord> items){
  if (items.size() == 0) {
    return true;
  }
  Iterator<ItemRecord> itemIt=items.iterator();
  while (itemIt.hasNext()) {
    ItemRecord itemRecord=itemIt.next();
    if (itemRecord.getExistingItemWithSameId() == null && itemRecord.getErrors() != null && itemRecord.getErrors().size() > 0) {
      return true;
    }
  }
  return false;
}",0.9521345407503234
147958,"/** 
 * Initialize the menu.
 */
private void initializeMenu(){
  MenuManager menuManager=new MenuManager();
  addServerDefAction=new AddServerDefAction();
  menuManager.add(addServerDefAction);
  menuManager.add(new DeleteServerDefAction());
  menuManager.add(new EditServerDefAction());
  menuManager.add(new CheckConnectionAction());
  Menu contextMenu=menuManager.createContextMenu(tree);
  tree.setMenu(contextMenu);
  getSite().registerContextMenu(menuManager,treeViewer);
}","/** 
 * Initialize the menu.
 */
private void initializeMenu(){
  MenuManager menuManager=new MenuManager();
  addServerDefAction=new AddServerDefAction();
  menuManager.add(addServerDefAction);
  menuManager.add(new DeleteServerDefAction());
  menuManager.add(new EditServerDefAction());
  menuManager.add(new CheckConnectionAction());
  eventManagerAction=new EventManageAction();
  menuManager.add(eventManagerAction);
  Menu contextMenu=menuManager.createContextMenu(tree);
  tree.setMenu(contextMenu);
  getSite().registerContextMenu(menuManager,treeViewer);
}",0.9186602870813396
147959,"protected boolean filterRepositoryNode(TreeObject node){
  if (node == null) {
    return false;
  }
  if (node.getType() == TreeObject.SUBSCRIPTION_ENGINE || node.getType() == TreeObject.SERVICE_CONFIGURATION || !Util.IsEnterPrise() && node.getType() == TreeObject.WORKFLOW || !Util.IsEnterPrise() && node.getType() == TreeObject.WORKFLOW_PROCESS || node.getType() == TreeObject.JOB || node.getType() == TreeObject.JOB_REGISTRY) {
    return false;
  }
  if (!Util.IsEnterPrise()) {
    if (node.getType() == TreeObject.ROLE || node.getType() == TreeObject.UNIVERSE || node.getType() == TreeObject.SYNCHRONIZATIONPLAN) {
      return false;
    }
  }
  return true;
}","protected boolean filterRepositoryNode(TreeObject node,boolean isOverWrite){
  if (node == null) {
    return false;
  }
  if (node.getType() == TreeObject.SUBSCRIPTION_ENGINE || node.getType() == TreeObject.SERVICE_CONFIGURATION || !Util.IsEnterPrise() && node.getType() == TreeObject.WORKFLOW || !Util.IsEnterPrise() && node.getType() == TreeObject.WORKFLOW_PROCESS || node.getType() == TreeObject.JOB || node.getType() == TreeObject.JOB_REGISTRY) {
    return false;
  }
  if (!Util.IsEnterPrise()) {
    if (node.getType() == TreeObject.ROLE || node.getType() == TreeObject.UNIVERSE || node.getType() == TreeObject.SYNCHRONIZATIONPLAN) {
      return false;
    }
  }
  if (!isOverWrite) {
    if (isExist(node))     return false;
  }
  return true;
}",0.9360505973295854
147960,"@Override public void widgetSelected(SelectionEvent e){
  isOverrideAll=btnOverwrite.getSelection();
}","@Override public void widgetSelected(SelectionEvent e){
  isOverrideAll=btnOverwrite.getSelection();
  treeViewer.setOverWrite(isOverrideAll);
  treeViewer.getViewer().refresh();
}",0.723404255319149
147961,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(4,false));
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  setControl(composite);
  Group serverGroup=new Group(composite,SWT.NORMAL);
  serverGroup.setText(Messages.Select_Server);
  serverGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  serverGroup.setLayout(new GridLayout(2,false));
  txtServer=new Text(serverGroup,SWT.BORDER);
  txtServer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  Button btnSel=new Button(serverGroup,SWT.PUSH);
  btnSel.setText(""String_Node_Str"");
  btnSel.setToolTipText(Messages.Select_Server);
  txtServer.setEnabled(false);
  btnSel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectServerDefDialog dlg=new SelectServerDefDialog(getShell());
      if (dlg.open() == IDialogConstants.OK_ID) {
        serverDef=dlg.getSelectedServerDef();
        txtServer.setText(serverDef.getUrl());
        String url=serverDef.getUrl();
        String user=serverDef.getUser();
        String password=serverDef.getPasswd();
        if (Util.IsEnterPrise()) {
          try {
            XtentisPort port;
            port=Util.getPort(new URL(url),null,user,password);
            WSUniversePK[] universePKs=port.getUniversePKs(new WSGetUniversePKs(""String_Node_Str"")).getWsUniversePK();
            CCombo universeCombo=comboVersion.getCombo();
            universeCombo.removeAll();
            universeCombo.add(""String_Node_Str"");
            if (universePKs != null && universePKs.length > 0) {
              for (int i=0; i < universePKs.length; i++) {
                String universe=universePKs[i].getPk();
                universeCombo.add(universe);
              }
            }
          }
 catch (          Exception e1) {
            comboVersion.getCombo().removeAll();
          }
        }
      }
      retriveServerRoot();
      treeViewer.refresh();
      updateSelectedObjects();
      checkCompleted();
    }
  }
);
  if (Util.IsEnterPrise()) {
    comboVersion=new LabelCombo(toolkit,serverGroup,Messages.Version,SWT.BORDER,2);
    comboVersion.getCombo().setEditable(false);
    comboVersion.getCombo().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        serverDef.setUniverse(comboVersion.getCombo().getText());
        retriveServerRoot();
      }
    }
);
    toolkit.setBackGround((Composite)comboVersion.getComposite(),serverGroup.getBackground());
  }
  treeViewer=new TreeObjectCheckTreeViewer((TreeParent)serverRoot);
  treeViewer.addButtonSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateSelectedObjects();
      checkCompleted();
    }
  }
);
  Composite itemcom=treeViewer.createItemList(composite);
  treeViewer.getViewer().setInput(null);
  itemcom.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,5));
  treeViewer.setItemText(Messages.Select_Items_To_Imports);
  treeViewer.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent arg0){
      updateSelectedObjects();
      checkCompleted();
    }
  }
);
  treeViewer.getViewer().addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof TreeObject) {
        int type=((TreeObject)element).getType();
        if (type == 26 || type == 24 || type == 25)         return false;
      }
      return true;
    }
  }
);
  btnOverwrite=new Button(composite,SWT.CHECK);
  btnOverwrite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isOverrideAll=btnOverwrite.getSelection();
    }
  }
);
  btnOverwrite.setText(Messages.Overwrite_Exists_Items);
  btnOverwrite.setSelection(true);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).hint(920,600).applyTo(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER);
  composite.setLayout(new GridLayout(4,false));
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  setControl(composite);
  Group serverGroup=new Group(composite,SWT.NORMAL);
  serverGroup.setText(Messages.Select_Server);
  serverGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));
  serverGroup.setLayout(new GridLayout(2,false));
  txtServer=new Text(serverGroup,SWT.BORDER);
  txtServer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  Button btnSel=new Button(serverGroup,SWT.PUSH);
  btnSel.setText(""String_Node_Str"");
  btnSel.setToolTipText(Messages.Select_Server);
  txtServer.setEnabled(false);
  btnSel.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectServerDefDialog dlg=new SelectServerDefDialog(getShell());
      if (dlg.open() == IDialogConstants.OK_ID) {
        serverDef=dlg.getSelectedServerDef();
        txtServer.setText(serverDef.getUrl());
        String url=serverDef.getUrl();
        String user=serverDef.getUser();
        String password=serverDef.getPasswd();
        if (Util.IsEnterPrise()) {
          try {
            XtentisPort port;
            port=Util.getPort(new URL(url),null,user,password);
            WSUniversePK[] universePKs=port.getUniversePKs(new WSGetUniversePKs(""String_Node_Str"")).getWsUniversePK();
            CCombo universeCombo=comboVersion.getCombo();
            universeCombo.removeAll();
            universeCombo.add(""String_Node_Str"");
            if (universePKs != null && universePKs.length > 0) {
              for (int i=0; i < universePKs.length; i++) {
                String universe=universePKs[i].getPk();
                universeCombo.add(universe);
              }
            }
          }
 catch (          Exception e1) {
            comboVersion.getCombo().removeAll();
          }
        }
      }
      retriveServerRoot();
      treeViewer.refresh();
      updateSelectedObjects();
      checkCompleted();
    }
  }
);
  if (Util.IsEnterPrise()) {
    comboVersion=new LabelCombo(toolkit,serverGroup,Messages.Version,SWT.BORDER,2);
    comboVersion.getCombo().setEditable(false);
    comboVersion.getCombo().addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        serverDef.setUniverse(comboVersion.getCombo().getText());
        retriveServerRoot();
      }
    }
);
    toolkit.setBackGround((Composite)comboVersion.getComposite(),serverGroup.getBackground());
  }
  treeViewer=new TreeObjectCheckTreeViewer((TreeParent)serverRoot);
  treeViewer.addButtonSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateSelectedObjects();
      checkCompleted();
    }
  }
);
  Composite itemcom=treeViewer.createItemList(composite);
  treeViewer.getViewer().setInput(null);
  itemcom.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,4,5));
  treeViewer.setItemText(Messages.Select_Items_To_Imports);
  treeViewer.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent arg0){
      updateSelectedObjects();
      checkCompleted();
    }
  }
);
  treeViewer.getViewer().addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof TreeObject) {
        int type=((TreeObject)element).getType();
        if (type == 26 || type == 24 || type == 25)         return false;
      }
      return true;
    }
  }
);
  btnOverwrite=new Button(composite,SWT.CHECK);
  btnOverwrite.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isOverrideAll=btnOverwrite.getSelection();
      treeViewer.setOverWrite(isOverrideAll);
      treeViewer.getViewer().refresh();
    }
  }
);
  btnOverwrite.setText(Messages.Overwrite_Exists_Items);
  btnOverwrite.setSelection(true);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).hint(920,600).applyTo(composite);
}",0.9897030651340996
147962,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  TreeObject node=(TreeObject)element;
  return filterRepositoryNode(node);
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  TreeObject node=(TreeObject)element;
  return filterRepositoryNode(node,isOverWrite);
}",0.9640718562874252
147963,"protected void createTreeViewer(Composite itemComposite){
  filteredCheckboxTree=new FilteredCheckboxTree(itemComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI){
    ContainerCheckedTreeViewer treeViewer;
    @Override protected CheckboxTreeViewer doCreateTreeViewer(    Composite parent,    int style){
      treeViewer=new ContainerCheckedTreeViewer(parent);
      contentProvider=new TreeObjectContentProvider(serverRoot);
      treeViewer.setContentProvider(contentProvider);
      treeViewer.setLabelProvider(new ServerTreeLabelProvider());
      treeViewer.setInput(serverRoot);
      return treeViewer;
    }
    @Override protected boolean isNodeCollectable(    TreeItem item){
      return false;
    }
    @Override protected void refreshCompleted(){
      treeViewer.expandToLevel(3);
      restoreCheckedElements();
    }
  }
;
  filteredCheckboxTree.getViewer().addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      TreeObject node=(TreeObject)element;
      return filterRepositoryNode(node);
    }
  }
);
}","protected void createTreeViewer(Composite itemComposite){
  filteredCheckboxTree=new FilteredCheckboxTree(itemComposite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL| SWT.MULTI){
    ContainerCheckedTreeViewer treeViewer;
    @Override protected CheckboxTreeViewer doCreateTreeViewer(    Composite parent,    int style){
      treeViewer=new ContainerCheckedTreeViewer(parent);
      contentProvider=new TreeObjectContentProvider(serverRoot);
      treeViewer.setContentProvider(contentProvider);
      treeViewer.setLabelProvider(new ServerTreeLabelProvider());
      treeViewer.setInput(serverRoot);
      return treeViewer;
    }
    @Override protected boolean isNodeCollectable(    TreeItem item){
      return false;
    }
    @Override protected void refreshCompleted(){
      treeViewer.expandToLevel(3);
      restoreCheckedElements();
    }
  }
;
  filteredCheckboxTree.getViewer().addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      TreeObject node=(TreeObject)element;
      return filterRepositoryNode(node,isOverWrite);
    }
  }
);
}",0.9946476360392508
147964,"public String getCategoryLabel(ERepositoryObjectType type){
  return null;
}","public String getCategoryLabel(ERepositoryObjectType type){
  return getText(null);
}",0.9440993788819876
147965,"private String getLabel(Object element){
  if (element instanceof IRepositoryNodeConfiguration) {
    return ((IRepositoryNodeConfiguration)element).getLabelProvider().getCategoryLabel(null);
  }
  return ""String_Node_Str"";
}","private String getLabel(Object element){
  if (element instanceof IRepositoryViewObject) {
    Item item=((IRepositoryViewObject)element).getProperty().getItem();
    IRepositoryNodeConfiguration conf=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (conf != null) {
      return conf.getLabelProvider().getText(element);
    }
  }
  return ""String_Node_Str"";
}",0.4643449419568822
147966,"/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  GridLayout gl_container=new GridLayout(1,false);
  gl_container.marginRight=5;
  container.setLayout(gl_container);
  Group nameGroup=new Group(container,SWT.NONE);
  nameGroup.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  GridLayout gl_nameGroup=new GridLayout(1,false);
  nameGroup.setLayout(gl_nameGroup);
  nameGroup.setText(Messages.RepositoryViewFilterDialog_groupNamePattern);
  enableNameFilterBun=new Button(nameGroup,SWT.CHECK);
  enableNameFilterBun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      namePatternTxt.setEnabled(enableNameFilterBun.getSelection());
    }
  }
);
  enableNameFilterBun.setText(Messages.RepositoryViewFilterDialog_enableNameFilter);
  namePatternTxt=new Text(nameGroup,SWT.BORDER);
  namePatternTxt.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  namePatternTxt.setSize(440,18);
  objectgroup=new Group(container,SWT.NONE);
  objectgroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  objectgroup.setText(Messages.RepositoryViewFilterDialog_groupServerObject);
  objectgroup.setLayout(new GridLayout(1,false));
  enableServerObjFilterBun=new Button(objectgroup,SWT.CHECK);
  enableServerObjFilterBun.setSize(183,16);
  enableServerObjFilterBun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      enableServerObjFilterComposite(enableServerObjFilterBun.getSelection());
    }
  }
);
  enableServerObjFilterBun.setText(Messages.RepositoryViewFilterDialog_enableServerObjFilter);
  serverObjViewer=CheckboxTableViewer.newCheckList(objectgroup,SWT.BORDER | SWT.FULL_SELECTION);
  table=serverObjViewer.getTable();
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  table.setSize(441,121);
  enableAllBun=new Button(objectgroup,SWT.CHECK);
  enableAllBun.setSize(171,16);
  enableAllBun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      boolean selected=enableAllBun.getSelection();
      enableAllBun.setSelection(selected);
      serverObjViewer.setAllChecked(selected);
      if (selected) {
        enabledConfigs.addAll(allConfigs);
      }
 else {
        enabledConfigs.clear();
      }
    }
  }
);
  enableAllBun.setText(Messages.RepositoryViewFilterDialog_enableAllServerObject);
  serverObjViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      IRepositoryNodeConfiguration config=(IRepositoryNodeConfiguration)event.getElement();
      if (event.getChecked()) {
        enabledConfigs.add(config);
      }
 else {
        enabledConfigs.remove(config);
      }
      solveProcTriCase();
      enableAllBun.setSelection(enabledConfigs.size() == allConfigs.size());
    }
  }
);
  serverObjViewer.setLabelProvider(new ServerObjectLabelProvider());
  serverObjViewer.setContentProvider(new ArrayContentProvider());
  Group lastServerGroup=new Group(container,SWT.NONE);
  lastServerGroup.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  lastServerGroup.setLayout(new GridLayout(3,false));
  lastServerGroup.setText(Messages.RepositoryViewFilterDialog_groupLastServer);
  enableLastServerFilterBun=new Button(lastServerGroup,SWT.CHECK);
  enableLastServerFilterBun.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,2,1));
  enableLastServerFilterBun.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      enableLastServerFilterComposite(enableLastServerFilterBun.getSelection());
    }
  }
);
  enableLastServerFilterBun.setText(Messages.RepositoryViewFilterDialog_enableLastServerFilter);
  enableLastServerFilterBun.setSelection(false);
  new Label(lastServerGroup,SWT.NONE);
  lastServerLabel=new Label(lastServerGroup,SWT.NONE);
  lastServerLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lastServerLabel.setText(Messages.RepositoryViewFilterDialog_lblLastServer);
  serverNameTxt=new Text(lastServerGroup,SWT.BORDER | SWT.READ_ONLY);
  serverNameTxt.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  selServerBun=new Button(lastServerGroup,SWT.NONE);
  selServerBun.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectServerDefDialog dlg=new SelectServerDefDialog(getShell());
      if (dlg.open() == IDialogConstants.OK_ID) {
        MDMServerDef def=dlg.getSelectedServerDef();
        serverNameTxt.setText(def.getName());
      }
    }
  }
);
  selServerBun.setText(Messages.RepositoryViewFilterDialog_btnSelectServer);
  getShell().setText(Messages.RepositoryViewFilterDialog_title);
  initServerObjectFilter();
  return container;
}","/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  Composite container=(Composite)super.createDialogArea(parent);
  GridLayout gl_container=new GridLayout(1,false);
  gl_container.marginRight=5;
  container.setLayout(gl_container);
  Group nameGroup=new Group(container,SWT.NONE);
  nameGroup.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  GridLayout gl_nameGroup=new GridLayout(1,false);
  nameGroup.setLayout(gl_nameGroup);
  nameGroup.setText(Messages.RepositoryViewFilterDialog_groupNamePattern);
  enableNameFilterBun=new Button(nameGroup,SWT.CHECK);
  enableNameFilterBun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      namePatternTxt.setEnabled(enableNameFilterBun.getSelection());
    }
  }
);
  enableNameFilterBun.setText(Messages.RepositoryViewFilterDialog_enableNameFilter);
  namePatternTxt=new Text(nameGroup,SWT.BORDER);
  namePatternTxt.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  namePatternTxt.setSize(440,18);
  objectgroup=new Group(container,SWT.NONE);
  objectgroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  objectgroup.setText(Messages.RepositoryViewFilterDialog_groupServerObject);
  objectgroup.setLayout(new GridLayout(1,false));
  enableServerObjFilterBun=new Button(objectgroup,SWT.CHECK);
  enableServerObjFilterBun.setSize(183,16);
  enableServerObjFilterBun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      enableServerObjFilterComposite(enableServerObjFilterBun.getSelection());
    }
  }
);
  enableServerObjFilterBun.setText(Messages.RepositoryViewFilterDialog_enableServerObjFilter);
  serverObjViewer=CheckboxTableViewer.newCheckList(objectgroup,SWT.BORDER | SWT.FULL_SELECTION);
  table=serverObjViewer.getTable();
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  table.setSize(441,121);
  enableAllBun=new Button(objectgroup,SWT.CHECK);
  enableAllBun.setSize(171,16);
  enableAllBun.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      boolean selected=enableAllBun.getSelection();
      enableAllBun.setSelection(selected);
      serverObjViewer.setAllChecked(selected);
      if (selected) {
        enabledConfigs.addAll(allConfigs);
      }
 else {
        enabledConfigs.clear();
      }
    }
  }
);
  enableAllBun.setText(Messages.RepositoryViewFilterDialog_enableAllServerObject);
  serverObjViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      IRepositoryViewObject config=(IRepositoryViewObject)event.getElement();
      if (event.getChecked()) {
        enabledConfigs.add(config);
      }
 else {
        enabledConfigs.remove(config);
      }
      solveProcTriCase();
      enableAllBun.setSelection(enabledConfigs.size() == allConfigs.size());
    }
  }
);
  serverObjViewer.setLabelProvider(new MDMRepositoryLabelProvider());
  serverObjViewer.setContentProvider(new ArrayContentProvider());
  Group lastServerGroup=new Group(container,SWT.NONE);
  lastServerGroup.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  lastServerGroup.setLayout(new GridLayout(3,false));
  lastServerGroup.setText(Messages.RepositoryViewFilterDialog_groupLastServer);
  enableLastServerFilterBun=new Button(lastServerGroup,SWT.CHECK);
  enableLastServerFilterBun.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,2,1));
  enableLastServerFilterBun.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      enableLastServerFilterComposite(enableLastServerFilterBun.getSelection());
    }
  }
);
  enableLastServerFilterBun.setText(Messages.RepositoryViewFilterDialog_enableLastServerFilter);
  enableLastServerFilterBun.setSelection(false);
  new Label(lastServerGroup,SWT.NONE);
  lastServerLabel=new Label(lastServerGroup,SWT.NONE);
  lastServerLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  lastServerLabel.setText(Messages.RepositoryViewFilterDialog_lblLastServer);
  serverNameTxt=new Text(lastServerGroup,SWT.BORDER | SWT.READ_ONLY);
  serverNameTxt.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
  selServerBun=new Button(lastServerGroup,SWT.NONE);
  selServerBun.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectServerDefDialog dlg=new SelectServerDefDialog(getShell());
      if (dlg.open() == IDialogConstants.OK_ID) {
        MDMServerDef def=dlg.getSelectedServerDef();
        serverNameTxt.setText(def.getName());
      }
    }
  }
);
  selServerBun.setText(Messages.RepositoryViewFilterDialog_btnSelectServer);
  getShell().setText(Messages.RepositoryViewFilterDialog_title);
  initServerObjectFilter();
  return container;
}",0.9920786122530834
147967,"/** 
 * DOC hbhong Comment method ""initServerObjectTable"".
 */
private void initServerObjectFilter(){
  boolean enableNamePatternFilter=PreferenceUtil.getBoolean(NamePatternViewFilter.PROP_ENABLE);
  enableNameFilterBun.setSelection(enableNamePatternFilter);
  String namePattern=PreferenceUtil.getString(NamePatternViewFilter.PROP_NAME_PATTERN);
  if (namePattern == null || namePattern.trim().length() == 0) {
    namePattern=""String_Node_Str"";
  }
  namePatternTxt.setText(namePattern);
  namePatternTxt.setEnabled(enableNamePatternFilter);
  boolean enableServerObjFilter=PreferenceUtil.getBoolean(ServerObjectViewFilter.PROP_ENABLE);
  enableServerObjFilterBun.setSelection(enableServerObjFilter);
  allConfigs=RepositoryNodeConfigurationManager.getConfigurations();
  serverObjViewer.setInput(allConfigs);
  Set<String> enabledObjectLabels=PreferenceUtil.getStringSet(ServerObjectViewFilter.PROP_ENABLE_LIST);
  enabledConfigs=new HashSet<IRepositoryNodeConfiguration>();
  for (  IRepositoryNodeConfiguration conf : allConfigs) {
    String label=getLabel(conf);
    if (enabledObjectLabels.contains(label)) {
      serverObjViewer.setChecked(conf,true);
      enabledConfigs.add(conf);
    }
  }
  enableServerObjFilterComposite(enableServerObjFilter);
  enableAllBun.setSelection(enabledConfigs.size() == allConfigs.size());
  boolean enableLastServerFilter=PreferenceUtil.getBoolean(LastServerViewFilter.PROP_ENABLE);
  enableLastServerFilterBun.setSelection(enableLastServerFilter);
  String serverName=PreferenceUtil.getString(LastServerViewFilter.LAST_SERVER_NAME);
  serverNameTxt.setText(serverName == null ? ""String_Node_Str"" : serverName);
  enableLastServerFilterComposite(enableLastServerFilter);
}","/** 
 * DOC hbhong Comment method ""initServerObjectTable"".
 */
private void initServerObjectFilter(){
  boolean enableNamePatternFilter=PreferenceUtil.getBoolean(NamePatternViewFilter.PROP_ENABLE);
  enableNameFilterBun.setSelection(enableNamePatternFilter);
  String namePattern=PreferenceUtil.getString(NamePatternViewFilter.PROP_NAME_PATTERN);
  if (namePattern == null || namePattern.trim().length() == 0) {
    namePattern=""String_Node_Str"";
  }
  namePatternTxt.setText(namePattern);
  namePatternTxt.setEnabled(enableNamePatternFilter);
  boolean enableServerObjFilter=PreferenceUtil.getBoolean(ServerObjectViewFilter.PROP_ENABLE);
  enableServerObjFilterBun.setSelection(enableServerObjFilter);
  allConfigs=Arrays.asList(RepositoryResourceUtil.getCategoryViewObjects());
  serverObjViewer.setInput(allConfigs);
  Set<String> enabledObjectLabels=PreferenceUtil.getStringSet(ServerObjectViewFilter.PROP_ENABLE_LIST);
  enabledConfigs=new HashSet<IRepositoryViewObject>();
  for (  IRepositoryViewObject conf : allConfigs) {
    String label=getLabel(conf);
    if (enabledObjectLabels.contains(label)) {
      serverObjViewer.setChecked(conf,true);
      enabledConfigs.add(conf);
    }
  }
  enableServerObjFilterComposite(enableServerObjFilter);
  enableAllBun.setSelection(enabledConfigs.size() == allConfigs.size());
  boolean enableLastServerFilter=PreferenceUtil.getBoolean(LastServerViewFilter.PROP_ENABLE);
  enableLastServerFilterBun.setSelection(enableLastServerFilter);
  String serverName=PreferenceUtil.getString(LastServerViewFilter.LAST_SERVER_NAME);
  serverNameTxt.setText(serverName == null ? ""String_Node_Str"" : serverName);
  enableLastServerFilterComposite(enableLastServerFilter);
}",0.9574095682613768
147968,"private Set<String> getNewServerObjectPref(){
  Set<String> values=new HashSet<String>();
  for (  IRepositoryNodeConfiguration conf : enabledConfigs) {
    String label=getLabel(conf);
    if (label.length() > 0) {
      values.add(label);
    }
  }
  return values;
}","private Set<String> getNewServerObjectPref(){
  Set<String> values=new HashSet<String>();
  for (  IRepositoryViewObject conf : enabledConfigs) {
    String label=getLabel(conf);
    if (label.length() > 0) {
      values.add(label);
    }
  }
  return values;
}",0.9491525423728814
147969,"private void solveProcTriCase(){
  IRepositoryNodeConfiguration eventMgr=null;
  boolean exist=false;
  for (  IRepositoryNodeConfiguration conf : enabledConfigs) {
    if (conf instanceof EventManagerNodeConfiguration) {
      exist=true;
      break;
    }
    if (conf instanceof RoutingRuleNodeConfiguration || conf instanceof TransformerV2NodeConfiguration) {
      for (      IRepositoryNodeConfiguration confi : allConfigs) {
        if (confi instanceof EventManagerNodeConfiguration) {
          eventMgr=confi;
        }
      }
    }
  }
  if (eventMgr != null && !exist)   enabledConfigs.add(eventMgr);
}","private void solveProcTriCase(){
  IRepositoryViewObject eventMgr=null;
  boolean exist=false;
  for (  IRepositoryViewObject conf : enabledConfigs) {
    Item item=((IRepositoryViewObject)conf).getProperty().getItem();
    IRepositoryNodeConfiguration repositoryConf=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (repositoryConf instanceof EventManagerNodeConfiguration) {
      exist=true;
      break;
    }
    if (repositoryConf instanceof IRepositoryViewObject || repositoryConf instanceof TransformerV2NodeConfiguration) {
      for (      IRepositoryViewObject confi : allConfigs) {
        eventMgr=confi;
      }
    }
  }
  if (eventMgr != null && !exist)   enabledConfigs.add(eventMgr);
}",0.6422155688622755
147970,"public void checkStateChanged(CheckStateChangedEvent event){
  IRepositoryNodeConfiguration config=(IRepositoryNodeConfiguration)event.getElement();
  if (event.getChecked()) {
    enabledConfigs.add(config);
  }
 else {
    enabledConfigs.remove(config);
  }
  solveProcTriCase();
  enableAllBun.setSelection(enabledConfigs.size() == allConfigs.size());
}","public void checkStateChanged(CheckStateChangedEvent event){
  IRepositoryViewObject config=(IRepositoryViewObject)event.getElement();
  if (event.getChecked()) {
    enabledConfigs.add(config);
  }
 else {
    enabledConfigs.remove(config);
  }
  solveProcTriCase();
  enableAllBun.setSelection(enabledConfigs.size() == allConfigs.size());
}",0.9226361031518624
147971,"public static MDMServerObjectItem findServerObjectItemByName(ERepositoryObjectType type,String name){
  List<IRepositoryViewObject> viewObjects=RepositoryResourceUtil.findAllViewObjects(type);
  if (viewObjects != null) {
    for (    IRepositoryViewObject viewObj : viewObjects) {
      Item item=viewObj.getProperty().getItem();
      if (item instanceof MDMServerObjectItem) {
        MDMServerObject serverObject=((MDMServerObjectItem)item).getMDMServerObject();
        if (name != null && name.equals(serverObject.getUniqueName())) {
          return (MDMServerObjectItem)item;
        }
      }
    }
  }
  return null;
}","public static MDMServerObjectItem findServerObjectItemByName(ERepositoryObjectType type,String name){
  return findServerObjectItemByNameWithDeleted(type,name,false);
}",0.3668341708542713
147972,"public static boolean createItem(Item item,String propLabel,String version){
  String name=propLabel;
  propLabel=escapeSpecialCharacters(propLabel);
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  RepositoryContext context=factory.getRepositoryContext();
  Property prop=PropertiesFactory.eINSTANCE.createProperty();
  item.setProperty(prop);
  try {
    String nextId=factory.getNextId();
    Property property=item.getProperty();
    property.setId(nextId);
    property.setVersion(version);
    property.setAuthor(context.getUser());
    property.setLabel(propLabel);
    factory.create(item,new Path(item.getState().getPath()));
    IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (configuration != null) {
      IRepositoryNodeResourceProvider resourceProvider=configuration.getResourceProvider();
      if (resourceProvider.needSaveReferenceFile()) {
        resourceProvider.handleReferenceFile(item);
      }
    }
    CommandManager.getInstance().pushCommand(ICommand.CMD_ADD,nextId,name);
    return true;
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return false;
}","public static boolean createItem(Item item,String propLabel,String version,boolean pushCommandStack){
  String name=propLabel;
  propLabel=escapeSpecialCharacters(propLabel);
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  RepositoryContext context=factory.getRepositoryContext();
  Property prop=PropertiesFactory.eINSTANCE.createProperty();
  item.setProperty(prop);
  try {
    String nextId=factory.getNextId();
    Property property=item.getProperty();
    property.setId(nextId);
    property.setVersion(version);
    property.setAuthor(context.getUser());
    property.setLabel(propLabel);
    factory.create(item,new Path(item.getState().getPath()));
    IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
    if (configuration != null) {
      IRepositoryNodeResourceProvider resourceProvider=configuration.getResourceProvider();
      if (resourceProvider.needSaveReferenceFile()) {
        resourceProvider.handleReferenceFile(item);
      }
    }
    if (pushCommandStack) {
      CommandManager.getInstance().pushCommand(ICommand.CMD_ADD,nextId,name);
    }
    return true;
  }
 catch (  PersistenceException e) {
    log.error(e.getMessage(),e);
  }
  return false;
}",0.9756292449061128
147973,"protected void fillContextMenu(IMenuManager manager){
  TreeObject xobject=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  try {
    XtentisPort port=Util.getPort(xobject);
    if (port == null)     return;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  if (xobject == null) {
  }
 else {
switch (xobject.getType()) {
case TreeObject._SERVER_:
      manager.add(serverRefreshAction);
    manager.add(serverRefreshCacheAction);
  manager.add(new Separator());
manager.add(importAction);
manager.add(exportAction);
manager.add(new Separator());
manager.add(logoutAction);
manager.add(editServerAction);
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) manager.add(pasteAction);
break;
case TreeObject._ACTION_:
manager.add((Action)xobject.getWsObject());
break;
case TreeObject.SUBSCRIPTION_ENGINE:
manager.add(browseViewAction);
break;
case TreeObject.CUSTOM_TYPE:
case TreeObject.CUSTOM_TYPES_RESOURCE:
break;
case TreeObject.SERVICE_CONFIGURATION:
case TreeObject.RESOURCES:
case TreeObject.DATA_MODEL_RESOURCE:
case TreeObject.DATA_MODEL_TYPES_RESOURCE:
break;
case TreeObject.PICTURES_RESOURCE:
manager.add(exportAction);
manager.add(importAction);
break;
case TreeObject.DATA_CLUSTER:
if (xobject.isXObject()) {
manager.add(browseViewAction);
}
case TreeObject.ROLE:
case TreeObject.VIEW:
default :
if (xobject.getType() != TreeObject.CATEGORY_FOLDER && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER) {
manager.add(exportAction);
manager.add(importAction);
}
if (xobject.getType() == TreeObject.VIEW && xobject.isXObject()) {
manager.add(browseViewAction);
}
if (xobject.getType() == TreeObject.JOB_REGISTRY) {
manager.add(new ImportTISJobAction());
manager.add(new RefreshXObjectAction(ServerView.show(),xobject));
}
if (xobject.getType() == TreeObject.JOB) {
manager.add(new DeleteJobAction());
manager.add(new GenerateJobDefaultTransformerAction());
manager.add(new GenerateJobDefaultTriggerAction());
}
int type=LocalTreeObjectRepository.getInstance().receiveUnCertainTreeObjectType(xobject);
if (!LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) && xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.WORKFLOW && xobject.getType() != TreeObject.JOB_REGISTRY) {
if (type != TreeObject.ROLE && xobject.getType() != TreeObject.RESOURCES && xobject.getType() != TreeObject.DATA_MODEL_RESOURCE && xobject.getType() != TreeObject.DATA_MODEL_TYPES_RESOURCE && xobject.getType() != TreeObject.CUSTOM_TYPES_RESOURCE && xobject.getType() != TreeObject.PICTURES_RESOURCE && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && xobject.getType() != TreeObject.EVENT_MANAGEMENT) manager.add(newXObjectAction);
if (!(xobject instanceof TreeParent) && xobject.getType() != TreeObject.DATA_CLUSTER) manager.add(renameXObjectAction);
}
if (Util.IsEnterPrise() && Util.hasUniverse(xobject)) manager.add(browseRevisionAction);
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.isXObject() && !XSystemObjects.isExist(xobject.getType(),xobject.getDisplayName())) {
manager.add(editXObjectAction);
manager.add(deleteXObjectAction);
manager.add(copyAction);
manager.add(duplicateAction);
}
 else if (xobject.getType() != TreeObject.EVENT_MANAGEMENT && xobject.getType() != TreeObject.JOB_REGISTRY && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(newCategoryAction);
}
if (xobject.getType() == TreeObject.CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(deleteXObjectAction);
}
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) {
TreeObject remoteObj=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
((PasteXObjectAction)pasteAction).setXtentisPort(remoteObj);
((PasteXObjectAction)pasteAction).setParent(remoteObj instanceof TreeParent ? (TreeParent)remoteObj : remoteObj.getParent());
manager.add(pasteAction);
}
}
java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels();
for (IAvailableModel model : availablemodels) {
model.fillContextMenu(xobject,manager);
}
}
manager.add(new Separator());
drillDownAdapter.addNavigationActions(manager);
manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  TreeObject xobject=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  try {
    XtentisPort port=Util.getPort(xobject);
    if (port == null)     return;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  if (xobject == null) {
  }
 else {
switch (xobject.getType()) {
case TreeObject._SERVER_:
      manager.add(serverRefreshAction);
    manager.add(serverRefreshCacheAction);
  manager.add(new Separator());
manager.add(importAction);
manager.add(exportAction);
manager.add(new Separator());
manager.add(logoutAction);
manager.add(editServerAction);
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) manager.add(pasteAction);
break;
case TreeObject._ACTION_:
manager.add((Action)xobject.getWsObject());
break;
case TreeObject.SUBSCRIPTION_ENGINE:
manager.add(browseViewAction);
break;
case TreeObject.CUSTOM_TYPE:
case TreeObject.CUSTOM_TYPES_RESOURCE:
break;
case TreeObject.SERVICE_CONFIGURATION:
case TreeObject.RESOURCES:
case TreeObject.DATA_MODEL_RESOURCE:
case TreeObject.DATA_MODEL_TYPES_RESOURCE:
break;
case TreeObject.PICTURES_RESOURCE:
manager.add(exportAction);
manager.add(importAction);
break;
case TreeObject.DATA_CLUSTER:
if (xobject.isXObject()) {
manager.add(browseViewAction);
}
case TreeObject.ROLE:
case TreeObject.VIEW:
default :
if (xobject.getType() != TreeObject.CATEGORY_FOLDER && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER) {
manager.add(exportAction);
manager.add(importAction);
}
if (xobject.getType() == TreeObject.VIEW && xobject.isXObject()) {
manager.add(browseViewAction);
}
if (xobject.getType() == TreeObject.JOB_REGISTRY) {
manager.add(new ImportTISJobAction());
manager.add(new RefreshXObjectAction(ServerView.show(),xobject));
}
if (xobject.getType() == TreeObject.JOB) {
manager.add(new DeleteJobAction());
manager.add(new GenerateJobDefaultTransformerAction());
manager.add(new GenerateJobDefaultTriggerAction());
}
int type=LocalTreeObjectRepository.getInstance().receiveUnCertainTreeObjectType(xobject);
if (!LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) && xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.WORKFLOW && xobject.getType() != TreeObject.JOB_REGISTRY) {
if (type != TreeObject.ROLE && xobject.getType() != TreeObject.RESOURCES && xobject.getType() != TreeObject.DATA_MODEL_RESOURCE && xobject.getType() != TreeObject.DATA_MODEL_TYPES_RESOURCE && xobject.getType() != TreeObject.CUSTOM_TYPES_RESOURCE && xobject.getType() != TreeObject.PICTURES_RESOURCE && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && xobject.getType() != TreeObject.EVENT_MANAGEMENT) manager.add(newXObjectAction);
if (!(xobject instanceof TreeParent) && xobject.getType() != TreeObject.DATA_CLUSTER) manager.add(renameXObjectAction);
}
if (Util.IsEnterPrise() && Util.hasUniverse(xobject)) manager.add(browseRevisionAction);
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.isXObject() && !XSystemObjects.isExist(xobject.getType(),xobject.getDisplayName())) {
manager.add(editXObjectAction);
manager.add(deleteXObjectAction);
manager.add(copyAction);
manager.add(duplicateAction);
}
 else if (xobject.getType() != TreeObject.EVENT_MANAGEMENT && xobject.getType() != TreeObject.JOB_REGISTRY && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(newCategoryAction);
}
if (xobject.getType() == TreeObject.CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(deleteXObjectAction);
}
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) {
TreeObject remoteObj=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
((PasteXObjectAction)pasteAction).setXtentisPort(remoteObj);
((PasteXObjectAction)pasteAction).setParent(remoteObj instanceof TreeParent ? (TreeParent)remoteObj : remoteObj.getParent());
manager.add(pasteAction);
}
}
java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels();
IAvailableModel theRoleAvailableModelR=null;
for (IAvailableModel model : availablemodels) {
if (model.getClass().getName().contains(""String_Node_Str"")) {
theRoleAvailableModelR=model;
}
}
availablemodels.remove(theRoleAvailableModelR);
for (IAvailableModel model : availablemodels) {
model.fillContextMenu(xobject,manager);
}
}
manager.add(new Separator());
drillDownAdapter.addNavigationActions(manager);
manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.974308943089431
147974,"public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save)       page.SaveWithForce(new NullProgressMonitor());
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    String conceptName=Util.getConceptName(xSDCom);
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    ValidationRuleExcpressDialog dlg=new ValidationRuleExcpressDialog(page.getSite().getShell(),getTreeParent(),""String_Node_Str"",struc.getVisibleRule(),conceptName,true,false);
    dlg.create();
    dlg.getShell().setMaximized(false);
    dlg.setBlockOnOpen(true);
    int ret=dlg.open();
    if (ret == Window.OK) {
      struc.setVisibleRule(dlg.getExpression());
    }
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}","public IStatus doAction(){
  try {
    if (page.isDirty()) {
      boolean save=MessageDialog.openConfirm(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + page.getXObject().getDisplayName() + ""String_Node_Str"");
      if (save)       page.SaveWithForce(new NullProgressMonitor());
 else       return Status.CANCEL_STATUS;
    }
    IStructuredSelection selection=(TreeSelection)page.getTreeViewer().getSelection();
    XSDComponent xSDCom=null;
    if (selection.getFirstElement() instanceof Element) {
      TreePath tPath=((TreeSelection)selection).getPaths()[0];
      for (int i=0; i < tPath.getSegmentCount(); i++) {
        if (tPath.getSegment(i) instanceof XSDAnnotation)         xSDCom=(XSDAnnotation)(tPath.getSegment(i));
      }
    }
 else     xSDCom=(XSDComponent)selection.getFirstElement();
    String conceptName=Util.getConceptName(xSDCom);
    XSDAnnotationsStructure struc=null;
    if (xSDCom != null)     struc=new XSDAnnotationsStructure(xSDCom);
    if (struc == null || struc.getAnnotation() == null) {
      throw new RuntimeException(""String_Node_Str"" + xSDCom.getClass().getName());
    }
    if (!isDelete) {
      ValidationRuleExcpressDialog dlg=new ValidationRuleExcpressDialog(page.getSite().getShell(),getTreeParent(),""String_Node_Str"",struc.getVisibleRule(),conceptName,true,false);
      dlg.create();
      dlg.getShell().setMaximized(false);
      dlg.setBlockOnOpen(true);
      int ret=dlg.open();
      if (ret == Window.OK) {
        struc.setVisibleRule(dlg.getExpression());
      }
    }
 else {
      struc.setVisibleRule(""String_Node_Str"");
    }
    if (struc.hasChanged()) {
      page.refresh();
      page.getTreeViewer().expandToLevel(xSDCom,2);
      page.markDirty();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    return Status.CANCEL_STATUS;
  }
  return Status.OK_STATUS;
}",0.9659090909090908
147975,"public XSDVisibleRuleAction(DataModelMainPage page,String dataModelName){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.ROUTINE.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
  this.dataModelName=dataModelName;
}","public XSDVisibleRuleAction(DataModelMainPage page,String dataModelName,boolean isDelete){
  super(page);
  setImageDescriptor(ImageCache.getImage(EImage.DELETE_OBJ.getPath()));
  setText(""String_Node_Str"");
  setToolTipText(""String_Node_Str"");
  this.dataModelName=dataModelName;
  this.isDelete=isDelete;
}",0.8982456140350877
147976,"private void setAnnotationActions(Object obj,IMenuManager manager){
  if (obj instanceof XSDElementDeclaration) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLookupFieldsAction);
    manager.add(setAnnotationPrimaryKeyInfoAction);
  }
  if (obj instanceof XSDParticle) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLabelAction);
    manager.add(setAnnotationForeignKeyAction);
    manager.add(setAnnotationFKFilterAction);
    manager.add(setAnnotationForeignKeyInfoAction);
  }
  if (Util.IsEnterPrise()) {
    manager.add(new Separator());
    manager.add(setAnnotationWriteAction);
    manager.add(setAnnotationNoAction);
    if (obj instanceof XSDParticle) {
      manager.add(visibleRuleAction);
      XSDParticle xsdParticle=(XSDParticle)obj;
      XSDTerm xsdTerm=xsdParticle.getTerm();
      if (xsdTerm instanceof XSDElementDeclaration) {
        if (Util.getKeyInfo(xsdTerm) == null || Util.getKeyInfo(xsdTerm).size() == 0) {
          manager.add(defaultValueRuleAction);
        }
      }
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
}","private void setAnnotationActions(Object obj,IMenuManager manager){
  if (obj instanceof XSDElementDeclaration) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLookupFieldsAction);
    manager.add(setAnnotationPrimaryKeyInfoAction);
  }
  if (obj instanceof XSDParticle) {
    manager.add(setAnnotationDescriptionsAction);
    manager.add(setAnnotationLabelAction);
    manager.add(setAnnotationForeignKeyAction);
    manager.add(setAnnotationFKFilterAction);
    manager.add(setAnnotationForeignKeyInfoAction);
  }
  if (Util.IsEnterPrise()) {
    manager.add(new Separator());
    manager.add(setAnnotationWriteAction);
    manager.add(setAnnotationNoAction);
    if (obj instanceof XSDParticle) {
      manager.add(visibleRuleAction);
      XSDVisibleRuleAction deleteVisibleRuleAction=new XSDVisibleRuleAction(this,dataModelName,true);
      manager.add(deleteVisibleRuleAction);
      XSDParticle xsdParticle=(XSDParticle)obj;
      XSDTerm xsdTerm=xsdParticle.getTerm();
      if (xsdTerm instanceof XSDElementDeclaration) {
        if (Util.getKeyInfo(xsdTerm) == null || Util.getKeyInfo(xsdTerm).size() == 0) {
          manager.add(defaultValueRuleAction);
        }
      }
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
}",0.9366576819407008
147977,"public List<AbstractDeployCommand> getDeployCommands(List<IRepositoryViewObject> viewObjs){
  List<AbstractDeployCommand> cmds=new LinkedList<AbstractDeployCommand>();
  for (  IRepositoryViewObject viewObj : viewObjs) {
    CommandStack stack=findCommandStack(viewObj.getId());
    if (stack == null) {
      stack=new CommandStack();
      ICommand cmd=getNewCommand(ICommand.CMD_MODIFY);
      cmd.init(viewObj);
      stack.pushCommand(cmd);
    }
    ICommand validCommand=stack.getValidCommand();
    if (validCommand != null) {
      if (validCommand instanceof AbstractDeployCommand) {
        fillViewObjectToCommand(validCommand);
        AbstractDeployCommand deployCommand=(AbstractDeployCommand)validCommand;
        cmds.add(deployCommand);
      }
    }
  }
  return cmds;
}","/** 
 * DOC hbhong Comment method ""getDeployCommands"".
 * @param viewObjs
 * @param defaultCmdType if none then assign -1
 * @return
 */
public List<AbstractDeployCommand> getDeployCommands(List<IRepositoryViewObject> viewObjs,int defaultCmdType){
  List<AbstractDeployCommand> cmds=new LinkedList<AbstractDeployCommand>();
  for (  IRepositoryViewObject viewObj : viewObjs) {
    CommandStack stack=findCommandStack(viewObj.getId());
    if (stack == null) {
      stack=new CommandStack();
      ICommand cmd=getNewCommand(ICommand.CMD_MODIFY);
      cmd.init(viewObj);
      stack.pushCommand(cmd);
    }
    ICommand validCommand=stack.getValidCommand();
    if (validCommand != null) {
      if (validCommand instanceof AbstractDeployCommand) {
        fillViewObjectToCommand(validCommand);
        AbstractDeployCommand deployCommand=(AbstractDeployCommand)validCommand;
        cmds.add(deployCommand);
      }
 else       if (validCommand instanceof NOPCommand && defaultCmdType > 0) {
        ICommand cmd=getNewCommand(defaultCmdType);
        if (cmd instanceof AbstractDeployCommand) {
          cmd.init(viewObj);
          cmds.add((AbstractDeployCommand)cmd);
        }
      }
    }
  }
  return cmds;
}",0.7854654056744649
147978,"public IStatus deploy(MDMServerDef serverDef,List<IRepositoryViewObject> viewObjs){
  CommandManager manager=CommandManager.getInstance();
  List<AbstractDeployCommand> commands=manager.getDeployCommands(viewObjs);
  return runCommands(commands,serverDef);
}","public IStatus deploy(MDMServerDef serverDef,List<IRepositoryViewObject> viewObjs,int defaultCmdType){
  CommandManager manager=CommandManager.getInstance();
  List<AbstractDeployCommand> commands=manager.getDeployCommands(viewObjs,defaultCmdType);
  return runCommands(commands,serverDef);
}",0.9381818181818182
147979,"public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=new LinkedList<AbstractRepositoryAction>();
  Item item=viewObj.getProperty().getItem();
  if (item instanceof MDMItem) {
    if (item instanceof ContainerItem) {
      FolderType type=((FolderItem)item).getType();
switch (type.getValue()) {
case FolderType.SYSTEM_FOLDER:
        actions.add(createFolderAction);
      addAction(actions,pasteAction,viewObj);
    actions.add(importServerObjectAction);
  actions.add(importObjectAction);
break;
case FolderType.STABLE_SYSTEM_FOLDER:
break;
case FolderType.FOLDER:
actions.add(createFolderAction);
actions.add(removeFromRepositoryAction);
addAction(actions,pasteAction,viewObj);
break;
}
}
 else if (item instanceof MDMServerObjectItem) {
actions.add(removeFromRepositoryAction);
actions.add(mdmEditPropertyAction);
addAction(actions,copyAction,viewObj);
addAction(actions,pasteAction,viewObj);
actions.add(duplicateAction);
}
}
actions.add(refreshAction);
actions.add(exportObjectAction);
for (IRepositoryNodeActionProvider provider : getExtendActionProviders()) {
List<AbstractRepositoryAction> providerActions=provider.getActions(viewObj);
if (providerActions != null) {
actions.addAll(providerActions);
}
}
if (IServerObjectRepositoryType.TYPE_EVENTMANAGER.equals(viewObj.getRepositoryObjectType())) {
actions.add(emAction);
}
return actions;
}","public List<AbstractRepositoryAction> getActions(IRepositoryViewObject viewObj){
  List<AbstractRepositoryAction> actions=new LinkedList<AbstractRepositoryAction>();
  Item item=viewObj.getProperty().getItem();
  if (item instanceof MDMItem) {
    if (item instanceof ContainerItem) {
      FolderType type=((FolderItem)item).getType();
switch (type.getValue()) {
case FolderType.SYSTEM_FOLDER:
        actions.add(createFolderAction);
      addAction(actions,pasteAction,viewObj);
    actions.add(importServerObjectAction);
  actions.add(importObjectAction);
break;
case FolderType.STABLE_SYSTEM_FOLDER:
break;
case FolderType.FOLDER:
actions.add(createFolderAction);
actions.add(removeFromRepositoryAction);
addAction(actions,pasteAction,viewObj);
break;
}
}
 else if (item instanceof MDMServerObjectItem) {
actions.add(removeFromRepositoryAction);
actions.add(mdmEditPropertyAction);
addAction(actions,copyAction,viewObj);
addAction(actions,pasteAction,viewObj);
actions.add(duplicateAction);
}
}
actions.add(refreshAction);
actions.add(exportObjectAction);
for (IRepositoryNodeActionProvider provider : getExtendActionProviders()) {
List<AbstractRepositoryAction> providerActions=provider.getActions(viewObj);
if (providerActions != null) {
actions.addAll(providerActions);
}
}
if (viewObj.getRepositoryObjectType() != null && IServerObjectRepositoryType.TYPE_EVENTMANAGER.equals(viewObj.getRepositoryObjectType())) {
actions.add(emAction);
}
return actions;
}",0.9843912591050988
147980,"private void updateServerDef(IRepositoryViewObject viewObj){
  if (hasSameServerDef) {
    Item item=viewObj.getProperty().getItem();
    MDMServerDef serverDef=((MDMServerObjectItem)item).getMDMServerObject().getLastServerDef();
    if (lastServerDef == null) {
      lastServerDef=serverDef;
    }
 else {
      if (!lastServerDef.equals(serverDef)) {
        lastServerDef=null;
        hasSameServerDef=false;
      }
    }
  }
}","private void updateServerDef(IRepositoryViewObject viewObj){
  if (hasSameServerDef) {
    Item item=viewObj.getProperty().getItem();
    if (item instanceof ContainerItem)     return;
    MDMServerDef serverDef=((MDMServerObjectItem)item).getMDMServerObject().getLastServerDef();
    if (lastServerDef == null) {
      lastServerDef=serverDef;
    }
 else {
      if (!lastServerDef.equals(serverDef)) {
        lastServerDef=null;
        hasSameServerDef=false;
      }
    }
  }
}",0.9443838604143948
147981,"public void restoreState(IMemento aMemento){
  if (map.isEmpty()) {
    IMemento cmdManagerMem=aMemento.getChild(ICommand.MDM_COMMANDS);
    if (cmdManagerMem != null) {
      IMemento[] stackMems=cmdManagerMem.getChildren(ICommand.MEM_TYPE_COMMAND_STACK);
      if (stackMems != null) {
        for (        IMemento stackMem : stackMems) {
          CommandStack stack=new CommandStack();
          stack.restoreState(stackMem);
          if (stack.getCommandId() != null) {
            map.put(stack.getCommandId(),stack);
          }
        }
      }
    }
  }
}","public void restoreState(IMemento aMemento){
  if (map.isEmpty() && aMemento != null) {
    IMemento cmdManagerMem=aMemento.getChild(ICommand.MDM_COMMANDS);
    if (cmdManagerMem != null) {
      IMemento[] stackMems=cmdManagerMem.getChildren(ICommand.MEM_TYPE_COMMAND_STACK);
      if (stackMems != null) {
        for (        IMemento stackMem : stackMems) {
          CommandStack stack=new CommandStack();
          stack.restoreState(stackMem);
          if (stack.getCommandId() != null) {
            map.put(stack.getCommandId(),stack);
          }
        }
      }
    }
  }
}",0.9826689774696707
147982,"protected void fillContextMenu(IMenuManager manager){
  TreeObject xobject=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  try {
    XtentisPort port=Util.getPort(xobject);
    if (port == null)     return;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  if (xobject == null) {
  }
 else {
switch (xobject.getType()) {
case TreeObject._SERVER_:
      manager.add(serverRefreshAction);
    manager.add(serverRefreshCacheAction);
  manager.add(new Separator());
manager.add(importAction);
manager.add(exportAction);
manager.add(new Separator());
manager.add(logoutAction);
manager.add(editServerAction);
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) manager.add(pasteAction);
break;
case TreeObject._ACTION_:
manager.add((Action)xobject.getWsObject());
break;
case TreeObject.SUBSCRIPTION_ENGINE:
manager.add(browseViewAction);
break;
case TreeObject.CUSTOM_TYPE:
case TreeObject.CUSTOM_TYPES_RESOURCE:
break;
case TreeObject.SERVICE_CONFIGURATION:
case TreeObject.RESOURCES:
case TreeObject.DATA_MODEL_RESOURCE:
case TreeObject.DATA_MODEL_TYPES_RESOURCE:
break;
case TreeObject.PICTURES_RESOURCE:
manager.add(exportAction);
manager.add(importAction);
break;
case TreeObject.DATA_CLUSTER:
if (xobject.isXObject()) {
manager.add(browseViewAction);
}
case TreeObject.ROLE:
case TreeObject.VIEW:
default :
if (xobject.getType() != TreeObject.CATEGORY_FOLDER && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER) {
manager.add(exportAction);
manager.add(importAction);
}
if (xobject.getType() == TreeObject.VIEW && xobject.isXObject()) {
manager.add(browseViewAction);
}
if (xobject.getType() == TreeObject.JOB_REGISTRY) {
manager.add(new ImportTISJobAction());
manager.add(new RefreshXObjectAction(ServerView.show(),xobject));
}
if (xobject.getType() == TreeObject.JOB) {
manager.add(new DeleteJobAction());
manager.add(new GenerateJobDefaultTransformerAction());
manager.add(new GenerateJobDefaultTriggerAction());
}
int type=LocalTreeObjectRepository.getInstance().receiveUnCertainTreeObjectType(xobject);
if (!LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) && xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.WORKFLOW && xobject.getType() != TreeObject.JOB_REGISTRY) {
if (type != TreeObject.ROLE && xobject.getType() != TreeObject.RESOURCES && xobject.getType() != TreeObject.DATA_MODEL_RESOURCE && xobject.getType() != TreeObject.DATA_MODEL_TYPES_RESOURCE && xobject.getType() != TreeObject.CUSTOM_TYPES_RESOURCE && xobject.getType() != TreeObject.PICTURES_RESOURCE && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && xobject.getType() != TreeObject.EVENT_MANAGEMENT) manager.add(newXObjectAction);
if (!(xobject instanceof TreeParent) && xobject.getType() != TreeObject.DATA_CLUSTER) manager.add(renameXObjectAction);
}
if (Util.IsEnterPrise() && Util.hasUniverse(xobject)) manager.add(browseRevisionAction);
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.isXObject() && !XSystemObjects.isExist(xobject.getType(),xobject.getDisplayName())) {
manager.add(editXObjectAction);
manager.add(deleteXObjectAction);
manager.add(copyAction);
manager.add(duplicateAction);
}
 else if (xobject.getType() != TreeObject.EVENT_MANAGEMENT && xobject.getType() != TreeObject.JOB_REGISTRY && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(newCategoryAction);
}
if (xobject.getType() == TreeObject.CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(deleteXObjectAction);
}
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) {
TreeObject remoteObj=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
((PasteXObjectAction)pasteAction).setXtentisPort(remoteObj);
((PasteXObjectAction)pasteAction).setParent(remoteObj instanceof TreeParent ? (TreeParent)remoteObj : remoteObj.getParent());
manager.add(pasteAction);
}
}
java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels();
IAvailableModel theRoleAvailableModelR=null;
for (IAvailableModel model : availablemodels) {
if (model.getClass().getName().contains(""String_Node_Str"")) {
theRoleAvailableModelR=model;
}
}
availablemodels.remove(theRoleAvailableModelR);
for (IAvailableModel model : availablemodels) {
model.fillContextMenu(xobject,manager);
}
}
manager.add(new Separator());
drillDownAdapter.addNavigationActions(manager);
manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","protected void fillContextMenu(IMenuManager manager){
  TreeObject xobject=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  try {
    XtentisPort port=Util.getPort(xobject);
    if (port == null)     return;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  if (xobject == null) {
  }
 else {
switch (xobject.getType()) {
case TreeObject._SERVER_:
      manager.add(serverRefreshAction);
    manager.add(serverRefreshCacheAction);
  manager.add(new Separator());
manager.add(importAction);
manager.add(exportAction);
manager.add(new Separator());
manager.add(logoutAction);
manager.add(editServerAction);
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) manager.add(pasteAction);
break;
case TreeObject._ACTION_:
manager.add((Action)xobject.getWsObject());
break;
case TreeObject.SUBSCRIPTION_ENGINE:
manager.add(browseViewAction);
break;
case TreeObject.CUSTOM_TYPE:
case TreeObject.CUSTOM_TYPES_RESOURCE:
break;
case TreeObject.SERVICE_CONFIGURATION:
case TreeObject.RESOURCES:
case TreeObject.DATA_MODEL_RESOURCE:
case TreeObject.DATA_MODEL_TYPES_RESOURCE:
break;
case TreeObject.PICTURES_RESOURCE:
manager.add(exportAction);
manager.add(importAction);
break;
case TreeObject.DATA_CLUSTER:
if (xobject.isXObject()) {
manager.add(browseViewAction);
}
case TreeObject.ROLE:
case TreeObject.VIEW:
default :
if (xobject.getType() != TreeObject.CATEGORY_FOLDER && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER) {
manager.add(exportAction);
manager.add(importAction);
}
if (xobject.getType() == TreeObject.VIEW && xobject.isXObject()) {
manager.add(browseViewAction);
}
if (xobject.getType() == TreeObject.JOB_REGISTRY) {
manager.add(new ImportTISJobAction());
manager.add(new RefreshXObjectAction(ServerView.show(),xobject));
}
if (xobject.getType() == TreeObject.JOB) {
manager.add(new DeleteJobAction());
manager.add(new GenerateJobDefaultTransformerAction());
manager.add(new GenerateJobDefaultTriggerAction());
}
int type=LocalTreeObjectRepository.getInstance().receiveUnCertainTreeObjectType(xobject);
if (!LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) && xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.WORKFLOW && xobject.getType() != TreeObject.JOB_REGISTRY) {
if (type != TreeObject.ROLE && xobject.getType() != TreeObject.RESOURCES && xobject.getType() != TreeObject.DATA_MODEL_RESOURCE && xobject.getType() != TreeObject.DATA_MODEL_TYPES_RESOURCE && xobject.getType() != TreeObject.CUSTOM_TYPES_RESOURCE && xobject.getType() != TreeObject.PICTURES_RESOURCE && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && xobject.getType() != TreeObject.EVENT_MANAGEMENT) manager.add(newXObjectAction);
if (!(xobject instanceof TreeParent) && xobject.getType() != TreeObject.DATA_CLUSTER) manager.add(renameXObjectAction);
}
if (Util.IsEnterPrise() && Util.hasUniverse(xobject)) manager.add(browseRevisionAction);
if (xobject.getType() != TreeObject.WORKFLOW_PROCESS && xobject.getType() != TreeObject.JOB && xobject.isXObject() && !XSystemObjects.isExist(xobject.getType(),xobject.getDisplayName())) {
manager.add(editXObjectAction);
manager.add(deleteXObjectAction);
manager.add(copyAction);
manager.add(duplicateAction);
}
 else if (xobject.getType() != TreeObject.EVENT_MANAGEMENT && xobject.getType() != TreeObject.JOB_REGISTRY && xobject.getType() != TreeObject.JOB && xobject.getType() != TreeObject.BUILT_IN_CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(newCategoryAction);
}
if (xobject.getType() == TreeObject.CATEGORY_FOLDER && LocalTreeObjectRepository.getInstance().isInSystemCatalog(xobject) == false) {
manager.add(deleteXObjectAction);
}
if (!WorkbenchClipboard.getWorkbenchClipboard().isEmpty()) {
TreeObject remoteObj=(TreeObject)((IStructuredSelection)viewer.getSelection()).getFirstElement();
((PasteXObjectAction)pasteAction).setXtentisPort(remoteObj);
((PasteXObjectAction)pasteAction).setParent(remoteObj instanceof TreeParent ? (TreeParent)remoteObj : remoteObj.getParent());
manager.add(pasteAction);
}
}
java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels();
cutAllAvailableModelFromRepository(availablemodels);
for (IAvailableModel model : availablemodels) {
model.fillContextMenu(xobject,manager);
}
}
manager.add(new Separator());
drillDownAdapter.addNavigationActions(manager);
manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.9741323561112308
147983,"public void copyElements(){
  ArrayList<XSDParticle> particles=WorkbenchClipboard.getWorkbenchClipboard().getParticles();
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  XSDElementDeclaration element=(XSDElementDeclaration)selection.getFirstElement();
  if (element.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
    XSDComplexTypeContent content=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
    if (content instanceof XSDParticle) {
      XSDParticle partile=(XSDParticle)content;
      if (((XSDParticle)partile).getTerm() instanceof XSDModelGroup) {
        XSDModelGroup toGroup=((XSDModelGroup)partile.getTerm());
        for (        XSDParticle particle : particles) {
          if (isExist(toGroup,particle)) {
            boolean ifOverwrite=MessageDialog.openConfirm(this.page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + ((XSDElementDeclaration)particle.getTerm()).getName() + ""String_Node_Str"");
            if (ifOverwrite) {
              reomveElement(toGroup,particle);
            }
 else             continue;
          }
          XSDParticle newParticle=(XSDParticle)particle.cloneConcreteComponent(true,false);
          if (newParticle.getContent() instanceof XSDElementDeclaration && Util.changeElementTypeToSequence(element,newParticle.getMaxOccurs()) == Status.CANCEL_STATUS)           break;
          toGroup.getContents().add(newParticle);
          toGroup.updateElement();
          if (newParticle.getContent() instanceof XSDElementDeclaration) {
            if (((XSDElementDeclaration)newParticle.getContent()).getTypeDefinition() instanceof XSDComplexTypeDefinition) {
              addAnnotationForComplexType((XSDComplexTypeDefinition)((XSDElementDeclaration)particle.getContent()).getTypeDefinition(),(XSDComplexTypeDefinition)((XSDElementDeclaration)newParticle.getContent()).getTypeDefinition());
            }
            XSDAnnotationsStructure struc1=new XSDAnnotationsStructure(newParticle.getTerm());
            addAnnotion(struc1,((XSDElementDeclaration)particle.getTerm()).getAnnotation());
          }
        }
      }
    }
  }
}","public void copyElements(){
  ArrayList<XSDParticle> particles=WorkbenchClipboard.getWorkbenchClipboard().getParticles();
  IStructuredSelection selection=(IStructuredSelection)page.getTreeViewer().getSelection();
  XSDComplexTypeContent content=null;
  XSDElementDeclaration element=null;
  if (selection.getFirstElement() instanceof XSDElementDeclaration) {
    element=(XSDElementDeclaration)selection.getFirstElement();
    content=((XSDComplexTypeDefinition)element.getTypeDefinition()).getContent();
  }
 else {
    content=((XSDComplexTypeDefinition)selection.getFirstElement()).getContent();
  }
  if (content instanceof XSDParticle) {
    XSDParticle partile=(XSDParticle)content;
    if (((XSDParticle)partile).getTerm() instanceof XSDModelGroup) {
      XSDModelGroup toGroup=((XSDModelGroup)partile.getTerm());
      for (      XSDParticle particle : particles) {
        if (isExist(toGroup,particle)) {
          boolean ifOverwrite=MessageDialog.openConfirm(this.page.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + ((XSDElementDeclaration)particle.getTerm()).getName() + ""String_Node_Str"");
          if (ifOverwrite) {
            reomveElement(toGroup,particle);
          }
 else           continue;
        }
        XSDParticle newParticle=(XSDParticle)particle.cloneConcreteComponent(true,false);
        if (newParticle.getContent() instanceof XSDElementDeclaration && Util.changeElementTypeToSequence(element,newParticle.getMaxOccurs()) == Status.CANCEL_STATUS)         break;
        toGroup.getContents().add(newParticle);
        toGroup.updateElement();
        if (newParticle.getContent() instanceof XSDElementDeclaration) {
          if (((XSDElementDeclaration)newParticle.getContent()).getTypeDefinition() instanceof XSDComplexTypeDefinition) {
            addAnnotationForComplexType((XSDComplexTypeDefinition)((XSDElementDeclaration)particle.getContent()).getTypeDefinition(),(XSDComplexTypeDefinition)((XSDElementDeclaration)newParticle.getContent()).getTypeDefinition());
          }
          XSDAnnotationsStructure struc1=new XSDAnnotationsStructure(newParticle.getTerm());
          addAnnotion(struc1,((XSDElementDeclaration)particle.getTerm()).getAnnotation());
        }
      }
    }
  }
}",0.7672472291336802
147984,"protected void fillContextMenu(IMenuManager manager,boolean isType){
  IStructuredSelection selection;
  if (!isType)   selection=((IStructuredSelection)viewer.getSelection());
 else   selection=((IStructuredSelection)typesViewer.getSelection());
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (!isType)   manager.add(newConceptAction);
 else {
    manager.add(newComplexTypeAction);
    manager.add(newSimpleTypeAction);
    XSDDeleteTypeDefinition deleteTypeDefinition1;
    if (selectedObjs.length > 1)     deleteTypeDefinition1=new XSDDeleteTypeDefinition(this,true);
 else     deleteTypeDefinition1=new XSDDeleteTypeDefinition(this,false);
    if (selectedObjs.length >= 1 && deleteTypeDefinition1.isTypeDefinition(selectedObjs))     manager.add(deleteTypeDefinition1);
    deleteConceptWrapAction.regisExtraClassToDel(XSDComplexTypeDefinitionImpl.class);
    if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
      deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
    }
    if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
      manager.add(deleteConceptWrapAction.outPutDeleteActions());
      if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))       manager.add(newBrowseItemAction);
    }
    if (Util.IsEnterPrise() && obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1) {
      manager.add(new Separator());
      manager.add(setAnnotationWriteAction);
      manager.add(setAnnotationNoAction);
    }
  }
  manager.add(new Separator());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new Separator(ADDITIONMENUID));
    String title=""String_Node_Str"";
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() == 1)     title=""String_Node_Str"";
 else     if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     title=""String_Node_Str"";
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,title);
    if (pasteConceptAction.checkInPasteType()) {
      manager.add(new Separator());
      manager.add(pasteConceptAction);
    }
    return;
  }
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (!Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,""String_Node_Str"");
      if (Util.checkInCopy(selectedObjs)) {
        manager.add(new Separator());
        manager.add(copyConceptAction);
      }
      String title=""String_Node_Str"";
      if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)       title=""String_Node_Str"";
 else       if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() == 1)       title=""String_Node_Str"";
 else       if (WorkbenchClipboard.getWorkbenchClipboard().getParticles().size() > 1)       title=""String_Node_Str"";
 else       if (WorkbenchClipboard.getWorkbenchClipboard().getParticles().size() == 1)       title=""String_Node_Str"";
      XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,title);
      if (pasteConceptAction.checkInPasteType())       manager.add(pasteConceptAction);
      manager.add(new Separator());
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
        manager.add(setAnnotationDisplayFomatAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(newElementAction);
    }
    if (!Util.IsAImporedElement(decl,xsdSchema) || !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(obj,manager);
  }
  if (obj instanceof XSDModelGroup) {
    manager.add(new Separator());
    manager.add(newParticleFromTypeAction);
    manager.add(new Separator());
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      if (term instanceof XSDElementDeclaration) {
        manager.add(editParticleAction);
        if (!Util.IsAImporedElement(term,xsdSchema) || term.getContainer() instanceof XSDSchema) {
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,""String_Node_Str"");
          manager.add(copyConceptAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            setAnnotationActions(obj,manager);
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
              manager.add(setAnnotationDisplayFomatAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null) {
    if (!isType && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
      manager.add(newParticleFromTypeAction);
      manager.add(newGroupFromTypeAction);
    }
    String ns=((XSDComplexTypeDefinition)obj).getTargetNamespace();
    if (ns == null && !Util.IsAImporedElement((XSDComplexTypeDefinition)obj,xsdSchema)) {
      manager.add(new Separator());
      manager.add(newParticleFromTypeAction);
      manager.add(new Separator());
      manager.add(editComplexTypeAction);
    }
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && (!Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema) || ((XSDSimpleTypeDefinition)obj).getName() == null)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    manager.add(changeBaseTypeAction);
    manager.add(new Separator());
    if (typedef.getBaseTypeDefinition() != null) {
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInAllElementType(selectedObjs)) {
    manager.add(newBrowseItemAction);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    if (!isType)     manager.add(deleteConceptWrapAction.outPutDeleteActions());
    String title=""String_Node_Str"";
    if (Util.checkInCopyTypeElement(selectedObjs))     title=""String_Node_Str"";
 else     if (Util.checkInCOpyTypeParticle(selectedObjs))     title=""String_Node_Str"";
    XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,title);
    if (Util.checkInCopy(selectedObjs)) {
      manager.add(copyConceptAction);
    }
    if (selectedObjs.length > 1 && isXSDParticles(selectedObjs)) {
      manager.add(newParticleFromParticleAction);
    }
  }
  if (Util.IsEnterPrise()) {
    if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
      manager.add(new Separator());
      manager.add(setAnnotationWrapWriteAction);
      manager.add(setAnnotationWrapNoAction);
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(ADDITIONMENUID));
  deleteConceptWrapAction.clearExtraClassToDel();
}","protected void fillContextMenu(IMenuManager manager,boolean isType){
  IStructuredSelection selection;
  if (!isType)   selection=((IStructuredSelection)viewer.getSelection());
 else   selection=((IStructuredSelection)typesViewer.getSelection());
  Object[] selectedObjs=selection.toArray();
  Object obj=selection.getFirstElement();
  if (!isType)   manager.add(newConceptAction);
 else {
    manager.add(newComplexTypeAction);
    manager.add(newSimpleTypeAction);
    XSDDeleteTypeDefinition deleteTypeDefinition1;
    if (selectedObjs.length > 1)     deleteTypeDefinition1=new XSDDeleteTypeDefinition(this,true);
 else     deleteTypeDefinition1=new XSDDeleteTypeDefinition(this,false);
    if (selectedObjs.length >= 1 && deleteTypeDefinition1.isTypeDefinition(selectedObjs))     manager.add(deleteTypeDefinition1);
    deleteConceptWrapAction.regisExtraClassToDel(XSDComplexTypeDefinitionImpl.class);
    if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
      deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
    }
    if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
      manager.add(deleteConceptWrapAction.outPutDeleteActions());
      if (deleteConceptWrapAction.checkOutAllConcept(selectedObjs))       manager.add(newBrowseItemAction);
    }
    if (Util.IsEnterPrise() && obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1) {
      manager.add(new Separator());
      manager.add(setAnnotationWriteAction);
      manager.add(setAnnotationNoAction);
    }
  }
  manager.add(new Separator());
  if ((selection == null) || (selection.getFirstElement() == null)) {
    manager.add(new Separator(ADDITIONMENUID));
    String title=""String_Node_Str"";
    if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() == 1)     title=""String_Node_Str"";
 else     if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)     title=""String_Node_Str"";
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,title);
    if (pasteConceptAction.checkInPasteType()) {
      manager.add(new Separator());
      manager.add(pasteConceptAction);
    }
    return;
  }
  if (obj instanceof XSDElementDeclaration && selectedObjs.length == 1) {
    XSDElementDeclaration decl=(XSDElementDeclaration)obj;
    boolean isConcept=Util.checkConcept(decl);
    if (!Util.IsAImporedElement(decl,xsdSchema)) {
      if (isConcept) {
        manager.add(editConceptAction);
        manager.add(deleteConceptAction);
        manager.add(newBrowseItemAction);
      }
 else {
        manager.add(editElementAction);
        manager.add(deleteElementAction);
      }
      XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,""String_Node_Str"");
      if (Util.checkInCopy(selectedObjs)) {
        manager.add(new Separator());
        manager.add(copyConceptAction);
      }
      String title=""String_Node_Str"";
      if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() > 1)       title=""String_Node_Str"";
 else       if (WorkbenchClipboard.getWorkbenchClipboard().getConcepts().size() == 1)       title=""String_Node_Str"";
 else       if (WorkbenchClipboard.getWorkbenchClipboard().getParticles().size() > 1)       title=""String_Node_Str"";
 else       if (WorkbenchClipboard.getWorkbenchClipboard().getParticles().size() == 1)       title=""String_Node_Str"";
      XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,title);
      if (pasteConceptAction.checkInPasteType())       manager.add(pasteConceptAction);
      manager.add(new Separator());
      manager.add(newElementAction);
      manager.add(new Separator());
      manager.add(changeToComplexTypeAction);
      manager.add(changeToSimpleTypeAction);
      if (((XSDElementDeclaration)obj).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
        manager.add(setFacetMsgAction);
        manager.add(setAnnotationDisplayFomatAction);
      }
      manager.add(new Separator());
      manager.add(newIdentityConstraintAction);
    }
 else {
      if (isConcept) {
        manager.add(newBrowseItemAction);
      }
      manager.add(newElementAction);
    }
    if (!Util.IsAImporedElement(decl,xsdSchema) || !Util.IsAImporedElement(decl.getTypeDefinition(),xsdSchema))     setAnnotationActions2(obj,manager);
  }
  if (obj instanceof XSDModelGroup) {
    manager.add(new Separator());
    manager.add(newParticleFromTypeAction);
    manager.add(new Separator());
    manager.add(changeSubElementGroupAction);
  }
  if (obj instanceof XSDParticle && selectedObjs.length == 1) {
    XSDTerm term=((XSDParticle)obj).getTerm();
    if (!(term instanceof XSDWildcard)) {
      if (term instanceof XSDElementDeclaration) {
        manager.add(editParticleAction);
        if (!Util.IsAImporedElement(term,xsdSchema) || term.getContainer() instanceof XSDSchema) {
          manager.add(newParticleFromParticleAction);
          if (term instanceof XSDModelGroup) {
            manager.add(newParticleFromTypeAction);
            manager.add(newGroupFromTypeAction);
          }
          manager.add(deleteParticleAction);
          XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,""String_Node_Str"");
          manager.add(copyConceptAction);
          manager.add(new Separator());
          manager.add(changeToComplexTypeAction);
          manager.add(changeToSimpleTypeAction);
          manager.add(new Separator());
          if (term instanceof XSDElementDeclaration) {
            XSDTypeDefinition type=((XSDElementDeclaration)term).getTypeDefinition();
            setAnnotationActions(obj,manager);
            if (((XSDElementDeclaration)term).getTypeDefinition() instanceof XSDSimpleTypeDefinition) {
              manager.add(setFacetMsgAction);
              manager.add(setAnnotationDisplayFomatAction);
            }
            manager.add(new Separator());
            manager.add(getXPathAction);
          }
        }
      }
    }
  }
  if (obj instanceof XSDComplexTypeDefinition && selectedObjs.length == 1 && ((XSDComplexTypeDefinition)obj).getTargetNamespace() == null) {
    if (!isType && !Util.IsAImporedElement((XSDParticle)obj,xsdSchema)) {
      manager.add(newParticleFromTypeAction);
      manager.add(newGroupFromTypeAction);
    }
    String ns=((XSDComplexTypeDefinition)obj).getTargetNamespace();
    if (ns == null && !Util.IsAImporedElement((XSDComplexTypeDefinition)obj,xsdSchema)) {
      manager.add(new Separator());
      manager.add(newParticleFromTypeAction);
      manager.add(new Separator());
      manager.add(editComplexTypeAction);
    }
    XSDPasteConceptAction pasteConceptAction=new XSDPasteConceptAction(this,""String_Node_Str"");
    manager.add(pasteConceptAction);
  }
  if (obj instanceof XSDIdentityConstraintDefinition && selectedObjs.length == 1 && ((XSDIdentityConstraintDefinition)obj).getTargetNamespace() == null && !Util.IsAImporedElement((XSDIdentityConstraintDefinition)obj,xsdSchema)) {
    manager.add(editIdentityConstraintAction);
    manager.add(deleteIdentityConstraintAction);
    manager.add(newIdentityConstraintAction);
    manager.add(new Separator());
    manager.add(newXPathAction);
  }
  if (obj instanceof XSDXPathDefinition && selectedObjs.length == 1 && ((XSDXPathDefinition)obj).getSchema().getTargetNamespace() == null && !Util.IsAImporedElement((XSDXPathDefinition)obj,xsdSchema)) {
    manager.add(editXPathAction);
    manager.add(newXPathAction);
    XSDXPathDefinition xpath=(XSDXPathDefinition)obj;
    if (xpath.getVariety().equals(XSDXPathVariety.FIELD_LITERAL))     manager.add(deleteXPathAction);
  }
  if (obj instanceof XSDSimpleTypeDefinition && selectedObjs.length == 1 && (!Util.IsAImporedElement((XSDSimpleTypeDefinition)obj,xsdSchema) || ((XSDSimpleTypeDefinition)obj).getName() == null)) {
    XSDSimpleTypeDefinition typedef=(XSDSimpleTypeDefinition)obj;
    manager.add(changeBaseTypeAction);
    manager.add(new Separator());
    if (typedef.getBaseTypeDefinition() != null) {
      EList list=typedef.getBaseTypeDefinition().getValidFacets();
      for (Iterator iter=list.iterator(); iter.hasNext(); ) {
        String element=(String)iter.next();
        manager.add(new XSDEditFacetAction(this,element));
      }
    }
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInDeletableType(selectedObjs)) {
    deleteConceptWrapAction.prepareToDelSelectedItems(selection,viewer);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.checkInAllElementType(selectedObjs)) {
    manager.add(newBrowseItemAction);
  }
  if (selectedObjs.length > 1 && deleteConceptWrapAction.outPutDeleteActions() != null) {
    if (!isType)     manager.add(deleteConceptWrapAction.outPutDeleteActions());
    String title=""String_Node_Str"";
    if (Util.checkInCopyTypeElement(selectedObjs))     title=""String_Node_Str"";
 else     if (Util.checkInCOpyTypeParticle(selectedObjs))     title=""String_Node_Str"";
    XSDCopyConceptAction copyConceptAction=new XSDCopyConceptAction(this,title);
    if (Util.checkInCopy(selectedObjs)) {
      manager.add(copyConceptAction);
    }
    if (selectedObjs.length > 1 && isXSDParticles(selectedObjs)) {
      manager.add(newParticleFromParticleAction);
    }
  }
  if (Util.IsEnterPrise()) {
    if (selectedObjs.length > 1 && setAnnotationWrapWriteAction.checkInWriteType(selectedObjs)) {
      manager.add(new Separator());
      manager.add(setAnnotationWrapWriteAction);
      manager.add(setAnnotationWrapNoAction);
    }
  }
  java.util.List<IAvailableModel> availablemodels=AvailableModelUtil.getAvailableModels(isLocalInput());
  for (int i=0; i < availablemodels.size(); i++) {
    IAvailableModel model=availablemodels.get(i);
    model.fillContextMenu(obj,manager,this,dataModelName);
    if (i == 1) {
      manager.add(new Separator());
    }
  }
  manager.add(new Separator());
  drillDownAdapter.addNavigationActions(manager);
  manager.add(new Separator(ADDITIONMENUID));
  deleteConceptWrapAction.clearExtraClassToDel();
}",0.9933529911539808
147985,"protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=5;
  exportsBtn=new Button(composite,SWT.RADIO);
  exportsBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  exportsBtn.setText(""String_Node_Str"");
  exportsBtn.setEnabled(export ? true : false);
  exportsBtn.setSelection(false);
  dataModelBtn=new Button(composite,SWT.RADIO);
  dataModelBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  dataModelBtn.setText(""String_Node_Str"");
  dataModelBtn.setEnabled(!export ? true : false);
  dataModelBtn.setSelection(false);
  Label label=new Label(composite,SWT.BORDER);
  label.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
  label.setText(""String_Node_Str"");
  revisionCombo=new CCombo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.FLAT);
  GridData gd=new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1);
  revisionCombo.setLayoutData(gd);
  gd.widthHint=100;
  Set<String> revisions=new HashSet<String>();
  Map<String,String> rMap=getRevisionMap();
  revisions.addAll(rMap.values());
  revisionCombo.setItems(revisions.toArray(new String[0]));
  String bundleVersion=MDMWorbenchPlugin.getDefault().getBundle().getHeaders().get(Constants.BUNDLE_VERSION).toString();
  String version=bundleVersion.split(""String_Node_Str"")[0];
  revision=rMap.get(version);
  if (revision == null) {
    revision=""String_Node_Str"";
  }
  revisionCombo.setText(revision);
  revisionCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      revision=revisionCombo.getText();
      fillInTable();
    }
  }
);
  executeBtn=new Button(composite,SWT.PUSH);
  executeBtn.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,true,true,1,1));
  executeBtn.addSelectionListener(this);
  executeBtn.setImage(ImageCache.getCreatedImage(EImage.REFRESH.getPath()));
  if (export)   exchangeDwnTable=new Table(composite,SWT.VIRTUAL | SWT.FULL_SELECTION | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
 else   exchangeDwnTable=new Table(composite,SWT.VIRTUAL | SWT.FULL_SELECTION | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL| SWT.MULTI);
  exchangeDwnTable.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,5,1));
  ((GridData)exchangeDwnTable.getLayoutData()).heightHint=300;
  exchangeDwnTable.setHeaderVisible(true);
  exchangeDwnTable.setLinesVisible(true);
  final TableColumn column1=new TableColumn(exchangeDwnTable,SWT.NONE);
  column1.setText(""String_Node_Str"");
  final TableColumn column2=new TableColumn(exchangeDwnTable,SWT.NONE);
  column2.setText(""String_Node_Str"");
  final TableColumn column3=new TableColumn(exchangeDwnTable,SWT.NONE);
  column3.setText(""String_Node_Str"");
  column1.setWidth(100);
  column2.setWidth(100);
  column3.setWidth(400);
  exchangeDwnTable.addListener(SWT.SetData,new Listener(){
    public void handleEvent(    Event e){
      TableItem item=(TableItem)e.item;
      int index=exchangeDwnTable.indexOf(item);
      try {
        JSONObject datum=dataContent[index];
        item.setText(new String[]{datum.get(COLUMN_EXTENSION_NAME).toString(),datum.get(COLUMN_REVISION_NAME).toString(),datum.get(COLUMN_URL_NAME).toString()});
      }
 catch (      JSONException je) {
        log.error(je.getMessage(),je);
      }
    }
  }
);
  exchangeDwnTable.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      getButton(IDialogConstants.OK_ID).setEnabled(exchangeDwnTable.getSelection().length >= 1 ? true : false);
    }
  }
);
  Listener sortListener=new Listener(){
    @SuppressWarnings(""String_Node_Str"") public void handleEvent(    Event e){
      TableColumn sortColumn=exchangeDwnTable.getSortColumn();
      final TableColumn currentColumn=(TableColumn)e.widget;
      int dir=exchangeDwnTable.getSortDirection();
      if (sortColumn == currentColumn) {
        dir=dir == SWT.UP ? SWT.DOWN : SWT.UP;
      }
 else {
        exchangeDwnTable.setSortColumn(currentColumn);
        dir=SWT.UP;
      }
      final int direction=dir;
      Arrays.sort(dataContent,new Comparator(){
        public int compare(        Object arg0,        Object arg1){
          JSONObject jsonA=(JSONObject)arg0;
          JSONObject jsonB=(JSONObject)arg1;
          String valueA=null, valueB=null;
          try {
            if (currentColumn == column1) {
              valueA=jsonA.get(COLUMN_EXTENSION_NAME).toString();
              valueB=jsonB.get(COLUMN_EXTENSION_NAME).toString();
            }
 else             if (currentColumn == column2) {
              valueA=jsonA.get(COLUMN_REVISION_NAME).toString();
              valueB=jsonB.get(COLUMN_REVISION_NAME).toString();
            }
 else {
              valueA=jsonA.get(COLUMN_URL_NAME).toString();
              valueB=jsonB.get(COLUMN_URL_NAME).toString();
            }
            if (valueA.equals(valueB))             return 0;
            if (direction == SWT.UP) {
              return valueA.compareTo(valueB) < 0 ? -1 : 1;
            }
            return valueA.compareTo(valueB) < 0 ? 1 : -1;
          }
 catch (          JSONException je) {
            log.error(je.getMessage(),je);
            return -1;
          }
        }
      }
);
      exchangeDwnTable.setSortDirection(dir);
      exchangeDwnTable.clearAll();
    }
  }
;
  column1.addListener(SWT.Selection,sortListener);
  column2.addListener(SWT.Selection,sortListener);
  column3.addListener(SWT.Selection,sortListener);
  exchangeDwnTable.setSortColumn(column1);
  exchangeDwnTable.setSortDirection(SWT.UP);
  fillInTable();
  return composite;
}","protected Control createDialogArea(Composite parent){
  parent.getShell().setText(""String_Node_Str"");
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=5;
  exportsBtn=new Button(composite,SWT.RADIO);
  exportsBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  exportsBtn.setText(""String_Node_Str"");
  exportsBtn.setEnabled(export ? true : false);
  exportsBtn.setSelection(false);
  dataModelBtn=new Button(composite,SWT.RADIO);
  dataModelBtn.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,true,1,1));
  dataModelBtn.setText(""String_Node_Str"");
  dataModelBtn.setEnabled(!export ? true : false);
  dataModelBtn.setSelection(false);
  Label label=new Label(composite,SWT.BORDER);
  label.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false,1,1));
  label.setText(""String_Node_Str"");
  revisionCombo=new CCombo(composite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.FLAT);
  GridData gd=new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1);
  revisionCombo.setLayoutData(gd);
  gd.widthHint=100;
  Set<String> revisions=new HashSet<String>();
  Map<String,String> rMap=getRevisionMap();
  revisions.addAll(rMap.values());
  revisionCombo.setItems(revisions.toArray(new String[0]));
  String bundleVersion=MDMWorbenchPlugin.getDefault().getVersion();
  String version=bundleVersion.split(""String_Node_Str"")[0];
  revision=rMap.get(version);
  if (revision == null) {
    revision=""String_Node_Str"";
  }
  revisionCombo.setText(revision);
  revisionCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      revision=revisionCombo.getText();
      fillInTable();
    }
  }
);
  executeBtn=new Button(composite,SWT.PUSH);
  executeBtn.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,true,true,1,1));
  executeBtn.addSelectionListener(this);
  executeBtn.setImage(ImageCache.getCreatedImage(EImage.REFRESH.getPath()));
  if (export)   exchangeDwnTable=new Table(composite,SWT.VIRTUAL | SWT.FULL_SELECTION | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL);
 else   exchangeDwnTable=new Table(composite,SWT.VIRTUAL | SWT.FULL_SELECTION | SWT.BORDER| SWT.V_SCROLL| SWT.H_SCROLL| SWT.MULTI);
  exchangeDwnTable.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,5,1));
  ((GridData)exchangeDwnTable.getLayoutData()).heightHint=300;
  exchangeDwnTable.setHeaderVisible(true);
  exchangeDwnTable.setLinesVisible(true);
  final TableColumn column1=new TableColumn(exchangeDwnTable,SWT.NONE);
  column1.setText(""String_Node_Str"");
  final TableColumn column2=new TableColumn(exchangeDwnTable,SWT.NONE);
  column2.setText(""String_Node_Str"");
  final TableColumn column3=new TableColumn(exchangeDwnTable,SWT.NONE);
  column3.setText(""String_Node_Str"");
  column1.setWidth(100);
  column2.setWidth(100);
  column3.setWidth(400);
  exchangeDwnTable.addListener(SWT.SetData,new Listener(){
    public void handleEvent(    Event e){
      TableItem item=(TableItem)e.item;
      int index=exchangeDwnTable.indexOf(item);
      try {
        JSONObject datum=dataContent[index];
        item.setText(new String[]{datum.get(COLUMN_EXTENSION_NAME).toString(),datum.get(COLUMN_REVISION_NAME).toString(),datum.get(COLUMN_URL_NAME).toString()});
      }
 catch (      JSONException je) {
        log.error(je.getMessage(),je);
      }
    }
  }
);
  exchangeDwnTable.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      getButton(IDialogConstants.OK_ID).setEnabled(exchangeDwnTable.getSelection().length >= 1 ? true : false);
    }
  }
);
  Listener sortListener=new Listener(){
    @SuppressWarnings(""String_Node_Str"") public void handleEvent(    Event e){
      TableColumn sortColumn=exchangeDwnTable.getSortColumn();
      final TableColumn currentColumn=(TableColumn)e.widget;
      int dir=exchangeDwnTable.getSortDirection();
      if (sortColumn == currentColumn) {
        dir=dir == SWT.UP ? SWT.DOWN : SWT.UP;
      }
 else {
        exchangeDwnTable.setSortColumn(currentColumn);
        dir=SWT.UP;
      }
      final int direction=dir;
      Arrays.sort(dataContent,new Comparator(){
        public int compare(        Object arg0,        Object arg1){
          JSONObject jsonA=(JSONObject)arg0;
          JSONObject jsonB=(JSONObject)arg1;
          String valueA=null, valueB=null;
          try {
            if (currentColumn == column1) {
              valueA=jsonA.get(COLUMN_EXTENSION_NAME).toString();
              valueB=jsonB.get(COLUMN_EXTENSION_NAME).toString();
            }
 else             if (currentColumn == column2) {
              valueA=jsonA.get(COLUMN_REVISION_NAME).toString();
              valueB=jsonB.get(COLUMN_REVISION_NAME).toString();
            }
 else {
              valueA=jsonA.get(COLUMN_URL_NAME).toString();
              valueB=jsonB.get(COLUMN_URL_NAME).toString();
            }
            if (valueA.equals(valueB))             return 0;
            if (direction == SWT.UP) {
              return valueA.compareTo(valueB) < 0 ? -1 : 1;
            }
            return valueA.compareTo(valueB) < 0 ? 1 : -1;
          }
 catch (          JSONException je) {
            log.error(je.getMessage(),je);
            return -1;
          }
        }
      }
);
      exchangeDwnTable.setSortDirection(dir);
      exchangeDwnTable.clearAll();
    }
  }
;
  column1.addListener(SWT.Selection,sortListener);
  column2.addListener(SWT.Selection,sortListener);
  column3.addListener(SWT.Selection,sortListener);
  exchangeDwnTable.setSortColumn(column1);
  exchangeDwnTable.setSortDirection(SWT.UP);
  fillInTable();
  return composite;
}",0.9943561691412696
147986,"@Override public void postWindowOpen(){
  PerspectiveReviewUtil.regisitPerspectiveBarSelectListener();
  try {
    if (!RegisterManagement.isProductRegistered()) {
      RegisterWizard registerWizard=new RegisterWizard();
      Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
      WizardDialog dialog=new RegisterWizardDialog(shell,registerWizard);
      dialog.setTitle(Messages.getString(""String_Node_Str""));
      if (dialog.open() == WizardDialog.OK) {
        String projectLanguage=""String_Node_Str"";
        String osName=System.getProperty(""String_Node_Str"");
        String osVersion=System.getProperty(""String_Node_Str"");
        String javaVersion=System.getProperty(""String_Node_Str"");
        long totalMemory=Runtime.getRuntime().totalMemory();
        com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
        Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
        int nbProc=Runtime.getRuntime().availableProcessors();
        RegisterManagement.register(registerWizard.getEmail(),registerWizard.getCountry(),registerWizard.isProxyEnabled(),registerWizard.getProxyHost(),registerWizard.getProxyPort(),MDMWorbenchPlugin.getDefault().getBundle().getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION).toString(),projectLanguage,osName,osVersion,javaVersion,totalMemory,memRAM,nbProc);
      }
 else {
        RegisterManagement.decrementTry();
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
}","@Override public void postWindowOpen(){
  PerspectiveReviewUtil.regisitPerspectiveBarSelectListener();
  try {
    if (!RegisterManagement.isProductRegistered()) {
      RegisterWizard registerWizard=new RegisterWizard();
      Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
      WizardDialog dialog=new RegisterWizardDialog(shell,registerWizard);
      dialog.setTitle(Messages.getString(""String_Node_Str""));
      if (dialog.open() == WizardDialog.OK) {
        String projectLanguage=""String_Node_Str"";
        String osName=System.getProperty(""String_Node_Str"");
        String osVersion=System.getProperty(""String_Node_Str"");
        String javaVersion=System.getProperty(""String_Node_Str"");
        long totalMemory=Runtime.getRuntime().totalMemory();
        com.sun.management.OperatingSystemMXBean composantSystem=(com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
        Long memRAM=new Long(composantSystem.getTotalPhysicalMemorySize() / 1024);
        int nbProc=Runtime.getRuntime().availableProcessors();
        RegisterManagement.register(registerWizard.getEmail(),registerWizard.getCountry(),registerWizard.isProxyEnabled(),registerWizard.getProxyHost(),registerWizard.getProxyPort(),MDMWorbenchPlugin.getDefault().getVersion(),projectLanguage,osName,osVersion,javaVersion,totalMemory,memRAM,nbProc);
      }
 else {
        RegisterManagement.decrementTry();
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
}",0.9767313019390582
147987,"public ERepositoryObjectType getRepositoryObjectType(Item item){
  IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
  if (configuration != null) {
    return configuration.getResourceProvider().getRepositoryObjectType(item);
  }
  return null;
}","public ERepositoryObjectType getRepositoryObjectType(Item item){
  if (item.eClass().getName().equals(""String_Node_Str"")) {
    return null;
  }
  IRepositoryNodeConfiguration configuration=RepositoryNodeConfigurationManager.getConfiguration(item);
  if (configuration != null) {
    return configuration.getResourceProvider().getRepositoryObjectType(item);
  }
  return null;
}",0.8816568047337278
147988,"@Override public void run(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveAllEditors(true);
  Set<IRepositoryViewObject> allChangedObjects=findAllChangedObjects();
  String name=getSameServerName();
  allChangedObjects.addAll(RemoveFromRepositoryAction.getViewObjectsRemovedList());
  DeployAllDialog dialog=new DeployAllDialog(getShell(),commonViewer.getInput(),allChangedObjects,name);
  List<IRepositoryViewObject> selectededViewObjs=new ArrayList<IRepositoryViewObject>();
  int retCode=dialog.open();
  IS_DEPLOYALL_FLAG=false;
  IRepositoryViewObject[] theInput=(IRepositoryViewObject[])commonViewer.getInput();
  backDeleteObjectsTreeView(theInput);
  if (retCode == IDialogConstants.OK_ID) {
    selectededViewObjs=dialog.getSelectededViewObjs();
    for (    IRepositoryViewObject viewObj : selectededViewObjs) {
      Item item=viewObj.getProperty().getItem();
      MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      serverObj.getLastServerDef();
    }
    MDMServerDef def=dialog.getTheServerDef();
    List<IRepositoryViewObject> viewObjectsRemoved=new ArrayList<IRepositoryViewObject>();
    for (    IRepositoryViewObject viewObj : selectededViewObjs) {
      if (RemoveFromRepositoryAction.getViewObjectsRemovedList().contains(viewObj)) {
        viewObjectsRemoved.add(viewObj);
      }
    }
    for (    IRepositoryViewObject viewObj : viewObjectsRemoved) {
      selectededViewObjs.remove(viewObj);
    }
    if (selectededViewObjs.size() >= 0) {
      IStatus status=updateServer(def,selectededViewObjs,viewObjectsRemoved);
      updateChangedStatus(status);
      if (status.isMultiStatus()) {
        showDeployStatus(status);
      }
      if (status.isMultiStatus()) {
        for (        IStatus childStatus : status.getChildren()) {
          DeployService.DeployStatus deployStatus=(DeployStatus)childStatus;
          if (deployStatus.isOK()) {
            if (deployStatus.getItem() instanceof MDMServerObjectItem)             saveLastServer((MDMServerObjectItem)deployStatus.getItem(),def,selectededViewObjs);
          }
        }
      }
    }
  }
  defNames.clear();
  Object input=commonViewer.getInput();
  for (  IRepositoryViewObject viewObj : (IRepositoryViewObject[])input) {
    commonViewer.refresh(viewObj);
  }
}","@Override public void run(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().saveAllEditors(true);
  Set<IRepositoryViewObject> allChangedObjects=findAllChangedObjects();
  String name=getSameServerName();
  allChangedObjects.addAll(RemoveFromRepositoryAction.getViewObjectsRemovedList());
  IRepositoryViewObject[] categoryViewObjects=RepositoryResourceUtil.getCategoryViewObjects();
  DeployAllDialog dialog=new DeployAllDialog(getShell(),categoryViewObjects,allChangedObjects,name);
  List<IRepositoryViewObject> selectededViewObjs=new ArrayList<IRepositoryViewObject>();
  int retCode=dialog.open();
  IS_DEPLOYALL_FLAG=false;
  IRepositoryViewObject[] theInput=(IRepositoryViewObject[])commonViewer.getInput();
  backDeleteObjectsTreeView(theInput);
  if (retCode == IDialogConstants.OK_ID) {
    selectededViewObjs=dialog.getSelectededViewObjs();
    for (    IRepositoryViewObject viewObj : selectededViewObjs) {
      Item item=viewObj.getProperty().getItem();
      MDMServerObject serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      serverObj.getLastServerDef();
    }
    MDMServerDef def=dialog.getTheServerDef();
    List<IRepositoryViewObject> viewObjectsRemoved=new ArrayList<IRepositoryViewObject>();
    for (    IRepositoryViewObject viewObj : selectededViewObjs) {
      if (RemoveFromRepositoryAction.getViewObjectsRemovedList().contains(viewObj)) {
        viewObjectsRemoved.add(viewObj);
      }
    }
    for (    IRepositoryViewObject viewObj : viewObjectsRemoved) {
      selectededViewObjs.remove(viewObj);
    }
    if (selectededViewObjs.size() >= 0) {
      IStatus status=updateServer(def,selectededViewObjs,viewObjectsRemoved);
      updateChangedStatus(status);
      if (status.isMultiStatus()) {
        showDeployStatus(status);
      }
      if (status.isMultiStatus()) {
        for (        IStatus childStatus : status.getChildren()) {
          DeployService.DeployStatus deployStatus=(DeployStatus)childStatus;
          if (deployStatus.isOK()) {
            if (deployStatus.getItem() instanceof MDMServerObjectItem)             saveLastServer((MDMServerObjectItem)deployStatus.getItem(),def,selectededViewObjs);
          }
        }
      }
    }
  }
  defNames.clear();
  Object input=commonViewer.getInput();
  for (  IRepositoryViewObject viewObj : (IRepositoryViewObject[])input) {
    commonViewer.refresh(viewObj);
  }
}",0.9714406600380792
147989,"/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  Composite container1=(Composite)super.createDialogArea(parent);
  GridLayout gridLayout=(GridLayout)container1.getLayout();
  container1.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  gridLayout.numColumns=1;
  Label lblNewLabel_selserver=new Label(container1,SWT.NONE);
  lblNewLabel_selserver.setText(Messages.DeployAllDialog_label_selectserver);
  combo=new Combo(container1,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData data=new GridData(SWT.LEFT,SWT.TOP,false,false,1,2);
  data.widthHint=400;
  combo.setLayoutData(data);
  final List<MDMServerDef> serverDefs=new ArrayList<MDMServerDef>();
  List<IRepositoryViewObject> viewObjects=ServerDefService.getAllServerDefViewObjects();
  List<String> itemsLabel=new ArrayList<String>();
  for (  IRepositoryViewObject object : viewObjects) {
    if (object instanceof IRepositoryObject) {
      MDMServerDefItem mdmItem=getMDMItem((IRepositoryViewObject)object);
      if (mdmItem != null) {
        MDMServerDef serverDef=mdmItem.getServerDef();
        String label=serverDef.getName() + ""String_Node_Str"" + serverDef.getHost()+ ""String_Node_Str"";
        itemsLabel.add(label);
        serverDefs.add(serverDef);
      }
    }
  }
  int size=itemsLabel.size();
  combo.setItems((String[])itemsLabel.toArray(new String[size]));
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      theServerDef=serverDefs.get(combo.getSelectionIndex());
    }
  }
);
  if (comboServerName != null && comboServerName.trim().length() > 0) {
    for (int index=0; index < serverDefs.size(); index++) {
      if (serverDefs.get(index).getName().equals(comboServerName)) {
        combo.select(index);
        theServerDef=serverDefs.get(index);
      }
    }
  }
 else {
    if (serverDefs.size() > 0) {
      combo.select(0);
      theServerDef=serverDefs.get(0);
    }
  }
  Composite container=new Composite(container1,SWT.BORDER);
  container.setLayout(new GridLayout(2,false));
  container.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  Label lblNewLabel=new Label(container,SWT.NONE);
  lblNewLabel.setText(Messages.DeployAllDialog_label);
  new Label(container,SWT.NONE);
  IRepositoryViewObject[] theInput=(IRepositoryViewObject[])input;
  theInput=getNewInput();
  restoreDeleteObjectsTreeView(theInput);
  treeViewer=new RepositoryViewObjectCheckedWidget(container,theInput,changedViewObjs);
  treeViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
    }
  }
);
  treeViewer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,2));
  Button selAllButton=new Button(container,SWT.NONE);
  selAllButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeViewer.selectAll(true);
    }
  }
);
  selAllButton.setText(Messages.DeployAllDialog_selectAll);
  Button deselAllBun=new Button(container,SWT.NONE);
  deselAllBun.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false,1,1));
  deselAllBun.setText(Messages.DeployAllDialog_deselectAll);
  deselAllBun.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeViewer.selectAll(false);
    }
  }
);
  return container;
}","/** 
 * Create contents of the dialog.
 * @param parent
 */
@Override protected Control createDialogArea(Composite parent){
  Composite container1=(Composite)super.createDialogArea(parent);
  GridLayout gridLayout=(GridLayout)container1.getLayout();
  container1.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  gridLayout.numColumns=1;
  Label lblNewLabel_selserver=new Label(container1,SWT.NONE);
  lblNewLabel_selserver.setText(Messages.DeployAllDialog_label_selectserver);
  combo=new Combo(container1,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData data=new GridData(SWT.LEFT,SWT.TOP,false,false,1,2);
  data.widthHint=400;
  combo.setLayoutData(data);
  final List<MDMServerDef> serverDefs=new ArrayList<MDMServerDef>();
  List<IRepositoryViewObject> viewObjects=ServerDefService.getAllServerDefViewObjects();
  List<String> itemsLabel=new ArrayList<String>();
  for (  IRepositoryViewObject object : viewObjects) {
    if (object instanceof IRepositoryObject) {
      MDMServerDefItem mdmItem=getMDMItem((IRepositoryViewObject)object);
      if (mdmItem != null) {
        MDMServerDef serverDef=mdmItem.getServerDef();
        String label=serverDef.getName() + ""String_Node_Str"" + serverDef.getHost()+ ""String_Node_Str"";
        itemsLabel.add(label);
        serverDefs.add(serverDef);
      }
    }
  }
  int size=itemsLabel.size();
  combo.setItems((String[])itemsLabel.toArray(new String[size]));
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      theServerDef=serverDefs.get(combo.getSelectionIndex());
    }
  }
);
  if (comboServerName != null && comboServerName.trim().length() > 0) {
    for (int index=0; index < serverDefs.size(); index++) {
      if (serverDefs.get(index).getName().equals(comboServerName)) {
        combo.select(index);
        theServerDef=serverDefs.get(index);
      }
    }
  }
 else {
    if (serverDefs.size() > 0) {
      combo.select(0);
      theServerDef=serverDefs.get(0);
    }
  }
  Composite container=new Composite(container1,SWT.BORDER);
  container.setLayout(new GridLayout(2,false));
  container.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
  Label lblNewLabel=new Label(container,SWT.NONE);
  lblNewLabel.setText(Messages.DeployAllDialog_label);
  new Label(container,SWT.NONE);
  restoreDeleteObjectsTreeView((IRepositoryViewObject[])input);
  treeViewer=new RepositoryViewObjectCheckedWidget(container,input,changedViewObjs);
  treeViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
    }
  }
);
  treeViewer.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,2));
  Button selAllButton=new Button(container,SWT.NONE);
  selAllButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeViewer.selectAll(true);
    }
  }
);
  selAllButton.setText(Messages.DeployAllDialog_selectAll);
  Button deselAllBun=new Button(container,SWT.NONE);
  deselAllBun.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false,1,1));
  deselAllBun.setText(Messages.DeployAllDialog_deselectAll);
  deselAllBun.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      treeViewer.selectAll(false);
    }
  }
);
  return container;
}",0.9738235294117648
147990,"public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",lineItems.size());
  XtentisPort port=null;
  try {
    port=Util.getPort(getXObject());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
  String results=""String_Node_Str"";
  for (Iterator<WSRoutingOrderV2> iter=lineItems.iterator(); iter.hasNext(); ) {
    WSRoutingOrderV2 lineItem=iter.next();
    monitor.subTask(""String_Node_Str"" + lineItem.getName());
    if (monitor.isCanceled()) {
      MessageDialog.openWarning(this.parentShell,""String_Node_Str"",""String_Node_Str"" + lineItem.getName() + ""String_Node_Str""+ ""String_Node_Str"");
      return;
    }
    try {
      if (synchronously) {
        WSString wsResult=port.executeRoutingOrderV2Synchronously(new WSExecuteRoutingOrderV2Synchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
        if (wsResult.getValue() != null)         results+=lineItem.getName() + ""String_Node_Str"" + wsResult.getValue();
      }
 else {
        port.executeRoutingOrderV2Asynchronously(new WSExecuteRoutingOrderV2Asynchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
      }
      monitor.worked(1);
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
      MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
  monitor.done();
  MessageDialog.openInformation(shell,""String_Node_Str"",lineItems.size() + ""String_Node_Str"" + (""String_Node_Str"".equals(results) ? ""String_Node_Str"" : ""String_Node_Str"" + results));
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(""String_Node_Str"",lineItems.size());
  XtentisPort port=null;
  try {
    port=getPort();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
  String results=""String_Node_Str"";
  for (Iterator<WSRoutingOrderV2> iter=lineItems.iterator(); iter.hasNext(); ) {
    WSRoutingOrderV2 lineItem=iter.next();
    monitor.subTask(""String_Node_Str"" + lineItem.getName());
    if (monitor.isCanceled()) {
      MessageDialog.openWarning(this.parentShell,""String_Node_Str"",""String_Node_Str"" + lineItem.getName() + ""String_Node_Str""+ ""String_Node_Str"");
      return;
    }
    try {
      if (synchronously) {
        WSString wsResult=port.executeRoutingOrderV2Synchronously(new WSExecuteRoutingOrderV2Synchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
        if (wsResult.getValue() != null)         results+=lineItem.getName() + ""String_Node_Str"" + wsResult.getValue();
      }
 else {
        port.executeRoutingOrderV2Asynchronously(new WSExecuteRoutingOrderV2Asynchronously(new WSRoutingOrderV2PK(lineItem.getName(),lineItem.getStatus())));
      }
      monitor.worked(1);
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
      MessageDialog.openError(shell,""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
  monitor.done();
  MessageDialog.openInformation(shell,""String_Node_Str"",lineItems.size() + ""String_Node_Str"" + (""String_Node_Str"".equals(results) ? ""String_Node_Str"" : ""String_Node_Str"" + results));
}",0.9950567025298052
147991,"public void startSubscriptionEngine(){
  try {
    XtentisPort port=Util.getPort(getXObject());
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.START));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void startSubscriptionEngine(){
  try {
    XtentisPort port=getPort();
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.START));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9808342728297632
147992,"@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(1,false));
    Composite statusComposite=toolkit.createComposite(composite,SWT.NONE);
    statusComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    statusComposite.setLayout(new GridLayout(5,false));
    Label descriptionLabel=toolkit.createLabel(statusComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    statusLabel=toolkit.createLabel(statusComposite,""String_Node_Str"",SWT.NULL);
    statusLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    Button startButton=toolkit.createButton(statusComposite,""String_Node_Str"",SWT.TOGGLE);
    startButton.setImage(ImageCache.getCreatedImage(EImage.RUN_EXC.getPath()));
    startButton.setToolTipText(""String_Node_Str"");
    startButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    startButton.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        startSubscriptionEngine();
      }
    }
);
    Button stopButton=toolkit.createButton(statusComposite,""String_Node_Str"",SWT.TOGGLE);
    stopButton.setImage(ImageCache.getCreatedImage(EImage.STOP.getPath()));
    stopButton.setToolTipText(""String_Node_Str"");
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    stopButton.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        stopSubscriptionEngine();
      }
    }
);
    suspendButton=toolkit.createButton(statusComposite,""String_Node_Str"",SWT.TOGGLE);
    suspendButton.setImage(ImageCache.getCreatedImage(EImage.SUSPEND.getPath()));
    suspendButton.setToolTipText(""String_Node_Str"");
    suspendButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    suspendButton.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        if (suspendButton.getSelection()) {
          suspendSubscriptionEngine();
        }
 else {
          resumeSubscriptionEngine();
        }
      }
    }
);
    Composite separator=toolkit.createCompositeSeparator(composite);
    separator.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    ((GridData)separator.getLayoutData()).heightHint=2;
    Composite firstLineComposite=toolkit.createComposite(composite);
    firstLineComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    firstLineComposite.setLayout(new GridLayout(9,false));
    Label routingOrdersLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    routingOrdersLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,9,1));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    CalendarSelectWidget fromCalendar=new CalendarSelectWidget(toolkit,firstLineComposite,true);
    fromText=fromCalendar.getText();
    Label toLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    CalendarSelectWidget toCalendar=new CalendarSelectWidget(toolkit,firstLineComposite,false);
    toText=toCalendar.getText();
    Label statusLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    statusLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    statusCombo=new Combo(firstLineComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.MULTI);
    statusCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    statusCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    statusCombo.add(""String_Node_Str"");
    statusCombo.add(""String_Node_Str"");
    statusCombo.add(""String_Node_Str"");
    statusCombo.select(0);
    Button bSearch=toolkit.createButton(firstLineComposite,""String_Node_Str"",SWT.CENTER);
    bSearch.setImage(ImageCache.getCreatedImage(EImage.BROWSE.getPath()));
    bSearch.setToolTipText(""String_Node_Str"");
    bSearch.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    Composite searchLineComposite=toolkit.createComposite(composite);
    searchLineComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    searchLineComposite.setLayout(new GridLayout(4,false));
    Label documentTypeLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    documentTypeLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    documentTypeText=toolkit.createText(searchLineComposite,""String_Node_Str"",SWT.BORDER);
    documentTypeText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    ((GridData)documentTypeText.getLayoutData()).widthHint=120;
    documentTypeText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label idLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    idLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    idText=toolkit.createText(searchLineComposite,""String_Node_Str"",SWT.BORDER);
    idText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    idText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label serviceLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    serviceLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    serviceCombo=new Combo(searchLineComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.MULTI);
    serviceCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    serviceCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    serviceCombo.add(""String_Node_Str"");
    WSServicesListItem[] servicesList=Util.getPort(getXObject()).getServicesList(new WSGetServicesList(""String_Node_Str"")).getItem();
    if ((servicesList != null) && (servicesList.length > 0)) {
      String[] services=new String[servicesList.length];
      for (int i=0; i < servicesList.length; i++) {
        services[i]=servicesList[i].getJndiName().replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
      Arrays.sort(services);
      for (int i=0; i < services.length; i++) {
        serviceCombo.add(services[i]);
      }
    }
    serviceCombo.select(0);
    Label anyFieldLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    anyFieldLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    anyFieldText=toolkit.createText(searchLineComposite,""String_Node_Str"",SWT.BORDER);
    anyFieldText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    anyFieldText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookContextMenu();
    managedForm.reflow(true);
    WidgetFactory factory=WidgetFactory.getWidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  try {
    managedForm.getForm().setText(this.getTitle());
    FormToolkit toolkit=managedForm.getToolkit();
    Composite composite=managedForm.getForm().getBody();
    composite.setLayout(new GridLayout(1,false));
    Composite statusComposite=toolkit.createComposite(composite,SWT.NONE);
    statusComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    statusComposite.setLayout(new GridLayout(5,false));
    Label descriptionLabel=toolkit.createLabel(statusComposite,""String_Node_Str"",SWT.NULL);
    descriptionLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    statusLabel=toolkit.createLabel(statusComposite,""String_Node_Str"",SWT.NULL);
    statusLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    Button startButton=toolkit.createButton(statusComposite,""String_Node_Str"",SWT.TOGGLE);
    startButton.setImage(ImageCache.getCreatedImage(EImage.RUN_EXC.getPath()));
    startButton.setToolTipText(""String_Node_Str"");
    startButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    startButton.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        startSubscriptionEngine();
      }
    }
);
    Button stopButton=toolkit.createButton(statusComposite,""String_Node_Str"",SWT.TOGGLE);
    stopButton.setImage(ImageCache.getCreatedImage(EImage.STOP.getPath()));
    stopButton.setToolTipText(""String_Node_Str"");
    stopButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    stopButton.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        stopSubscriptionEngine();
      }
    }
);
    suspendButton=toolkit.createButton(statusComposite,""String_Node_Str"",SWT.TOGGLE);
    suspendButton.setImage(ImageCache.getCreatedImage(EImage.SUSPEND.getPath()));
    suspendButton.setToolTipText(""String_Node_Str"");
    suspendButton.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,true,1,1));
    suspendButton.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        if (suspendButton.getSelection()) {
          suspendSubscriptionEngine();
        }
 else {
          resumeSubscriptionEngine();
        }
      }
    }
);
    Composite separator=toolkit.createCompositeSeparator(composite);
    separator.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));
    ((GridData)separator.getLayoutData()).heightHint=2;
    Composite firstLineComposite=toolkit.createComposite(composite);
    firstLineComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    firstLineComposite.setLayout(new GridLayout(9,false));
    Label routingOrdersLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    routingOrdersLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,9,1));
    final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Label fromLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    fromLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    CalendarSelectWidget fromCalendar=new CalendarSelectWidget(toolkit,firstLineComposite,true);
    fromText=fromCalendar.getText();
    Label toLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    toLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    CalendarSelectWidget toCalendar=new CalendarSelectWidget(toolkit,firstLineComposite,false);
    toText=toCalendar.getText();
    Label statusLabel=toolkit.createLabel(firstLineComposite,""String_Node_Str"",SWT.NULL);
    statusLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    statusCombo=new Combo(firstLineComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.MULTI);
    statusCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    statusCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    statusCombo.add(""String_Node_Str"");
    statusCombo.add(""String_Node_Str"");
    statusCombo.add(""String_Node_Str"");
    statusCombo.select(0);
    Button bSearch=toolkit.createButton(firstLineComposite,""String_Node_Str"",SWT.CENTER);
    bSearch.setImage(ImageCache.getCreatedImage(EImage.BROWSE.getPath()));
    bSearch.setToolTipText(""String_Node_Str"");
    bSearch.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    bSearch.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
      }
    }
);
    Composite searchLineComposite=toolkit.createComposite(composite);
    searchLineComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    searchLineComposite.setLayout(new GridLayout(4,false));
    Label documentTypeLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    documentTypeLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    documentTypeText=toolkit.createText(searchLineComposite,""String_Node_Str"",SWT.BORDER);
    documentTypeText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false,1,1));
    ((GridData)documentTypeText.getLayoutData()).widthHint=120;
    documentTypeText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label idLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    idLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    idText=toolkit.createText(searchLineComposite,""String_Node_Str"",SWT.BORDER);
    idText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    idText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    Label serviceLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    serviceLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    serviceCombo=new Combo(searchLineComposite,SWT.READ_ONLY | SWT.DROP_DOWN | SWT.MULTI);
    serviceCombo.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    serviceCombo.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    serviceCombo.add(""String_Node_Str"");
    WSServicesListItem[] servicesList=getPort().getServicesList(new WSGetServicesList(""String_Node_Str"")).getItem();
    if ((servicesList != null) && (servicesList.length > 0)) {
      String[] services=new String[servicesList.length];
      for (int i=0; i < servicesList.length; i++) {
        services[i]=servicesList[i].getJndiName().replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
      Arrays.sort(services);
      for (int i=0; i < services.length; i++) {
        serviceCombo.add(services[i]);
      }
    }
    serviceCombo.select(0);
    Label anyFieldLabel=toolkit.createLabel(searchLineComposite,""String_Node_Str"",SWT.NULL);
    anyFieldLabel.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false,1,1));
    anyFieldText=toolkit.createText(searchLineComposite,""String_Node_Str"",SWT.BORDER);
    anyFieldText.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
    anyFieldText.addKeyListener(new KeyListener(){
      public void keyPressed(      KeyEvent e){
      }
      public void keyReleased(      KeyEvent e){
        if ((e.stateMask == 0) && (e.character == SWT.CR)) {
          RoutingEngineV2BrowserMainPage.this.resultsViewer.setInput(getResults());
        }
      }
    }
);
    final Table table=createTable(composite);
    resultsViewer=new TableViewer(table);
    resultsViewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,1,1));
    resultsViewer.setContentProvider(new ArrayContentProvider());
    resultsViewer.setLabelProvider(new ClusterTableLabelProvider());
    resultsViewer.addDoubleClickListener(new IDoubleClickListener(){
      public void doubleClick(      DoubleClickEvent event){
        resultsViewer.setSelection(event.getSelection());
        try {
          new EditItemAction(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),resultsViewer).run();
        }
 catch (        Exception e) {
          MessageDialog.openError(RoutingEngineV2BrowserMainPage.this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ e.getLocalizedMessage());
        }
      }
    }
);
    hookContextMenu();
    managedForm.reflow(true);
    WidgetFactory factory=WidgetFactory.getWidgetFactory();
    factory.adapt(managedForm.getForm().getBody());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}",0.9991161944372238
147993,"protected void refreshData(){
  try {
    XtentisPort port=Util.getPort(getXObject());
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.STATUS));
    statusLabel.setText(status.getValue());
    idText.setFocus();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","protected void refreshData(){
  try {
    XtentisPort port=getPort();
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.STATUS));
    statusLabel.setText(status.getValue());
    idText.setFocus();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9814612868047984
147994,"public void resumeSubscriptionEngine(){
  try {
    XtentisPort port=Util.getPort(getXObject());
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.RESUME));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void resumeSubscriptionEngine(){
  try {
    XtentisPort port=getPort();
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.RESUME));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9809203142536476
147995,"public void suspendSubscriptionEngine(){
  try {
    XtentisPort port=Util.getPort(getXObject());
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.SUSPEND));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void suspendSubscriptionEngine(){
  try {
    XtentisPort port=getPort();
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.SUSPEND));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9810055865921788
147996,"protected WSRoutingOrderV2[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=Util.getPort(getXObject());
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    long timeCreatedMin=-1;
    long timeCreatedMax=-1;
    long timeScheduledMin=-1;
    long timeScheduledMax=-1;
    long timeLastRunStartedMin=-1;
    long timeLastRunStartedMax=-1;
    long timeLastRunCompletedMin=-1;
    long timeLastRunCompletedMax=-1;
    WSRoutingOrderV2Status status=null;
    String statusText=statusCombo.getItem(statusCombo.getSelectionIndex());
    if (""String_Node_Str"".equals(statusText)) {
      timeCreatedMin=from;
      timeCreatedMax=to;
      status=WSRoutingOrderV2Status.ACTIVE;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.COMPLETED;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.FAILED;
    }
 else {
      throw new XtentisException(""String_Node_Str"" + statusText + ""String_Node_Str"");
    }
    String serviceJNDI=serviceCombo.getItem(serviceCombo.getSelectionIndex());
    if (""String_Node_Str"".equals(serviceJNDI))     serviceJNDI=null;
    WSRoutingOrderV2[] results=port.getRoutingOrderV2SByCriteria(new WSGetRoutingOrderV2SByCriteria(new WSRoutingOrderV2SearchCriteria(status,""String_Node_Str"".equals(anyFieldText.getText()) || ""String_Node_Str"".equals(anyFieldText.getText()) ? null : anyFieldText.getText(),null,timeCreatedMin,timeCreatedMax,timeScheduledMin,timeScheduledMax,timeLastRunStartedMin,timeLastRunStartedMax,timeLastRunCompletedMin,timeLastRunCompletedMax,""String_Node_Str"".equals(documentTypeText.getText()) || ""String_Node_Str"".equals(documentTypeText.getText()) ? null : documentTypeText.getText(),""String_Node_Str"".equals(idText.getText()) || ""String_Node_Str"".equals(idText.getText()) ? null : idText.getText(),serviceJNDI,null,null))).getWsRoutingOrder();
    if (results == null) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new WSRoutingOrderV2[0];
    }
    return results;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}","protected WSRoutingOrderV2[] getResults(){
  Cursor waitCursor=null;
  try {
    Display display=getEditor().getSite().getPage().getWorkbenchWindow().getWorkbench().getDisplay();
    waitCursor=new Cursor(display,SWT.CURSOR_WAIT);
    this.getSite().getShell().setCursor(waitCursor);
    XtentisPort port=getPort();
    long from=-1;
    long to=-1;
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    if (!""String_Node_Str"".equals(fromText.getText())) {
      String dateTimeText=fromText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(fromText.getText());
        from=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    if (!""String_Node_Str"".equals(toText.getText())) {
      String dateTimeText=toText.getText().trim();
      Matcher matcher=pattern.matcher(dateTimeText);
      if (!matcher.matches()) {
        MessageDialog.openWarning(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        return new WSRoutingOrderV2[0];
      }
      try {
        Date d=sdf.parse(toText.getText());
        to=d.getTime();
      }
 catch (      ParseException pe) {
      }
    }
    long timeCreatedMin=-1;
    long timeCreatedMax=-1;
    long timeScheduledMin=-1;
    long timeScheduledMax=-1;
    long timeLastRunStartedMin=-1;
    long timeLastRunStartedMax=-1;
    long timeLastRunCompletedMin=-1;
    long timeLastRunCompletedMax=-1;
    WSRoutingOrderV2Status status=null;
    String statusText=statusCombo.getItem(statusCombo.getSelectionIndex());
    if (""String_Node_Str"".equals(statusText)) {
      timeCreatedMin=from;
      timeCreatedMax=to;
      status=WSRoutingOrderV2Status.ACTIVE;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.COMPLETED;
    }
 else     if (""String_Node_Str"".equals(statusText)) {
      timeLastRunCompletedMin=from;
      timeLastRunCompletedMax=to;
      status=WSRoutingOrderV2Status.FAILED;
    }
 else {
      throw new XtentisException(""String_Node_Str"" + statusText + ""String_Node_Str"");
    }
    String serviceJNDI=serviceCombo.getItem(serviceCombo.getSelectionIndex());
    if (""String_Node_Str"".equals(serviceJNDI))     serviceJNDI=null;
    WSRoutingOrderV2[] results=port.getRoutingOrderV2SByCriteria(new WSGetRoutingOrderV2SByCriteria(new WSRoutingOrderV2SearchCriteria(status,""String_Node_Str"".equals(anyFieldText.getText()) || ""String_Node_Str"".equals(anyFieldText.getText()) ? null : anyFieldText.getText(),null,timeCreatedMin,timeCreatedMax,timeScheduledMin,timeScheduledMax,timeLastRunStartedMin,timeLastRunStartedMax,timeLastRunCompletedMin,timeLastRunCompletedMax,""String_Node_Str"".equals(documentTypeText.getText()) || ""String_Node_Str"".equals(documentTypeText.getText()) ? null : documentTypeText.getText(),""String_Node_Str"".equals(idText.getText()) || ""String_Node_Str"".equals(idText.getText()) ? null : idText.getText(),serviceJNDI,null,null))).getWsRoutingOrder();
    if (results == null) {
      MessageDialog.openInformation(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return new WSRoutingOrderV2[0];
    }
    return results;
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    if ((e.getLocalizedMessage() != null) && e.getLocalizedMessage().contains(""String_Node_Str""))     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
 else     MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",e.getLocalizedMessage());
    return null;
  }
 finally {
    try {
      this.getSite().getShell().setCursor(null);
      waitCursor.dispose();
    }
 catch (    Exception e) {
    }
  }
}",0.9978821477513392
147997,"public void stopSubscriptionEngine(){
  try {
    XtentisPort port=Util.getPort(getXObject());
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.STOP));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}","public void stopSubscriptionEngine(){
  try {
    XtentisPort port=getPort();
    WSRoutingEngineV2Status status=port.routingEngineV2Action(new WSRoutingEngineV2Action(WSRoutingEngineV2ActionCode.STOP));
    statusLabel.setText(status.getValue());
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    MessageDialog.openError(this.getSite().getShell(),""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9807474518686295
147998,"@Override public void doImport(Object[] selectedObjs,IProgressMonitor monitor){
  List<ItemRecord> itemRecords=new LinkedList<ItemRecord>();
  for (  Object obj : selectedObjs) {
    if (obj instanceof ItemRecord) {
      itemRecords.add((ItemRecord)obj);
    }
  }
  repositoryUtil.importItemRecords(manager,itemRecords,monitor,isOverride,null,""String_Node_Str"");
  monitor.beginTask(""String_Node_Str"",20);
  HashMap<String,String> picturePathMap=new HashMap<String,String>();
  for (  TreeObject item : dataClusters) {
    try {
      importClusterContents(item,Util.getPort(item),picturePathMap);
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  monitor.done();
}","@Override public void doImport(Object[] selectedObjs,IProgressMonitor monitor){
  List<ItemRecord> itemRecords=new LinkedList<ItemRecord>();
  for (  Object obj : selectedObjs) {
    if (obj instanceof ItemRecord) {
      itemRecords.add((ItemRecord)obj);
    }
  }
  for (  ItemRecord itemRec : itemRecords) {
    Item item=itemRec.getProperty().getItem();
    MDMServerObject serverObj=null;
    if (item instanceof MDMServerObjectItem) {
      serverObj=((MDMServerObjectItem)item).getMDMServerObject();
      if (serverObj.getLastServerDef() != null) {
        serverObj.setLastServerDef(null);
      }
    }
  }
  repositoryUtil.importItemRecords(manager,itemRecords,monitor,isOverride,null,""String_Node_Str"");
  monitor.beginTask(""String_Node_Str"",20);
  HashMap<String,String> picturePathMap=new HashMap<String,String>();
  for (  TreeObject item : dataClusters) {
    try {
      importClusterContents(item,Util.getPort(item),picturePathMap);
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
  monitor.done();
}",0.79533527696793
147999,"public String isValid(String newText){
  if (newText == null || newText.trim().length() == 0)   return Messages.Common_nameCanNotBeEmpty;
  if (!Pattern.matches(""String_Node_Str"",newText)) {
    return Messages.Common_nameInvalid;
  }
  if (RepositoryResourceUtil.isExistByName(parentItem.getRepObjType(),newText.trim())) {
    return Messages.Common_nameIsUsed;
  }
  return null;
}","public String isValid(String newText){
  if (newText == null || newText.trim().length() == 0)   return Messages.Common_nameCanNotBeEmpty;
  if (type.equals(IServerObjectRepositoryType.TYPE_TRANSFORMERV2) || type.equals(IServerObjectRepositoryType.TYPE_VIEW)) {
    if (!Pattern.matches(""String_Node_Str"",newText)) {
      return Messages.Common_nameInvalid;
    }
  }
 else   if (!Pattern.matches(""String_Node_Str"",newText)) {
    return Messages.Common_nameInvalid;
  }
  if (RepositoryResourceUtil.isExistByName(parentItem.getRepObjType(),newText.trim())) {
    return Messages.Common_nameIsUsed;
  }
  return null;
}",0.4111776447105788
148000,"private String showPasteDlg(final ERepositoryObjectType type,final ContainerItem parentItem,String initLabel){
  InputDialog dlg=new InputDialog(getShell(),Messages.RepositoryDropAssistant_pasteObject,Messages.Common_inputName,initLabel,new IInputValidator(){
    public String isValid(    String newText){
      if (newText == null || newText.trim().length() == 0)       return Messages.Common_nameCanNotBeEmpty;
      if (!Pattern.matches(""String_Node_Str"",newText)) {
        return Messages.Common_nameInvalid;
      }
      if (RepositoryResourceUtil.isExistByName(parentItem.getRepObjType(),newText.trim())) {
        return Messages.Common_nameIsUsed;
      }
      return null;
    }
  }
);
  dlg.setBlockOnOpen(true);
  if (dlg.open() == Window.CANCEL)   return null;
  return dlg.getValue();
}","private String showPasteDlg(final ERepositoryObjectType type,final ContainerItem parentItem,String initLabel){
  InputDialog dlg=new InputDialog(getShell(),Messages.RepositoryDropAssistant_pasteObject,Messages.Common_inputName,initLabel,new IInputValidator(){
    public String isValid(    String newText){
      if (newText == null || newText.trim().length() == 0)       return Messages.Common_nameCanNotBeEmpty;
      if (type.equals(IServerObjectRepositoryType.TYPE_TRANSFORMERV2) || type.equals(IServerObjectRepositoryType.TYPE_VIEW)) {
        if (!Pattern.matches(""String_Node_Str"",newText)) {
          return Messages.Common_nameInvalid;
        }
      }
 else       if (!Pattern.matches(""String_Node_Str"",newText)) {
        return Messages.Common_nameInvalid;
      }
      if (RepositoryResourceUtil.isExistByName(parentItem.getRepObjType(),newText.trim())) {
        return Messages.Common_nameIsUsed;
      }
      return null;
    }
  }
);
  dlg.setBlockOnOpen(true);
  if (dlg.open() == Window.CANCEL)   return null;
  return dlg.getValue();
}",0.8625134264232008
