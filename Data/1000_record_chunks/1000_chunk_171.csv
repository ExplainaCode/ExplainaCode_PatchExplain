record_number,buggy_code,fixed_code,code_similarity
170001,"@Override public boolean canPlayerUse(EntityPlayer var1,ISpecialAccess mm){
  return mm.getUserAccess(var1.username).ordinal() >= AccessLevel.BASIC.ordinal() || var1.capabilities.isCreativeMode;
}","@Override public boolean canPlayerUse(EntityPlayer var1,ISpecialAccess mm){
  return mm.getUserAccess(var1.username).ordinal() >= AccessLevel.USER.ordinal() || var1.capabilities.isCreativeMode;
}",0.9820971867007672
170002,"@Override public boolean processCommand(EntityPlayer player,ITerminal terminal,String[] args){
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length > 1 && args[1] != null && terminal instanceof TPaoTaiZhan) {
    TPaoTaiZhan platform=(TPaoTaiZhan)terminal;
    AccessLevel userAccess=terminal.getUserAccess(player.username);
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      terminal.addToConsole(""String_Node_Str"" + platform.getUserAccess(player.username).displayName);
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"") && args.length > 3 && userAccess.ordinal() >= AccessLevel.ADMIN.ordinal()) {
      String username=args[2];
      AccessLevel currentAccess=terminal.getUserAccess(username);
      AccessLevel playerAccess=terminal.getUserAccess(player.username);
      if (playerAccess.ordinal() >= AccessLevel.ADMIN.ordinal()) {
        if (currentAccess != AccessLevel.NONE) {
          AccessLevel newAccess=AccessLevel.get(args[3]);
          if (currentAccess != AccessLevel.OWNER || platform.getUsersWithAcess(AccessLevel.OWNER).size() > 1) {
            if (newAccess != AccessLevel.NONE && terminal.addUserAccess(username,newAccess,true)) {
              terminal.addToConsole(username + ""String_Node_Str"" + newAccess.displayName);
              platform.worldObj.markBlockForUpdate(platform.xCoord,platform.yCoord,platform.zCoord);
              return true;
            }
          }
        }
      }
 else {
        terminal.addToConsole(""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}","@Override public boolean processCommand(EntityPlayer player,ITerminal terminal,String[] args){
  if (args[0].equalsIgnoreCase(""String_Node_Str"") && args.length > 1 && args[1] != null && terminal instanceof TPaoTaiZhan) {
    TPaoTaiZhan platform=(TPaoTaiZhan)terminal;
    AccessLevel userAccess=terminal.getUserAccess(player.username);
    if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
      terminal.addToConsole(""String_Node_Str"" + platform.getUserAccess(player.username).displayName);
      return true;
    }
 else     if (args[1].equalsIgnoreCase(""String_Node_Str"") && args.length > 3 && userAccess.ordinal() >= AccessLevel.ADMIN.ordinal()) {
      String username=args[2];
      AccessLevel currentAccess=terminal.getUserAccess(username);
      AccessLevel playerAccess=terminal.getUserAccess(player.username);
      if (playerAccess.ordinal() >= AccessLevel.ADMIN.ordinal() && playerAccess.ordinal() >= currentAccess.ordinal() && (!player.username.equalsIgnoreCase(username) || playerAccess == AccessLevel.OWNER)) {
        if (currentAccess != AccessLevel.NONE) {
          AccessLevel newAccess=AccessLevel.get(args[3]);
          if (currentAccess != AccessLevel.OWNER || platform.getUsersWithAcess(AccessLevel.OWNER).size() > 1) {
            if (newAccess != AccessLevel.NONE && terminal.addUserAccess(username,newAccess,true)) {
              terminal.addToConsole(username + ""String_Node_Str"" + newAccess.displayName);
              platform.worldObj.markBlockForUpdate(platform.xCoord,platform.yCoord,platform.zCoord);
              return true;
            }
          }
        }
      }
 else {
        terminal.addToConsole(""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}",0.8565388100271821
170003,"/** 
 * Inherit this function to receive packets. Make sure this function is supered.
 * @throws IOException
 */
public void onReceivePacket(int packetID,EntityPlayer player,ByteArrayDataInput dataStream) throws IOException {
  if (packetID == TurretPacketType.ROTATION.ordinal()) {
    this.setRotation(dataStream.readFloat(),dataStream.readFloat());
  }
 else   if (packetID == TurretPacketType.DESCRIPTION.ordinal()) {
    short size=dataStream.readShort();
    if (size > 0) {
      byte[] byteCode=new byte[size];
      dataStream.readFully(byteCode);
      this.readFromNBT(CompressedStreamTools.decompress(byteCode));
    }
  }
 else   if (packetID == TurretPacketType.STATS.ordinal()) {
    this.health=dataStream.readInt();
  }
 else   if (packetID == TurretPacketType.MOUNT.ordinal()) {
    this.mount(player);
  }
}","/** 
 * Inherit this function to receive packets. Make sure this function is supered.
 * @throws IOException
 */
public void onReceivePacket(int packetID,EntityPlayer player,ByteArrayDataInput dataStream) throws IOException {
  if (packetID == TurretPacketType.ROTATION.ordinal()) {
    this.setRotation(dataStream.readFloat(),dataStream.readFloat());
  }
 else   if (packetID == TurretPacketType.DESCRIPTION.ordinal()) {
    short size=dataStream.readShort();
    if (size > 0) {
      byte[] byteCode=new byte[size];
      dataStream.readFully(byteCode);
      this.readFromNBT(CompressedStreamTools.decompress(byteCode));
    }
  }
 else   if (packetID == TurretPacketType.STATS.ordinal()) {
    this.health=dataStream.readInt();
  }
}",0.9437340153452686
170004,"@Override public Vector3 getMuzzle(){
  return this.getCenter().add(Vector3.multiply(LookHelper.getDeltaPositionFromRotation(this.currentRotationYaw,this.currentRotationPitch),1));
}","@Override public Vector3 getMuzzle(){
  return this.getCenter().add(Vector3.multiply(CalculationHelper.getDeltaPositionFromRotation(this.currentRotationYaw,this.currentRotationPitch),1));
}",0.9649595687331536
170005,"@Override public void onWeaponActivated(){
  this.tickSinceFired+=this.baseFiringDelay;
}","@Override public void onWeaponActivated(){
  this.tickSinceFired+=this.getFireDelay();
}",0.9378531073446328
170006,"@Override public void setRotation(float yaw,float pitch){
  this.wantedRotationYaw=MathHelper.wrapAngleTo180_float(yaw);
  this.wantedRotationPitch=MathHelper.wrapAngleTo180_float(pitch);
}","@Override public void setRotation(float yaw,float pitch){
  this.wantedRotationYaw=MathHelper.wrapAngleTo180_float(yaw);
  if (!this.allowFreePitch) {
    this.wantedRotationPitch=Math.max(Math.min(MathHelper.wrapAngleTo180_float(pitch),this.maxPitch),this.minPitch);
  }
 else {
    this.wantedRotationPitch=MathHelper.wrapAngleTo180_float(pitch);
  }
}",0.6961325966850829
170007,"public void drawParticleStreamTo(Vector3 endPosition){
  if (this.worldObj.isRemote) {
    Vector3 startPosition=this.getMuzzle();
    Vector3 direction=LookHelper.getDeltaPositionFromRotation(this.currentRotationYaw,this.currentRotationPitch);
    double xoffset=0;
    double yoffset=0;
    double zoffset=0;
    Vector3 horzdir=direction.normalize();
    horzdir.y=0;
    horzdir=horzdir.normalize();
    double cx=startPosition.x + direction.x * xoffset - direction.y * horzdir.x * yoffset - horzdir.z * zoffset;
    double cy=startPosition.y + direction.y * xoffset + (1 - Math.abs(direction.y)) * yoffset;
    double cz=startPosition.z + direction.x * xoffset - direction.y * horzdir.x * yoffset + horzdir.x * zoffset;
    double dx=endPosition.x - cx;
    double dy=endPosition.y - cy;
    double dz=endPosition.z - cz;
    double ratio=Math.sqrt(dx * dx + dy * dy + dz * dz);
    while (Math.abs(cx - endPosition.x) > Math.abs(dx / ratio)) {
      this.worldObj.spawnParticle(""String_Node_Str"",cx,cy,cz,0.0D,0.0D,0.0D);
      cx+=dx * 0.1 / ratio;
      cy+=dy * 0.1 / ratio;
      cz+=dz * 0.1 / ratio;
    }
  }
}","public void drawParticleStreamTo(Vector3 endPosition){
  if (this.worldObj.isRemote) {
    Vector3 startPosition=this.getMuzzle();
    Vector3 direction=CalculationHelper.getDeltaPositionFromRotation(this.currentRotationYaw,this.currentRotationPitch);
    double xoffset=0;
    double yoffset=0;
    double zoffset=0;
    Vector3 horzdir=direction.normalize();
    horzdir.y=0;
    horzdir=horzdir.normalize();
    double cx=startPosition.x + direction.x * xoffset - direction.y * horzdir.x * yoffset - horzdir.z * zoffset;
    double cy=startPosition.y + direction.y * xoffset + (1 - Math.abs(direction.y)) * yoffset;
    double cz=startPosition.z + direction.x * xoffset - direction.y * horzdir.x * yoffset + horzdir.x * zoffset;
    double dx=endPosition.x - cx;
    double dy=endPosition.y - cy;
    double dz=endPosition.z - cz;
    double ratio=Math.sqrt(dx * dx + dy * dy + dz * dz);
    while (Math.abs(cx - endPosition.x) > Math.abs(dx / ratio)) {
      this.worldObj.spawnParticle(""String_Node_Str"",cx,cy,cz,0.0D,0.0D,0.0D);
      cx+=dx * 0.1 / ratio;
      cy+=dy * 0.1 / ratio;
      cz+=dz * 0.1 / ratio;
    }
  }
}",0.9933422103861518
170008,"@Override public int getEntityLifespan(ItemStack itemStack,World world){
  if (itemStack != null && itemStack.getItemDamage() == types.BULLETINF.ordinal()) {
    return 40;
  }
  return 6000;
}","@Override public int getEntityLifespan(ItemStack itemStack,World world){
  if (itemStack != null && itemStack.getItemDamage() == types.BULLETINF.ordinal()) {
    return 40;
  }
  return super.getEntityLifespan(itemStack,world);
}",0.8957345971563981
170009,"public void renderBlockGravity(Block par1Block,int metadata,RenderBlocks renderer){
  float var6=0.5F;
  float var7=1.0F;
  float var8=0.8F;
  float var9=0.6F;
  Tessellator tess=Tessellator.instance;
  tess.startDrawingQuads();
  float var12=1.0F;
  tess.setColorOpaque_F(var6 * var12,var6 * var12,var6 * var12);
  renderer.renderFaceYNeg(par1Block,-0.5D,-0.5D,-0.5D,par1Block.getIcon(0,metadata));
  tess.setColorOpaque_F(var7 * var12,var7 * var12,var7 * var12);
  renderer.renderFaceYPos(par1Block,-0.5D,-0.5D,-0.5D,par1Block.getIcon(1,metadata));
  tess.setColorOpaque_F(var8 * var12,var8 * var12,var8 * var12);
  renderer.renderFaceZNeg(par1Block,-0.5D,-0.5D,-0.5D,par1Block.getIcon(2,metadata));
  tess.setColorOpaque_F(var8 * var12,var8 * var12,var8 * var12);
  renderer.renderFaceZPos(par1Block,-0.5D,-0.5D,-0.5D,par1Block.getIcon(3,metadata));
  tess.setColorOpaque_F(var9 * var12,var9 * var12,var9 * var12);
  renderer.renderFaceXNeg(par1Block,-0.5D,-0.5D,-0.5D,par1Block.getIcon(4,metadata));
  tess.setColorOpaque_F(var9 * var12,var9 * var12,var9 * var12);
  renderer.renderFaceXPos(par1Block,-0.5D,-0.5D,-0.5D,par1Block.getIcon(5,metadata));
  tess.draw();
}","public void renderBlockGravity(Block block,int metadata,RenderBlocks renderer){
  float var6=0.5F;
  float var7=1.0F;
  float var8=0.8F;
  float var9=0.6F;
  Tessellator tess=Tessellator.instance;
  tess.startDrawingQuads();
  float var12=1.0F;
  tess.setColorOpaque_F(var6 * var12,var6 * var12,var6 * var12);
  renderer.renderFaceYNeg(block,-0.5D,-0.5D,-0.5D,renderer.getBlockIconFromSideAndMetadata(block,0,metadata));
  tess.setColorOpaque_F(var7 * var12,var7 * var12,var7 * var12);
  renderer.renderFaceYPos(block,-0.5D,-0.5D,-0.5D,renderer.getBlockIconFromSideAndMetadata(block,1,metadata));
  tess.setColorOpaque_F(var8 * var12,var8 * var12,var8 * var12);
  renderer.renderFaceZNeg(block,-0.5D,-0.5D,-0.5D,renderer.getBlockIconFromSideAndMetadata(block,2,metadata));
  tess.setColorOpaque_F(var8 * var12,var8 * var12,var8 * var12);
  renderer.renderFaceZPos(block,-0.5D,-0.5D,-0.5D,renderer.getBlockIconFromSideAndMetadata(block,3,metadata));
  tess.setColorOpaque_F(var9 * var12,var9 * var12,var9 * var12);
  renderer.renderFaceXNeg(block,-0.5D,-0.5D,-0.5D,renderer.getBlockIconFromSideAndMetadata(block,4,metadata));
  tess.setColorOpaque_F(var9 * var12,var9 * var12,var9 * var12);
  renderer.renderFaceXPos(block,-0.5D,-0.5D,-0.5D,renderer.getBlockIconFromSideAndMetadata(block,5,metadata));
  tess.draw();
}",0.7572347266881029
170010,"@Init public void init(FMLInitializationEvent event){
  if (!isInit) {
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestBlock(""String_Node_Str"",0);
    BasicComponents.requestBlock(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestBlock(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.register(this,this.getChannel());
    isInit=true;
  }
}","@Init public void init(FMLInitializationEvent event){
  if (!isInit) {
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestBlock(""String_Node_Str"",0);
    BasicComponents.requestBlock(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestBlock(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.requestItem(""String_Node_Str"",0);
    BasicComponents.register(this,this.getChannel());
    isInit=true;
  }
}",0.9740634005763688
170011,"@PreInit public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + TranslationHelper.loadLanguages(YU_YAN_PATH,YU_YAN) + ""String_Node_Str"");
    ZhuYaoBase.CONFIGURATION.load();
    PotionRadiation.INSTANCE.getId();
    ZAI_KUAI=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true).getBoolean(true);
    DAO_DAN_ZUI_YUAN=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",10000).getInt(10000);
    bLiu=new BLiu(ICBM.BLOCK_ID_PREFIX + 0);
    itDu=new ItICBM(ICBM.ITEM_ID_PREFIX + 0,""String_Node_Str"");
    itLiu=new ItICBM(ICBM.ITEM_ID_PREFIX + 1,""String_Node_Str"");
    GameRegistry.registerBlock(bLiu,""String_Node_Str"");
    liuGenData=new GenLiu(""String_Node_Str"",""String_Node_Str"",new ItemStack(bLiu),0,40,20,4).enable(ZhuYaoBase.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      bFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
 else {
      bFuShe=new BlockRadioactive(ZhuYaoBase.CONFIGURATION.getBlock(""String_Node_Str"",BlockRadioactive.RECOMMENDED_ID).getInt()).setUnlocalizedName(PREFIX + ""String_Node_Str"");
      GameRegistry.registerBlock(bFuShe,""String_Node_Str"");
      OreDictionary.registerOre(""String_Node_Str"",bFuShe);
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    ZhuYaoBase.CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itLiu);
    OreGenerator.addOre(liuGenData);
    GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
    isPreInit=true;
  }
}","@PreInit public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + TranslationHelper.loadLanguages(YU_YAN_PATH,YU_YAN) + ""String_Node_Str"");
    ZhuYaoBase.CONFIGURATION.load();
    PotionRadiation.INSTANCE.getId();
    ZAI_KUAI=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true).getBoolean(true);
    DAO_DAN_ZUI_YUAN=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",10000).getInt(10000);
    bLiu=new BLiu(ICBM.BLOCK_ID_PREFIX + 0);
    bJia=new BlockMulti(ZhuYaoBase.CONFIGURATION.getBlock(""String_Node_Str"",ICBM.BLOCK_ID_PREFIX + 6).getInt()).setTextureName(ZhuYaoBase.PREFIX + ""String_Node_Str"").setChannel(this.getChannel());
    itDu=new ItICBM(ICBM.ITEM_ID_PREFIX + 0,""String_Node_Str"");
    itLiu=new ItICBM(ICBM.ITEM_ID_PREFIX + 1,""String_Node_Str"");
    GameRegistry.registerBlock(bLiu,""String_Node_Str"");
    GameRegistry.registerBlock(bJia,""String_Node_Str"");
    liuGenData=new GenLiu(""String_Node_Str"",""String_Node_Str"",new ItemStack(bLiu),0,40,20,4).enable(ZhuYaoBase.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      bFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
 else {
      bFuShe=new BlockRadioactive(ZhuYaoBase.CONFIGURATION.getBlock(""String_Node_Str"",BlockRadioactive.RECOMMENDED_ID).getInt()).setUnlocalizedName(PREFIX + ""String_Node_Str"");
      GameRegistry.registerBlock(bFuShe,""String_Node_Str"");
      OreDictionary.registerOre(""String_Node_Str"",bFuShe);
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itLiu);
    OreGenerator.addOre(liuGenData);
    GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
    isPreInit=true;
  }
}",0.9364467982667308
170012,"public BICBM(int id,String name,Material material){
  super(ZhuYaoBase.CONFIGURATION.getBlock(name,id).getInt(),material);
  this.setUnlocalizedName(ZhuYaoBase.PREFIX + name);
  this.setCreativeTab(ICBMTab.INSTANCE);
}","public BICBM(int id,String name,Material material){
  super(ZhuYaoBase.CONFIGURATION.getBlock(name,id).getInt(id),material);
  this.setUnlocalizedName(ZhuYaoBase.PREFIX + name);
  this.setCreativeTab(ICBMTab.INSTANCE);
}",0.9954337899543378
170013,"@Override @PreInit public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ZhuYaoGangShao.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  ZhuYaoBase.CONFIGURATION.load();
  blockTurret=new BlockTurret(BLOCK_ID_PREFIX);
  blockPlatform=new BlockTurretPlatform(BLOCK_ID_PREFIX + 1);
  blockFake=new BlockMulti(ZhuYaoBase.CONFIGURATION.getBlock(""String_Node_Str"",BLOCK_ID_PREFIX + 2).getInt());
  itemAmmo=new ItemAmmo(ITEM_ID_PREFIX + 1);
  ZhuYaoBase.CONFIGURATION.save();
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  GameRegistry.registerBlock(blockTurret,ItemBlockTurret.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockPlatform,""String_Node_Str"");
  GameRegistry.registerBlock(blockFake,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EntityFakeMountable.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityFakeMountable.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  ICBMTab.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}","@Override @PreInit public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ZhuYaoGangShao.proxy);
  MinecraftForge.EVENT_BUS.register(this);
  ZhuYaoBase.CONFIGURATION.load();
  blockTurret=new BlockTurret(BLOCK_ID_PREFIX);
  blockPlatform=new BlockTurretPlatform(BLOCK_ID_PREFIX + 1);
  itemAmmo=new ItemAmmo(ITEM_ID_PREFIX + 1);
  ZhuYaoBase.CONFIGURATION.save();
  bulletShell=new ItemStack(itemAmmo,1,0);
  conventionalBullet=new ItemStack(itemAmmo,1,1);
  railgunBullet=new ItemStack(itemAmmo,1,2);
  antimatterBullet=new ItemStack(itemAmmo,1,3);
  GameRegistry.registerBlock(blockTurret,ItemBlockTurret.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockPlatform,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EntityFakeMountable.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EntityFakeMountable.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  ICBMTab.itemStack=new ItemStack(blockTurret);
  proxy.preInit();
}",0.6387702818104184
170014,"@Override public void onCreate(Vector3 position){
  this.worldObj.setBlock(position.intX(),position.intY() + 1,position.intZ(),ZhuYaoGangShao.blockFake.blockID,0,2);
  ((TileEntityMulti)this.worldObj.getBlockTileEntity(position.intX(),position.intY() + 1,position.intZ())).setMainBlock(position);
}","@Override public void onCreate(Vector3 position){
  this.worldObj.setBlock(position.intX(),position.intY() + 1,position.intZ(),ZhuYaoBase.bJia.blockID,0,2);
  ((TileEntityMulti)this.worldObj.getBlockTileEntity(position.intX(),position.intY() + 1,position.intZ())).setMainBlock(position);
}",0.9540034071550256
170015,"@Override public void onUpdate(){
  if (this.mountedPlayer != null) {
    if (this.mountedPlayer.rotationPitch > 30)     this.mountedPlayer.rotationPitch=30;
    if (this.mountedPlayer.rotationPitch < -45)     this.mountedPlayer.rotationPitch=-45;
    this.wantedRotationPitch=this.mountedPlayer.rotationPitch;
    this.wantedRotationYaw=this.mountedPlayer.rotationYaw;
    this.currentRotationPitch=this.wantedRotationPitch * 0.0175f;
    this.currentRotationYaw=this.wantedRotationYaw * 0.0175f;
  }
 else   if (this.entityFake != null) {
    this.entityFake.setDead();
    this.entityFake=null;
  }
  if (this.getPlatform() != null) {
    if (this.redstonePowerOn && this.canActivateWeapon() && this.gunChargingTicks == 0) {
      this.onWeaponActivated();
    }
    if (this.gunChargingTicks > 0) {
      this.gunChargingTicks++;
      if (this.gunChargingTicks >= 70) {
        while (this.explosionDepth > 0) {
          MovingObjectPosition objectMouseOver=this.rayTrace(2000);
          if (objectMouseOver != null) {
            if (!ZhuYaoGangShao.isProtected(this.worldObj,new Vector3(objectMouseOver),ZhuYaoGangShao.FLAG_RAILGUN) && objectMouseOver.typeOfHit == EnumMovingObjectType.TILE) {
              if (this.isAntimatter) {
                int radius=50;
                AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(objectMouseOver.blockX - radius,objectMouseOver.blockY - radius,objectMouseOver.blockZ - radius,objectMouseOver.blockX + radius,objectMouseOver.blockY + radius,objectMouseOver.blockZ + radius);
                List<Entity> missilesNearby=worldObj.getEntitiesWithinAABB(Entity.class,bounds);
                for (                Entity entity : missilesNearby) {
                  if (entity instanceof IExplosive) {
                    entity.setDead();
                  }
                }
              }
              if (this.worldObj.getBlockId(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ) != Block.bedrock.blockID) {
                this.worldObj.setBlock(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ,0,0,2);
              }
              this.worldObj.newExplosion(this.mountedPlayer,objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ,explosionSize,true,true);
            }
          }
          this.explosionDepth--;
        }
        if (!this.worldObj.isRemote) {
          PacketManager.sendPacketToClients(PacketManager.getPacket(ZhuYaoGangShao.CHANNEL,this,3),this.worldObj,new Vector3(this),50);
        }
        this.gunChargingTicks=0;
      }
    }
    if (!this.worldObj.isRemote) {
      if (this.ticks % 600 == 0) {
        this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
      }
    }
 else     if (this.endTicks > 0) {
      Vector3 muzzilePosition=this.getMuzzle();
      this.worldObj.spawnParticle(""String_Node_Str"",muzzilePosition.x,muzzilePosition.y,muzzilePosition.z,0,0,0);
      this.worldObj.spawnParticle(""String_Node_Str"",muzzilePosition.x,muzzilePosition.y,muzzilePosition.z,0,0,0);
      MovingObjectPosition objectMouseOver=this.rayTrace(2000);
      if (objectMouseOver != null) {
        this.drawParticleStreamTo(Vector3.add(new Vector3(objectMouseOver),0.5));
      }
      this.endTicks--;
    }
  }
}","@Override public void onUpdate(){
  if (this.mountedPlayer != null) {
    if (this.mountedPlayer.rotationPitch > 30)     this.mountedPlayer.rotationPitch=30;
    if (this.mountedPlayer.rotationPitch < -45)     this.mountedPlayer.rotationPitch=-45;
    this.wantedRotationPitch=this.mountedPlayer.rotationPitch;
    this.wantedRotationYaw=this.mountedPlayer.rotationYaw;
    this.currentRotationPitch=this.wantedRotationPitch * 0.0175f;
    this.currentRotationYaw=this.wantedRotationYaw * 0.0175f;
    System.out.println(""String_Node_Str"" + this.worldObj.isRemote);
  }
 else   if (this.entityFake != null) {
    this.entityFake.setDead();
    this.entityFake=null;
  }
  if (this.getPlatform() != null) {
    if (this.redstonePowerOn && this.canActivateWeapon() && this.gunChargingTicks == 0) {
      this.onWeaponActivated();
    }
    if (this.gunChargingTicks > 0) {
      this.gunChargingTicks++;
      if (this.gunChargingTicks >= 70) {
        while (this.explosionDepth > 0) {
          MovingObjectPosition objectMouseOver=this.rayTrace(2000);
          if (objectMouseOver != null) {
            if (!ZhuYaoGangShao.isProtected(this.worldObj,new Vector3(objectMouseOver),ZhuYaoGangShao.FLAG_RAILGUN) && objectMouseOver.typeOfHit == EnumMovingObjectType.TILE) {
              if (this.isAntimatter) {
                int radius=50;
                AxisAlignedBB bounds=AxisAlignedBB.getBoundingBox(objectMouseOver.blockX - radius,objectMouseOver.blockY - radius,objectMouseOver.blockZ - radius,objectMouseOver.blockX + radius,objectMouseOver.blockY + radius,objectMouseOver.blockZ + radius);
                List<Entity> missilesNearby=worldObj.getEntitiesWithinAABB(Entity.class,bounds);
                for (                Entity entity : missilesNearby) {
                  if (entity instanceof IExplosive) {
                    entity.setDead();
                  }
                }
              }
              if (this.worldObj.getBlockId(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ) != Block.bedrock.blockID) {
                this.worldObj.setBlock(objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ,0,0,2);
              }
              this.worldObj.newExplosion(this.mountedPlayer,objectMouseOver.blockX,objectMouseOver.blockY,objectMouseOver.blockZ,explosionSize,true,true);
            }
          }
          this.explosionDepth--;
        }
        if (!this.worldObj.isRemote) {
          PacketManager.sendPacketToClients(PacketManager.getPacket(ZhuYaoGangShao.CHANNEL,this,3),this.worldObj,new Vector3(this),50);
        }
        this.gunChargingTicks=0;
      }
    }
    if (!this.worldObj.isRemote) {
      if (this.ticks % 600 == 0) {
        this.worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
      }
    }
 else     if (this.endTicks > 0) {
      Vector3 muzzilePosition=this.getMuzzle();
      this.worldObj.spawnParticle(""String_Node_Str"",muzzilePosition.x,muzzilePosition.y,muzzilePosition.z,0,0,0);
      this.worldObj.spawnParticle(""String_Node_Str"",muzzilePosition.x,muzzilePosition.y,muzzilePosition.z,0,0,0);
      MovingObjectPosition objectMouseOver=this.rayTrace(2000);
      if (objectMouseOver != null) {
        this.drawParticleStreamTo(Vector3.add(new Vector3(objectMouseOver),0.5));
      }
      this.endTicks--;
    }
  }
}",0.9897249924448474
170016,"@Override public void onUpdate(){
  if (this.blockID >= Block.blocksList.length) {
    this.setDead();
    return;
  }
  if (this.posY > 400 || Block.blocksList[this.blockID] == null || this.blockID == ZhuYaoZhaPin.bJia.blockID || this.blockID == Block.pistonExtension.blockID || this.blockID == Block.waterMoving.blockID || this.blockID == Block.lavaMoving.blockID) {
    this.setDead();
    return;
  }
  this.motionY-=gravity;
  if (this.isCollided) {
    this.pushOutOfBlocks(this.posX,(this.boundingBox.minY + this.boundingBox.maxY) / 2.0D,this.posZ);
  }
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  if (this.yawChange > 0) {
    this.rotationYaw+=this.yawChange;
    this.yawChange-=2;
  }
  if (this.pitchChange > 0) {
    this.rotationPitch+=this.pitchChange;
    this.pitchChange-=2;
  }
  if ((this.onGround && this.ticksExisted > 20) || this.ticksExisted > 20 * 120) {
    this.setBlock();
    return;
  }
  this.ticksExisted++;
}","@Override public void onUpdate(){
  if (this.blockID >= Block.blocksList.length) {
    this.setDead();
    return;
  }
  if (this.posY > 400 || Block.blocksList[this.blockID] == null || this.blockID == ZhuYaoBase.bJia.blockID || this.blockID == Block.pistonExtension.blockID || this.blockID == Block.waterMoving.blockID || this.blockID == Block.lavaMoving.blockID) {
    this.setDead();
    return;
  }
  this.motionY-=gravity;
  if (this.isCollided) {
    this.pushOutOfBlocks(this.posX,(this.boundingBox.minY + this.boundingBox.maxY) / 2.0D,this.posZ);
  }
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  if (this.yawChange > 0) {
    this.rotationYaw+=this.yawChange;
    this.yawChange-=2;
  }
  if (this.pitchChange > 0) {
    this.rotationPitch+=this.pitchChange;
    this.pitchChange-=2;
  }
  if ((this.onGround && this.ticksExisted > 20) || this.ticksExisted > 20 * 120) {
    this.setBlock();
    return;
  }
  this.ticksExisted++;
}",0.994775339602926
170017,"@Override @PreInit public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ZhuYaoZhaPin.proxy);
  ZhuYaoBase.CONFIGURATION.load();
  bZhaDan=new BZhaDan(ICBM.BLOCK_ID_PREFIX + 3);
  bJiQi=new BJiQi(ICBM.BLOCK_ID_PREFIX + 4);
  bJia=new BlockMulti(ICBM.BLOCK_ID_PREFIX + 6).setTextureName(ZhuYaoBase.PREFIX + ""String_Node_Str"");
  itDaoDan=new ItDaoDan(ICBM.ITEM_ID_PREFIX + 3,""String_Node_Str"");
  itTeBieDaoDan=new ItTeBieDaoDan(ICBM.ITEM_ID_PREFIX + 4);
  itJieJa=new ItJieJa(ICBM.ITEM_ID_PREFIX + 5);
  itLeiDaQiang=new ItLeiDaQiang(ICBM.ITEM_ID_PREFIX + 6);
  itYaoKong=new ItYaoKong(ICBM.ITEM_ID_PREFIX + 7);
  itLeiSheZhiBiao=new ItLeiSheZhiBiao(ICBM.ITEM_ID_PREFIX + 8);
  itFaSheQi=new ItFaSheQi(ICBM.ITEM_ID_PREFIX + 11);
  itShouLiuDan=new ItShouLiuDan(ICBM.ITEM_ID_PREFIX + 12);
  itChe=new ItChe(ICBM.ITEM_ID_PREFIX + 11);
  PDaDu.INSTANCE=new PDaDu(22,true,5149489,""String_Node_Str"");
  PChuanRanDu.INSTANCE=new PChuanRanDu(23,false,5149489,""String_Node_Str"");
  PDongShang.INSTANCE=new PDongShang(24,false,5149489,""String_Node_Str"");
  ZhuYaoBase.CONFIGURATION.save();
  ICBMTab.itemStack=new ItemStack(ZhuYaoZhaPin.bZhaDan);
  BlockDispenser.dispenseBehaviorRegistry.putObject(ZhuYaoZhaPin.itShouLiuDan,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EShouLiuDan entity=new EShouLiuDan(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(ZhuYaoZhaPin.itChe,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EChe var22=new EChe(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  GameRegistry.registerBlock(bZhaDan,IBZhaDan.class,""String_Node_Str"");
  GameRegistry.registerBlock(bJiQi,IBJiQi.class,""String_Node_Str"");
  GameRegistry.registerBlock(bJia,""String_Node_Str"");
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() != null) {
          ((EDaoDan)ticket.getEntity()).daoDanInit(ticket);
        }
      }
    }
  }
);
  ICBM.explosionManager=ZhaPin.class;
  ZhuYaoZhaPin.proxy.preInit();
}","@Override @PreInit public void preInit(FMLPreInitializationEvent event){
  super.preInit(event);
  NetworkRegistry.instance().registerGuiHandler(this,ZhuYaoZhaPin.proxy);
  ZhuYaoBase.CONFIGURATION.load();
  bZhaDan=new BZhaDan(ICBM.BLOCK_ID_PREFIX + 3);
  bJiQi=new BJiQi(ICBM.BLOCK_ID_PREFIX + 4);
  itDaoDan=new ItDaoDan(ICBM.ITEM_ID_PREFIX + 3,""String_Node_Str"");
  itTeBieDaoDan=new ItTeBieDaoDan(ICBM.ITEM_ID_PREFIX + 4);
  itJieJa=new ItJieJa(ICBM.ITEM_ID_PREFIX + 5);
  itLeiDaQiang=new ItLeiDaQiang(ICBM.ITEM_ID_PREFIX + 6);
  itYaoKong=new ItYaoKong(ICBM.ITEM_ID_PREFIX + 7);
  itLeiSheZhiBiao=new ItLeiSheZhiBiao(ICBM.ITEM_ID_PREFIX + 8);
  itFaSheQi=new ItFaSheQi(ICBM.ITEM_ID_PREFIX + 11);
  itShouLiuDan=new ItShouLiuDan(ICBM.ITEM_ID_PREFIX + 12);
  itChe=new ItChe(ICBM.ITEM_ID_PREFIX + 11);
  PDaDu.INSTANCE=new PDaDu(22,true,5149489,""String_Node_Str"");
  PChuanRanDu.INSTANCE=new PChuanRanDu(23,false,5149489,""String_Node_Str"");
  PDongShang.INSTANCE=new PDongShang(24,false,5149489,""String_Node_Str"");
  ZhuYaoBase.CONFIGURATION.save();
  ICBMTab.itemStack=new ItemStack(ZhuYaoZhaPin.bZhaDan);
  BlockDispenser.dispenseBehaviorRegistry.putObject(ZhuYaoZhaPin.itShouLiuDan,new IBehaviorDispenseItem(){
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing enumFacing=EnumFacing.getFront(blockSource.getBlockMetadata());
        EShouLiuDan entity=new EShouLiuDan(world,new Vector3(x,y,z),itemStack.getItemDamage());
        entity.setThrowableHeading(enumFacing.getFrontOffsetX(),0.10000000149011612D,enumFacing.getFrontOffsetZ(),0.5F,1.0F);
        world.spawnEntityInWorld(entity);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  BlockDispenser.dispenseBehaviorRegistry.putObject(ZhuYaoZhaPin.itChe,new IBehaviorDispenseItem(){
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior=new BehaviorDefaultDispenseItem();
    @Override public ItemStack dispense(    IBlockSource blockSource,    ItemStack itemStack){
      World world=blockSource.getWorld();
      if (!world.isRemote) {
        int x=blockSource.getXInt();
        int y=blockSource.getYInt();
        int z=blockSource.getZInt();
        EnumFacing var3=EnumFacing.getFront(blockSource.getBlockMetadata());
        World var4=blockSource.getWorld();
        double var5=blockSource.getX() + var3.getFrontOffsetX() * 1.125F;
        double var7=blockSource.getY();
        double var9=blockSource.getZ() + var3.getFrontOffsetZ() * 1.125F;
        int var11=blockSource.getXInt() + var3.getFrontOffsetX();
        int var12=blockSource.getYInt();
        int var13=blockSource.getZInt() + var3.getFrontOffsetZ();
        int var14=var4.getBlockId(var11,var12,var13);
        double var15;
        if (BlockRailBase.isRailBlock(var14)) {
          var15=0.0D;
        }
 else {
          if (var14 != 0 || !BlockRailBase.isRailBlock(var4.getBlockId(var11,var12 - 1,var13))) {
            return this.defaultItemDispenseBehavior.dispense(blockSource,itemStack);
          }
          var15=-1.0D;
        }
        EChe var22=new EChe(world,var5,var7 + var15,var9,itemStack.getItemDamage());
        world.spawnEntityInWorld(var22);
        world.playAuxSFX(1000,x,y,z,0);
      }
      itemStack.stackSize--;
      return itemStack;
    }
  }
);
  GameRegistry.registerBlock(bZhaDan,IBZhaDan.class,""String_Node_Str"");
  GameRegistry.registerBlock(bJiQi,IBJiQi.class,""String_Node_Str"");
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new LoadingCallback(){
    @Override public void ticketsLoaded(    List<Ticket> tickets,    World world){
      for (      Ticket ticket : tickets) {
        if (ticket.getEntity() != null) {
          ((EDaoDan)ticket.getEntity()).daoDanInit(ticket);
        }
      }
    }
  }
);
  ICBM.explosionManager=ZhaPin.class;
  ZhuYaoZhaPin.proxy.preInit();
}",0.9810546639314588
170018,"@Override public void onCreate(Vector3 position){
  ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,1,0)),new Vector3(this));
}","@Override public void onCreate(Vector3 position){
  ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,1,0)),new Vector3(this));
}",0.9748427672955976
170019,"@Override public void onCreate(Vector3 position){
  if (this.orientation == 3 || this.orientation == 2) {
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(1,0,0)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(1,1,0)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(1,2,0)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(-1,0,0)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(-1,1,0)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(-1,2,0)),new Vector3(this));
  }
 else {
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,0,1)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,1,1)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,2,1)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,0,-1)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,1,-1)),new Vector3(this));
    ZhuYaoZhaPin.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,2,-1)),new Vector3(this));
  }
}","@Override public void onCreate(Vector3 position){
  if (this.orientation == 3 || this.orientation == 2) {
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(1,0,0)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(1,1,0)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(1,2,0)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(-1,0,0)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(-1,1,0)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(-1,2,0)),new Vector3(this));
  }
 else {
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,0,1)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,1,1)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,2,1)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,0,-1)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,1,-1)),new Vector3(this));
    ZhuYaoBase.bJia.makeFakeBlock(this.worldObj,Vector3.add(position,new Vector3(0,2,-1)),new Vector3(this));
  }
}",0.958592132505176
170020,"@Override public void onCreate(Vector3 position){
  this.worldObj.setBlock(position.intX(),position.intY() + 1,position.intZ(),ZhuYaoZhaPin.bJia.blockID,0,2);
  ((TileEntityMulti)this.worldObj.getBlockTileEntity(position.intX(),position.intY() + 1,position.intZ())).setMainBlock(position);
  this.worldObj.setBlock(position.intX(),position.intY() + 2,position.intZ(),ZhuYaoZhaPin.bJia.blockID,0,2);
  ((TileEntityMulti)this.worldObj.getBlockTileEntity(position.intX(),position.intY() + 2,position.intZ())).setMainBlock(position);
}","@Override public void onCreate(Vector3 position){
  this.worldObj.setBlock(position.intX(),position.intY() + 1,position.intZ(),ZhuYaoBase.bJia.blockID,0,2);
  ((TileEntityMulti)this.worldObj.getBlockTileEntity(position.intX(),position.intY() + 1,position.intZ())).setMainBlock(position);
  this.worldObj.setBlock(position.intX(),position.intY() + 2,position.intZ(),ZhuYaoBase.bJia.blockID,0,2);
  ((TileEntityMulti)this.worldObj.getBlockTileEntity(position.intX(),position.intY() + 2,position.intZ())).setMainBlock(position);
}",0.9810964083175804
170021,"@Override public void onCreate(Vector3 position){
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(0,1,0),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(1,1,0),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(-1,1,0),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(0,1,1),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(0,1,-1),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(1,1,-1),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(-1,1,1),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(1,1,1),position),new Vector3(this));
  ZhuYaoZhaPin.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(-1,1,-1),position),new Vector3(this));
}","@Override public void onCreate(Vector3 position){
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(0,1,0),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(1,1,0),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(-1,1,0),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(0,1,1),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(0,1,-1),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(1,1,-1),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(-1,1,1),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(1,1,1),position),new Vector3(this));
  ZhuYaoBase.bJia.makeFakeBlock(worldObj,Vector3.add(new Vector3(-1,1,-1),position),new Vector3(this));
}",0.9542682926829268
170022,"@PreInit public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + TranslationHelper.loadLanguages(YU_YAN_PATH,YU_YAN) + ""String_Node_Str"");
    ZhuYaoBase.CONFIGURATION.load();
    ZAI_KUAI=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true).getBoolean(true);
    DAO_DAN_ZUI_YUAN=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",10000).getInt(10000);
    bLiu=new BLiu(ICBM.BLOCK_ID_PREFIX + 0);
    itDu=new ItICBM(ICBM.ITEM_ID_PREFIX + 0,""String_Node_Str"");
    itLiu=new ItICBM(ICBM.ITEM_ID_PREFIX + 1,""String_Node_Str"");
    GameRegistry.registerBlock(bLiu,""String_Node_Str"");
    liuGenData=new GenLiu(""String_Node_Str"",""String_Node_Str"",new ItemStack(bLiu),0,40,20,4).enable(ZhuYaoBase.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      bFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
 else {
      bFuShe=new BlockRadioactive(ZhuYaoBase.CONFIGURATION.getBlock(""String_Node_Str"",BlockRadioactive.RECOMMENDED_ID).getInt()).setUnlocalizedName(PREFIX + ""String_Node_Str"");
      GameRegistry.registerBlock(bFuShe,""String_Node_Str"");
      OreDictionary.registerOre(""String_Node_Str"",bFuShe);
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    ZhuYaoBase.CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itLiu);
    OreGenerator.addOre(liuGenData);
    GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
    isPreInit=true;
  }
}","@PreInit public void preInit(FMLPreInitializationEvent event){
  if (!isPreInit) {
    Modstats.instance().getReporter().registerMod(INSTANCE);
    MinecraftForge.EVENT_BUS.register(INSTANCE);
    LOGGER.fine(""String_Node_Str"" + TranslationHelper.loadLanguages(YU_YAN_PATH,YU_YAN) + ""String_Node_Str"");
    ZhuYaoBase.CONFIGURATION.load();
    PotionRadiation.INSTANCE.getId();
    ZAI_KUAI=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true).getBoolean(true);
    DAO_DAN_ZUI_YUAN=ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",10000).getInt(10000);
    bLiu=new BLiu(ICBM.BLOCK_ID_PREFIX + 0);
    itDu=new ItICBM(ICBM.ITEM_ID_PREFIX + 0,""String_Node_Str"");
    itLiu=new ItICBM(ICBM.ITEM_ID_PREFIX + 1,""String_Node_Str"");
    GameRegistry.registerBlock(bLiu,""String_Node_Str"");
    liuGenData=new GenLiu(""String_Node_Str"",""String_Node_Str"",new ItemStack(bLiu),0,40,20,4).enable(ZhuYaoBase.CONFIGURATION);
    if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
      bFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
      LOGGER.fine(""String_Node_Str"");
    }
 else {
      bFuShe=new BlockRadioactive(ZhuYaoBase.CONFIGURATION.getBlock(""String_Node_Str"",BlockRadioactive.RECOMMENDED_ID).getInt()).setUnlocalizedName(PREFIX + ""String_Node_Str"");
      GameRegistry.registerBlock(bFuShe,""String_Node_Str"");
      OreDictionary.registerOre(""String_Node_Str"",bFuShe);
      LOGGER.fine(""String_Node_Str"");
    }
    Block.obsidian.setResistance(ZhuYaoBase.CONFIGURATION.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",45).getInt(45));
    LOGGER.fine(""String_Node_Str"" + Block.obsidian.getExplosionResistance(null));
    ZhuYaoBase.CONFIGURATION.save();
    OreDictionary.registerOre(""String_Node_Str"",itLiu);
    OreGenerator.addOre(liuGenData);
    GameRegistry.registerTileEntity(TileEntityMulti.class,""String_Node_Str"");
    isPreInit=true;
  }
}",0.9901910170366546
170023,"@Override public void onCraftGuiClosed(EntityPlayer par1EntityPlayer){
  this.tileEntity.closeChest();
  super.onCraftGuiClosed(par1EntityPlayer);
}","@Override public void onCraftGuiClosed(EntityPlayer par1EntityPlayer){
  this.tileEntity.playersUsing.remove(par1EntityPlayer);
  super.onCraftGuiClosed(par1EntityPlayer);
}",0.8785046728971962
170024,"public ContainerTurretPlatform(InventoryPlayer player,TileEntityTurretPlatform tileEntity){
  this.tileEntity=tileEntity;
  int row;
  for (row=0; row < 3; row++) {
    for (int column=0; column < 4; column++) {
      this.addSlotToContainer(new SlotAmmunition(tileEntity,column + row * 4,8 + column * 18,40 + row * 18));
    }
  }
  for (int i=0; i < 4; i++) {
    this.addSlotToContainer(new Slot(tileEntity,i + TileEntityTurretPlatform.UPGRADE_START_INDEX,89 + i * 18,77));
  }
  for (row=0; row < 3; ++row) {
    for (int slot=0; slot < 9; ++slot) {
      this.addSlotToContainer(new Slot(player,slot + row * 9 + 9,8 + slot * 18,97 + row * 18));
    }
  }
  for (row=0; row < 9; ++row) {
    this.addSlotToContainer(new Slot(player,row,8 + row * 18,155));
  }
  this.tileEntity.openChest();
}","public ContainerTurretPlatform(InventoryPlayer inventoryPlayer,TileEntityTurretPlatform tileEntity){
  this.tileEntity=tileEntity;
  int row;
  for (row=0; row < 3; row++) {
    for (int column=0; column < 4; column++) {
      this.addSlotToContainer(new SlotAmmunition(tileEntity,column + row * 4,8 + column * 18,40 + row * 18));
    }
  }
  for (int i=0; i < 4; i++) {
    this.addSlotToContainer(new Slot(tileEntity,i + TileEntityTurretPlatform.UPGRADE_START_INDEX,89 + i * 18,77));
  }
  for (row=0; row < 3; ++row) {
    for (int slot=0; slot < 9; ++slot) {
      this.addSlotToContainer(new Slot(inventoryPlayer,slot + row * 9 + 9,8 + slot * 18,97 + row * 18));
    }
  }
  for (row=0; row < 9; ++row) {
    this.addSlotToContainer(new Slot(inventoryPlayer,row,8 + row * 18,155));
  }
  this.tileEntity.playersUsing.add(inventoryPlayer.player);
}",0.9514563106796116
170025,"@Override public void openChest(){
  this.playersUsing++;
}","@Override public void openChest(){
}",0.7578947368421053
170026,"@Override public void closeChest(){
  this.playersUsing--;
}","@Override public void closeChest(){
}",0.7628865979381443
170027,"@Override public void attackTargetLiving(int meta,TileEntityTurretBase turret,Entity target,boolean hit){
  if (turret == null || turret.getPlatform() == null) {
    return;
  }
  if (meta == types.BULLET.ordinal()) {
    if (target instanceof EntityLiving) {
      if (turret.worldObj.rand.nextFloat() > 0.1) {
        ((EntityLiving)target).attackEntityFrom(DamageSource.setExplosionSource(null),5);
      }
      Vector3 look=LookHelper.getDeltaPositionFromRotation(turret.wantedRotationYaw,turret.wantedRotationPitch);
      look.multiply(0.3);
      ((EntityLiving)target).knockBack(null,0,look.intX(),look.intZ());
    }
    if (!turret.worldObj.isRemote && turret.worldObj.rand.nextFloat() > 0.8) {
      Vector3 spawnPos=turret.getMuzzle();
      EntityItem entityShell=new EntityItem(turret.worldObj,spawnPos.x,spawnPos.y,spawnPos.z,ZhuYaoGangShao.bulletShell.copy());
      entityShell.delayBeforeCanPickup=20;
      turret.worldObj.spawnEntityInWorld(entityShell);
    }
  }
}","@Override public void attackTargetLiving(int meta,TileEntityTurretBase turret,Entity target,boolean hit){
  if (turret == null || turret.getPlatform() == null) {
    return;
  }
  if (meta == types.BULLET.ordinal()) {
    if (target instanceof EntityLiving) {
      if (turret.worldObj.rand.nextFloat() > 0.1) {
        ((EntityLiving)target).attackEntityFrom(DamageSource.setExplosionSource(null),4);
      }
      Vector3 look=LookHelper.getDeltaPositionFromRotation(turret.wantedRotationYaw,turret.wantedRotationPitch);
      look.multiply(0.3);
      ((EntityLiving)target).knockBack(null,0,look.intX(),look.intZ());
    }
    if (!turret.worldObj.isRemote && turret.worldObj.rand.nextFloat() > 0.8) {
      Vector3 spawnPos=turret.getMuzzle();
      EntityItem entityShell=new EntityItem(turret.worldObj,spawnPos.x,spawnPos.y,spawnPos.z,ZhuYaoGangShao.bulletShell.copy());
      entityShell.delayBeforeCanPickup=20;
      turret.worldObj.spawnEntityInWorld(entityShell);
    }
  }
}",0.9989868287740628
170028,"@Override public void onWeaponActivated(){
  if (this.getPlatform() != null) {
    if (this.target instanceof EntityLiving && this.getPlatform().useAmmunition(ZhuYaoGangShao.conventionalBullet)) {
      if (this.worldObj.rand.nextFloat() > 0.1) {
        ((EntityLiving)this.target).attackEntityFrom(DamageSource.setExplosionSource(null),3);
      }
      Vector3 look=LookHelper.getDeltaPositionFromRotation(this.targetRotationYaw,this.targetRotationPitch);
      look.multiply(-3);
      ((EntityLiving)this.target).knockBack(null,0,look.intX(),look.intZ());
      this.getPlatform().wattsReceived-=this.getRequest();
      if (!this.worldObj.isRemote && this.worldObj.rand.nextFloat() > 0.1) {
        Vector3 spawnPos=this.getMuzzle();
        EntityItem entityShell=new EntityItem(this.worldObj,spawnPos.x,spawnPos.y,spawnPos.z,ZhuYaoGangShao.bulletShell.copy());
        entityShell.delayBeforeCanPickup=20;
        this.worldObj.spawnEntityInWorld(entityShell);
      }
      this.worldObj.playSoundEffect(this.xCoord,this.yCoord,this.zCoord,""String_Node_Str"",5F,1F);
    }
  }
}","@Override public void onWeaponActivated(){
  if (this.getPlatform() != null) {
    if (this.target instanceof EntityLiving && this.getPlatform().useAmmunition(ZhuYaoGangShao.conventionalBullet)) {
      if (this.worldObj.rand.nextFloat() > 0.1) {
        ((EntityLiving)this.target).attackEntityFrom(DamageSource.setExplosionSource(null),3);
      }
      Vector3 look=LookHelper.getDeltaPositionFromRotation(this.targetRotationYaw,this.targetRotationPitch);
      look.multiply(-3);
      ((EntityLiving)this.target).knockBack(null,0,look.intX(),look.intZ());
      this.getPlatform().wattsReceived-=this.getRequest();
      if (!this.worldObj.isRemote && this.worldObj.rand.nextFloat() > 0.8) {
        Vector3 spawnPos=this.getMuzzle();
        EntityItem entityShell=new EntityItem(this.worldObj,spawnPos.x,spawnPos.y,spawnPos.z,ZhuYaoGangShao.bulletShell.copy());
        entityShell.delayBeforeCanPickup=20;
        this.worldObj.spawnEntityInWorld(entityShell);
      }
      this.worldObj.playSoundEffect(this.xCoord,this.yCoord,this.zCoord,""String_Node_Str"",5F,1F);
    }
  }
}",0.9990791896869244
170029,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,int side){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (this.canBlockStay(world,x,y,z)) {
    if (tileEntity instanceof IRedstoneReceptor) {
      if (world.isBlockIndirectlyGettingPowered(x,y,z)) {
        ((IRedstoneReceptor)tileEntity).onPowerOn();
      }
 else {
        ((IRedstoneReceptor)tileEntity).onPowerOff();
      }
    }
  }
 else {
    if (tileEntity instanceof IMultiBlock) {
      ((IMultiBlock)tileEntity).onDestroy(tileEntity);
    }
    this.dropBlockAsItem(world,x,y,z,world.getBlockMetadata(x,y,z),0);
    world.setBlock(x,y,z,0,0,3);
  }
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,int side){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityTurretBase) {
    if (this.canBlockStay(world,x,y,z)) {
      if (tileEntity instanceof IRedstoneReceptor) {
        if (world.isBlockIndirectlyGettingPowered(x,y,z)) {
          ((IRedstoneReceptor)tileEntity).onPowerOn();
        }
 else {
          ((IRedstoneReceptor)tileEntity).onPowerOff();
        }
      }
    }
 else {
      if (tileEntity != null) {
        ((TileEntityTurretBase)tileEntity).destroy(false);
      }
    }
  }
}",0.6792156862745098
170030,"@Override public void onDestroy(TileEntity callingBlock){
  this.worldObj.setBlock(this.xCoord,this.yCoord,this.zCoord,0,0,2);
  this.worldObj.setBlock(this.xCoord,this.yCoord + 1,this.zCoord,0,0,2);
}","@Override public void onDestroy(TileEntity callingBlock){
  this.worldObj.setBlock(this.xCoord,this.yCoord,this.zCoord,0);
  this.worldObj.setBlock(this.xCoord,this.yCoord + 1,this.zCoord,0);
}",0.9796954314720812
170031,"@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityBaseTurret.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TCiGuiPao.class,new RenderRailgun());
  RenderingRegistry.registerEntityRenderingHandler(EntityFakeMountable.class,new RenderFakeMountable());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}","@Override public void init(){
  super.init();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityTurretBase.class,new RenderGunTurret());
  ClientRegistry.bindTileEntitySpecialRenderer(TCiGuiPao.class,new RenderRailgun());
  RenderingRegistry.registerEntityRenderingHandler(EntityFakeMountable.class,new RenderFakeMountable());
  RenderingRegistry.registerBlockHandler(new BlockRenderingHandler());
}",0.9852216748768472
170032,"public Action getNewCommand(TileEntityBaseTurret tileEntity,Class<? extends Action> commandClass,String[] parameters){
  try {
    Action newCommand=commandClass.newInstance();
    newCommand.world=tileEntity.worldObj;
    newCommand.tileEntity=tileEntity;
    newCommand.commandManager=this;
    newCommand.setParameters(parameters);
    return newCommand;
  }
 catch (  Exception e) {
    FMLLog.severe(""String_Node_Str"");
    e.printStackTrace();
  }
  return null;
}","public Action getNewCommand(TileEntityTurretBase tileEntity,Class<? extends Action> commandClass,String[] parameters){
  try {
    Action newCommand=commandClass.newInstance();
    newCommand.world=tileEntity.worldObj;
    newCommand.tileEntity=tileEntity;
    newCommand.commandManager=this;
    newCommand.setParameters(parameters);
    return newCommand;
  }
 catch (  Exception e) {
    FMLLog.severe(""String_Node_Str"");
    e.printStackTrace();
  }
  return null;
}",0.9914893617021276
170033,"public void addCommand(TileEntityBaseTurret tileEntity,Class<? extends Action> task){
  this.addCommand(tileEntity,task,new String[0]);
}","public void addCommand(TileEntityTurretBase tileEntity,Class<? extends Action> task){
  this.addCommand(tileEntity,task,new String[0]);
}",0.9708029197080292
170034,"@Override public void onTaskStart(){
  super.onTaskStart();
  if (this.getArg(0) != null) {
    this.targetRotationYaw=this.getFloatArg(0);
  }
 else {
    this.targetRotationYaw=0;
  }
  if (this.getArg(1) != null) {
    this.targetRotationPitch=this.getFloatArg(1);
  }
 else {
    this.targetRotationPitch=0;
  }
  while (this.targetRotationYaw < 0)   this.targetRotationYaw+=360;
  while (this.targetRotationYaw > 360)   this.targetRotationYaw-=360;
  while (this.targetRotationPitch < -TileEntityBaseTurret.MAX_PITCH)   this.targetRotationPitch+=TileEntityBaseTurret.MAX_PITCH;
  while (this.targetRotationPitch > TileEntityBaseTurret.MAX_PITCH)   this.targetRotationPitch-=TileEntityBaseTurret.MAX_PITCH;
}","@Override public void onTaskStart(){
  super.onTaskStart();
  if (this.getArg(0) != null) {
    this.targetRotationYaw=this.getFloatArg(0);
  }
 else {
    this.targetRotationYaw=0;
  }
  if (this.getArg(1) != null) {
    this.targetRotationPitch=this.getFloatArg(1);
  }
 else {
    this.targetRotationPitch=0;
  }
  while (this.targetRotationYaw < 0)   this.targetRotationYaw+=360;
  while (this.targetRotationYaw > 360)   this.targetRotationYaw-=360;
  while (this.targetRotationPitch < -TileEntityTurretBase.MAX_PITCH)   this.targetRotationPitch+=TileEntityTurretBase.MAX_PITCH;
  while (this.targetRotationPitch > TileEntityTurretBase.MAX_PITCH)   this.targetRotationPitch-=TileEntityTurretBase.MAX_PITCH;
}",0.9662921348314608
170035,"public LookHelper(TileEntityBaseTurret turret){
  this.sentry=turret;
}","public LookHelper(TileEntityTurretBase turret){
  this.sentry=turret;
}",0.943661971830986
170036,"public BlockTurretPlatform(int id){
  super(id,""String_Node_Str"",UniversalElectricity.machine);
  this.setHardness(50f);
  this.setResistance(100f);
  this.setCreativeTab(ICBMTab.INSTANCE);
}","public BlockTurretPlatform(int id){
  super(id,""String_Node_Str"",UniversalElectricity.machine);
  this.setHardness(50f);
  this.setResistance(100f);
  this.setCreativeTab(ICBMTab.INSTANCE);
  this.requireSidedTextures=true;
}",0.9182692307692308
170037,"public TileEntityBaseTurret getTurret(){
  TileEntity tileEntity=this.worldObj.getBlockTileEntity(this.xCoord + this.deployDirection.offsetX,this.yCoord + this.deployDirection.offsetY,this.zCoord + this.deployDirection.offsetZ);
  if (tileEntity instanceof TileEntityBaseTurret) {
    this.turret=(TileEntityBaseTurret)tileEntity;
  }
 else {
    this.turret=null;
  }
  return this.turret;
}","public TileEntityTurretBase getTurret(){
  TileEntity tileEntity=this.worldObj.getBlockTileEntity(this.xCoord + this.deployDirection.offsetX,this.yCoord + this.deployDirection.offsetY,this.zCoord + this.deployDirection.offsetZ);
  if (tileEntity instanceof TileEntityTurretBase) {
    this.turret=(TileEntityTurretBase)tileEntity;
  }
 else {
    this.turret=null;
  }
  return this.turret;
}",0.9540816326530612
170038,"public boolean destroy(boolean doExplosion){
  if (doExplosion) {
    this.worldObj.createExplosion(null,this.xCoord,this.yCoord,this.zCoord,2f,true);
  }
  this.getBlockType().dropBlockAsItem(this.worldObj,this.xCoord,this.yCoord,this.zCoord,this.getBlockMetadata(),0);
  return this.worldObj.setBlock(this.xCoord,this.yCoord,this.zCoord,0,0,2);
}","public boolean destroy(boolean doExplosion){
  if (doExplosion) {
    this.worldObj.createExplosion(null,this.xCoord,this.yCoord,this.zCoord,2f,true);
  }
  if (!this.worldObj.isRemote) {
    this.getBlockType().dropBlockAsItem(this.worldObj,this.xCoord,this.yCoord,this.zCoord,this.getBlockMetadata(),0);
  }
  return this.worldObj.setBlock(this.xCoord,this.yCoord,this.zCoord,0);
}",0.9411764705882352
170039,"/** 
 * if a sentry is spawned above the stand it is removed
 * @return
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + deployDirection.offsetX,this.yCoord + deployDirection.offsetY,this.zCoord + deployDirection.offsetZ);
  if (ent instanceof TileEntityBaseTurret) {
    this.turret=null;
    return ((TileEntityBaseTurret)ent).destroy(false);
  }
  return false;
}","/** 
 * if a sentry is spawned above the stand it is removed
 * @return
 */
public boolean destroyTurret(){
  TileEntity ent=this.worldObj.getBlockTileEntity(this.xCoord + deployDirection.offsetX,this.yCoord + deployDirection.offsetY,this.zCoord + deployDirection.offsetZ);
  if (ent instanceof TileEntityTurretBase) {
    this.turret=null;
    return ((TileEntityTurretBase)ent).destroy(false);
  }
  return false;
}",0.9712230215827338
170040,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityBaseTurret) {
    TileEntityBaseTurret tileEntity=(TileEntityBaseTurret)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1.5f,(float)z + 0.5f);
    this.setTextureBaseOnState(tileEntity);
    RenderGunTurret.render(tileEntity.rotationYaw,tileEntity.rotationPitch);
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityTurretBase) {
    TileEntityTurretBase tileEntity=(TileEntityTurretBase)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1.5f,(float)z + 0.5f);
    this.setTextureBaseOnState(tileEntity);
    RenderGunTurret.render(tileEntity.rotationYaw,tileEntity.rotationPitch);
    GL11.glPopMatrix();
  }
}",0.9625779625779626
170041,"public void setTextureBaseOnState(TileEntityBaseTurret tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.bindTextureByName(ZhuYao.MODEL_PATH + TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.bindTextureByName(ZhuYao.MODEL_PATH + TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.bindTextureByName(ZhuYao.MODEL_PATH + TEXTURE_FILE_HOSTILE);
}","public void setTextureBaseOnState(TileEntityTurretBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.bindTextureByName(ZhuYao.MODEL_PATH + TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.bindTextureByName(ZhuYao.MODEL_PATH + TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.bindTextureByName(ZhuYao.MODEL_PATH + TEXTURE_FILE_HOSTILE);
}",0.9896551724137932
170042,"@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityBaseTurret) {
    TileEntityBaseTurret tileEntity=(TileEntityBaseTurret)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1f,(float)z + 0.5f);
    GL11.glScalef(0.7f,0.7f,0.7f);
    this.setTextureBaseOnState(tileEntity);
    RenderGunTurretOld.render(tileEntity.rotationYaw,tileEntity.rotationPitch);
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity t,double x,double y,double z,float f){
  super.renderTileEntityAt(t,x,y,z,f);
  if (t instanceof TileEntityTurretBase) {
    TileEntityTurretBase tileEntity=(TileEntityTurretBase)t;
    GL11.glPushMatrix();
    GL11.glTranslatef((float)x + 0.5f,(float)y + 1f,(float)z + 0.5f);
    GL11.glScalef(0.7f,0.7f,0.7f);
    this.setTextureBaseOnState(tileEntity);
    RenderGunTurretOld.render(tileEntity.rotationYaw,tileEntity.rotationPitch);
    GL11.glPopMatrix();
  }
}",0.965183752417795
170043,"public void setTextureBaseOnState(TileEntityBaseTurret tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.bindTextureByName(ZhuYao.TEXTURE_PATH + TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.bindTextureByName(ZhuYao.TEXTURE_PATH + TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.bindTextureByName(ZhuYao.TEXTURE_PATH + TEXTURE_FILE_HOSTILE);
}","public void setTextureBaseOnState(TileEntityTurretBase tileEntity){
  EntityPlayer player=this.getPlayer();
  if (tileEntity.getPlatform() != null) {
    AccessLevel level=tileEntity.getPlatform().getUserAccess(player.username);
    if (level == AccessLevel.ADMIN) {
      this.bindTextureByName(ZhuYao.TEXTURE_PATH + TEXTURE_FILE);
      return;
    }
 else     if (level.ordinal() >= AccessLevel.USER.ordinal()) {
      this.bindTextureByName(ZhuYao.TEXTURE_PATH + TEXTURE_FILE_FRIENDLY);
      return;
    }
  }
  this.bindTextureByName(ZhuYao.TEXTURE_PATH + TEXTURE_FILE_HOSTILE);
}",0.9897610921501706
170044,"@Override public List<String> getCmdUses(EntityPlayer player,ISpecialAccess mm){
  List<String> cmds=new ArrayList<String>();
  cmds.add(""String_Node_Str"");
  return cmds;
}","@Override public List<String> getCmdUses(EntityPlayer player,ISpecialAccess mm){
  List<String> cmds=new ArrayList<String>();
  cmds.add(""String_Node_Str"");
  cmds.add(""String_Node_Str"");
  return cmds;
}",0.9177718832891246
170045,"public ItemBlockTurret(int par1){
  super(par1);
}","public ItemBlockTurret(int par1){
  super(par1);
  this.setMaxDamage(0);
  this.setHasSubtypes(true);
}",0.6535947712418301
170046,"/** 
 * Reads a tile entity from NBT.
 */
@Override public void readFromNBT(NBTTagCompound par1NBTTagCompound){
  super.readFromNBT(par1NBTTagCompound);
  this.mode=par1NBTTagCompound.getByte(""String_Node_Str"");
  this.frequency=par1NBTTagCompound.getShort(""String_Node_Str"");
  this.isInverted=par1NBTTagCompound.getBoolean(""String_Node_Str"");
  this.minCoord=Vector3.readFromNBT(""String_Node_Str"",par1NBTTagCompound);
  this.maxCoord=Vector3.readFromNBT(""String_Node_Str"",par1NBTTagCompound);
}","/** 
 * Reads a tile entity from NBT.
 */
@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  this.mode=nbt.getByte(""String_Node_Str"");
  this.frequency=nbt.getShort(""String_Node_Str"");
  this.isInverted=nbt.getBoolean(""String_Node_Str"");
  this.minCoord=Vector3.readFromNBT(nbt.getCompoundTag(""String_Node_Str""));
  this.maxCoord=Vector3.readFromNBT(nbt.getCompoundTag(""String_Node_Str""));
}",0.7159956474428727
170047,"/** 
 * Writes a tile entity to NBT.
 */
@Override public void writeToNBT(NBTTagCompound par1NBTTagCompound){
  super.writeToNBT(par1NBTTagCompound);
  par1NBTTagCompound.setShort(""String_Node_Str"",this.frequency);
  par1NBTTagCompound.setByte(""String_Node_Str"",this.mode);
  par1NBTTagCompound.setBoolean(""String_Node_Str"",this.isInverted);
  this.minCoord.writeToNBT(""String_Node_Str"",par1NBTTagCompound);
  this.maxCoord.writeToNBT(""String_Node_Str"",par1NBTTagCompound);
}","/** 
 * Writes a tile entity to NBT.
 */
@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setShort(""String_Node_Str"",this.frequency);
  nbt.setByte(""String_Node_Str"",this.mode);
  nbt.setBoolean(""String_Node_Str"",this.isInverted);
  nbt.setCompoundTag(""String_Node_Str"",this.minCoord.writeToNBT(new NBTTagCompound()));
  nbt.setCompoundTag(""String_Node_Str"",this.maxCoord.writeToNBT(new NBTTagCompound()));
}",0.6463547334058759
170048,"/** 
 * Check if the stack is a valid item for this slot. Always true beside for the armor slots.
 */
@Override public boolean isItemValid(ItemStack compareStack){
  for (  ItemStack itemStack : itemStacks) {
    if (compareStack.isItemEqual(itemStack)) {
      return true;
    }
  }
  return false;
}","/** 
 * Check if the stack is a valid item for this slot. Always true beside for the armor slots.
 */
@Override public boolean isItemValid(ItemStack compareStack){
  for (  ItemStack itemStack : itemStacks) {
    if (compareStack.isItemEqual(itemStack) || (!this.isMetadataSensitive && compareStack.itemID == itemStack.itemID)) {
      return true;
    }
  }
  return false;
}",0.8908554572271387
170049,"@Override public void processCommand(ICommandSender sender,String[] args){
  if (args.length > 0) {
    EntityPlayer entityPlayer=(EntityPlayer)sender;
    FlagWorld flagWorld=this.modFlagData.getFlagWorld(entityPlayer.worldObj);
    String commandName=args[0].toLowerCase();
    if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        String regionName=args[1];
        if (regionName.equalsIgnoreCase(""String_Node_Str"")) {
          String msg=""String_Node_Str"";
          Iterator<FlagWorld> itWorlds=this.modFlagData.getFlagWorlds().iterator();
          while (itWorlds.hasNext()) {
            Iterator<FlagRegion> itRegion=itWorlds.next().getRegions().iterator();
            while (itRegion.hasNext()) {
              FlagRegion flagRegion=itRegion.next();
              msg=msg + ""String_Node_Str"" + flagRegion.name+ ""String_Node_Str""+ flagRegion.region.min.x+ ""String_Node_Str""+ flagRegion.region.min.z+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
          if (msg != ""String_Node_Str"") {
            msg=""String_Node_Str"" + msg;
          }
 else {
            msg=""String_Node_Str"";
          }
          sender.sendChatToPlayer(msg);
        }
 else         if (flagWorld.getRegion(regionName) != null) {
          String msg=""String_Node_Str"";
          Iterator<Flag> i=flagWorld.getRegion(regionName).getFlags().iterator();
          while (i.hasNext()) {
            Flag flag=i.next();
            msg=msg + ""String_Node_Str"" + flag.name+ ""String_Node_Str""+ flag.value+ ""String_Node_Str"";
          }
          if (msg != ""String_Node_Str"") {
            msg=""String_Node_Str"" + regionName + ""String_Node_Str""+ msg;
          }
 else {
            msg=""String_Node_Str"";
          }
          sender.sendChatToPlayer(msg);
        }
 else {
          String msg=""String_Node_Str"";
          Iterator<Flag> i=flagWorld.getFlagsInPosition(new Vector3(entityPlayer)).iterator();
          while (i.hasNext()) {
            Flag flag=i.next();
            msg=msg + ""String_Node_Str"" + flag.name+ ""String_Node_Str""+ flag.value+ ""String_Node_Str"";
          }
          sender.sendChatToPlayer(msg);
        }
      }
 else {
        String msg=""String_Node_Str"";
        Iterator<FlagRegion> i=flagWorld.getRegions().iterator();
        while (i.hasNext()) {
          FlagRegion flagRegion=i.next();
          msg=msg + ""String_Node_Str"" + flagRegion.name+ ""String_Node_Str""+ flagRegion.region.min.x+ ""String_Node_Str""+ flagRegion.region.min.z+ ""String_Node_Str""+ ""String_Node_Str"";
        }
        if (msg != ""String_Node_Str"") {
          msg=""String_Node_Str"" + msg;
        }
 else {
          msg=""String_Node_Str"";
        }
        sender.sendChatToPlayer(msg);
      }
      return;
    }
 else     if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
      String regionName=args[1];
      if (regionName.equalsIgnoreCase(FlagWorld.GLOBAL_REGION)) {
        if (flagWorld.addRegion(regionName,new Vector3(entityPlayer),1)) {
          sender.sendChatToPlayer(""String_Node_Str"");
          return;
        }
      }
 else       if (args.length > 2) {
        int radius=0;
        try {
          radius=Integer.parseInt(args[2]);
        }
 catch (        Exception e) {
          throw new WrongUsageException(""String_Node_Str"");
        }
        if (radius > 0) {
          if (flagWorld.getRegion(regionName) == null) {
            if (flagWorld.addRegion(regionName,new Vector3(entityPlayer),radius)) {
              sender.sendChatToPlayer(""String_Node_Str"" + regionName + ""String_Node_Str"");
              return;
            }
          }
 else {
            throw new WrongUsageException(""String_Node_Str"");
          }
        }
 else {
          throw new WrongUsageException(""String_Node_Str"");
        }
      }
 else {
        throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
      }
    }
 else     if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        String regionName=args[1];
        if (flagWorld.removeRegion(regionName)) {
          sender.sendChatToPlayer(""String_Node_Str"" + regionName + ""String_Node_Str"");
        }
 else {
          throw new WrongUsageException(""String_Node_Str"");
        }
      }
 else {
        throw new WrongUsageException(""String_Node_Str"");
      }
      return;
    }
 else     if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        String regionName=args[1];
        String flagName=args[2];
        FlagRegion flagRegion=flagWorld.getRegion(regionName);
        if (flagRegion != null) {
          if (args.length > 3) {
            String flagValue=args[3];
            if (FlagRegistry.flags.contains(flagName)) {
              flagRegion.setFlag(flagName,flagValue);
              sender.sendChatToPlayer(""String_Node_Str"" + flagName + ""String_Node_Str""+ flagValue+ ""String_Node_Str""+ regionName+ ""String_Node_Str"");
            }
 else {
              String flags=""String_Node_Str"";
              for (              String registeredFlag : FlagRegistry.flags) {
                flags=flags + registeredFlag + ""String_Node_Str"";
              }
              throw new WrongUsageException(flags);
            }
          }
 else {
            flagRegion.removeFlag(flagName);
            sender.sendChatToPlayer(""String_Node_Str"" + flagName + ""String_Node_Str"");
          }
        }
 else {
          throw new WrongUsageException(""String_Node_Str"" + regionName + ""String_Node_Str"");
        }
      }
 else {
        throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
      }
      return;
    }
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}","@Override public void processCommand(ICommandSender sender,String[] args){
  if (args.length > 0) {
    EntityPlayer entityPlayer=(EntityPlayer)sender;
    FlagWorld flagWorld=this.modFlagData.getFlagWorld(entityPlayer.worldObj);
    String commandName=args[0].toLowerCase();
    if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        String regionName=args[1];
        if (regionName.equalsIgnoreCase(""String_Node_Str"")) {
          String msg=""String_Node_Str"";
          Iterator<FlagWorld> itWorlds=this.modFlagData.getFlagWorlds().iterator();
          while (itWorlds.hasNext()) {
            Iterator<FlagRegion> itRegion=itWorlds.next().getRegions().iterator();
            while (itRegion.hasNext()) {
              FlagRegion flagRegion=itRegion.next();
              msg=msg + ""String_Node_Str"" + flagRegion.name+ ""String_Node_Str""+ flagRegion.region.min.x+ ""String_Node_Str""+ flagRegion.region.min.z+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
          if (msg != ""String_Node_Str"") {
            msg=""String_Node_Str"" + msg;
          }
 else {
            msg=""String_Node_Str"";
          }
          sender.sendChatToPlayer(msg);
        }
 else         if (flagWorld.getRegion(regionName) != null) {
          String msg=""String_Node_Str"";
          Iterator<Flag> i=flagWorld.getRegion(regionName).getFlags().iterator();
          while (i.hasNext()) {
            Flag flag=i.next();
            msg=msg + ""String_Node_Str"" + flag.name+ ""String_Node_Str""+ flag.value+ ""String_Node_Str"";
          }
          if (msg != ""String_Node_Str"") {
            msg=""String_Node_Str"" + regionName + ""String_Node_Str""+ msg;
          }
 else {
            msg=""String_Node_Str"";
          }
          sender.sendChatToPlayer(msg);
        }
 else {
          String msg=""String_Node_Str"";
          Iterator<Flag> i=flagWorld.getFlagsInPosition(new Vector3(entityPlayer)).iterator();
          while (i.hasNext()) {
            Flag flag=i.next();
            msg=msg + ""String_Node_Str"" + flag.name+ ""String_Node_Str""+ flag.value+ ""String_Node_Str"";
          }
          sender.sendChatToPlayer(msg);
        }
      }
 else {
        String msg=""String_Node_Str"";
        Iterator<FlagRegion> i=flagWorld.getRegions().iterator();
        while (i.hasNext()) {
          FlagRegion flagRegion=i.next();
          msg=msg + ""String_Node_Str"" + flagRegion.name+ ""String_Node_Str""+ flagRegion.region.min.x+ ""String_Node_Str""+ flagRegion.region.min.z+ ""String_Node_Str""+ ""String_Node_Str"";
        }
        if (msg != ""String_Node_Str"") {
          msg=""String_Node_Str"" + msg;
        }
 else {
          msg=""String_Node_Str"";
        }
        sender.sendChatToPlayer(msg);
      }
      return;
    }
 else     if (commandName.equalsIgnoreCase(""String_Node_Str"") && args.length > 1) {
      String regionName=args[1];
      if (regionName.equalsIgnoreCase(FlagWorld.GLOBAL_REGION)) {
        if (flagWorld.addRegion(regionName,new Vector3(entityPlayer),1)) {
          sender.sendChatToPlayer(""String_Node_Str"");
          return;
        }
      }
 else       if (args.length > 2) {
        int radius=0;
        try {
          radius=Integer.parseInt(args[2]);
        }
 catch (        Exception e) {
          throw new WrongUsageException(""String_Node_Str"");
        }
        if (radius > 0) {
          if (flagWorld.getRegion(regionName) == null) {
            if (flagWorld.addRegion(regionName,new Vector3(entityPlayer),radius)) {
              sender.sendChatToPlayer(""String_Node_Str"" + regionName + ""String_Node_Str"");
              return;
            }
          }
 else {
            throw new WrongUsageException(""String_Node_Str"");
          }
        }
 else {
          throw new WrongUsageException(""String_Node_Str"");
        }
      }
 else {
        throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
      }
    }
 else     if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 1) {
        String regionName=args[1];
        if (flagWorld.removeRegion(regionName)) {
          sender.sendChatToPlayer(""String_Node_Str"" + regionName + ""String_Node_Str"");
        }
 else {
          throw new WrongUsageException(""String_Node_Str"");
        }
      }
 else {
        throw new WrongUsageException(""String_Node_Str"");
      }
      return;
    }
 else     if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length > 2) {
        String regionName=args[1];
        String flagName=args[2];
        FlagRegion flagRegion=flagWorld.getRegion(regionName);
        if (flagRegion != null) {
          if (FlagRegistry.flags.contains(flagName)) {
            if (args.length > 3) {
              String flagValue=args[3];
              flagRegion.setFlag(flagName,flagValue);
              sender.sendChatToPlayer(""String_Node_Str"" + flagName + ""String_Node_Str""+ flagValue+ ""String_Node_Str""+ regionName+ ""String_Node_Str"");
            }
 else {
              flagRegion.removeFlag(flagName);
              sender.sendChatToPlayer(""String_Node_Str"" + flagName + ""String_Node_Str"");
            }
          }
 else {
            String flags=""String_Node_Str"";
            for (            String registeredFlag : FlagRegistry.flags) {
              flags=flags + registeredFlag + ""String_Node_Str"";
            }
            throw new WrongUsageException(flags);
          }
        }
 else {
          throw new WrongUsageException(""String_Node_Str"" + regionName + ""String_Node_Str"");
        }
      }
 else {
        throw new WrongUsageException(""String_Node_Str"" + this.getCommandName() + ""String_Node_Str"");
      }
      return;
    }
  }
  throw new WrongUsageException(this.getCommandUsage(sender));
}",0.9577099368675948
170050,"/** 
 * Determines if this TileEntity requires update calls.
 * @return True if you want updateEntity() to be called, false if not
 */
public boolean canUpdate(){
  return false;
}","/** 
 * Determines if this TileEntity requires update calls.
 * @return True if you want updateEntity() to be called, false if not
 */
@Override public boolean canUpdate(){
  return false;
}",0.972972972972973
170051,"public CFaShiDi(InventoryPlayer par1InventoryPlayer,TFaSheDi tileEntity){
  this.missileLauncher=tileEntity;
  this.addSlotToContainer(new SlotSpecific(tileEntity,0,84,47,new ItemStack(ZhuYaoZhaPin.itDaoDan)));
  int var3;
  for (var3=0; var3 < 3; ++var3) {
    for (int var4=0; var4 < 9; ++var4) {
      this.addSlotToContainer(new Slot(par1InventoryPlayer,var4 + var3 * 9 + 9,8 + var4 * 18,84 + var3 * 18));
    }
  }
  for (var3=0; var3 < 9; ++var3) {
    this.addSlotToContainer(new Slot(par1InventoryPlayer,var3,8 + var3 * 18,142));
  }
}","public CFaShiDi(InventoryPlayer par1InventoryPlayer,TFaSheDi tileEntity){
  this.missileLauncher=tileEntity;
  this.addSlotToContainer(new SlotSpecific(tileEntity,0,84,47,new ItemStack(ZhuYaoZhaPin.itDaoDan),new ItemStack(ZhuYaoZhaPin.itTeBieDaoDan)));
  int var3;
  for (var3=0; var3 < 3; ++var3) {
    for (int var4=0; var4 < 9; ++var4) {
      this.addSlotToContainer(new Slot(par1InventoryPlayer,var4 + var3 * 9 + 9,8 + var4 * 18,84 + var3 * 18));
    }
  }
  for (var3=0; var3 < 9; ++var3) {
    this.addSlotToContainer(new Slot(par1InventoryPlayer,var3,8 + var3 * 18,142));
  }
}",0.9627659574468084
170052,"public static JiQi get(int id){
  if (id <= JiQi.values().length) {
    return JiQi.values()[id];
  }
  return null;
}","public static JiQi get(int id){
  if (id < JiQi.values().length && id > 0) {
    return JiQi.values()[id];
  }
  return null;
}",0.9551020408163264
170053,"@Override public List<ItemStack> getItemsDropped(){
  List<ItemStack> items=new ArrayList<ItemStack>();
  items.add(new ItemStack(ZhuYao.itChe,1,this.explosiveID));
  return items;
}","@Override public List<ItemStack> getItemsDropped(){
  List<ItemStack> items=new ArrayList<ItemStack>();
  if (!this.isPrimed) {
    items.add(new ItemStack(ZhuYao.itChe,1,this.explosiveID));
  }
  return items;
}",0.9238578680203046
170054,"@Override public void onUpdate(){
  super.onUpdate();
  if (this.isPrimed) {
    if (this.fuse < 1) {
      this.explode();
    }
 else {
      ZhaPin.list[explosiveID].onYinZha(this.worldObj,new Vector3(this.posX,this.posY,this.posZ),this.explosiveID);
      this.worldObj.spawnParticle(""String_Node_Str"",this.posX,this.posY + 0.8D,this.posZ,0.0D,0.0D,0.0D);
    }
    this.fuse--;
  }
 else {
    if (this.worldObj.getBlockId((int)this.posX,(int)this.posY,(int)this.posZ) == Block.rail.blockID && this.worldObj.isBlockIndirectlyGettingPowered((int)this.posX,(int)this.posY,(int)this.posZ)) {
      this.setPrimed(true);
    }
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (this.worldObj.isRemote) {
    this.fuse=this.dataWatcher.getWatchableObjectInt(20);
    if (this.dataWatcher.getWatchableObjectByte(21) > 0) {
      this.isPrimed=true;
    }
 else {
      this.isPrimed=false;
    }
  }
 else {
    this.dataWatcher.updateObject(20,this.fuse);
    byte isPri=0;
    if (this.isPrimed)     isPri=1;
    this.dataWatcher.updateObject(21,isPri);
  }
  if (this.isPrimed) {
    if (this.fuse < 1) {
      this.explode();
    }
 else {
      ZhaPin.list[explosiveID].onYinZha(this.worldObj,new Vector3(this.posX,this.posY,this.posZ),this.explosiveID);
      this.worldObj.spawnParticle(""String_Node_Str"",this.posX,this.posY + 0.8D,this.posZ,0.0D,0.0D,0.0D);
    }
    this.fuse--;
  }
 else {
    if (this.worldObj.getBlockId((int)this.posX,(int)this.posY,(int)this.posZ) == Block.rail.blockID && this.worldObj.isBlockIndirectlyGettingPowered((int)this.posX,(int)this.posY,(int)this.posZ)) {
      this.setPrimed(true);
    }
  }
}",0.7663438256658596
170055,"public static List<EDaoDan> getMissileInArea(Region2 region){
  cleanUpMissiles();
  List<EDaoDan> returnArray=new ArrayList<EDaoDan>();
  for (  EDaoDan missile : missiles) {
    if (region.isIn(Vector3.get(missile).toVector2())) {
      returnArray.add(missile);
    }
  }
  return returnArray;
}","public static List<EDaoDan> getMissileInArea(Vector2 vector,int radius){
  cleanUpMissiles();
  List<EDaoDan> returnArray=new ArrayList<EDaoDan>();
  for (  EDaoDan missile : missiles) {
    if (Vector2.distance(vector,Vector3.get(missile).toVector2()) <= radius) {
      returnArray.add(missile);
    }
  }
  return returnArray;
}",0.8744038155802861
170056,"private boolean doScan(){
  this.missileAlert=false;
  this.detectedMissiles.clear();
  this.detectedRadarStations.clear();
  List<EDaoDan> missilesNearby=DaoDanGuanLi.getMissileInArea(new Region2(new Vector2(this.xCoord - MAX_BIAN_JING,this.zCoord - MAX_BIAN_JING),new Vector2(this.xCoord + MAX_BIAN_JING,this.zCoord + MAX_BIAN_JING)));
  for (  EDaoDan missile : missilesNearby) {
    if (missile.ticksInAir > -1) {
      if (!this.detectedMissiles.contains(missile)) {
        this.detectedMissiles.add(missile);
      }
      if (Vector2.distance(missile.muBiao.toVector2(),new Vector2(this.xCoord,this.zCoord)) < this.safetyBanJing) {
        this.missileAlert=true;
      }
    }
  }
  for (  TLeiDaTai radarStation : LeiDaGuanLi.getRadarStationsInArea(new Vector2(this.xCoord - this.MAX_BIAN_JING,this.zCoord - this.MAX_BIAN_JING),new Vector2(this.xCoord + this.MAX_BIAN_JING,this.zCoord + this.MAX_BIAN_JING))) {
    if (!radarStation.isDisabled() && radarStation.prevDian > 0) {
      this.detectedRadarStations.add(radarStation);
    }
  }
  return this.missileAlert;
}","private boolean doScan(){
  this.missileAlert=false;
  this.detectedMissiles.clear();
  this.detectedRadarStations.clear();
  List<EDaoDan> missilesNearby=DaoDanGuanLi.getMissileInArea(Vector3.get(this).toVector2(),this.alarmBanJing);
  for (  EDaoDan missile : missilesNearby) {
    if (missile.ticksInAir > -1) {
      if (!this.detectedMissiles.contains(missile)) {
        this.detectedMissiles.add(missile);
      }
      if (Vector2.distance(missile.muBiao.toVector2(),new Vector2(this.xCoord,this.zCoord)) < this.safetyBanJing) {
        this.missileAlert=true;
      }
    }
  }
  for (  TLeiDaTai radarStation : LeiDaGuanLi.getRadarStationsInArea(new Vector2(this.xCoord - this.MAX_BIAN_JING,this.zCoord - this.MAX_BIAN_JING),new Vector2(this.xCoord + this.MAX_BIAN_JING,this.zCoord + this.MAX_BIAN_JING))) {
    if (!radarStation.isDisabled() && radarStation.prevDian > 0) {
      this.detectedRadarStations.add(radarStation);
    }
  }
  return this.missileAlert;
}",0.4749391727493917
170057,"@Override public Object[] callMethod(IComputerAccess computer,int method,Object[] arguments) throws Exception {
  if (this.prevDian < this.YAO_DIAN) {
    throw new Exception(""String_Node_Str"");
  }
  List<Double> returnArray;
switch (method) {
case 0:
    List<EDaoDan> daoDans=DaoDanGuanLi.getMissileInArea(new Region2(new Vector2(this.xCoord - MAX_BIAN_JING,this.zCoord - MAX_BIAN_JING),new Vector2(this.xCoord + MAX_BIAN_JING,this.zCoord + MAX_BIAN_JING)));
  returnArray=new ArrayList<Double>();
for (EDaoDan daoDan : daoDans) {
  returnArray.add(daoDan.posX);
  returnArray.add(daoDan.posY);
  returnArray.add(daoDan.posZ);
}
return returnArray.toArray();
case 1:
returnArray=new ArrayList<Double>();
for (TLeiDaTai radarStation : LeiDaGuanLi.getRadarStationsInArea(new Vector2(this.xCoord - this.MAX_BIAN_JING,this.zCoord - this.MAX_BIAN_JING),new Vector2(this.xCoord + this.MAX_BIAN_JING,this.zCoord + this.MAX_BIAN_JING))) {
if (!radarStation.isDisabled() && radarStation.prevDian > 0) {
returnArray.add((double)radarStation.xCoord);
returnArray.add((double)radarStation.yCoord);
returnArray.add((double)radarStation.zCoord);
}
}
return returnArray.toArray();
}
throw new Exception(""String_Node_Str"");
}","@Override public Object[] callMethod(IComputerAccess computer,int method,Object[] arguments) throws Exception {
  if (this.prevDian < this.YAO_DIAN) {
    throw new Exception(""String_Node_Str"");
  }
  List<Double> returnArray;
switch (method) {
case 0:
    List<EDaoDan> daoDans=DaoDanGuanLi.getMissileInArea(Vector3.get(this).toVector2(),this.alarmBanJing);
  returnArray=new ArrayList<Double>();
for (EDaoDan daoDan : daoDans) {
  returnArray.add(daoDan.posX);
  returnArray.add(daoDan.posY);
  returnArray.add(daoDan.posZ);
}
return returnArray.toArray();
case 1:
returnArray=new ArrayList<Double>();
for (TLeiDaTai radarStation : LeiDaGuanLi.getRadarStationsInArea(new Vector2(this.xCoord - this.MAX_BIAN_JING,this.zCoord - this.MAX_BIAN_JING),new Vector2(this.xCoord + this.MAX_BIAN_JING,this.zCoord + this.MAX_BIAN_JING))) {
if (!radarStation.isDisabled() && radarStation.prevDian > 0) {
returnArray.add((double)radarStation.xCoord);
returnArray.add((double)radarStation.yCoord);
returnArray.add((double)radarStation.zCoord);
}
}
return returnArray.toArray();
}
throw new Exception(""String_Node_Str"");
}",0.4937526928048255
170058,"@Override public boolean isPoweringTo(ForgeDirection side){
  return this.dian >= this.YAO_DIAN && this.doScan() && this.detectedMissiles.size() > 0;
}","@Override public boolean isPoweringTo(ForgeDirection side){
  if (this.prevDian <= 0 && this.dian <= 0) {
    return false;
  }
  return this.doScan() && this.detectedMissiles.size() > 0;
}",0.788235294117647
170059,"public void updateEntity(){
  super.updateEntity();
  this.prevDian=this.dian;
  if (!this.worldObj.isRemote) {
    if (this.ticks % 40 == 0) {
      PacketManager.sendPacketToClients(this.getDescriptionPacket(),this.worldObj,Vector3.get(this),35);
    }
 else     if (this.ticks % 3 == 0 && this.yongZhe > 0) {
      PacketManager.sendPacketToClients(this.getDescriptionPacket2(),this.worldObj,Vector3.get(this),12);
    }
  }
  if (!this.isDisabled()) {
    if (this.dian >= this.YAO_DIAN) {
      this.xuanZhuan+=0.05F;
      if (this.xuanZhuan > 360)       this.xuanZhuan=0;
      if (!this.worldObj.isRemote) {
        this.dian-=this.YAO_DIAN;
      }
      boolean previousMissileDetection=this.detectedMissiles.size() > 0;
      this.doScan();
      if (previousMissileDetection != this.detectedMissiles.size() > 0) {
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
      if (this.ticks % 20 == 0) {
        if (this.missileAlert && YIN_XIANG) {
          this.worldObj.playSoundEffect((double)this.xCoord,(double)this.yCoord,(double)this.zCoord,""String_Node_Str"",1F,1F);
        }
      }
    }
 else {
      if (this.detectedMissiles.size() > 0) {
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
      this.detectedMissiles.clear();
      this.detectedRadarStations.clear();
      this.dian=0;
    }
  }
  if (this.ticks % 40 == 0) {
    this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
  }
}","public void updateEntity(){
  super.updateEntity();
  this.prevDian=this.dian;
  if (!this.worldObj.isRemote) {
    if (this.ticks % 40 == 0) {
      PacketManager.sendPacketToClients(this.getDescriptionPacket(),this.worldObj,Vector3.get(this),35);
    }
 else     if (this.ticks % 3 == 0 && this.yongZhe > 0) {
      PacketManager.sendPacketToClients(this.getDescriptionPacket2(),this.worldObj,Vector3.get(this),12);
    }
  }
  if (!this.isDisabled()) {
    if (this.dian >= this.YAO_DIAN) {
      this.xuanZhuan+=0.05F;
      if (this.xuanZhuan > 360)       this.xuanZhuan=0;
      if (!this.worldObj.isRemote) {
        this.dian-=this.YAO_DIAN;
      }
      boolean previousMissileDetection=this.detectedMissiles.size() > 0;
      this.doScan();
      if (previousMissileDetection != this.detectedMissiles.size() > 0) {
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
    }
 else {
      if (this.detectedMissiles.size() > 0) {
        this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
      }
      this.detectedMissiles.clear();
      this.detectedRadarStations.clear();
      this.dian=0;
    }
  }
  if ((this.dian > 0 || this.prevDian > 0) && this.ticks % 22 == 0) {
    if (this.missileAlert && YIN_XIANG) {
      this.worldObj.playSoundEffect((double)this.xCoord,(double)this.yCoord,(double)this.zCoord,""String_Node_Str"",4F,1F);
    }
  }
  if (this.ticks % 40 == 0) {
    this.worldObj.notifyBlocksOfNeighborChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType().blockID);
  }
}",0.7822878228782287
170060,"@Init public void load(FMLInitializationEvent evt){
  if (blockFuShe == null) {
    blockFuShe=new BlockRadioactive(UEConfig.getBlockConfigID(CONFIGURATION,""String_Node_Str"",BLOCK_ID_PREFIX + 5),4,ICBM.BLOCK_TEXTURE_FILE);
    GameRegistry.registerBlock(blockFuShe);
  }
  LanguageRegistry.addName(blockLiu,""String_Node_Str"");
  LanguageRegistry.addName(itemLiu,""String_Node_Str"");
  LanguageRegistry.addName(itemDu,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemLeiDaQiang,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemYaoKong,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemLeiSheZhiBiao,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemJieJa,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemGenZongQi,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemHuoLaunQi,""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.itemZiDan,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.itemZiDan,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,2),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,3),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,4),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,5),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,6),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,7),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,8),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,9),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,10),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,11),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,12),""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemYao,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.blockBuo1LiPan,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.blockYinGanQi,""String_Node_Str"");
  for (int i=0; i < ((ItTeBieDaoDan)ICBM.itemTeBieDaoDan).names.length; i++) {
    LanguageRegistry.addName(new ItemStack(ICBM.itemTeBieDaoDan,1,i),((ItTeBieDaoDan)ICBM.itemTeBieDaoDan).names[i]);
  }
  for (int i=0; i < ZhaPin.MAX_EXPLOSIVE_ID; i++) {
    if (i == 0) {
      LanguageRegistry.addName(new ItemStack(ICBM.itemDaoDan,1,i),""String_Node_Str"");
      LanguageRegistry.addName(new ItemStack(ICBM.itemShouLiuDan,1,i),""String_Node_Str"");
    }
 else {
      LanguageRegistry.addName(new ItemStack(ICBM.itemDaoDan,1,i),ZhaPin.list[i].getMing() + ""String_Node_Str"");
      if (i < 4) {
        LanguageRegistry.addName(new ItemStack(ICBM.itemShouLiuDan,1,i),ZhaPin.list[i].getMing() + ""String_Node_Str"");
      }
    }
    LanguageRegistry.addName(new ItemStack(ICBM.blockZha4Dan4,1,i),ZhaPin.list[i].getMing() + ""String_Node_Str"");
  }
  RecipeManager.addRecipe(new ItemStack(ICBM.itemZiDan,16,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.diamond,'!',BasicComponents.itemBronzeIngot});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemZiDan,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockZha4Dan4,1,ZhaPin.Antimatter.getID()),'!',ICBM.itemZiDan});
  RecipeManager.addShapelessRecipe(new ItemStack(itemDu),new Object[]{Item.fermentedSpiderEye,Item.rottenFlesh});
  RecipeManager.addSmelting(new ItemStack(blockLiu,1,0),new ItemStack(itemLiu));
  RecipeManager.addRecipe(new ItemStack(Item.gunpowder,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',itemLiu,'?',Item.coal});
  RecipeManager.addRecipe(new ItemStack(Item.gunpowder,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',itemLiu,'?',new ItemStack(Item.coal,1,1)});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemLeiDaQiang),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Block.glass,'!',BasicComponents.itemSteelPlate,'#',BasicComponents.itemCircuit,'$',Block.button});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemYaoKong),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',BasicComponents.itemSteelIngot,'?',Item.redstone,'#',new ItemStack(BasicComponents.itemCircuit,1,1),'$',Block.button});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemLeiSheZhiBiao),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',ICBM.itemYaoKong.getUnchargedItemStack(),'?',new ItemStack(BasicComponents.itemCircuit,1,2),'!',ICBM.itemLeiDaQiang.getUnchargedItemStack()});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockYinGanQi),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',BasicComponents.itemSteelPlate,'?',new ItemStack(BasicComponents.itemCircuit,1,2)});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemHuoLaunQi),new Object[]{""String_Node_Str"",""String_Node_Str"",'!',ICBM.itemYaoKong.getUnchargedItemStack(),'?',ICBM.blockYinGanQi});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemYao,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.pumpkinSeeds});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemJieJa),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(BasicComponents.itemCircuit,1,1),'!',BasicComponents.itemSteelPlate,'?',BasicComponents.blockCopperWire});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',""String_Node_Str"",'@',BasicComponents.itemSteelPlate});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockJiQi,1,0),'!',""String_Node_Str""});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockJiQi,1,1),'!',BasicComponents.itemSteelPlate});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',BasicComponents.itemCircuit,'!',Block.glass,'?',BasicComponents.blockCopperWire});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',new ItemStack(BasicComponents.itemCircuit,1,1),'!',BasicComponents.itemSteelIngot,'?',BasicComponents.blockCopperWire,'$',new ItemStack(ICBM.blockJiQi,1,3)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',new ItemStack(BasicComponents.itemCircuit,1,2),'!',Item.ingotGold,'?',BasicComponents.blockCopperWire,'$',new ItemStack(ICBM.blockJiQi,1,4)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',""String_Node_Str""});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,7),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',BasicComponents.itemSteelIngot,'@',new ItemStack(ICBM.blockJiQi,1,6)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',BasicComponents.itemSteelPlate,'@',new ItemStack(ICBM.blockJiQi,1,7)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,9),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',ICBM.itemLeiDaQiang.getUnchargedItemStack(),'!',BasicComponents.itemSteelIngot,'#',new ItemStack(BasicComponents.itemCircuit,1,2),'?',Item.ingotGold});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,10),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'?',BasicComponents.itemSteelPlate,'!',new ItemStack(BasicComponents.itemCircuit,1,2),'@',BasicComponents.batteryBox,'#',BasicComponents.itemMotor});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,11),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',BasicComponents.itemSteelPlate,'!',ICBM.itemLeiDaQiang.getUnchargedItemStack(),'#',Item.diamond,'?',new ItemStack(BasicComponents.itemCircuit,1,2)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,12),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',BasicComponents.itemSteelPlate,'!',new ItemStack(ICBM.blockJiQi,1,2),'?',new ItemStack(ICBM.blockJiQi,1,8)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockBuo1LiPan,1,0),new Object[]{""String_Node_Str"",'#',Block.glass});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemTeBieDaoDan,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',""String_Node_Str"",'?',BasicComponents.itemOilBucket,'#',BasicComponents.itemCircuit});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemTeBieDaoDan,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.itemTeBieDaoDan,1,0),'?',new ItemStack(ICBM.blockZha4Dan4,1,0),'!',BasicComponents.itemCircuit});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemTeBieDaoDan,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.itemTeBieDaoDan,1,0),'?',DaoDan.list[ZhaPin.qunDan.getID()].getItemStack(),'!',new ItemStack(ICBM.itemDaoDan,1,0)});
  for (int i=0; i < ZhaPin.MAX_EXPLOSIVE_ID; i++) {
    ZhaPin.list[i].init();
    RecipeManager.addShapelessRecipe(new ItemStack(ICBM.itemDaoDan,1,i),new Object[]{new ItemStack(ICBM.itemTeBieDaoDan,1,0),new ItemStack(ICBM.blockZha4Dan4,1,i)},ZhaPin.list[i].getDaoDanMing(),CONFIGURATION,true);
    if (i < 4) {
      RecipeManager.addRecipe(new ItemStack(ICBM.itemShouLiuDan,1,i),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockZha4Dan4,1,i),'?',Item.silk},CONFIGURATION,true);
    }
  }
  GameRegistry.registerTileEntity(TZhaDan.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TYinGanQi.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TYinXing.class,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EZhaDan.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EDaoDan.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EZhaPin.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EFeiBlock.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EGuang.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(ESuiPian.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EShouLiuDan.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(ECiGuiPao.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EZhaDan.class,""String_Node_Str"",ENTITY_ID_PREFIX,this,50,5,true);
  EntityRegistry.registerModEntity(EDaoDan.class,""String_Node_Str"",ENTITY_ID_PREFIX + 1,this,100,2,true);
  EntityRegistry.registerModEntity(EZhaPin.class,""String_Node_Str"",ENTITY_ID_PREFIX + 2,this,100,5,true);
  EntityRegistry.registerModEntity(EFeiBlock.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,50,15,true);
  EntityRegistry.registerModEntity(EGuang.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,80,5,true);
  EntityRegistry.registerModEntity(ESuiPian.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,40,8,true);
  EntityRegistry.registerModEntity(EShouLiuDan.class,""String_Node_Str"",ENTITY_ID_PREFIX + 6,this,50,5,true);
  EntityRegistry.registerModEntity(ECiGuiPao.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  ICBMPotion.init();
  this.proxy.init();
}","@Init public void load(FMLInitializationEvent evt){
  if (blockFuShe == null) {
    blockFuShe=new BlockRadioactive(UEConfig.getBlockConfigID(CONFIGURATION,""String_Node_Str"",BLOCK_ID_PREFIX + 5),4,ICBM.BLOCK_TEXTURE_FILE);
    GameRegistry.registerBlock(blockFuShe);
  }
  LanguageRegistry.addName(blockLiu,""String_Node_Str"");
  LanguageRegistry.addName(itemLiu,""String_Node_Str"");
  LanguageRegistry.addName(itemDu,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemLeiDaQiang,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemYaoKong,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemLeiSheZhiBiao,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemJieJa,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemGenZongQi,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemHuoLaunQi,""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.itemZiDan,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.itemZiDan,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,2),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,3),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,4),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,5),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,6),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,7),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,8),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,9),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,10),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,11),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(ICBM.blockJiQi,1,12),""String_Node_Str"");
  LanguageRegistry.addName(ICBM.itemYao,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.blockBuo1LiPan,""String_Node_Str"");
  LanguageRegistry.addName(ICBM.blockYinGanQi,""String_Node_Str"");
  for (int i=0; i < ((ItTeBieDaoDan)ICBM.itemTeBieDaoDan).names.length; i++) {
    LanguageRegistry.addName(new ItemStack(ICBM.itemTeBieDaoDan,1,i),((ItTeBieDaoDan)ICBM.itemTeBieDaoDan).names[i]);
  }
  for (int i=0; i < ZhaPin.MAX_EXPLOSIVE_ID; i++) {
    if (i == 0) {
      LanguageRegistry.addName(new ItemStack(ICBM.itemDaoDan,1,i),""String_Node_Str"");
      LanguageRegistry.addName(new ItemStack(ICBM.itemShouLiuDan,1,i),""String_Node_Str"");
    }
 else {
      LanguageRegistry.addName(new ItemStack(ICBM.itemDaoDan,1,i),ZhaPin.list[i].getMing() + ""String_Node_Str"");
      if (i < 4) {
        LanguageRegistry.addName(new ItemStack(ICBM.itemShouLiuDan,1,i),ZhaPin.list[i].getMing() + ""String_Node_Str"");
      }
    }
    LanguageRegistry.addName(new ItemStack(ICBM.blockZha4Dan4,1,i),ZhaPin.list[i].getMing() + ""String_Node_Str"");
  }
  RecipeManager.addRecipe(new ItemStack(ICBM.itemZiDan,16,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.diamond,'!',BasicComponents.itemBronzeIngot});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemZiDan,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockZha4Dan4,1,ZhaPin.Antimatter.getID()),'!',ICBM.itemZiDan});
  RecipeManager.addShapelessRecipe(new ItemStack(itemDu),new Object[]{Item.fermentedSpiderEye,Item.rottenFlesh});
  RecipeManager.addSmelting(new ItemStack(blockLiu,1,0),new ItemStack(itemLiu));
  RecipeManager.addRecipe(new ItemStack(Item.gunpowder,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',itemLiu,'?',Item.coal});
  RecipeManager.addRecipe(new ItemStack(Item.gunpowder,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',itemLiu,'?',new ItemStack(Item.coal,1,1)});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemLeiDaQiang),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Block.glass,'!',BasicComponents.itemSteelPlate,'#',BasicComponents.itemCircuit,'$',Block.button});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemYaoKong),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',BasicComponents.itemSteelIngot,'?',Item.redstone,'#',new ItemStack(BasicComponents.itemCircuit,1,1),'$',Block.button});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemLeiSheZhiBiao),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',ICBM.itemYaoKong.getUnchargedItemStack(),'?',new ItemStack(BasicComponents.itemCircuit,1,2),'!',ICBM.itemLeiDaQiang.getUnchargedItemStack()});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockYinGanQi),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',BasicComponents.itemSteelPlate,'?',new ItemStack(BasicComponents.itemCircuit,1,2)});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemHuoLaunQi),new Object[]{""String_Node_Str"",""String_Node_Str"",'!',ICBM.itemYaoKong.getUnchargedItemStack(),'?',ICBM.blockYinGanQi});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemYao,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',Item.pumpkinSeeds});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemJieJa),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(BasicComponents.itemCircuit,1,1),'!',BasicComponents.itemSteelPlate,'?',BasicComponents.blockCopperWire});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',""String_Node_Str"",'@',BasicComponents.itemSteelPlate});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockJiQi,1,0),'!',""String_Node_Str""});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockJiQi,1,1),'!',BasicComponents.itemSteelPlate});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,3),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',BasicComponents.itemCircuit,'!',Block.glass,'?',BasicComponents.blockCopperWire});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',new ItemStack(BasicComponents.itemCircuit,1,1),'!',BasicComponents.itemSteelIngot,'?',BasicComponents.blockCopperWire,'$',new ItemStack(ICBM.blockJiQi,1,3)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,5),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'#',new ItemStack(BasicComponents.itemCircuit,1,2),'!',Item.ingotGold,'?',BasicComponents.blockCopperWire,'$',new ItemStack(ICBM.blockJiQi,1,4)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',""String_Node_Str""});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,7),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',BasicComponents.itemSteelIngot,'@',new ItemStack(ICBM.blockJiQi,1,6)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'!',BasicComponents.itemSteelPlate,'@',new ItemStack(ICBM.blockJiQi,1,7)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,9),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',ICBM.itemLeiDaQiang.getUnchargedItemStack(),'!',BasicComponents.itemSteelIngot,'#',new ItemStack(BasicComponents.itemCircuit,1,2),'?',Item.ingotGold});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,10),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'?',BasicComponents.itemSteelPlate,'!',new ItemStack(BasicComponents.itemCircuit,1,2),'@',BasicComponents.batteryBox,'#',BasicComponents.itemMotor});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,11),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',BasicComponents.itemSteelPlate,'!',ICBM.itemLeiDaQiang.getUnchargedItemStack(),'#',Item.diamond,'?',new ItemStack(BasicComponents.itemCircuit,1,2)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockJiQi,1,12),new Object[]{""String_Node_Str"",""String_Node_Str"",'@',BasicComponents.itemSteelPlate,'!',new ItemStack(ICBM.blockJiQi,1,2),'?',new ItemStack(ICBM.blockJiQi,1,8)});
  RecipeManager.addRecipe(new ItemStack(ICBM.blockBuo1LiPan,1,0),new Object[]{""String_Node_Str"",'#',Block.glass});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemTeBieDaoDan,1,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',""String_Node_Str"",'?',BasicComponents.itemOilBucket,'#',BasicComponents.itemCircuit});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemTeBieDaoDan,1,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.itemTeBieDaoDan,1,0),'?',new ItemStack(ICBM.blockZha4Dan4,1,0),'!',BasicComponents.itemCircuit});
  RecipeManager.addRecipe(new ItemStack(ICBM.itemTeBieDaoDan,1,2),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.itemTeBieDaoDan,1,0),'?',DaoDan.list[ZhaPin.qunDan.getID()].getItemStack(),'!',new ItemStack(ICBM.itemDaoDan,1,0)});
  for (int i=0; i < ZhaPin.MAX_EXPLOSIVE_ID; i++) {
    ZhaPin.list[i].init();
    RecipeManager.addShapelessRecipe(new ItemStack(ICBM.itemDaoDan,1,i),new Object[]{new ItemStack(ICBM.itemTeBieDaoDan,1,0),new ItemStack(ICBM.blockZha4Dan4,1,i)},ZhaPin.list[i].getDaoDanMing(),CONFIGURATION,true);
    if (i < 4) {
      RecipeManager.addRecipe(new ItemStack(ICBM.itemShouLiuDan,1,i),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'@',new ItemStack(ICBM.blockZha4Dan4,1,i),'?',Item.silk},CONFIGURATION,true);
    }
  }
  GameRegistry.registerTileEntity(TZhaDan.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TYinGanQi.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TYinXing.class,""String_Node_Str"");
  EntityRegistry.registerGlobalEntityID(EZhaDan.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EDaoDan.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EZhaPin.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EFeiBlock.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EGuang.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(ESuiPian.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(EShouLiuDan.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerGlobalEntityID(ECiGuiPao.class,""String_Node_Str"",EntityRegistry.findGlobalUniqueEntityId());
  EntityRegistry.registerModEntity(EZhaDan.class,""String_Node_Str"",ENTITY_ID_PREFIX,this,50,5,true);
  EntityRegistry.registerModEntity(EDaoDan.class,""String_Node_Str"",ENTITY_ID_PREFIX + 1,this,100,1,true);
  EntityRegistry.registerModEntity(EZhaPin.class,""String_Node_Str"",ENTITY_ID_PREFIX + 2,this,100,5,true);
  EntityRegistry.registerModEntity(EFeiBlock.class,""String_Node_Str"",ENTITY_ID_PREFIX + 3,this,50,15,true);
  EntityRegistry.registerModEntity(EGuang.class,""String_Node_Str"",ENTITY_ID_PREFIX + 4,this,80,5,true);
  EntityRegistry.registerModEntity(ESuiPian.class,""String_Node_Str"",ENTITY_ID_PREFIX + 5,this,40,8,true);
  EntityRegistry.registerModEntity(EShouLiuDan.class,""String_Node_Str"",ENTITY_ID_PREFIX + 6,this,50,5,true);
  EntityRegistry.registerModEntity(ECiGuiPao.class,""String_Node_Str"",ENTITY_ID_PREFIX + 7,this,50,5,true);
  ICBMPotion.init();
  this.proxy.init();
}",0.9999163669816844
170061,"@PreInit public void preInit(FMLPreInitializationEvent event){
  if (!Loader.isModLoaded(""String_Node_Str""))   throw new RuntimeException(""String_Node_Str"");
  UniversalElectricity.versionLock(0,9,0,true);
  NetworkRegistry.instance().registerGuiHandler(this,this.proxy);
  GameRegistry.registerDispenserHandler(new IDispenserHandler(){
    @Override public int dispense(    int x,    int y,    int z,    int xVelocity,    int zVelocity,    World world,    ItemStack item,    Random random,    double entX,    double entY,    double entZ){
      if (!world.isRemote) {
        if (item.itemID == ICBM.itemShouLiuDan.shiftedIndex) {
          EShouLiuDan entity=new EShouLiuDan(world,new Vector3(x,y,z),item.getItemDamage());
          entity.setThrowableHeading(xVelocity,0.10000000149011612D,zVelocity,1.1F,6.0F);
          world.spawnEntityInWorld(entity);
          return 1;
        }
      }
      return -1;
    }
  }
);
  GameRegistry.registerBlock(blockLiu);
  GameRegistry.registerBlock(blockBuo1LiPan);
  GameRegistry.registerBlock(blockZha4Dan4,IBZhaDan.class);
  GameRegistry.registerBlock(blockJiQi,IBJiQi.class);
  GameRegistry.registerBlock(blockYinGanQi);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
    System.out.println(""String_Node_Str"");
  }
  OreDictionary.registerOre(""String_Node_Str"",itemLiu);
  OreGenerator.addOre(liuGenData);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new DaoDanCLCallBack());
  MinecraftForge.EVENT_BUS.register(this);
  this.proxy.preInit();
}","@PreInit public void preInit(FMLPreInitializationEvent event){
  if (!Loader.isModLoaded(""String_Node_Str""))   throw new RuntimeException(""String_Node_Str"");
  UniversalElectricity.versionLock(0,9,0,true);
  UniversalElectricity.forgeLock(4,1,4,true);
  NetworkRegistry.instance().registerGuiHandler(this,this.proxy);
  GameRegistry.registerDispenserHandler(new IDispenserHandler(){
    @Override public int dispense(    int x,    int y,    int z,    int xVelocity,    int zVelocity,    World world,    ItemStack item,    Random random,    double entX,    double entY,    double entZ){
      if (!world.isRemote) {
        if (item.itemID == ICBM.itemShouLiuDan.shiftedIndex) {
          EShouLiuDan entity=new EShouLiuDan(world,new Vector3(x,y,z),item.getItemDamage());
          entity.setThrowableHeading(xVelocity,0.10000000149011612D,zVelocity,1.1F,6.0F);
          world.spawnEntityInWorld(entity);
          return 1;
        }
      }
      return -1;
    }
  }
);
  GameRegistry.registerBlock(blockLiu);
  GameRegistry.registerBlock(blockBuo1LiPan);
  GameRegistry.registerBlock(blockZha4Dan4,IBZhaDan.class);
  GameRegistry.registerBlock(blockJiQi,IBJiQi.class);
  GameRegistry.registerBlock(blockYinGanQi);
  if (OreDictionary.getOres(""String_Node_Str"").size() > 0) {
    blockFuShe=Block.blocksList[OreDictionary.getOres(""String_Node_Str"").get(0).itemID];
    System.out.println(""String_Node_Str"");
  }
  OreDictionary.registerOre(""String_Node_Str"",itemLiu);
  OreGenerator.addOre(liuGenData);
  ForgeChunkManager.setForcedChunkLoadingCallback(this,new DaoDanCLCallBack());
  MinecraftForge.EVENT_BUS.register(this);
  this.proxy.preInit();
}",0.985898221949724
170062,"public void updateLoadChunk(int oldChunkX,int oldChunkZ,int newChunkX,int newChunkZ){
  if (this.chunkTicket == null) {
    this.chunkTicket=ForgeChunkManager.requestTicket(ICBM.instance,this.worldObj,Type.ENTITY);
    this.chunkTicket.bindEntity(this);
    this.chunkTicket.getModData();
  }
  System.out.println(""String_Node_Str"" + newChunkX + ""String_Node_Str""+ newChunkZ);
  ForgeChunkManager.unforceChunk(this.chunkTicket,new ChunkCoordIntPair(oldChunkX,oldChunkZ));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(newChunkX,newChunkZ));
}","public void updateLoadChunk(){
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX + 1,this.chunkCoordZ + 1));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX + 1,this.chunkCoordZ));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX + 1,this.chunkCoordZ - 1));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX,this.chunkCoordZ + 1));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX,this.chunkCoordZ));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX,this.chunkCoordZ - 1));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX - 1,this.chunkCoordZ + 1));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX - 1,this.chunkCoordZ));
  ForgeChunkManager.forceChunk(this.chunkTicket,new ChunkCoordIntPair(this.chunkCoordX - 1,this.chunkCoordZ - 1));
}",0.3306401491609695
170063,"@Override public void readSpawnData(ByteArrayDataInput data){
  this.missileID=data.readInt();
  this.startingPosition=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
  this.missileLauncherPosition=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
  this.setPosition(this.startingPosition.x,this.startingPosition.y,this.startingPosition.z);
}","@Override public void readSpawnData(ByteArrayDataInput data){
  this.missileID=data.readInt();
  this.startingPosition=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
  this.missileLauncherPosition=new Vector3(data.readDouble(),data.readDouble(),data.readDouble());
}",0.8605697151424287
170064,"/** 
 * Called to update the entity's position/logic.
 */
@Override public void onUpdate(){
  if (this.setNormalExplode) {
    this.normalExplode();
    return;
  }
  if (this.setExplode) {
    this.explode();
    return;
  }
  super.onUpdate();
  try {
    if (this.worldObj.isRemote) {
      this.ticksInAir=this.dataWatcher.getWatchableObjectInt(16);
    }
 else {
      this.dataWatcher.updateObject(16,this.ticksInAir);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (this.ticksInAir >= 0) {
    System.out.println(this.chunkCoordX + ""String_Node_Str"" + this.chunkCoordZ);
    if (!this.worldObj.isRemote) {
      if (this.isCruise) {
        if (this.ticksInAir == 0) {
          this.motionX=this.xDifference / (flightTime * 0.5);
          this.motionY=this.yDifference / (flightTime * 0.5);
          this.motionZ=this.zDifference / (flightTime * 0.5);
        }
        this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
        this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
        DaoDan.list[this.missileID].onTickFlight(this);
        this.noClip=false;
        this.moveEntity(this.motionX,this.motionY,this.motionZ);
        Vector3 position=Vector3.get(this);
        if ((this.isCollided && this.ticksInAir >= 20) || this.ticksInAir > 20 * 600) {
          this.explode();
        }
      }
 else {
        if (this.ticksInAir < 20) {
          this.motionY=this.launchAcceleration * this.ticksInAir * (this.ticksInAir / 2);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
        }
 else         if (this.ticksInAir == 20) {
          this.motionY=this.acceleration * (this.flightTime / 2);
          this.motionX=this.xDifference / flightTime;
          this.motionZ=this.zDifference / flightTime;
        }
 else {
          Vector3 currentPosition=new Vector3(this.posX,this.posY,this.posZ);
          double currentDistance=Vector2.distance(currentPosition.toVector2(),this.muBiao.toVector2());
          this.motionY-=this.acceleration;
          this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
          this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
          DaoDan.list[this.missileID].onTickFlight(this);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
          this.lastTickPosX=this.posX;
          this.lastTickPosY=this.posY;
          this.lastTickPosZ=this.posZ;
          if (this.isCollided) {
            this.explode();
          }
          if (heightBeforeHit > 0 && this.motionY < 0) {
            int blockBelowID=this.worldObj.getBlockId((int)this.posX,(int)this.posY - heightBeforeHit,(int)this.posZ);
            if (blockBelowID > 0) {
              heightBeforeHit=0;
              this.explode();
            }
          }
        }
      }
    }
    this.spawnMissileSmoke();
    this.protectionTime--;
    this.ticksInAir++;
  }
 else {
    if (this.missileLauncherPosition == null) {
      this.setDead();
      return;
    }
    TileEntity tileEntity=this.worldObj.getBlockTileEntity((int)missileLauncherPosition.x,(int)missileLauncherPosition.y,(int)missileLauncherPosition.z);
    if (tileEntity == null) {
      this.setDead();
      return;
    }
    if (tileEntity.isInvalid()) {
      this.setDead();
      return;
    }
    if (tileEntity instanceof TFaSheDi) {
      if (((TFaSheDi)tileEntity).eDaoDan == null) {
        ((TFaSheDi)tileEntity).eDaoDan=this;
      }
    }
 else     if (tileEntity instanceof TXiaoFaSheQi) {
      if (((TXiaoFaSheQi)tileEntity).containingMissile == null) {
        ((TXiaoFaSheQi)tileEntity).containingMissile=this;
      }
      this.isCruise=true;
      this.noClip=true;
      this.xDifference=((TXiaoFaSheQi)tileEntity).getTarget().x - this.startingPosition.x;
      this.yDifference=((TXiaoFaSheQi)tileEntity).getTarget().y - this.startingPosition.y;
      this.zDifference=((TXiaoFaSheQi)tileEntity).getTarget().z - this.startingPosition.z;
      this.flatDistance=Vector2.distance(this.startingPosition.toVector2(),((TXiaoFaSheQi)tileEntity).getTarget().toVector2());
      this.skyLimit=150 + (int)(this.flatDistance * 1.8);
      this.flightTime=(float)Math.max(100,2.4 * flatDistance);
      this.acceleration=(float)skyLimit * 2 / (flightTime * flightTime);
      this.motionX=this.xDifference / (flightTime * 0.6);
      this.motionY=this.yDifference / (flightTime * 0.6);
      this.motionZ=this.zDifference / (flightTime * 0.6);
      float newRotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
      float newRotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
      if (newRotationYaw - this.rotationYaw != 0) {
        this.rotationYaw+=(newRotationYaw - this.rotationYaw) * 0.1;
      }
      if (newRotationPitch - this.rotationPitch != 0) {
        this.rotationPitch+=(newRotationPitch - this.rotationPitch) * 0.1;
      }
    }
  }
}","/** 
 * Called to update the entity's position/logic.
 */
@Override public void onUpdate(){
  if (this.setNormalExplode) {
    this.normalExplode();
    return;
  }
  if (this.setExplode) {
    this.explode();
    return;
  }
  super.onUpdate();
  try {
    if (this.worldObj.isRemote) {
      this.ticksInAir=this.dataWatcher.getWatchableObjectInt(16);
    }
 else {
      this.dataWatcher.updateObject(16,this.ticksInAir);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (this.ticksInAir >= 0) {
    this.updateLoadChunk();
    if (!this.worldObj.isRemote) {
      if (this.isCruise) {
        if (this.ticksInAir == 0) {
          this.motionX=this.xDifference / (flightTime * 0.5);
          this.motionY=this.yDifference / (flightTime * 0.5);
          this.motionZ=this.zDifference / (flightTime * 0.5);
        }
        this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
        this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
        DaoDan.list[this.missileID].onTickFlight(this);
        this.noClip=false;
        this.moveEntity(this.motionX,this.motionY,this.motionZ);
        Vector3 position=Vector3.get(this);
        if ((this.isCollided && this.ticksInAir >= 20) || this.ticksInAir > 20 * 600) {
          this.explode();
        }
      }
 else {
        if (this.ticksInAir < 20) {
          this.motionY=this.launchAcceleration * this.ticksInAir * (this.ticksInAir / 2);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
        }
 else         if (this.ticksInAir == 20) {
          this.motionY=this.acceleration * (this.flightTime / 2);
          this.motionX=this.xDifference / flightTime;
          this.motionZ=this.zDifference / flightTime;
        }
 else {
          Vector3 currentPosition=new Vector3(this.posX,this.posY,this.posZ);
          double currentDistance=Vector2.distance(currentPosition.toVector2(),this.muBiao.toVector2());
          this.motionY-=this.acceleration;
          this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
          this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
          DaoDan.list[this.missileID].onTickFlight(this);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
          this.lastTickPosX=this.posX;
          this.lastTickPosY=this.posY;
          this.lastTickPosZ=this.posZ;
          if (this.isCollided) {
            this.explode();
          }
          if (heightBeforeHit > 0 && this.motionY < 0) {
            int blockBelowID=this.worldObj.getBlockId((int)this.posX,(int)this.posY - heightBeforeHit,(int)this.posZ);
            if (blockBelowID > 0) {
              heightBeforeHit=0;
              this.explode();
            }
          }
        }
      }
    }
    this.spawnMissileSmoke();
    this.protectionTime--;
    this.ticksInAir++;
  }
 else {
    if (this.missileLauncherPosition == null) {
      this.setDead();
      return;
    }
    TileEntity tileEntity=this.worldObj.getBlockTileEntity((int)missileLauncherPosition.x,(int)missileLauncherPosition.y,(int)missileLauncherPosition.z);
    if (tileEntity == null) {
      this.setDead();
      return;
    }
    if (tileEntity.isInvalid()) {
      this.setDead();
      return;
    }
    if (tileEntity instanceof TFaSheDi) {
      if (((TFaSheDi)tileEntity).eDaoDan == null) {
        ((TFaSheDi)tileEntity).eDaoDan=this;
      }
    }
 else     if (tileEntity instanceof TXiaoFaSheQi) {
      if (((TXiaoFaSheQi)tileEntity).containingMissile == null) {
        ((TXiaoFaSheQi)tileEntity).containingMissile=this;
      }
      this.isCruise=true;
      this.noClip=true;
      this.xDifference=((TXiaoFaSheQi)tileEntity).getTarget().x - this.startingPosition.x;
      this.yDifference=((TXiaoFaSheQi)tileEntity).getTarget().y - this.startingPosition.y;
      this.zDifference=((TXiaoFaSheQi)tileEntity).getTarget().z - this.startingPosition.z;
      this.flatDistance=Vector2.distance(this.startingPosition.toVector2(),((TXiaoFaSheQi)tileEntity).getTarget().toVector2());
      this.skyLimit=150 + (int)(this.flatDistance * 1.8);
      this.flightTime=(float)Math.max(100,2.4 * flatDistance);
      this.acceleration=(float)skyLimit * 2 / (flightTime * flightTime);
      this.motionX=this.xDifference / (flightTime * 0.6);
      this.motionY=this.yDifference / (flightTime * 0.6);
      this.motionZ=this.zDifference / (flightTime * 0.6);
      float newRotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
      float newRotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
      if (newRotationYaw - this.rotationYaw != 0) {
        this.rotationYaw+=(newRotationYaw - this.rotationYaw) * 0.1;
      }
      if (newRotationPitch - this.rotationPitch != 0) {
        this.rotationPitch+=(newRotationPitch - this.rotationPitch) * 0.1;
      }
    }
  }
}",0.9919378338999514
170065,"public EntityMissile(World par1World,Vector3 position,Vector3 launcherPosition,int metadata,boolean noClip){
  this(par1World,position,launcherPosition,metadata);
  this.noClip=noClip;
}","/** 
 * Spawns a traditional missile
 */
public EntityMissile(World par1World,Vector3 position,Vector3 launcherPosition,int metadata){
  this(par1World);
  this.missileID=metadata;
  this.startingPosition=position;
  this.missileLauncherPosition=launcherPosition;
  this.setPosition(this.startingPosition.x,this.startingPosition.y,this.startingPosition.z);
  this.setRotation(0,90);
}",0.4842105263157895
170066,"/** 
 * Called to update the entity's position/logic.
 */
@Override public void onUpdate(){
  super.onUpdate();
  try {
    if (this.worldObj.isRemote) {
      this.ticksInAir=this.dataWatcher.getWatchableObjectInt(16);
    }
 else {
      this.dataWatcher.updateObject(16,this.ticksInAir);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (this.ticksInAir >= 0) {
    if (!this.worldObj.isRemote) {
      if (this.isCruise) {
        if (this.ticksInAir == 0) {
          this.motionX=this.xDifference / (flightTime * 0.5);
          this.motionY=this.yDifference / (flightTime * 0.5);
          this.motionZ=this.zDifference / (flightTime * 0.5);
        }
        this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
        this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
        Missile.list[this.missileID].onTickFlight(this);
        this.noClip=true;
        this.moveEntity(this.motionX,this.motionY,this.motionZ);
        Vector3 position=Vector3.get(this);
        this.isCollided=this.worldObj.getBlockId(MathHelper.floor_double(this.posX),MathHelper.floor_double(this.posY),MathHelper.floor_double(this.posZ)) != 0;
        if ((this.isCollided && this.ticksInAir >= 20) || this.ticksInAir > 20 * 600) {
          this.explode();
        }
      }
 else {
        if (this.ticksInAir < 20) {
          this.motionY=this.launchAcceleration * this.ticksInAir * (this.ticksInAir / 2);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
        }
 else         if (this.ticksInAir == 20) {
          this.motionY=this.acceleration * (this.flightTime / 2);
          this.motionX=this.xDifference / flightTime;
          this.motionZ=this.zDifference / flightTime;
        }
 else {
          if (this.ticksInAir > 20 * 60) {
            this.explode();
          }
          Vector3 currentPosition=new Vector3(this.posX,this.posY,this.posZ);
          double currentDistance=Vector2.distance(currentPosition.toVector2(),this.targetPosition.toVector2());
          this.motionY-=this.acceleration;
          this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
          this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
          Missile.list[this.missileID].onTickFlight(this);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
          this.lastTickPosX=this.posX;
          this.lastTickPosY=this.posY;
          this.lastTickPosZ=this.posZ;
          if (this.isCollided) {
            this.explode();
          }
          if (heightBeforeHit > 0 && this.motionY < 0) {
            int blockBelowID=this.worldObj.getBlockId((int)this.posX,(int)this.posY - heightBeforeHit,(int)this.posZ);
            if (blockBelowID > 0) {
              heightBeforeHit=0;
              this.explode();
            }
          }
        }
      }
    }
    this.spawnMissileSmoke();
    this.protectionTime--;
    this.ticksInAir++;
  }
 else {
    if (this.missileLauncherPosition == null) {
      this.setDead();
      return;
    }
    TileEntity tileEntity=this.worldObj.getBlockTileEntity((int)missileLauncherPosition.x,(int)missileLauncherPosition.y,(int)missileLauncherPosition.z);
    if (tileEntity == null) {
      this.setDead();
      return;
    }
    if (tileEntity.isInvalid()) {
      this.setDead();
      return;
    }
    if (tileEntity instanceof TileEntityLauncherBase) {
      if (((TileEntityLauncherBase)tileEntity).containingMissile == null) {
        ((TileEntityLauncherBase)tileEntity).containingMissile=this;
      }
      this.setSize(0.8F,2.5F);
    }
 else     if (tileEntity instanceof TileEntityCruiseLauncher) {
      if (((TileEntityCruiseLauncher)tileEntity).containingMissile == null) {
        ((TileEntityCruiseLauncher)tileEntity).containingMissile=this;
      }
      this.isCruise=true;
      this.xDifference=((TileEntityCruiseLauncher)tileEntity).target.x - this.startingPosition.x;
      this.yDifference=((TileEntityCruiseLauncher)tileEntity).target.y - this.startingPosition.y;
      this.zDifference=((TileEntityCruiseLauncher)tileEntity).target.z - this.startingPosition.z;
      this.flatDistance=Vector2.distance(this.startingPosition.toVector2(),((TileEntityCruiseLauncher)tileEntity).target.toVector2());
      this.skyLimit=150 + (int)(this.flatDistance * 1.8);
      this.flightTime=(float)Math.max(100,2.4 * flatDistance);
      this.acceleration=(float)skyLimit * 2 / (flightTime * flightTime);
      this.motionX=this.xDifference / (flightTime * 0.6);
      this.motionY=this.yDifference / (flightTime * 0.6);
      this.motionZ=this.zDifference / (flightTime * 0.6);
      float newRotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
      float newRotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
      if (newRotationYaw - this.rotationYaw != 0) {
        this.rotationYaw+=(newRotationYaw - this.rotationYaw) * 0.1;
      }
      if (newRotationPitch - this.rotationPitch != 0) {
        this.rotationPitch+=(newRotationPitch - this.rotationPitch) * 0.1;
      }
    }
  }
}","/** 
 * Called to update the entity's position/logic.
 */
@Override public void onUpdate(){
  super.onUpdate();
  try {
    if (this.worldObj.isRemote) {
      this.ticksInAir=this.dataWatcher.getWatchableObjectInt(16);
    }
 else {
      this.dataWatcher.updateObject(16,this.ticksInAir);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (this.ticksInAir >= 0) {
    if (!this.worldObj.isRemote) {
      if (this.isCruise) {
        if (this.ticksInAir == 0) {
          this.motionX=this.xDifference / (flightTime * 0.5);
          this.motionY=this.yDifference / (flightTime * 0.5);
          this.motionZ=this.zDifference / (flightTime * 0.5);
        }
        this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
        this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
        Missile.list[this.missileID].onTickFlight(this);
        this.moveEntity(this.motionX,this.motionY,this.motionZ);
        Vector3 position=Vector3.get(this);
        this.isCollided=this.worldObj.getBlockId(MathHelper.floor_double(this.posX),MathHelper.floor_double(this.posY),MathHelper.floor_double(this.posZ)) != 0;
        if ((this.isCollided && this.ticksInAir >= 20) || this.ticksInAir > 20 * 600) {
          this.explode();
        }
      }
 else {
        if (this.ticksInAir < 20) {
          this.motionY=this.launchAcceleration * this.ticksInAir * (this.ticksInAir / 2);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
        }
 else         if (this.ticksInAir == 20) {
          this.motionY=this.acceleration * (this.flightTime / 2);
          this.motionX=this.xDifference / flightTime;
          this.motionZ=this.zDifference / flightTime;
        }
 else {
          if (this.ticksInAir > 20 * 60) {
            this.explode();
          }
          Vector3 currentPosition=new Vector3(this.posX,this.posY,this.posZ);
          double currentDistance=Vector2.distance(currentPosition.toVector2(),this.targetPosition.toVector2());
          this.motionY-=this.acceleration;
          this.rotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
          this.rotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
          Missile.list[this.missileID].onTickFlight(this);
          this.moveEntity(this.motionX,this.motionY,this.motionZ);
          this.lastTickPosX=this.posX;
          this.lastTickPosY=this.posY;
          this.lastTickPosZ=this.posZ;
          if (this.isCollided) {
            this.explode();
          }
          if (heightBeforeHit > 0 && this.motionY < 0) {
            int blockBelowID=this.worldObj.getBlockId((int)this.posX,(int)this.posY - heightBeforeHit,(int)this.posZ);
            if (blockBelowID > 0) {
              heightBeforeHit=0;
              this.explode();
            }
          }
        }
      }
    }
    this.spawnMissileSmoke();
    this.protectionTime--;
    this.ticksInAir++;
  }
 else {
    if (this.missileLauncherPosition == null) {
      this.setDead();
      return;
    }
    TileEntity tileEntity=this.worldObj.getBlockTileEntity((int)missileLauncherPosition.x,(int)missileLauncherPosition.y,(int)missileLauncherPosition.z);
    if (tileEntity == null) {
      this.setDead();
      return;
    }
    if (tileEntity.isInvalid()) {
      this.setDead();
      return;
    }
    if (tileEntity instanceof TileEntityLauncherBase) {
      if (((TileEntityLauncherBase)tileEntity).containingMissile == null) {
        ((TileEntityLauncherBase)tileEntity).containingMissile=this;
      }
    }
 else     if (tileEntity instanceof TileEntityCruiseLauncher) {
      if (((TileEntityCruiseLauncher)tileEntity).containingMissile == null) {
        ((TileEntityCruiseLauncher)tileEntity).containingMissile=this;
      }
      this.isCruise=true;
      this.noClip=true;
      this.xDifference=((TileEntityCruiseLauncher)tileEntity).target.x - this.startingPosition.x;
      this.yDifference=((TileEntityCruiseLauncher)tileEntity).target.y - this.startingPosition.y;
      this.zDifference=((TileEntityCruiseLauncher)tileEntity).target.z - this.startingPosition.z;
      this.flatDistance=Vector2.distance(this.startingPosition.toVector2(),((TileEntityCruiseLauncher)tileEntity).target.toVector2());
      this.skyLimit=150 + (int)(this.flatDistance * 1.8);
      this.flightTime=(float)Math.max(100,2.4 * flatDistance);
      this.acceleration=(float)skyLimit * 2 / (flightTime * flightTime);
      this.motionX=this.xDifference / (flightTime * 0.6);
      this.motionY=this.yDifference / (flightTime * 0.6);
      this.motionZ=this.zDifference / (flightTime * 0.6);
      float newRotationPitch=(float)(Math.atan(this.motionY / (Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ))) * 180 / Math.PI);
      float newRotationYaw=(float)(Math.atan2(this.motionX,this.motionZ) * 180 / Math.PI);
      if (newRotationYaw - this.rotationYaw != 0) {
        this.rotationYaw+=(newRotationYaw - this.rotationYaw) * 0.1;
      }
      if (newRotationPitch - this.rotationPitch != 0) {
        this.rotationPitch+=(newRotationPitch - this.rotationPitch) * 0.1;
      }
    }
  }
}",0.9923993619217416
170067,"@Override public void onUpdate(float amps,float voltage,ForgeDirection side){
  if (!this.worldObj.isRemote) {
    super.onUpdate(amps,voltage,side);
    this.electricityStored+=amps;
    if (this.getYawFromTarget() - this.rotationYaw != 0) {
      this.rotationYaw+=(this.getYawFromTarget() - this.rotationYaw) * 0.1;
    }
    if (this.getPitchFromTarget() - this.rotationPitch != 0) {
      this.rotationPitch+=(this.getPitchFromTarget() - this.rotationPitch) * 0.1;
    }
    if (this.containingItems[0] != null) {
      if (this.containingItems[0].getItem() instanceof ItemMissile) {
        int missileId=this.containingItems[0].getItemDamage();
        if (!(this.containingItems[0].getItem() instanceof ItemSpecialMissile) && Missile.list[missileId].isCruise() && Missile.list[missileId].getTier() <= 3 && containingMissile == null) {
          Vector3 startingPosition=new Vector3((this.xCoord + 0.5f),(this.yCoord + 0.5),(this.zCoord + 0.5f));
          this.containingMissile=new EntityMissile(this.worldObj,startingPosition,Vector3.get(this),missileId,true);
          this.worldObj.spawnEntityInWorld(this.containingMissile);
        }
 else         if (this.containingMissile != null && this.containingMissile.missileID != missileId) {
          if (this.containingMissile != null)           this.containingMissile.setDead();
          this.containingMissile=null;
        }
      }
 else {
        if (this.containingMissile != null)         this.containingMissile.setDead();
        this.containingMissile=null;
      }
    }
 else {
      if (this.containingMissile != null)       this.containingMissile.setDead();
      this.containingMissile=null;
    }
    if (this.isPowered) {
      if (canLaunch()) {
        this.launch();
      }
      this.isPowered=false;
    }
    if (this.target == null)     this.target=new Vector3(this.xCoord,this.yCoord,this.zCoord);
    PacketManager.sendTileEntityPacket(this,""String_Node_Str"",(int)0,this.electricityStored,this.frequency,this.disabledTicks,this.rotationYaw,this.rotationPitch,this.target.x,this.target.y,this.target.z);
  }
}","@Override public void onUpdate(float amps,float voltage,ForgeDirection side){
  if (!this.worldObj.isRemote) {
    super.onUpdate(amps,voltage,side);
    this.electricityStored+=amps;
    if (this.getYawFromTarget() - this.rotationYaw != 0) {
      this.rotationYaw+=(this.getYawFromTarget() - this.rotationYaw) * 0.1;
    }
    if (this.getPitchFromTarget() - this.rotationPitch != 0) {
      this.rotationPitch+=(this.getPitchFromTarget() - this.rotationPitch) * 0.1;
    }
    if (this.containingItems[0] != null) {
      if (this.containingItems[0].getItem() instanceof ItemMissile) {
        int missileId=this.containingItems[0].getItemDamage();
        if (!(this.containingItems[0].getItem() instanceof ItemSpecialMissile) && Missile.list[missileId].isCruise() && Missile.list[missileId].getTier() <= 3 && containingMissile == null) {
          Vector3 startingPosition=new Vector3((this.xCoord + 0.5f),(this.yCoord + 0.2f),(this.zCoord + 0.5f));
          this.containingMissile=new EntityMissile(this.worldObj,startingPosition,Vector3.get(this),missileId);
          this.worldObj.spawnEntityInWorld(this.containingMissile);
        }
 else         if (this.containingMissile != null && this.containingMissile.missileID != missileId) {
          if (this.containingMissile != null)           this.containingMissile.setDead();
          this.containingMissile=null;
        }
      }
 else {
        if (this.containingMissile != null)         this.containingMissile.setDead();
        this.containingMissile=null;
      }
    }
 else {
      if (this.containingMissile != null)       this.containingMissile.setDead();
      this.containingMissile=null;
    }
    if (this.isPowered) {
      if (canLaunch()) {
        this.launch();
      }
      this.isPowered=false;
    }
    if (this.target == null)     this.target=new Vector3(this.xCoord,this.yCoord,this.zCoord);
    PacketManager.sendTileEntityPacket(this,""String_Node_Str"",(int)0,this.electricityStored,this.frequency,this.disabledTicks,this.rotationYaw,this.rotationPitch,this.target.x,this.target.y,this.target.z);
  }
}",0.998088867654085
170068,"@Override public void init(){
  RenderingRegistry.registerEntityRenderingHandler(EntityExplosive.class,new RenderExplosive());
  RenderingRegistry.registerEntityRenderingHandler(EntityMissile.class,new RenderMissile(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProceduralExplosion.class,new RenderProceduralExplosion());
  RenderingRegistry.registerEntityRenderingHandler(EntityGravityBlock.class,new RenderGravityBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityLightBeam.class,new RenderLightBeam());
  RenderingRegistry.registerEntityRenderingHandler(EntityFragment.class,new RenderFragment());
  RenderingRegistry.registerEntityRenderingHandler(EntityGrenade.class,new RenderGrenade());
  RenderingRegistry.registerEntityRenderingHandler(EntityRailgun.class,new RenderInvisible());
  TextureFXManager.instance().addAnimation(new TextureTrackerFX(FMLClientHandler.instance().getClient()));
  ClientRegistry.registerTileEntity(TileEntityRailgun.class,""String_Node_Str"",new RenderRailgun());
  ClientRegistry.registerTileEntity(TileEntityCruiseLauncher.class,""String_Node_Str"",new RenderCruiseLauncher());
  ClientRegistry.registerTileEntity(TileEntityLauncherBase.class,""String_Node_Str"",new RenderLauncherBase());
  ClientRegistry.registerTileEntity(TileEntityLauncherScreen.class,""String_Node_Str"",new RenderLauncherScreen());
  ClientRegistry.registerTileEntity(TileEntityLauncherFrame.class,""String_Node_Str"",new RenderLauncherFrame());
  ClientRegistry.registerTileEntity(TileEntityRadarStation.class,""String_Node_Str"",new RenderRadarStation());
  ClientRegistry.registerTileEntity(TileEntityEMPTower.class,""String_Node_Str"",new RenderEMPTower());
}","@Override public void init(){
  RenderingRegistry.registerEntityRenderingHandler(EntityExplosive.class,new RenderExplosive());
  RenderingRegistry.registerEntityRenderingHandler(EntityMissile.class,new RenderMissile(0.5F));
  RenderingRegistry.registerEntityRenderingHandler(EntityProceduralExplosion.class,new RenderProceduralExplosion());
  RenderingRegistry.registerEntityRenderingHandler(EntityGravityBlock.class,new RenderGravityBlock());
  RenderingRegistry.registerEntityRenderingHandler(EntityLightBeam.class,new RenderLightBeam());
  RenderingRegistry.registerEntityRenderingHandler(EntityFragment.class,new RenderFragment());
  RenderingRegistry.registerEntityRenderingHandler(EntityGrenade.class,new RenderGrenade());
  RenderingRegistry.registerEntityRenderingHandler(EntityRailgun.class,new RenderInvisible());
  ClientRegistry.registerTileEntity(TileEntityRailgun.class,""String_Node_Str"",new RenderRailgun());
  ClientRegistry.registerTileEntity(TileEntityCruiseLauncher.class,""String_Node_Str"",new RenderCruiseLauncher());
  ClientRegistry.registerTileEntity(TileEntityLauncherBase.class,""String_Node_Str"",new RenderLauncherBase());
  ClientRegistry.registerTileEntity(TileEntityLauncherScreen.class,""String_Node_Str"",new RenderLauncherScreen());
  ClientRegistry.registerTileEntity(TileEntityLauncherFrame.class,""String_Node_Str"",new RenderLauncherFrame());
  ClientRegistry.registerTileEntity(TileEntityRadarStation.class,""String_Node_Str"",new RenderRadarStation());
  ClientRegistry.registerTileEntity(TileEntityEMPTower.class,""String_Node_Str"",new RenderEMPTower());
}",0.9673879914660164
170069,"@Override public void validate(Object target,Errors errors){
  ResourceServerProperties resource=(ResourceServerProperties)target;
  if (StringUtils.hasText(client.getClientId())) {
    if (!StringUtils.hasText(client.getClientSecret())) {
      if (!StringUtils.hasText(resource.getUserInfoUri())) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      if (!StringUtils.hasText(resource.getTokenInfoUri())) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
}","@Override public void validate(Object target,Errors errors){
  ResourceServerProperties resource=(ResourceServerProperties)target;
  if (StringUtils.hasText(client.getClientId())) {
    if (!StringUtils.hasText(client.getClientSecret())) {
      if (!StringUtils.hasText(resource.getUserInfoUri())) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      if (isPreferTokenInfo() && !StringUtils.hasText(resource.getTokenInfoUri())) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
}",0.9802235597592434
170070,void configure(HttpSecurity http);,void configure(HttpSecurity http) throws Exception ;,0.7906976744186046
170071,"public void send(SendFileSpec sendFile,Consumer<InputStream> callback){
  try {
    LinkedList<String> args=new LinkedList<>();
    args.addAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
    for (    Snapshot s : sendFile.cloneSources) {
      args.add(""String_Node_Str"");
      args.add(s.getSnapshotDir().toAbsolutePath().toString());
    }
    args.add(sendFile.target.getSnapshotDir().toAbsolutePath().toString());
    Process process=processBuilder(args).redirectOutput(Redirect.PIPE).start();
    callback.consume(process.getInputStream());
    int exitValue=process.waitFor();
    if (exitValue != 0) {
      throw new IOException(""String_Node_Str"" + exitValue);
    }
  }
 catch (  IOException|InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"" + sendFile,e);
  }
}","public void send(SendFileSpec sendFile,Consumer<InputStream> callback){
  try {
    LinkedList<String> args=new LinkedList<>();
    args.addAll(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
{
      boolean firstSource=true;
      for (      Snapshot s : sendFile.cloneSources) {
        if (firstSource) {
          args.add(""String_Node_Str"");
          firstSource=false;
        }
 else {
          args.add(""String_Node_Str"");
        }
        args.add(s.getSnapshotDir().toAbsolutePath().toString());
      }
    }
    args.add(sendFile.target.getSnapshotDir().toAbsolutePath().toString());
    Process process=processBuilder(args).redirectOutput(Redirect.PIPE).start();
    callback.consume(process.getInputStream());
    int exitValue=process.waitFor();
    if (exitValue != 0) {
      throw new IOException(""String_Node_Str"" + exitValue);
    }
  }
 catch (  IOException|InterruptedException e) {
    throw new RuntimeException(""String_Node_Str"" + sendFile,e);
  }
}",0.8943543879262158
170072,"/** 
 * Create a   {@link StreamState} for a stream
 * @param senderStreamId
 * @param isNew
 */
public StreamState calculateStreamState(Stream stream,UUID senderStreamId,boolean isNew){
  StreamState result=new StreamState();
  result.isNewStream=isNew;
  for (  Snapshot sn : streamService.getSnapshots(stream).values()) {
    if (Objects.equal(senderStreamId,sn.senderStreamId)) {
      result.availableSnapshotNumbers.add(sn.nr);
    }
  }
  result.availableSnapshotNumbers.addAll(streamService.getSnapshots(stream).keySet());
  return result;
}","/** 
 * Create a   {@link StreamState} for a stream
 * @param isNew
 */
public StreamState calculateStreamState(Stream stream,boolean isNew){
  StreamState result=new StreamState();
  result.isNewStream=isNew;
  for (  Snapshot sn : streamService.getSnapshots(stream).values()) {
    result.availableSnapshots.add(new SnapshotEntry(sn));
  }
  return result;
}",0.6842684268426843
170073,"List<SendFileSpec> determineSendFiles(TreeMap<Integer,Snapshot> sourceSnapshots,VersionHistory versionHistory,Set<Integer> targetSnapshotNrs){
  List<Snapshot> missingSnapshots=calculateMissingSnapshots(sourceSnapshots.values(),targetSnapshotNrs);
  TreeSet<Integer> availableCloneSources=new TreeSet<>();
  for (  int nr : targetSnapshotNrs) {
    if (sourceSnapshots.containsKey(nr)) {
      availableCloneSources.add(nr);
    }
  }
  ArrayList<SendFileSpec> result=new ArrayList<>();
  for (  Snapshot snapshot : missingSnapshots) {
    SendFileSpec spec=new SendFileSpec();
    spec.target=snapshot;
{
      Integer nextNr=calculateNextSnapshotNr(snapshot,availableCloneSources);
      if (nextNr != null) {
        spec.cloneSources.add(sourceSnapshots.get(nextNr));
      }
    }
{
      Set<Integer> ancestors=calculateAncestorNrs(snapshot,versionHistory,availableCloneSources);
      for (      Integer ancestorNr : ancestors) {
        spec.cloneSources.add(sourceSnapshots.get(ancestorNr));
      }
    }
    result.add(spec);
    availableCloneSources.add(snapshot.nr);
  }
  return result;
}","List<SendFileSpec> determineSendFiles(UUID sourceStreamId,TreeMap<Integer,Snapshot> sourceSnapshots,VersionHistory versionHistory,Set<SnapshotEntry> availableSnapshots){
  List<Snapshot> missingSnapshots=calculateMissingSnapshots(sourceSnapshots.values(),availableSnapshots);
  TreeSet<Integer> availableCloneSources=new TreeSet<>();
  for (  SnapshotEntry entry : availableSnapshots) {
    if (sourceSnapshots.containsKey(entry.snapshotNr) && Objects.equal(entry.senderStreamId,sourceStreamId)) {
      availableCloneSources.add(entry.snapshotNr);
    }
  }
  ArrayList<SendFileSpec> result=new ArrayList<>();
  for (  Snapshot snapshot : missingSnapshots) {
    SendFileSpec spec=new SendFileSpec();
    spec.target=snapshot;
{
      Integer nextNr=calculateNextSnapshotNr(snapshot,availableCloneSources);
      if (nextNr != null) {
        spec.cloneSources.add(sourceSnapshots.get(nextNr));
      }
    }
{
      Set<Integer> ancestors=calculateAncestorNrs(snapshot,versionHistory,availableCloneSources);
      for (      Integer ancestorNr : ancestors) {
        spec.cloneSources.add(sourceSnapshots.get(ancestorNr));
      }
    }
    result.add(spec);
    availableCloneSources.add(snapshot.nr);
  }
  return result;
}",0.7939914163090128
170074,"/** 
 * Determines the ancestors of the given snapshot which are available on the target
 */
Set<Integer> calculateAncestorNrs(Snapshot snapshot,VersionHistory versionHistory,TreeSet<Integer> availableCloneSources){
  Set<Integer> result=new HashSet<>();
  TreeMap<Integer,HistoryNode> nodes=versionHistory.calculateNodes();
  log.debug(""String_Node_Str"" + nodes);
  HistoryNode node=nodes.get(snapshot.nr);
  fillAvailableAncestors(node,result,availableCloneSources);
  return result;
}","/** 
 * Determines the ancestors of the given snapshot which are available on the target
 */
Set<Integer> calculateAncestorNrs(Snapshot snapshot,VersionHistory versionHistory,TreeSet<Integer> availableCloneSources){
  Set<Integer> result=new HashSet<>();
  TreeMap<Integer,HistoryNode> nodes=versionHistory.calculateNodes();
  HistoryNode node=nodes.get(snapshot.nr);
  fillAvailableAncestors(node,result,availableCloneSources);
  return result;
}",0.734475374732334
170075,"List<Snapshot> calculateMissingSnapshots(Collection<Snapshot> sourceSnapshots,Set<Integer> targetSnapshotNrs){
  List<Snapshot> result=new ArrayList<>();
  for (  Snapshot s : sourceSnapshots) {
    if (!targetSnapshotNrs.contains(s.nr)) {
      result.add(s);
    }
  }
  return result;
}","List<Snapshot> calculateMissingSnapshots(Collection<Snapshot> sourceSnapshots,Set<SnapshotEntry> availableSnapshots){
  List<Snapshot> result=new ArrayList<>();
  HashSet<Integer> availableSnapshotNrs=new HashSet<>();
  for (  SnapshotEntry e : availableSnapshots) {
    availableSnapshotNrs.add(e.snapshotNr);
  }
  for (  Snapshot s : sourceSnapshots) {
    if (!availableSnapshotNrs.contains(s.nr)) {
      result.add(s);
    }
  }
  return result;
}",0.5714285714285714
170076,"private void parseCmdLine(String[] args){
  CmdLineParser parser=new CmdLineParser(this);
  parser.setUsageWidth(80);
  try {
    parser.parseArgument(args);
    if (arguments.isEmpty()) {
      throw new CmdLineException(parser,""String_Node_Str"");
    }
  }
 catch (  CmdLineException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    try {
      ByteStreams.copy(getClass().getResourceAsStream(""String_Node_Str""),System.err);
    }
 catch (    IOException e1) {
      throw new RuntimeException(""String_Node_Str"",e1);
    }
    System.err.println(""String_Node_Str"");
    parser.printUsage(System.err);
    System.err.println();
    System.exit(1);
  }
  btrfsService.setUseSudo(sudoLocalBtrfs);
  sshService.setSudoRemoteBtrbck(sudoRemoteBtrbck);
  sshService.setSudoRemoteBtrfs(sudoRemoteBtrfs);
  if (verbose) {
    org.apache.log4j.Logger.getRootLogger().setLevel(Level.DEBUG);
    sshService.setVerboseRemote(verbose);
  }
}","private void parseCmdLine(String[] args){
  CmdLineParser parser=new CmdLineParser(this);
  parser.setUsageWidth(80);
  try {
    parser.parseArgument(args);
    if (arguments.isEmpty()) {
      throw new CmdLineException(parser,""String_Node_Str"");
    }
  }
 catch (  CmdLineException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    try {
      ByteStreams.copy(getClass().getResourceAsStream(""String_Node_Str""),System.err);
    }
 catch (    IOException e1) {
      throw new RuntimeException(""String_Node_Str"",e1);
    }
    System.err.println(""String_Node_Str"");
    parser.printUsage(System.err);
    System.err.println();
    System.exit(1);
  }
  btrfsService.setUseSudo(sudoLocalBtrfs);
  btrfsService.setUseStrace(useStrace);
  sshService.setSudoRemoteBtrbck(sudoRemoteBtrbck);
  sshService.setSudoRemoteBtrfs(sudoRemoteBtrfs);
  if (verbose) {
    org.apache.log4j.Logger.getRootLogger().setLevel(Level.DEBUG);
    sshService.setVerboseRemote(verbose);
  }
}",0.9793601651186792
170077,"int compute(String arg) throws Exception {
  ComputeConfig config=ConfigHelper.parseComputeConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  Dataset<GenericRecord> data=Datasets.load(config.uri);
  PCollection<GenericRecord> input=null;
  if (!config.path.isEmpty()) {
    input=(PCollection)p.read(From.avroFile(config.path));
  }
 else {
    input=p.read(CrunchDatasets.asSource(data));
  }
  RecordToExhibit rte=new RecordToExhibit(config.tempTables);
  ExhibitDescriptor descriptor=rte.getDescriptor(input.getPType());
  PCollection<Exhibit> exhibits=rte.apply(input);
  List<OutputGen> outputGens=Lists.newArrayList();
  Set<Schema> keySchemas=Sets.newHashSet();
  List<List<SchemaProvider>> providerLists=Lists.newArrayList();
  Set<Schema> interValueSchemas=Sets.newHashSet();
  List<Schema> outputSchemas=Lists.newArrayList();
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    OutputGen gen=new OutputGen(i,output,descriptor);
    Schema keySchema=gen.getKeySchema();
    List<SchemaProvider> providers=gen.getSchemaProviders();
    List<Schema.Field> outputFields=Lists.newArrayList();
    for (    Schema.Field sf : keySchema.getFields()) {
      outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
    }
    for (    SchemaProvider sp : providers) {
      Schema s=sp.get(1);
      for (      Schema.Field sf : s.getFields()) {
        outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
      }
    }
    Schema outputSchema=Schema.createRecord(""String_Node_Str"" + i,""String_Node_Str"",""String_Node_Str"",false);
    outputSchema.setFields(outputFields);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ outputSchema.toString(true));
    keySchemas.add(keySchema);
    interValueSchemas.addAll(Lists.transform(providers,new Function<SchemaProvider,Schema>(){
      @Nullable @Override public Schema apply(      SchemaProvider schemaProvider){
        return schemaProvider.get(0);
      }
    }
));
    outputGens.add(gen);
    outputSchemas.add(outputSchema);
    providerLists.add(providers);
  }
  Schema keySchema=unionKeySchema(""String_Node_Str"",Lists.newArrayList(keySchemas));
  Schema interValueSchema=unionValueSchema(""String_Node_Str"",Lists.newArrayList(interValueSchemas));
  SchemaProvider provider=new SchemaProvider(ImmutableList.of(keySchema,interValueSchema));
  AvroType<GenericData.Record> keyType=Avros.generics(keySchema);
  AvroType<GenericData.Record> interValueType=Avros.generics(interValueSchema);
  PTableType<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> ptt=Avros.tableOf(Avros.pairs(keyType,Avros.ints()),Avros.pairs(Avros.ints(),interValueType));
  PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> mapside=null;
  for (int i=0; i < outputGens.size(); i++) {
    PTable<GenericData.Record,Pair<Integer,GenericData.Record>> out=outputGens.get(i).apply(exhibits);
    PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> m=out.parallelDo(new SchemaMapFn(i,provider),ptt);
    mapside=(mapside == null) ? m : mapside.union(m);
  }
  GroupingOptions opts=GroupingOptions.builder().numReducers(config.parallelism).partitionerClass(JoinUtils.AvroIndexedRecordPartitioner.class).groupingComparatorClass(JoinUtils.AvroPairGroupingComparator.class).build();
  Schema outputUnionSchema=unionValueSchema(""String_Node_Str"",outputSchemas);
  PType<GenericData.Record> outputUnion=Avros.generics(outputUnionSchema);
  PTable<Integer,GenericData.Record> reduced=mapside.groupByKey(opts).combineValues(new ExCombiner(provider,keyType,interValueType,config.outputTables,providerLists)).parallelDo(""String_Node_Str"",new MergeRowsFn(config.outputTables,providerLists,outputUnionSchema),Avros.tableOf(Avros.ints(),outputUnion));
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    AvroType<GenericData.Record> outType=Avros.generics(outputSchemas.get(i));
    PCollection<GenericData.Record> out=reduced.parallelDo(new FilterOutFn(i),outType);
    if (config.local) {
      out.write(To.textFile(output.path),output.writeMode);
    }
 else {
      DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(outType.getSchema()).format(Formats.PARQUET).location(output.path).build();
      if (Datasets.exists(output.uri) && output.writeMode == Target.WriteMode.OVERWRITE) {
        Datasets.delete(output.uri);
      }
      Datasets.create(output.uri,dd);
      out.write(new AvroParquetFileTarget(output.path),output.writeMode);
    }
  }
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}","int compute(String arg) throws Exception {
  ComputeConfig config=ConfigHelper.parseComputeConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  PCollection<GenericRecord> input=null;
  if (!config.path.isEmpty()) {
    input=(PCollection)p.read(From.avroFile(config.path));
  }
 else {
    Dataset<GenericRecord> data=Datasets.load(config.uri);
    input=p.read(CrunchDatasets.asSource(data));
  }
  RecordToExhibit rte=new RecordToExhibit(config.tempTables);
  ExhibitDescriptor descriptor=rte.getDescriptor(input.getPType());
  PCollection<Exhibit> exhibits=rte.apply(input);
  List<OutputGen> outputGens=Lists.newArrayList();
  Set<Schema> keySchemas=Sets.newHashSet();
  List<List<SchemaProvider>> providerLists=Lists.newArrayList();
  Set<Schema> interValueSchemas=Sets.newHashSet();
  List<Schema> outputSchemas=Lists.newArrayList();
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    OutputGen gen=new OutputGen(i,output,descriptor);
    Schema keySchema=gen.getKeySchema();
    List<SchemaProvider> providers=gen.getSchemaProviders();
    List<Schema.Field> outputFields=Lists.newArrayList();
    for (    Schema.Field sf : keySchema.getFields()) {
      outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
    }
    for (    SchemaProvider sp : providers) {
      Schema s=sp.get(1);
      for (      Schema.Field sf : s.getFields()) {
        outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
      }
    }
    Schema outputSchema=Schema.createRecord(""String_Node_Str"" + i,""String_Node_Str"",""String_Node_Str"",false);
    outputSchema.setFields(outputFields);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ outputSchema.toString(true));
    keySchemas.add(keySchema);
    interValueSchemas.addAll(Lists.transform(providers,new Function<SchemaProvider,Schema>(){
      @Nullable @Override public Schema apply(      SchemaProvider schemaProvider){
        return schemaProvider.get(0);
      }
    }
));
    outputGens.add(gen);
    outputSchemas.add(outputSchema);
    providerLists.add(providers);
  }
  Schema keySchema=unionKeySchema(""String_Node_Str"",Lists.newArrayList(keySchemas));
  Schema interValueSchema=unionValueSchema(""String_Node_Str"",Lists.newArrayList(interValueSchemas));
  SchemaProvider provider=new SchemaProvider(ImmutableList.of(keySchema,interValueSchema));
  AvroType<GenericData.Record> keyType=Avros.generics(keySchema);
  AvroType<GenericData.Record> interValueType=Avros.generics(interValueSchema);
  PTableType<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> ptt=Avros.tableOf(Avros.pairs(keyType,Avros.ints()),Avros.pairs(Avros.ints(),interValueType));
  PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> mapside=null;
  for (int i=0; i < outputGens.size(); i++) {
    PTable<GenericData.Record,Pair<Integer,GenericData.Record>> out=outputGens.get(i).apply(exhibits);
    PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> m=out.parallelDo(new SchemaMapFn(i,provider),ptt);
    mapside=(mapside == null) ? m : mapside.union(m);
  }
  GroupingOptions opts=GroupingOptions.builder().numReducers(config.parallelism).partitionerClass(JoinUtils.AvroIndexedRecordPartitioner.class).groupingComparatorClass(JoinUtils.AvroPairGroupingComparator.class).build();
  Schema outputUnionSchema=unionValueSchema(""String_Node_Str"",outputSchemas);
  PType<GenericData.Record> outputUnion=Avros.generics(outputUnionSchema);
  PTable<Integer,GenericData.Record> reduced=mapside.groupByKey(opts).combineValues(new ExCombiner(provider,keyType,interValueType,config.outputTables,providerLists)).parallelDo(""String_Node_Str"",new MergeRowsFn(config.outputTables,providerLists,outputUnionSchema),Avros.tableOf(Avros.ints(),outputUnion));
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    AvroType<GenericData.Record> outType=Avros.generics(outputSchemas.get(i));
    PCollection<GenericData.Record> out=reduced.parallelDo(new FilterOutFn(i),outType);
    if (config.local) {
      out.write(To.textFile(output.path),output.writeMode);
    }
 else {
      DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(outType.getSchema()).format(Formats.PARQUET).location(output.path).build();
      if (Datasets.exists(output.uri) && output.writeMode == Target.WriteMode.OVERWRITE) {
        Datasets.delete(output.uri);
      }
      Datasets.create(output.uri,dd);
      out.write(new AvroParquetFileTarget(output.path),output.writeMode);
    }
  }
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}",0.9678170654245184
170078,"@Override public void add(Obs obs){
  Object subKeyValue=obs.get(subKey);
  if (subKeyValue != null) {
    String skv=subKeyValue.toString();
    Map<String,GenericData.Record> inner=(Map<String,GenericData.Record>)wrapper.get(""String_Node_Str"");
    Schema vschema=intermediate.getField(""String_Node_Str"").schema().getValueType();
    GenericData.Record innerValue=new GenericData.Record(vschema);
    for (    Map.Entry<String,String> e : values.entrySet()) {
      if (!subKey.equals(e.getKey())) {
        innerValue.put(e.getValue(),obs.get(e.getKey()));
      }
    }
    GenericData.Record sum=(GenericData.Record)SumTbl.add(inner.get(skv),innerValue,vschema);
    inner.put(skv,sum);
  }
}","@Override public void add(Obs obs){
  Object subKeyValue=obs.get(subKey);
  if (subKeyValue != null) {
    String skv=subKeyValue.toString();
    Map<CharSequence,GenericData.Record> inner=(Map<CharSequence,GenericData.Record>)wrapper.get(""String_Node_Str"");
    Schema vschema=intermediate.getField(""String_Node_Str"").schema().getValueType();
    GenericData.Record innerValue=new GenericData.Record(vschema);
    for (    Map.Entry<String,String> e : values.entrySet()) {
      if (!subKey.equals(e.getKey())) {
        innerValue.put(e.getValue(),obs.get(e.getKey()));
      }
    }
    GenericData.Record sum=(GenericData.Record)SumTbl.add(inner.get(skv),innerValue,vschema);
    inner.put(skv,sum);
  }
}",0.9743954480796586
170079,"@Override public GenericData.Record merge(GenericData.Record current,GenericData.Record next){
  if (current == null) {
    return next;
  }
  Map<String,GenericData.Record> curValue=(Map<String,GenericData.Record>)current.get(""String_Node_Str"");
  Map<String,GenericData.Record> nextValue=(Map<String,GenericData.Record>)next.get(""String_Node_Str"");
  Schema vschema=intermediate.getField(""String_Node_Str"").schema().getValueType();
  for (  String key : Sets.union(curValue.keySet(),nextValue.keySet())) {
    GenericData.Record sum=(GenericData.Record)SumTbl.add(curValue.get(key),nextValue.get(key),vschema);
    current.put(key,sum);
  }
  return current;
}","@Override public GenericData.Record merge(GenericData.Record current,GenericData.Record next){
  if (current == null) {
    return next;
  }
  Map<CharSequence,GenericData.Record> curValue=(Map<CharSequence,GenericData.Record>)current.get(""String_Node_Str"");
  Map<CharSequence,GenericData.Record> nextValue=(Map<CharSequence,GenericData.Record>)next.get(""String_Node_Str"");
  Schema vschema=intermediate.getField(""String_Node_Str"").schema().getValueType();
  for (  CharSequence key : Sets.union(curValue.keySet(),nextValue.keySet())) {
    GenericData.Record sum=(GenericData.Record)SumTbl.add(curValue.get(key),nextValue.get(key),vschema);
    current.put(key.toString(),sum);
  }
  return current;
}",0.926007326007326
170080,"@Override public void process(Pair<Pair<GenericData.Record,Integer>,Iterable<Pair<Integer,GenericData.Record>>> input,Emitter<Pair<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>>> emitter){
  GenericData.Record key=input.first().first();
  int outIdx=(Integer)key.get(""String_Node_Str"");
  AggConfig ac=null;
  int aggIdx=-1;
  GenericData.Record merged=null;
  for (  Pair<Integer,GenericData.Record> p : input.second()) {
    if (aggIdx < 0 || aggIdx != p.first()) {
      if (aggIdx >= 0) {
        emitter.emit(Pair.of(Pair.of(key,aggIdx),Pair.of(aggIdx,merged)));
      }
      aggIdx=p.first();
      ac=configs.get(outIdx).aggregates.get(aggIdx);
      merged=null;
    }
    merged=ac.merge(merged,p.second());
  }
  if (aggIdx >= 0) {
    emitter.emit(Pair.of(Pair.of(key,aggIdx),Pair.of(aggIdx,merged)));
  }
}","@Override public void process(Pair<Pair<GenericData.Record,Integer>,Iterable<Pair<Integer,GenericData.Record>>> input,Emitter<Pair<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>>> emitter){
  GenericData.Record key=input.first().first();
  int outIdx=(Integer)key.get(""String_Node_Str"");
  AggConfig ac=null;
  int aggIdx=-1;
  GenericData.Record merged=null;
  for (  Pair<Integer,GenericData.Record> p : input.second()) {
    if (aggIdx < 0 || aggIdx != p.first()) {
      if (aggIdx >= 0) {
        increment(""String_Node_Str"",""String_Node_Str"");
        GenericData.Record outValue=new GenericData.Record(provider.get(1));
        outValue.put(""String_Node_Str"",merged);
        emitter.emit(Pair.of(Pair.of(key,aggIdx),Pair.of(aggIdx,outValue)));
      }
      aggIdx=p.first();
      ac=configs.get(outIdx).aggregates.get(aggIdx);
      merged=null;
    }
    merged=ac.merge(merged,(GenericData.Record)p.second().get(""String_Node_Str""));
  }
  if (aggIdx >= 0) {
    increment(""String_Node_Str"",""String_Node_Str"");
    GenericData.Record outValue=new GenericData.Record(provider.get(1));
    outValue.put(""String_Node_Str"",merged);
    emitter.emit(Pair.of(Pair.of(key,aggIdx),Pair.of(aggIdx,outValue)));
  }
}",0.7971084337349398
170081,"public ExCombiner(List<OutputConfig> configs){
  this.configs=configs;
}","public ExCombiner(SchemaProvider provider,List<OutputConfig> configs){
  this.provider=provider;
  this.configs=configs;
}",0.7422680412371134
170082,"int compute(String arg) throws Exception {
  ComputeConfig config=parseComputeConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  Dataset<GenericRecord> data=Datasets.load(config.uri);
  PCollection<GenericRecord> input=p.read(CrunchDatasets.asSource(data));
  RecordToExhibit rte=new RecordToExhibit(config.frames);
  ExhibitDescriptor descriptor=rte.getDescriptor(input.getPType());
  PCollection<Exhibit> exhibits=rte.apply(input);
  List<OutputGen> outputGens=Lists.newArrayList();
  Set<Schema> keySchemas=Sets.newHashSet();
  Set<Schema> valueSchemas=Sets.newHashSet();
  List<Schema> outputSchemas=Lists.newArrayList();
  for (int i=0; i < config.outputs.size(); i++) {
    OutputConfig output=config.outputs.get(i);
    OutputGen gen=new OutputGen(output,descriptor);
    Schema keySchema=gen.getKeySchema();
    List<Schema> valueSchema=gen.getValueSchemas();
    List<Schema.Field> outputFields=Lists.newArrayList();
    for (    Schema.Field sf : keySchema.getFields()) {
      outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
    }
    for (    Schema s : valueSchema) {
      for (      Schema.Field sf : s.getFields()) {
        outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
      }
    }
    Schema outputSchema=Schema.createRecord(""String_Node_Str"" + i,""String_Node_Str"",""String_Node_Str"",false);
    outputSchema.setFields(outputFields);
    keySchemas.add(keySchema);
    valueSchemas.addAll(valueSchema);
    outputGens.add(gen);
    outputSchemas.add(outputSchema);
  }
  Schema keySchema=unionKeySchema(""String_Node_Str"",keySchemas);
  Schema valueSchema=unionValueSchema(""String_Node_Str"",valueSchemas);
  SchemaProvider sp=new SchemaProvider(ImmutableList.of(keySchema,valueSchema));
  PTableType<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> ptt=Avros.tableOf(Avros.pairs(Avros.generics(keySchema),Avros.ints()),Avros.pairs(Avros.ints(),Avros.generics(valueSchema)));
  PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> mapside=null;
  for (int i=0; i < outputGens.size(); i++) {
    PTable<GenericData.Record,Pair<Integer,GenericData.Record>> out=outputGens.get(i).apply(exhibits);
    PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> m=out.parallelDo(new SchemaMapFn(i,sp),ptt);
    mapside=(mapside == null) ? m : mapside.union(m);
  }
  GroupingOptions opts=GroupingOptions.builder().numReducers(config.parallelism).partitionerClass(JoinUtils.AvroIndexedRecordPartitioner.class).groupingComparatorClass(JoinUtils.AvroPairGroupingComparator.class).build();
  PType<GenericData.Record> outputUnion=Avros.generics(Schema.createUnion(outputSchemas));
  PTable<Integer,GenericData.Record> reduced=mapside.groupByKey(opts).combineValues(new ExCombiner(config.outputs)).parallelDo(new MergeRowsFn(outputSchemas),Avros.tableOf(Avros.ints(),outputUnion));
  for (int i=0; i < config.outputs.size(); i++) {
    OutputConfig output=config.outputs.get(i);
    PCollection<GenericData.Record> out=reduced.parallelDo(new FilterOutFn(i),Avros.generics(outputSchemas.get(i)));
    DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(((AvroType)out.getPType()).getSchema()).format(Formats.PARQUET).build();
    Dataset<GenericRecord> outputDataset=Datasets.create(output.uri,dd);
    out.write(CrunchDatasets.asTarget(outputDataset),output.writeMode);
  }
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}","int compute(String arg) throws Exception {
  ComputeConfig config=parseComputeConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  Dataset<GenericRecord> data=Datasets.load(config.uri);
  PCollection<GenericRecord> input=p.read(CrunchDatasets.asSource(data));
  RecordToExhibit rte=new RecordToExhibit(config.frames);
  ExhibitDescriptor descriptor=rte.getDescriptor(input.getPType());
  PCollection<Exhibit> exhibits=rte.apply(input);
  List<OutputGen> outputGens=Lists.newArrayList();
  Set<Schema> keySchemas=Sets.newHashSet();
  Set<Schema> valueSchemas=Sets.newHashSet();
  List<Schema> outputSchemas=Lists.newArrayList();
  for (int i=0; i < config.outputs.size(); i++) {
    OutputConfig output=config.outputs.get(i);
    OutputGen gen=new OutputGen(i,output,descriptor);
    Schema keySchema=gen.getKeySchema();
    List<Schema> valueSchema=gen.getValueSchemas();
    List<Schema.Field> outputFields=Lists.newArrayList();
    for (    Schema.Field sf : keySchema.getFields()) {
      outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
    }
    for (    Schema s : valueSchema) {
      for (      Schema.Field sf : s.getFields()) {
        outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
      }
    }
    Schema outputSchema=Schema.createRecord(""String_Node_Str"" + i,""String_Node_Str"",""String_Node_Str"",false);
    outputSchema.setFields(outputFields);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ outputSchema.toString(true));
    keySchemas.add(keySchema);
    valueSchemas.addAll(valueSchema);
    outputGens.add(gen);
    outputSchemas.add(outputSchema);
  }
  Schema keySchema=unionKeySchema(""String_Node_Str"",Lists.newArrayList(keySchemas));
  Schema valueSchema=unionValueSchema(""String_Node_Str"",Lists.newArrayList(valueSchemas));
  SchemaProvider sp=new SchemaProvider(ImmutableList.of(keySchema,valueSchema));
  PTableType<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> ptt=Avros.tableOf(Avros.pairs(Avros.generics(keySchema),Avros.ints()),Avros.pairs(Avros.ints(),Avros.generics(valueSchema)));
  PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> mapside=null;
  for (int i=0; i < outputGens.size(); i++) {
    PTable<GenericData.Record,Pair<Integer,GenericData.Record>> out=outputGens.get(i).apply(exhibits);
    PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> m=out.parallelDo(new SchemaMapFn(i,sp),ptt);
    mapside=(mapside == null) ? m : mapside.union(m);
  }
  GroupingOptions opts=GroupingOptions.builder().numReducers(config.parallelism).partitionerClass(JoinUtils.AvroIndexedRecordPartitioner.class).groupingComparatorClass(JoinUtils.AvroPairGroupingComparator.class).build();
  Schema outputUnionSchema=unionValueSchema(""String_Node_Str"",outputSchemas);
  PType<GenericData.Record> outputUnion=Avros.generics(outputUnionSchema);
  PTable<Integer,GenericData.Record> reduced=mapside.groupByKey(opts).combineValues(new ExCombiner(sp,config.outputs)).parallelDo(""String_Node_Str"",new MergeRowsFn(outputUnionSchema),Avros.tableOf(Avros.ints(),outputUnion));
  for (int i=0; i < config.outputs.size(); i++) {
    OutputConfig output=config.outputs.get(i);
    AvroType<GenericData.Record> outType=Avros.generics(outputSchemas.get(i));
    PCollection<GenericData.Record> out=reduced.parallelDo(new FilterOutFn(i),outType);
    DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(outType.getSchema()).format(output.format).build();
    Dataset<GenericRecord> outputDataset=Datasets.create(output.uri,dd);
    out.write(CrunchDatasets.asTarget(outputDataset),output.writeMode);
  }
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}",0.8531353135313532
170083,"int build(String arg) throws Exception {
  BuildConfig config=parseBuildConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  List<PCollection<GenericRecord>> pcols=Lists.newArrayList();
  Set<Schema> schemas=Sets.newHashSet();
  for (  SourceConfig src : config.sources) {
    Dataset<GenericRecord> data=Datasets.load(src.uri);
    PCollection<GenericRecord> pcol=p.read(CrunchDatasets.asSource(data));
    pcols.add(pcol);
    Schema schema=((AvroType)pcol.getPType()).getSchema();
    src.setSchema(schema);
    schemas.add(schema);
  }
  Schema wrapper=unionValueSchema(""String_Node_Str"",schemas);
  AvroType<GenericData.Record> valueType=Avros.generics(wrapper);
  AvroType<Pair<Integer,GenericData.Record>> ssType=Avros.pairs(Avros.ints(),valueType);
  PType<Object> keyType=(PType<Object>)config.keyType.getPType();
  PTableType<Object,Pair<Integer,GenericData.Record>> tableType=Avros.tableOf(keyType,ssType);
  PTable<Object,Pair<Integer,GenericData.Record>> union=null;
  for (int i=0; i < config.sources.size(); i++) {
    SourceConfig src=config.sources.get(i);
    PCollection<GenericRecord> in=pcols.get(i);
    KeyIndexFn<GenericRecord> keyFn=new KeyIndexFn<GenericRecord>(valueType,src.keyFields,src.invalidKeys,i);
    PTable<Object,Pair<Integer,GenericData.Record>> keyed=in.parallelDo(""String_Node_Str"" + i,keyFn,tableType);
    if (union == null) {
      union=keyed;
    }
 else {
      union=union.union(keyed);
    }
  }
  MergeSchema ms=new MergeSchema(config.name,config.keyField,config.keyType.getSchema(),config.sources,config.parallelism);
  PCollection<GenericData.Record> output=ms.apply(union);
  DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(((AvroType)output.getPType()).getSchema()).format(Formats.PARQUET).build();
  Dataset<GenericRecord> outputDataset=Datasets.create(config.uri,dd);
  output.write(CrunchDatasets.asTarget(outputDataset),config.writeMode);
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}","int build(String arg) throws Exception {
  BuildConfig config=parseBuildConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  List<PCollection<GenericRecord>> pcols=Lists.newArrayList();
  Set<Schema> schemas=Sets.newHashSet();
  for (  SourceConfig src : config.sources) {
    Dataset<GenericRecord> data=Datasets.load(src.uri);
    PCollection<GenericRecord> pcol=p.read(CrunchDatasets.asSource(data));
    pcols.add(pcol);
    Schema schema=((AvroType)pcol.getPType()).getSchema();
    src.setSchema(schema);
    schemas.add(schema);
  }
  Schema wrapper=unionValueSchema(""String_Node_Str"",Lists.newArrayList(schemas));
  AvroType<GenericData.Record> valueType=Avros.generics(wrapper);
  AvroType<Pair<Integer,GenericData.Record>> ssType=Avros.pairs(Avros.ints(),valueType);
  PType<Object> keyType=(PType<Object>)config.keyType.getPType();
  PTableType<Object,Pair<Integer,GenericData.Record>> tableType=Avros.tableOf(keyType,ssType);
  PTable<Object,Pair<Integer,GenericData.Record>> union=null;
  for (int i=0; i < config.sources.size(); i++) {
    SourceConfig src=config.sources.get(i);
    PCollection<GenericRecord> in=pcols.get(i);
    KeyIndexFn<GenericRecord> keyFn=new KeyIndexFn<GenericRecord>(valueType,src.keyFields,src.invalidKeys,i);
    PTable<Object,Pair<Integer,GenericData.Record>> keyed=in.parallelDo(""String_Node_Str"" + i,keyFn,tableType);
    if (union == null) {
      union=keyed;
    }
 else {
      union=union.union(keyed);
    }
  }
  MergeSchema ms=new MergeSchema(config.name,config.keyField,config.keyType.getSchema(),config.sources,config.parallelism);
  PCollection<GenericData.Record> output=ms.apply(union);
  DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(((AvroType)output.getPType()).getSchema()).format(Formats.PARQUET).build();
  Dataset<GenericRecord> outputDataset=Datasets.create(config.uri,dd);
  output.write(CrunchDatasets.asTarget(outputDataset),config.writeMode);
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}",0.9915169660678644
170084,"private void setupComputeReader(YamlReader reader) throws Exception {
  reader.getConfig().setPropertyElementType(ComputeConfig.class,""String_Node_Str"",OutputConfig.class);
  reader.getConfig().setPropertyElementType(OutputConfig.class,""String_Node_Str"",AggConfig.class);
  reader.getConfig().setPropertyElementType(MetricConfig.class,""String_Node_Str"",PivotCalculator.Key.class);
}","private void setupComputeReader(YamlReader reader) throws Exception {
  reader.getConfig().setPropertyElementType(ComputeConfig.class,""String_Node_Str"",MetricConfig.class);
  reader.getConfig().setPropertyElementType(ComputeConfig.class,""String_Node_Str"",OutputConfig.class);
  reader.getConfig().setPropertyElementType(OutputConfig.class,""String_Node_Str"",AggConfig.class);
  reader.getConfig().setPropertyElementType(MetricConfig.class,""String_Node_Str"",PivotCalculator.Key.class);
}",0.881199538638985
170085,"@Override public void process(Pair<Integer,GenericData.Record> input,Emitter<GenericData.Record> emitter){
  if (outputIndex == input.first()) {
    emitter.emit(input.second());
  }
}","@Override public void process(Pair<Integer,GenericData.Record> input,Emitter<GenericData.Record> emitter){
  if (outputIndex == input.first()) {
    emitter.emit((GenericData.Record)input.second().get(""String_Node_Str""));
  }
}",0.8321167883211679
170086,"@Override public void process(Pair<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> input,Emitter<Pair<Integer,GenericData.Record>> emitter){
  if (lastKey == null || !lastKey.equals(input.first().first())) {
    if (lastKey != null) {
      emitter.emit(Pair.of(outputIndex,lastValue));
    }
    lastKey=input.first().first();
    outputIndex=(Integer)lastKey.get(""String_Node_Str"");
    lastValue=new GenericData.Record(schemas.get(outputIndex));
    GenericRecord innerKey=(GenericRecord)lastKey.get(""String_Node_Str"");
    for (    Schema.Field sf : innerKey.getSchema().getFields()) {
      lastValue.put(sf.name(),innerKey.get(sf.name()));
    }
  }
  GenericData.Record value=input.second().second();
  for (  Schema.Field sf : value.getSchema().getFields()) {
    lastValue.put(sf.name(),value.get(sf.name()));
  }
}","@Override public void process(Pair<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> input,Emitter<Pair<Integer,GenericData.Record>> emitter){
  if (lastKey == null || !lastKey.equals(input.first().first())) {
    if (lastKey != null) {
      GenericData.Record wrapper=new GenericData.Record(wrapperSchema);
      wrapper.put(""String_Node_Str"",lastValue);
      increment(""String_Node_Str"",""String_Node_Str"" + outputIndex);
      emitter.emit(Pair.of(outputIndex,wrapper));
    }
    lastKey=input.first().first();
    outputIndex=(Integer)lastKey.get(""String_Node_Str"");
    lastValue=new GenericData.Record(schemas.get(outputIndex));
    GenericRecord innerKey=(GenericRecord)lastKey.get(""String_Node_Str"");
    for (    Schema.Field sf : innerKey.getSchema().getFields()) {
      lastValue.put(sf.name(),innerKey.get(sf.name()));
    }
  }
  GenericData.Record value=(GenericData.Record)input.second().second().get(""String_Node_Str"");
  for (  Schema.Field sf : value.getSchema().getFields()) {
    lastValue.put(sf.name(),value.get(sf.name()));
  }
}",0.8480417754569191
170087,"public MergeRowsFn(List<Schema> schemas){
  this.json=Lists.newArrayList(Lists.transform(schemas,new Function<Schema,String>(){
    @Nullable @Override public String apply(    Schema schema){
      return schema.toString();
    }
  }
));
}","public MergeRowsFn(Schema unionSchema){
  this.wrapperJson=unionSchema.toString();
}",0.4334365325077399
170088,"@Override public void cleanup(Emitter<Pair<Integer,GenericData.Record>> emitter){
  if (lastKey != null) {
    emitter.emit(Pair.of(outputIndex,lastValue));
  }
}","@Override public void cleanup(Emitter<Pair<Integer,GenericData.Record>> emitter){
  if (lastKey != null && lastValue != null) {
    System.out.println(""String_Node_Str"" + lastKey);
    System.out.println(""String_Node_Str"" + lastValue);
    GenericData.Record wrapper=new GenericData.Record(wrapperSchema);
    wrapper.put(""String_Node_Str"",lastValue);
    increment(""String_Node_Str"",""String_Node_Str"" + outputIndex);
    emitter.emit(Pair.of((Integer)lastKey.get(""String_Node_Str""),wrapper));
  }
}",0.4357034795763994
170089,"@Override public void initialize(){
  final Schema.Parser sp=new Schema.Parser();
  this.schemas=Lists.newArrayList(Lists.transform(json,new Function<String,Schema>(){
    @Nullable @Override public Schema apply(    @Nullable String s){
      return sp.parse(s);
    }
  }
));
  lastKey=null;
  lastValue=null;
}","@Override public void initialize(){
  final Schema.Parser sp=new Schema.Parser();
  this.wrapperSchema=sp.parse(wrapperJson);
  this.schemas=wrapperSchema.getField(""String_Node_Str"").schema().getTypes();
  for (  Schema s : this.schemas) {
    System.out.println(s.toString(true));
  }
  lastKey=null;
  lastValue=null;
}",0.3222748815165877
170090,"public OutputGen(OutputConfig config,ExhibitDescriptor descriptor){
  this.config=config;
  this.keySchema=keySchema(descriptor);
  this.valueSchemas=valueSchemas(descriptor);
}","public OutputGen(int id,OutputConfig config,ExhibitDescriptor descriptor){
  this.id=id;
  this.config=config;
  this.keySchema=keySchema(descriptor);
  this.valueSchemas=valueSchemas(descriptor);
}",0.944
170091,"private List<Schema> valueSchemas(ExhibitDescriptor descriptor){
  List<Schema> schemas=Lists.newArrayList();
  for (  AggConfig ac : config.aggregates) {
    ObsDescriptor fd=ac.getFrameDescriptor(descriptor);
    List<Schema.Field> fields=Lists.newArrayList();
    for (    Map.Entry<String,String> e : ac.values.entrySet()) {
      ObsDescriptor.Field f=fd.get(fd.indexOf(e.getKey()));
      fields.add(new Schema.Field(e.getValue(),AvroExhibit.getSchema(f.type),""String_Node_Str"",null));
    }
    schemas.add(Schema.createRecord(fields));
  }
  return schemas;
}","private List<Schema> valueSchemas(ExhibitDescriptor descriptor){
  List<Schema> schemas=Lists.newArrayList();
  int idx=0;
  for (  AggConfig ac : config.aggregates) {
    ObsDescriptor fd=ac.getFrameDescriptor(descriptor);
    List<Schema.Field> fields=Lists.newArrayList();
    for (    Map.Entry<String,String> e : ac.values.entrySet()) {
      ObsDescriptor.Field f=fd.get(fd.indexOf(e.getKey()));
      fields.add(new Schema.Field(e.getValue(),AvroExhibit.getSchema(f.type),""String_Node_Str"",null));
    }
    Schema wrapper=Schema.createRecord(""String_Node_Str"" + id + ""String_Node_Str""+ idx,""String_Node_Str"",""String_Node_Str"",false);
    wrapper.setFields(fields);
    schemas.add(wrapper);
    idx++;
  }
  return schemas;
}",0.8415384615384616
170092,"@Override public void process(Exhibit exhibit,Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter){
  GenericData.Record keyRec=new GenericData.Record(key);
  for (  String attr : config.attrs) {
    keyRec.put(attr,exhibit.attributes().get(attr));
  }
  if (!initialized) {
    for (    Calculator c : calcs) {
      c.initialize(exhibit.descriptor());
    }
    initialized=true;
  }
  for (int i=0; i < calcs.size(); i++) {
    AggConfig ac=config.aggregates.get(i);
    GenericData.Record valRec=new GenericData.Record(valueSchemas.get(i));
    for (    Obs obs : calcs.get(i).apply(exhibit)) {
      for (int j=0; j < ac.keys.size(); j++) {
        keyRec.put(config.keys.get(j),obs.get(ac.keys.get(j)));
      }
      for (      Map.Entry<String,String> e : ac.values.entrySet()) {
        valRec.put(e.getValue(),obs.get(e.getKey()));
      }
    }
    emitter.emit(Pair.of(keyRec,Pair.of(i,valRec)));
  }
}","@Override public void process(Exhibit exhibit,Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter){
  GenericData.Record keyRec=new GenericData.Record(key);
  for (  String attr : config.attrs) {
    keyRec.put(attr,exhibit.attributes().get(attr));
  }
  if (!initialized) {
    for (    Calculator c : calcs) {
      c.initialize(exhibit.descriptor());
    }
    initialized=true;
  }
  for (int i=0; i < calcs.size(); i++) {
    AggConfig ac=config.aggregates.get(i);
    GenericData.Record valRec=new GenericData.Record(valueSchemas.get(i));
    for (    Obs obs : calcs.get(i).apply(exhibit)) {
      for (int j=0; j < ac.keys.size(); j++) {
        keyRec.put(config.keys.get(j),obs.get(ac.keys.get(j)));
      }
      for (      Map.Entry<String,String> e : ac.values.entrySet()) {
        valRec.put(e.getValue(),obs.get(e.getKey()));
      }
      increment(""String_Node_Str"",""String_Node_Str"" + outputId + ""String_Node_Str""+ i);
      emitter.emit(Pair.of(keyRec,Pair.of(i,valRec)));
    }
  }
}",0.9521384928716904
170093,"private Schema keySchema(ExhibitDescriptor descriptor){
  List<Schema.Field> keyFields=Lists.newArrayList();
  ObsDescriptor od=descriptor.attributes();
  for (  String attr : config.attrs) {
    ObsDescriptor.Field f=od.get(od.indexOf(attr));
    keyFields.add(AvroExhibit.getSchemaField(f));
  }
  List<Schema> frameKeySchemas=Lists.newArrayList();
  for (int i=0; i < config.keys.size(); i++) {
    frameKeySchemas.add(null);
  }
  for (  AggConfig ac : config.aggregates) {
    ObsDescriptor fd=ac.getFrameDescriptor(descriptor);
    for (int i=0; i < ac.keys.size(); i++) {
      ObsDescriptor.Field f=fd.get(fd.indexOf(ac.keys.get(i)));
      Schema s=AvroExhibit.getSchema(f.type);
      if (frameKeySchemas.get(i) == null) {
        frameKeySchemas.set(i,s);
      }
 else       if (!frameKeySchemas.get(i).equals(s)) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
  for (int i=0; i < config.keys.size(); i++) {
    keyFields.add(new Schema.Field(config.keys.get(i),frameKeySchemas.get(i),""String_Node_Str"",null));
  }
  return Schema.createRecord(keyFields);
}","private Schema keySchema(ExhibitDescriptor descriptor){
  List<Schema.Field> keyFields=Lists.newArrayList();
  ObsDescriptor od=descriptor.attributes();
  for (  String attr : config.attrs) {
    ObsDescriptor.Field f=od.get(od.indexOf(attr));
    keyFields.add(AvroExhibit.getSchemaField(f));
  }
  List<Schema> frameKeySchemas=Lists.newArrayList();
  for (int i=0; i < config.keys.size(); i++) {
    frameKeySchemas.add(null);
  }
  for (  AggConfig ac : config.aggregates) {
    ObsDescriptor fd=ac.getFrameDescriptor(descriptor);
    for (int i=0; i < ac.keys.size(); i++) {
      ObsDescriptor.Field f=fd.get(fd.indexOf(ac.keys.get(i)));
      Schema s=AvroExhibit.getSchema(f.type);
      if (frameKeySchemas.get(i) == null) {
        frameKeySchemas.set(i,s);
      }
 else       if (!frameKeySchemas.get(i).equals(s)) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
  for (int i=0; i < config.keys.size(); i++) {
    keyFields.add(new Schema.Field(config.keys.get(i),frameKeySchemas.get(i),""String_Node_Str"",null));
  }
  Schema wrapper=Schema.createRecord(""String_Node_Str"" + id,""String_Node_Str"",""String_Node_Str"",false);
  wrapper.setFields(keyFields);
  return wrapper;
}",0.9253344842468708
170094,"public MapOutFn(OutputConfig config,Schema keySchema,List<Schema> valueSchemas){
  this.config=config;
  this.keyJson=keySchema.toString();
  this.valueJson=Lists.newArrayList(Lists.transform(valueSchemas,new Function<Schema,String>(){
    @Override public String apply(    Schema schema){
      return schema.toString();
    }
  }
));
}","public MapOutFn(int outputId,OutputConfig config,Schema keySchema,List<Schema> valueSchemas){
  this.outputId=outputId;
  this.config=config;
  this.keyJson=keySchema.toString();
  this.valueJson=Lists.newArrayList(Lists.transform(valueSchemas,new Function<Schema,String>(){
    @Override public String apply(    Schema schema){
      return schema.toString();
    }
  }
));
}",0.9453015427769986
170095,"int compute(String arg) throws Exception {
  ComputeConfig config=ConfigHelper.parseComputeConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  Dataset<GenericRecord> data=Datasets.load(config.uri);
  PCollection<GenericRecord> input=p.read(CrunchDatasets.asSource(data));
  RecordToExhibit rte=new RecordToExhibit(config.tempTables);
  ExhibitDescriptor descriptor=rte.getDescriptor(input.getPType());
  PCollection<Exhibit> exhibits=rte.apply(input);
  List<OutputGen> outputGens=Lists.newArrayList();
  Set<Schema> keySchemas=Sets.newHashSet();
  List<List<SchemaProvider>> providerLists=Lists.newArrayList();
  Set<Schema> interValueSchemas=Sets.newHashSet();
  List<Schema> outputSchemas=Lists.newArrayList();
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    OutputGen gen=new OutputGen(i,output,descriptor);
    Schema keySchema=gen.getKeySchema();
    List<SchemaProvider> providers=gen.getSchemaProviders();
    List<Schema.Field> outputFields=Lists.newArrayList();
    for (    Schema.Field sf : keySchema.getFields()) {
      outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
    }
    for (    SchemaProvider sp : providers) {
      Schema s=sp.get(1);
      for (      Schema.Field sf : s.getFields()) {
        outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
      }
    }
    Schema outputSchema=Schema.createRecord(""String_Node_Str"" + i,""String_Node_Str"",""String_Node_Str"",false);
    outputSchema.setFields(outputFields);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ outputSchema.toString(true));
    keySchemas.add(keySchema);
    interValueSchemas.addAll(Lists.transform(providers,new Function<SchemaProvider,Schema>(){
      @Nullable @Override public Schema apply(      SchemaProvider schemaProvider){
        return schemaProvider.get(0);
      }
    }
));
    outputGens.add(gen);
    outputSchemas.add(outputSchema);
    providerLists.add(providers);
  }
  Schema keySchema=unionKeySchema(""String_Node_Str"",Lists.newArrayList(keySchemas));
  Schema interValueSchema=unionValueSchema(""String_Node_Str"",Lists.newArrayList(interValueSchemas));
  SchemaProvider provider=new SchemaProvider(ImmutableList.of(keySchema,interValueSchema));
  AvroType<GenericData.Record> keyType=Avros.generics(keySchema);
  AvroType<GenericData.Record> interValueType=Avros.generics(interValueSchema);
  PTableType<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> ptt=Avros.tableOf(Avros.pairs(keyType,Avros.ints()),Avros.pairs(Avros.ints(),interValueType));
  PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> mapside=null;
  for (int i=0; i < outputGens.size(); i++) {
    PTable<GenericData.Record,Pair<Integer,GenericData.Record>> out=outputGens.get(i).apply(exhibits);
    PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> m=out.parallelDo(new SchemaMapFn(i,provider),ptt);
    mapside=(mapside == null) ? m : mapside.union(m);
  }
  GroupingOptions opts=GroupingOptions.builder().numReducers(config.parallelism).partitionerClass(JoinUtils.AvroIndexedRecordPartitioner.class).groupingComparatorClass(JoinUtils.AvroPairGroupingComparator.class).build();
  Schema outputUnionSchema=unionValueSchema(""String_Node_Str"",outputSchemas);
  PType<GenericData.Record> outputUnion=Avros.generics(outputUnionSchema);
  PTable<Integer,GenericData.Record> reduced=mapside.groupByKey(opts).combineValues(new ExCombiner(provider,keyType,interValueType,config.outputTables,providerLists)).parallelDo(""String_Node_Str"",new MergeRowsFn(config.outputTables,providerLists,outputUnionSchema),Avros.tableOf(Avros.ints(),outputUnion));
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    AvroType<GenericData.Record> outType=Avros.generics(outputSchemas.get(i));
    PCollection<GenericData.Record> out=reduced.parallelDo(new FilterOutFn(i),outType);
    DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(outType.getSchema()).format(Formats.PARQUET).location(output.path).build();
    Datasets.create(output.uri,dd);
    out.write(new AvroParquetFileTarget(output.path),output.writeMode);
  }
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}","int compute(String arg) throws Exception {
  ComputeConfig config=ConfigHelper.parseComputeConfig(arg);
  Pipeline p=new MRPipeline(ExhibitTool.class,getConf());
  Dataset<GenericRecord> data=Datasets.load(config.uri);
  PCollection<GenericRecord> input=p.read(CrunchDatasets.asSource(data));
  RecordToExhibit rte=new RecordToExhibit(config.tempTables);
  ExhibitDescriptor descriptor=rte.getDescriptor(input.getPType());
  PCollection<Exhibit> exhibits=rte.apply(input);
  List<OutputGen> outputGens=Lists.newArrayList();
  Set<Schema> keySchemas=Sets.newHashSet();
  List<List<SchemaProvider>> providerLists=Lists.newArrayList();
  Set<Schema> interValueSchemas=Sets.newHashSet();
  List<Schema> outputSchemas=Lists.newArrayList();
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    OutputGen gen=new OutputGen(i,output,descriptor);
    Schema keySchema=gen.getKeySchema();
    List<SchemaProvider> providers=gen.getSchemaProviders();
    List<Schema.Field> outputFields=Lists.newArrayList();
    for (    Schema.Field sf : keySchema.getFields()) {
      outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
    }
    for (    SchemaProvider sp : providers) {
      Schema s=sp.get(1);
      for (      Schema.Field sf : s.getFields()) {
        outputFields.add(new Schema.Field(sf.name(),sf.schema(),sf.doc(),sf.defaultValue()));
      }
    }
    Schema outputSchema=Schema.createRecord(""String_Node_Str"" + i,""String_Node_Str"",""String_Node_Str"",false);
    outputSchema.setFields(outputFields);
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ outputSchema.toString(true));
    keySchemas.add(keySchema);
    interValueSchemas.addAll(Lists.transform(providers,new Function<SchemaProvider,Schema>(){
      @Nullable @Override public Schema apply(      SchemaProvider schemaProvider){
        return schemaProvider.get(0);
      }
    }
));
    outputGens.add(gen);
    outputSchemas.add(outputSchema);
    providerLists.add(providers);
  }
  Schema keySchema=unionKeySchema(""String_Node_Str"",Lists.newArrayList(keySchemas));
  Schema interValueSchema=unionValueSchema(""String_Node_Str"",Lists.newArrayList(interValueSchemas));
  SchemaProvider provider=new SchemaProvider(ImmutableList.of(keySchema,interValueSchema));
  AvroType<GenericData.Record> keyType=Avros.generics(keySchema);
  AvroType<GenericData.Record> interValueType=Avros.generics(interValueSchema);
  PTableType<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> ptt=Avros.tableOf(Avros.pairs(keyType,Avros.ints()),Avros.pairs(Avros.ints(),interValueType));
  PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> mapside=null;
  for (int i=0; i < outputGens.size(); i++) {
    PTable<GenericData.Record,Pair<Integer,GenericData.Record>> out=outputGens.get(i).apply(exhibits);
    PTable<Pair<GenericData.Record,Integer>,Pair<Integer,GenericData.Record>> m=out.parallelDo(new SchemaMapFn(i,provider),ptt);
    mapside=(mapside == null) ? m : mapside.union(m);
  }
  GroupingOptions opts=GroupingOptions.builder().numReducers(config.parallelism).partitionerClass(JoinUtils.AvroIndexedRecordPartitioner.class).groupingComparatorClass(JoinUtils.AvroPairGroupingComparator.class).build();
  Schema outputUnionSchema=unionValueSchema(""String_Node_Str"",outputSchemas);
  PType<GenericData.Record> outputUnion=Avros.generics(outputUnionSchema);
  PTable<Integer,GenericData.Record> reduced=mapside.groupByKey(opts).combineValues(new ExCombiner(provider,keyType,interValueType,config.outputTables,providerLists)).parallelDo(""String_Node_Str"",new MergeRowsFn(config.outputTables,providerLists,outputUnionSchema),Avros.tableOf(Avros.ints(),outputUnion));
  for (int i=0; i < config.outputTables.size(); i++) {
    OutputConfig output=config.outputTables.get(i);
    AvroType<GenericData.Record> outType=Avros.generics(outputSchemas.get(i));
    PCollection<GenericData.Record> out=reduced.parallelDo(new FilterOutFn(i),outType);
    if (config.local) {
      out.write(To.textFile(output.path),output.writeMode);
    }
 else {
      DatasetDescriptor dd=new DatasetDescriptor.Builder().schema(outType.getSchema()).format(Formats.PARQUET).location(output.path).build();
      if (Datasets.exists(output.uri) && output.writeMode == Target.WriteMode.OVERWRITE) {
        Datasets.delete(output.uri);
      }
      Datasets.create(output.uri,dd);
      out.write(new AvroParquetFileTarget(output.path),output.writeMode);
    }
  }
  PipelineResult res=p.done();
  return res.succeeded() ? 0 : 1;
}",0.9673815907059876
170096,"@Override public void process(Exhibit exhibit,Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter){
  GenericData.Record keyRec=new GenericData.Record(key);
  for (  String attr : config.attrs) {
    keyRec.put(attr,exhibit.attributes().get(attr));
  }
  if (!initialized) {
    for (int i=0; i < config.aggregates.size(); i++) {
      AggConfig ac=config.aggregates.get(i);
      Calculator c=ac.getCalculator();
      c.initialize(exhibit.descriptor());
      calcs.add(c);
      TblCache tc=new TblCache(ac,i,emitter,providers.get(i));
      tblCaches.add(tc);
    }
    initialized=true;
  }
  for (int i=0; i < calcs.size(); i++) {
    AggConfig ac=config.aggregates.get(i);
    for (    Obs obs : calcs.get(i).apply(exhibit)) {
      List<String> keys=getKeys(ac,config);
      for (int j=0; j < keys.size(); j++) {
        keyRec.put(config.keys.get(j),obs.get(keys.get(j)));
      }
      tblCaches.get(i).update(keyRec,obs);
      increment(""String_Node_Str"",""String_Node_Str"" + outputId + ""String_Node_Str""+ i);
    }
  }
}","@Override public void process(Exhibit exhibit,Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter){
  if (!initialized) {
    for (int i=0; i < config.aggregates.size(); i++) {
      AggConfig ac=config.aggregates.get(i);
      Calculator c=ac.getCalculator();
      c.initialize(exhibit.descriptor());
      calcs.add(c);
      TblCache tc=new TblCache(ac,i,emitter,providers.get(i));
      tblCaches.add(tc);
    }
    initialized=true;
  }
  for (int i=0; i < calcs.size(); i++) {
    AggConfig ac=config.aggregates.get(i);
    for (    Obs obs : calcs.get(i).apply(exhibit)) {
      List<String> keys=getKeys(ac,config);
      GenericData.Record keyRec=new GenericData.Record(key);
      for (      String attr : config.attrs) {
        keyRec.put(attr,exhibit.attributes().get(attr));
      }
      for (int j=0; j < keys.size(); j++) {
        keyRec.put(config.keys.get(j),obs.get(keys.get(j)));
      }
      tblCaches.get(i).update(keyRec,obs);
      increment(""String_Node_Str"",""String_Node_Str"" + outputId + ""String_Node_Str""+ i);
    }
  }
}",0.4934333958724202
170097,"@Override public void cleanup(Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter){
  for (  TblCache tc : tblCaches) {
    tc.flush();
  }
}","@Override public void cleanup(Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter){
  for (  TblCache tc : tblCaches) {
    tc.flush();
  }
  tblCaches.clear();
}",0.9398280802292264
170098,"private static List<String> getKeys(AggConfig ac,OutputConfig config){
  if (ac.keys == null || ac.keys.isEmpty()) {
    return config.keys;
  }
  return ac.keys;
}","private static List<String> getKeys(AggConfig ac,OutputConfig config){
  if (ac.keys == null || ac.keys.isEmpty()) {
    return config.keys;
  }
 else   if (config.keys.size() != ac.keys.size()) {
    throw new IllegalArgumentException(""String_Node_Str"" + ac.frame);
  }
  return ac.keys;
}",0.6563876651982379
170099,"@Nullable @Override public Schema apply(@Nullable String s){
  return sp.parse(s);
}","@Nullable @Override public String apply(Schema schema){
  return schema.toString();
}",0.6863905325443787
170100,"private List<Schema> getSchemas(){
  if (schemas == null) {
    final Schema.Parser sp=new Schema.Parser();
    this.schemas=Lists.newArrayList(Lists.transform(json,new Function<String,Schema>(){
      @Nullable @Override public Schema apply(      @Nullable String s){
        return sp.parse(s);
      }
    }
));
  }
  return schemas;
}","private List<Schema> getSchemas(){
  if (schemas == null) {
    final Schema.Parser sp=new Schema.Parser();
    Map<String,Schema> defined=Maps.newHashMap();
    this.schemas=Lists.newArrayList();
    for (    String s : json) {
      if (defined.containsKey(s)) {
        schemas.add(defined.get(s));
      }
 else {
        Schema schema=sp.parse(s);
        defined.put(s,schema);
        schemas.add(schema);
      }
    }
  }
  return schemas;
}",0.3908629441624365
170101,"public Tbl createTbl(){
  return new SumTbl(values);
}","public Tbl createTbl(){
  return type.create(values,options);
}",0.7692307692307693
170102,"/** 
 * Takes a serialized histogram created by the serialize() method and merges it with the current histogram object.
 */
public void merge(int otherBins,List<Double> other){
  if (other == null) {
    return;
  }
  if (nbins == 0 || nusedbins == 0) {
    nbins=otherBins;
    nusedbins=(other.size() - 1) / 2;
    bins=new ArrayList<Coord>(nusedbins);
    for (int i=1; i < other.size(); i+=2) {
      Coord bin=new Coord();
      bin.x=other.get(i);
      bin.y=other.get(i + 1);
      bins.add(bin);
    }
  }
 else {
    ArrayList<Coord> tmp_bins=new ArrayList<Coord>(nusedbins + (other.size() - 1) / 2);
    for (int i=0; i < nusedbins; i++) {
      Coord bin=new Coord();
      bin.x=bins.get(i).x;
      bin.y=bins.get(i).y;
      tmp_bins.add(bin);
    }
    for (int j=1; j < other.size(); j+=2) {
      Coord bin=new Coord();
      bin.x=other.get(j);
      bin.y=other.get(j + 1);
      tmp_bins.add(bin);
    }
    Collections.sort(tmp_bins);
    bins=tmp_bins;
    nusedbins+=(other.size() - 1) / 2;
    trim();
  }
}","/** 
 * Takes a serialized histogram created by the serialize() method and merges it with the current histogram object.
 */
public void merge(int otherBins,List<Double> other){
  if (other == null) {
    return;
  }
  if (nbins == 0 || nusedbins == 0) {
    nbins=otherBins;
    nusedbins=(other.size() - 1) / 2;
    bins=new ArrayList<Coord>(nusedbins);
    for (int i=0; i < other.size(); i+=2) {
      Coord bin=new Coord();
      bin.x=other.get(i);
      bin.y=other.get(i + 1);
      bins.add(bin);
    }
  }
 else {
    ArrayList<Coord> tmp_bins=new ArrayList<Coord>(nusedbins + (other.size() - 1) / 2);
    for (int i=0; i < nusedbins; i++) {
      Coord bin=new Coord();
      bin.x=bins.get(i).x;
      bin.y=bins.get(i).y;
      tmp_bins.add(bin);
    }
    for (int j=0; j < other.size(); j+=2) {
      Coord bin=new Coord();
      bin.x=other.get(j);
      bin.y=other.get(j + 1);
      tmp_bins.add(bin);
    }
    Collections.sort(tmp_bins);
    bins=tmp_bins;
    nusedbins+=(other.size() - 1) / 2;
    trim();
  }
}",0.998062015503876
170103,"@Override public void add(Obs obs){
  Double d=obs.get(obsKey,Double.class);
  if (d != null) {
    hist.add(d);
  }
}","@Override public void add(Obs obs){
  Object o=obs.get(obsKey);
  if (o != null) {
    hist.add(((Number)o).doubleValue());
  }
}",0.7854251012145749
170104,"public PercentileTbl(Map<String,String> values,Map<String,Object> options){
  if (values.size() != 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (options.get(""String_Node_Str"") == null || !(options.get(""String_Node_Str"") instanceof List)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map.Entry<String,String> e=Iterables.getOnlyElement(values.entrySet());
  this.obsKey=e.getKey();
  this.outKey=e.getValue();
  this.percentiles=(List<Integer>)options.get(""String_Node_Str"");
  this.binCount=options.containsKey(""String_Node_Str"") ? (Integer)options.get(""String_Node_Str"") : 10000;
}","public PercentileTbl(Map<String,String> values,Map<String,Object> options){
  if (values.size() != 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (options.get(PERCENTILES_OPTION) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map.Entry<String,String> e=Iterables.getOnlyElement(values.entrySet());
  this.obsKey=e.getKey();
  this.outKey=e.getValue();
  this.percentiles=Lists.transform((List)options.get(PERCENTILES_OPTION),new Function<Object,Integer>(){
    @Override public Integer apply(    Object o){
      return Integer.valueOf(o.toString());
    }
  }
);
  this.binCount=options.containsKey(""String_Node_Str"") ? Integer.valueOf(options.get(""String_Node_Str"").toString()) : 10000;
}",0.6855482933914306
170105,"@Override public SchemaProvider getSchemas(ObsDescriptor od,int outputId,int aggIdx){
  List<Schema.Field> interFields=Lists.newArrayList();
  List<Schema.Field> outerFields=Lists.newArrayList();
  for (  int p : percentiles) {
    String name=outKey + ""String_Node_Str"" + p;
    outerFields.add(new Schema.Field(name,DOUBLE,""String_Node_Str"",null));
  }
  this.output=Schema.createRecord(""String_Node_Str"" + outputId + ""String_Node_Str""+ aggIdx,""String_Node_Str"",""String_Node_Str"",false);
  this.output.setFields(outerFields);
  return new SchemaProvider(ImmutableList.of(intermediate,output));
}","@Override public SchemaProvider getSchemas(ObsDescriptor od,int outputId,int aggIdx){
  List<Schema.Field> interFields=Lists.newArrayList();
  interFields.add(new Schema.Field(""String_Node_Str"",Schema.create(Schema.Type.INT),""String_Node_Str"",null));
  interFields.add(new Schema.Field(""String_Node_Str"",Schema.createArray(DOUBLE),""String_Node_Str"",null));
  this.intermediate=Schema.createRecord(""String_Node_Str"" + outputId + ""String_Node_Str""+ aggIdx,""String_Node_Str"",""String_Node_Str"",false);
  this.intermediate.setFields(interFields);
  List<Schema.Field> outerFields=Lists.newArrayList();
  for (  int p : percentiles) {
    String name=outKey + ""String_Node_Str"" + p;
    outerFields.add(new Schema.Field(name,DOUBLE,""String_Node_Str"",null));
  }
  this.output=Schema.createRecord(""String_Node_Str"" + outputId + ""String_Node_Str""+ aggIdx,""String_Node_Str"",""String_Node_Str"",false);
  this.output.setFields(outerFields);
  return new SchemaProvider(ImmutableList.of(intermediate,output));
}",0.5391849529780565
170106,"@Override public void add(Obs obs){
  GenericData.Record cur=new GenericData.Record(schema);
  for (  Map.Entry<String,String> e : values.entrySet()) {
    cur.put(e.getValue(),obs.get(e.getKey()));
  }
  value=(GenericData.Record)add(cur,value,schema);
}","@Override public void add(Obs obs){
  GenericData.Record next=new GenericData.Record(schema);
  for (  Map.Entry<String,String> e : values.entrySet()) {
    next.put(e.getValue(),obs.get(e.getKey()));
  }
  value=(GenericData.Record)add(value,next,schema);
}",0.935672514619883
170107,"@Override public void initialize(SchemaProvider provider){
  this.schema=provider.get(0);
}","@Override public void initialize(SchemaProvider provider){
  this.schema=provider.get(0);
  this.value=new GenericData.Record(schema);
}",0.801762114537445
170108,"public void flush(){
  cache.cleanUp();
}","public void flush(){
  for (  Map.Entry<GenericData.Record,Tbl> e : cache.entrySet()) {
    Tbl tbl=e.getValue();
    emitter.emit(Pair.of(e.getKey(),Pair.of(aggIdx,tbl.getValue())));
  }
  cache.clear();
}",0.2834008097165992
170109,"public void update(GenericData.Record key,Obs obs){
  cache.asMap().get(key).add(obs);
}","public void update(GenericData.Record key,Obs obs){
  Tbl tbl=cache.get(key);
  if (tbl == null) {
    if (cache.size() > config.cacheSize) {
      flush();
    }
    tbl=config.createTbl();
    tbl.initialize(provider);
    cache.put(key,tbl);
  }
 else {
    int x=1;
  }
  tbl.add(obs);
}",0.3324538258575198
170110,"public TblCache(final AggConfig config,final int aggIdx,final Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter,final SchemaProvider provider){
  this.cache=CacheBuilder.<GenericData.Record,Tbl>from(config.cache).removalListener(new RemovalListener<GenericData.Record,Tbl>(){
    @Override public void onRemoval(    RemovalNotification<GenericData.Record,Tbl> note){
      emitter.emit(Pair.of(note.getKey(),Pair.of(aggIdx,note.getValue().getValue())));
    }
  }
).build(new CacheLoader<GenericData.Record,Tbl>(){
    @Override public Tbl load(    GenericData.Record record) throws Exception {
      Tbl tbl=config.createTbl();
      tbl.initialize(provider);
      return tbl;
    }
  }
);
}","public TblCache(final AggConfig config,final int aggIdx,final Emitter<Pair<GenericData.Record,Pair<Integer,GenericData.Record>>> emitter,final SchemaProvider provider){
  this.cache=Maps.newHashMap();
  this.config=config;
  this.aggIdx=aggIdx;
  this.emitter=emitter;
  this.provider=provider;
}",0.3826429980276134
170111,"@Override public boolean moveNext(){
  currentIndex++;
  boolean hasNext=currentIndex < frame.size();
  if (hasNext) {
    Obs obs=frame.get(currentIndex);
    for (int i=0; i < current.length; i++) {
      current[i]=obs.get(i);
    }
  }
  return hasNext;
}","@Override public boolean moveNext(){
  currentIndex++;
  boolean hasNext=currentIndex < frame.size();
  if (hasNext) {
    Obs obs=frame.get(currentIndex);
    this.current=new Object[current.length];
    for (int i=0; i < current.length; i++) {
      current[i]=obs.get(i);
    }
  }
  return hasNext;
}",0.9200710479573712
170112,"public static void updateViewWithTime(View view,Calendar time){
  int currentMinute;
  if (DateFormat.is24HourFormat(view.getContext())) {
    currentMinute=time.get(Calendar.HOUR_OF_DAY);
  }
 else {
    currentMinute=time.get(Calendar.HOUR);
  }
  int columnOneComponent=currentMinute / 10;
  int columnTwoComponent=currentMinute % 10;
  updateView(column1,columnOneComponent,view);
  updateView(column2,columnTwoComponent,view);
}","public static void updateViewWithTime(View view,Calendar time){
  int currentMinute;
  if (DateFormat.is24HourFormat(view.getContext())) {
    currentMinute=time.get(Calendar.HOUR_OF_DAY);
  }
 else {
    currentMinute=time.get(Calendar.HOUR);
    if (currentMinute == 0) {
      currentMinute=12;
    }
  }
  int columnOneComponent=currentMinute / 10;
  int columnTwoComponent=currentMinute % 10;
  updateView(column1,columnOneComponent,view);
  updateView(column2,columnTwoComponent,view);
}",0.9352051835853132
170113,"private void updateCompleteTime(){
  View view=this.findViewById(android.R.id.content).getRootView();
  Calendar calendar=Calendar.getInstance();
  Minutes.updateViewWithTime(view,calendar);
  Hours.updateViewWithTime(view,calendar);
  Seconds.updateViewWithTime(view,calendar);
}","private void updateCompleteTime(){
  View view=this.findViewById(android.R.id.content).getRootView();
  Calendar calendar=Calendar.getInstance();
  Minutes.updateViewWithTime(view,calendar);
  Hours.updateViewWithTime(view,calendar);
  if (!isDimmed()) {
    Seconds.updateViewWithTime(view,calendar);
  }
}",0.9540034071550256
170114,"@Override public void run(){
  mHandler.postDelayed(mStatusChecker,TICK_INTERVAL);
  updateSeconds();
}","public void run(){
  if (!Thread.currentThread().isInterrupted()) {
    try {
      updateSecondsUI();
      mHandler.postDelayed(secondsAnimation,TICK_INTERVAL);
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + e.toString());
    }
  }
}",0.3466666666666667
170115,"@Override public void onReceive(Context context,Intent intent){
  if (Constants.DOT_COLOR_RECIEVED_ACTION.equals(intent.getAction())) {
    startRepeatingTask();
    updateCompleteTime();
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Constants.DOT_COLOR_RECIEVED_ACTION.equals(intent.getAction())) {
    updateCompleteTime();
    startRepeatingTask();
  }
}",0.8652849740932642
170116,"private void startRepeatingTask(){
  mHandler.removeCallbacks(mStatusChecker);
  mStatusChecker.run();
}","private void startRepeatingTask(){
  mHandler.post(secondsAnimation);
}",0.6285714285714286
170117,"private void initReceivers(){
  filter=new IntentFilter(Intent.ACTION_TIME_TICK);
  timeUpdateReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (Intent.ACTION_TIME_TICK.equals(intent.getAction())) {
        startRepeatingTask();
        updateCompleteTime();
      }
    }
  }
;
  dotColorChangedIntentfilter=new IntentFilter(Constants.DOT_COLOR_RECIEVED_ACTION);
  dotColorChangedReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (Constants.DOT_COLOR_RECIEVED_ACTION.equals(intent.getAction())) {
        startRepeatingTask();
        updateCompleteTime();
      }
    }
  }
;
}","private void initReceivers(){
  filter=new IntentFilter(Intent.ACTION_TIME_TICK);
  timeUpdateReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (Intent.ACTION_TIME_TICK.equals(intent.getAction())) {
        updateCompleteTime();
        if (!isDimmed()) {
          restartRepeatingTask();
        }
      }
    }
  }
;
  dotColorChangedIntentfilter=new IntentFilter(Constants.DOT_COLOR_RECIEVED_ACTION);
  dotColorChangedReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (Constants.DOT_COLOR_RECIEVED_ACTION.equals(intent.getAction())) {
        updateCompleteTime();
        startRepeatingTask();
      }
    }
  }
;
}",0.8867796610169492
170118,"private void stopRepeatingTask(){
  mHandler.removeCallbacks(mStatusChecker);
}","private void stopRepeatingTask(){
  mHandler.removeCallbacksAndMessages(null);
}",0.8301886792452831
170119,"/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  session.connect();
  Channel channel=session.openChannel(""String_Node_Str"");
  ((ChannelExec)channel).setCommand(GET_ALL_CONFIG);
  in=channel.getInputStream();
  channel.connect();
  return new BufferedReader(new InputStreamReader(in));
}","/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  session.connect();
  if (host.usesEnable()) {
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(ENABLE_SUPERUSER);
    in=channel.getInputStream();
    OutputStream outputStream=channel.getOutputStream();
    channel.connect();
    outputStream.write((host.getEnablePass() + ""String_Node_Str"").getBytes());
    outputStream.flush();
    outputStream.write(DISABLE_OUTPUT_BUFFERING.getBytes());
    outputStream.flush();
    outputStream.write(GET_ALL_CONFIG.getBytes());
    outputStream.flush();
  }
 else {
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(DISABLE_OUTPUT_BUFFERING);
    in=channel.getInputStream();
    OutputStream outputStream=channel.getOutputStream();
    channel.connect();
    outputStream.write(GET_ALL_CONFIG.getBytes());
    outputStream.flush();
  }
  return new BufferedReader(new InputStreamReader(in));
}",0.6167441860465116
170120,"/** 
 * Allows the user to save the current configuration from the file
 * @param evt The ActionEvent object with relevant data
 */
private void menuSaveConfigActionPerformed(java.awt.event.ActionEvent evt){
  JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
  int returnCode=fc.showSaveDialog(this);
  if (returnCode == JFileChooser.APPROVE_OPTION) {
    File file=fc.getSelectedFile();
    String filename=file.getName();
    String path=file.getPath();
    if (!filename.matches(""String_Node_Str"")) {
      filename=filename + ""String_Node_Str"";
      file=new File(path + filename);
    }
    ConfigurationManager.saveConfiguration(file,hosts);
    JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
  }
}","/** 
 * Allows the user to save the current configuration from the file
 * @param evt The ActionEvent object with relevant data
 */
private void menuSaveConfigActionPerformed(java.awt.event.ActionEvent evt){
  JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
  int returnCode=fc.showSaveDialog(this);
  if (returnCode == JFileChooser.APPROVE_OPTION) {
    File file=fc.getSelectedFile();
    String path=file.getPath();
    if (!path.matches(""String_Node_Str"")) {
      path=path + ""String_Node_Str"";
      file=new File(path);
    }
    ConfigurationManager.saveConfiguration(file,hosts);
    JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
  }
}",0.83004455760662
170121,"/** 
 * Checks the credentials and allows login if the credentials are correct.
 * @param evt The ActionEvent object with relevant data
 */
private void btnLoginActionPerformed(java.awt.event.ActionEvent evt){
  String username=fieldUsername.getText().trim();
  String password=new String(fieldPassword.getPassword());
  if (MainGUI.settingsManager.checkAuth(username,password)) {
    parent.setVisible(true);
    this.dispose();
  }
 else {
    JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","/** 
 * Checks the credentials and allows login if the credentials are correct.
 * @param evt The ActionEvent object with relevant data
 */
private void btnLoginActionPerformed(java.awt.event.ActionEvent evt){
  String username=fieldUsername.getText().trim();
  String password=new String(fieldPassword.getPassword());
  if (MainGUI.settingsManager.checkAuth(username,password)) {
    parent.setVisible(true);
    parent.setEnabled(true);
    this.dispose();
  }
 else {
    JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}",0.9743135518157662
170122,"/** 
 * Creates new form MainGUI
 */
public MainGUI(){
  initComponents();
  fc.setFileFilter(filter);
  if (settingsManager.requiresAuth()) {
    AuthDialog auth=new AuthDialog(this);
    this.setVisible(false);
    auth.setVisible(true);
    auth.setAlwaysOnTop(true);
  }
}","/** 
 * Creates new form MainGUI
 */
public MainGUI(){
  initComponents();
  fc.setFileFilter(filter);
  if (settingsManager.requiresAuth()) {
    AuthDialog auth=new AuthDialog(this);
    this.setEnabled(false);
    auth.setVisible(true);
    auth.setAlwaysOnTop(true);
  }
}",0.8985507246376812
170123,"/** 
 * Show the box that allows for the setting of a password
 * @param evt The ActionEvent object with relevant data
 */
private void menuSecurityChangeActionPerformed(java.awt.event.ActionEvent evt){
  SecurityDialog secDialog=new SecurityDialog();
  secDialog.setVisible(true);
}","/** 
 * Show the box that allows for the setting of a password
 * @param evt The ActionEvent object with relevant data
 */
private void menuSecurityChangeActionPerformed(java.awt.event.ActionEvent evt){
  if (settingsManager.requiresAuth()) {
    SecurityDialog securityDialog=new SecurityDialog(settingsManager.getUsername(),settingsManager.getPassword());
    securityDialog.setVisible(true);
  }
 else {
    SecurityDialog secDialog=new SecurityDialog();
    secDialog.setVisible(true);
  }
}",0.6735218508997429
170124,"/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  String stub=hostReport.getHost().toString() + ""String_Node_Str"";
  for (  Rule rule : rules) {
    reportBuilder.append(stub + rule.getName() + ""String_Node_Str""+ ""String_Node_Str""+ rule.getDescription()+ System.lineSeparator());
  }
}","/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  String stub=hostReport.getHost().toString() + ""String_Node_Str"";
  for (  Rule rule : rules) {
    reportBuilder.append(stub + rule.getName() + ""String_Node_Str""+ rule.getSeverity()+ ""String_Node_Str""+ rule.getDescription()+ System.lineSeparator());
  }
}",0.979035639412998
170125,"/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  reportBuilder.append(""String_Node_Str"" + hostReport.getHost() + System.lineSeparator());
  reportBuilder.append(""String_Node_Str"");
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  for (  Rule rule : rules) {
    reportBuilder.append(""String_Node_Str"" + rule.getName() + System.lineSeparator());
    reportBuilder.append(""String_Node_Str"" + rule.getSeverity() + System.lineSeparator());
    reportBuilder.append(""String_Node_Str"" + rule.getDescription() + System.lineSeparator());
  }
  reportBuilder.append(""String_Node_Str"" + System.lineSeparator());
}","/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  reportBuilder.append(System.lineSeparator() + System.lineSeparator() + ""String_Node_Str""+ hostReport.getHost()+ System.lineSeparator());
  reportBuilder.append(""String_Node_Str"" + System.lineSeparator());
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  for (  Rule rule : rules) {
    reportBuilder.append(""String_Node_Str"" + rule.getName() + System.lineSeparator());
    reportBuilder.append(""String_Node_Str"" + rule.getSeverity() + System.lineSeparator());
    reportBuilder.append(""String_Node_Str"" + rule.getDescription() + System.lineSeparator());
  }
  reportBuilder.append(""String_Node_Str"" + System.lineSeparator());
}",0.950354609929078
170126,"/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  Element host=new Element(""String_Node_Str"");
  host.appendChild(host.toString());
  Element scanType=new Element(""String_Node_Str"");
  scanType.appendChild(""String_Node_Str"");
  host.appendChild(scanType);
  Element eRules=new Element(""String_Node_Str"");
  for (  Rule rule : rules) {
    Element eRule=new Element(""String_Node_Str"");
    Element ruleName=new Element(""String_Node_Str"");
    Element severity=new Element(""String_Node_Str"");
    Element description=new Element(""String_Node_Str"");
    ruleName.appendChild(rule.getName());
    severity.appendChild(rule.getSeverity());
    description.appendChild(rule.getDescription());
    eRule.appendChild(ruleName);
    eRule.appendChild(severity);
    eRule.appendChild(description);
    eRules.appendChild(eRule);
  }
  host.appendChild(eRules);
  hostsRoot.appendChild(host);
}","/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  Element host=new Element(""String_Node_Str"");
  Element ip=new Element(""String_Node_Str"");
  ip.appendChild(String.valueOf(hostReport.getHost()));
  host.appendChild(ip);
  Element scanType=new Element(""String_Node_Str"");
  scanType.appendChild(""String_Node_Str"");
  host.appendChild(scanType);
  Element eRules=new Element(""String_Node_Str"");
  for (  Rule rule : rules) {
    Element eRule=new Element(""String_Node_Str"");
    Element ruleName=new Element(""String_Node_Str"");
    Element severity=new Element(""String_Node_Str"");
    Element description=new Element(""String_Node_Str"");
    ruleName.appendChild(rule.getName());
    severity.appendChild(rule.getSeverity());
    description.appendChild(rule.getDescription());
    eRule.appendChild(ruleName);
    eRule.appendChild(severity);
    eRule.appendChild(description);
    eRules.appendChild(eRule);
  }
  host.appendChild(eRules);
  hostsRoot.appendChild(host);
}",0.9315315315315316
170127,"/** 
 * Returns a Rule object from a given file
 * @param f The file to load the rule from
 * @return A Rule object
 */
private static Rule getRuleFromFile(File f){
  Rule r=null;
  try {
    Builder parser=new Builder();
    Document doc=parser.build(f);
    Element root=doc.getRootElement();
    Element name=root.getFirstChildElement(""String_Node_Str"");
    String nameVal=name.getValue();
    Element desc=root.getFirstChildElement(""String_Node_Str"");
    String descVal=desc.getValue();
    Element severity=root.getFirstChildElement(""String_Node_Str"");
    String sevVal=severity.getValue();
    Element ruledef=root.getFirstChildElement(""String_Node_Str"");
    Elements rules=ruledef.getChildElements();
    String[] settings=new String[rules.size()];
    String[] params=new String[rules.size()];
    for (int i=0; i < rules.size(); i++) {
      Element rule=rules.get(i);
      Element sett=rule.getFirstChildElement(""String_Node_Str"");
      settings[i]=StringEscapeUtils.unescapeXml(sett.getValue());
      Element arg=rule.getFirstChildElement(""String_Node_Str"");
      params[i]=StringEscapeUtils.unescapeXml(arg.getValue());
    }
    r=new Rule(StringEscapeUtils.unescapeXml(nameVal),StringEscapeUtils.unescapeXml(descVal),sevVal,settings,params);
  }
 catch (  ParsingException|IOException ex) {
    Logger.getLogger(RuleParser.class.getName()).log(Level.SEVERE,null,ex);
  }
  return r;
}","/** 
 * Returns a Rule object from a given file
 * @param f The file to load the rule from
 * @return A Rule object
 */
public static Rule getRuleFromFile(File f){
  Rule r=null;
  try {
    Builder parser=new Builder();
    Document doc=parser.build(f);
    Element root=doc.getRootElement();
    Element name=root.getFirstChildElement(""String_Node_Str"");
    String nameVal=name.getValue();
    Element desc=root.getFirstChildElement(""String_Node_Str"");
    String descVal=desc.getValue();
    Element severity=root.getFirstChildElement(""String_Node_Str"");
    String sevVal=severity.getValue();
    Element ruledef=root.getFirstChildElement(""String_Node_Str"");
    Elements rules=ruledef.getChildElements();
    String[] settings=new String[rules.size()];
    String[] params=new String[rules.size()];
    for (int i=0; i < rules.size(); i++) {
      Element rule=rules.get(i);
      Element sett=rule.getFirstChildElement(""String_Node_Str"");
      settings[i]=StringEscapeUtils.unescapeXml(sett.getValue());
      Element arg=rule.getFirstChildElement(""String_Node_Str"");
      params[i]=StringEscapeUtils.unescapeXml(arg.getValue());
    }
    r=new Rule(StringEscapeUtils.unescapeXml(nameVal),StringEscapeUtils.unescapeXml(descVal),sevVal,settings,params);
  }
 catch (  ParsingException|IOException ex) {
    Logger.getLogger(RuleParser.class.getName()).log(Level.SEVERE,null,ex);
  }
  return r;
}",0.9960868018498756
170128,"@Test public void shouldSuccessfullyParseValidRule() throws Exception {
  File f=new File(""String_Node_Str"");
  Rule r=null;
  Assert.assertNotNull(""String_Node_Str"",r);
}","@Test public void shouldSuccessfullyParseValidRule() throws Exception {
  File f=new File(""String_Node_Str"");
  Rule r=null;
  r=RuleParser.getRuleFromFile(f);
  Assert.assertNotNull(""String_Node_Str"",r);
}",0.9071618037135278
170129,"/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  String stub=hostReport.getHost().toString() + ""String_Node_Str"";
  for (  Rule rule : rules) {
    reportBuilder.append(stub + rule.getName() + ""String_Node_Str""+ ""String_Node_Str""+ rule.getDescription()+ ""String_Node_Str"");
  }
}","/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  String stub=hostReport.getHost().toString() + ""String_Node_Str"";
  for (  Rule rule : rules) {
    reportBuilder.append(stub + rule.getName() + ""String_Node_Str""+ ""String_Node_Str""+ rule.getDescription()+ System.getProperty(""String_Node_Str""));
  }
}",0.9788135593220338
170130,"/** 
 * Readies the output renderer
 * @param _file the file to save to NOTE: This assumes f has correct extension
 */
public CSVOutputRenderer(File _file){
  super(_file);
  reportBuilder=new StringBuilder();
  reportBuilder.append(""String_Node_Str"");
}","/** 
 * Readies the output renderer
 * @param _file the file to save to NOTE: This assumes f has correct extension
 */
public CSVOutputRenderer(File _file){
  super(_file);
  reportBuilder=new StringBuilder();
  reportBuilder.append(""String_Node_Str"" + System.getProperty(""String_Node_Str""));
}",0.927007299270073
170131,"/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  reportBuilder.append(""String_Node_Str"" + hostReport.getHost() + ""String_Node_Str"");
  reportBuilder.append(""String_Node_Str"");
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  for (  Rule rule : rules) {
    reportBuilder.append(""String_Node_Str"" + rule.getName() + ""String_Node_Str"");
    reportBuilder.append(""String_Node_Str"" + rule.getSeverity() + ""String_Node_Str"");
    reportBuilder.append(""String_Node_Str"" + rule.getDescription() + ""String_Node_Str"");
  }
  reportBuilder.append(""String_Node_Str"");
}","/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  reportBuilder.append(""String_Node_Str"" + hostReport.getHost() + System.getProperty(""String_Node_Str""));
  reportBuilder.append(""String_Node_Str"");
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  for (  Rule rule : rules) {
    reportBuilder.append(""String_Node_Str"" + rule.getName() + System.getProperty(""String_Node_Str""));
    reportBuilder.append(""String_Node_Str"" + rule.getSeverity() + System.getProperty(""String_Node_Str""));
    reportBuilder.append(""String_Node_Str"" + rule.getDescription() + System.getProperty(""String_Node_Str""));
  }
  reportBuilder.append(""String_Node_Str"");
}",0.8528610354223434
170132,"/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  Element host=new Element(""String_Node_Str"");
  Element scanType=new Element(""String_Node_Str"");
  scanType.appendChild(""String_Node_Str"");
  host.appendChild(scanType);
  Element eRules=new Element(""String_Node_Str"");
  for (  Rule rule : rules) {
    Element eRule=new Element(""String_Node_Str"");
    Element ruleName=new Element(""String_Node_Str"");
    Element severity=new Element(""String_Node_Str"");
    Element description=new Element(""String_Node_Str"");
    ruleName.appendChild(rule.getName());
    severity.appendChild(rule.getSeverity());
    description.appendChild(rule.getDescription());
    eRule.appendChild(ruleName);
    eRule.appendChild(severity);
    eRule.appendChild(description);
    eRules.appendChild(eRule);
  }
  host.appendChild(eRules);
  hostsRoot.appendChild(host);
}","/** 
 * Adds a host report to the end of the output buffer
 * @param hostReport The report to add to the output
 */
@Override public void addHostReport(HostReport hostReport){
  ArrayList<Rule> rules=hostReport.getMatchedRules();
  Element host=new Element(""String_Node_Str"");
  host.appendChild(host.toString());
  Element scanType=new Element(""String_Node_Str"");
  scanType.appendChild(""String_Node_Str"");
  host.appendChild(scanType);
  Element eRules=new Element(""String_Node_Str"");
  for (  Rule rule : rules) {
    Element eRule=new Element(""String_Node_Str"");
    Element ruleName=new Element(""String_Node_Str"");
    Element severity=new Element(""String_Node_Str"");
    Element description=new Element(""String_Node_Str"");
    ruleName.appendChild(rule.getName());
    severity.appendChild(rule.getSeverity());
    description.appendChild(rule.getDescription());
    eRule.appendChild(ruleName);
    eRule.appendChild(severity);
    eRule.appendChild(description);
    eRules.appendChild(eRule);
  }
  host.appendChild(eRules);
  hostsRoot.appendChild(host);
}",0.9823389021479714
170133,"public static Rule getRuleFromFile(File f){
  Rule r=null;
  try {
    Builder parser=new Builder();
    Document doc=parser.build(f);
    Element root=doc.getRootElement();
    Element name=root.getFirstChildElement(""String_Node_Str"");
    String nameVal=name.getValue();
    Element desc=root.getFirstChildElement(""String_Node_Str"");
    String descVal=desc.getValue();
    Element severity=root.getFirstChildElement(""String_Node_Str"");
    String sevVal=severity.getValue();
    Element ruledef=root.getFirstChildElement(""String_Node_Str"");
    Elements rules=ruledef.getChildElements();
    String[] settings=new String[rules.size()];
    String[] params=new String[rules.size()];
    for (int i=0; i < rules.size(); i++) {
      Element rule=rules.get(i);
      Element sett=rule.getFirstChildElement(""String_Node_Str"");
      settings[i]=sett.getValue();
      Element arg=rule.getFirstChildElement(""String_Node_Str"");
      params[i]=arg.getValue();
    }
    r=new Rule(nameVal,descVal,sevVal,settings,params);
  }
 catch (  ParsingException|IOException ex) {
    Logger.getLogger(RuleParser.class.getName()).log(Level.SEVERE,null,ex);
  }
  return r;
}","public static Rule getRuleFromFile(File f){
  Rule r=null;
  try {
    Builder parser=new Builder();
    Document doc=parser.build(f);
    Element root=doc.getRootElement();
    Element name=root.getFirstChildElement(""String_Node_Str"");
    String nameVal=name.getValue();
    Element desc=root.getFirstChildElement(""String_Node_Str"");
    String descVal=desc.getValue();
    Element severity=root.getFirstChildElement(""String_Node_Str"");
    String sevVal=severity.getValue();
    Element ruledef=root.getFirstChildElement(""String_Node_Str"");
    Elements rules=ruledef.getChildElements();
    String[] settings=new String[rules.size()];
    String[] params=new String[rules.size()];
    for (int i=0; i < rules.size(); i++) {
      Element rule=rules.get(i);
      Element sett=rule.getFirstChildElement(""String_Node_Str"");
      settings[i]=StringEscapeUtils.unescapeXml(sett.getValue());
      Element arg=rule.getFirstChildElement(""String_Node_Str"");
      params[i]=StringEscapeUtils.unescapeXml(arg.getValue());
      System.out.println(""String_Node_Str"" + settings[i] + ""String_Node_Str""+ params[i]);
    }
    r=new Rule(StringEscapeUtils.unescapeXml(nameVal),StringEscapeUtils.unescapeXml(descVal),sevVal,settings,params);
  }
 catch (  ParsingException|IOException ex) {
    Logger.getLogger(RuleParser.class.getName()).log(Level.SEVERE,null,ex);
  }
  return r;
}",0.915615141955836
170134,"/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  session.connect();
  if (host.usesEnable()) {
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(ENABLE_SUPERUSER);
    in=channel.getInputStream();
    OutputStream outputStream=channel.getOutputStream();
    channel.connect();
    outputStream.write((host.getEnablePass() + ""String_Node_Str"").getBytes());
    outputStream.flush();
    outputStream.write(DISABLE_OUTPUT_BUFFERING.getBytes());
    outputStream.flush();
    outputStream.write(GET_ALL_CONFIG.getBytes());
    outputStream.flush();
  }
 else {
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(DISABLE_OUTPUT_BUFFERING);
    in=channel.getInputStream();
    OutputStream outputStream=channel.getOutputStream();
    channel.connect();
    outputStream.write(GET_ALL_CONFIG.getBytes());
    outputStream.flush();
  }
  return new BufferedReader(new InputStreamReader(in));
}","/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  session.connect();
  if (host.usesEnable()) {
    Channel channel=session.openChannel(""String_Node_Str"");
    in=channel.getInputStream();
    OutputStream outputStream=channel.getOutputStream();
    channel.connect();
    outputStream.write((ENABLE_SUPERUSER + ""String_Node_Str"").getBytes());
    outputStream.write((host.getEnablePass() + ""String_Node_Str"").getBytes());
    outputStream.flush();
    outputStream.write((DISABLE_OUTPUT_BUFFERING + ""String_Node_Str"").getBytes());
    outputStream.flush();
    outputStream.write((GET_ALL_CONFIG + ""String_Node_Str"").getBytes());
    outputStream.flush();
  }
 else {
    Channel channel=session.openChannel(""String_Node_Str"");
    in=channel.getInputStream();
    OutputStream outputStream=channel.getOutputStream();
    channel.connect();
    outputStream.write((DISABLE_OUTPUT_BUFFERING + ""String_Node_Str"").getBytes());
    outputStream.flush();
    outputStream.write((GET_ALL_CONFIG + ""String_Node_Str"").getBytes());
    outputStream.flush();
  }
  return new BufferedReader(new InputStreamReader(in));
}",0.7119784656796769
170135,"/** 
 * Allows the user to save the current configuration from the file
 * @param evt The ActionEvent object with relevant data
 */
private void menuSaveConfigActionPerformed(java.awt.event.ActionEvent evt){
  int returnCode=fc.showSaveDialog(this);
  if (returnCode == JFileChooser.APPROVE_OPTION) {
    File file=fc.getSelectedFile();
    String filename=file.getName();
    if (!filename.matches(""String_Node_Str"")) {
      filename=filename + ""String_Node_Str"";
      file=new File(filename);
    }
    ConfigurationManager config=new ConfigurationManager(file);
    for (    Host h : hosts) {
      config.addHost(h);
    }
    JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
  }
}","/** 
 * Allows the user to save the current configuration from the file
 * @param evt The ActionEvent object with relevant data
 */
private void menuSaveConfigActionPerformed(java.awt.event.ActionEvent evt){
  int returnCode=fc.showSaveDialog(this);
  if (returnCode == JFileChooser.APPROVE_OPTION) {
    File file=fc.getSelectedFile();
    String filename=file.getName();
    if (!filename.matches(""String_Node_Str"")) {
      filename=filename + ""String_Node_Str"";
      file=new File(filename);
    }
    ConfigurationManager.saveConfiguration(file,hosts);
    JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
  }
}",0.9279661016949152
170136,"/** 
 * Runs a scan on the selected hosts.
 * @param evt The ActionEvent object with relevant data
 */
private void btnRunScanActionPerformed(java.awt.event.ActionEvent evt){
  if (hosts.size() < 1) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"");
  }
 else {
    scanning.setVisible(true);
    ScanManager manager=new ScanManager(this.getHostsToScan());
    ScanLauncher launcher=new ScanLauncher(this,manager);
    launcher.execute();
  }
}","/** 
 * Runs a scan on the selected hosts.
 * @param evt The ActionEvent object with relevant data
 */
private void btnRunScanActionPerformed(java.awt.event.ActionEvent evt){
  if (hosts.size() < 1) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"");
  }
 else {
    ScanManager manager=new ScanManager(this.getHostsToScan());
    ScanLauncher launcher=new ScanLauncher(this,manager);
    launcher.execute();
  }
}",0.9646522234891676
170137,"/** 
 * Runs a scan on the selected hosts.
 * @param evt The ActionEvent object with relevant data
 */
private void btnRunScanActionPerformed(java.awt.event.ActionEvent evt){
  if (hosts.size() < 1) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"");
  }
 else {
    scanning.setVisible(true);
    ScanManager manager=new ScanManager(hosts);
    ScanLauncher launcher=new ScanLauncher(this,manager);
    launcher.execute();
  }
}","/** 
 * Runs a scan on the selected hosts.
 * @param evt The ActionEvent object with relevant data
 */
private void btnRunScanActionPerformed(java.awt.event.ActionEvent evt){
  if (hosts.size() < 1) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"");
  }
 else {
    scanning.setVisible(true);
    ScanManager manager=new ScanManager(this.getHostsToScan());
    ScanLauncher launcher=new ScanLauncher(this,manager);
    launcher.execute();
  }
}",0.9708520179372198
170138,"private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt){
  selected=(DefaultMutableTreeNode)reportTree.getLastSelectedPathComponent();
  if (selected == null) {
    return;
  }
  MutableTreeNode parent=(MutableTreeNode)selected.getParent();
  int index=parent.getIndex(selected);
  parent.remove(selected);
  DefaultTreeModel model=(DefaultTreeModel)reportTree.getModel();
  model.nodesWereRemoved(parent,new int[]{index},new Object[]{selected});
}","private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt){
  selected=(DefaultMutableTreeNode)reportTree.getLastSelectedPathComponent();
  if (selected == null) {
    return;
  }
  MutableTreeNode parent=(MutableTreeNode)selected.getParent();
  int index=parent.getIndex(selected);
  parent.remove(selected);
  model.nodesWereRemoved(parent,new int[]{index},new Object[]{selected});
  reportTree.setModel(model);
}",0.8918918918918919
170139,"/** 
 * Creates new form OutputReview
 */
public OutputReview(FullReport r){
  report=r;
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(""String_Node_Str"");
  ArrayList<HostReport> reports=report.getReports();
  for (  HostReport h : reports) {
    System.out.println(""String_Node_Str"" + h.getHost().toString());
    DefaultMutableTreeNode host=new DefaultMutableTreeNode(h.getHost().toString());
    System.out.println(""String_Node_Str"" + h.getMatchedRules().size() + ""String_Node_Str"");
    ArrayList<Rule> matchedRules=h.getMatchedRules();
    for (    Rule rule : matchedRules) {
      System.out.println(""String_Node_Str"" + rule.getName());
      System.out.println(""String_Node_Str"" + rule.getDescription());
      DefaultMutableTreeNode ruleName=new DefaultMutableTreeNode(rule.getName());
      DefaultMutableTreeNode ruleDesc=new DefaultMutableTreeNode(rule.getDescription());
      ruleName.add(ruleDesc);
      host.add(ruleName);
    }
    root.add(host);
  }
  initComponents();
  reportTree=new JTree(root);
  reportTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  reportTree.setRootVisible(false);
}","/** 
 * Creates new form OutputReview
 */
public OutputReview(FullReport r){
  report=r;
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(""String_Node_Str"");
  ArrayList<HostReport> reports=report.getReports();
  for (  HostReport h : reports) {
    System.out.println(""String_Node_Str"" + h.getHost().toString());
    DefaultMutableTreeNode host=new DefaultMutableTreeNode(h.getHost().toString());
    System.out.println(""String_Node_Str"" + h.getMatchedRules().size() + ""String_Node_Str"");
    ArrayList<Rule> matchedRules=h.getMatchedRules();
    for (    Rule rule : matchedRules) {
      System.out.println(""String_Node_Str"" + rule.getName());
      System.out.println(""String_Node_Str"" + rule.getDescription());
      DefaultMutableTreeNode ruleName=new DefaultMutableTreeNode(rule.getName());
      DefaultMutableTreeNode ruleDesc=new DefaultMutableTreeNode(rule.getDescription());
      ruleName.add(ruleDesc);
      host.add(ruleName);
    }
    root.add(host);
  }
  initComponents();
  model=new DefaultTreeModel(root);
  reportTree.setModel(model);
  reportTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  reportTree.setRootVisible(false);
}",0.9677692960135708
170140,"public static ArrayList<Rule> getRules(){
  ArrayList<Rule> rules=new ArrayList<>();
  String cwd=System.getProperty(""String_Node_Str"");
  String xmlDirectory=cwd + ""String_Node_Str"";
  File xmlFolder=new File(xmlDirectory);
  File[] ruleFiles=xmlFolder.listFiles();
  if (ruleFiles != null) {
    for (    File rule : ruleFiles) {
      if (rule.isFile()) {
        Rule r=getRuleFromFile(rule);
        rules.add(r);
      }
    }
  }
  return rules;
}","public static ArrayList<Rule> getRules(){
  ArrayList<Rule> rules=new ArrayList<>();
  String cwd=System.getProperty(""String_Node_Str"");
  String xmlDirectory=cwd + ""String_Node_Str"";
  File xmlFolder=new File(xmlDirectory);
  File[] ruleFiles=xmlFolder.listFiles();
  if (ruleFiles != null) {
    for (    File rule : ruleFiles) {
      if (rule.isFile()) {
        Rule r=getRuleFromFile(rule);
        rules.add(r);
      }
    }
  }
  if (rules.size() == 0) {
    System.err.println(""String_Node_Str"");
  }
  return rules;
}",0.8961303462321792
170141,"/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  session.connect();
  Channel channel=session.openChannel(""String_Node_Str"");
  ((ChannelExec)channel).setCommand(GET_ALL_CONFIG);
  in=channel.getInputStream();
  channel.connect();
  return new BufferedReader(new InputStreamReader(in));
}","/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  session.connect();
  Channel channel=session.openChannel(""String_Node_Str"");
  ((ChannelExec)channel).setCommand(""String_Node_Str"" + GET_ALL_CONFIG);
  in=channel.getInputStream();
  channel.connect();
  return new BufferedReader(new InputStreamReader(in));
}",0.986449864498645
170142,"/** 
 * Returns a list of hosts to be scanned (factoring in the checkboxes)
 * @return A list of hosts that are ""checked"" and should be scanned
 */
public ArrayList<Host> getHostsToScan(){
  ArrayList<Host> toScan=new ArrayList<>();
  DefaultTableModel tableModel=(DefaultTableModel)currentConfTable.getModel();
  int numRows=tableModel.getRowCount();
  for (int i=0; i < numRows; i++) {
    if (!((boolean)tableModel.getValueAt(i,0))) {
      continue;
    }
    String guiHostname=(String)tableModel.getValueAt(i,1);
    for (    Host h : hosts) {
      String hostname=h.toString();
      if (hostname.compareTo(guiHostname) == 0) {
        toScan.add(h);
      }
    }
  }
  return toScan;
}","/** 
 * Returns a list of hosts to be scanned (factoring in the checkboxes)
 * @return A list of hosts that are ""checked"" and should be scanned
 */
public ArrayList<Host> getHostsToScan(){
  ArrayList<Host> toScan=new ArrayList<>();
  DefaultTableModel tableModel=(DefaultTableModel)currentConfTable.getModel();
  int numRows=currentRow;
  for (int i=0; i < numRows; i++) {
    if (!((boolean)tableModel.getValueAt(i,0))) {
      continue;
    }
    String guiHostname=(String)tableModel.getValueAt(i,1);
    for (    Host h : hosts) {
      String hostname=h.toString();
      if (hostname.compareTo(guiHostname) == 0) {
        toScan.add(h);
      }
    }
  }
  return toScan;
}",0.9811046511627908
170143,"/** 
 * Creates new form OutputReview
 */
public OutputReview(FullReport r){
  report=r;
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(""String_Node_Str"");
  ArrayList<HostReport> reports=report.getReports();
  for (  HostReport h : reports) {
    DefaultMutableTreeNode host=new DefaultMutableTreeNode(h.getHost().toString());
    ArrayList<Rule> matchedRules=h.getMatchedRules();
    for (    Rule rule : matchedRules) {
      DefaultMutableTreeNode ruleName=new DefaultMutableTreeNode(rule.getName());
      DefaultMutableTreeNode ruleDesc=new DefaultMutableTreeNode(rule.getDescription());
      ruleName.add(ruleDesc);
      host.add(ruleName);
    }
    root.add(host);
  }
  initComponents();
  reportTree=new JTree(root);
  reportTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  reportTree.setRootVisible(false);
}","/** 
 * Creates new form OutputReview
 */
public OutputReview(FullReport r){
  report=r;
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(""String_Node_Str"");
  ArrayList<HostReport> reports=report.getReports();
  for (  HostReport h : reports) {
    System.out.println(""String_Node_Str"" + h.getHost().toString());
    DefaultMutableTreeNode host=new DefaultMutableTreeNode(h.getHost().toString());
    System.out.println(""String_Node_Str"" + h.getMatchedRules().size() + ""String_Node_Str"");
    ArrayList<Rule> matchedRules=h.getMatchedRules();
    for (    Rule rule : matchedRules) {
      System.out.println(""String_Node_Str"" + rule.getName());
      System.out.println(""String_Node_Str"" + rule.getDescription());
      DefaultMutableTreeNode ruleName=new DefaultMutableTreeNode(rule.getName());
      DefaultMutableTreeNode ruleDesc=new DefaultMutableTreeNode(rule.getDescription());
      ruleName.add(ruleDesc);
      host.add(ruleName);
    }
    root.add(host);
  }
  initComponents();
  reportTree=new JTree(root);
  reportTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  reportTree.setRootVisible(false);
}",0.8567208271787297
170144,"/** 
 * Performs the scan and returns a HostReport containing all matched rules.
 * @return The HostReport containing the matched rules.
 * @throws Exception Any Unhandled exception generated during the scan.
 */
@Override public HostReport call() throws Exception {
  BufferedReader reader=null;
  try {
    reader=getConfigFile();
  }
 catch (  JSchException|IOException e) {
    HostReport failedToConnect=new HostReport(host);
    return failedToConnect;
  }
  String line=null;
  ArrayList<String> lines=new ArrayList<>();
  while ((line=reader.readLine()) != null) {
    lines.add(line);
  }
  ArrayList<String> activeLines=RouterConfigManager.getActiveConfig(lines);
  return getHostReport(activeLines);
}","/** 
 * Performs the scan and returns a HostReport containing all matched rules.
 * @return The HostReport containing the matched rules.
 * @throws Exception Any Unhandled exception generated during the scan.
 */
@Override public HostReport call() throws Exception {
  BufferedReader reader=null;
  try {
    reader=getConfigFile();
  }
 catch (  JSchException|IOException e) {
    System.err.println(""String_Node_Str"" + host.getAddress().toString() + ""String_Node_Str""+ ""String_Node_Str"");
    System.err.println(""String_Node_Str"" + e.getMessage());
    HostReport failedToConnect=new HostReport(host);
    return failedToConnect;
  }
  String line=null;
  ArrayList<String> lines=new ArrayList<>();
  while ((line=reader.readLine()) != null) {
    System.out.println(""String_Node_Str"" + line);
    lines.add(line);
  }
  ArrayList<String> activeLines=RouterConfigManager.getActiveConfig(lines);
  return getHostReport(activeLines);
}",0.864602307225258
170145,"/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.connect();
  ChannelExec exec=(ChannelExec)session.openChannel(""String_Node_Str"");
  in=exec.getInputStream();
  exec.setCommand(GET_ALL_CONFIG);
  exec.connect();
  return new BufferedReader(new InputStreamReader(in));
}","/** 
 * Connects to the device and retrieves the configuration file from the  device.
 * @return A BufferedReader containing the output from the GET_ALL_CONFIG command 
 */
private BufferedReader getConfigFile() throws JSchException, IOException {
  InputStream in=null;
  JSch jsch=new JSch();
  Session session=jsch.getSession(host.getUser(),host.getAddress().getHostAddress(),SSH_PORT);
  session.setPassword(host.getPass());
  session.setConfig(""String_Node_Str"",""String_Node_Str"");
  session.connect();
  ChannelExec exec=(ChannelExec)session.openChannel(""String_Node_Str"");
  in=exec.getInputStream();
  exec.setCommand(GET_ALL_CONFIG);
  exec.connect();
  return new BufferedReader(new InputStreamReader(in));
}",0.957910014513788
170146,"/** 
 * Turns the XML file into a list of host objects.
 * @param config The file to read from.
 * @return The list of hosts read from the file.
 */
private ArrayList<Host> parseConfig(File config){
  ArrayList<Host> _hosts=new ArrayList<>();
  try {
    Builder parser=new Builder();
    Document doc=parser.build(config);
    Element root=doc.getRootElement();
    Elements eHosts=root.getChildElements(""String_Node_Str"");
    for (int i=0; i < eHosts.size(); i++) {
      String ip, user, pass;
      Element host=eHosts.get(i);
      ip=host.getFirstChildElement(""String_Node_Str"").getValue();
      user=host.getFirstChildElement(""String_Node_Str"").getValue();
      pass=host.getFirstChildElement(""String_Node_Str"").getValue();
      hosts.add(new Host(InetAddress.getByName(ip),user,pass));
    }
  }
 catch (  ParsingException|IOException ex) {
    Logger.getLogger(ConfigurationManager.class.getName()).log(Level.SEVERE,null,ex);
  }
  return _hosts;
}","/** 
 * Turns the XML file into a list of host objects.
 * @param config The file to read from.
 * @return The list of hosts read from the file.
 */
private ArrayList<Host> parseConfig(File config){
  ArrayList<Host> _hosts=new ArrayList<>();
  try {
    Builder parser=new Builder();
    Document doc=parser.build(config);
    Element root=doc.getRootElement();
    Elements eHosts=root.getChildElements(""String_Node_Str"");
    for (int i=0; i < eHosts.size(); i++) {
      String ip, user, pass;
      Element host=eHosts.get(i);
      ip=host.getFirstChildElement(""String_Node_Str"").getValue();
      if (ip.contains(""String_Node_Str"")) {
        int index=ip.indexOf(""String_Node_Str"");
        ip=ip.substring((index + 1));
      }
      user=host.getFirstChildElement(""String_Node_Str"").getValue();
      pass=host.getFirstChildElement(""String_Node_Str"").getValue();
      InetAddress address=InetAddress.getByName(ip);
      _hosts.add(new Host(address,user,pass));
    }
  }
 catch (  ParsingException|IOException ex) {
    Logger.getLogger(ConfigurationManager.class.getName()).log(Level.SEVERE,null,ex);
  }
  return _hosts;
}",0.8984263233190272
170147,"/** 
 * Handles the opening of previously saved scanning configurations 
 * @param evt The ActionEvent object with relevant data
 */
private void menuOpenConfigActionPerformed(java.awt.event.ActionEvent evt){
  int returnVal=fc.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    File f=fc.getSelectedFile();
    ConfigurationManager manager=new ConfigurationManager(f);
    ArrayList<Host> configHosts=manager.getAllHosts();
    hosts.addAll(configHosts);
    for (    Host h : hosts) {
      this.updateTable(h);
    }
  }
}","/** 
 * Handles the opening of previously saved scanning configurations 
 * @param evt The ActionEvent object with relevant data
 */
private void menuOpenConfigActionPerformed(java.awt.event.ActionEvent evt){
  int returnVal=fc.showOpenDialog(this);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    File f=fc.getSelectedFile();
    ConfigurationManager manager=new ConfigurationManager(f);
    ArrayList<Host> configHosts=manager.getAllHosts();
    hosts.addAll(configHosts);
    for (    Host h : hosts) {
      this.addHostToTable(h);
    }
  }
}",0.986400725294651
170148,"/** 
 * Adds a host to be scanned into the JTable and to the ArrayList. Note that the JTable is merely for presentation, the ArrayList holds the actual  data.
 * @param h The host to add to the table
 */
public void updateTable(Host h){
  final int ROWS_BY_DEFAULT=4;
  hosts.add(h);
  DefaultTableModel model=(DefaultTableModel)currentConfTable.getModel();
  String hosts=h.toString();
  if (currentRow >= ROWS_BY_DEFAULT) {
    Vector v=new Vector();
    model.addRow(v);
  }
  int rowToFill=currentRow;
  currentConfTable.setValueAt(true,rowToFill,0);
  currentConfTable.setValueAt(hosts,rowToFill,1);
  currentConfTable.setValueAt(""String_Node_Str"",rowToFill,2);
  currentRow++;
}","/** 
 * Adds a host to be scanned into the JTable and to the ArrayList. Note that the JTable is merely for presentation, the ArrayList holds the actual  data.
 * @param h The host to add to the table
 */
public void updateTable(Host h){
  hosts.add(h);
  this.addHostToTable(h);
}",0.5394190871369294
170149,"public ConfigurationManager(File config){
}","public ConfigurationManager(File config){
  hosts=parseConfig(config);
}",0.7478260869565218
170150,"private void btnLoginActionPerformed(java.awt.event.ActionEvent evt){
  if (MainGUI.settingsManager.checkAuth(null,null)) {
    this.setVisible(false);
  }
 else {
    JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","private void btnLoginActionPerformed(java.awt.event.ActionEvent evt){
  String username=fieldUsername.getText().trim();
  String password=new String(fieldPassword.getPassword());
  if (MainGUI.settingsManager.checkAuth(username,password)) {
    this.setVisible(false);
  }
 else {
    JOptionPane.showConfirmDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}",0.8018154311649016
170151,"/** 
 * Checks the provided credentials against stored counterparts
 * @param _username The username provided by the user
 * @param _password The password provided by the user
 * @return true if the credentials are correct
 */
public boolean checkAuth(String _username,String _password){
  boolean isCorrectUsername=false;
  boolean isCorrectPassword=false;
  if (username == _username) {
    isCorrectUsername=true;
  }
  try {
    if (PasswordHash.validatePassword(_password,password)) {
      isCorrectPassword=true;
    }
  }
 catch (  NoSuchAlgorithmException|InvalidKeySpecException ex) {
    Logger.getLogger(SettingsManager.class.getName()).log(Level.SEVERE,null,ex);
  }
  return (isCorrectUsername && isCorrectPassword);
}","/** 
 * Checks the provided credentials against stored counterparts
 * @param _username The username provided by the user
 * @param _password The password provided by the user
 * @return true if the credentials are correct
 */
public boolean checkAuth(String _username,String _password){
  boolean isCorrectUsername=false;
  boolean isCorrectPassword=false;
  if (username.compareTo(_username) == 0) {
    isCorrectUsername=true;
  }
  try {
    if (PasswordHash.validatePassword(_password,password)) {
      isCorrectPassword=true;
    }
  }
 catch (  NoSuchAlgorithmException|InvalidKeySpecException ex) {
    Logger.getLogger(SettingsManager.class.getName()).log(Level.SEVERE,null,ex);
  }
  return (isCorrectUsername && isCorrectPassword);
}",0.979011509817197
170152,"@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      emit(currentBuffer);
      currentPhrase.setLength(0);
      if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return true;
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}","@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      emit(currentBuffer);
      currentSetToCheck=remove(currentSetToCheck,currentBuffer);
      if (currentSetToCheck.size() == 0 && phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return true;
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}",0.9786059351276742
170153,"private CharArraySet remove(CharArraySet fromSet,char[] charArray){
  CharArraySet newSet=new CharArraySet(Version.LUCENE_46,5,false);
  Iterator<Object> phraseIt=currentSetToCheck.iterator();
  while (phraseIt != null && phraseIt.hasNext()) {
    char[] phrase=(char[])phraseIt.next();
    if (!equals(phrase,charArray)) {
      newSet.add(phrase);
    }
  }
  return newSet;
}","private CharArraySet remove(CharArraySet fromSet,char[] charArray){
  CharArraySet newSet=new CharArraySet(Version.LUCENE_46,5,false);
  Iterator<Object> phraseIt=currentSetToCheck.iterator();
  while (phraseIt != null && phraseIt.hasNext()) {
    char[] phrase=(char[])phraseIt.next();
    if (!equals(phrase,charArray) && startsWith(phrase,charArray)) {
      newSet.add(phrase);
    }
  }
  return newSet;
}",0.9593908629441624
170154,"@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      emit(currentBuffer);
      currentSetToCheck=remove(currentSetToCheck,currentBuffer);
      if (currentSetToCheck.size() == 0 && phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return true;
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}","@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (lastValid != null) {
        emit(lastValid);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      currentSetToCheck=remove(currentSetToCheck,currentBuffer);
      if (currentSetToCheck.size() == 0) {
        emit(currentBuffer);
        lastValid=null;
      }
 else {
        if (emitSingleTokens) {
          lastToken=currentBuffer;
          return true;
        }
        lastValid=currentBuffer;
      }
      if (currentSetToCheck.size() == 0 && phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return (lastValid != null) ? incrementToken() : true;
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (lastValid != null) {
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}",0.9191071711255344
170155,"private String filter(String qStr){
  String query=qStr;
  while (query.contains(""String_Node_Str""))   query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    query=autophrase(query);
  }
 catch (  IOException ioe) {
  }
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return query;
}","private String filter(String qStr){
  String query=qStr;
  while (query.contains(""String_Node_Str""))   query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (ignoreCase) {
    query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
    query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    query=autophrase(query);
  }
 catch (  IOException ioe) {
  }
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (ignoreCase) {
    query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
    query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return query;
}",0.745839636913767
170156,"@Override public void init(NamedList initArgs){
  Log.info(""String_Node_Str"");
  SolrParams params=SolrParams.toSolrParams(initArgs);
  phraseSetFiles=params.get(""String_Node_Str"");
  String pImpl=params.get(""String_Node_Str"");
  if (pImpl != null) {
    parserImpl=pImpl;
  }
}","@Override public void init(NamedList initArgs){
  Log.info(""String_Node_Str"");
  SolrParams params=SolrParams.toSolrParams(initArgs);
  phraseSetFiles=params.get(""String_Node_Str"");
  String pImpl=params.get(""String_Node_Str"");
  if (pImpl != null) {
    parserImpl=pImpl;
  }
  String replaceWith=params.get(""String_Node_Str"");
  if (replaceWith != null && replaceWith.length() > 0) {
    replaceWhitespaceWith=replaceWith.charAt(0);
  }
  String ignoreCaseSt=params.get(""String_Node_Str"");
  if (ignoreCaseSt != null && ignoreCaseSt.equalsIgnoreCase(""String_Node_Str"")) {
    ignoreCase=false;
  }
}",0.6325369738339022
170157,"private String autophrase(String input) throws IOException {
  WhitespaceTokenizer wt=new WhitespaceTokenizer(Version.LUCENE_46,new StringReader(input));
  LowerCaseFilter lcf=new LowerCaseFilter(Version.LUCENE_46,wt);
  AutoPhrasingTokenFilter aptf=new AutoPhrasingTokenFilter(Version.LUCENE_46,lcf,phraseSets,false);
  aptf.setReplaceWhitespaceWith(new Character('x'));
  CharTermAttribute term=aptf.addAttribute(CharTermAttribute.class);
  aptf.reset();
  StringBuffer strbuf=new StringBuffer();
  while (aptf.incrementToken()) {
    strbuf.append(term.toString()).append(""String_Node_Str"");
  }
  return strbuf.toString();
}","private String autophrase(String input) throws IOException {
  WhitespaceTokenizer wt=new WhitespaceTokenizer(Version.LUCENE_46,new StringReader(input));
  TokenStream ts=wt;
  if (ignoreCase) {
    ts=new LowerCaseFilter(Version.LUCENE_46,wt);
  }
  AutoPhrasingTokenFilter aptf=new AutoPhrasingTokenFilter(Version.LUCENE_46,ts,phraseSets,false);
  aptf.setReplaceWhitespaceWith(new Character(replaceWhitespaceWith));
  CharTermAttribute term=aptf.addAttribute(CharTermAttribute.class);
  aptf.reset();
  StringBuffer strbuf=new StringBuffer();
  while (aptf.incrementToken()) {
    strbuf.append(term.toString()).append(""String_Node_Str"");
  }
  return strbuf.toString();
}",0.9255564082885648
170158,"@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastToken=getCurrentBuffer(new char[0]);
      emit(lastToken);
      currentPhrase.setLength(0);
      return true;
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      emit(currentBuffer);
      currentPhrase.setLength(0);
      if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return true;
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}","@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastToken=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastToken,0,lastToken.length)) {
        emit(lastToken);
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
      currentPhrase.setLength(0);
      return true;
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      emit(currentBuffer);
      currentPhrase.setLength(0);
      if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return true;
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}",0.9250900815475062
170159,"private CharArraySet remove(CharArraySet fromSet,char[] charArray){
  CharArraySet newSet=new CharArraySet(Version.LUCENE_46,5,false);
  Iterator<Object> phraseIt=currentSetToCheck.iterator();
  while (phraseIt != null && phraseIt.hasNext()) {
    char[] phrase=(char[])phraseIt.next();
    if (!equals(phrase,charArray) && startsWith(phrase,charArray)) {
      newSet.add(phrase);
    }
  }
  return newSet;
}","private CharArraySet remove(CharArraySet fromSet,char[] charArray){
  CharArraySet newSet=new CharArraySet(Version.LUCENE_46,5,false);
  Iterator<Object> phraseIt=currentSetToCheck.iterator();
  while (phraseIt != null && phraseIt.hasNext()) {
    char[] phrase=(char[])phraseIt.next();
    if (!equals(phrase,charArray) && startsWith(phrase,charArray) || endsWith(charArray,phrase)) {
      newSet.add(phrase);
    }
 else {
    }
  }
  return newSet;
}",0.949074074074074
170160,"@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (lastValid != null) {
        emit(lastValid);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      currentSetToCheck=remove(currentSetToCheck,currentBuffer);
      if (currentSetToCheck.size() == 0) {
        emit(currentBuffer);
        lastValid=null;
      }
 else {
        if (emitSingleTokens) {
          lastToken=currentBuffer;
          return true;
        }
        lastValid=currentBuffer;
      }
      if (currentSetToCheck.size() == 0 && phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return (lastValid != null) ? incrementToken() : true;
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (lastValid != null) {
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}","@Override public boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastValid != null) {
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (emitSingleTokens && currentSetToCheck != null && currentSetToCheck.size() > 0) {
      char[] phrase=getFirst(currentSetToCheck);
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (phrase != null && endsWith(lastTok,phrase)) {
        currentSetToCheck=remove(currentSetToCheck,phrase);
        emit(phrase);
        return true;
      }
    }
 else     if (!emitSingleTokens && currentSetToCheck != null && currentSetToCheck.size() > 0) {
      if (lastEmitted != null && !equals(fixWhitespace(lastEmitted),getCurrentBuffer(new char[0]))) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      currentSetToCheck=remove(currentSetToCheck,currentBuffer);
      if (currentSetToCheck.size() == 0) {
        emit(currentBuffer);
        lastValid=null;
      }
 else {
        if (emitSingleTokens) {
          lastToken=currentBuffer;
          return true;
        }
        lastValid=currentBuffer;
      }
      if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return (lastValid != null) ? incrementToken() : true;
    }
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      CharArraySet newSet=phraseMap.get(nextToken,0,nextToken.length);
      Iterator<Object> phraseIt=newSet.iterator();
      while (phraseIt != null && phraseIt.hasNext()) {
        char[] phrase=(char[])phraseIt.next();
        currentSetToCheck.add(phrase);
      }
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (lastValid != null) {
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}",0.8042821158690177
170161,"private boolean startsWith(char[] buffer,char[] phrase){
  if (phrase.length >= buffer.length)   return false;
  for (int i=0; i < phrase.length; i++) {
    if (buffer[i] != phrase[i])     return false;
  }
  return true;
}","private boolean startsWith(char[] buffer,char[] phrase){
  if (phrase.length > buffer.length)   return false;
  for (int i=0; i < phrase.length; i++) {
    if (buffer[i] != phrase[i])     return false;
  }
  return true;
}",0.997752808988764
170162,"@Override public final boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastValid != null) {
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (emitSingleTokens && currentSetToCheck != null && currentSetToCheck.size() > 0) {
      char[] phrase=getFirst(currentSetToCheck);
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (phrase != null && endsWith(lastTok,phrase)) {
        currentSetToCheck=remove(currentSetToCheck,phrase);
        emit(phrase);
        return true;
      }
    }
 else     if (!emitSingleTokens && currentSetToCheck != null && currentSetToCheck.size() > 0) {
      if (lastEmitted != null && !equals(fixWhitespace(lastEmitted),getCurrentBuffer(new char[0]))) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      currentSetToCheck=remove(currentSetToCheck,currentBuffer);
      if (currentSetToCheck.size() == 0) {
        emit(currentBuffer);
        lastValid=null;
        --positionIncr;
      }
 else {
        if (emitSingleTokens) {
          lastToken=currentBuffer;
          return true;
        }
        lastValid=currentBuffer;
      }
      if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return (lastValid != null) ? incrementToken() : true;
    }
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      CharArraySet newSet=phraseMap.get(nextToken,0,nextToken.length);
      Iterator<Object> phraseIt=newSet.iterator();
      while (phraseIt != null && phraseIt.hasNext()) {
        char[] phrase=(char[])phraseIt.next();
        currentSetToCheck.add(phrase);
      }
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (lastValid != null) {
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}","@Override public final boolean incrementToken() throws IOException {
  if (!emitSingleTokens && unusedTokens.size() > 0) {
    Log.debug(""String_Node_Str"");
    Token aToken=unusedTokens.remove(0);
    emit(aToken);
    return true;
  }
  if (lastToken != null) {
    Log.debug(""String_Node_Str"");
    emit(lastToken);
    lastToken=null;
    return true;
  }
  char[] nextToken=nextToken();
  if (nextToken == null) {
    if (lastValid != null) {
      Log.debug(""String_Node_Str"");
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (emitSingleTokens && currentSetToCheck != null && currentSetToCheck.size() > 0) {
      char[] phrase=getFirst(currentSetToCheck);
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (phrase != null && endsWith(lastTok,phrase)) {
        currentSetToCheck=remove(currentSetToCheck,phrase);
        Log.debug(""String_Node_Str"");
        emit(phrase);
        return true;
      }
    }
 else     if (!emitSingleTokens && currentSetToCheck != null && currentSetToCheck.size() > 0) {
      char[] currBuff=getCurrentBuffer(new char[0]);
      if (lastEmitted != null && !equals(fixWhitespace(lastEmitted),currBuff)) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          if (!endsWith(lastEmitted,currBuff)) {
            Log.debug(""String_Node_Str"");
            emit(aToken);
            return true;
          }
        }
      }
    }
    if (lastEmitted == null && (currentPhrase != null && currentPhrase.length() > 0)) {
      char[] lastTok=getCurrentBuffer(new char[0]);
      if (currentSetToCheck.contains(lastTok,0,lastTok.length)) {
        Log.debug(""String_Node_Str"");
        emit(lastTok);
        currentPhrase.setLength(0);
        return true;
      }
 else       if (!emitSingleTokens) {
        discardCharTokens(currentPhrase,unusedTokens);
        currentSetToCheck=null;
        currentPhrase.setLength(0);
        if (unusedTokens.size() > 0) {
          Token aToken=unusedTokens.remove(0);
          Log.debug(""String_Node_Str"");
          emit(aToken);
          return true;
        }
      }
    }
    return false;
  }
  if (emitSingleTokens) {
    lastToken=nextToken;
  }
  if (currentSetToCheck == null || currentSetToCheck.size() == 0) {
    Log.debug(""String_Node_Str"" + new String(nextToken) + ""String_Node_Str"");
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
      if (currentPhrase == null)       currentPhrase=new StringBuffer();
 else       currentPhrase.setLength(0);
      currentPhrase.append(nextToken);
      return incrementToken();
    }
 else {
      Log.debug(""String_Node_Str"");
      emit(nextToken);
      lastToken=null;
      return true;
    }
  }
 else {
    char[] currentBuffer=getCurrentBuffer(nextToken);
    if (currentSetToCheck.contains(currentBuffer,0,currentBuffer.length)) {
      currentSetToCheck=remove(currentSetToCheck,currentBuffer);
      if (currentSetToCheck.size() == 0) {
        emit(currentBuffer);
        lastValid=null;
        --positionIncr;
      }
 else {
        if (emitSingleTokens) {
          lastToken=currentBuffer;
          return true;
        }
        lastValid=currentBuffer;
      }
      if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
        currentSetToCheck=phraseMap.get(nextToken,0,nextToken.length);
        if (currentPhrase == null)         currentPhrase=new StringBuffer();
 else         currentPhrase.setLength(0);
        currentPhrase.append(nextToken);
      }
      return (lastValid != null) ? incrementToken() : true;
    }
    if (phraseMap.keySet().contains(nextToken,0,nextToken.length)) {
      CharArraySet newSet=phraseMap.get(nextToken,0,nextToken.length);
      Iterator<Object> phraseIt=newSet.iterator();
      while (phraseIt != null && phraseIt.hasNext()) {
        char[] phrase=(char[])phraseIt.next();
        currentSetToCheck.add(phrase);
      }
    }
    Iterator<Object> phraseIt=currentSetToCheck.iterator();
    while (phraseIt != null && phraseIt.hasNext()) {
      char[] phrase=(char[])phraseIt.next();
      if (startsWith(phrase,currentBuffer)) {
        return incrementToken();
      }
    }
    if (lastValid != null) {
      Log.debug(""String_Node_Str"");
      emit(lastValid);
      lastValid=null;
      return true;
    }
    if (!emitSingleTokens) {
      discardCharTokens(currentPhrase,unusedTokens);
      currentPhrase.setLength(0);
      currentSetToCheck=null;
      if (unusedTokens.size() > 0) {
        Token aToken=unusedTokens.remove(0);
        Log.debug(""String_Node_Str"");
        emit(aToken);
        return true;
      }
    }
    currentSetToCheck=null;
    Log.debug(""String_Node_Str"");
    return incrementToken();
  }
}",0.869766951386692
170163,"public void prepareForTrack(){
  resetSoft();
  mCurrentPlayer.reset(false);
  mCurrentPosition=0;
  mState=PlaybackStateCompat.STATE_CONNECTING;
  notifyOnPlaybackStatusChanged(mState);
}","public void prepareForTrack(){
  resetSoft();
  mCurrentPlayer.reset(false);
  mCurrentPosition=0;
  mState=PlaybackStateCompat.STATE_BUFFERING;
  notifyOnPlaybackStatusChanged(mState);
}",0.9706666666666668
170164,"public void prepareForTrack(){
  reset();
  if (isConnected() && hasCurrent()) {
    mRemoteMediaPlayer.stop(mApiClient);
  }
  mState=STATE_CONNECTING;
  notifyOnPlaybackStatusChanged(mState);
}","public void prepareForTrack(){
  reset();
  if (isConnected() && hasCurrent()) {
    mRemoteMediaPlayer.stop(mApiClient);
  }
  mState=STATE_BUFFERING;
  notifyOnPlaybackStatusChanged(mState);
}",0.9717223650385604
170165,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 5) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 37) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
 else   if (oldVersion < 38) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < DB_VERSION) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 5) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 37) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
 else   if (oldVersion < 38) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
  }
 else   if (oldVersion < 39) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < DB_VERSION) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.9939086989254672
170166,"Track buildTrack(Cursor c){
  Track.Builder bob=Track.builder();
  bob.setUri(Uri.parse(c.getString(1))).setParentUri(Uri.parse(c.getString(2))).setName(c.getString(3));
  String artistName=getStringOrNull(c,4);
  if (!StringUtils.isEmpty(artistName)) {
    bob.setArtistName(artistName);
  }
  String artistId=getStringOrNull(c,5);
  if (!StringUtils.isEmpty(artistId)) {
    bob.setArtistUri(IndexUris.artist(indexAuthority,artistId));
  }
  String albumName=getStringOrNull(c,6);
  if (!StringUtils.isEmpty(albumName)) {
    bob.setAlbumName(albumName);
  }
  String albumId=getStringOrNull(c,7);
  if (!StringUtils.isEmpty(albumId)) {
    bob.setAlbumUri(IndexUris.album(indexAuthority,albumId));
  }
  String albumArtistName=getStringOrNull(c,8);
  if (!StringUtils.isEmpty(albumArtistName)) {
    bob.setAlbumArtistName(albumArtistName);
  }
  int track=getIntOrNeg(c,10);
  if (track >= 0) {
    bob.setTrackNumber(track);
  }
  int disc=getIntOrNeg(c,11);
  if (disc > 0) {
    bob.setDiscNumber(disc);
  }
  int comp=getIntOrNeg(c,12);
  if (comp > 0) {
    bob.setIsCompliation(true);
  }
  String genre=getStringOrNull(c,13);
  if (!StringUtils.isEmpty(genre)) {
    bob.setGenre(genre);
  }
  Track.Res.Builder rob=Track.Res.builder();
  rob.setUri(Uri.parse(c.getString(15)));
  String headers=getStringOrNull(c,16);
  if (!StringUtils.isEmpty(headers)) {
    String[] lns=StringUtils.split(headers,'\n');
    if (lns != null && lns.length > 0) {
      for (      String ln : lns) {
        String[] kv=StringUtils.split(ln,':');
        if (kv != null && kv.length == 2) {
          rob.addHeader(kv[0],kv[1]);
        }
      }
    }
  }
  long size=getLongOrNeg(c,17);
  if (size > 0) {
    rob.setSize(size);
  }
  String mime=c.getString(18);
  if (!StringUtils.isEmpty(mime)) {
    rob.setMimeType(mime);
  }
  long bitrate=getLongOrNeg(c,19);
  if (bitrate > 0) {
    rob.setBitrate(bitrate);
  }
  long dur=getLongOrNeg(c,20);
  if (dur > 0) {
    rob.setDuration(dur);
  }
  bob.addRes(rob.build());
  String artUri=getStringOrNull(c,21);
  if (artUri != null) {
    bob.setArtworkUri(Uri.parse(artUri));
  }
  return bob.build();
}","Track buildTrack(Cursor c){
  Track.Builder bob=Track.builder();
  bob.setUri(Uri.parse(c.getString(1))).setParentUri(Uri.parse(c.getString(2))).setName(c.getString(3));
  String artistName=getStringOrNull(c,4);
  if (!StringUtils.isEmpty(artistName)) {
    bob.setArtistName(artistName);
  }
  String artistId=getStringOrNull(c,5);
  if (!StringUtils.isEmpty(artistId)) {
    bob.setArtistUri(IndexUris.artist(indexAuthority,artistId));
  }
  String albumName=getStringOrNull(c,6);
  if (!StringUtils.isEmpty(albumName)) {
    bob.setAlbumName(albumName);
  }
  String albumId=getStringOrNull(c,7);
  if (!StringUtils.isEmpty(albumId)) {
    bob.setAlbumUri(IndexUris.album(indexAuthority,albumId));
  }
  String albumArtistName=getStringOrNull(c,8);
  if (!StringUtils.isEmpty(albumArtistName)) {
    bob.setAlbumArtistName(albumArtistName);
  }
  int track=getIntOrNeg(c,10);
  if (track >= 0) {
    bob.setTrackNumber(track);
  }
  int disc=getIntOrNeg(c,11);
  if (disc > 0) {
    bob.setDiscNumber(disc);
  }
  int comp=getIntOrNeg(c,12);
  if (comp > 0) {
    bob.setIsCompliation(true);
  }
  String genre=getStringOrNull(c,13);
  if (!StringUtils.isEmpty(genre)) {
    bob.setGenre(genre);
  }
  Track.Res.Builder rob=Track.Res.builder();
  rob.setUri(Uri.parse(c.getString(15)));
  String headers=getStringOrNull(c,16);
  if (!StringUtils.isEmpty(headers)) {
    String[] lns=StringUtils.split(headers,'\n');
    if (lns != null && lns.length > 0) {
      for (      String ln : lns) {
        String[] kv=StringUtils.split(ln,':');
        if (kv != null && kv.length == 2) {
          rob.addHeader(kv[0],kv[1]);
        }
      }
    }
  }
  long size=getLongOrNeg(c,17);
  if (size > 0) {
    rob.setSize(size);
  }
  String mime=c.getString(18);
  if (!StringUtils.isEmpty(mime)) {
    rob.setMimeType(mime);
  }
  long bitrate=getLongOrNeg(c,19);
  if (bitrate > 0) {
    rob.setBitrate(bitrate);
  }
  long dur=getLongOrNeg(c,20);
  if (dur > 0) {
    rob.setDuration(dur);
  }
  String artUri=getStringOrNull(c,21);
  if (artUri != null) {
    bob.setArtworkUri(Uri.parse(artUri));
  }
  long lastMod=getLongOrNeg(c,22);
  if (lastMod > 0) {
    rob.setLastMod(lastMod);
  }
  bob.addRes(rob.build());
  return bob.build();
}",0.958380714123266
170167,"@Override public TreeNode buildTree(Uri uri,Uri parentUri){
  final TreeNode tree=new TreeNode(uri,parentUri);
  long containerId=hasContainer(uri);
  if (containerId <= 0) {
    return tree;
  }
  addTracksUnderContainer(String.valueOf(containerId),tree);
  String[] containers=findChildrenUnder(uri,false);
  if (containers == null) {
    return tree;
  }
  Cursor c=null;
  final String[] selArgs=new String[1];
  for (  String id : containers) {
    selArgs[0]=id;
    c=query(IndexSchema.Containers.TABLE,buildTreeContainerCols,idSelection,selArgs,null,null,null);
    if (c != null && c.moveToFirst()) {
      TreeNode childTree=new TreeNode(Uri.parse(c.getString(0)),Uri.parse(c.getString(1)));
      addTracksUnderContainer(id,childTree);
      tree.children.add(childTree);
    }
    closeCursor(c);
  }
  return tree;
}","@Override public TreeNode buildTree(Uri uri,Uri parentUri){
  final TreeNode tree=new TreeNode(uri,parentUri);
  long containerId=hasContainer(uri);
  if (containerId <= 0) {
    return tree;
  }
  addTracksUnderContainer(String.valueOf(containerId),tree);
  String[] containers=findChildrenUnder(uri,false);
  if (containers == null || containers.length == 0) {
    return tree;
  }
  StringBuilder sb=new StringBuilder(BaseColumns._ID).append(""String_Node_Str"");
  for (int ii=1; ii < containers.length; ii++) {
    sb.append(""String_Node_Str"");
  }
  String sel=sb.append(""String_Node_Str"").toString();
  List<Uri> childrenUris=new ArrayList<>(containers.length);
  Cursor c=null;
  try {
    c=query(IndexSchema.Containers.TABLE,buildTreeContainerCols,sel,containers,null,null,null);
    if (c != null && c.moveToFirst()) {
      do {
        childrenUris.add(Uri.parse(c.getString(0)));
      }
 while (c.moveToNext());
    }
  }
  finally {
    closeCursor(c);
  }
  for (  Uri childUri : childrenUris) {
    tree.children.add(buildTree(childUri,uri));
  }
  return tree;
}",0.5429769392033543
170168,"Observable<String[]> availableLibrariesObservable(){
  return mLibraryLoader.makeObservable().flatMap(new Func1<LibraryProviderInfo,Observable<String>>(){
    @Override public Observable<String> call(    final LibraryProviderInfo libraryProviderInfo){
      return Observable.using(new Func0<LibraryClient>(){
        @Override public LibraryClient call(){
          return LibraryClient.create(getContext(),LibraryUris.call(libraryProviderInfo.getAuthority()));
        }
      }
,new Func1<LibraryClient,Observable<String>>(){
        @Override public Observable<String> call(        LibraryClient libraryClient){
          Bundle reply=libraryClient.makeCall(LibraryMethods.CHECK_AVAILABILITY,null);
          if (LibraryExtras.getOk(reply)) {
            return Observable.just(libraryProviderInfo.getAuthority());
          }
 else {
            return Observable.empty();
          }
        }
      }
,new Action1<LibraryClient>(){
        @Override public void call(        LibraryClient libraryClient){
          libraryClient.release();
        }
      }
,true);
    }
  }
).toList().map(new Func1<List<String>,String[]>(){
    @Override public String[] call(    List<String> strings){
      return strings.toArray(new String[strings.size()]);
    }
  }
);
}","Observable<String[]> availableLibrariesObservable(){
  return mLibraryLoader.makeObservable().flatMap(new Func1<LibraryProviderInfo,Observable<String>>(){
    @Override public Observable<String> call(    final LibraryProviderInfo libraryProviderInfo){
      return Observable.using(new Func0<LibraryClient>(){
        @Override public LibraryClient call(){
          return LibraryClient.create(getContext(),LibraryUris.call(libraryProviderInfo.getAuthority()));
        }
      }
,new Func1<LibraryClient,Observable<String>>(){
        @Override public Observable<String> call(        LibraryClient libraryClient){
          try {
            Bundle reply=libraryClient.makeCall(LibraryMethods.CHECK_AVAILABILITY,null);
            if (LibraryExtras.getOk(reply)) {
              return Observable.just(libraryProviderInfo.getAuthority());
            }
 else {
              return Observable.empty();
            }
          }
 catch (          Exception e) {
            Timber.e(e,""String_Node_Str"",libraryProviderInfo.getAuthority());
            return Observable.empty();
          }
        }
      }
,new Action1<LibraryClient>(){
        @Override public void call(        LibraryClient libraryClient){
          libraryClient.release();
        }
      }
,true);
    }
  }
).toList().map(new Func1<List<String>,String[]>(){
    @Override public String[] call(    List<String> strings){
      return strings.toArray(new String[strings.size()]);
    }
  }
);
}",0.9262235208181154
170169,"void removeDifference(TreeNode currentTree,TreeNode newTree){
  for (  Track currentTrack : currentTree.tracks) {
    if (currentTrack == null) {
      Timber.e(""String_Node_Str"");
      continue;
    }
    boolean found=false;
    for (    Track newTrack : newTree.tracks) {
      if (currentTrack.getUri().equals(newTrack.getUri()) && currentTrack.getParentUri().equals(newTrack.getParentUri())) {
        found=true;
        break;
      }
    }
    if (!found) {
      Timber.d(""String_Node_Str"",currentTrack.getUri());
      mIndexDatabase.removeTrack(currentTrack.getUri(),currentTrack.getParentUri());
    }
  }
  for (  TreeNode currentNode : currentTree.children) {
    boolean found=false;
    for (    TreeNode newNode : newTree.children) {
      if (currentNode.self.equals(newNode.self) && currentNode.parent.equals(newNode.parent)) {
        found=true;
        removeDifference(currentNode,newNode);
        break;
      }
    }
    if (!found) {
      Timber.d(""String_Node_Str"",currentNode.self);
      mIndexDatabase.removeContainer(currentNode.self);
    }
  }
}","void removeDifference(TreeNode currentTree,TreeNode newTree){
  if (!currentTree.self.equals(newTree.self)) {
    Timber.e(""String_Node_Str"",currentTree.self,newTree.self);
    return;
  }
  for (  Track currentTrack : currentTree.tracks) {
    if (currentTrack == null) {
      Timber.e(""String_Node_Str"");
      continue;
    }
    boolean found=false;
    for (    Track newTrack : newTree.tracks) {
      if (newTrack == null) {
        Timber.e(""String_Node_Str"");
        continue;
      }
      if (currentTrack.getUri().equals(newTrack.getUri()) && currentTrack.getParentUri().equals(newTrack.getParentUri())) {
        found=true;
        break;
      }
    }
    if (!found) {
      Timber.d(""String_Node_Str"",currentTrack.getUri());
      mIndexDatabase.removeTrack(currentTrack.getUri(),currentTrack.getParentUri());
    }
  }
  for (  TreeNode currentNode : currentTree.children) {
    boolean found=false;
    for (    TreeNode newNode : newTree.children) {
      if (currentNode.self.equals(newNode.self) && currentNode.parent.equals(newNode.parent)) {
        found=true;
        removeDifference(currentNode,newNode);
        break;
      }
    }
    if (!found) {
      Timber.d(""String_Node_Str"",currentNode.self);
      mIndexDatabase.removeContainer(currentNode.self);
    }
  }
}",0.9076406381192276
170170,"@TargetApi(21) void themeButtons(int color){
  previousBtn.getDrawable().setTint(color);
  playPause.getDrawable().setTint(color);
  nextButton.getDrawable().setTint(color);
}","@TargetApi(21) void themeButtons(int color){
  final int[][] states=new int[1][];
  final int[] colors=new int[1];
  states[0]=EMPTY_STATE_SET;
  colors[0]=color;
  final ColorStateList stateList=new ColorStateList(states,colors);
  previousBtn.setImageTintList(stateList);
  playPause.setImageTintList(stateList);
  nextButton.setImageTintList(stateList);
}",0.3752345215759849
170171,"@Inject public IndexDatabaseHelper(@ForApplication Context context){
  super(context,DB_NAME,null,DB_VERSION,null);
}","@Inject public IndexDatabaseHelper(@ForApplication Context context){
  super(context,DB_NAME,null,DB_VERSION,new ErrorHandler());
}",0.9274193548387096
170172,"public static long getLong2(Bundle b){
  return b.getInt(LONG_ARG2);
}","public static long getLong2(Bundle b){
  return b.getLong(LONG_ARG2);
}",0.9645390070921984
170173,"public static long getLong(Bundle b){
  return b.getInt(LONG_ARG);
}","public static long getLong(Bundle b){
  return b.getLong(LONG_ARG);
}",0.9635036496350364
170174,"protected void queryArtistsInternal(final String library,final Subscriber<List<Artist>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Artist>(){
    @Override public void call(    Subscriber<? super Artist> subscriber){
      queryArtists(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Artist>(ArtistCompare.func(args.getString(SORTORDER)))).subscribe(subscriber);
}","protected void queryArtistsInternal(final String library,final Subscriber<List<Artist>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Artist>(){
    @Override public void call(    Subscriber<? super Artist> subscriber){
      queryArtists(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Artist>(ArtistCompare.func(args.getString(Extras.SORTORDER)))).subscribe(subscriber);
}",0.9922822491730982
170175,"private IBinder getBinderCallbackFromBundle(Bundle b){
  if (Build.VERSION.SDK_INT >= 18) {
    return b.getBinder(CALLBACK);
  }
 else {
    try {
synchronized (this) {
        if (_getIBinder == null) {
          _getIBinder=Bundle.class.getDeclaredMethod(""String_Node_Str"",String.class);
        }
      }
      return (IBinder)_getIBinder.invoke(b,CALLBACK);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}","private IBinder getBinderCallbackFromBundle(Bundle b){
  if (Build.VERSION.SDK_INT >= 18) {
    return b.getBinder(Extras.CALLBACK);
  }
 else {
    try {
synchronized (this) {
        if (_getIBinder == null) {
          _getIBinder=Bundle.class.getDeclaredMethod(""String_Node_Str"",String.class);
        }
      }
      return (IBinder)_getIBinder.invoke(b,Extras.CALLBACK);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}",0.984478935698448
170176,"protected void queryGenresInternal(final String library,final Subscriber<List<Genre>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Genre>(){
    @Override public void call(    Subscriber<? super Genre> subscriber){
      queryGenres(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Genre>(BundleableCompare.<Genre>func(args.getString(SORTORDER)))).subscribe(subscriber);
}","protected void queryGenresInternal(final String library,final Subscriber<List<Genre>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Genre>(){
    @Override public void call(    Subscriber<? super Genre> subscriber){
      queryGenres(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Genre>(BundleableCompare.<Genre>func(args.getString(Extras.SORTORDER)))).subscribe(subscriber);
}",0.9923664122137404
170177,"protected void queryAlbumsInternal(final String library,final Subscriber<List<Album>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Album>(){
    @Override public void call(    Subscriber<? super Album> subscriber){
      queryAlbums(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Album>(AlbumCompare.func(args.getString(SORTORDER)))).subscribe(subscriber);
}","protected void queryAlbumsInternal(final String library,final Subscriber<List<Album>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Album>(){
    @Override public void call(    Subscriber<? super Album> subscriber){
      queryAlbums(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Album>(AlbumCompare.func(args.getString(Extras.SORTORDER)))).subscribe(subscriber);
}",0.992161254199328
170178,"protected void queryPlaylistsInternal(final String library,final Subscriber<List<Playlist>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Playlist>(){
    @Override public void call(    Subscriber<? super Playlist> subscriber){
      queryPlaylists(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Playlist>(BundleableCompare.<Playlist>func(args.getString(SORTORDER)))).subscribe(subscriber);
}","protected void queryPlaylistsInternal(final String library,final Subscriber<List<Playlist>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Playlist>(){
    @Override public void call(    Subscriber<? super Playlist> subscriber){
      queryPlaylists(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Playlist>(BundleableCompare.<Playlist>func(args.getString(Extras.SORTORDER)))).subscribe(subscriber);
}",0.9927007299270072
170179,"protected void queryTracksInternal(final String library,final Subscriber<List<Track>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Track>(){
    @Override public void call(    Subscriber<? super Track> subscriber){
      queryTracks(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Track>(TrackCompare.func(args.getString(SORTORDER)))).subscribe(subscriber);
}","protected void queryTracksInternal(final String library,final Subscriber<List<Track>> subscriber,final Bundle args){
  Observable.create(new Observable.OnSubscribe<Track>(){
    @Override public void call(    Subscriber<? super Track> subscriber){
      queryTracks(library,subscriber,args);
    }
  }
).subscribeOn(scheduler).compose(new BundleableListTransformer<Track>(TrackCompare.func(args.getString(Extras.SORTORDER)))).subscribe(subscriber);
}",0.992161254199328
170180,"@DebugLog protected void browseFoldersInternal(final String library,final String identity,final Subscriber<List<Bundleable>> subscriber,final Bundle args){
  Observable<Bundleable> o=Observable.create(new Observable.OnSubscribe<Bundleable>(){
    @Override public void call(    Subscriber<? super Bundleable> subscriber){
      browseFolders(library,identity,subscriber,args);
    }
  }
).subscribeOn(scheduler);
  final String q=args.<Uri>getParcelable(URI).getQueryParameter(Q.Q);
  if (StringUtils.equals(q,Q.FOLDERS_ONLY)) {
    o=o.filter(new Func1<Bundleable,Boolean>(){
      @Override public Boolean call(      Bundleable bundleable){
        return bundleable instanceof Folder;
      }
    }
);
  }
 else   if (StringUtils.equals(q,Q.TRACKS_ONLY)) {
    o=o.filter(new Func1<Bundleable,Boolean>(){
      @Override public Boolean call(      Bundleable bundleable){
        return bundleable instanceof Track;
      }
    }
);
  }
  o.compose(new BundleableListTransformer<Bundleable>(FolderTrackCompare.func(args.getString(SORTORDER)))).subscribe(subscriber);
}","@DebugLog protected void browseFoldersInternal(final String library,final String identity,final Subscriber<List<Bundleable>> subscriber,final Bundle args){
  Observable<Bundleable> o=Observable.create(new Observable.OnSubscribe<Bundleable>(){
    @Override public void call(    Subscriber<? super Bundleable> subscriber){
      browseFolders(library,identity,subscriber,args);
    }
  }
).subscribeOn(scheduler);
  final String q=args.<Uri>getParcelable(Extras.URI).getQueryParameter(Q.Q);
  if (StringUtils.equals(q,Q.FOLDERS_ONLY)) {
    o=o.filter(new Func1<Bundleable,Boolean>(){
      @Override public Boolean call(      Bundleable bundleable){
        return bundleable instanceof Folder;
      }
    }
);
  }
 else   if (StringUtils.equals(q,Q.TRACKS_ONLY)) {
    o=o.filter(new Func1<Bundleable,Boolean>(){
      @Override public Boolean call(      Bundleable bundleable){
        return bundleable instanceof Track;
      }
    }
);
  }
  o.compose(new BundleableListTransformer<Bundleable>(FolderTrackCompare.func(args.getString(Extras.SORTORDER)))).subscribe(subscriber);
}",0.9935004642525532
170181,"private void startTest(){
  ProgressFragment.newInstance().show(getFragmentManager(),""String_Node_Str"");
  mAuthTestSubscription=AuthTest.create(mDriveHelper.getSession(mAccountName),new SimpleObserver<Boolean>(){
    @Override public void onNext(    Boolean aBoolean){
      finishSuccess();
    }
    @Override public void onError(    Throwable e){
      if (e instanceof UserRecoverableAuthIOException) {
        Intent intent=((UserRecoverableAuthIOException)e).getIntent();
        if (intent != null) {
          startActivityForResult(intent,REQUEST_AUTH_APPROVAL);
          return;
        }
      }
      finishFailure();
    }
  }
);
}","private void startTest(){
  ProgressFragment.newInstance().show(getFragmentManager(),ProgressFragment.TAG);
  mAuthTestFragment=AuthTestFragment.newInstance(mAccountName);
  mAuthTestFragment.setListener(this);
  getFragmentManager().beginTransaction().add(mAuthTestFragment,AuthTestFragment.TAG).commit();
}",0.190775681341719
170182,"@Override protected void onDestroy(){
  super.onDestroy();
  if (isSubscribed(mAuthTestSubscription))   mAuthTestSubscription.unsubscribe();
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (mAuthTestFragment != null) {
    mAuthTestFragment.setListener(null);
  }
}",0.6595744680851063
170183,"@Override @DebugLog protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_ACCOUNT_PICKER:
    if (resultCode == RESULT_OK) {
      mAccountName=data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
      startTest();
    }
 else {
      finishFailure();
    }
  break;
case REQUEST_AUTH_APPROVAL:
if (resultCode == RESULT_OK) {
  finishSuccess();
}
 else {
  finishFailure();
}
default :
super.onActivityResult(requestCode,resultCode,data);
}
}","@Override @DebugLog protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case REQUEST_ACCOUNT_PICKER:
    if (resultCode == RESULT_OK) {
      mAccountName=data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
      startTest();
    }
 else {
      finishFailure();
    }
  break;
case REQUEST_AUTH_APPROVAL:
if (resultCode == RESULT_OK) {
  finishSuccess();
}
 else {
  finishFailure();
}
break;
default :
super.onActivityResult(requestCode,resultCode,data);
}
}",0.9930898321816388
170184,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  radius=Math.min(w,h) * 2;
  Drawable d=getDrawable();
  if (d != null) {
    if (d instanceof RoundedBitmapDrawable) {
      ((RoundedBitmapDrawable)d).setCornerRadius(radius);
      d.invalidateSelf();
    }
 else     if (d instanceof TransitionDrawable) {
      Drawable d1=((TransitionDrawable)d).getDrawable(1);
      if (d1 instanceof RoundedBitmapDrawable) {
        ((RoundedBitmapDrawable)d1).setCornerRadius(radius);
        d.invalidateSelf();
      }
    }
  }
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  radius=Math.max(w,h) * 2;
  Drawable d=getDrawable();
  if (d != null) {
    if (d instanceof RoundedBitmapDrawable) {
      ((RoundedBitmapDrawable)d).setCornerRadius(radius);
      d.invalidateSelf();
    }
 else     if (d instanceof TransitionDrawable) {
      Drawable d1=((TransitionDrawable)d).getDrawable(1);
      if (d1 instanceof RoundedBitmapDrawable) {
        ((RoundedBitmapDrawable)d1).setCornerRadius(radius);
        d.invalidateSelf();
      }
    }
  }
}",0.9965753424657534
170185,"/** 
 * The real guts of parseNetworkResponse. Broken out for readability.
 */
private Bitmap doParse(NetworkResponse response){
  byte[] data=response.data;
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  if (mMaxWidth == 0 && mMaxHeight == 0) {
    decodeOptions.inPreferredConfig=mDecodeConfig;
    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  }
 else {
    decodeOptions.inJustDecodeBounds=true;
    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    int actualWidth=decodeOptions.outWidth;
    int actualHeight=decodeOptions.outHeight;
    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);
    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);
    decodeOptions.inJustDecodeBounds=false;
    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
      tempBitmap.recycle();
    }
 else {
      bitmap=tempBitmap;
    }
  }
  return bitmap;
}","/** 
 * The real guts of parseNetworkResponse. Broken out for readability.
 */
private Bitmap doParse(NetworkResponse response){
  byte[] data=response.data;
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  if (mMaxWidth == 0 && mMaxHeight == 0) {
    decodeOptions.inPreferredConfig=mDecodeConfig;
    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  }
 else {
    decodeOptions.inJustDecodeBounds=true;
    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    int actualWidth=decodeOptions.outWidth;
    int actualHeight=decodeOptions.outHeight;
    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);
    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);
    decodeOptions.inJustDecodeBounds=false;
    decodeOptions.inPreferQualityOverSpeed=true;
    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    Bitmap tempBitmap2;
    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
      tempBitmap2=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
      tempBitmap.recycle();
    }
 else     if (tempBitmap == null) {
      return null;
    }
 else {
      tempBitmap2=tempBitmap;
    }
    int w=tempBitmap2.getWidth();
    int h=tempBitmap2.getHeight();
    if (w > h) {
      bitmap=Bitmap.createBitmap(tempBitmap2,w / 2 - h / 2,0,h,h);
      tempBitmap2.recycle();
    }
 else     if (h > w) {
      bitmap=Bitmap.createBitmap(tempBitmap2,0,0,w,w);
      tempBitmap2.recycle();
    }
 else {
      bitmap=tempBitmap2;
    }
  }
  return bitmap;
}",0.7902562480227776
170186,"@Override public void onLoadingFailure(boolean relaunchPicker){
  if (relaunchPicker) {
    ((LibraryFragment)getParentFragment()).relaunchLibraryFragment();
  }
}","@Override public void onLoadingFailure(boolean relaunchPicker){
  if (relaunchPicker) {
    ((LibraryFragment)getParentFragment()).relaunchLibraryFragment();
  }
 else {
    setListShown(true);
  }
}",0.9005524861878453
170187,"/** 
 * Loads the image for the view if it isn't already loaded.
 * @param isInLayoutPass True if this was invoked from a layout pass, false otherwise.
 */
private void loadImageIfNecessary(final boolean isInLayoutPass){
  int width=getWidth();
  int height=getHeight();
  boolean isFullyWrapContent=getLayoutParams() != null && getLayoutParams().height == LayoutParams.WRAP_CONTENT && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
  if (width == 0 && height == 0 && !isFullyWrapContent) {
    return;
  }
  if (mArtInfo == null || TextUtils.isEmpty(mArtInfo.artistName)) {
    if (mImageContainer != null) {
      mImageContainer.cancelRequest();
      mImageContainer=null;
    }
    setDefaultImageOrNull();
    return;
  }
  if (mImageContainer != null && mImageContainer.getCacheKey() != null) {
    if (mImageContainer.getCacheKey().equals(ArtworkLoader.getCacheKey(mArtInfo,mImageType))) {
      return;
    }
 else {
      mImageContainer.cancelRequest();
      setDefaultImageOrNull();
    }
  }
  ImageContainer newContainer=mImageLoader.get(mArtInfo,new ResponseListener(this,isInLayoutPass),mImageType);
  mImageContainer=newContainer;
}","/** 
 * Loads the image for the view if it isn't already loaded.
 * @param isInLayoutPass True if this was invoked from a layout pass, false otherwise.
 */
private void loadImageIfNecessary(final boolean isInLayoutPass){
  int width=getWidth();
  int height=getHeight();
  boolean isFullyWrapContent=getLayoutParams() != null && getLayoutParams().height == LayoutParams.WRAP_CONTENT && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
  if (width == 0 && height == 0 && !isFullyWrapContent) {
    return;
  }
  if (mArtInfo == null || (TextUtils.isEmpty(mArtInfo.artistName) && TextUtils.isEmpty(mArtInfo.albumName) && mArtInfo.artworkUri == null)) {
    if (mImageContainer != null) {
      mImageContainer.cancelRequest();
      mImageContainer=null;
    }
    setDefaultImageOrNull();
    return;
  }
  if (mImageContainer != null && mImageContainer.getCacheKey() != null) {
    if (mImageContainer.getCacheKey().equals(ArtworkLoader.getCacheKey(mArtInfo,mImageType))) {
      return;
    }
 else {
      mImageContainer.cancelRequest();
      resetImage();
    }
  }
  ImageContainer newContainer=mImageLoader.get(mArtInfo,new ResponseListener(this,isInLayoutPass),mImageType);
  mImageContainer=newContainer;
}",0.9558266722759782
170188,"private void setDefaultImageOrNull(){
  setImageBitmap(null);
}","private void setDefaultImageOrNull(){
  if (mDefaultImageId != 0) {
    setImageResource(mDefaultImageId);
  }
 else {
    resetImage();
  }
}",0.5365853658536586
170189,"@Override public void onResponse(final ImageContainer response,final boolean isImmediate){
  ArtworkImageView v=reference.get();
  if (v == null) {
    if (D)     Log.d(TAG,""String_Node_Str"");
    return;
  }
  if (isImmediate && isInLayoutPass) {
    isInLayoutPass=false;
    v.post(new Runnable(){
      @Override public void run(){
        onResponse(response,isImmediate);
      }
    }
);
    return;
  }
  if (response.getBitmap() != null) {
    if (isImmediate) {
      v.setImageBitmap(response.getBitmap());
    }
 else {
      v.mDrawables[1]=new BitmapDrawable(v.getResources(),response.getBitmap());
      final TransitionDrawable transitionDrawable=new TransitionDrawable(v.mDrawables);
      transitionDrawable.setCrossFadeEnabled(true);
      v.setImageDrawable(transitionDrawable);
      transitionDrawable.startTransition(340);
    }
  }
 else   if (v.mDefaultImageId != 0) {
    v.mDrawables[0]=v.getResources().getDrawable(v.mDefaultImageId);
    if (isImmediate) {
      v.setImageResource(v.mDefaultImageId);
    }
 else {
      Drawable[] drawables=new Drawable[2];
      drawables[0]=new ColorDrawable(v.getResources().getColor(R.color.transparent));
      drawables[1]=v.mDrawables[0];
      TransitionDrawable transitionDrawable=new TransitionDrawable(drawables);
      transitionDrawable.setCrossFadeEnabled(true);
      v.setImageDrawable(transitionDrawable);
      transitionDrawable.startTransition(280);
    }
  }
}","@Override public void onResponse(final ImageContainer response,final boolean isImmediate){
  ArtworkImageView v=reference.get();
  if (v == null) {
    Timber.w(""String_Node_Str"");
    return;
  }
  if (isImmediate && isInLayoutPass) {
    isInLayoutPass=false;
    v.post(new Runnable(){
      @Override public void run(){
        onResponse(response,isImmediate);
      }
    }
);
    return;
  }
  if (response.getBitmap() != null) {
    if (isImmediate) {
      v.setImageBitmap(response.getBitmap());
    }
 else {
      v.mDrawables[1]=new BitmapDrawable(v.getResources(),response.getBitmap());
      final TransitionDrawable transitionDrawable=new TransitionDrawable(v.mDrawables);
      transitionDrawable.setCrossFadeEnabled(true);
      v.setImageDrawable(transitionDrawable);
      transitionDrawable.startTransition(340);
    }
  }
 else   if (v.mDefaultImageId != 0) {
    v.mDrawables[0]=v.getResources().getDrawable(v.mDefaultImageId);
    if (isImmediate) {
      v.setImageResource(v.mDefaultImageId);
    }
 else {
      Drawable[] drawables=new Drawable[2];
      drawables[0]=new ColorDrawable(v.getResources().getColor(R.color.transparent));
      drawables[1]=v.mDrawables[0];
      TransitionDrawable transitionDrawable=new TransitionDrawable(drawables);
      transitionDrawable.setCrossFadeEnabled(true);
      v.setImageDrawable(transitionDrawable);
      transitionDrawable.startTransition(280);
    }
  }
}",0.9902777777777778
170190,"@Override public void onErrorResponse(VolleyError error){
  ArtworkImageView v=reference.get();
  if (v == null) {
    if (D)     Log.d(TAG,""String_Node_Str"");
    return;
  }
  if (v.mErrorImageId != 0) {
    v.setImageResource(v.mErrorImageId);
  }
}","@Override public void onErrorResponse(VolleyError error){
  ArtworkImageView v=reference.get();
  if (v == null) {
    Timber.w(""String_Node_Str"");
    return;
  }
  if (v.mErrorImageId != 0) {
    v.setImageResource(v.mErrorImageId);
  }
}",0.943089430894309
170191,"@Override protected void onDetachedFromWindow(){
  if (mImageContainer != null) {
    mImageContainer.cancelRequest();
    setImageBitmap(null);
    mImageContainer=null;
  }
  super.onDetachedFromWindow();
}","@Override protected void onDetachedFromWindow(){
  if (mImageContainer != null) {
    mImageContainer.cancelRequest();
    resetImage();
    mImageContainer=null;
  }
  super.onDetachedFromWindow();
}",0.6519607843137255
170192,"/** 
 * Creates a cache key for use with the L1 cache.
 */
public static String getCacheKey(ArtInfo artInfo,ArtworkType imageType){
  return new StringBuilder(artInfo.artistName.length() + (artInfo.albumName != null ? artInfo.albumName.length() : 4) + 12).append(""String_Node_Str"").append(imageType).append(""String_Node_Str"").append(artInfo.artistName).append(""String_Node_Str"").append(artInfo.albumName).toString();
}","/** 
 * Creates a cache key for use with the L1 cache. if both artist and album are null we must use the uri or all requests will return the same cache key, to maintain backwards compat with orpheus versions < 0.5 we use artist,album when we can. if all fields in artinfo are null we cannot fetch any art so an npe will be thrown
 */
public static String getCacheKey(ArtInfo artInfo,ArtworkType imageType){
  int size=0;
  if (artInfo.artistName == null && artInfo.albumName == null) {
    if (artInfo.artworkUri == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    size+=artInfo.artworkUri.toString().length();
    return new StringBuilder(size + 12).append(""String_Node_Str"").append(imageType).append(""String_Node_Str"").append(artInfo.artworkUri.toString()).toString();
  }
 else {
    size+=artInfo.artistName != null ? artInfo.artistName.length() : 4;
    size+=artInfo.albumName != null ? artInfo.albumName.length() : 4;
    return new StringBuilder(size + 12).append(""String_Node_Str"").append(imageType).append(""String_Node_Str"").append(artInfo.artistName).append(""String_Node_Str"").append(artInfo.albumName).toString();
  }
}",0.4774603174603175
170193,"protected void onCreatePopupMenu(PopupMenu m){
  m.inflate(R.menu.popup_play_all);
  m.inflate(R.menu.popup_shuffle_all);
  m.inflate(R.menu.popup_add_to_queue);
  m.inflate(R.menu.popup_add_to_playlist);
  m.inflate(R.menu.card_genre);
  m.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
switch (item.getItemId()) {
case R.id.popup_play_all:
        mBus.post(new GenreCardClick(Event.PLAY_ALL,mData));
      return true;
case R.id.popup_shuffle_all:
    mBus.post(new GenreCardClick(Event.SHUFFLE_ALL,mData));
  return true;
case R.id.popup_add_to_queue:
mBus.post(new GenreCardClick(Event.ADD_TO_QUEUE,mData));
return true;
case R.id.popup_add_to_playlist:
mBus.post(new GenreCardClick(Event.ADD_TO_QUEUE,mData));
return true;
}
return false;
}
}
);
}","protected void onCreatePopupMenu(PopupMenu m){
  m.inflate(R.menu.popup_play_all);
  m.inflate(R.menu.popup_shuffle_all);
  m.inflate(R.menu.popup_add_to_queue);
  m.inflate(R.menu.popup_add_to_playlist);
  m.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
switch (item.getItemId()) {
case R.id.popup_play_all:
        mBus.post(new GenreCardClick(Event.PLAY_ALL,mData));
      return true;
case R.id.popup_shuffle_all:
    mBus.post(new GenreCardClick(Event.SHUFFLE_ALL,mData));
  return true;
case R.id.popup_add_to_queue:
mBus.post(new GenreCardClick(Event.ADD_TO_QUEUE,mData));
return true;
case R.id.popup_add_to_playlist:
mBus.post(new GenreCardClick(Event.ADD_TO_QUEUE,mData));
return true;
}
return false;
}
}
);
}",0.9805589307411908
170194,"public SongCard(Context context,Song song,int innerLayout){
  super(context,song,innerLayout);
}","public SongCard(Context context,Song song){
  super(context,song,R.layout.library_listcard_artwork_inner);
}",0.7254901960784313
170195,"@Override protected void onInnerViewSetup(){
  mCardTitle.setText(mData.name);
  mCardSubTitle.setText(mData.artistName);
  ArtworkManager.loadImage(new ArtInfo(mData.albumArtistName,mData.albumName,mData.artworkUri),mArtwork);
}","@Override protected void onInnerViewSetup(){
  mCardTitle.setText(mData.name);
  mCardSubTitle.setText(mData.artistName);
  String artist=mData.albumArtistName;
  if (TextUtils.isEmpty(artist)) {
    artist=mData.artistName;
  }
  ArtworkManager.loadImage(new ArtInfo(artist,mData.albumName,mData.artworkUri),mArtwork);
}",0.7527272727272727
170196,"/** 
 * Performs the web-service call. If the <code>session</code> parameter is <code>non-null</code> then an authenticated call is made. If it's <code>null</code> then an unauthenticated call is made.<br/> The <code>apiKey</code> parameter is always required, even when a valid session is passed to this method.
 * @param method The method to call
 * @param apiKey A Last.fm API key
 * @param params Parameters
 * @param session A Session instance or <code>null</code>
 * @return the result of the operation
 */
public Result call(final String method,final String apiKey,Map<String,String> params){
  params=new WeakHashMap<String,String>(params);
  InputStream inputStream=null;
  if (inputStream == null) {
    params.put(PARAM_API_KEY,apiKey);
    try {
      final HttpURLConnection urlConnection=openPostConnection(method,params);
      inputStream=getInputStreamFromConnection(urlConnection);
      if (inputStream == null) {
        lastResult=Result.createHttpErrorResult(urlConnection.getResponseCode(),urlConnection.getResponseMessage());
        return lastResult;
      }
    }
 catch (    final IOException ignored) {
    }
  }
  try {
    final Result result=createResultFromInputStream(inputStream);
    lastResult=result;
    return result;
  }
 catch (  final IOException ignored) {
  }
catch (  final SAXException ignored) {
  }
  return null;
}","/** 
 * Performs the web-service call. If the <code>session</code> parameter is <code>non-null</code> then an authenticated call is made. If it's <code>null</code> then an unauthenticated call is made.<br/> The <code>apiKey</code> parameter is always required, even when a valid session is passed to this method.
 * @param method The method to call
 * @param apiKey A Last.fm API key
 * @param params Parameters
 * @param session A Session instance or <code>null</code>
 * @return the result of the operation
 */
public Result call(final String method,final String apiKey,Map<String,String> params){
  params=new WeakHashMap<String,String>(params);
  InputStream inputStream=null;
  if (inputStream == null) {
    params.put(PARAM_API_KEY,apiKey);
    try {
      final HttpURLConnection urlConnection=openPostConnection(method,params);
      inputStream=getInputStreamFromConnection(urlConnection);
      if (inputStream == null) {
        lastResult=Result.createHttpErrorResult(urlConnection.getResponseCode(),urlConnection.getResponseMessage());
        return lastResult;
      }
    }
 catch (    final IOException ioEx) {
      Log.e(TAG,""String_Node_Str"",ioEx);
      lastResult=Result.createHttpErrorResult(HttpStatus.SC_SERVICE_UNAVAILABLE,ioEx.getLocalizedMessage());
      return lastResult;
    }
  }
  try {
    final Result result=createResultFromInputStream(inputStream);
    lastResult=result;
  }
 catch (  final IOException ioEx) {
    Log.e(TAG,""String_Node_Str"",ioEx);
    lastResult=new Result(ioEx.getLocalizedMessage());
  }
catch (  final SAXException saxEx) {
    Log.e(TAG,""String_Node_Str"",saxEx);
    lastResult=new Result(saxEx.getLocalizedMessage());
  }
  return lastResult;
}",0.8606770833333334
170197,"/** 
 * Fetches artwork from the ArtworkProvider, attempts to get fullscreen artwork first, on failure tries to get a thumbnail
 * @param artistName
 * @param albumName
 * @return Bitmap if found else null
 */
@DebugLog public Bitmap getArtwork(String artistName,String albumName){
  final String cacheKey=makeCacheKey(artistName,albumName,""String_Node_Str"");
  final Uri artworkUri=ArtworkProvider.createArtworkUri(artistName,albumName);
  Bitmap bitmap=queryArtworkProvider(artworkUri,cacheKey);
  if (bitmap == null) {
    bitmap=getArtworkThumbnail(artistName,albumName);
  }
  return bitmap;
}","/** 
 * Fetches artwork from the ArtworkProvider, attempts to get fullscreen artwork first, on failure tries to get a thumbnail
 * @param artistName
 * @param albumName
 * @return Bitmap if found else null
 */
@DebugLog public Bitmap getArtwork(String artistName,String albumName){
  if (artistName == null || albumName == null) {
    return null;
  }
  final String cacheKey=makeCacheKey(artistName,albumName,""String_Node_Str"");
  final Uri artworkUri=ArtworkProvider.createArtworkUri(artistName,albumName);
  Bitmap bitmap=queryArtworkProvider(artworkUri,cacheKey);
  if (bitmap == null) {
    bitmap=getArtworkThumbnail(artistName,albumName);
  }
  return bitmap;
}",0.9447077409162716
170198,"/** 
 * Fetches thumbnail from the ArtworkProvider
 * @param artistName
 * @param albumName
 * @return
 */
@DebugLog public Bitmap getArtworkThumbnail(String artistName,String albumName){
  final String cacheKey=makeCacheKey(artistName,albumName,""String_Node_Str"");
  final Uri artworkUri=ArtworkProvider.createArtworkThumbnailUri(artistName,albumName);
  return queryArtworkProvider(artworkUri,cacheKey);
}","/** 
 * Fetches thumbnail from the ArtworkProvider
 * @param artistName
 * @param albumName
 * @return
 */
@DebugLog public Bitmap getArtworkThumbnail(String artistName,String albumName){
  if (artistName == null || albumName == null) {
    return null;
  }
  final String cacheKey=makeCacheKey(artistName,albumName,""String_Node_Str"");
  final Uri artworkUri=ArtworkProvider.createArtworkThumbnailUri(artistName,albumName);
  return queryArtworkProvider(artworkUri,cacheKey);
}",0.920814479638009
170199,"public static String buildArtUrl(String host,Song song){
  String artist=song.albumArtistName != null ? song.albumArtistName : song.artistName;
  return ""String_Node_Str"" + host + ""String_Node_Str""+ CastWebServer.PORT+ ""String_Node_Str""+ artist+ ""String_Node_Str""+ song.albumName;
}","public static String buildArtUrl(String host,Song song){
  String artist=song.albumArtistName != null ? song.albumArtistName : song.artistName;
  String album=song.albumName;
  if (artist == null || album == null) {
    return null;
  }
  return ""String_Node_Str"" + host + ""String_Node_Str""+ CastWebServer.PORT+ ""String_Node_Str""+ artist+ ""String_Node_Str""+ album;
}",0.8271604938271605
170200,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (savedInstanceState == null) {
    setListShown(false);
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (mAdapter.isOnFirstLoad()) {
    setListShown(false);
  }
}",0.8837209302325582
170201,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (savedInstanceState == null) {
    setListShown(false);
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (mAdapter.isOnFirstLoad()) {
    setListShown(false);
  }
}",0.8837209302325582
170202,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (savedInstanceState == null) {
    setListShown(false);
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (mAdapter.isOnFirstLoad()) {
    setListShown(false);
  }
}",0.8837209302325582
170203,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPluginInfo=getArguments().getParcelable(""String_Node_Str"");
  RemoteLibraryUtil.bindToService(getActivity(),mPluginInfo.componentName);
  EventBus.getInstance().register(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mPluginInfo=getArguments().getParcelable(""String_Node_Str"");
  RemoteLibraryUtil.bindToService(getActivity(),mPluginInfo.componentName);
  EventBus.getInstance().register(this);
  mPagerAdapter=new HomePagerAdapter(getActivity(),getChildFragmentManager());
  if (savedInstanceState != null) {
    mLibraryIdentity=savedInstanceState.getString(""String_Node_Str"");
    mPreviousPagerPage=savedInstanceState.getInt(""String_Node_Str"");
  }
 else {
  }
}",0.6731234866828087
170204,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mPagerAdapter=new HomePagerAdapter(getActivity(),getChildFragmentManager());
  mPager.setAdapter(mPagerAdapter);
  if (savedInstanceState != null) {
    mLibraryIdentity=savedInstanceState.getString(""String_Node_Str"");
    mPreviousPagerPage=savedInstanceState.getInt(""String_Node_Str"");
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mPager.setAdapter(mPagerAdapter);
}",0.5520833333333334
170205,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (savedInstanceState == null) {
    setListShown(false);
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  setListAdapter(mAdapter);
  if (mAdapter.isOnFirstLoad()) {
    setListShown(false);
  }
}",0.8837209302325582
170206,"/** 
 * Called when we disconnect or think we are disconnectetd from the cast device
 */
private void restoreLocalState(){
  updatePlaybackLocation(PlaybackLocation.LOCAL);
  stopCastServer();
synchronized (this) {
    scheduleDelayedShutdown();
    mIsSupposedToBePlaying=false;
    notifyChange(PLAYSTATE_CHANGED);
  }
}","/** 
 * Called when we disconnect or think we are disconnectetd from the cast device
 */
private void restoreLocalState(){
  if (mPlaybackLocation == PlaybackLocation.LOCAL) {
    return;
  }
  updatePlaybackLocation(PlaybackLocation.LOCAL);
  stopCastServer();
synchronized (this) {
    scheduleDelayedShutdown();
    mIsSupposedToBePlaying=false;
    notifyChange(PLAYSTATE_CHANGED);
  }
}",0.9032258064516128
170207,"@DebugLog public void maybeClosePanel(){
  if (mSlidingPanel.isExpanded()) {
    mSlidingPanel.collapsePane();
  }
}","public void maybeClosePanel(){
  if (mSlidingPanel.isExpanded()) {
    mSlidingPanel.collapsePane();
  }
}",0.954954954954955
170208,"@DebugLog public void maybeOpenPanel(){
  if (!mSlidingPanel.isExpanded()) {
    mSlidingPanel.expandPane();
  }
}","public void maybeOpenPanel(){
  if (!mSlidingPanel.isExpanded()) {
    mSlidingPanel.expandPane();
  }
}",0.9541284403669724
170209,"@Override @DebugLog public void onPanelExpanded(View panel){
  mNowPlayingFragment.onPanelExpanded();
}","@Override public void onPanelExpanded(View panel){
  mNowPlayingFragment.onPanelExpanded();
}",0.9489795918367347
170210,"@Override @DebugLog public void onPanelCollapsed(View panel){
  mNowPlayingFragment.onPanelCollapsed();
}","@Override public void onPanelCollapsed(View panel){
  mNowPlayingFragment.onPanelCollapsed();
}",0.95
170211,"@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mIsLargeLandscape=findViewById(R.id.landscape_dummy) != null;
  if (mIsLargeLandscape) {
    mSlidingPanel.setSlidingEnabled(false);
    mSlidingPanel.setInitialState(SlideState.EXPANDED);
    onPanelExpanded(null);
  }
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().replace(R.id.main,new HomeFragment()).commit();
  }
}","@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mIsLargeLandscape=findViewById(R.id.landscape_dummy) != null;
  if (mIsLargeLandscape && savedInstanceState == null) {
    mSlidingPanel.setSlidingEnabled(false);
    mSlidingPanel.setInitialState(SlideState.EXPANDED);
    onPanelExpanded(null);
  }
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().replace(R.id.main,new HomeFragment()).commit();
  }
}",0.968944099378882
170212,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  if (savedInstanceState != null) {
    if (mIsLargeLandscape) {
      mSlidingPanel.setInitialState(SlideState.EXPANDED);
      onPanelExpanded(null);
    }
 else     if (savedInstanceState.getBoolean(""String_Node_Str"",false)) {
      mSlidingPanel.setInitialState(SlideState.COLLAPSED);
      onPanelCollapsed(null);
    }
  }
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  if (savedInstanceState != null) {
    if (mIsLargeLandscape) {
      mSlidingPanel.setSlidingEnabled(false);
      mSlidingPanel.setInitialState(SlideState.EXPANDED);
      setPanelExpanded();
      if (savedInstanceState.getBoolean(""String_Node_Str"",false)) {
        mNowPlayingFragment.onQueueVisibilityChanged(true);
      }
    }
 else     if (savedInstanceState.getBoolean(""String_Node_Str"",false)) {
      mSlidingPanel.setInitialState(SlideState.COLLAPSED);
      setPanelCollapsed();
      if (savedInstanceState.getBoolean(""String_Node_Str"",false)) {
        mNowPlayingFragment.popQueueFragment();
      }
    }
 else     if (savedInstanceState.getBoolean(""String_Node_Str"",false)) {
      setPanelExpanded();
      if (savedInstanceState.getBoolean(""String_Node_Str"",false)) {
        mNowPlayingFragment.onQueueVisibilityChanged(true);
      }
    }
  }
}",0.6126373626373627
170213,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(""String_Node_Str"",mIsLargeLandscape);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(""String_Node_Str"",mSlidingPanel.isExpanded());
  outState.putBoolean(""String_Node_Str"",mNowPlayingFragment.isQueueShowing());
  outState.putBoolean(""String_Node_Str"",mIsLargeLandscape);
}",0.6877637130801688
170214,"private void pushQueueFragment(){
  mActivity.getSupportFragmentManager().beginTransaction().add(R.id.panel_middle_content,new QueueFragment(),""String_Node_Str"").setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
  onQueueVisibilityChanged(true);
}","public void pushQueueFragment(){
  mActivity.getSupportFragmentManager().beginTransaction().add(R.id.panel_middle_content,new QueueFragment(),""String_Node_Str"").setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
  onQueueVisibilityChanged(true);
}",0.9791271347248576
170215,"private void popQueueFragment(){
  mActivity.getSupportFragmentManager().beginTransaction().remove(mActivity.getSupportFragmentManager().findFragmentByTag(""String_Node_Str"")).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_CLOSE).commit();
  onQueueVisibilityChanged(false);
}","public void popQueueFragment(){
  mActivity.getSupportFragmentManager().beginTransaction().remove(mActivity.getSupportFragmentManager().findFragmentByTag(""String_Node_Str"")).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_CLOSE).commit();
  onQueueVisibilityChanged(false);
}",0.9802513464991024
170216,"public void transitionToClosed(){
  mBackground.reverseTransition(TRANSITION_DURATION * 2);
  flipit();
}","public void transitionToClosed(){
  if (isOpen) {
    mBackground.reverseTransition(TRANSITION_DURATION * 2);
    flipit();
    isOpen=false;
  }
}",0.8333333333333334
170217,"public void transitionToOpen(){
  mBackground.startTransition(TRANSITION_DURATION * 2);
  flipit();
}","public void transitionToOpen(){
  if (!isOpen) {
    mBackground.startTransition(TRANSITION_DURATION * 2);
    flipit();
    isOpen=true;
  }
}",0.8278688524590164
170218,"@Override protected void onFinishInflate(){
  super.onFinishInflate();
  mButtonBarClosed=findViewById(R.id.header_closed_button_bar);
  mButtonBarOpen=findViewById(R.id.header_open_button_bar);
  mButtonBarOpen.setVisibility(GONE);
}","@Override protected void onFinishInflate(){
  super.onFinishInflate();
  mButtonBarClosed=findViewById(R.id.header_closed_button_bar);
  mButtonBarOpen=findViewById(R.id.header_open_button_bar);
  mButtonBarOpen.setVisibility(GONE);
  isOpen=false;
}",0.9669421487603306
170219,"public File genSave(File file,DrawFBP.FileChooserParms fCP,Object contents){
  boolean saveAs=false;
  File newFile=null;
  String fileString=null;
  if (file == null)   saveAs=true;
  if (saveAs) {
    String suggestedFileName=""String_Node_Str"";
    String s=driver.properties.get(fCP.propertyName);
    if (s == null)     s=System.getProperty(""String_Node_Str"");
    File f=new File(s);
    if (!f.exists()) {
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + s + ""String_Node_Str"",MyOptionPane.ERROR_MESSAGE);
      f=new File(System.getProperty(""String_Node_Str""));
    }
    String fn=""String_Node_Str"";
    suggestedFileName=""String_Node_Str"";
    File g=diagFile;
    MyFileChooser fc=null;
    if (g != null) {
      fn=g.getName();
      suggestedFileName=s + File.separator + fn;
      int i=suggestedFileName.lastIndexOf(""String_Node_Str"");
      suggestedFileName=suggestedFileName.substring(0,i) + fCP.fileExt;
      fc=new MyFileChooser(f,fCP);
      fc.setSuggestedName(suggestedFileName);
    }
 else     fc=new MyFileChooser(f,fCP);
    int returnVal=fc.showOpenDialog(saveAs);
    if (returnVal == MyFileChooser.APPROVE_OPTION) {
      newFile=new File(driver.getSelFile(fc));
      s=newFile.getAbsolutePath();
      if (s.endsWith(""String_Node_Str"")) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + newFile.getName(),MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      if (newFile.getParentFile() == null) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + newFile.getName(),MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      if (!(newFile.getParentFile().exists())) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + newFile.getAbsolutePath(),MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      if (s.toLowerCase().endsWith(""String_Node_Str"")) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + s,MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      File f2=new File(s);
      if (!(f2.exists()) || f2.isDirectory()) {
        String suff=getSuffix(s);
        if (suff == null)         newFile=new File(s + fCP.fileExt);
 else {
          if (!((driver.new ImageFilter()).accept(new File(s)))) {
            newFile=new File(s.substring(0,s.lastIndexOf(suff)) + fCP.fileExt.substring(1));
          }
        }
      }
    }
    if (newFile == null)     return null;
    if (fCP.fileExt.equals(""String_Node_Str"") && -1 != diagramIsOpen(newFile.getAbsolutePath()))     return null;
    if (newFile.exists()) {
      if (newFile.isDirectory()) {
        MyOptionPane.showMessageDialog(driver.frame,newFile.getName() + ""String_Node_Str"",MyOptionPane.WARNING_MESSAGE);
        return null;
      }
      if (!(MyOptionPane.YES_OPTION == MyOptionPane.showConfirmDialog(driver.frame,""String_Node_Str"" + newFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",MyOptionPane.YES_NO_OPTION)))       return null;
    }
 else {
      if (!(MyOptionPane.YES_OPTION == MyOptionPane.showConfirmDialog(driver.frame,""String_Node_Str"" + newFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",MyOptionPane.YES_NO_OPTION)))       return null;
    }
    file=newFile;
  }
  if (fCP == fCPArr[DrawFBP.IMAGE]) {
    Path path=file.toPath();
    try {
      Files.deleteIfExists(path);
      file=null;
      file=path.toFile();
      String suff=getSuffix(file.getAbsolutePath());
      BufferedImage bi=(BufferedImage)contents;
      ImageIO.write(bi,suff,file);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    if (fCP.fileExt.equals(""String_Node_Str"")) {
      fileString=readFile(file);
      diagFile=file;
      if (fileString != null) {
        String s=file.getAbsolutePath();
        File oldFile=file;
        file=new File(s.substring(0,s.length() - 1) + ""String_Node_Str"");
        writeFile(file,fileString);
        file=oldFile;
      }
      fileString=buildFile();
    }
 else     fileString=(String)contents;
    writeFile(file,fileString);
  }
  MyOptionPane.showMessageDialog(driver.frame,fCP.name + ""String_Node_Str"" + file.getName());
  return file;
}","public File genSave(File file,DrawFBP.FileChooserParms fCP,Object contents){
  boolean saveAs=false;
  File newFile=null;
  String fileString=null;
  if (file == null)   saveAs=true;
  if (saveAs) {
    String suggestedFileName=""String_Node_Str"";
    String s=driver.properties.get(fCP.propertyName);
    if (s == null)     s=System.getProperty(""String_Node_Str"");
    File f=new File(s);
    if (!f.exists()) {
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + s + ""String_Node_Str"",MyOptionPane.ERROR_MESSAGE);
      f=new File(System.getProperty(""String_Node_Str""));
    }
    String fn=""String_Node_Str"";
    suggestedFileName=""String_Node_Str"";
    File g=diagFile;
    MyFileChooser fc=null;
    if (g != null) {
      fn=g.getName();
      suggestedFileName=s + File.separator + fn;
      int i=suggestedFileName.lastIndexOf(""String_Node_Str"");
      suggestedFileName=suggestedFileName.substring(0,i) + fCP.fileExt;
      fc=new MyFileChooser(f,fCP);
      fc.setSuggestedName(suggestedFileName);
    }
 else     fc=new MyFileChooser(f,fCP);
    int returnVal=fc.showOpenDialog(saveAs);
    if (returnVal == MyFileChooser.APPROVE_OPTION) {
      newFile=new File(driver.getSelFile(fc));
      s=newFile.getAbsolutePath();
      if (s.endsWith(""String_Node_Str"")) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + newFile.getName(),MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      if (!s.endsWith(fCP.fileExt)) {
        s+=fCP.fileExt;
        newFile=new File(s);
      }
      if (newFile.getParentFile() == null) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + newFile.getName(),MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      if (!(newFile.getParentFile().exists())) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + newFile.getAbsolutePath(),MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      if (s.toLowerCase().endsWith(""String_Node_Str"")) {
        MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + s,MyOptionPane.ERROR_MESSAGE);
        return null;
      }
      File f2=new File(s);
      if (!(f2.exists()) || f2.isDirectory()) {
        String suff=getSuffix(s);
        if (suff == null)         newFile=new File(s + fCP.fileExt);
 else {
          if (!((driver.new ImageFilter()).accept(new File(s)))) {
            newFile=new File(s.substring(0,s.lastIndexOf(suff)) + fCP.fileExt.substring(1));
          }
        }
      }
    }
    if (newFile == null)     return null;
    if (fCP.fileExt.equals(""String_Node_Str"") && -1 != diagramIsOpen(newFile.getAbsolutePath()))     return null;
    if (newFile.exists()) {
      if (newFile.isDirectory()) {
        MyOptionPane.showMessageDialog(driver.frame,newFile.getName() + ""String_Node_Str"",MyOptionPane.WARNING_MESSAGE);
        return null;
      }
      if (!(MyOptionPane.YES_OPTION == MyOptionPane.showConfirmDialog(driver.frame,""String_Node_Str"" + newFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",MyOptionPane.YES_NO_OPTION)))       return null;
    }
 else {
      if (!(MyOptionPane.YES_OPTION == MyOptionPane.showConfirmDialog(driver.frame,""String_Node_Str"" + newFile.getAbsolutePath() + ""String_Node_Str"",""String_Node_Str"",MyOptionPane.YES_NO_OPTION)))       return null;
    }
    file=newFile;
  }
  if (fCP == fCPArr[DrawFBP.IMAGE]) {
    Path path=file.toPath();
    try {
      Files.deleteIfExists(path);
      file=null;
      file=path.toFile();
      String suff=getSuffix(file.getAbsolutePath());
      BufferedImage bi=(BufferedImage)contents;
      ImageIO.write(bi,suff,file);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    if (fCP.fileExt.equals(""String_Node_Str"")) {
      fileString=readFile(file);
      diagFile=file;
      if (fileString != null) {
        String s=file.getAbsolutePath();
        File oldFile=file;
        file=new File(s.substring(0,s.length() - 1) + ""String_Node_Str"");
        writeFile(file,fileString);
        file=oldFile;
      }
      fileString=buildFile();
    }
 else     fileString=(String)contents;
    writeFile(file,fileString);
  }
  MyOptionPane.showMessageDialog(driver.frame,fCP.name + ""String_Node_Str"" + file.getName());
  return file;
}",0.9883158267437744
170220,"static String makeAbsFileName(String current,String parent){
  if (current.equals(""String_Node_Str""))   return parent;
  if (current.startsWith(""String_Node_Str""))   return current;
  if (current.length() < 2 || current.substring(1,2).equals(""String_Node_Str""))   return current;
  String cur=current.replace('\\','/');
  String par=parent.replace('\\','/');
  int k=0;
  int m=0;
  while (true) {
    if (cur.length() >= 3 && cur.substring(k,k + 3).equals(""String_Node_Str"")) {
      k+=3;
      m++;
      continue;
    }
    if (cur.length() >= 2 && cur.substring(k,k + 2).equals(""String_Node_Str"")) {
      k+=2;
      m++;
      continue;
    }
    break;
  }
  for (int n=0; n < m; n++) {
    int j=par.lastIndexOf(""String_Node_Str"");
    if (j == -1)     return current;
    par=par.substring(0,j);
  }
  return par + ""String_Node_Str"" + cur.substring(k);
}","static String makeAbsFileName(String current,String parent){
  if (current.equals(""String_Node_Str""))   return parent;
  if (current.startsWith(""String_Node_Str""))   return current;
  if (current.length() > 1 && current.substring(1,2).equals(""String_Node_Str""))   return current;
  String cur=current.replace('\\','/');
  String par=parent.replace('\\','/');
  int k=0;
  int m=0;
  while (true) {
    if (cur.length() >= 3 && cur.substring(k,k + 3).equals(""String_Node_Str"")) {
      k+=3;
      m++;
      continue;
    }
    if (cur.length() >= 2 && cur.substring(k,k + 2).equals(""String_Node_Str"")) {
      k+=2;
      m++;
      continue;
    }
    break;
  }
  for (int n=0; n < m; n++) {
    int j=par.lastIndexOf(""String_Node_Str"");
    if (j == -1)     return current;
    par=par.substring(0,j);
  }
  return par + ""String_Node_Str"" + cur.substring(k);
}",0.9930555555555556
170221,"void displayPortInfo(){
  buildMetadata();
  final JDialog jdialog=new JDialog(driver.frame);
  jdialog.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent ev){
      jdialog.dispose();
    }
  }
);
  jdialog.setTitle(""String_Node_Str"");
  jdialog.toFront();
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBackground(Color.GRAY);
  GridBagLayout gbl=new GridBagLayout();
  GridBagConstraints gbc=new GridBagConstraints();
  panel.setLayout(gbl);
  gbc.fill=GridBagConstraints.BOTH;
  gbc.weightx=0.5;
  gbc.weighty=0.5;
  gbc.gridx=0;
  gbc.gridy=0;
  gbc.gridwidth=ROWSIZE;
  JTextField tf0=new JTextField(""String_Node_Str"" + fullClassName + ""String_Node_Str"");
  tf0.setEditable(false);
  gbl.setConstraints(tf0,gbc);
  tf0.setBackground(lg);
  panel.add(tf0);
  gbc.weightx=1.5;
  gbc.weighty=0.5;
  gbc.gridx=0;
  gbc.gridy=1;
  gbc.gridwidth=ROWSIZE;
  if (compDescr == null || compDescr.equals(""String_Node_Str"")) {
    compDescr=""String_Node_Str"";
  }
  JTextField tf1=new JTextField(compDescr);
  tf1.setEditable(false);
  gbl.setConstraints(tf1,gbc);
  tf1.setBackground(lg);
  panel.add(tf1);
  gbc.fill=GridBagConstraints.BOTH;
  gbc.weightx=0.5;
  gbc.gridwidth=1;
  gbc.gridy=2;
  JTextField[] tft=new JTextField[ROWSIZE];
  tft[0]=new JTextField(""String_Node_Str"");
  tft[1]=new JTextField(""String_Node_Str"");
  tft[2]=new JTextField(""String_Node_Str"");
  tft[3]=new JTextField(""String_Node_Str"");
  tft[4]=new JTextField(""String_Node_Str"");
  displayRow(gbc,gbl,tft,panel,Color.BLUE);
  for (  AInPort ip : inputPortAttrs.values()) {
    JTextField[] tfi=new JTextField[ROWSIZE];
    tfi[0]=new JTextField(ip.value);
    String s=""String_Node_Str"";
    if (ip.arrayPort)     s+=""String_Node_Str"";
    if (ip.fixedSize)     s+=""String_Node_Str"";
    if (ip.optional)     s+=""String_Node_Str"";
    tfi[1]=new JTextField(s);
    if (ip.type == null)     tfi[2]=new JTextField(""String_Node_Str"");
 else     tfi[2]=new JTextField(ip.type.getName());
    tfi[3]=new JTextField(ip.description);
    int res=testMatch(tfi[0].getText(),tfi[1].getText());
    String results[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    tfi[4]=new JTextField(results[res]);
    gbc.gridx=0;
    gbc.weightx=0.5;
    displayRow(gbc,gbl,tfi,panel,Color.BLACK);
  }
  for (  AOutPort op : outputPortAttrs.values()) {
    JTextField[] tfo=new JTextField[ROWSIZE];
    tfo[0]=new JTextField(op.value);
    String s=""String_Node_Str"";
    if (op.arrayPort)     s+=""String_Node_Str"";
    if (op.fixedSize)     s+=""String_Node_Str"";
    if (op.optional)     s+=""String_Node_Str"";
    tfo[1]=new JTextField(s);
    if (op.type == null)     tfo[2]=new JTextField(""String_Node_Str"");
 else     tfo[2]=new JTextField(op.type.getName());
    tfo[3]=new JTextField(op.description);
    int res=testMatch(tfo[0].getText(),tfo[1].getText());
    String results[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    tfo[4]=new JTextField(results[res]);
    displayRow(gbc,gbl,tfo,panel,Color.BLACK);
  }
  LinkedList<String> lst=checkUnmatchedPorts();
  for (  String ls : lst) {
    JTextField[] tfu=new JTextField[ROWSIZE];
    tfu[0]=new JTextField(ls.substring(1));
    if (ls.substring(0,1).equals(""String_Node_Str""))     tfu[1]=new JTextField(""String_Node_Str"");
 else     tfu[1]=new JTextField(""String_Node_Str"");
    tfu[2]=new JTextField(""String_Node_Str"");
    tfu[3]=new JTextField(""String_Node_Str"");
    tfu[4]=new JTextField(""String_Node_Str"");
    displayRow(gbc,gbl,tfu,panel,Color.BLACK);
  }
  jdialog.add(panel);
  Point p=driver.frame.getLocation();
  Dimension dim=driver.frame.getSize();
  int x_off=100;
  int y_off=100;
  jdialog.setPreferredSize(new Dimension(dim.width - x_off,dim.height - y_off));
  jdialog.pack();
  int height=200 + inputPortAttrs.size() * 40 + outputPortAttrs.size() * 40;
  int width=(int)jdialog.getPreferredSize().getWidth();
  jdialog.setLocation(p.x + dim.width - width,p.y + dim.height - height - y_off);
  jdialog.setSize(800,height);
  panel.setVisible(true);
  jdialog.setVisible(true);
  jdialog.toFront();
  panel.repaint();
  jdialog.repaint();
  driver.frame.repaint();
}","void displayPortInfo(){
  buildMetadata();
  final JDialog jdialog=new JDialog(driver.frame);
  jdialog.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent ev){
      jdialog.dispose();
    }
  }
);
  jdialog.setTitle(""String_Node_Str"");
  jdialog.toFront();
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBackground(Color.GRAY);
  GridBagLayout gbl=new GridBagLayout();
  GridBagConstraints gbc=new GridBagConstraints();
  panel.setLayout(gbl);
  gbc.fill=GridBagConstraints.BOTH;
  gbc.weightx=0.5;
  gbc.weighty=0.5;
  gbc.gridx=0;
  gbc.gridy=0;
  gbc.gridwidth=ROWSIZE;
  JTextField tf0=new JTextField(""String_Node_Str"" + fullClassName + ""String_Node_Str"");
  tf0.setEditable(false);
  gbl.setConstraints(tf0,gbc);
  tf0.setBackground(lg);
  panel.add(tf0);
  gbc.weightx=1.5;
  gbc.weighty=0.5;
  gbc.gridx=0;
  gbc.gridy=1;
  gbc.gridwidth=ROWSIZE;
  if (compDescr == null || compDescr.equals(""String_Node_Str"")) {
    compDescr=""String_Node_Str"";
  }
  JTextField tf1=new JTextField(compDescr);
  tf1.setEditable(false);
  gbl.setConstraints(tf1,gbc);
  tf1.setBackground(lg);
  panel.add(tf1);
  gbc.fill=GridBagConstraints.BOTH;
  gbc.weightx=0.5;
  gbc.gridwidth=1;
  gbc.gridy=2;
  JTextField[] tft=new JTextField[ROWSIZE];
  tft[0]=new JTextField(""String_Node_Str"");
  tft[1]=new JTextField(""String_Node_Str"");
  tft[2]=new JTextField(""String_Node_Str"");
  tft[3]=new JTextField(""String_Node_Str"");
  tft[4]=new JTextField(""String_Node_Str"");
  displayRow(gbc,gbl,tft,panel,Color.BLUE);
  for (  AInPort ip : inputPortAttrs.values()) {
    JTextField[] tfi=new JTextField[ROWSIZE];
    tfi[0]=new JTextField(ip.value);
    String s=""String_Node_Str"";
    if (ip.arrayPort)     s+=""String_Node_Str"";
    if (ip.fixedSize)     s+=""String_Node_Str"";
    if (ip.optional)     s+=""String_Node_Str"";
    tfi[1]=new JTextField(s);
    if (ip.type == null)     tfi[2]=new JTextField(""String_Node_Str"");
 else     tfi[2]=new JTextField(ip.type.getName());
    tfi[3]=new JTextField(ip.description);
    int res=testMatch(tfi[0].getText(),tfi[1].getText());
    String results[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    tfi[4]=new JTextField(results[res]);
    gbc.gridx=0;
    gbc.weightx=0.5;
    displayRow(gbc,gbl,tfi,panel,Color.BLACK);
  }
  for (  AOutPort op : outputPortAttrs.values()) {
    JTextField[] tfo=new JTextField[ROWSIZE];
    tfo[0]=new JTextField(op.value);
    String s=""String_Node_Str"";
    if (op.arrayPort)     s+=""String_Node_Str"";
    if (op.fixedSize)     s+=""String_Node_Str"";
    if (op.optional)     s+=""String_Node_Str"";
    tfo[1]=new JTextField(s);
    if (op.type == null)     tfo[2]=new JTextField(""String_Node_Str"");
 else     tfo[2]=new JTextField(op.type.getName());
    tfo[3]=new JTextField(op.description);
    int res=testMatch(tfo[0].getText(),tfo[1].getText());
    String results[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    tfo[4]=new JTextField(results[res]);
    displayRow(gbc,gbl,tfo,panel,Color.BLACK);
  }
  LinkedList<String> lst=checkUnmatchedPorts();
  for (  String ls : lst) {
    JTextField[] tfu=new JTextField[ROWSIZE];
    tfu[0]=new JTextField(ls.substring(1));
    if (ls.substring(0,1).equals(""String_Node_Str""))     tfu[1]=new JTextField(""String_Node_Str"");
 else     tfu[1]=new JTextField(""String_Node_Str"");
    tfu[2]=new JTextField(""String_Node_Str"");
    tfu[3]=new JTextField(""String_Node_Str"");
    tfu[4]=new JTextField(""String_Node_Str"");
    displayRow(gbc,gbl,tfu,panel,Color.BLACK);
  }
  jdialog.add(panel);
  Point p=driver.frame.getLocation();
  Dimension dim=driver.frame.getSize();
  int x_off=100;
  int y_off=100;
  jdialog.setPreferredSize(new Dimension(dim.width - x_off,dim.height - y_off));
  jdialog.pack();
  int height=200 + inputPortAttrs.size() * 40 + outputPortAttrs.size() * 40;
  int width=(int)jdialog.getPreferredSize().getWidth();
  jdialog.setLocation(p.x + dim.width - width,p.y + dim.height - height - y_off);
  jdialog.setSize(800,height);
  panel.setVisible(true);
  jdialog.setVisible(true);
  jdialog.toFront();
  jdialog.pack();
  jdialog.validate();
  panel.repaint();
  jdialog.repaint();
  driver.frame.repaint();
}",0.9868860276585598
170222,"void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  if (this == driver.selBlock && !(this instanceof ProcessBlock)) {
    showArrowEndAreas(g);
    return;
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
  int tlx=cx - width / 2;
  int tly=cy - height / 2;
  g.setFont(driver.fontg);
  g.setColor(Color.BLACK);
  g.drawRoundRect(tlx,tly,width,height,6,6);
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  g.fillRoundRect(tlx + 1,tly + 1,width - 1,height - 1,6,6);
  if (multiplex) {
    int x, y;
    String s=mpxfactor;
    if (s == null)     s=""String_Node_Str"";
    int i=s.length() * driver.fontWidth + 10;
    x=tlx - i;
    y=cy - 20 / 2;
    g.setColor(Color.BLACK);
    g.drawRoundRect(x,y,i - 1,20,2,2);
    if (this == driver.selBlock)     g.setColor(new Color(255,255,200));
 else     g.setColor(new Color(200,255,255));
    g.fillRoundRect(x + 1,y + 1,i - 2,19,2,2);
    g.setColor(Color.BLACK);
    if (mpxfactor != null)     g.drawString(mpxfactor,x + 5,y + 15);
  }
  g.setColor(Color.BLACK);
  if (isSubnet)   g.drawRoundRect(tlx + 2,tly + 2,width - 4,height - 4,6,6);
  if (description != null) {
    centreDesc(g);
  }
  if (!visible && this == driver.selBlock)   g.drawLine(tlx,tly,cx + width / 2,cy + height / 2);
  int y=cy + height / 2 + driver.fontHeight + driver.fontHeight / 2;
  if (diagramFileName != null) {
    Font fontsave=g.getFont();
    g.setFont(driver.fontf);
    g.setColor(Color.GRAY);
    File gFile=new File(diagramFileName);
    String name=gFile.getName();
    int x=cx - name.length() * driver.fontWidth / 2;
    g.drawString(name,x,y);
    g.setFont(fontsave);
    y+=driver.fontHeight;
  }
  String name=null;
  if (diag.diagLang != null && diag.diagLang.label.equals(""String_Node_Str"")) {
    if (javaClass != null) {
      Font fontsave=g.getFont();
      g.setFont(driver.fontf);
      g.setColor(Color.BLUE);
      name=javaClass.getSimpleName() + ""String_Node_Str"";
      int x=cx - name.length() * driver.fontWidth / 2;
      g.drawString(name,x,y);
      g.setFont(fontsave);
      y+=driver.fontHeight;
    }
 else     if (fullClassName != null) {
      Font fontsave=g.getFont();
      g.setFont(driver.fontf);
      name=""String_Node_Str"";
      int x=cx - name.length() * driver.fontWidth / 2;
      g.drawString(name,x,y);
      g.setFont(fontsave);
      y+=driver.fontHeight;
      name=fullClassName;
      g.setColor(Color.RED);
      x=cx - name.length() * driver.fontWidth / 2;
      g.drawString(name,x,y);
      g.setFont(fontsave);
      g.setColor(Color.BLACK);
      y+=driver.fontHeight;
    }
  }
  if (codeFileName != null) {
    Font fontsave=g.getFont();
    g.setFont(driver.fontf);
    name=codeFileName;
    int i=name.lastIndexOf(File.separator);
    if (i == -1)     i=name.lastIndexOf(""String_Node_Str"");
    name=name.substring(i + 1);
    g.setColor(Color.BLACK);
    int x=cx - name.length() * driver.fontWidth / 2;
    g.drawString(name,x,y);
    g.setFont(fontsave);
    g.setColor(Color.BLACK);
  }
  if (hNeighbour != null) {
    g.setColor(Color.ORANGE);
    if (hNeighbour.cx < cx)     g.drawLine(hNeighbour.cx - hNeighbour.width / 2,hNeighbour.cy + hNeighbour.height / 2,cx + width / 2,hNeighbour.cy + hNeighbour.height / 2);
 else     g.drawLine(hNeighbour.cx + hNeighbour.width / 2,hNeighbour.cy + hNeighbour.height / 2,cx - width / 2,hNeighbour.cy + hNeighbour.height / 2);
    g.setColor(Color.BLACK);
  }
  if (vNeighbour != null) {
    g.setColor(Color.ORANGE);
    if (vNeighbour.cy < cy)     g.drawLine(vNeighbour.cx - vNeighbour.width / 2,vNeighbour.cy - vNeighbour.height / 2,vNeighbour.cx - vNeighbour.width / 2,cy + height / 2);
 else     g.drawLine(vNeighbour.cx - vNeighbour.width / 2,vNeighbour.cy + vNeighbour.height / 2,vNeighbour.cx - vNeighbour.width / 2,cy - height / 2);
    g.setColor(Color.BLACK);
  }
  if (driver.curDiag.arrowRoot != null) {
    if (driver.arrowEndForDragging == null || !driver.arrowEndForDragging.headMarked && !driver.arrowEndForDragging.tailMarked) {
{
        Color col=g.getColor();
        g.setColor(Color.BLUE);
        g.drawOval(driver.curDiag.arrowRoot.x - 5,driver.curDiag.arrowRoot.y - 5,10,10);
        g.setColor(col);
      }
    }
  }
}","void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  if (this == driver.selBlock && !(this instanceof ProcessBlock)) {
    showArrowEndAreas(g);
    return;
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
  int tlx=cx - width / 2;
  int tly=cy - height / 2;
  g.setFont(driver.fontg);
  g.setColor(Color.BLACK);
  g.drawRoundRect(tlx,tly,width,height,6,6);
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  g.fillRoundRect(tlx + 1,tly + 1,width - 1,height - 1,6,6);
  if (multiplex) {
    int x, y;
    String s=mpxfactor;
    if (s == null)     s=""String_Node_Str"";
    int i=s.length() * driver.fontWidth + 10;
    x=tlx - i;
    y=cy - 20 / 2;
    g.setColor(Color.BLACK);
    g.drawRoundRect(x,y,i - 1,20,2,2);
    if (this == driver.selBlock)     g.setColor(new Color(255,255,200));
 else     g.setColor(new Color(200,255,255));
    g.fillRoundRect(x + 1,y + 1,i - 2,19,2,2);
    g.setColor(Color.BLACK);
    if (mpxfactor != null)     g.drawString(mpxfactor,x + 5,y + 15);
  }
  g.setColor(Color.BLACK);
  if (isSubnet)   g.drawRoundRect(tlx + 2,tly + 2,width - 4,height - 4,6,6);
  if (description != null) {
    centreDesc(g);
  }
  if (!visible && this == driver.selBlock)   g.drawLine(tlx,tly,cx + width / 2,cy + height / 2);
  int y=cy + height / 2 + driver.fontHeight + driver.fontHeight / 2;
  if (diagramFileName != null) {
    Font fontsave=g.getFont();
    g.setFont(driver.fontf);
    g.setColor(Color.GRAY);
    File gFile=new File(diagramFileName);
    String name=gFile.getName();
    int x=cx - name.length() * driver.fontWidth / 2;
    g.drawString(name,x,y);
    g.setFont(fontsave);
    y+=driver.fontHeight;
  }
  String name=null;
  if (diag.diagLang != null && diag.diagLang.label.equals(""String_Node_Str"")) {
    if (javaClass != null) {
      Font fontsave=g.getFont();
      g.setFont(driver.fontf);
      g.setColor(Color.BLUE);
      name=javaClass.getSimpleName() + ""String_Node_Str"";
      int x=cx - name.length() * driver.fontWidth / 2;
      g.drawString(name,x,y);
      g.setFont(fontsave);
      y+=driver.fontHeight;
    }
 else     if (fullClassName != null) {
      Font fontsave=g.getFont();
      g.setFont(driver.fontf);
      name=""String_Node_Str"";
      int x=cx - name.length() * driver.fontWidth / 2;
      g.drawString(name,x,y);
      g.setFont(fontsave);
      y+=driver.fontHeight;
      name=fullClassName;
      g.setColor(Color.RED);
      x=cx - name.length() * driver.fontWidth / 2;
      g.drawString(name,x,y);
      g.setFont(fontsave);
      g.setColor(Color.BLACK);
      y+=driver.fontHeight;
    }
  }
  if (codeFileName != null) {
    Font fontsave=g.getFont();
    g.setFont(driver.fontf);
    name=codeFileName;
    int i=name.lastIndexOf(File.separator);
    if (i == -1)     i=name.lastIndexOf(""String_Node_Str"");
    name=name.substring(i + 1);
    g.setColor(Color.BLACK);
    int x=cx - name.length() * driver.fontWidth / 2;
    g.drawString(name,x,y);
    g.setFont(fontsave);
    g.setColor(Color.BLACK);
  }
  if (hNeighbour != null) {
    g.setColor(Color.ORANGE);
    if (hNeighbour.cx < cx)     g.drawLine(hNeighbour.cx - hNeighbour.width / 2,hNeighbour.cy + hNeighbour.height / 2,cx + width / 2,hNeighbour.cy + hNeighbour.height / 2);
 else     g.drawLine(hNeighbour.cx + hNeighbour.width / 2,hNeighbour.cy + hNeighbour.height / 2,cx - width / 2,hNeighbour.cy + hNeighbour.height / 2);
    g.setColor(Color.BLACK);
  }
  if (vNeighbour != null) {
    g.setColor(Color.ORANGE);
    if (vNeighbour.cy < cy)     g.drawLine(vNeighbour.cx - vNeighbour.width / 2,vNeighbour.cy - vNeighbour.height / 2,vNeighbour.cx - vNeighbour.width / 2,cy + height / 2);
 else     g.drawLine(vNeighbour.cx - vNeighbour.width / 2,vNeighbour.cy + vNeighbour.height / 2,vNeighbour.cx - vNeighbour.width / 2,cy - height / 2);
    g.setColor(Color.BLACK);
  }
  if (driver.curDiag.arrowRoot != null) {
    if (driver.arrowEndForDragging == null || !driver.arrowEndForDragging.headMarked && !driver.arrowEndForDragging.tailMarked) {
{
        Color col=g.getColor();
        g.setColor(Color.BLUE);
        g.drawOval(driver.curDiag.arrowRoot.x - 4,driver.curDiag.arrowRoot.y - 4,8,8);
        g.setColor(col);
      }
    }
  }
}",0.998388581952118
170223,"boolean matchArrow(int x,int y,Arrow arrow){
  int x1=arrow.fromX;
  int y1=arrow.fromY;
  int x2, y2;
  if (arrow.bends != null) {
    for (    Bend bend : arrow.bends) {
      x2=bend.x;
      y2=bend.y;
      if (driver.nearpln(x,y,x1,y1,x2,y2)) {
        return true;
      }
 else {
        x1=bend.x;
        y1=bend.y;
      }
    }
  }
  x2=arrow.toX;
  y2=arrow.toY;
  return driver.nearpln(x,y,x1,y1,x2,y2);
}","boolean matchArrow(int x,int y,Arrow arrow){
  int x1=arrow.fromX;
  int y1=arrow.fromY;
  int x2, y2;
  if (arrow.bends != null) {
    for (    Bend bend : arrow.bends) {
      x2=bend.x;
      y2=bend.y;
      if (driver.nearpln(x,y,x1,y1,x2,y2))       return true;
      x1=x2;
      y1=y2;
    }
  }
  x2=arrow.toX;
  y2=arrow.toY;
  return driver.nearpln(x,y,x1,y1,x2,y2);
}",0.7092731829573935
170224,"void excise(Enclosure enc,int tabno,String diagfn){
  clla=new LinkedList<Arrow>();
  Diagram oldDiag=enc.diag;
  driver.curDiag=this;
  maxBlockNo=Math.max(oldDiag.maxBlockNo,enc.id);
  enc.calcEdges();
  findEnclosedBlocksAndArrows(enc);
  for (  Block b : enc.llb) {
    blocks.put(new Integer(b.id),b);
    changed=true;
  }
  for (  Arrow a : enc.lla) {
    Arrow arr2=a.makeCopy(this);
    arrows.put(new Integer(arr2.id),arr2);
    changed=true;
  }
  findCrossingArrows(enc);
  if (enc.lla != null) {
    for (    Arrow arrow : enc.lla) {
      oldDiag.delArrow(arrow);
    }
    enc.lla=null;
  }
  boolean NOCHOOSE=false;
  if (enc.llb != null) {
    for (    Block block : enc.llb) {
      oldDiag.delBlock(block,NOCHOOSE);
    }
    enc.llb=null;
  }
  for (  Arrow arrow : arrows.values()) {
    Block from=blocks.get(new Integer(arrow.fromId));
    Block to=blocks.get(new Integer(arrow.toId));
    if (from == null) {
      ExtPortBlock eb=new ExtPortBlock(this);
      eb.cx=arrow.fromX - eb.width / 2;
      eb.cy=arrow.fromY;
      eb.type=Block.Types.EXTPORT_IN_BLOCK;
      maxBlockNo++;
      eb.id=maxBlockNo;
      arrow.fromId=eb.id;
      if (enc.subnetPorts != null) {
        for (        SubnetPort snp : enc.subnetPorts) {
          if (snp.side == Side.LEFT && arrow.toY == snp.y) {
            eb.substreamSensitive=snp.substreamSensitive;
            eb.description=snp.name;
          }
        }
      }
      blocks.put(new Integer(arrow.fromId),eb);
      eb.calcEdges();
    }
    if (to == null) {
      ExtPortBlock eb=new ExtPortBlock(this);
      eb.cx=arrow.toX + eb.width / 2;
      eb.cy=arrow.toY;
      eb.type=Block.Types.EXTPORT_OUT_BLOCK;
      maxBlockNo++;
      eb.id=maxBlockNo;
      arrow.toId=eb.id;
      if (enc.subnetPorts != null) {
        for (        SubnetPort snp : enc.subnetPorts) {
          if (snp.side == Side.RIGHT && arrow.toY == snp.y) {
            eb.substreamSensitive=snp.substreamSensitive;
            eb.description=snp.name;
          }
        }
      }
      blocks.put(new Integer(arrow.toId),eb);
      eb.calcEdges();
    }
  }
  Block block=new ProcessBlock(oldDiag);
  block.cx=oldDiag.xa;
  block.cy=oldDiag.ya;
  block.calcEdges();
  oldDiag.maxBlockNo++;
  block.id=oldDiag.maxBlockNo;
  oldDiag.blocks.put(new Integer(block.id),block);
  oldDiag.changed=true;
  driver.selBlock=block;
  block.diagramFileName=diagfn;
  block.isSubnet=true;
  block.description=enc.description;
  enc.description=""String_Node_Str"";
  desc=block.description;
  if (desc != null)   desc=desc.replace('\n',' ');
  block.cx=enc.cx;
  block.cy=enc.cy;
  block.calcEdges();
  driver.frame.repaint();
  Integer aid;
  for (  Arrow arrow : clla) {
    aid=new Integer(arrow.id);
    oldDiag.arrows.put(aid,arrow);
    Block from=oldDiag.blocks.get(new Integer(arrow.fromId));
    Block to=oldDiag.blocks.get(new Integer(arrow.toId));
    if (to == null) {
      arrow.toId=block.id;
      Side side=findQuadrant(arrow.fromX,arrow.fromY,block);
      if (side != null) {
        if (side == Side.TOP) {
          arrow.toY=block.cy - block.height / 2;
          arrow.toX=block.cx;
        }
 else {
          arrow.toX=block.cx - block.width / 2;
          arrow.toY=block.cy;
        }
      }
    }
    if (from == null) {
      arrow.fromId=block.id;
      Side side=findQuadrant(arrow.toX,arrow.toY,block);
      if (side != null) {
        if (side == Side.BOTTOM) {
          arrow.fromY=block.cy + block.height / 2;
          arrow.fromX=block.cx;
        }
 else {
          arrow.fromX=block.cx + block.width / 2;
          arrow.fromY=block.cy;
        }
      }
    }
  }
}","void excise(Enclosure enc,int tabno,String diagfn){
  clla=new LinkedList<Arrow>();
  Diagram oldDiag=enc.diag;
  driver.curDiag=this;
  maxBlockNo=Math.max(oldDiag.maxBlockNo,enc.id);
  enc.calcEdges();
  findEnclosedBlocksAndArrows(enc);
  for (  Block b : enc.llb) {
    blocks.put(new Integer(b.id),b);
    changed=true;
  }
  for (  Arrow a : enc.lla) {
    Arrow arr2=a.makeCopy(this);
    arrows.put(new Integer(arr2.id),arr2);
    changed=true;
  }
  findCrossingArrows(enc);
  if (enc.lla != null) {
    for (    Arrow arrow : enc.lla) {
      oldDiag.delArrow(arrow);
    }
    enc.lla=null;
  }
  boolean NOCHOOSE=false;
  if (enc.llb != null) {
    for (    Block block : enc.llb) {
      oldDiag.delBlock(block,NOCHOOSE);
    }
    enc.llb=null;
  }
  for (  Arrow arrow : arrows.values()) {
    Block from=blocks.get(new Integer(arrow.fromId));
    Block to=blocks.get(new Integer(arrow.toId));
    if (from == null) {
      ExtPortBlock eb=new ExtPortBlock(this);
      eb.cx=arrow.fromX - eb.width / 2;
      eb.cy=arrow.fromY;
      eb.type=Block.Types.EXTPORT_IN_BLOCK;
      maxBlockNo++;
      eb.id=maxBlockNo;
      arrow.fromId=eb.id;
      eb.description=arrow.downStreamPort;
      for (      SubnetPort snp : enc.subnetPorts) {
        if (snp.side == Side.LEFT && arrow.toY == snp.y) {
          eb.substreamSensitive=snp.substreamSensitive;
          eb.description=snp.name;
        }
      }
      blocks.put(new Integer(arrow.fromId),eb);
      eb.calcEdges();
    }
    if (to == null) {
      ExtPortBlock eb=new ExtPortBlock(this);
      eb.cx=arrow.toX + eb.width / 2;
      eb.cy=arrow.toY;
      eb.type=Block.Types.EXTPORT_OUT_BLOCK;
      maxBlockNo++;
      eb.id=maxBlockNo;
      arrow.toId=eb.id;
      eb.description=arrow.upStreamPort;
      for (      SubnetPort snp : enc.subnetPorts) {
        if (snp.side == Side.RIGHT && arrow.toY == snp.y) {
          eb.substreamSensitive=snp.substreamSensitive;
          eb.description=snp.name;
        }
      }
      blocks.put(new Integer(arrow.toId),eb);
      eb.calcEdges();
    }
  }
  Block block=new ProcessBlock(oldDiag);
  block.cx=oldDiag.xa;
  block.cy=oldDiag.ya;
  block.calcEdges();
  oldDiag.maxBlockNo++;
  block.id=oldDiag.maxBlockNo;
  oldDiag.blocks.put(new Integer(block.id),block);
  oldDiag.changed=true;
  driver.selBlock=block;
  block.diagramFileName=diagfn;
  block.isSubnet=true;
  block.description=enc.description;
  enc.description=""String_Node_Str"";
  desc=block.description;
  if (desc != null)   desc=desc.replace('\n',' ');
  block.cx=enc.cx;
  block.cy=enc.cy;
  block.calcEdges();
  driver.frame.repaint();
  Integer aid;
  for (  Arrow arrow : clla) {
    aid=new Integer(arrow.id);
    oldDiag.arrows.put(aid,arrow);
    Block from=oldDiag.blocks.get(new Integer(arrow.fromId));
    Block to=oldDiag.blocks.get(new Integer(arrow.toId));
    if (to == null) {
      arrow.toId=block.id;
      Side side=findQuadrant(arrow.fromX,arrow.fromY,block);
      if (side != null) {
        if (side == Side.TOP) {
          arrow.toY=block.cy - block.height / 2;
          arrow.toX=block.cx;
        }
 else {
          arrow.toX=block.cx - block.width / 2;
          arrow.toY=block.cy;
        }
      }
    }
    if (from == null) {
      arrow.fromId=block.id;
      Side side=findQuadrant(arrow.toX,arrow.toY,block);
      if (side != null) {
        if (side == Side.BOTTOM) {
          arrow.fromY=block.cy + block.height / 2;
          arrow.fromX=block.cx;
        }
 else {
          arrow.fromX=block.cx + block.width / 2;
          arrow.fromY=block.cy;
        }
      }
    }
  }
}",0.9719317556411669
170225,"private void buildUI(Container container){
  buildPropDescTable();
  curDiag=getNewDiag();
  MouseListener mouseListener=new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      int i=jtp.indexAtLocation(e.getX(),e.getY());
      if (i == -1)       return;
      ButtonTabComponent b=(ButtonTabComponent)driver.jtp.getTabComponentAt(i);
      Diagram diag=b.diag;
      if (diag == null) {
        curDiag=getNewDiag();
      }
      curDiag=diag;
      frame.repaint();
    }
  }
;
  jtp.addMouseListener(mouseListener);
  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));
  Box box1=new Box(BoxLayout.Y_AXIS);
  container.add(box1);
  Box box4=new Box(BoxLayout.X_AXIS);
  box1.add(box4);
  int sf=(int)Math.round(100.0 * scalingFactor);
  JSlider zoomControl=new JSlider(JSlider.VERTICAL,60,200,sf);
  zoomControl.setPreferredSize(new Dimension(40,200));
  zoomControl.setMajorTickSpacing(20);
  zoomControl.setPaintTicks(true);
  zoomControl.setSnapToTicks(true);
  zoomControl.setPaintLabels(false);
  zoomControl.setPaintTrack(true);
  zoomControl.setVisible(true);
  zoomControl.addChangeListener(this);
  zoomControl.getInputMap().put(escapeKS,""String_Node_Str"");
  zoomControl.getActionMap().put(""String_Node_Str"",escapeAction);
  Box box45=new Box(BoxLayout.Y_AXIS);
  Box box46=new Box(BoxLayout.X_AXIS);
  Box box5=new Box(BoxLayout.X_AXIS);
  Box box61=new Box(BoxLayout.X_AXIS);
  Box box62=new Box(BoxLayout.X_AXIS);
  Box box6=new Box(BoxLayout.Y_AXIS);
  box5.add(Box.createRigidArea(new Dimension(10,0)));
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  scaleLab=new JLabel();
  box61.add(scaleLab);
  box61.add(Box.createRigidArea(new Dimension(5,0)));
  box62.add(zoom);
  box62.add(Box.createRigidArea(new Dimension(5,0)));
  box6.add(zoomControl);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  scaleLab.setForeground(Color.BLUE);
  String scale=""String_Node_Str"";
  scaleLab.setText(scale);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  box6.add(box61);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  box6.add(box62);
  box5.add(box6);
  box5.add(Box.createRigidArea(new Dimension(10,0)));
  grid.setFont(fontg);
  grid.setSelected(true);
  grid.setActionCommand(""String_Node_Str"");
  grid.addActionListener(this);
  grid.setBackground(slateGray1);
  grid.setBorderPaintedFlat(false);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  box45.add(box5);
  box45.add(Box.createRigidArea(new Dimension(0,10)));
  box46.add(grid);
  box46.add(Box.createRigidArea(new Dimension(0,10)));
  box45.add(box46);
  box4.add(box45);
  Point p=jtp.getLocation();
  jtp.setLocation(p.x + 100,p.y);
  box4.add(jtp);
  box4.add(Box.createRigidArea(new Dimension(50,0)));
  curDiag.area.setAlignmentX(Component.LEFT_ALIGNMENT);
  diagDesc.setAlignmentX(Component.CENTER_ALIGNMENT);
  box1.add(diagDesc);
  Font ft=fontg.deriveFont(Font.BOLD);
  diagDesc.setFont(ft);
  diagDesc.setPreferredSize(new Dimension(0,gFontHeight * 2));
  diagDesc.setForeground(Color.BLUE);
  box1.add(Box.createRigidArea(new Dimension(0,4)));
  Box box2=new Box(BoxLayout.X_AXIS);
  box2.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
  box1.add(box2);
  box2.add(pan);
  box2.add(Box.createRigidArea(new Dimension(10,0)));
  box2.add(Box.createHorizontalGlue());
  pan.setSelected(false);
  pan.setFont(fontg);
  pan.setActionCommand(""String_Node_Str"");
  pan.addActionListener(this);
  pan.setBackground(slateGray1);
  pan.setBorderPaintedFlat(false);
  ButtonGroup butGroup=new ButtonGroup();
  String buttonNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int j=0; j < but.length; j++) {
    but[j]=new JRadioButton();
    but[j].addActionListener(this);
    butGroup.add(but[j]);
    box2.add(but[j]);
    but[j].setText(buttonNames[j]);
    but[j].setFocusable(true);
  }
  adjustFonts();
  but[0].setSelected(true);
  box2.add(Box.createHorizontalGlue());
  Component[] comps=box2.getComponents();
  for (int j=0; j < comps.length; j++) {
    if (comps[j] instanceof JRadioButton) {
      JRadioButton jrb=(JRadioButton)comps[j];
      jrb.getInputMap().put(escapeKS,""String_Node_Str"");
      jrb.getActionMap().put(""String_Node_Str"",escapeAction);
    }
  }
  BufferedImage image=loadImage(""String_Node_Str"");
  frame.setIconImage(image);
  leafIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  javaIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  jarIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  folderIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  classIcon=new ImageIcon(image);
  Toolkit tk=Toolkit.getDefaultToolkit();
  image=null;
  openPawCursor=null;
  image=loadImage(""String_Node_Str"");
  openPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  closedPawCursor=null;
  image=loadImage(""String_Node_Str"");
  closedPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  image=loadImage(""String_Node_Str"");
  drag_icon=tk.createCustomCursor(image,new Point(1,1),""String_Node_Str"");
}","private void buildUI(Container container){
  buildPropDescTable();
  curDiag=getNewDiag();
  MouseListener mouseListener=new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      int i=jtp.indexAtLocation(e.getX(),e.getY());
      if (i == -1)       return;
      ButtonTabComponent b=(ButtonTabComponent)driver.jtp.getTabComponentAt(i);
      Diagram diag=b.diag;
      if (diag == null) {
        curDiag=getNewDiag();
      }
      curDiag=diag;
      frame.repaint();
    }
  }
;
  jtp.addMouseListener(mouseListener);
  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));
  Box box1=new Box(BoxLayout.Y_AXIS);
  container.add(box1);
  Box box4=new Box(BoxLayout.X_AXIS);
  box1.add(box4);
  int sf=(int)Math.round(100.0 * scalingFactor);
  JSlider zoomControl=new JSlider(JSlider.VERTICAL,60,200,sf);
  zoomControl.setPreferredSize(new Dimension(40,200));
  zoomControl.setMajorTickSpacing(20);
  zoomControl.setPaintTicks(true);
  zoomControl.setSnapToTicks(true);
  zoomControl.setPaintLabels(false);
  zoomControl.setPaintTrack(true);
  zoomControl.setVisible(true);
  zoomControl.addChangeListener(this);
  zoomControl.getInputMap().put(escapeKS,""String_Node_Str"");
  zoomControl.getActionMap().put(""String_Node_Str"",escapeAction);
  Box box45=new Box(BoxLayout.Y_AXIS);
  Box box46=new Box(BoxLayout.X_AXIS);
  Box box5=new Box(BoxLayout.X_AXIS);
  Box box61=new Box(BoxLayout.X_AXIS);
  Box box62=new Box(BoxLayout.X_AXIS);
  Box box6=new Box(BoxLayout.Y_AXIS);
  box5.add(Box.createRigidArea(new Dimension(10,0)));
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  scaleLab=new JLabel();
  box61.add(scaleLab);
  box61.add(Box.createRigidArea(new Dimension(5,0)));
  box62.add(zoom);
  box62.add(Box.createRigidArea(new Dimension(5,0)));
  box6.add(zoomControl);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  scaleLab.setForeground(Color.BLUE);
  String scale=""String_Node_Str"";
  scaleLab.setText(scale);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  box6.add(box61);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  box6.add(box62);
  box5.add(box6);
  box5.add(Box.createRigidArea(new Dimension(10,0)));
  grid.setFont(fontg);
  grid.setSelected(true);
  grid.setActionCommand(""String_Node_Str"");
  grid.addActionListener(this);
  grid.setBackground(slateGray1);
  grid.setBorderPaintedFlat(false);
  box6.add(Box.createRigidArea(new Dimension(0,10)));
  box45.add(box5);
  box45.add(Box.createRigidArea(new Dimension(0,10)));
  box46.add(grid);
  box46.add(Box.createRigidArea(new Dimension(0,10)));
  box45.add(box46);
  box4.add(box45);
  Point p=jtp.getLocation();
  jtp.setLocation(p.x + 100,p.y);
  box4.add(jtp);
  box4.add(Box.createRigidArea(new Dimension(50,0)));
  curDiag.area.setAlignmentX(Component.LEFT_ALIGNMENT);
  diagDesc.setAlignmentX(Component.CENTER_ALIGNMENT);
  box1.add(diagDesc);
  Font ft=fontg.deriveFont(Font.BOLD);
  diagDesc.setFont(ft);
  diagDesc.setPreferredSize(new Dimension(0,gFontHeight * 2));
  diagDesc.setForeground(Color.BLUE);
  box1.add(Box.createRigidArea(new Dimension(0,4)));
  Box box2=new Box(BoxLayout.X_AXIS);
  box2.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
  box1.add(box2);
  box2.add(pan);
  box2.add(Box.createRigidArea(new Dimension(10,0)));
  pan.setSelected(false);
  pan.setFont(fontg);
  pan.setActionCommand(""String_Node_Str"");
  pan.addActionListener(this);
  pan.setBackground(slateGray1);
  pan.setBorderPaintedFlat(false);
  ButtonGroup butGroup=new ButtonGroup();
  box21=new Box(BoxLayout.X_AXIS);
  box2.add(box21);
  String buttonNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int j=0; j < but.length; j++) {
    but[j]=new JRadioButton();
    but[j].addActionListener(this);
    butGroup.add(but[j]);
    box21.add(but[j]);
    but[j].setText(buttonNames[j]);
    but[j].setFocusable(true);
  }
  adjustFonts();
  but[0].setSelected(true);
  box2.add(Box.createRigidArea(new Dimension(10,0)));
  for (int j=0; j < but.length; j++) {
    but[j].getInputMap().put(escapeKS,""String_Node_Str"");
    but[j].getActionMap().put(""String_Node_Str"",escapeAction);
  }
  BufferedImage image=loadImage(""String_Node_Str"");
  frame.setIconImage(image);
  leafIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  javaIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  jarIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  folderIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  classIcon=new ImageIcon(image);
  Toolkit tk=Toolkit.getDefaultToolkit();
  image=null;
  openPawCursor=null;
  image=loadImage(""String_Node_Str"");
  openPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  closedPawCursor=null;
  image=loadImage(""String_Node_Str"");
  closedPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  image=loadImage(""String_Node_Str"");
  drag_icon=tk.createCustomCursor(image,new Point(1,1),""String_Node_Str"");
}",0.953305149884704
170226,"public void componentResized(ComponentEvent e){
}","public void componentResized(ComponentEvent e){
  Dimension dim=this.getSize();
  Dimension dim2=new Dimension(dim.width / but.length,dim.height);
  int no=but.length;
  for (int j=0; j < no; j++) {
    box21.remove(0);
    but[j].setMaximumSize(dim2);
    box21.add(but[j]);
  }
  box21.repaint();
}",0.2808022922636103
170227,"public void paintList(){
  if (selComp instanceof JList) {
    String s=list.getSelectedValue();
    if (s == null || s.equals(""String_Node_Str""))     s=""String_Node_Str"";
    String fn=DrawFBP.makeAbsFileName(s,listHead);
    if (currentNode == null) {
      File h=new File(fn);
      t_dirName.setText(listHead);
    }
 else {
      DefaultMutableTreeNode ch=currentNode;
      if (ch.getChildCount() > 0) {
        t_dirName.setText(listHead);
      }
 else {
        t_dirName.setText(listHead);
      }
    }
  }
  repaint();
}","public void paintList(){
  if (selComp instanceof JList) {
    String s=list.getSelectedValue();
    if (s == null || s.equals(""String_Node_Str""))     s=""String_Node_Str"";
    String fn=DrawFBP.makeAbsFileName(s,listHead);
    if (currentNode == null) {
      File h=new File(fn);
      t_dirName.setText(listHead);
    }
 else {
      DefaultMutableTreeNode ch=currentNode;
      if (ch.getChildCount() > 0) {
        t_dirName.setText(listHead);
      }
 else {
        t_fileName.setText(list.getSelectedValue());
        t_dirName.setText(listHead);
        selComp=t_fileName;
      }
    }
  }
  repaint();
}",0.9241499564080208
170228,"public void keyPressed(KeyEvent ev){
  if (ev.getKeyCode() == KeyEvent.VK_ESCAPE) {
    popup.dispose();
  }
}","public void keyPressed(KeyEvent ev){
  if (ev.getKeyCode() == KeyEvent.VK_ESCAPE) {
    jDialog.dispose();
  }
}",0.954954954954955
170229,"public void valueChanged(ListSelectionEvent e){
  @SuppressWarnings(""String_Node_Str"") JList<String> l=(JList<String>)e.getSource();
  int i=l.getSelectedIndex();
  if (i > -1) {
    if (l == jlF) {
      fixedFont=fixedFonts[i];
      fFChanged=true;
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + fixedFont + ""String_Node_Str"");
      lb1.setText(""String_Node_Str"" + fixedFont + ""String_Node_Str"");
      lb1.repaint();
    }
 else {
      generalFont=generalFonts[i];
      gFChanged=true;
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + generalFont + ""String_Node_Str"");
      lb2.setText(""String_Node_Str"" + generalFont + ""String_Node_Str"");
      lb2.repaint();
    }
    popup.repaint();
  }
}","public void valueChanged(ListSelectionEvent e){
  @SuppressWarnings(""String_Node_Str"") JList<String> l=(JList<String>)e.getSource();
  int i=l.getSelectedIndex();
  if (i > -1) {
    if (l == jlF) {
      fixedFont=fixedFonts[i];
      fFChanged=true;
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + fixedFont + ""String_Node_Str"");
      lb1.setText(""String_Node_Str"" + fixedFont + ""String_Node_Str"");
      lb1.repaint();
    }
 else {
      generalFont=generalFonts[i];
      gFChanged=true;
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + generalFont + ""String_Node_Str"");
      lb2.setText(""String_Node_Str"" + generalFont + ""String_Node_Str"");
      lb2.repaint();
    }
    jDialog.repaint();
  }
}",0.9879356568364612
170230,"void done(){
  popup.setVisible(false);
  driver.frame.repaint();
}","void done(){
  jDialog.setVisible(false);
  driver.frame.repaint();
}",0.9264705882352942
170231,"public Component getListCellRendererComponent(JList<?> list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  JPanel jp=new JPanel();
  BoxLayout gb=new BoxLayout(jp,BoxLayout.X_AXIS);
  jp.setLayout(gb);
  jp.setBackground(Color.WHITE);
  Dimension minSize2;
  Dimension prefSize2;
  Dimension maxSize2;
  Dimension minSize=new Dimension(100,15);
  Dimension prefSize=new Dimension(100,15);
  Dimension maxSize=new Dimension(Short.MAX_VALUE,15);
  JLabel lab1=new JLabel((String)value);
  lab1.setFont(new Font(""String_Node_Str"",Font.PLAIN,(int)driver.defaultFontSize));
  lab1.setMinimumSize(minSize);
  lab1.setMaximumSize(maxSize);
  lab1.setPreferredSize(prefSize);
  jp.add(lab1);
  minSize2=new Dimension(20,15);
  prefSize2=new Dimension(20,15);
  maxSize2=new Dimension(Short.MAX_VALUE,15);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab2=new JLabel(""String_Node_Str"");
  lab2.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(150,15);
  prefSize=new Dimension(150,15);
  lab2.setMinimumSize(minSize);
  lab2.setMaximumSize(maxSize);
  lab2.setPreferredSize(prefSize);
  jp.add(lab2);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab3=new JLabel(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  lab3.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(150,15);
  prefSize=new Dimension(150,15);
  lab3.setMinimumSize(minSize);
  lab3.setMaximumSize(maxSize);
  lab3.setPreferredSize(prefSize);
  jp.add(lab3);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab4=new JLabel(""String_Node_Str"");
  lab4.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(150,15);
  prefSize=new Dimension(150,15);
  lab4.setMinimumSize(minSize);
  lab4.setMaximumSize(maxSize);
  lab4.setPreferredSize(prefSize);
  jp.add(lab4);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab5=new JLabel(""String_Node_Str"");
  lab5.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(100,15);
  prefSize=new Dimension(100,15);
  lab5.setMinimumSize(minSize);
  lab5.setMaximumSize(maxSize);
  lab5.setPreferredSize(prefSize);
  jp.add(lab5);
  Color vLightBlue=new Color(220,235,255);
  if (isSelected) {
    jp.setBackground(vLightBlue);
  }
  return jp;
}","public Component getListCellRendererComponent(JList<?> list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  JPanel jp=new JPanel();
  BoxLayout gb=new BoxLayout(jp,BoxLayout.X_AXIS);
  jp.setLayout(gb);
  jp.setBackground(Color.WHITE);
  Dimension minSize2;
  Dimension prefSize2;
  Dimension maxSize2;
  Dimension minSize=new Dimension(100,15);
  Dimension prefSize=new Dimension(100,15);
  Dimension maxSize=new Dimension(Short.MAX_VALUE,15);
  JLabel lab1=new JLabel((String)value);
  lab1.setFont(new Font(""String_Node_Str"",Font.PLAIN,(int)driver.defaultFontSize));
  lab1.setMinimumSize(minSize);
  lab1.setMaximumSize(maxSize);
  lab1.setPreferredSize(prefSize);
  jp.add(lab1);
  minSize2=new Dimension(20,15);
  prefSize2=new Dimension(20,15);
  maxSize2=new Dimension(Short.MAX_VALUE,15);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab2=new JLabel(""String_Node_Str"");
  lab2.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(150,15);
  prefSize=new Dimension(150,15);
  lab2.setMinimumSize(minSize);
  lab2.setMaximumSize(maxSize);
  lab2.setPreferredSize(prefSize);
  jp.add(lab2);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab3=new JLabel(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  lab3.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(150,15);
  prefSize=new Dimension(150,15);
  lab3.setMinimumSize(minSize);
  lab3.setMaximumSize(maxSize);
  lab3.setPreferredSize(prefSize);
  jp.add(lab3);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab4=new JLabel(""String_Node_Str"");
  lab4.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(150,15);
  prefSize=new Dimension(150,15);
  lab4.setMinimumSize(minSize);
  lab4.setMaximumSize(maxSize);
  lab4.setPreferredSize(prefSize);
  jp.add(lab4);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab40=new JLabel(""String_Node_Str"");
  lab40.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(150,15);
  prefSize=new Dimension(150,15);
  lab40.setMinimumSize(minSize);
  lab40.setMaximumSize(maxSize);
  lab40.setPreferredSize(prefSize);
  jp.add(lab40);
  jp.add(new Box.Filler(minSize2,prefSize2,maxSize2));
  JLabel lab5=new JLabel(""String_Node_Str"");
  lab5.setFont(new Font((String)value,Font.PLAIN,(int)driver.defaultFontSize));
  minSize=new Dimension(100,15);
  prefSize=new Dimension(100,15);
  lab5.setMinimumSize(minSize);
  lab5.setMaximumSize(maxSize);
  lab5.setPreferredSize(prefSize);
  jp.add(lab5);
  Color vLightBlue=new Color(220,235,255);
  if (isSelected) {
    jp.setBackground(vLightBlue);
  }
  return jp;
}",0.9285714285714286
170232,"public void windowClosed(WindowEvent arg0){
  popup.setVisible(false);
}","public void windowClosed(WindowEvent arg0){
  jDialog.setVisible(false);
}",0.9315068493150684
170233,"void buildFontLists(){
  Font[] allfonts=GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
  LinkedList<String> llF=new LinkedList<String>();
  LinkedList<String> llG=new LinkedList<String>();
  for (int j=0; j < allfonts.length; j++) {
    llG.add(allfonts[j].getName());
    FontMetrics fontMetrics=driver.osg.getFontMetrics(allfonts[j]);
    if (fontMetrics.charWidth('i') == fontMetrics.charWidth('m'))     llF.add(allfonts[j].getName());
  }
  fixedFonts=new String[llF.size()];
  llF.toArray(fixedFonts);
  generalFonts=new String[llG.size()];
  llG.toArray(generalFonts);
  String prompt=""String_Node_Str"";
  popup=new JDialog(driver.frame,Dialog.ModalityType.APPLICATION_MODAL);
  popup.setFocusable(true);
  DrawFBP.applyOrientation(popup);
  popup.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      popup.dispose();
    }
  }
);
  popup.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent ev){
      if (ev.getKeyCode() == KeyEvent.VK_ESCAPE) {
        popup.dispose();
      }
    }
  }
);
  JPanel p=new JPanel();
  Box b1=new Box(BoxLayout.Y_AXIS);
  Box b2=new Box(BoxLayout.Y_AXIS);
  prompt=""String_Node_Str"";
  popup.setTitle(prompt);
  DrawFBP.applyOrientation(popup);
  p.setLayout(new BoxLayout(p,BoxLayout.X_AXIS));
  jlF=new JList<String>(fixedFonts);
  jlF.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  jlF.setLayoutOrientation(JList.VERTICAL);
  jlF.setCellRenderer(new CellRenderer());
  jlG=new JList<String>(generalFonts);
  jlG.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  jlG.setLayoutOrientation(JList.VERTICAL);
  jlG.setCellRenderer(new CellRenderer());
  lsF=new JScrollPane(jlF);
  lsF.setPreferredSize(new Dimension(800,800));
  lsG=new JScrollPane(jlG);
  lsG.setPreferredSize(new Dimension(800,800));
  fixedFont=driver.fixedFont;
  lb1=new JLabel(""String_Node_Str"" + fixedFont + ""String_Node_Str"");
  b1.add(lb1);
  b1.add(lsF);
  jlF.setSelectedValue(fixedFont,true);
  generalFont=driver.generalFont;
  lb2=new JLabel(""String_Node_Str"" + generalFont + ""String_Node_Str"");
  b2.add(lb2);
  b2.add(lsG);
  jlG.setSelectedValue(generalFont,true);
  p.add(b1);
  p.add(Box.createRigidArea(new Dimension(10,0)));
  p.add(b2);
  popup.add(p);
  jlF.addListSelectionListener(this);
  jlG.addListSelectionListener(this);
  lsF.revalidate();
  lsG.revalidate();
  popup.revalidate();
  lsF.repaint();
  lsG.repaint();
  popup.setLocation(50,100);
  popup.pack();
  popup.setVisible(true);
}","void buildFontLists(){
  Font[] allfonts=GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
  LinkedList<String> llF=new LinkedList<String>();
  LinkedList<String> llG=new LinkedList<String>();
  for (int j=0; j < allfonts.length; j++) {
    llG.add(allfonts[j].getName());
    FontMetrics fontMetrics=driver.osg.getFontMetrics(allfonts[j]);
    if (fontMetrics.charWidth('i') == fontMetrics.charWidth('m'))     llF.add(allfonts[j].getName());
  }
  fixedFonts=new String[llF.size()];
  llF.toArray(fixedFonts);
  generalFonts=new String[llG.size()];
  llG.toArray(generalFonts);
  String prompt=""String_Node_Str"";
  jDialog=new JDialog(driver.frame,Dialog.ModalityType.APPLICATION_MODAL);
  jDialog.setFocusable(true);
  DrawFBP.applyOrientation(jDialog);
  jDialog.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      jDialog.dispose();
    }
  }
);
  jDialog.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent ev){
      if (ev.getKeyCode() == KeyEvent.VK_ESCAPE) {
        jDialog.dispose();
      }
    }
  }
);
  JPanel p=new JPanel();
  Box b1=new Box(BoxLayout.Y_AXIS);
  Box b2=new Box(BoxLayout.Y_AXIS);
  prompt=""String_Node_Str"";
  jDialog.setTitle(prompt);
  DrawFBP.applyOrientation(jDialog);
  p.setLayout(new BoxLayout(p,BoxLayout.X_AXIS));
  jlF=new JList<String>(fixedFonts);
  jlF.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  jlF.setLayoutOrientation(JList.VERTICAL);
  jlF.setCellRenderer(new CellRenderer());
  jlG=new JList<String>(generalFonts);
  jlG.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  jlG.setLayoutOrientation(JList.VERTICAL);
  jlG.setCellRenderer(new CellRenderer());
  lsF=new JScrollPane(jlF);
  lsF.setPreferredSize(new Dimension(800,800));
  lsG=new JScrollPane(jlG);
  lsG.setPreferredSize(new Dimension(800,800));
  fixedFont=driver.fixedFont;
  lb1=new JLabel(""String_Node_Str"" + fixedFont + ""String_Node_Str"");
  b1.add(lb1);
  b1.add(lsF);
  jlF.setSelectedValue(fixedFont,true);
  generalFont=driver.generalFont;
  lb2=new JLabel(""String_Node_Str"" + generalFont + ""String_Node_Str"");
  b2.add(lb2);
  b2.add(lsG);
  jlG.setSelectedValue(generalFont,true);
  p.add(b1);
  p.add(Box.createRigidArea(new Dimension(10,0)));
  p.add(b2);
  jDialog.add(p);
  jlF.addListSelectionListener(this);
  jlG.addListSelectionListener(this);
  lsF.revalidate();
  lsG.revalidate();
  jDialog.revalidate();
  lsF.repaint();
  lsG.repaint();
  jDialog.setLocation(50,100);
  jDialog.pack();
  jDialog.setVisible(true);
}",0.9594168636721828
170234,"public void windowClosing(WindowEvent e){
  popup.setVisible(false);
}","public void windowClosing(WindowEvent e){
  jDialog.setVisible(false);
}",0.9295774647887324
170235,"public static void createTables(HashMap<String,HashMap<String,String>> tagInfo){
  HashMap<String,String> fl1=new HashMap<String,String>();
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl2=new HashMap<String,String>();
  fl2.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl3=new HashMap<String,String>();
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl4=new HashMap<String,String>();
  fl4.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl5=new HashMap<String,String>();
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl6=new HashMap<String,String>();
  fl6.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl7=new HashMap<String,String>();
  fl7.put(""String_Node_Str"",""String_Node_Str"");
  fl7.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl8=new HashMap<String,String>();
  fl8.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl9=new HashMap<String,String>();
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  tagInfo.put(""String_Node_Str"",fl1);
  tagInfo.put(""String_Node_Str"",fl1);
  tagInfo.put(""String_Node_Str"",fl2);
  tagInfo.put(""String_Node_Str"",fl3);
  tagInfo.put(""String_Node_Str"",fl4);
  tagInfo.put(""String_Node_Str"",fl5);
  tagInfo.put(""String_Node_Str"",fl6);
  tagInfo.put(""String_Node_Str"",fl7);
  tagInfo.put(""String_Node_Str"",fl8);
  tagInfo.put(""String_Node_Str"",fl9);
}","public static void createTables(HashMap<String,HashMap<String,String>> tagInfo){
  HashMap<String,String> fl1=new HashMap<String,String>();
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  fl1.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl2=new HashMap<String,String>();
  fl2.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl3=new HashMap<String,String>();
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  fl3.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl4=new HashMap<String,String>();
  fl4.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl5=new HashMap<String,String>();
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  fl5.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl6=new HashMap<String,String>();
  fl6.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl7=new HashMap<String,String>();
  fl7.put(""String_Node_Str"",""String_Node_Str"");
  fl7.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl8=new HashMap<String,String>();
  fl8.put(""String_Node_Str"",""String_Node_Str"");
  HashMap<String,String> fl9=new HashMap<String,String>();
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  fl9.put(""String_Node_Str"",""String_Node_Str"");
  tagInfo.put(""String_Node_Str"",fl1);
  tagInfo.put(""String_Node_Str"",fl1);
  tagInfo.put(""String_Node_Str"",fl2);
  tagInfo.put(""String_Node_Str"",fl3);
  tagInfo.put(""String_Node_Str"",fl4);
  tagInfo.put(""String_Node_Str"",fl5);
  tagInfo.put(""String_Node_Str"",fl6);
  tagInfo.put(""String_Node_Str"",fl7);
  tagInfo.put(""String_Node_Str"",fl8);
  tagInfo.put(""String_Node_Str"",fl9);
}",0.99297629499561
170236,"void drawIn(Graphics2D g,int ctr,int w){
  int ptx[]=new int[7];
  int pty[]=new int[7];
  int left=ctr - w / 2;
  int right=ctr + w / 2;
  int top=cy - height / 2;
  int bottom=cy + height / 2;
  ptx[0]=left;
  pty[0]=top;
  ptx[1]=right - 10;
  pty[1]=top;
  ptx[2]=right;
  pty[2]=cy;
  ptx[3]=right - 10;
  pty[3]=bottom;
  ptx[4]=left;
  pty[4]=bottom;
  ptx[5]=left;
  pty[5]=bottom - 6;
  ptx[6]=left;
  pty[6]=top + 6;
  g.setColor(Color.BLACK);
  g.drawPolygon(ptx,pty,7);
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  ptx[0]+=1;
  pty[0]+=1;
  ptx[1]-=1;
  pty[1]+=1;
  ptx[2]-=1;
  ptx[3]-=1;
  ptx[4]+=1;
  ptx[5]+=1;
  ptx[6]+=1;
  g.fillPolygon(ptx,pty,7);
  if (substreamSensitive) {
    int ptx2[]=new int[3];
    int pty2[]=new int[3];
    ptx2[0]=right - 10;
    ptx2[1]=right;
    ptx2[2]=right - 10;
    pty2[0]=top;
    pty2[1]=cy;
    pty2[2]=bottom;
    g.setColor(Color.RED);
    g.drawPolygon(ptx2,pty2,3);
    g.fillPolygon(ptx2,pty2,3);
  }
  g.setColor(Color.BLACK);
  g.drawLine(left,cy - height,left,cy + height);
  calcDiagMaxAndMin(left,right,top,bottom);
}","void drawIn(Graphics2D g,int ctr,int w){
  int ptx[]=new int[7];
  int pty[]=new int[7];
  int left=ctr - w / 2;
  int right=ctr + w / 2;
  int top=cy - height / 2;
  int bottom=cy + height / 2;
  ptx[0]=left;
  pty[0]=top;
  ptx[1]=right - 10;
  pty[1]=top;
  ptx[2]=right;
  pty[2]=cy;
  ptx[3]=right - 10;
  pty[3]=bottom;
  ptx[4]=left;
  pty[4]=bottom;
  ptx[5]=left;
  pty[5]=bottom - 6;
  ptx[6]=left;
  pty[6]=top + 6;
  g.setColor(Color.BLACK);
  g.drawPolygon(ptx,pty,7);
  if (this == driver.selBlock)   g.setColor(ly);
 else   g.setColor(lb);
  ptx[0]+=1;
  pty[0]+=1;
  ptx[1]-=1;
  pty[1]+=1;
  ptx[2]-=1;
  ptx[3]-=1;
  ptx[4]+=1;
  ptx[5]+=1;
  ptx[6]+=1;
  g.fillPolygon(ptx,pty,7);
  if (substreamSensitive) {
    int ptx2[]=new int[3];
    int pty2[]=new int[3];
    ptx2[0]=right - 10;
    ptx2[1]=right;
    ptx2[2]=right - 10;
    pty2[0]=top;
    pty2[1]=cy;
    pty2[2]=bottom;
    g.setColor(Color.BLUE);
    g.drawPolygon(ptx2,pty2,3);
    g.fillPolygon(ptx2,pty2,3);
  }
  g.setColor(Color.BLACK);
  g.drawLine(left,cy - height,left,cy + height);
  calcDiagMaxAndMin(left,right,top,bottom);
}",0.9626701800614844
170237,"void drawOut(Graphics2D g,int ctr,int w){
  int ptx[]=new int[7];
  int pty[]=new int[7];
  int left=ctr - w / 2;
  int right=ctr + w / 2;
  int top=cy - height / 2;
  int bottom=cy + height / 2;
  ptx[0]=right;
  pty[0]=top;
  ptx[1]=right;
  pty[1]=top + 6;
  ptx[2]=right;
  pty[2]=bottom - 6;
  ptx[3]=right;
  pty[3]=bottom;
  ptx[4]=left + 10;
  pty[4]=bottom;
  ptx[5]=left;
  pty[5]=cy;
  ptx[6]=left + 10;
  pty[6]=top;
  g.setColor(Color.BLACK);
  g.drawPolygon(ptx,pty,7);
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  ptx[0]-=1;
  pty[0]+=1;
  ptx[1]-=1;
  pty[1]+=1;
  ptx[2]-=1;
  ptx[3]-=1;
  ptx[4]+=1;
  ptx[5]+=1;
  ptx[6]+=1;
  pty[6]+=1;
  g.fillPolygon(ptx,pty,7);
  if (substreamSensitive) {
    g.setColor(Color.RED);
    int ptx2[]=new int[3];
    int pty2[]=new int[3];
    ptx2[0]=left + 10;
    ptx2[1]=left;
    ptx2[2]=left + 10;
    pty2[0]=top;
    pty2[1]=cy;
    pty2[2]=bottom;
    g.setColor(Color.RED);
    g.drawPolygon(ptx2,pty2,3);
    g.fillPolygon(ptx2,pty2,3);
  }
  g.setColor(Color.BLACK);
  if (!type.equals(Block.Types.EXTPORT_OUTIN_BLOCK))   g.drawLine(right,cy - height,right,cy + height);
  calcDiagMaxAndMin(left,right,top,bottom);
}","void drawOut(Graphics2D g,int ctr,int w){
  int ptx[]=new int[7];
  int pty[]=new int[7];
  int left=ctr - w / 2;
  int right=ctr + w / 2;
  int top=cy - height / 2;
  int bottom=cy + height / 2;
  ptx[0]=right;
  pty[0]=top;
  ptx[1]=right;
  pty[1]=top + 6;
  ptx[2]=right;
  pty[2]=bottom - 6;
  ptx[3]=right;
  pty[3]=bottom;
  ptx[4]=left + 10;
  pty[4]=bottom;
  ptx[5]=left;
  pty[5]=cy;
  ptx[6]=left + 10;
  pty[6]=top;
  g.setColor(Color.BLACK);
  g.drawPolygon(ptx,pty,7);
  if (this == driver.selBlock)   g.setColor(ly);
 else   g.setColor(lb);
  ptx[0]-=1;
  pty[0]+=1;
  ptx[1]-=1;
  pty[1]+=1;
  ptx[2]-=1;
  ptx[3]-=1;
  ptx[4]+=1;
  ptx[5]+=1;
  ptx[6]+=1;
  pty[6]+=1;
  g.fillPolygon(ptx,pty,7);
  if (substreamSensitive) {
    int ptx2[]=new int[3];
    int pty2[]=new int[3];
    ptx2[0]=left + 10;
    ptx2[1]=left;
    ptx2[2]=left + 10;
    pty2[0]=top;
    pty2[1]=cy;
    pty2[2]=bottom;
    g.setColor(Color.BLUE);
    g.drawPolygon(ptx2,pty2,3);
    g.fillPolygon(ptx2,pty2,3);
  }
  g.setColor(Color.BLACK);
  if (!type.equals(Block.Types.EXTPORT_OUTIN_BLOCK))   g.drawLine(right,cy - height,right,cy + height);
  calcDiagMaxAndMin(left,right,top,bottom);
}",0.8137817883511075
170238,"@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  GeneralPath gp=new GeneralPath();
  g.setColor(Color.BLACK);
  int x=cx - width / 2;
  int y=cy - height / 2 + 4;
  gp.moveTo(x,y);
  x+=width;
  gp.quadTo(x - width / 2,y - 10,x,y);
  y+=height - 8;
  gp.lineTo(x,y);
  x-=width;
  gp.quadTo(x + width / 2,y + 10,x,y);
  gp.closePath();
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  g.fill(gp);
  g.setColor(Color.BLACK);
  g.draw(gp);
  y=cy - height + height / 2 - 8;
  x=cx - width / 2;
  g.drawArc(x,y,width,20,190,160);
  if (description != null) {
    centreDesc(g);
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
}","@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  GeneralPath gp=new GeneralPath();
  g.setColor(Color.BLACK);
  int x=cx - width / 2;
  int y=cy - height / 2 + 4;
  gp.moveTo(x,y);
  x+=width;
  gp.quadTo(x - width / 2,y - 10,x,y);
  y+=height - 8;
  gp.lineTo(x,y);
  x-=width;
  gp.quadTo(x + width / 2,y + 10,x,y);
  gp.closePath();
  if (this == driver.selBlock)   g.setColor(ly);
 else   g.setColor(lb);
  g.fill(gp);
  g.setColor(Color.BLACK);
  g.draw(gp);
  y=cy - height + height / 2 - 8;
  x=cx - width / 2;
  g.drawArc(x,y,width,20,190,160);
  if (description != null) {
    centreDesc(g);
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
}",0.9485199485199484
170239,"@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  Font fontsave=g.getFont();
  g.setFont(driver.fontf);
  g.setColor(Color.GRAY);
  if (description != null) {
    FontMetrics metrics=g.getFontMetrics(g.getFont());
    width=4;
    for (int j=0; j < description.length(); j++) {
      width+=metrics.charWidth(description.charAt(j));
    }
  }
  g.drawRoundRect(cx - width / 2,cy - height / 2,width,height,6,6);
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  g.fillRoundRect(cx - width / 2 + 1,cy - height / 2 + 1,width - 1,height - 1,6,6);
  g.setColor(Color.GRAY);
  if (description != null) {
    g.setColor(Color.GRAY);
    g.drawString(description,cx - width / 2 + 4,cy + 4);
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
  g.setFont(fontsave);
}","@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  Font fontsave=g.getFont();
  g.setFont(driver.fontf);
  g.setColor(Color.GRAY);
  if (description != null) {
    FontMetrics metrics=g.getFontMetrics(g.getFont());
    width=4;
    for (int j=0; j < description.length(); j++) {
      width+=metrics.charWidth(description.charAt(j));
    }
  }
  g.drawRoundRect(cx - width / 2,cy - height / 2,width,height,6,6);
  if (this == driver.selBlock)   g.setColor(ly);
 else   g.setColor(lb);
  g.fillRoundRect(cx - width / 2 + 1,cy - height / 2 + 1,width - 1,height - 1,6,6);
  g.setColor(Color.GRAY);
  if (description != null) {
    g.setColor(Color.GRAY);
    g.drawString(description,cx - width / 2 + 4,cy + 4);
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
  g.setFont(fontsave);
}",0.955849889624724
170240,"@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  g.setColor(Color.LIGHT_GRAY);
  g.fillRect(cx - width / 2,cy - height / 2,width,height);
  g.setColor(Color.BLACK);
  g.drawOval(cx - 8,cy - height / 2 + 2,16,20);
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  g.fillOval(cx - 7,cy - height / 2 + 3,14,18);
  g.setColor(Color.BLACK);
  g.drawLine(cx,cy - height / 2 + 20,cx,cy + 4);
  g.drawLine(cx,cy + 4,cx - 12,cy + height / 2);
  g.drawLine(cx,cy + 4,cx + 12,cy + height / 2);
  g.drawLine(cx,cy - 2,cx - 14,cy + 5);
  g.drawLine(cx,cy - 2,cx + 14,cy + 5);
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
  if (description != null) {
    centreDesc(g);
  }
}","@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  g.setColor(Color.LIGHT_GRAY);
  g.fillRect(cx - width / 2,cy - height / 2,width,height);
  g.setColor(Color.BLACK);
  g.drawOval(cx - 8,cy - height / 2 + 2,16,20);
  if (this == driver.selBlock)   g.setColor(ly);
 else   g.setColor(lb);
  g.fillOval(cx - 7,cy - height / 2 + 3,14,18);
  g.setColor(Color.BLACK);
  g.drawLine(cx,cy - height / 2 + 20,cx,cy + 4);
  g.drawLine(cx,cy + 4,cx - 12,cy + height / 2);
  g.drawLine(cx,cy + 4,cx + 12,cy + height / 2);
  g.drawLine(cx,cy - 2,cx - 14,cy + 5);
  g.drawLine(cx,cy - 2,cx + 14,cy + 5);
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
  if (description != null) {
    centreDesc(g);
  }
}",0.9433497536945812
170241,"@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  int ptx[]=new int[11];
  int pty[]=new int[11];
  int left, right, top, bottom;
  left=cx - width / 2;
  right=cx + width / 2;
  top=cy - height / 2;
  bottom=cy + height / 2;
  ptx[0]=left;
  pty[0]=bottom;
  ptx[1]=left;
  pty[1]=top;
  ptx[2]=right;
  pty[2]=top;
  int xt=right;
  int yt=bottom - height / 4;
  ptx[3]=xt;
  pty[3]=yt;
  xt-=width / 4;
  yt+=height / 32;
  ptx[4]=xt;
  pty[4]=yt;
  xt-=width / 8;
  yt+=height / 24;
  ptx[5]=xt;
  pty[5]=yt;
  xt-=width / 8;
  yt+=height / 16;
  ptx[6]=xt;
  pty[6]=yt;
  xt-=width / 8;
  yt+=height / 16;
  ptx[7]=xt;
  pty[7]=yt;
  xt-=width / 12;
  yt+=height / 20;
  ptx[8]=xt;
  pty[8]=yt;
  xt-=width / 16;
  yt+=1;
  ptx[9]=xt;
  pty[9]=yt;
  xt-=width / 16;
  yt+=1;
  ptx[10]=xt;
  pty[10]=yt;
  g.setColor(Color.BLACK);
  g.drawPolygon(ptx,pty,11);
  if (this == driver.selBlock)   g.setColor(new Color(255,255,200));
 else   g.setColor(new Color(200,255,255));
  ptx[0]+=1;
  ptx[1]+=1;
  pty[1]+=1;
  pty[2]+=1;
  for (int i=3; i < 11; i++)   pty[i]-=1;
  g.fillPolygon(ptx,pty,11);
  if (description != null) {
    centreDesc(g);
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
}","@Override void draw(Graphics2D g){
  if (!visible && this != driver.selBlock) {
    showZones(g);
    return;
  }
  int ptx[]=new int[11];
  int pty[]=new int[11];
  int left, right, top, bottom;
  left=cx - width / 2;
  right=cx + width / 2;
  top=cy - height / 2;
  bottom=cy + height / 2;
  ptx[0]=left;
  pty[0]=bottom;
  ptx[1]=left;
  pty[1]=top;
  ptx[2]=right;
  pty[2]=top;
  int xt=right;
  int yt=bottom - height / 4;
  ptx[3]=xt;
  pty[3]=yt;
  xt-=width / 4;
  yt+=height / 32;
  ptx[4]=xt;
  pty[4]=yt;
  xt-=width / 8;
  yt+=height / 24;
  ptx[5]=xt;
  pty[5]=yt;
  xt-=width / 8;
  yt+=height / 16;
  ptx[6]=xt;
  pty[6]=yt;
  xt-=width / 8;
  yt+=height / 16;
  ptx[7]=xt;
  pty[7]=yt;
  xt-=width / 12;
  yt+=height / 20;
  ptx[8]=xt;
  pty[8]=yt;
  xt-=width / 16;
  yt+=1;
  ptx[9]=xt;
  pty[9]=yt;
  xt-=width / 16;
  yt+=1;
  ptx[10]=xt;
  pty[10]=yt;
  g.setColor(Color.BLACK);
  g.drawPolygon(ptx,pty,11);
  if (this == driver.selBlock)   g.setColor(ly);
 else   g.setColor(lb);
  ptx[0]+=1;
  ptx[1]+=1;
  pty[1]+=1;
  pty[2]+=1;
  for (int i=3; i < 11; i++)   pty[i]-=1;
  g.fillPolygon(ptx,pty,11);
  if (description != null) {
    centreDesc(g);
  }
  calcDiagMaxAndMin(cx - width / 2,cx + width / 2,cy - height / 2,cy + height / 2);
}",0.9688230709275136
170242,"@SuppressWarnings(""String_Node_Str"") Class<?> getSelectedClass(String jar,String jf){
  if (jf.trim().equals(""String_Node_Str"")) {
    return null;
  }
  String fn=driver.javaFBPJarFile;
  int j=fn.lastIndexOf(""String_Node_Str"") + 8;
  String seg=""String_Node_Str"";
  if (0 <= fn.substring(j,j + 1).compareTo(""String_Node_Str""))   seg=""String_Node_Str"";
  String owner=""String_Node_Str"";
  if (0 <= fn.substring(j,j + 3).compareTo(""String_Node_Str""))   owner=""String_Node_Str"";
  Class<?> cls;
  URLClassLoader classLoader=null;
  try {
    try {
      File jFile=new File(fn);
      URI uri=jFile.toURI();
      URL url=uri.toURL();
      URL[] urls=new URL[]{url};
      classLoader=new URLClassLoader(urls);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return null;
    }
    Class<?> compClass=classLoader.loadClass(""String_Node_Str"" + owner + ""String_Node_Str""+ seg+ ""String_Node_Str"");
    Class<?> networkClass=classLoader.loadClass(""String_Node_Str"" + owner + ""String_Node_Str""+ seg+ ""String_Node_Str"");
    Class<?> subnetClass=classLoader.loadClass(""String_Node_Str"" + owner + ""String_Node_Str""+ seg+ ""String_Node_Str"");
    int i=jf.lastIndexOf(""String_Node_Str"");
    if (i != -1)     jf=jf.substring(0,i);
    jf=jf.replace('/','.');
    cls=this.classLoader.loadClass(jf);
    if (cls.equals(compClass) || cls.equals(networkClass) || cls.equals(subnetClass)) {
      return null;
    }
    Class cs=cls.getSuperclass();
    if (cs != compClass || cs != subnetClass) {
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"");
      return null;
    }
    boolean mainPresent=true;
    try {
      cls.getMethod(""String_Node_Str"",String[].class);
    }
 catch (    NoSuchMethodException e) {
      mainPresent=false;
    }
catch (    SecurityException e2) {
      mainPresent=false;
    }
    if (mainPresent) {
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"");
      return null;
    }
 else {
      return cls;
    }
  }
 catch (  ClassNotFoundException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") Class<?> getSelectedClass(String jar,String jf){
  if (jf.trim().equals(""String_Node_Str"")) {
    return null;
  }
  String fn=driver.javaFBPJarFile;
  int j=fn.lastIndexOf(""String_Node_Str"") + 8;
  String seg=""String_Node_Str"";
  if (0 <= fn.substring(j,j + 1).compareTo(""String_Node_Str""))   seg=""String_Node_Str"";
  String owner=""String_Node_Str"";
  if (0 <= fn.substring(j,j + 3).compareTo(""String_Node_Str""))   owner=""String_Node_Str"";
  Class<?> cls;
  URLClassLoader classLoader=null;
  try {
    try {
      File jFile=new File(fn);
      URI uri=jFile.toURI();
      URL url=uri.toURL();
      URL[] urls=new URL[]{url};
      classLoader=new URLClassLoader(urls);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
      return null;
    }
    Class<?> compClass=classLoader.loadClass(""String_Node_Str"" + owner + ""String_Node_Str""+ seg+ ""String_Node_Str"");
    Class<?> networkClass=classLoader.loadClass(""String_Node_Str"" + owner + ""String_Node_Str""+ seg+ ""String_Node_Str"");
    Class<?> subnetClass=classLoader.loadClass(""String_Node_Str"" + owner + ""String_Node_Str""+ seg+ ""String_Node_Str"");
    int i=jf.lastIndexOf(""String_Node_Str"");
    if (i != -1)     jf=jf.substring(0,i);
    jf=jf.replace('/','.');
    cls=this.classLoader.loadClass(jf);
    if (cls.equals(compClass) || cls.equals(networkClass) || cls.equals(subnetClass)) {
      return null;
    }
    Class cs=cls.getSuperclass();
    if (cs == null || !(cs == compClass || cs == subnetClass)) {
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"");
      return null;
    }
    boolean mainPresent=true;
    try {
      cls.getMethod(""String_Node_Str"",String[].class);
    }
 catch (    NoSuchMethodException e) {
      mainPresent=false;
    }
catch (    SecurityException e2) {
      mainPresent=false;
    }
    if (mainPresent) {
      MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"");
      return null;
    }
 else {
      return cls;
    }
  }
 catch (  ClassNotFoundException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return null;
  }
}",0.995623128311449
170243,"public boolean askAboutSaving(){
  String fileString=null;
  String name;
  if (changed) {
    if (title == null)     name=""String_Node_Str"";
 else {
      name=title;
      if (!name.toLowerCase().endsWith(""String_Node_Str""))       name+=""String_Node_Str"";
    }
    int answer=MyOptionPane.showConfirmDialog(driver.frame,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE);
    File file=null;
    if (answer == JOptionPane.YES_OPTION) {
      if (diagFile == null) {
        file=genSave(null,fCPArr[DrawFBP.DIAGRAM],name);
        if (file == null) {
          MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"");
          return false;
        }
      }
 else {
        file=diagFile;
        fileString=buildFile();
        writeFile(file,fileString);
      }
      File currentDiagramDir=file.getParentFile();
      driver.properties.put(""String_Node_Str"",currentDiagramDir.getAbsolutePath());
      driver.propertiesChanged=true;
      return true;
    }
    if (answer == JOptionPane.NO_OPTION)     return true;
 else     return false;
  }
  return true;
}","public boolean askAboutSaving(){
  String fileString=null;
  String name;
  boolean res=true;
  if (changed) {
    if (title == null)     name=""String_Node_Str"";
 else {
      name=title;
      if (!name.toLowerCase().endsWith(""String_Node_Str""))       name+=""String_Node_Str"";
    }
    int answer=MyOptionPane.showConfirmDialog(driver.frame,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE);
    File file=null;
    if (answer == JOptionPane.YES_OPTION) {
      if (diagFile == null) {
        file=genSave(null,fCPArr[DrawFBP.DIAGRAM],name);
        if (file == null) {
          MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"");
          res=false;
        }
      }
 else {
        file=diagFile;
        fileString=buildFile();
        writeFile(file,fileString);
      }
    }
    if (answer != JOptionPane.NO_OPTION)     res=false;
  }
  File currentDiagramDir=null;
  if (diagFile != null) {
    currentDiagramDir=diagFile.getParentFile();
    driver.properties.put(""String_Node_Str"",currentDiagramDir.getAbsolutePath());
    if (res)     driver.properties.put(""String_Node_Str"",diagFile.getAbsolutePath());
 else     driver.properties.remove(""String_Node_Str"");
  }
  String t=Integer.toString(driver.frame.getX());
  driver.properties.put(""String_Node_Str"",t);
  t=Integer.toString(driver.frame.getY());
  driver.properties.put(""String_Node_Str"",t);
  t=Integer.toString(driver.frame.getWidth());
  driver.properties.put(""String_Node_Str"",t);
  t=Integer.toString(driver.frame.getHeight());
  driver.properties.put(""String_Node_Str"",t);
  driver.propertiesChanged=true;
  return res;
}",0.6441631504922645
170244,"Diagram(DrawFBP drawFBP){
  driver=drawFBP;
  blocks=new HashMap<Integer,Block>();
  arrows=new HashMap<Integer,Arrow>();
  clickToGrid=true;
  driver.grid.setSelected(clickToGrid);
  diagLang=driver.defaultCompLang;
  for (int i=0; i < fCPArr.length; i++) {
    fCPArr[i]=driver.fCPArray[i];
  }
  fCPArr[DrawFBP.CLASS]=driver.new FileChooserParms(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",driver.new JavaClassFilter(),""String_Node_Str"");
  fCPArr[DrawFBP.PROCESS]=driver.new FileChooserParms(diagLang.srcDirProp,""String_Node_Str"" + diagLang.showLangs() + ""String_Node_Str"",diagLang.suggExtn,diagLang.filter,""String_Node_Str"" + diagLang.showLangs() + ""String_Node_Str""+ diagLang.showSuffixes());
  fCPArr[DrawFBP.GENCODE]=driver.new FileChooserParms(diagLang.netDirProp,""String_Node_Str"",""String_Node_Str"" + diagLang.suggExtn,diagLang.filter,diagLang.showLangs());
}","Diagram(DrawFBP drawFBP){
  driver=drawFBP;
  blocks=new ConcurrentHashMap<Integer,Block>();
  arrows=new ConcurrentHashMap<Integer,Arrow>();
  clickToGrid=true;
  driver.grid.setSelected(clickToGrid);
  diagLang=driver.defaultCompLang;
  for (int i=0; i < fCPArr.length; i++) {
    fCPArr[i]=driver.fCPArray[i];
  }
  fCPArr[DrawFBP.CLASS]=driver.new FileChooserParms(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",driver.new JavaClassFilter(),""String_Node_Str"");
  fCPArr[DrawFBP.PROCESS]=driver.new FileChooserParms(diagLang.srcDirProp,""String_Node_Str"" + diagLang.showLangs() + ""String_Node_Str"",diagLang.suggExtn,diagLang.filter,""String_Node_Str"" + diagLang.showLangs() + ""String_Node_Str""+ diagLang.showSuffixes());
  fCPArr[DrawFBP.GENCODE]=driver.new FileChooserParms(diagLang.netDirProp,""String_Node_Str"",""String_Node_Str"" + diagLang.suggExtn,diagLang.filter,diagLang.showLangs());
}",0.9887514060742408
170245,"private void buildUI(Container container){
  buildPropDescTable();
  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));
  Box box1=new Box(BoxLayout.Y_AXIS);
  container.add(box1);
  curDiag=getNewDiag();
  MouseListener mouseListener=new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      int i=jtp.indexAtLocation(e.getX(),e.getY());
      if (i == -1)       return;
      ButtonTabComponent b=(ButtonTabComponent)driver.jtp.getTabComponentAt(i);
      Diagram diag=b.diag;
      if (diag == null) {
        getNewDiag();
      }
      curDiag=diag;
      frame.repaint();
    }
  }
;
  jtp.addMouseListener(mouseListener);
  Box box4=new Box(BoxLayout.X_AXIS);
  box1.add(box4);
  int sf=(int)Math.round(100.0 * scalingFactor);
  zoomControl=new JSlider(JSlider.VERTICAL,60,200,sf);
  zoomControl.setPreferredSize(new Dimension(40,200));
  zoomControl.setMajorTickSpacing(20);
  zoomControl.setPaintTicks(true);
  zoomControl.setSnapToTicks(true);
  zoomControl.setPaintLabels(false);
  zoomControl.setPaintTrack(true);
  zoomControl.setVisible(true);
  zoomControl.addChangeListener(this);
  zoomControl.getInputMap().put(escapeKS,""String_Node_Str"");
  zoomControl.getActionMap().put(""String_Node_Str"",escapeAction);
  Box box5=new Box(BoxLayout.Y_AXIS);
  box4.add(box5);
  box5.add(Box.createRigidArea(new Dimension(0,10)));
  box5.add(lab2);
  box5.add(Box.createRigidArea(new Dimension(0,10)));
  box5.add(zoomControl);
  box5.add(Box.createRigidArea(new Dimension(0,10)));
  scaleLab=new JLabel();
  box5.add(scaleLab);
  String scale=""String_Node_Str"";
  scaleLab.setText(scale);
  Point p=jtp.getLocation();
  jtp.setLocation(p.x + 100,p.y);
  box4.add(jtp);
  box4.add(Box.createRigidArea(new Dimension(50,0)));
  curDiag.area.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
  diagDesc.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
  box1.add(diagDesc);
  Font ft=fontg.deriveFont(Font.BOLD);
  diagDesc.setFont(ft);
  diagDesc.setPreferredSize(new Dimension(0,fontHeight * 2));
  diagDesc.setForeground(Color.BLUE);
  box1.add(Box.createRigidArea(new Dimension(0,4)));
  Box box2=new Box(BoxLayout.X_AXIS);
  box2.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
  box1.add(box2);
  box2.add(Box.createHorizontalGlue());
  ButtonGroup butGroup=new ButtonGroup();
  String buttonNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int j=0; j < but.length; j++) {
    but[j]=new JRadioButton();
    but[j].addActionListener(this);
    butGroup.add(but[j]);
    box2.add(but[j]);
    but[j].setText(buttonNames[j]);
    but[j].setFocusable(true);
  }
  adjustFonts();
  but[0].setSelected(true);
  box2.add(Box.createHorizontalGlue());
  Component[] comps=box2.getComponents();
  for (int j=0; j < comps.length; j++) {
    if (comps[j] instanceof JRadioButton) {
      JRadioButton jrb=(JRadioButton)comps[j];
      jrb.getInputMap().put(escapeKS,""String_Node_Str"");
      jrb.getActionMap().put(""String_Node_Str"",escapeAction);
    }
  }
  BufferedImage image=loadImage(""String_Node_Str"");
  frame.setIconImage(image);
  leafIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  javaIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  jarIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  folderIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  classIcon=new ImageIcon(image);
  Toolkit tk=Toolkit.getDefaultToolkit();
  image=null;
  openPawCursor=null;
  image=loadImage(""String_Node_Str"");
  openPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  closedPawCursor=null;
  image=loadImage(""String_Node_Str"");
  closedPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  image=loadImage(""String_Node_Str"");
  drag_icon=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
}","private void buildUI(Container container){
  buildPropDescTable();
  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));
  Box box1=new Box(BoxLayout.Y_AXIS);
  container.add(box1);
  curDiag=getNewDiag();
  MouseListener mouseListener=new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      int i=jtp.indexAtLocation(e.getX(),e.getY());
      if (i == -1)       return;
      ButtonTabComponent b=(ButtonTabComponent)driver.jtp.getTabComponentAt(i);
      Diagram diag=b.diag;
      if (diag == null) {
        getNewDiag();
      }
      curDiag=diag;
      frame.repaint();
    }
  }
;
  jtp.addMouseListener(mouseListener);
  Box box4=new Box(BoxLayout.X_AXIS);
  box1.add(box4);
  int sf=(int)Math.round(100.0 * scalingFactor);
  zoomControl=new JSlider(JSlider.VERTICAL,60,200,sf);
  zoomControl.setPreferredSize(new Dimension(40,200));
  zoomControl.setMajorTickSpacing(20);
  zoomControl.setPaintTicks(true);
  zoomControl.setSnapToTicks(true);
  zoomControl.setPaintLabels(false);
  zoomControl.setPaintTrack(true);
  zoomControl.setVisible(true);
  zoomControl.addChangeListener(this);
  zoomControl.getInputMap().put(escapeKS,""String_Node_Str"");
  zoomControl.getActionMap().put(""String_Node_Str"",escapeAction);
  Box box5=new Box(BoxLayout.Y_AXIS);
  box4.add(box5);
  box5.add(Box.createRigidArea(new Dimension(0,10)));
  box5.add(lab2);
  box5.add(Box.createRigidArea(new Dimension(0,10)));
  box5.add(zoomControl);
  box5.add(Box.createRigidArea(new Dimension(0,10)));
  scaleLab=new JLabel();
  box5.add(scaleLab);
  String scale=""String_Node_Str"";
  scaleLab.setText(scale);
  Point p=jtp.getLocation();
  jtp.setLocation(p.x + 100,p.y);
  box4.add(jtp);
  box4.add(Box.createRigidArea(new Dimension(50,0)));
  curDiag.area.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
  diagDesc.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
  box1.add(diagDesc);
  Font ft=fontg.deriveFont(Font.BOLD);
  diagDesc.setFont(ft);
  diagDesc.setPreferredSize(new Dimension(0,fontHeight * 2));
  diagDesc.setForeground(Color.BLUE);
  box1.add(Box.createRigidArea(new Dimension(0,4)));
  Box box2=new Box(BoxLayout.X_AXIS);
  box2.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
  box1.add(box2);
  box2.add(Box.createHorizontalGlue());
  ButtonGroup butGroup=new ButtonGroup();
  String buttonNames[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int j=0; j < but.length; j++) {
    but[j]=new JRadioButton();
    but[j].addActionListener(this);
    butGroup.add(but[j]);
    box2.add(but[j]);
    but[j].setText(buttonNames[j]);
    but[j].setFocusable(true);
  }
  adjustFonts();
  but[0].setSelected(true);
  box2.add(Box.createHorizontalGlue());
  Component[] comps=box2.getComponents();
  for (int j=0; j < comps.length; j++) {
    if (comps[j] instanceof JRadioButton) {
      JRadioButton jrb=(JRadioButton)comps[j];
      jrb.getInputMap().put(escapeKS,""String_Node_Str"");
      jrb.getActionMap().put(""String_Node_Str"",escapeAction);
    }
  }
  BufferedImage image=loadImage(""String_Node_Str"");
  frame.setIconImage(image);
  leafIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  javaIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  jarIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  folderIcon=new ImageIcon(image);
  image=loadImage(""String_Node_Str"");
  classIcon=new ImageIcon(image);
  Toolkit tk=Toolkit.getDefaultToolkit();
  image=null;
  openPawCursor=null;
  image=loadImage(""String_Node_Str"");
  openPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  closedPawCursor=null;
  image=loadImage(""String_Node_Str"");
  closedPawCursor=tk.createCustomCursor(image,new Point(15,15),""String_Node_Str"");
  image=loadImage(""String_Node_Str"");
  drag_icon=tk.createCustomCursor(image,new Point(10,10),""String_Node_Str"");
}",0.9995028585632612
170246,"LinkedList<String> mySort(LinkedList<String> from){
  if (from.isEmpty()) {
    return new LinkedList<String>();
  }
  int low_x=0;
  LinkedList<String> lkl=new LinkedList<String>();
  while (true) {
    try {
      String low=from.getFirst();
      int i=0;
      for (      String s : from) {
        if (s.compareToIgnoreCase(low) == -1) {
          low=s;
          low_x=i;
        }
      }
      lkl.add(low);
      from.remove(low_x);
    }
 catch (    NoSuchElementException e) {
      return lkl;
    }
  }
}","LinkedList<String> mySort(LinkedList<String> from){
  if (from.isEmpty()) {
    return new LinkedList<String>();
  }
  LinkedList<String> ll=from;
  LinkedList<String> lkl=new LinkedList<String>();
  while (true) {
    try {
      String low=ll.getFirst();
      int i=0;
      int low_i=0;
      for (      String s : ll) {
        if (i > 0 && s.compareToIgnoreCase(low) < 0) {
          low=s;
          low_i=i;
        }
        i++;
      }
      lkl.add(low);
      ll.remove(low_i);
    }
 catch (    NoSuchElementException e) {
      return lkl;
    }
  }
}",0.5940959409594095
170247,"/** 
 * Create the GUI and show it. For thread safety, this method should be invoked from the event-dispatching thread.
 */
private void createAndShowGUI(){
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  frame=this;
  frame.setTitle(""String_Node_Str"");
  SwingUtilities.updateComponentTreeUI(frame);
  frame.setUndecorated(false);
  frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
  applyOrientation(frame);
  int w=(int)dim.getWidth();
  int h=(int)dim.getHeight();
  maxX=(int)(w * .8);
  maxY=(int)(h * .8);
  buffer=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
  osg=buffer.createGraphics();
  bs=new BasicStroke(1.5f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND);
  osg.setStroke(bs);
  osg.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  readPropertiesFile();
  if (null == (generalFont=properties.get(""String_Node_Str"")))   generalFont=""String_Node_Str"";
  if (null == (fixedFont=properties.get(""String_Node_Str"")))   fixedFont=""String_Node_Str"";
  String dfs=properties.get(""String_Node_Str"");
  if (dfs == null)   defaultFontSize=14;
 else   defaultFontSize=Integer.parseInt(dfs);
  String dcl=properties.get(""String_Node_Str"");
  if (dcl == null) {
    defaultCompLang=findGLFromLabel(""String_Node_Str"");
    propertiesChanged=true;
  }
 else {
    if (dcl.equals(""String_Node_Str""))     dcl=""String_Node_Str"";
    defaultCompLang=findGLFromLabel(dcl);
  }
  startProperties=new HashMap<String,String>();
  for (  String s : properties.keySet()) {
    startProperties.put(s,properties.get(s));
  }
  fontg=new Font(generalFont,Font.PLAIN,defaultFontSize);
  fontf=new Font(fixedFont,Font.PLAIN,defaultFontSize);
  osg.setFont(fontg);
  FontMetrics metrics=osg.getFontMetrics(fontg);
  fontWidth=metrics.charWidth('n');
  fontHeight=metrics.getAscent() + metrics.getLeading();
  jfl=new JTextField(""String_Node_Str"");
  jfl.setText(""String_Node_Str"" + fixedFont + ""String_Node_Str""+ generalFont);
  jtp=new JTabbedPaneWithCloseIcons(this);
  jtp.setForeground(Color.BLACK);
  jtp.setBackground(Color.WHITE);
  BufferedImage image=loadImage(""String_Node_Str"");
  if (image != null) {
    favicon=new ImageIcon(image);
    frame.setIconImage(image);
  }
 else {
    MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
  }
  frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  closeTabAction=new CloseTabAction();
  closeAppAction=new CloseAppAction();
  escapeAction=new EscapeAction();
  frame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent ev){
      closeAppAction.actionPerformed(new ActionEvent(ev,0,""String_Node_Str""));
    }
  }
);
  jtp.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(escapeKS,""String_Node_Str"");
  jtp.getActionMap().put(""String_Node_Str"",escapeAction);
  Container cont=frame.getContentPane();
  buildUI(cont);
  frame.add(Box.createRigidArea(new Dimension(0,10)));
  String t=properties.get(""String_Node_Str"");
  int x=0, y=0, w2=1200, h2=800;
  if (t != null)   x=Integer.parseInt(t);
  t=properties.get(""String_Node_Str"");
  if (t != null)   y=Integer.parseInt(t);
  Point p=new Point(x,y);
  frame.setLocation(p);
  t=properties.get(""String_Node_Str"");
  if (t != null)   w2=Integer.parseInt(t);
  t=properties.get(""String_Node_Str"");
  if (t != null)   h2=Integer.parseInt(t);
  Dimension dim2=new Dimension(w2,h2);
  frame.setPreferredSize(dim2);
  frame.repaint();
  frame.pack();
  frame.setVisible(true);
  frame.addComponentListener(this);
  frame.repaint();
  wDiff=frame.getWidth() - curDiag.area.getWidth();
  hDiff=frame.getHeight() - curDiag.area.getHeight();
  diagramName=properties.get(""String_Node_Str"");
  boolean small=(diagramName) == null ? false : true;
  if (!small)   new SplashWindow(frame,3000,this,small);
  if (diagramName != null) {
    actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,""String_Node_Str"" + diagramName));
  }
  frame.repaint();
}","/** 
 * Create the GUI and show it. For thread safety, this method should be invoked from the event-dispatching thread.
 */
private void createAndShowGUI(){
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  frame=this;
  frame.setTitle(""String_Node_Str"");
  SwingUtilities.updateComponentTreeUI(frame);
  frame.setUndecorated(false);
  frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
  applyOrientation(frame);
  int w=(int)dim.getWidth();
  int h=(int)dim.getHeight();
  maxX=(int)(w * .8);
  maxY=(int)(h * .8);
  buffer=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
  osg=buffer.createGraphics();
  bs=new BasicStroke(1.5f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND);
  osg.setStroke(bs);
  osg.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  readPropertiesFile();
  if (null == (generalFont=properties.get(""String_Node_Str"")))   generalFont=""String_Node_Str"";
  if (null == (fixedFont=properties.get(""String_Node_Str"")))   fixedFont=""String_Node_Str"";
  String dfs=properties.get(""String_Node_Str"");
  if (dfs == null)   defaultFontSize=14;
 else   defaultFontSize=Integer.parseInt(dfs);
  String dcl=properties.get(""String_Node_Str"");
  if (dcl == null) {
    defaultCompLang=findGLFromLabel(""String_Node_Str"");
    propertiesChanged=true;
  }
 else {
    if (dcl.equals(""String_Node_Str""))     dcl=""String_Node_Str"";
    defaultCompLang=findGLFromLabel(dcl);
  }
  Iterator entries=jarFiles.entrySet().iterator();
  String z=""String_Node_Str"";
  String cma=""String_Node_Str"";
  boolean first=true;
  while (entries.hasNext()) {
    @SuppressWarnings(""String_Node_Str"") Entry<String,String> thisEntry=(Entry<String,String>)entries.next();
    if (!first) {
      z+=cma + thisEntry.getKey() + ""String_Node_Str""+ thisEntry.getValue();
      cma=""String_Node_Str"";
    }
    first=false;
  }
  properties.put(""String_Node_Str"",z);
  startProperties=new HashMap<String,String>();
  for (  String s : properties.keySet()) {
    startProperties.put(s,properties.get(s));
  }
  fontg=new Font(generalFont,Font.PLAIN,defaultFontSize);
  fontf=new Font(fixedFont,Font.PLAIN,defaultFontSize);
  osg.setFont(fontg);
  FontMetrics metrics=osg.getFontMetrics(fontg);
  fontWidth=metrics.charWidth('n');
  fontHeight=metrics.getAscent() + metrics.getLeading();
  jfl=new JTextField(""String_Node_Str"");
  jfl.setText(""String_Node_Str"" + fixedFont + ""String_Node_Str""+ generalFont);
  jtp=new JTabbedPaneWithCloseIcons(this);
  jtp.setForeground(Color.BLACK);
  jtp.setBackground(Color.WHITE);
  BufferedImage image=loadImage(""String_Node_Str"");
  if (image != null) {
    favicon=new ImageIcon(image);
    frame.setIconImage(image);
  }
 else {
    MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
  }
  frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  closeTabAction=new CloseTabAction();
  closeAppAction=new CloseAppAction();
  escapeAction=new EscapeAction();
  frame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent ev){
      closeAppAction.actionPerformed(new ActionEvent(ev,0,""String_Node_Str""));
    }
  }
);
  jtp.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(escapeKS,""String_Node_Str"");
  jtp.getActionMap().put(""String_Node_Str"",escapeAction);
  Container cont=frame.getContentPane();
  buildUI(cont);
  frame.add(Box.createRigidArea(new Dimension(0,10)));
  String t=properties.get(""String_Node_Str"");
  int x=0, y=0, w2=1200, h2=800;
  if (t != null)   x=Integer.parseInt(t);
  t=properties.get(""String_Node_Str"");
  if (t != null)   y=Integer.parseInt(t);
  Point p=new Point(x,y);
  frame.setLocation(p);
  t=properties.get(""String_Node_Str"");
  if (t != null)   w2=Integer.parseInt(t);
  t=properties.get(""String_Node_Str"");
  if (t != null)   h2=Integer.parseInt(t);
  Dimension dim2=new Dimension(w2,h2);
  frame.setPreferredSize(dim2);
  frame.repaint();
  frame.pack();
  frame.setVisible(true);
  frame.addComponentListener(this);
  frame.repaint();
  wDiff=frame.getWidth() - curDiag.area.getWidth();
  hDiff=frame.getHeight() - curDiag.area.getHeight();
  diagramName=properties.get(""String_Node_Str"");
  boolean small=(diagramName) == null ? false : true;
  if (!small)   new SplashWindow(frame,3000,this,small);
  if (diagramName != null) {
    actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,""String_Node_Str"" + diagramName));
  }
  frame.repaint();
}",0.945002956830278
170248,"boolean readPropertiesFile(){
  if (propertiesFile == null) {
    String uh=System.getProperty(""String_Node_Str"");
    propertiesFile=new File(uh + File.separator + ""String_Node_Str"");
    if (!propertiesFile.exists())     return false;
  }
  BufferedReader in=null;
  String s=null;
  try {
    in=new BufferedReader(new FileReader(propertiesFile));
  }
 catch (  FileNotFoundException e) {
    return false;
  }
  while (true) {
    try {
      s=in.readLine();
    }
 catch (    IOException e) {
    }
    if (s == null)     break;
    s=s.trim();
    if (s.equals(""String_Node_Str"") || s.equals(""String_Node_Str""))     continue;
    if (s.startsWith(""String_Node_Str""))     continue;
    int i=s.indexOf(""String_Node_Str"");
    int j=s.indexOf(""String_Node_Str"");
    if (i > -1 && j > -1 && j > i + 1) {
      String key=s.substring(i + 1,j);
      s=s.substring(j + 1);
      int k=s.indexOf(""String_Node_Str"");
      String u=""String_Node_Str"";
      if (k > 0) {
        if (!(key.equals(""String_Node_Str""))) {
          s=s.substring(0,k).trim();
          properties.put(key,s);
        }
 else {
          s=s.substring(0,k).trim();
          while (true) {
            int m=s.indexOf(""String_Node_Str"");
            if (m == -1) {
              u=s;
              int n=u.indexOf(""String_Node_Str"");
              properties.put(""String_Node_Str"" + u.substring(0,n),u.substring(n + 1));
              jarFiles.put(u.substring(0,n),u.substring(n + 1));
              break;
            }
 else {
              u=s.substring(0,m);
              s=s.substring(m + 1);
              int n=u.indexOf(""String_Node_Str"");
              properties.put(""String_Node_Str"" + u.substring(0,n),u.substring(n + 1));
              jarFiles.put(u.substring(0,n),u.substring(n + 1));
            }
          }
        }
      }
    }
  }
  try {
    in.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return true;
}","boolean readPropertiesFile(){
  if (propertiesFile == null) {
    String uh=System.getProperty(""String_Node_Str"");
    propertiesFile=new File(uh + File.separator + ""String_Node_Str"");
    if (!propertiesFile.exists())     return false;
  }
  BufferedReader in=null;
  String s=null;
  try {
    in=new BufferedReader(new FileReader(propertiesFile));
  }
 catch (  FileNotFoundException e) {
    return false;
  }
  while (true) {
    try {
      s=in.readLine();
    }
 catch (    IOException e) {
    }
    if (s == null)     break;
    s=s.trim();
    if (s.equals(""String_Node_Str"") || s.equals(""String_Node_Str""))     continue;
    if (s.startsWith(""String_Node_Str""))     continue;
    int i=s.indexOf(""String_Node_Str"");
    int j=s.indexOf(""String_Node_Str"");
    if (i > -1 && j > -1 && j > i + 1) {
      String key=s.substring(i + 1,j);
      s=s.substring(j + 1);
      int k=s.indexOf(""String_Node_Str"");
      String u=""String_Node_Str"";
      if (k > 0) {
        if (!(key.equals(""String_Node_Str""))) {
          s=s.substring(0,k).trim();
          properties.put(key,s);
        }
 else         s=s.substring(0,k).trim();
        while (true) {
          int m=s.indexOf(""String_Node_Str"");
          if (m == -1) {
            u=s;
            int n=u.indexOf(""String_Node_Str"");
            if (n == -1)             break;
            properties.put(""String_Node_Str"" + u.substring(0,n),u.substring(n + 1));
            jarFiles.put(u.substring(0,n),u.substring(n + 1));
            break;
          }
 else {
            u=s.substring(0,m);
            s=s.substring(m + 1);
            int n=u.indexOf(""String_Node_Str"");
            if (n == -1)             break;
            properties.put(""String_Node_Str"" + u.substring(0,n),u.substring(n + 1));
            jarFiles.put(u.substring(0,n),u.substring(n + 1));
          }
        }
      }
    }
  }
  try {
    in.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return true;
}",0.9652173913043478
170249,"void writePropertiesFile(){
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new FileWriter(propertiesFile));
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    for (    String k : properties.keySet()) {
      if (k.startsWith(""String_Node_Str""))       continue;
      String s=""String_Node_Str"" + k + ""String_Node_Str""+ properties.get(k)+ ""String_Node_Str""+ k+ ""String_Node_Str"";
      out.write(s);
    }
    out.write(""String_Node_Str"");
    out.flush();
    out.close();
  }
 catch (  FileNotFoundException ex) {
    ex.printStackTrace();
  }
catch (  IOException ex) {
    ex.printStackTrace();
  }
}","void writePropertiesFile(){
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new FileWriter(propertiesFile));
    out.write(""String_Node_Str"");
    out.write(""String_Node_Str"");
    for (    String k : properties.keySet()) {
      if (k.startsWith(""String_Node_Str"") || k.startsWith(""String_Node_Str""))       continue;
      String s=""String_Node_Str"" + k + ""String_Node_Str""+ properties.get(k)+ ""String_Node_Str""+ k+ ""String_Node_Str"";
      out.write(s);
    }
    Iterator entries=jarFiles.entrySet().iterator();
    String z=""String_Node_Str"";
    String cma=""String_Node_Str"";
    boolean first=true;
    while (entries.hasNext()) {
      @SuppressWarnings(""String_Node_Str"") Entry<String,String> thisEntry=(Entry<String,String>)entries.next();
      if (!first) {
        z+=cma + thisEntry.getKey() + ""String_Node_Str""+ thisEntry.getValue();
        cma=""String_Node_Str"";
      }
      first=false;
    }
    properties.put(""String_Node_Str"",z);
    out.write(""String_Node_Str"");
    out.flush();
    out.close();
  }
 catch (  FileNotFoundException ex) {
    ex.printStackTrace();
  }
catch (  IOException ex) {
    ex.printStackTrace();
  }
}",0.7084257206208425
170250,"public void setSelectedIndex(int i){
  if (i > -1) {
    super.setSelectedIndex(i);
    ButtonTabComponent b=(ButtonTabComponent)getTabComponentAt(i);
    if (b != null) {
      driver.curDiag=b.diag;
      if (driver.curDiag != null && driver.curDiag.diagLang != null && driver.curDiag.diagLang != driver.defaultCompLang) {
        driver.changeLanguage(driver.curDiag.diagLang);
      }
    }
  }
}","public void setSelectedIndex(int i){
  if (i > -1) {
    super.setSelectedIndex(i);
    ButtonTabComponent b=(ButtonTabComponent)getTabComponentAt(i);
    if (b != null && b.diag != null) {
      driver.curDiag=b.diag;
      driver.frame.setTitle(""String_Node_Str"" + driver.curDiag.title);
      File f=driver.curDiag.diagFile;
      if (f != null) {
        File currentDiagramDir=f.getParentFile();
        driver.properties.put(""String_Node_Str"",currentDiagramDir.getAbsolutePath());
        driver.propertiesChanged=true;
      }
      if (driver.curDiag != null && driver.curDiag.diagLang != null && driver.curDiag.diagLang != driver.defaultCompLang) {
        driver.changeLanguage(driver.curDiag.diagLang);
      }
    }
  }
}",0.5525154457193292
170251,"boolean generateCode(){
  fbpMode=false;
  langLabel=diag.diagLang.label;
  gl=diag.diagLang;
  changed=true;
  diag.fCPArr[DrawFBP.COMPONENT]=driver.new FileChooserParms(diag.diagLang.srcDirProp,""String_Node_Str"" + diag.diagLang.showLangs() + ""String_Node_Str"",diag.diagLang.suggExtn,diag.diagLang.filter,""String_Node_Str"" + diag.diagLang.showLangs() + ""String_Node_Str""+ diag.diagLang.showSuffixes());
  diag.fCPArr[DrawFBP.GENCODE]=driver.new FileChooserParms(diag.diagLang.netDirProp,""String_Node_Str"",""String_Node_Str"" + diag.diagLang.suggExtn,diag.diagLang.filter,diag.diagLang.label);
  String component=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  String initialize=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  String _port=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  String sDO=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  frame.setTitle(""String_Node_Str"" + diag.diagFile.getName());
  frame.setJMenuBar(createMenuBar());
  BufferedImage image=driver.loadImage(""String_Node_Str"");
  frame.setIconImage(image);
  String code=""String_Node_Str"";
  portNames=new HashSet<String>();
  blocklist=new HashMap<String,Integer>();
  ext=""String_Node_Str"";
  Style[] styles=new Style[20];
  for (  Block block : diag.blocks.values()) {
    if (block instanceof ExtPortBlock) {
      ext=""String_Node_Str"";
      if (block.description == null || block.description.equals(""String_Node_Str"")) {
        block.description=""String_Node_Str"";
        block.description=makeUniqueDesc(block.description);
      }
    }
  }
  if (langLabel.equals(""String_Node_Str"")) {
    packageName=driver.properties.get(""String_Node_Str"");
    if (packageName == null) {
      packageName=(String)MyOptionPane.showInputDialog(frame,""String_Node_Str"",null);
      packageName=packageName.trim();
      driver.properties.put(""String_Node_Str"",packageName);
      driver.propertiesChanged=true;
    }
  }
  String[] contents;
  if (langLabel.equals(""String_Node_Str"")) {
    contents=new String[1];
    contents[0]=generateJSON();
    styles[0]=normalStyle;
  }
 else {
    contents=new String[20];
    if (langLabel.equals(""String_Node_Str"")) {
      contents[0]=""String_Node_Str"";
      contents[1]=packageName + ""String_Node_Str"";
    }
 else     contents[0]=""String_Node_Str"";
    contents[2]=""String_Node_Str"";
    if (langLabel.equals(""String_Node_Str""))     contents[2]+=""String_Node_Str"";
    if (ext.equals(""String_Node_Str""))     contents[3]=genMetadata(langLabel) + ""String_Node_Str"";
 else     contents[3]=""String_Node_Str"";
    contents[4]=""String_Node_Str"";
    contents[5]=diag.title;
    if (langLabel.equals(""String_Node_Str""))     contents[6]=""String_Node_Str"";
 else     contents[6]=""String_Node_Str"";
    contents[7]=ext;
    if (langLabel.equals(""String_Node_Str""))     contents[8]=""String_Node_Str"";
 else     contents[8]=""String_Node_Str"";
    if (diag.desc == null)     diag.desc=""String_Node_Str"";
    contents[9]=""String_Node_Str"" + diag.desc + ""String_Node_Str"";
    if (langLabel.equals(""String_Node_Str""))     contents[10]=""String_Node_Str"";
 else     contents[10]=""String_Node_Str"";
    styles[0]=normalStyle;
    styles[1]=packageNameStyle;
    styles[2]=baseStyle;
    styles[3]=packageNameStyle;
    styles[4]=normalStyle;
    styles[5]=packageNameStyle;
    styles[6]=normalStyle;
    styles[7]=packageNameStyle;
    styles[8]=normalStyle;
    styles[9]=packageNameStyle;
    styles[10]=normalStyle;
    for (    Block block : diag.blocks.values()) {
      String t;
      if (block instanceof ComponentBlock) {
        if (block.description == null) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
          error=true;
          return false;
        }
        String s=cleanDesc(block);
        String c=cleanComp(block);
        if (block instanceof IIPBlock)         descArray.put(new Integer(block.id),block.description);
 else         descArray.put(new Integer(block.id),s);
        if (!block.multiplex)         code+=genComp(s,c,langLabel) + ""String_Node_Str"";
 else {
          if (block.mpxfactor == null) {
            String d=(String)MyOptionPane.showInputDialog(frame,""String_Node_Str"" + ""String_Node_Str"" + block.description + ""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
            if (d == null || d.equals(""String_Node_Str"")) {
              block.mpxfactor=""String_Node_Str"";
              error=true;
            }
 else             block.mpxfactor=d;
            diag.changed=true;
          }
          frame.repaint();
          if (block.mpxfactor != null) {
            code+=""String_Node_Str"" + compress(s) + ""String_Node_Str""+ block.mpxfactor+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ s+ ""String_Node_Str"";
          }
          code+=""String_Node_Str"" + compress(s) + ""String_Node_Str"";
          code+=genCompMpx(s,c,langLabel) + ""String_Node_Str"";
          if (c.equals(""String_Node_Str"")) {
            code+=""String_Node_Str"";
          }
          code+=""String_Node_Str"";
        }
      }
      if (block instanceof ExtPortBlock) {
        ExtPortBlock eb=(ExtPortBlock)block;
        String s=""String_Node_Str"";
        if (block.type.equals(Block.Types.EXTPORT_IN_BLOCK)) {
          s=""String_Node_Str"";
          if (eb.substreamSensitive)           t=""String_Node_Str"";
 else           t=""String_Node_Str"";
        }
 else         if (block.type.equals(Block.Types.EXTPORT_OUT_BLOCK)) {
          s=""String_Node_Str"";
          if (eb.substreamSensitive)           t=""String_Node_Str"";
 else           t=""String_Node_Str"";
        }
 else {
          s=""String_Node_Str"";
          t=""String_Node_Str"";
        }
        s=makeUniqueDesc(s);
        if (t.toLowerCase().endsWith(""String_Node_Str""))         t=t.substring(0,t.length() - 6);
        code+=genComp(s,t,langLabel) + ""String_Node_Str"";
        code+=initialize + ""String_Node_Str"" + s+ ""String_Node_Str""+ component+ ""String_Node_Str""+ s+ ""String_Node_Str""+ _port+ ""String_Node_Str"";
      }
    }
    for (    Arrow arrow : diag.arrows.values()) {
      Block from=diag.blocks.get(new Integer(arrow.fromId));
      Arrow a2=arrow.findTerminalArrow();
      if (a2 == null)       continue;
      Block to=diag.blocks.get(new Integer(a2.toId));
      if (to == null) {
        MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
        break;
      }
      if (from == null || to == null || from instanceof FileBlock || from instanceof ReportBlock || from instanceof LegendBlock || to instanceof FileBlock || to instanceof ReportBlock || to instanceof LegendBlock)       continue;
      if (!getPortNames(arrow))       return false;
      frame.repaint();
      String fromDesc=descArray.get(new Integer(arrow.fromId));
      String toDesc=descArray.get(new Integer(a2.toId));
      frame.repaint();
      String cap=""String_Node_Str"";
      if (arrow.capacity > 0)       cap=""String_Node_Str"" + arrow.capacity;
      if (from instanceof ComponentBlock && to instanceof ComponentBlock) {
        if (!arrow.endsAtLine && checkDupPort(dnPort,to)) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"" + dnPort);
          error=true;
        }
        if (checkDupPort(upPort,from)) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"" + upPort);
          error=true;
        }
        if (from.multiplex) {
          code+=""String_Node_Str"" + compress(fromDesc) + ""String_Node_Str"";
          code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ fromDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
          if (arrow.dropOldest)           code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
        }
 else         if (to.multiplex) {
          code+=""String_Node_Str"" + compress(toDesc) + ""String_Node_Str"";
          code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
          if (arrow.dropOldest)           code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
        }
 else {
          code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
          if (arrow.dropOldest)           code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
        }
      }
 else       if (from instanceof IIPBlock && to instanceof ComponentBlock) {
        if (!arrow.endsAtLine && checkDupPort(dnPort,to)) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"" + dnPort);
          error=true;
        }
        code+=initialize + ""String_Node_Str"" + q(fromDesc)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
      }
      if (from instanceof ExtPortBlock) {
        code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
        if (arrow.dropOldest)         code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
      }
 else       if (to instanceof ExtPortBlock) {
        code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
        if (arrow.dropOldest)         code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
      }
    }
    if (ext.equals(""String_Node_Str"")) {
      String s=diag.title;
      int i=s.indexOf(""String_Node_Str"");
      if (i > -1)       s=s.substring(0,i);
      code+=""String_Node_Str"";
      if (langLabel.equals(""String_Node_Str""))       code+=""String_Node_Str"" + ""String_Node_Str"" + s + ""String_Node_Str"";
 else       code+=""String_Node_Str"" + ""String_Node_Str"" + s + ""String_Node_Str"";
    }
    code+=""String_Node_Str"";
    int sno=11;
    contents[sno]=code;
    styles[sno]=normalStyle;
    sno++;
    contents[sno]=""String_Node_Str"";
    styles[sno]=normalStyle;
    sno++;
    if (error) {
      contents[sno]=""String_Node_Str"" + ""String_Node_Str"";
      styles[sno]=errorStyle;
    }
  }
  try {
    for (int i=0; i < contents.length; i++) {
      if (contents[i] != null)       doc.insertString(doc.getLength(),contents[i],styles[i]);
    }
  }
 catch (  BadLocationException ble) {
    MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
    return false;
  }
  changed=true;
  colourCode();
  generated=true;
  nsLabel.setText(""String_Node_Str"");
  frame.repaint();
  return true;
}","boolean generateCode(){
  fbpMode=false;
  langLabel=diag.diagLang.label;
  gl=diag.diagLang;
  changed=true;
  diag.fCPArr[DrawFBP.COMPONENT]=driver.new FileChooserParms(diag.diagLang.srcDirProp,""String_Node_Str"" + diag.diagLang.showLangs() + ""String_Node_Str"",diag.diagLang.suggExtn,diag.diagLang.filter,""String_Node_Str"" + diag.diagLang.showLangs() + ""String_Node_Str""+ diag.diagLang.showSuffixes());
  diag.fCPArr[DrawFBP.GENCODE]=driver.new FileChooserParms(diag.diagLang.netDirProp,""String_Node_Str"",""String_Node_Str"" + diag.diagLang.suggExtn,diag.diagLang.filter,diag.diagLang.label);
  String component=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  String initialize=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  String _port=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  String sDO=(langLabel.equals(""String_Node_Str"")) ? ""String_Node_Str"" : ""String_Node_Str"";
  frame.setTitle(""String_Node_Str"" + diag.diagFile.getName());
  frame.setJMenuBar(createMenuBar());
  BufferedImage image=driver.loadImage(""String_Node_Str"");
  frame.setIconImage(image);
  String code=""String_Node_Str"";
  portNames=new HashSet<String>();
  blocklist=new HashMap<String,Integer>();
  ext=""String_Node_Str"";
  Style[] styles=new Style[20];
  for (  Block block : diag.blocks.values()) {
    if (block instanceof ExtPortBlock) {
      ext=""String_Node_Str"";
      if (block.description == null || block.description.equals(""String_Node_Str"")) {
        block.description=""String_Node_Str"";
        block.description=makeUniqueDesc(block.description);
      }
    }
  }
  if (langLabel.equals(""String_Node_Str"")) {
    packageName=driver.properties.get(""String_Node_Str"");
    if (packageName == null) {
      packageName=(String)MyOptionPane.showInputDialog(frame,""String_Node_Str"",null);
      packageName=packageName.trim();
      driver.properties.put(""String_Node_Str"",packageName);
      driver.propertiesChanged=true;
    }
  }
  String[] contents;
  if (langLabel.equals(""String_Node_Str"")) {
    contents=new String[1];
    contents[0]=generateJSON();
    styles[0]=normalStyle;
  }
 else {
    contents=new String[20];
    if (langLabel.equals(""String_Node_Str"")) {
      contents[0]=""String_Node_Str"";
      contents[1]=packageName + ""String_Node_Str"";
    }
 else     contents[0]=""String_Node_Str"";
    contents[2]=""String_Node_Str"";
    if (langLabel.equals(""String_Node_Str""))     contents[2]+=""String_Node_Str"";
    if (ext.equals(""String_Node_Str""))     contents[3]=genMetadata(langLabel) + ""String_Node_Str"";
 else     contents[3]=""String_Node_Str"";
    contents[4]=""String_Node_Str"";
    contents[5]=diag.title;
    if (langLabel.equals(""String_Node_Str""))     contents[6]=""String_Node_Str"";
 else     contents[6]=""String_Node_Str"";
    contents[7]=ext;
    if (langLabel.equals(""String_Node_Str""))     contents[8]=""String_Node_Str"";
 else     contents[8]=""String_Node_Str"";
    if (diag.desc == null)     diag.desc=""String_Node_Str"";
    contents[9]=""String_Node_Str"" + diag.desc + ""String_Node_Str"";
    if (langLabel.equals(""String_Node_Str""))     contents[10]=""String_Node_Str"";
 else     contents[10]=""String_Node_Str"";
    styles[0]=normalStyle;
    styles[1]=packageNameStyle;
    styles[2]=baseStyle;
    styles[3]=packageNameStyle;
    styles[4]=normalStyle;
    styles[5]=packageNameStyle;
    styles[6]=normalStyle;
    styles[7]=packageNameStyle;
    styles[8]=normalStyle;
    styles[9]=packageNameStyle;
    styles[10]=normalStyle;
    for (    Block block : diag.blocks.values()) {
      String t;
      if (block instanceof ComponentBlock) {
        if (block.description == null) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
          error=true;
          return false;
        }
        String s=cleanDesc(block);
        String c=cleanComp(block);
        descArray.put(new Integer(block.id),s);
        if (!block.multiplex)         code+=genComp(s,c,langLabel) + ""String_Node_Str"";
 else {
          if (block.mpxfactor == null) {
            String d=(String)MyOptionPane.showInputDialog(frame,""String_Node_Str"" + ""String_Node_Str"" + block.description + ""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
            if (d == null || d.equals(""String_Node_Str"")) {
              block.mpxfactor=""String_Node_Str"";
              error=true;
            }
 else             block.mpxfactor=d;
            diag.changed=true;
          }
          frame.repaint();
          if (block.mpxfactor != null) {
            code+=""String_Node_Str"" + compress(s) + ""String_Node_Str""+ block.mpxfactor+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ s+ ""String_Node_Str"";
          }
          code+=""String_Node_Str"" + compress(s) + ""String_Node_Str"";
          code+=genCompMpx(s,c,langLabel) + ""String_Node_Str"";
          if (c.equals(""String_Node_Str"")) {
            code+=""String_Node_Str"";
          }
          code+=""String_Node_Str"";
        }
      }
      if (block instanceof ExtPortBlock) {
        ExtPortBlock eb=(ExtPortBlock)block;
        String s=""String_Node_Str"";
        if (block.type.equals(Block.Types.EXTPORT_IN_BLOCK)) {
          s=""String_Node_Str"";
          if (eb.substreamSensitive)           t=""String_Node_Str"";
 else           t=""String_Node_Str"";
        }
 else         if (block.type.equals(Block.Types.EXTPORT_OUT_BLOCK)) {
          s=""String_Node_Str"";
          if (eb.substreamSensitive)           t=""String_Node_Str"";
 else           t=""String_Node_Str"";
        }
 else {
          s=""String_Node_Str"";
          t=""String_Node_Str"";
        }
        s=makeUniqueDesc(s);
        if (t.toLowerCase().endsWith(""String_Node_Str""))         t=t.substring(0,t.length() - 6);
        code+=genComp(s,t,langLabel) + ""String_Node_Str"";
        code+=initialize + ""String_Node_Str"" + s+ ""String_Node_Str""+ component+ ""String_Node_Str""+ s+ ""String_Node_Str""+ _port+ ""String_Node_Str"";
      }
      if (block instanceof IIPBlock)       descArray.put(new Integer(block.id),block.description);
    }
    for (    Arrow arrow : diag.arrows.values()) {
      Block from=diag.blocks.get(new Integer(arrow.fromId));
      Arrow a2=arrow.findTerminalArrow();
      if (a2 == null)       continue;
      Block to=diag.blocks.get(new Integer(a2.toId));
      if (to == null) {
        MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
        break;
      }
      if (from == null || to == null || from instanceof FileBlock || from instanceof ReportBlock || from instanceof LegendBlock || to instanceof FileBlock || to instanceof ReportBlock || to instanceof LegendBlock)       continue;
      if (!getPortNames(arrow))       return false;
      frame.repaint();
      String fromDesc=descArray.get(new Integer(arrow.fromId));
      String toDesc=descArray.get(new Integer(a2.toId));
      frame.repaint();
      String cap=""String_Node_Str"";
      if (arrow.capacity > 0)       cap=""String_Node_Str"" + arrow.capacity;
      if (from instanceof ComponentBlock && to instanceof ComponentBlock) {
        if (!arrow.endsAtLine && checkDupPort(dnPort,to)) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"" + dnPort);
          error=true;
        }
        if (checkDupPort(upPort,from)) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"" + upPort);
          error=true;
        }
        if (from.multiplex) {
          code+=""String_Node_Str"" + compress(fromDesc) + ""String_Node_Str"";
          code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ fromDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
          if (arrow.dropOldest)           code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
        }
 else         if (to.multiplex) {
          code+=""String_Node_Str"" + compress(toDesc) + ""String_Node_Str"";
          code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
          if (arrow.dropOldest)           code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
        }
 else {
          code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
          if (arrow.dropOldest)           code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
        }
      }
 else       if (from instanceof IIPBlock && to instanceof ComponentBlock) {
        if (!arrow.endsAtLine && checkDupPort(dnPort,to)) {
          MyOptionPane.showMessageDialog(frame,""String_Node_Str"" + dnPort);
          error=true;
        }
        code+=initialize + ""String_Node_Str"" + q(fromDesc)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
      }
      if (from instanceof ExtPortBlock) {
        code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(dnPort)+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
        if (arrow.dropOldest)         code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
      }
 else       if (to instanceof ExtPortBlock) {
        code+=genConnect(arrow) + ""String_Node_Str"" + component+ ""String_Node_Str""+ q(fromDesc)+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ q(upPort)+ ""String_Node_Str""+ component+ ""String_Node_Str""+ toDesc+ ""String_Node_Str""+ _port+ ""String_Node_Str""+ ""String_Node_Str""+ cap+ ""String_Node_Str"";
        if (arrow.dropOldest)         code+=""String_Node_Str"" + arrow.id + ""String_Node_Str""+ sDO+ ""String_Node_Str"";
      }
    }
    if (ext.equals(""String_Node_Str"")) {
      String s=diag.title;
      int i=s.indexOf(""String_Node_Str"");
      if (i > -1)       s=s.substring(0,i);
      code+=""String_Node_Str"";
      if (langLabel.equals(""String_Node_Str""))       code+=""String_Node_Str"" + ""String_Node_Str"" + s + ""String_Node_Str"";
 else       code+=""String_Node_Str"" + ""String_Node_Str"" + s + ""String_Node_Str"";
    }
    code+=""String_Node_Str"";
    int sno=11;
    contents[sno]=code;
    styles[sno]=normalStyle;
    sno++;
    contents[sno]=""String_Node_Str"";
    styles[sno]=normalStyle;
    sno++;
    if (error) {
      contents[sno]=""String_Node_Str"" + ""String_Node_Str"";
      styles[sno]=errorStyle;
    }
  }
  try {
    for (int i=0; i < contents.length; i++) {
      if (contents[i] != null)       doc.insertString(doc.getLength(),contents[i],styles[i]);
    }
  }
 catch (  BadLocationException ble) {
    MyOptionPane.showMessageDialog(frame,""String_Node_Str"");
    return false;
  }
  changed=true;
  colourCode();
  generated=true;
  nsLabel.setText(""String_Node_Str"");
  frame.repaint();
  return true;
}",0.5576487005058434
170252,"int testMatch(String port,String type){
  boolean input=(type.indexOf(""String_Node_Str"") > -1 || type.indexOf(""String_Node_Str"") > -1);
  boolean output=(type.indexOf(""String_Node_Str"") > -1);
  if (!input && !output) {
    MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + port + ""String_Node_Str"");
    return 1;
  }
  for (  Arrow arrow : diag.arrows.values()) {
    if (arrow.endsAtLine)     continue;
    if (id == arrow.toId && arrow.downStreamPort != null && stem(arrow.downStreamPort).equals(port))     if (input)     return 0;
 else     return 1;
    if (id == arrow.fromId && arrow.upStreamPort != null && stem(arrow.upStreamPort).equals(port))     if (output)     return 0;
 else     return 1;
  }
  if (input)   return 3;
 else   if (type.indexOf(""String_Node_Str"") > -1)   return 2;
 else   return 1;
}","int testMatch(String port,String type){
  boolean input=(type.indexOf(""String_Node_Str"") > -1 || type.indexOf(""String_Node_Str"") > -1);
  boolean output=(type.indexOf(""String_Node_Str"") > -1);
  if (!input && !output) {
    MyOptionPane.showMessageDialog(driver.frame,""String_Node_Str"" + port + ""String_Node_Str"");
    return 1;
  }
  for (  Arrow arrow : diag.arrows.values()) {
    Arrow arr=arrow.findTerminalArrow();
    if (id == arr.toId && arr.downStreamPort != null && stem(arr.downStreamPort).equals(port))     if (input)     return 0;
 else     return 1;
    if (id == arrow.fromId && arrow.upStreamPort != null && stem(arrow.upStreamPort).equals(port))     if (output)     return 0;
 else     return 1;
  }
  if (input)   return 3;
 else   if (type.indexOf(""String_Node_Str"") > -1)   return 2;
 else   return 1;
}",0.955837870538415
170253,"@SideOnly(Side.CLIENT) @Override public IPoint3D getItemRenderOffset(){
  return new Point3D(-1,-1,-1);
}","@SideOnly(Side.CLIENT) @Override public IPoint3D getItemRenderOffset(){
  return new Point3D(-2,0,0);
}",0.9615384615384616
170254,"private Skin downloadSkin(String name,int serverId) throws InterruptedException {
  long startTime=System.currentTimeMillis();
  long maxRate=5;
  String downloadUrl=""String_Node_Str"";
  if (!StringUtils.isNullOrEmpty(name)) {
    downloadUrl+=""String_Node_Str"" + name;
  }
 else {
    downloadUrl+=""String_Node_Str"" + String.valueOf(serverId);
  }
  Skin skin=null;
  InputStream in=null;
  String data=null;
  try {
    in=new URL(downloadUrl).openStream();
    skin=SkinIOUtils.loadSkinFromStream(new BufferedInputStream(in));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    IOUtils.closeQuietly(in);
  }
  long waitTime=maxRate - (System.currentTimeMillis() - startTime);
  if (waitTime > 0) {
  }
  if (skin != null) {
    skin.serverId=serverId;
  }
 else {
    ModLogger.log(String.format(""String_Node_Str"",serverId));
  }
  return skin;
}","private Skin downloadSkin(String name,int serverId) throws InterruptedException {
  long startTime=System.currentTimeMillis();
  long maxRate=5;
  String downloadUrl=""String_Node_Str"";
  if (!StringUtils.isNullOrEmpty(name)) {
    downloadUrl+=""String_Node_Str"" + name;
  }
 else {
    downloadUrl+=""String_Node_Str"" + String.valueOf(serverId);
  }
  Skin skin=null;
  InputStream in=null;
  ByteArrayInputStream byteIn=null;
  String data=null;
  try {
    in=new URL(downloadUrl).openStream();
    byte[] skinData=IOUtils.toByteArray(in);
    byteIn=new ByteArrayInputStream(skinData);
    skin=SkinIOUtils.loadSkinFromStream(byteIn);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    IOUtils.closeQuietly(byteIn);
    IOUtils.closeQuietly(in);
  }
  long waitTime=maxRate - (System.currentTimeMillis() - startTime);
  if (waitTime > 0) {
  }
  if (skin != null) {
    skin.serverId=serverId;
  }
 else {
    ModLogger.log(String.format(""String_Node_Str"",serverId));
  }
  return skin;
}",0.8871224165341812
170255,"private void sendGlobalDatabaseSkinToClient(SkinRequestMessage requestMessage){
  ISkinIdentifier identifier=requestMessage.getSkinIdentifier();
synchronized (cacheMapGlobalLink) {
    if (!cacheMapGlobalLink.containsKey(identifier.getSkinGlobalId())) {
      messageWaitQueue.add(requestMessage);
      SkinCacheGlobal.INSTANCE.downloadSkin(identifier);
    }
 else {
      sendGlobalSkinToPlayer(requestMessage);
    }
  }
}","private void sendGlobalDatabaseSkinToClient(SkinRequestMessage requestMessage){
  Skin skin=cacheGlobal.get(requestMessage,true);
  if (skin != null) {
    sendSkinToClient(skin,requestMessage);
  }
 else {
synchronized (messageWaitQueueLock) {
      messageWaitQueue.add(requestMessage);
    }
  }
}",0.3691460055096419
170256,"private void processNextMessage(){
synchronized (messageQueue) {
    if (messageQueue.size() > 0) {
      processMessage(messageQueue.get(0));
      messageQueue.remove(0);
    }
  }
}","private void processNextMessage(){
synchronized (messageQueueLock) {
    if (messageQueue.size() > 0) {
      processMessage(messageQueue.get(0));
      messageQueue.remove(0);
    }
  }
}",0.989247311827957
170257,"@Override public void run(){
  Thread thisThread=Thread.currentThread();
  ModLogger.log(""String_Node_Str"");
  while (serverSkinThread == thisThread) {
    try {
      thisThread.sleep(10);
    }
 catch (    InterruptedException e) {
    }
    cacheLocalDatabase.doSkinLoading();
    processMessageQueue();
  }
  ModLogger.log(""String_Node_Str"");
}","@Override public void run(){
  Thread thisThread=Thread.currentThread();
  ModLogger.log(""String_Node_Str"");
  while (serverSkinThread == thisThread) {
    try {
      thisThread.sleep(10);
    }
 catch (    InterruptedException e) {
    }
    cacheLocalDatabase.doSkinLoading();
    cacheLocalFile.doSkinLoading();
    cacheGlobal.doSkinLoading();
    processMessageQueue();
  }
  ModLogger.log(""String_Node_Str"");
}",0.9098039215686274
170258,"private void sendLocalFileSkinToClient(SkinRequestMessage requestMessage){
  ISkinIdentifier identifier=requestMessage.getSkinIdentifier();
synchronized (cacheMapFileLink) {
    if (!cacheMapFileLink.containsKey(identifier.getSkinLibraryFile())) {
      Skin skin=null;
      skin=SkinIOUtils.loadSkinFromFileName(identifier.getSkinLibraryFile().getFullName() + SkinIOUtils.SKIN_FILE_EXTENSION);
      if (skin != null) {
        cacheLocalDatabase.add(skin);
        cacheMapFileLink.put(identifier.getSkinLibraryFile(),skin.lightHash());
      }
 else {
        ModLogger.log(Level.ERROR,String.format(""String_Node_Str"",String.valueOf(identifier.getSkinLibraryFile().getFullName() + SkinIOUtils.SKIN_FILE_EXTENSION)));
      }
    }
    if (cacheMapFileLink.containsKey(identifier.getSkinLibraryFile())) {
      int id=cacheMapFileLink.get(identifier.getSkinLibraryFile());
      SkinIdentifier newIdentifier=new SkinIdentifier(id,requestMessage.getSkinIdentifier().getSkinLibraryFile(),0,requestMessage.getSkinIdentifier().getSkinType());
      Skin skin=cacheLocalDatabase.get(newIdentifier,false);
      if (skin != null) {
        skin.requestId=(SkinIdentifier)identifier;
        PacketHandler.networkWrapper.sendTo(new MessageServerSendSkinData((SkinIdentifier)identifier,getFullIdentifier(skin,identifier),skin),requestMessage.getPlayer());
      }
 else {
        ModLogger.log(Level.WARN,""String_Node_Str"" + id);
      }
    }
  }
}","private void sendLocalFileSkinToClient(SkinRequestMessage requestMessage){
  Skin skin=cacheLocalFile.get(requestMessage,true);
  if (skin != null) {
    sendSkinToClient(skin,requestMessage);
  }
 else {
synchronized (messageWaitQueueLock) {
      messageWaitQueue.add(requestMessage);
    }
  }
}",0.1504018369690011
170259,"public void clearAll(){
  cacheLocalDatabase.clear();
synchronized (cacheMapFileLink) {
synchronized (cacheMapGlobalLink) {
      cacheMapFileLink.clear();
      cacheMapGlobalLink.clear();
      messageQueue.clear();
    }
  }
}","public void clearAll(){
  cacheLocalDatabase.clear();
  cacheLocalFile.clear();
  cacheGlobal.clear();
}",0.4804804804804805
170260,"public int globalLinkSize(){
synchronized (cacheMapGlobalLink) {
    return cacheMapGlobalLink.size();
  }
}","public int globalLinkSize(){
  return cacheGlobal.size();
}",0.7065868263473054
170261,"public SkinIdentifier getFullIdentifier(Skin skin,ISkinIdentifier skinIdentifier){
  int localId=skin.lightHash();
  ISkinType skinType=skin.getSkinType();
  ILibraryFile libraryFile=null;
  int globalId=0;
  if (cacheMapFileLink.containsValue(skin.lightHash())) {
    libraryFile=cacheMapFileLink.getBackward(skin.lightHash());
  }
  if (cacheMapGlobalLink.containsValue(skin.lightHash())) {
    globalId=cacheMapGlobalLink.getBackward(skin.lightHash());
  }
  return new SkinIdentifier(localId,libraryFile,globalId,skinType);
}","public SkinIdentifier getFullIdentifier(Skin skin,ISkinIdentifier skinIdentifier){
  int localId=skin.lightHash();
  ISkinType skinType=skin.getSkinType();
  ILibraryFile libraryFile=null;
  int globalId=0;
  try {
    if (cacheLocalFile.containsValue(skin.lightHash())) {
      libraryFile=cacheLocalFile.getBackward(skin.lightHash());
    }
    if (cacheGlobal.containsValue(skin.lightHash())) {
      globalId=cacheGlobal.getBackward(skin.lightHash());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SkinIdentifier(localId,libraryFile,globalId,skinType);
}",0.855098389982111
170262,"public void clearFileNameIdLink(LibraryFile file){
  cacheMapFileLink.remove(file);
}","public void clearFileNameIdLink(LibraryFile libraryFile){
  cacheLocalFile.remove(libraryFile);
}",0.8461538461538461
170263,"public void clientRequestEquipmentData(ISkinIdentifier skinIdentifier,EntityPlayerMP player){
  SkinRequestMessage queueMessage=new SkinRequestMessage(skinIdentifier,player);
synchronized (messageQueue) {
    messageQueue.add(queueMessage);
  }
}","public void clientRequestEquipmentData(ISkinIdentifier skinIdentifier,EntityPlayerMP player){
  SkinRequestMessage queueMessage=new SkinRequestMessage(skinIdentifier,player);
synchronized (messageQueueLock) {
    messageQueue.add(queueMessage);
  }
}",0.9919354838709676
170264,"@Deprecated public void addEquipmentDataToCache(Skin skin,String fileName){
  try {
    skin.lightHash();
  }
 catch (  Exception e) {
    ModLogger.log(Level.ERROR,String.format(""String_Node_Str"",fileName));
    return;
  }
  addEquipmentDataToCache(skin,new LibraryFile(fileName));
}","@Deprecated public void addEquipmentDataToCache(Skin skin,String fileName){
  throw new NotImplementedException();
}",0.4887780548628428
170265,"public int fileLinkSize(){
synchronized (cacheMapFileLink) {
    return cacheMapFileLink.size();
  }
}","public int fileLinkSize(){
  return cacheLocalFile.size();
}",0.691358024691358
170266,"public CommonSkinCache(){
  cacheLocalDatabase=new SkinCacheLocalDatabase(this);
  cacheMapFileLink=new BidirectionalHashMap<ILibraryFile,Integer>();
  cacheMapGlobalLink=new BidirectionalHashMap<Integer,Integer>();
}","public CommonSkinCache(){
  cacheLocalDatabase=new SkinCacheLocalDatabase(this);
  cacheLocalFile=new SkinCacheLocalFile(cacheLocalDatabase);
  cacheGlobal=new SkinCacheGlobal(cacheLocalDatabase);
}",0.6843373493975904
170267,"private void sendLocalDatabaseSkinToClient(SkinRequestMessage requestMessage){
  Skin skin=cacheLocalDatabase.get(requestMessage,true);
  if (skin != null) {
    SkinIdentifier identifier=(SkinIdentifier)requestMessage.getSkinIdentifier();
    skin.requestId=identifier;
    PacketHandler.networkWrapper.sendTo(new MessageServerSendSkinData(identifier,getFullIdentifier(skin,identifier),skin),requestMessage.getPlayer());
  }
 else {
    messageWaitQueue.add(requestMessage);
  }
}","private void sendLocalDatabaseSkinToClient(SkinRequestMessage requestMessage){
  Skin skin=cacheLocalDatabase.get(requestMessage,true);
  if (skin != null) {
    sendSkinToClient(skin,requestMessage);
  }
 else {
synchronized (messageWaitQueueLock) {
      messageWaitQueue.add(requestMessage);
    }
  }
}",0.4625158831003812
170268,"@Override public void itemExpired(Skin mapItem){
  if (mapItem == null) {
    return;
  }
synchronized (cacheMapFileLink) {
synchronized (cacheMapGlobalLink) {
      int skinId=mapItem.lightHash();
      if (cacheMapFileLink.containsValue(skinId)) {
        ILibraryFile libraryFile=cacheMapFileLink.getBackward(skinId);
        cacheMapFileLink.remove(libraryFile);
      }
      if (cacheMapGlobalLink.containsValue(skinId)) {
        int globalId=cacheMapGlobalLink.getBackward(skinId);
        cacheMapGlobalLink.remove(globalId);
      }
    }
  }
}","@Override public void itemExpired(Skin mapItem){
  if (mapItem == null) {
    return;
  }
  int skinId=mapItem.lightHash();
  if (cacheLocalFile.containsValue(skinId)) {
    ILibraryFile libraryFile=cacheLocalFile.getBackward(skinId);
    cacheLocalFile.remove(libraryFile);
  }
  if (cacheGlobal.containsValue(skinId)) {
    int globalId=cacheGlobal.getBackward(skinId);
    cacheGlobal.remove(globalId);
  }
}",0.2279792746113989
170269,"public Skin getSkin(ISkinIdentifier identifier){
  return cacheLocalDatabase.get(identifier,false);
}","public Skin getSkin(ISkinIdentifier identifier){
  if (identifier.hasLocalId()) {
    return cacheLocalDatabase.get(identifier,false);
  }
 else   if (identifier.hasLibraryFile()) {
    return cacheLocalFile.get(identifier,false);
  }
 else   if (identifier.hasGlobalId()) {
    return cacheGlobal.get(identifier,false);
  }
 else {
    ModLogger.log(Level.ERROR,""String_Node_Str"" + identifier.toString());
    return null;
  }
}",0.3811320754716981
170270,"/** 
 * Returns a skin if it is in the cache. If not the skin will be loaded by another thread. 
 */
public Skin softGetSkin(ISkinIdentifier identifier){
  return cacheLocalDatabase.get(identifier,true);
}","/** 
 * Returns a skin if it is in the cache. If not the skin will be loaded by another thread. 
 */
public Skin softGetSkin(ISkinIdentifier identifier){
  if (identifier.hasLocalId()) {
    return cacheLocalDatabase.get(identifier,true);
  }
 else   if (identifier.hasLibraryFile()) {
    return cacheLocalFile.get(identifier,true);
  }
 else   if (identifier.hasGlobalId()) {
    return cacheGlobal.get(identifier,true);
  }
 else {
    ModLogger.log(Level.ERROR,""String_Node_Str"" + identifier.toString());
    return null;
  }
}",0.5244565217391305
170271,"public SkinCacheGlobal(){
  downloadingSet=new HashSet<Integer>();
  executorSkinDownloader=Executors.newFixedThreadPool(2);
  completionServiceSkinDownloader=new ExecutorCompletionService<Skin>(executorSkinDownloader);
  FMLCommonHandler.instance().bus().register(this);
}","public SkinCacheGlobal(SkinCacheLocalDatabase cacheLocalDatabase){
  this.cacheLocalDatabase=cacheLocalDatabase;
  cacheMapFileLink=new BidirectionalHashMap<Integer,Integer>();
  downloadingSet=new HashSet<Integer>();
  executorSkinDownloader=Executors.newFixedThreadPool(2);
  completionServiceSkinDownloader=new ExecutorCompletionService<Skin>(executorSkinDownloader);
}",0.6170542635658914
170272,"public void downloadSkin(ISkinIdentifier identifier){
synchronized (downloadingSet) {
    if (!downloadingSet.contains(identifier.getSkinGlobalId())) {
      downloadingSet.add(identifier.getSkinGlobalId());
      completionServiceSkinDownloader.submit(new DownloadSkinCallable(null,identifier.getSkinGlobalId()));
    }
  }
}","private void downloadSkin(ISkinIdentifier identifier){
synchronized (downloadingSet) {
    if (!downloadingSet.contains(identifier.getSkinGlobalId())) {
      downloadingSet.add(identifier.getSkinGlobalId());
      completionServiceSkinDownloader.submit(new DownloadSkinCallable(null,identifier.getSkinGlobalId()));
    }
  }
}",0.9831546707503828
170273,"public void add(Skin skin){
  addSkinDataToCache(skin,skin.lightHash());
}","public void add(Skin skin){
synchronized (cacheMapLock) {
    addSkinDataToCache(skin,skin.lightHash());
  }
}",0.8043478260869565
170274,"public void clear(){
synchronized (cacheMapDatabase) {
    cacheMapDatabase.clear();
  }
}","public void clear(){
synchronized (cacheMapLock) {
    cacheMapDatabase.clear();
  }
}",0.9318181818181818
170275,"public int size(){
synchronized (cacheMapDatabase) {
    return cacheMapDatabase.size();
  }
}","public int size(){
synchronized (cacheMapLock) {
    return cacheMapDatabase.size();
  }
}",0.9347826086956522
170276,"public Skin get(SkinRequestMessage requestMessage,boolean softLoad){
  int skinId=requestMessage.getSkinIdentifier().getSkinLocalId();
synchronized (cacheMapDatabase) {
    if (!cacheMapDatabase.containsKey(skinId)) {
      if (softLoad) {
synchronized (skinLoadQueue) {
          skinLoadQueue.add(requestMessage);
        }
        return null;
      }
 else {
        load(skinId);
      }
    }
    if (cacheMapDatabase.containsKey(skinId)) {
      return cacheMapDatabase.get(skinId);
    }
 else {
      if (requestMessage.getPlayer() != null) {
        ModLogger.log(Level.ERROR,""String_Node_Str"" + String.valueOf(skinId) + ""String_Node_Str""+ requestMessage.getPlayer().getCommandSenderName()+ ""String_Node_Str"");
      }
 else {
        ModLogger.log(Level.ERROR,""String_Node_Str"" + String.valueOf(skinId) + ""String_Node_Str"");
      }
      return null;
    }
  }
}","public Skin get(SkinRequestMessage requestMessage,boolean softLoad){
  int skinId=requestMessage.getSkinIdentifier().getSkinLocalId();
synchronized (cacheMapLock) {
    if (!cacheMapDatabase.containsKey(skinId)) {
      if (softLoad) {
synchronized (skinLoadQueueLock) {
          skinLoadQueue.add(requestMessage);
        }
        return null;
      }
 else {
        load(skinId);
      }
    }
    if (cacheMapDatabase.containsKey(skinId)) {
      return cacheMapDatabase.get(skinId);
    }
 else {
      if (requestMessage.getPlayer() != null) {
        ModLogger.log(Level.ERROR,""String_Node_Str"" + String.valueOf(skinId) + ""String_Node_Str""+ requestMessage.getPlayer().getCommandSenderName()+ ""String_Node_Str"");
      }
 else {
        ModLogger.log(Level.ERROR,""String_Node_Str"" + String.valueOf(skinId) + ""String_Node_Str"");
      }
      return null;
    }
  }
}",0.9908466819221968
170277,"public void doSkinLoading(){
synchronized (cacheMapDatabase) {
synchronized (skinLoadQueue) {
      if (skinLoadQueue.size() > 0) {
        SkinRequestMessage requestMessage=skinLoadQueue.get(0);
        Skin skin=load(requestMessage.getSkinIdentifier().getSkinLocalId());
        if (skin != null) {
          CommonSkinCache.INSTANCE.onLocalDatabaseSkinLoaded(skin,requestMessage);
        }
        skinLoadQueue.remove(0);
      }
    }
  }
}","public void doSkinLoading(){
synchronized (cacheMapLock) {
synchronized (skinLoadQueueLock) {
      if (skinLoadQueue.size() > 0) {
        SkinRequestMessage requestMessage=skinLoadQueue.get(0);
        Skin skin=load(requestMessage.getSkinIdentifier().getSkinLocalId());
        if (skin != null) {
          CommonSkinCache.INSTANCE.onSkinLoaded(skin,requestMessage);
        }
        skinLoadQueue.remove(0);
      }
    }
  }
}",0.9670079635949944
170278,"private boolean isEnabled(){
  try {
    Class<?> c=Class.forName(""String_Node_Str"");
    Object object=c.getMethod(""String_Node_Str"").invoke(null);
    if (object != null && object instanceof Boolean) {
      return (boolean)object;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","private boolean isEnabled(){
  try {
    Class<?> c=Class.forName(""String_Node_Str"");
    Object object=c.getMethod(""String_Node_Str"").invoke(null);
    if (object != null && object instanceof Boolean) {
      return (Boolean)object;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}",0.9968253968253968
170279,"public boolean isVisible(){
  if (isModLoaded()) {
    if (!isEnabled()) {
      return false;
    }
    try {
      Class<?> c=Class.forName(""String_Node_Str"");
      Object object=c.getMethod(""String_Node_Str"").invoke(null);
      if (object != null && object instanceof Boolean) {
        return !(boolean)object;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return false;
}","public boolean isVisible(){
  if (isModLoaded()) {
    if (!isEnabled()) {
      return false;
    }
    try {
      Class<?> c=Class.forName(""String_Node_Str"");
      Object object=c.getMethod(""String_Node_Str"").invoke(null);
      if (object != null && object instanceof Boolean) {
        return !(Boolean)object;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return false;
}",0.9975728155339806
170280,"public GuiMannequin(InventoryPlayer invPlayer,TileEntityMannequin tileEntity){
  super(new ContainerMannequin(invPlayer,tileEntity),true,textureTabs);
  this.tileEntity=tileEntity;
  this.inventoryName=tileEntity.getInventoryName();
  tabInventory=new GuiMannequinTabInventory(0,this);
  tabRotations=new GuiMannequinTabRotations(1,this,inventoryName,tileEntity.getBipedRotations());
  tabOffset=new GuiMannequinTabOffset(2,this,inventoryName,tileEntity);
  tabSkinAndHair=new GuiMannequinTabSkinHair(3,this,tileEntity);
  tabTexture=new GuiMannequinTabTexture(4,this,tileEntity);
  tabExtraRenders=new GuiMannequinTabExtraRenders(5,this,inventoryName,tileEntity);
  tabList.add(tabInventory);
  tabList.add(tabRotations);
  tabList.add(tabOffset);
  tabList.add(tabSkinAndHair);
  tabList.add(tabTexture);
  tabList.add(tabExtraRenders);
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(0,0));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(16,0));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(32,0));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(48,0));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(64,0));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(80,0));
  tabController.setActiveTabIndex(activeTab);
  tabChanged();
}","public GuiMannequin(InventoryPlayer invPlayer,TileEntityMannequin tileEntity){
  super(new ContainerMannequin(invPlayer,tileEntity),true,textureTabs);
  this.tileEntity=tileEntity;
  this.inventoryName=tileEntity.getInventoryName();
  tabInventory=new GuiMannequinTabInventory(0,this);
  tabRotations=new GuiMannequinTabRotations(1,this,inventoryName,tileEntity.getBipedRotations());
  tabOffset=new GuiMannequinTabOffset(2,this,inventoryName,tileEntity);
  tabSkinAndHair=new GuiMannequinTabSkinHair(3,this,tileEntity);
  tabTexture=new GuiMannequinTabTexture(4,this,tileEntity);
  tabExtraRenders=new GuiMannequinTabExtraRenders(5,this,inventoryName,tileEntity);
  tabList.add(tabInventory);
  tabList.add(tabRotations);
  tabList.add(tabOffset);
  tabList.add(tabSkinAndHair);
  tabList.add(tabTexture);
  tabList.add(tabExtraRenders);
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(0,52));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(16,52));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(32,52));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(48,52));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(64,52));
  tabController.addTab(new GuiTab(GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str"")).setIconLocation(80,52));
  tabController.setActiveTabIndex(activeTab);
  tabChanged();
}",0.994578313253012
170281,"@Override public void initGui(int xPos,int yPos,int width,int height){
  super.initGui(xPos,yPos,width,height);
  guiLoaded=false;
  resetOffsetButton=new GuiButtonExt(0,this.width / 2 + 27,25,50,18,GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str""));
  bipedOffsetXslider=new GuiCustomSlider(0,(int)((width / 2F) - (176 / 2F)) + 10,25,100,10,""String_Node_Str"",""String_Node_Str"",-1D,1D,0D,true,true,this);
  bipedOffsetYslider=new GuiCustomSlider(0,(int)((width / 2F) - (176 / 2F)) + 10,25 + 10,100,10,""String_Node_Str"",""String_Node_Str"",-1D,1D,0D,true,true,this);
  bipedOffsetZslider=new GuiCustomSlider(0,(int)((width / 2F) - (176 / 2F)) + 10,25 + 20,100,10,""String_Node_Str"",""String_Node_Str"",-1D,1D,0D,true,true,this);
  setSliderValue(bipedOffsetXslider,tileEntity.getOffsetX());
  setSliderValue(bipedOffsetYslider,tileEntity.getOffsetY());
  setSliderValue(bipedOffsetZslider,tileEntity.getOffsetZ());
  buttonList.add(resetOffsetButton);
  buttonList.add(bipedOffsetXslider);
  buttonList.add(bipedOffsetYslider);
  buttonList.add(bipedOffsetZslider);
  guiLoaded=true;
}","@Override public void initGui(int xPos,int yPos,int width,int height){
  super.initGui(xPos,yPos,width,height);
  guiLoaded=false;
  resetOffsetButton=new GuiButtonExt(0,0,TAB_HEIGHT - 18 - 8,50,18,GuiHelper.getLocalizedControlName(inventoryName,""String_Node_Str""));
  resetOffsetButton.width=fontRenderer.getStringWidth(resetOffsetButton.displayString) + fontRenderer.getStringWidth(""String_Node_Str"") * 4;
  resetOffsetButton.xPosition=this.width / 2 - TAB_WIDTH / 2 + TAB_WIDTH - 10 - resetOffsetButton.width;
  bipedOffsetXslider=new GuiCustomSlider(0,(int)((width / 2F) - (TAB_WIDTH / 2F)) + 10,25,TAB_WIDTH - 20,10,""String_Node_Str"",""String_Node_Str"",-1D,1D,0D,true,true,this);
  bipedOffsetYslider=new GuiCustomSlider(0,(int)((width / 2F) - (TAB_WIDTH / 2F)) + 10,25 + 12,TAB_WIDTH - 20,10,""String_Node_Str"",""String_Node_Str"",-1D,1D,0D,true,true,this);
  bipedOffsetZslider=new GuiCustomSlider(0,(int)((width / 2F) - (TAB_WIDTH / 2F)) + 10,25 + 24,TAB_WIDTH - 20,10,""String_Node_Str"",""String_Node_Str"",-1D,1D,0D,true,true,this);
  setSliderValue(bipedOffsetXslider,tileEntity.getOffsetX());
  setSliderValue(bipedOffsetYslider,tileEntity.getOffsetY());
  setSliderValue(bipedOffsetZslider,tileEntity.getOffsetZ());
  buttonList.add(resetOffsetButton);
  buttonList.add(bipedOffsetXslider);
  buttonList.add(bipedOffsetYslider);
  buttonList.add(bipedOffsetZslider);
  guiLoaded=true;
}",0.8480707395498392
170282,"@Override public void drawBackgroundLayer(float partialTickTime,int mouseX,int mouseY){
  Rectangle_I_2D rec=new Rectangle_I_2D(0,0,176,62);
  rec.x=width / 2 - rec.width / 2;
  GuiUtils.drawContinuousTexturedBox(rec.x,rec.y,0,200,rec.width,rec.height,38,38,4,zLevel);
}","@Override public void drawBackgroundLayer(float partialTickTime,int mouseX,int mouseY){
  Rectangle_I_2D rec=new Rectangle_I_2D(0,0,TAB_WIDTH,TAB_HEIGHT);
  rec.x=width / 2 - rec.width / 2;
  GuiUtils.drawContinuousTexturedBox(rec.x,rec.y,0,200,rec.width,rec.height,38,38,4,zLevel);
}",0.9530685920577616
170283,"@Override public void initGui(int xPos,int yPos,int width,int height){
  super.initGui(xPos,yPos,width,height);
  textureTypeList=new GuiDropDownList(0,width / 2 - 110,25,50,""String_Node_Str"",this);
  textureTypeList.addListItem(GuiHelper.getLocalizedControlName(tileEntity.getInventoryName(),""String_Node_Str""),TextureType.USER.toString(),true);
  textureTypeList.addListItem(GuiHelper.getLocalizedControlName(tileEntity.getInventoryName(),""String_Node_Str""),TextureType.URL.toString(),true);
  textureTypeList.setListSelectedIndex(tileEntity.getTextureType().ordinal());
  nameTextbox=new GuiTextField(fontRenderer,width / 2 - 110 + 55,25,165,14);
  nameTextbox.setMaxStringLength(200);
  if (tileEntity.getTextureType() == TextureType.USER) {
    if (tileEntity.getGameProfile() != null) {
      nameTextbox.setText(tileEntity.getGameProfile().getName());
    }
  }
 else {
    if (tileEntity.getImageUrl() != null) {
      nameTextbox.setText(tileEntity.getImageUrl());
    }
  }
  setNameButton=new GuiButtonExt(0,width / 2 + 60,45,50,14,GuiHelper.getLocalizedControlName(tileEntity.getInventoryName(),""String_Node_Str""));
  buttonList.add(textureTypeList);
  buttonList.add(setNameButton);
}","@Override public void initGui(int xPos,int yPos,int width,int height){
  super.initGui(xPos,yPos,width,height);
  textureTypeList=new GuiDropDownList(0,width / 2 - 110,25,50,""String_Node_Str"",this);
  textureTypeList.addListItem(GuiHelper.getLocalizedControlName(tileEntity.getInventoryName(),""String_Node_Str""),TextureType.USER.toString(),true);
  textureTypeList.addListItem(GuiHelper.getLocalizedControlName(tileEntity.getInventoryName(),""String_Node_Str""),TextureType.URL.toString(),true);
  textureTypeList.setListSelectedIndex(tileEntity.getTextureType().ordinal());
  nameTextbox=new GuiTextField(fontRenderer,width / 2 - 110 + 55,25,165,14);
  nameTextbox.setMaxStringLength(300);
  if (tileEntity.getTextureType() == TextureType.USER) {
    if (tileEntity.getGameProfile() != null) {
      nameTextbox.setText(tileEntity.getGameProfile().getName());
    }
  }
 else {
    if (tileEntity.getImageUrl() != null) {
      nameTextbox.setText(tileEntity.getImageUrl());
    }
  }
  setNameButton=new GuiButtonExt(0,width / 2 + 60,45,50,14,GuiHelper.getLocalizedControlName(tileEntity.getInventoryName(),""String_Node_Str""));
  setNameButton.width=fontRenderer.getStringWidth(setNameButton.displayString + ""String_Node_Str"");
  setNameButton.xPosition=width / 2 + TAB_WIDTH / 2 - setNameButton.width - 10;
  buttonList.add(textureTypeList);
  buttonList.add(setNameButton);
}",0.9292929292929292
170284,"@Override public void drawBackgroundLayer(float partialTickTime,int mouseX,int mouseY){
  Rectangle_I_2D rec=new Rectangle_I_2D(0,0,240,68);
  rec.x=width / 2 - rec.width / 2;
  GuiUtils.drawContinuousTexturedBox(rec.x,rec.y,0,200,rec.width,rec.height,38,38,4,zLevel);
}","@Override public void drawBackgroundLayer(float partialTickTime,int mouseX,int mouseY){
  Rectangle_I_2D rec=new Rectangle_I_2D(0,0,TAB_WIDTH,TAB_HEIGHT);
  rec.x=width / 2 - rec.width / 2;
  GuiUtils.drawContinuousTexturedBox(rec.x,rec.y,0,200,rec.width,rec.height,38,38,4,zLevel);
}",0.9530685920577616
170285,"public void skinAdded(ItemStack stack){
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stack);
  ISkinDye dye=skinPointer.getSkinDye();
  skinRemoved();
  updateLockedSlots(stack);
  putStackInSlot(45,stack.copy());
}","public void skinAdded(ItemStack stack){
  updateLockedSlots(stack);
  if (tileEntity.getWorldObj().isRemote) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stack);
  ISkinDye dye=skinPointer.getSkinDye();
  skinRemoved();
  updateLockedSlots(stack);
  putStackInSlot(45,stack.copy());
  putDyesInSlots();
  detectAndSendChanges();
}",0.778702163061564
170286,"private void updateLockedSlots(ItemStack stack){
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stack);
  ISkinDye dye=skinPointer.getSkinDye();
  for (int i=0; i < 8; i++) {
    if (dye.haveDyeInSlot(i)) {
      byte[] rgbt=dye.getDyeColour(i);
      ItemStack bottle=new ItemStack(ModItems.dyeBottle,1,1);
      PaintingHelper.setToolPaintColour(bottle,rgbt);
      PaintingHelper.setToolPaint(bottle,PaintType.getPaintTypeFormSKey(rgbt[3]));
      putStackInSlot(37 + i,bottle);
      ((SlotDyeBottle)getSlot(37 + i)).setLocked(true);
    }
 else {
      ((SlotDyeBottle)getSlot(37 + i)).setLocked(false);
    }
  }
}","/** 
 * Reads the input slot and locks dye slots that are in use.
 * @param stack
 */
private void updateLockedSlots(ItemStack stack){
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stack);
  ISkinDye dye=skinPointer.getSkinDye();
  for (int i=0; i < 8; i++) {
    if (dye.haveDyeInSlot(i)) {
      ModLogger.log(""String_Node_Str"" + i);
      ((SlotDyeBottle)getSlot(37 + i)).setLocked(true);
    }
 else {
      ModLogger.log(""String_Node_Str"" + i);
      ((SlotDyeBottle)getSlot(37 + i)).setLocked(false);
    }
  }
}",0.5421994884910486
170287,"public void dyeRemoved(int slotId){
  ItemStack skinStack=tileEntity.getStackInSlot(9);
  if (skinStack == null) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(skinStack);
  ISkinDye skinDye=skinPointer.getSkinDye();
  skinDye.removeDye(slotId);
  SkinNBTHelper.addSkinDataToStack(skinStack,skinPointer);
}","public void dyeRemoved(int slotId){
  ItemStack skinStack=getSlot(45).getStack();
  if (skinStack == null) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(skinStack);
  ISkinDye skinDye=skinPointer.getSkinDye();
  skinDye.removeDye(slotId);
  SkinNBTHelper.addSkinDataToStack(skinStack,skinPointer);
}",0.940828402366864
170288,"public void skinRemoved(){
  for (int i=0; i < 8; i++) {
    SlotDyeBottle slot=(SlotDyeBottle)getSlot(37 + i);
    if (!slot.isLocked()) {
      UtilPlayer.giveItem(invPlayer.player,getSlot(37 + i).getStack());
    }
 else {
      slot.setLocked(false);
    }
    putStackInSlot(37 + i,null);
  }
  putStackInSlot(45,null);
}","public void skinRemoved(){
  if (!tileEntity.getWorldObj().isRemote) {
    for (int i=0; i < 8; i++) {
      SlotDyeBottle slot=(SlotDyeBottle)getSlot(37 + i);
      if (!slot.isLocked()) {
        UtilPlayer.giveItem(invPlayer.player,getSlot(37 + i).getStack());
      }
 else {
        slot.setLocked(false);
      }
      putStackInSlot(37 + i,null);
    }
    putStackInSlot(45,null);
    detectAndSendChanges();
  }
  unlockedSlots();
}",0.8500651890482399
170289,"@Override public boolean canTakeStack(EntityPlayer player){
  if (!ConfigHandler.lockDyesOnSkins) {
    return false;
  }
  return true;
}","@Override public boolean canTakeStack(EntityPlayer player){
  return false;
}",0.7162790697674418
170290,"@Override public void dialogResult(AbstractGuiDialog dialog,DialogResult result){
  if (result == DialogResult.OK) {
    if (dialog instanceof GuiDialogNewFolder) {
      GuiDialogNewFolder newFolderDialog=(GuiDialogNewFolder)dialog;
      if (fileSwitchType == LibraryFileType.LOCAL) {
        File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),currentFolder);
        dir=new File(dir,newFolderDialog.getFolderName());
        if (!dir.exists()) {
          dir.mkdir();
        }
        reloadLocalLibrary();
        ModLogger.log(String.format(""String_Node_Str"",newFolderDialog.getFolderName(),currentFolder));
        ModLogger.log(""String_Node_Str"" + dir.getAbsolutePath());
      }
 else {
      }
    }
    if (dialog instanceof GuiDialogDelete) {
      GuiDialogDelete deleteDialog=(GuiDialogDelete)dialog;
      if (fileSwitchType == LibraryFileType.LOCAL) {
        boolean isFolder=deleteDialog.isFolder();
        String name=deleteDialog.getName();
        File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),currentFolder);
        if (deleteDialog.isFolder()) {
          dir=new File(dir,name + ""String_Node_Str"");
        }
 else {
          dir=new File(dir,name + SkinIOUtils.SKIN_FILE_EXTENSION);
        }
        if (dir.isDirectory() == isFolder) {
          ModLogger.log(""String_Node_Str"" + dir.getAbsolutePath());
          if (dir.exists()) {
            ModLogger.log(""String_Node_Str"" + dir.getAbsolutePath());
            try {
              FileUtils.deleteDirectory(dir);
              reloadLocalLibrary();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
      }
 else {
      }
    }
    if (dialog instanceof GuiDialogOverwrite) {
      GuiDialogOverwrite overwriteDialog=(GuiDialogOverwrite)dialog;
      MessageClientGuiLoadSaveArmour message;
      boolean clientLoad=false;
      boolean publicList=true;
      if (fileSwitchType == LibraryFileType.LOCAL && !mc.isIntegratedServerRunning()) {
        clientLoad=true;
      }
      if (fileSwitchType == LibraryFileType.SERVER_PRIVATE) {
        publicList=false;
      }
      if (clientLoad) {
        message=new MessageClientGuiLoadSaveArmour(overwriteDialog.getFileName(),currentFolder,LibraryPacketType.CLIENT_SAVE,false);
        PacketHandler.networkWrapper.sendToServer(message);
      }
 else {
        message=new MessageClientGuiLoadSaveArmour(overwriteDialog.getFileName(),currentFolder,LibraryPacketType.SERVER_SAVE,publicList);
        PacketHandler.networkWrapper.sendToServer(message);
      }
    }
  }
  super.dialogResult(dialog,result);
}","@Override public void dialogResult(AbstractGuiDialog dialog,DialogResult result){
  if (result == DialogResult.OK) {
    if (dialog instanceof GuiDialogNewFolder) {
      GuiDialogNewFolder newFolderDialog=(GuiDialogNewFolder)dialog;
      if (fileSwitchType == LibraryFileType.LOCAL) {
        File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),currentFolder);
        dir=new File(dir,newFolderDialog.getFolderName());
        if (!dir.exists()) {
          dir.mkdir();
        }
        reloadLocalLibrary();
        ModLogger.log(String.format(""String_Node_Str"",newFolderDialog.getFolderName(),currentFolder));
        ModLogger.log(""String_Node_Str"" + dir.getAbsolutePath());
      }
 else {
      }
    }
    if (dialog instanceof GuiDialogDelete) {
      GuiDialogDelete deleteDialog=(GuiDialogDelete)dialog;
      if (fileSwitchType == LibraryFileType.LOCAL) {
        boolean isFolder=deleteDialog.isFolder();
        String name=deleteDialog.getName();
        File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),currentFolder);
        if (deleteDialog.isFolder()) {
          dir=new File(dir,name + ""String_Node_Str"");
        }
 else {
          dir=new File(dir,name + SkinIOUtils.SKIN_FILE_EXTENSION);
        }
        if (dir.isDirectory() == isFolder) {
          if (dir.exists()) {
            if (isFolder) {
              try {
                FileUtils.deleteDirectory(dir);
                reloadLocalLibrary();
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
            }
 else {
              ClientSkinCache.INSTANCE.clearIdForFileName(currentFolder + deleteDialog.getName());
              dir.delete();
              reloadLocalLibrary();
            }
          }
        }
      }
 else {
      }
    }
    if (dialog instanceof GuiDialogOverwrite) {
      GuiDialogOverwrite overwriteDialog=(GuiDialogOverwrite)dialog;
      MessageClientGuiLoadSaveArmour message;
      boolean clientLoad=false;
      boolean publicList=true;
      if (fileSwitchType == LibraryFileType.LOCAL && !mc.isIntegratedServerRunning()) {
        clientLoad=true;
      }
      if (fileSwitchType == LibraryFileType.SERVER_PRIVATE) {
        publicList=false;
      }
      if (clientLoad) {
        message=new MessageClientGuiLoadSaveArmour(overwriteDialog.getFileName(),currentFolder,LibraryPacketType.CLIENT_SAVE,false);
        PacketHandler.networkWrapper.sendToServer(message);
      }
 else {
        message=new MessageClientGuiLoadSaveArmour(overwriteDialog.getFileName(),currentFolder,LibraryPacketType.SERVER_SAVE,publicList);
        PacketHandler.networkWrapper.sendToServer(message);
      }
      ClientSkinCache.INSTANCE.clearIdForFileName(currentFolder + overwriteDialog.getFileName());
    }
  }
  super.dialogResult(dialog,result);
}",0.8615328333638193
170291,"public void removeFileFromList(LibraryFile file){
synchronized (this.fileList) {
    for (int i=0; i < this.fileList.size(); i++) {
      if (this.fileList.get(i).fileName.equals(file.fileName)) {
        this.fileList.remove(i);
        markDirty();
        break;
      }
    }
  }
}","public void removeFileFromList(LibraryFile file){
synchronized (this.fileList) {
    for (int i=0; i < this.fileList.size(); i++) {
      if (this.fileList.get(i).getFullName().equals(file.getFullName())) {
        this.fileList.remove(i);
        markDirty();
        break;
      }
    }
  }
}",0.9551724137931036
170292,"/** 
 * Save armour data from an items NBT data into a file on the disk.
 * @param filePath 
 * @param filename The name of the file to save to.
 * @param player The player that pressed the save button.
 * @param publicFiles If true save to the public file list or false for the players private files.
 */
public void saveArmour(String fileName,String filePath,EntityPlayerMP player,boolean publicFiles){
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinPointer == null) {
    return;
  }
  Skin skin=CommonSkinCache.INSTANCE.getSkin(skinPointer);
  if (skin == null) {
    return;
  }
  if (!publicFiles) {
    filePath=""String_Node_Str"" + player.getUniqueID().toString() + filePath;
  }
  if (!SkinIOUtils.saveSkinFromFileName(filePath,fileName + SkinIOUtils.SKIN_FILE_EXTENSION,skin)) {
    return;
  }
  if (ArmourersWorkshop.isDedicated()) {
    if (publicFiles) {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PUBLIC,player);
    }
 else {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PRIVATE,player);
    }
  }
 else {
    ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.LOCAL,player);
  }
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}","/** 
 * Save armour data from an items NBT data into a file on the disk.
 * @param filePath 
 * @param filename The name of the file to save to.
 * @param player The player that pressed the save button.
 * @param publicFiles If true save to the public file list or false for the players private files.
 */
public void saveArmour(String fileName,String filePath,EntityPlayerMP player,boolean publicFiles){
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinPointer == null) {
    return;
  }
  if (!publicFiles) {
    filePath=""String_Node_Str"" + player.getUniqueID().toString() + filePath;
  }
  CommonSkinCache.INSTANCE.clearFileNameIdLink(filePath + fileName);
  Skin skin=CommonSkinCache.INSTANCE.getSkin(skinPointer);
  if (skin == null) {
    return;
  }
  if (!SkinIOUtils.saveSkinFromFileName(filePath,fileName + SkinIOUtils.SKIN_FILE_EXTENSION,skin)) {
    return;
  }
  if (ArmourersWorkshop.isDedicated()) {
    if (publicFiles) {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PUBLIC,player);
    }
 else {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PRIVATE,player);
    }
  }
 else {
    ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.LOCAL,player);
  }
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}",0.9197040285009592
170293,"public static boolean saveSkinToFile(File file,Skin skin){
  File dir=file.getParentFile();
  if (!dir.exists()) {
    dir.mkdirs();
  }
  ModLogger.log(""String_Node_Str"" + file.getAbsolutePath());
  DataOutputStream stream=null;
  try {
    stream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
    SkinSerializer.writeToStream(skin,stream);
    stream.flush();
  }
 catch (  FileNotFoundException e) {
    ModLogger.log(Level.WARN,""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    ModLogger.log(Level.ERROR,""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
 finally {
    IOUtils.closeQuietly(stream);
  }
  return true;
}","public static boolean saveSkinToFile(File file,Skin skin){
  File dir=file.getParentFile();
  if (!dir.exists()) {
    dir.mkdirs();
  }
  DataOutputStream stream=null;
  try {
    stream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
    SkinSerializer.writeToStream(skin,stream);
    stream.flush();
  }
 catch (  FileNotFoundException e) {
    ModLogger.log(Level.WARN,""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    ModLogger.log(Level.ERROR,""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
 finally {
    IOUtils.closeQuietly(stream);
  }
  return true;
}",0.9555717407137656
170294,"/** 
 * Save armour data from an items NBT data into a file on the disk.
 * @param filePath 
 * @param filename The name of the file to save to.
 * @param player The player that pressed the save button.
 * @param publicFiles If true save to the public file list or false for the players private files.
 */
public void saveArmour(String fileName,String filePath,EntityPlayerMP player,boolean publicFiles){
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinPointer == null) {
    return;
  }
  if (!publicFiles) {
  }
  Skin skin=CommonSkinCache.INSTANCE.getSkin(skinPointer);
  if (skin == null) {
    return;
  }
  LibraryFile file=new LibraryFile(fileName,filePath,skin.getSkinType());
  CommonSkinCache.INSTANCE.clearFileNameIdLink(file);
  if (!SkinIOUtils.saveSkinFromFileName(filePath,fileName + SkinIOUtils.SKIN_FILE_EXTENSION,skin)) {
    return;
  }
  if (ArmourersWorkshop.isDedicated()) {
    if (publicFiles) {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PUBLIC,player);
    }
 else {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PRIVATE,player);
    }
  }
 else {
    ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.LOCAL,player);
  }
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}","/** 
 * Save armour data from an items NBT data into a file on the disk.
 * @param filePath 
 * @param filename The name of the file to save to.
 * @param player The player that pressed the save button.
 * @param publicFiles If true save to the public file list or false for the players private files.
 */
public void saveArmour(String fileName,String filePath,EntityPlayerMP player,boolean publicFiles){
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinPointer == null) {
    return;
  }
  if (!publicFiles) {
  }
  Skin skin=CommonSkinCache.INSTANCE.getSkin(skinPointer);
  if (skin == null) {
    return;
  }
  filePath=SkinIOUtils.makeFilePathValid(filePath);
  fileName=SkinIOUtils.makeFileNameValid(fileName);
  LibraryFile file=new LibraryFile(fileName,filePath,skin.getSkinType());
  CommonSkinCache.INSTANCE.clearFileNameIdLink(file);
  if (!SkinIOUtils.saveSkinFromFileName(filePath,fileName + SkinIOUtils.SKIN_FILE_EXTENSION,skin)) {
    return;
  }
  if (ArmourersWorkshop.isDedicated()) {
    if (publicFiles) {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PUBLIC,player);
    }
 else {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PRIVATE,player);
    }
  }
 else {
    ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.LOCAL,player);
  }
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}",0.9725303750660328
170295,"@Override public void reloadLibrary(){
  if (!loadingLibaray) {
    loadingLibaray=true;
    (new Thread(new LibraryLoader(this),LibModInfo.NAME + ""String_Node_Str"")).start();
  }
 else {
    ModLogger.log(""String_Node_Str"");
  }
}","@Override public void reloadLibrary(ILibraryCallback callback){
  if (!loadingLibaray) {
    loadingLibaray=true;
    (new Thread(new LibraryLoader(this,callback),LibModInfo.NAME + ""String_Node_Str"")).start();
  }
 else {
    ModLogger.log(""String_Node_Str"");
  }
}",0.9314516129032258
170296,"@Override public void run(){
  long startTime=System.currentTimeMillis();
  ModLogger.log(""String_Node_Str"");
  File directory=SkinIOUtils.getSkinLibraryDirectory();
  ArrayList<LibraryFile> fileList=LibraryHelper.getSkinFilesInDirectory(directory,true);
  libraryManager.setFileList(fileList,LibraryFileType.LOCAL);
  ModLogger.log(String.format(""String_Node_Str"",libraryManager.clientFiles.getFileCount(),System.currentTimeMillis() - startTime));
  libraryManager.finishedLoading();
}","@Override public void run(){
  long startTime=System.currentTimeMillis();
  ModLogger.log(""String_Node_Str"");
  File directory=SkinIOUtils.getSkinLibraryDirectory();
  ArrayList<LibraryFile> fileList=LibraryHelper.getSkinFilesInDirectory(directory,true);
  libraryManager.setFileList(fileList,LibraryFileType.LOCAL);
  ModLogger.log(String.format(""String_Node_Str"",libraryManager.clientFiles.getFileCount(),System.currentTimeMillis() - startTime));
  libraryManager.finishedLoading();
  if (callback != null) {
    callback.libraryReloaded(libraryManager);
  }
}",0.9274809160305344
170297,"public LibraryLoader(ClientLibraryManager libraryManager){
  this.libraryManager=libraryManager;
}","public LibraryLoader(ClientLibraryManager libraryManager,ILibraryCallback callback){
  this.libraryManager=libraryManager;
  this.callback=callback;
}",0.7903225806451613
170298,"public void clearIdForFileName(String fileName){
synchronized (skinNameMap) {
    if (skinNameMap.containsKey(fileName)) {
      ModLogger.log(""String_Node_Str"" + fileName);
    }
 else {
      ModLogger.log(""String_Node_Str"" + fileName + ""String_Node_Str"");
    }
    skinNameMap.remove(fileName);
  }
}","public void clearIdForFileName(String fileName){
synchronized (skinNameMap) {
    if (skinNameMap.containsKey(fileName)) {
      ModLogger.log(""String_Node_Str"" + fileName);
    }
    skinNameMap.remove(fileName);
  }
}",0.7265774378585086
170299,"@Override public void reloadLibrary(){
  if (!loadingLibaray) {
    loadingLibaray=true;
    (new Thread(new LibraryLoader(this),LibModInfo.NAME + ""String_Node_Str"")).start();
  }
 else {
    ModLogger.log(""String_Node_Str"");
  }
}","@Override public void reloadLibrary(ILibraryCallback callback){
  if (!loadingLibaray) {
    loadingLibaray=true;
    (new Thread(new LibraryLoader(this,callback),LibModInfo.NAME + ""String_Node_Str"")).start();
  }
 else {
    ModLogger.log(""String_Node_Str"");
  }
}",0.9314516129032258
170300,"@Override public void run(){
  long startTime=System.currentTimeMillis();
  ModLogger.log(""String_Node_Str"");
  int publicFileCount=libraryManager.loadPublicFiles();
  int endTime=(int)(System.currentTimeMillis() - startTime);
  ModLogger.log(String.format(""String_Node_Str"",publicFileCount,endTime));
  ModLogger.log(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  int privateFileCount=libraryManager.loadPrivateFiles();
  endTime=(int)(System.currentTimeMillis() - startTime);
  ModLogger.log(String.format(""String_Node_Str"",privateFileCount,endTime));
  libraryManager.finishedLoading();
}","@Override public void run(){
  long startTime=System.currentTimeMillis();
  ModLogger.log(""String_Node_Str"");
  int publicFileCount=libraryManager.loadPublicFiles();
  int endTime=(int)(System.currentTimeMillis() - startTime);
  ModLogger.log(String.format(""String_Node_Str"",publicFileCount,endTime));
  ModLogger.log(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  int privateFileCount=libraryManager.loadPrivateFiles();
  endTime=(int)(System.currentTimeMillis() - startTime);
  ModLogger.log(String.format(""String_Node_Str"",privateFileCount,endTime));
  libraryManager.finishedLoading();
  if (callback != null) {
    callback.libraryReloaded(libraryManager);
  }
}",0.9409937888198758
170301,"public LibraryLoader(CommonLibraryManager libraryManager){
  this.libraryManager=libraryManager;
}","public LibraryLoader(CommonLibraryManager libraryManager,ILibraryCallback callback){
  this.libraryManager=libraryManager;
  this.callback=callback;
}",0.7903225806451613
170302,public void reloadLibrary();,public void reloadLibrary(ILibraryCallback callback);,0.691358024691358
170303,"public void writeToByteBuf(ByteBuf buf){
  ByteBufUtils.writeUTF8String(buf,fileName);
  ByteBufUtils.writeUTF8String(buf,filePath);
  buf.writeBoolean(directory);
  if (!directory) {
    ByteBufUtils.writeUTF8String(buf,skinType.getRegistryName());
  }
}","public void writeToByteBuf(ByteBuf buf){
  ByteBufUtils.writeUTF8String(buf,fileName);
  ByteBufUtils.writeUTF8String(buf,filePath);
  buf.writeBoolean(directory);
  buf.writeBoolean(skinType != null);
  if (skinType != null) {
    ByteBufUtils.writeUTF8String(buf,skinType.getRegistryName());
  }
}",0.8736462093862816
170304,"public static LibraryFile readFromByteBuf(ByteBuf buf){
  String fileName=ByteBufUtils.readUTF8String(buf);
  String filePath=ByteBufUtils.readUTF8String(buf);
  boolean directory=buf.readBoolean();
  ISkinType skinType=null;
  if (!directory) {
    String regName=ByteBufUtils.readUTF8String(buf);
    skinType=SkinTypeRegistry.INSTANCE.getSkinTypeFromRegistryName(regName);
  }
  return new LibraryFile(fileName,filePath,skinType,directory);
}","public static LibraryFile readFromByteBuf(ByteBuf buf){
  String fileName=ByteBufUtils.readUTF8String(buf);
  String filePath=ByteBufUtils.readUTF8String(buf);
  boolean directory=buf.readBoolean();
  ISkinType skinType=null;
  if (buf.readBoolean()) {
    String regName=ByteBufUtils.readUTF8String(buf);
    skinType=SkinTypeRegistry.INSTANCE.getSkinTypeFromRegistryName(regName);
  }
  return new LibraryFile(fileName,filePath,skinType,directory);
}",0.9698996655518396
170305,"@Override public IMessage onMessage(MessageServerLibraryFileList message,MessageContext ctx){
  EntityClientPlayerMP player=Minecraft.getMinecraft().thePlayer;
  Container container=player.openContainer;
  ArmourersWorkshop.proxy.libraryManager.setFileList(message.fileList,message.listType);
  return null;
}","@Override public IMessage onMessage(MessageServerLibraryFileList message,MessageContext ctx){
  EntityClientPlayerMP player=Minecraft.getMinecraft().thePlayer;
  Container container=player.openContainer;
  ModLogger.log(""String_Node_Str"" + message.listType);
  ArmourersWorkshop.proxy.libraryManager.setFileList(message.fileList,message.listType);
  return null;
}",0.9182763744427934
170306,"public MessageServerSkinIdSend(String fileName,int skinId){
  this.fileName=fileName;
  this.skinId=skinId;
}","public MessageServerSkinIdSend(String fileName,int skinId,boolean clearId){
  this.fileName=fileName;
  this.skinId=skinId;
  this.clearId=clearId;
}",0.8449612403100775
170307,"@Override public void toBytes(ByteBuf buf){
  buf.writeInt(skinId);
  ByteBufUtils.writeUTF8String(buf,fileName);
}","@Override public void toBytes(ByteBuf buf){
  buf.writeInt(skinId);
  ByteBufUtils.writeUTF8String(buf,fileName);
  buf.writeBoolean(clearId);
}",0.888030888030888
170308,"@Override public void fromBytes(ByteBuf buf){
  skinId=buf.readInt();
  fileName=ByteBufUtils.readUTF8String(buf);
}","@Override public void fromBytes(ByteBuf buf){
  skinId=buf.readInt();
  fileName=ByteBufUtils.readUTF8String(buf);
  clearId=buf.readBoolean();
}",0.8888888888888888
170309,"@Override public IMessage onMessage(MessageServerSkinIdSend message,MessageContext ctx){
  setIdForFileName(message.fileName,message.skinId);
  return null;
}","@Override public IMessage onMessage(MessageServerSkinIdSend message,MessageContext ctx){
  if (!message.clearId) {
    setIdForFileName(message.fileName,message.skinId);
  }
 else {
    clearIdForFileName(message.fileName);
  }
  return null;
}",0.6616915422885572
170310,"@Deprecated public void clearFileNameIdLink(String fileName){
  fileNameIdLinkMap.remove(fileName);
}","@Deprecated public void clearFileNameIdLink(String fileName){
  fileNameIdLinkMap.remove(fileName);
  MessageServerSkinIdSend message=new MessageServerSkinIdSend(fileName,0,true);
  PacketHandler.networkWrapper.sendToAll(message);
}",0.6066066066066066
170311,"@Deprecated private void sendSkinIdToClient(String fileName,EntityPlayerMP player){
  if (!fileNameIdLinkMap.containsKey(fileName)) {
    String basicFileName=fileName;
    Skin skin=SkinIOUtils.loadSkinFromFileName(basicFileName + ""String_Node_Str"");
    if (skin != null) {
      addEquipmentDataToCache(skin,basicFileName);
    }
 else {
      ModLogger.log(Level.ERROR,String.format(""String_Node_Str"",player.getCommandSenderName(),fileName));
    }
  }
  if (fileNameIdLinkMap.containsKey(fileName)) {
    MessageServerSkinIdSend message=new MessageServerSkinIdSend(fileName,fileNameIdLinkMap.get(fileName));
    PacketHandler.networkWrapper.sendTo(message,player);
  }
}","@Deprecated private void sendSkinIdToClient(String fileName,EntityPlayerMP player){
  if (!fileNameIdLinkMap.containsKey(fileName)) {
    String basicFileName=fileName;
    Skin skin=SkinIOUtils.loadSkinFromFileName(basicFileName + ""String_Node_Str"");
    if (skin != null) {
      addEquipmentDataToCache(skin,basicFileName);
    }
 else {
      ModLogger.log(Level.ERROR,String.format(""String_Node_Str"",player.getCommandSenderName(),fileName));
    }
  }
  if (fileNameIdLinkMap.containsKey(fileName)) {
    MessageServerSkinIdSend message=new MessageServerSkinIdSend(fileName,fileNameIdLinkMap.get(fileName),false);
    PacketHandler.networkWrapper.sendTo(message,player);
  }
}",0.995575221238938
170312,"public void sendArmourToClient(String filename,String filePath,EntityPlayerMP player){
  if (!ConfigHandler.allowClientsToDownloadSkins) {
    return;
  }
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  Skin skin=CommonSkinCache.INSTANCE.getEquipmentData(skinPointer.skinId);
  if (skin == null) {
    return;
  }
  MessageServerLibrarySendSkin message=new MessageServerLibrarySendSkin(filename,filePath,skin);
  PacketHandler.networkWrapper.sendTo(message,player);
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}","public void sendArmourToClient(String filename,String filePath,EntityPlayerMP player){
  if (!ConfigHandler.allowClientsToDownloadSkins) {
    return;
  }
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  Skin skin=CommonSkinCache.INSTANCE.getEquipmentData(skinPointer.skinId);
  if (skin == null) {
    return;
  }
  LibraryFile file=new LibraryFile(filename,filePath,skin.getSkinType());
  CommonSkinCache.INSTANCE.clearFileNameIdLink(file);
  MessageServerLibrarySendSkin message=new MessageServerLibrarySendSkin(filename,filePath,skin);
  PacketHandler.networkWrapper.sendTo(message,player);
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}",0.9324894514767932
170313,"/** 
 * Save armour data from an items NBT data into a file on the disk.
 * @param filePath 
 * @param filename The name of the file to save to.
 * @param player The player that pressed the save button.
 * @param publicFiles If true save to the public file list or false for the players private files.
 */
public void saveArmour(String fileName,String filePath,EntityPlayerMP player,boolean publicFiles){
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinPointer == null) {
    return;
  }
  if (!publicFiles) {
    filePath=""String_Node_Str"" + player.getUniqueID().toString() + filePath;
  }
  Skin skin=CommonSkinCache.INSTANCE.getSkin(skinPointer);
  if (skin == null) {
    return;
  }
  LibraryFile file=new LibraryFile(fileName,filePath,skin.getSkinType());
  CommonSkinCache.INSTANCE.clearFileNameIdLink(file);
  if (!SkinIOUtils.saveSkinFromFileName(filePath,fileName + SkinIOUtils.SKIN_FILE_EXTENSION,skin)) {
    return;
  }
  if (ArmourersWorkshop.isDedicated()) {
    if (publicFiles) {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PUBLIC,player);
    }
 else {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PRIVATE,player);
    }
  }
 else {
    ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.LOCAL,player);
  }
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}","/** 
 * Save armour data from an items NBT data into a file on the disk.
 * @param filePath 
 * @param filename The name of the file to save to.
 * @param player The player that pressed the save button.
 * @param publicFiles If true save to the public file list or false for the players private files.
 */
public void saveArmour(String fileName,String filePath,EntityPlayerMP player,boolean publicFiles){
  ItemStack stackInput=getStackInSlot(0);
  ItemStack stackOutput=getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOutput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinPointer == null) {
    return;
  }
  if (!publicFiles) {
  }
  Skin skin=CommonSkinCache.INSTANCE.getSkin(skinPointer);
  if (skin == null) {
    return;
  }
  LibraryFile file=new LibraryFile(fileName,filePath,skin.getSkinType());
  CommonSkinCache.INSTANCE.clearFileNameIdLink(file);
  if (!SkinIOUtils.saveSkinFromFileName(filePath,fileName + SkinIOUtils.SKIN_FILE_EXTENSION,skin)) {
    return;
  }
  if (ArmourersWorkshop.isDedicated()) {
    if (publicFiles) {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PUBLIC,player);
    }
 else {
      ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.SERVER_PRIVATE,player);
    }
  }
 else {
    ArmourersWorkshop.proxy.libraryManager.addFileToListType(new LibraryFile(fileName,filePath,skin.getSkinType()),LibraryFileType.LOCAL,player);
  }
  this.decrStackSize(0,1);
  this.setInventorySlotContents(1,stackInput);
}",0.9795158286778398
170314,"public void skinLibraryCommand(EntityPlayerMP player,SkinLibraryCommand command,LibraryFile file,boolean publicList){
  if (!publicList) {
  }
switch (command) {
case DELETE:
    if (!publicList) {
      File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),file.filePath);
      if (file.isDirectory()) {
        dir=new File(dir,file.fileName + ""String_Node_Str"");
      }
 else {
        dir=new File(dir,file.fileName + SkinIOUtils.SKIN_FILE_EXTENSION);
      }
      if (dir.isDirectory() == file.isDirectory()) {
        if (dir.exists()) {
          if (file.isDirectory()) {
            try {
              FileUtils.deleteDirectory(dir);
              libraryManager.reloadLibrary();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            CommonSkinCache.INSTANCE.clearFileNameIdLink(file);
            dir.delete();
            libraryManager.reloadLibrary();
          }
        }
      }
    }
 else {
      ModLogger.log(""String_Node_Str"");
    }
  break;
case NEW_FOLDER:
if (!publicList) {
  File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),file.filePath);
  ModLogger.log(dir.getAbsolutePath());
  dir=new File(dir,file.fileName);
  if (!dir.exists()) {
    dir.mkdir();
  }
  libraryManager.reloadLibrary();
  ModLogger.log(String.format(""String_Node_Str"",file.fileName,file.filePath));
  ModLogger.log(""String_Node_Str"" + dir.getAbsolutePath());
}
 else {
  ModLogger.log(""String_Node_Str"");
}
break;
}
}","public void skinLibraryCommand(EntityPlayerMP player,SkinLibraryCommand command,LibraryFile file,boolean publicList){
  if (!publicList) {
  }
switch (command) {
case DELETE:
    if (!publicList) {
      File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),file.filePath);
      if (file.isDirectory()) {
        dir=new File(dir,file.fileName + ""String_Node_Str"");
      }
 else {
        dir=new File(dir,file.fileName + SkinIOUtils.SKIN_FILE_EXTENSION);
      }
      if (dir.isDirectory() == file.isDirectory()) {
        if (dir.exists()) {
          if (file.isDirectory()) {
            try {
              FileUtils.deleteDirectory(dir);
              libraryManager.reloadLibrary();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
 else {
            clearFiles.add(file);
            ModLogger.log(""String_Node_Str"" + dir.getAbsolutePath());
            dir.delete();
            libraryManager.removeFileFromListType(file,LibraryFileType.SERVER_PRIVATE,player);
            libraryManager.reloadLibrary(this);
          }
        }
      }
    }
 else {
      ModLogger.log(""String_Node_Str"");
    }
  break;
case NEW_FOLDER:
if (!publicList) {
  File dir=new File(SkinIOUtils.getSkinLibraryDirectory(),file.filePath);
  ModLogger.log(dir.getAbsolutePath());
  dir=new File(dir,file.fileName);
  if (!dir.exists()) {
    dir.mkdir();
  }
  libraryManager.reloadLibrary();
  ModLogger.log(String.format(""String_Node_Str"",file.fileName,file.filePath));
  ModLogger.log(""String_Node_Str"" + dir.getAbsolutePath());
}
 else {
  ModLogger.log(""String_Node_Str"");
}
break;
}
}",0.8824088748019018
170315,"@Override public void setInventorySlotContents(IInventory inventory,int slotId,ItemStack stack){
  if (entity.worldObj.isRemote) {
    return;
  }
  if (stack == null) {
    ISkinType skinType=SkinTypeHelper.getSkinTypeForSlot(slotId);
    equipmentData.removeEquipment(skinType,0);
  }
 else {
    SkinPointer skinData=SkinNBTHelper.getSkinPointerFromStack(stack);
    equipmentData.addEquipment(skinData.skinType,0,skinData);
  }
  sendEquipmentDataToPlayerToAllPlayersAround();
}","@Override public void setInventorySlotContents(IInventory inventory,int slotId,ItemStack stack){
  if (entity.worldObj.isRemote) {
    return;
  }
  if (stack == null) {
    ISkinType skinType=getSkinTypeForSlot(slotId);
    equipmentData.removeEquipment(skinType,0);
  }
 else {
    SkinPointer skinData=SkinNBTHelper.getSkinPointerFromStack(stack);
    equipmentData.addEquipment(skinData.skinType,0,skinData);
  }
  sendEquipmentDataToPlayerToAllPlayersAround();
}",0.9841938883034772
170316,"public void skinAdded(ItemStack stack){
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stack);
  ISkinDye dye=skinPointer.getSkinDye();
  updateLockedSlots(stack);
  putStackInSlot(45,stack.copy());
}","public void skinAdded(ItemStack stack){
  SkinPointer skinPointer=SkinNBTHelper.getSkinPointerFromStack(stack);
  ISkinDye dye=skinPointer.getSkinDye();
  skinRemoved();
  updateLockedSlots(stack);
  putStackInSlot(45,stack.copy());
}",0.9623059866962306
170317,"public void writeToByteBuf(ByteBuf buf){
  ByteBufUtils.writeUTF8String(buf,fileName);
  ByteBufUtils.writeUTF8String(buf,filePath);
  ByteBufUtils.writeUTF8String(buf,skinType.getRegistryName());
  buf.writeBoolean(directory);
}","public void writeToByteBuf(ByteBuf buf){
  ByteBufUtils.writeUTF8String(buf,fileName);
  ByteBufUtils.writeUTF8String(buf,filePath);
  buf.writeBoolean(directory);
  if (!directory) {
    ByteBufUtils.writeUTF8String(buf,skinType.getRegistryName());
  }
}",0.8264462809917356
170318,"public LibraryFile(String fileName,String filePath,ISkinType skinType,boolean directory){
  this.fileName=fileName;
  this.filePath=filePath;
  this.skinType=skinType;
  this.directory=directory;
}","public LibraryFile(String fileName,String filePath,ISkinType skinType,boolean directory){
  this.fileName=fileName.replace(""String_Node_Str"",""String_Node_Str"");
  this.filePath=filePath.replace(""String_Node_Str"",""String_Node_Str"");
  this.skinType=skinType;
  this.directory=directory;
}",0.8140495867768595
170319,"public static LibraryFile readFromByteBuf(ByteBuf buf){
  String fileName=ByteBufUtils.readUTF8String(buf);
  String filePath=ByteBufUtils.readUTF8String(buf);
  String regName=ByteBufUtils.readUTF8String(buf);
  ISkinType skinType=SkinTypeRegistry.INSTANCE.getSkinTypeFromRegistryName(regName);
  boolean directory=buf.readBoolean();
  return new LibraryFile(fileName,filePath,skinType,directory);
}","public static LibraryFile readFromByteBuf(ByteBuf buf){
  String fileName=ByteBufUtils.readUTF8String(buf);
  String filePath=ByteBufUtils.readUTF8String(buf);
  boolean directory=buf.readBoolean();
  ISkinType skinType=null;
  if (!directory) {
    String regName=ByteBufUtils.readUTF8String(buf);
    skinType=SkinTypeRegistry.INSTANCE.getSkinTypeFromRegistryName(regName);
  }
  return new LibraryFile(fileName,filePath,skinType,directory);
}",0.8402366863905325
170320,"@Override public void update(){
  if (downloadListTask != null && downloadListTask.isDone()) {
    try {
      json=downloadListTask.get();
      SkinDownloader.downloadSkins(skinCompletion,json);
      downloadListTask=null;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Future<Skin> futureSkin=skinCompletion.poll();
  if (futureSkin != null) {
    try {
      Skin skin=futureSkin.get();
      if (skin != null) {
        SkinPointer skinPointer=new SkinPointer(skin);
        if (skin != null && !ClientSkinCache.INSTANCE.isSkinInCache(skinPointer)) {
          ModelBakery.INSTANCE.receivedUnbakedModel(skin);
        }
 else {
          if (skin != null) {
            ClientSkinCache.INSTANCE.addServerIdMap(skin);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void update(){
  if (downloadListTask != null && downloadListTask.isDone()) {
    try {
      json=downloadListTask.get();
      if (json != null) {
        SkinDownloader.downloadSkins(skinCompletion,json);
      }
      downloadListTask=null;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Future<Skin> futureSkin=skinCompletion.poll();
  if (futureSkin != null) {
    try {
      Skin skin=futureSkin.get();
      if (skin != null) {
        SkinPointer skinPointer=new SkinPointer(skin);
        if (skin != null && !ClientSkinCache.INSTANCE.isSkinInCache(skinPointer)) {
          ModelBakery.INSTANCE.receivedUnbakedModel(skin);
        }
 else {
          if (skin != null) {
            ClientSkinCache.INSTANCE.addServerIdMap(skin);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9792387543252596
170321,"@Override public void update(){
  if (downloadSearchResultsTask != null && downloadSearchResultsTask.isDone()) {
    try {
      json=null;
      page=0;
      json=downloadSearchResultsTask.get();
      SkinDownloader.downloadSkins(skinCompletion,json);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
    downloadSearchResultsTask=null;
  }
  Future<Skin> futureSkin=skinCompletion.poll();
  if (futureSkin != null) {
    try {
      Skin skin=futureSkin.get();
      if (skin != null) {
        SkinPointer skinPointer=new SkinPointer(skin);
        if (skin != null && !ClientSkinCache.INSTANCE.isSkinInCache(skinPointer)) {
          ModelBakery.INSTANCE.receivedUnbakedModel(skin);
        }
 else {
          if (skin != null) {
            ClientSkinCache.INSTANCE.addServerIdMap(skin);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void update(){
  if (downloadSearchResultsTask != null && downloadSearchResultsTask.isDone()) {
    try {
      json=null;
      page=0;
      json=downloadSearchResultsTask.get();
      if (json != null) {
        SkinDownloader.downloadSkins(skinCompletion,json);
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
    downloadSearchResultsTask=null;
  }
  Future<Skin> futureSkin=skinCompletion.poll();
  if (futureSkin != null) {
    try {
      Skin skin=futureSkin.get();
      if (skin != null) {
        SkinPointer skinPointer=new SkinPointer(skin);
        if (skin != null && !ClientSkinCache.INSTANCE.isSkinInCache(skinPointer)) {
          ModelBakery.INSTANCE.receivedUnbakedModel(skin);
        }
 else {
          if (skin != null) {
            ClientSkinCache.INSTANCE.addServerIdMap(skin);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9821958456973294
170322,"@Override public void initGui(){
  guiLeft=width / 2 - guiWidth / 2;
  guiTop=height / 2 - guiHeight / 2;
  buttonList.clear();
  checkWireframe=new GuiCheckBox(-1,guiLeft + 5,guiTop + 5,""String_Node_Str"",ConfigHandlerClient.wireframeRender);
  buttonList.add(checkWireframe);
}","@Override public void initGui(){
  guiLeft=width / 2 - guiWidth / 2;
  guiTop=height / 2 - guiHeight / 2;
  buttonList.clear();
  checkWireframe=new GuiCheckBox(-1,guiLeft + 5,guiTop + 5,""String_Node_Str"",ConfigHandlerClient.wireframeRender);
  checkWireframe.setTextColour(0xFFEEEEEE);
  buttonList.add(checkWireframe);
}",0.8766666666666667
170323,"public GuiCheckBox(int id,int x,int y,String text,boolean checked){
  super(id,x,y,text,checked);
  this.boxWidth=9;
  this.height=9;
}","public GuiCheckBox(int id,int x,int y,String text,boolean checked){
  super(id,x,y,text,checked);
  this.boxWidth=9;
  this.height=9;
  this.textColour=14737632;
}",0.906040268456376
170324,"@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  if (this.visible) {
    this.field_146123_n=mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.boxWidth && mouseY < this.yPosition + this.height;
    GuiUtils.drawContinuousTexturedBox(buttonTextures,this.xPosition,this.yPosition,0,46,this.boxWidth,this.height,200,20,2,3,2,2,this.zLevel);
    this.mouseDragged(mc,mouseX,mouseY);
    int color=4210752;
    if (packedFGColour != 0) {
      color=packedFGColour;
    }
 else     if (!this.enabled) {
      color=10526880;
    }
    if (this.isChecked()) {
      this.drawCenteredString(mc.fontRenderer,""String_Node_Str"",this.xPosition + this.boxWidth / 2 + 1,this.yPosition,14737632);
    }
    mc.fontRenderer.drawString(displayString,xPosition + this.boxWidth + 2,yPosition + 1,color,false);
  }
}","@Override public void drawButton(Minecraft mc,int mouseX,int mouseY){
  if (this.visible) {
    this.field_146123_n=mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.boxWidth && mouseY < this.yPosition + this.height;
    GuiUtils.drawContinuousTexturedBox(buttonTextures,this.xPosition,this.yPosition,0,46,this.boxWidth,this.height,200,20,2,3,2,2,this.zLevel);
    this.mouseDragged(mc,mouseX,mouseY);
    int color=this.textColour;
    if (packedFGColour != 0) {
      color=packedFGColour;
    }
 else     if (!this.enabled) {
      color=10526880;
    }
    if (this.isChecked()) {
      this.drawCenteredString(mc.fontRenderer,""String_Node_Str"",this.xPosition + this.boxWidth / 2 + 1,this.yPosition,0xFFCCCCCC);
    }
    mc.fontRenderer.drawString(displayString,xPosition + this.boxWidth + 2,yPosition + 1,color,false);
  }
}",0.976798143851508
170325,"@Mod.EventHandler public void perInit(FMLPreInitializationEvent event){
  ModLogger.log(""String_Node_Str"" + LibModInfo.NAME + ""String_Node_Str""+ LibModInfo.VERSION);
  creativeTabArmorersWorkshop.setMinecraftCreativeTab(tabArmorersWorkshop);
  ConfigHandler.init(event.getSuggestedConfigurationFile());
  Addons.preInit();
  proxy.preInit();
  SkinIOUtils.makeLibraryDirectory();
  UpdateCheck.checkForUpdates();
  SkinExtractor.extractSkins();
  modItems=new ModItems();
  modBlocks=new ModBlocks();
  SkinTypeRegistry.init();
  CubeRegistry.init();
  proxy.initLibraryManager();
}","@Mod.EventHandler public void perInit(FMLPreInitializationEvent event){
  ModLogger.log(""String_Node_Str"" + LibModInfo.NAME + ""String_Node_Str""+ LibModInfo.VERSION);
  creativeTabArmorersWorkshop.setMinecraftCreativeTab(tabArmorersWorkshop);
  ConfigHandler.init(event.getSuggestedConfigurationFile());
  CapabilityManager.INSTANCE.register(IWardrobeCapability.class,new WardrobeStorage(),DefaultWardrobeCapability.class);
  Addons.preInit();
  proxy.preInit();
  SkinIOUtils.makeLibraryDirectory();
  UpdateCheck.checkForUpdates();
  SkinExtractor.extractSkins();
  modItems=new ModItems();
  modBlocks=new ModBlocks();
  SkinTypeRegistry.init();
  CubeRegistry.init();
  proxy.initLibraryManager();
}",0.9065420560747663
170326,"public ModelHead(){
  main=new ModelRenderer(this,0,0);
  main.addBox(-4F,-8F,-4F,8,8,8);
  main.setRotationPoint(0,0,0);
  overlay=new ModelRenderer(this,32,0);
  overlay.addBox(-4F,-8F,-4F,8,8,8,0.5F);
  overlay.setRotationPoint(0F,0F,0F);
  overlay.setTextureSize(64,32);
}","public ModelHead(){
  main=new ModelRenderer(this,0,0);
  main.addBox(-4F,-8F,-4F,8,8,8);
  main.setRotationPoint(0,0,0);
  main.setTextureSize(64,64);
  overlay=new ModelRenderer(this,32,0);
  overlay.addBox(-4F,-8F,-4F,8,8,8,0.5F);
  overlay.setRotationPoint(0F,0F,0F);
  overlay.setTextureSize(64,64);
}",0.9415807560137456
170327,"private static void renderGuideFace(EnumFacing dir,double x,double y,double z,double sizeX,double sizeY,float scale){
  Tessellator tessellator=Tessellator.getInstance();
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_CULL_FACE);
  ModRenderHelper.enableAlphaBlend();
  float scale1=0.999F;
  GL11.glTranslated(x * scale,y * scale,z * scale);
switch (dir) {
case EAST:
    GL11.glRotated(-90,0,1,0);
  break;
case WEST:
GL11.glRotated(-90,0,1,0);
break;
case UP:
GL11.glRotated(90,1,0,0);
break;
case DOWN:
GL11.glRotated(90,1,0,0);
break;
default :
break;
}
ModRenderHelper.disableAlphaBlend();
GL11.glEnable(GL11.GL_CULL_FACE);
GL11.glPopMatrix();
}","private static void renderGuideFace(EnumFacing dir,double x,double y,double z,double sizeX,double sizeY,float scale){
  Tessellator tessellator=Tessellator.getInstance();
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_CULL_FACE);
  ModRenderHelper.enableAlphaBlend();
  float scale1=0.999F;
  GL11.glTranslated(x * scale,y * scale,z * scale);
switch (dir) {
case EAST:
    GL11.glRotated(-90,0,1,0);
  break;
case WEST:
GL11.glRotated(-90,0,1,0);
break;
case UP:
GL11.glRotated(90,1,0,0);
break;
case DOWN:
GL11.glRotated(90,1,0,0);
break;
default :
break;
}
IRenderBuffer buff=RenderBridge.INSTANCE;
buff.startDrawing(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX);
buff.addVertexWithUV(0,0,0,0,0);
buff.endVertex();
buff.addVertexWithUV(0,sizeY * scale,0,sizeY,0);
buff.endVertex();
buff.addVertexWithUV(sizeX * scale,sizeY * scale,0,sizeY,sizeX);
buff.endVertex();
buff.addVertexWithUV(sizeX * scale,0,0,0,sizeX);
buff.endVertex();
buff.draw();
ModRenderHelper.disableAlphaBlend();
GL11.glEnable(GL11.GL_CULL_FACE);
GL11.glPopMatrix();
}",0.7693215339233038
170328,"/** 
 * Converts blocks in the world into a skin class.
 * @param world The world.
 * @param skinType The type of skin to save.
 * @param authorName Author name for this skin.
 * @param customName Custom display name for this skin.
 * @param tags Custom search tags for this skin.
 * @param xCoord Armourers x location.
 * @param yCoord Armourers y location.
 * @param zCoord Armourers z location.
 * @param direction Direction the armourer is facing.
 * @return
 * @throws InvalidCubeTypeException
 * @throws SkinSaveException 
 */
public static Skin saveSkinFromWorld(World world,EntityPlayerMP player,ISkinType skinType,String authorName,String customName,String tags,int[] paintData,int xCoord,int yCoord,int zCoord,ForgeDirection direction) throws InvalidCubeTypeException, SkinSaveException {
  ArrayList<SkinPart> parts=new ArrayList<SkinPart>();
  for (int i=0; i < skinType.getSkinParts().size(); i++) {
    ISkinPartType partType=skinType.getSkinParts().get(i);
    saveArmourPart(world,parts,partType,xCoord,yCoord,zCoord,direction);
  }
  Skin skin=new Skin(authorName,customName,tags,skinType,paintData,parts);
  if (skin.getParts().size() == 0 && !skin.hasPaintData()) {
    throw new SkinSaveException(""String_Node_Str"",SkinSaveExceptionType.NO_DATA);
  }
  for (int i=0; i < skinType.getSkinParts().size(); i++) {
    ISkinPartType partType=skinType.getSkinParts().get(i);
    if (partType.isPartRequired()) {
      boolean havePart=false;
      for (int j=0; j < skin.getPartCount(); j++) {
        if (partType == skin.getParts().get(j).getPartType()) {
          havePart=true;
          break;
        }
      }
      if (!havePart) {
        throw new SkinSaveException(""String_Node_Str"" + partType.getPartName(),SkinSaveExceptionType.MISSING_PARTS);
      }
    }
  }
  return skin;
}","/** 
 * Converts blocks in the world into a skin class.
 * @param world The world.
 * @param skinType The type of skin to save.
 * @param authorName Author name for this skin.
 * @param customName Custom display name for this skin.
 * @param tags Custom search tags for this skin.
 * @param xCoord Armourers x location.
 * @param yCoord Armourers y location.
 * @param zCoord Armourers z location.
 * @param direction Direction the armourer is facing.
 * @return
 * @throws InvalidCubeTypeException
 * @throws SkinSaveException 
 */
public static Skin saveSkinFromWorld(World world,EntityPlayerMP player,ISkinType skinType,String authorName,String customName,String tags,int[] paintData,int xCoord,int yCoord,int zCoord,ForgeDirection direction) throws InvalidCubeTypeException, SkinSaveException {
  ArrayList<SkinPart> parts=new ArrayList<SkinPart>();
  for (int i=0; i < skinType.getSkinParts().size(); i++) {
    ISkinPartType partType=skinType.getSkinParts().get(i);
    saveArmourPart(world,parts,partType,xCoord,yCoord,zCoord,direction);
  }
  if (paintData != null) {
    paintData=paintData.clone();
  }
  Skin skin=new Skin(authorName,customName,tags,skinType,paintData,parts);
  if (skin.getParts().size() == 0 && !skin.hasPaintData()) {
    throw new SkinSaveException(""String_Node_Str"",SkinSaveExceptionType.NO_DATA);
  }
  for (int i=0; i < skinType.getSkinParts().size(); i++) {
    ISkinPartType partType=skinType.getSkinParts().get(i);
    if (partType.isPartRequired()) {
      boolean havePart=false;
      for (int j=0; j < skin.getPartCount(); j++) {
        if (partType == skin.getParts().get(j).getPartType()) {
          havePart=true;
          break;
        }
      }
      if (!havePart) {
        throw new SkinSaveException(""String_Node_Str"" + partType.getPartName(),SkinSaveExceptionType.MISSING_PARTS);
      }
    }
  }
  return skin;
}",0.9825897714907508
170329,"/** 
 * Reads the NBT data from an item and places blocks in the world.
 * @param player The player that pressed the load button.
 */
public void loadArmourItem(EntityPlayerMP player){
  if (this.worldObj.isRemote) {
    return;
  }
  ItemStack stackInput=this.getStackInSlot(0);
  ItemStack stackOuput=this.getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOuput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinData=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinType == null) {
    return;
  }
  if (skinType != skinData.skinType) {
    if (!(skinType == SkinTypeRegistry.skinLegs && skinData.skinType == SkinTypeRegistry.skinSkirt)) {
      return;
    }
  }
  int equipmentId=SkinNBTHelper.getSkinIdFromStack(stackInput);
  Skin equipmentData=SkinDataCache.INSTANCE.getEquipmentData(equipmentId);
  setCustomName(equipmentData.getCustomName());
  ArmourerWorldHelper.loadSkinIntoWorld(worldObj,xCoord,yCoord + HEIGHT_OFFSET,zCoord,equipmentData,direction);
  if (equipmentData.hasPaintData()) {
    this.paintData=equipmentData.getPaintData();
  }
 else {
    clearPaintData(true);
  }
  this.markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  this.setInventorySlotContents(0,null);
  this.setInventorySlotContents(1,stackInput);
}","/** 
 * Reads the NBT data from an item and places blocks in the world.
 * @param player The player that pressed the load button.
 */
public void loadArmourItem(EntityPlayerMP player){
  if (this.worldObj.isRemote) {
    return;
  }
  ItemStack stackInput=this.getStackInSlot(0);
  ItemStack stackOuput=this.getStackInSlot(1);
  if (stackInput == null) {
    return;
  }
  if (stackOuput != null) {
    return;
  }
  if (!(stackInput.getItem() instanceof ItemSkin)) {
    return;
  }
  if (!SkinNBTHelper.stackHasSkinData(stackInput)) {
    return;
  }
  SkinPointer skinData=SkinNBTHelper.getSkinPointerFromStack(stackInput);
  if (skinType == null) {
    return;
  }
  if (skinType != skinData.skinType) {
    if (!(skinType == SkinTypeRegistry.skinLegs && skinData.skinType == SkinTypeRegistry.skinSkirt)) {
      return;
    }
  }
  int equipmentId=SkinNBTHelper.getSkinIdFromStack(stackInput);
  Skin equipmentData=SkinDataCache.INSTANCE.getEquipmentData(equipmentId);
  setCustomName(equipmentData.getCustomName());
  ArmourerWorldHelper.loadSkinIntoWorld(worldObj,xCoord,yCoord + HEIGHT_OFFSET,zCoord,equipmentData,direction);
  if (equipmentData.hasPaintData()) {
    this.paintData=equipmentData.getPaintData().clone();
  }
 else {
    clearPaintData(true);
  }
  this.markDirty();
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  this.setInventorySlotContents(0,null);
  this.setInventorySlotContents(1,stackInput);
}",0.9972008397480756
170330,"public ModelMannequin(){
  super();
  this.isChild=false;
}","public ModelMannequin(){
  super();
  this.isChild=false;
  this.compiled=false;
}",0.8368794326241135
170331,"private void renderMagicCircle(float r,float g,float b,float partialTickTime,int offset){
  mc.mcProfiler.startSection(""String_Node_Str"");
  GL11.glPushMatrix();
  GL11.glColor4f(r,g,b,1F);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_CULL_FACE);
  GL11.glTranslatef(0F,1.48F,0F);
  float circleScale=2.0F;
  GL11.glScalef(circleScale,circleScale,circleScale);
  float rotation=(float)((double)(mc.theWorld.getTotalWorldTime() + offset) / 0.8F % 360) + partialTickTime;
  GL11.glRotatef(rotation,0,1,0);
  ModRenderHelper.disableLighting();
  ModRenderHelper.enableAlphaBlend();
  bindTexture(circle);
  IRenderBuffer renderBuffer=RenderBridge.INSTANCE;
  renderBuffer.startDrawingQuads();
  renderBuffer.addVertexWithUV(-1,0,-1,1,0);
  renderBuffer.addVertexWithUV(1,0,-1,0,0);
  renderBuffer.addVertexWithUV(1,0,1,0,1);
  renderBuffer.addVertexWithUV(-1,0,1,1,1);
  renderBuffer.draw();
  GL11.glTranslatef(0F,-0.002F,0F);
  bindTexture(circleBlur);
  renderBuffer.startDrawingQuads();
  renderBuffer.addVertexWithUV(-1,0,-1,1,0);
  renderBuffer.addVertexWithUV(1,0,-1,0,0);
  renderBuffer.addVertexWithUV(1,0,1,0,1);
  renderBuffer.addVertexWithUV(-1,0,1,1,1);
  renderBuffer.draw();
  ModRenderHelper.disableAlphaBlend();
  ModRenderHelper.enableLighting();
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glColor4f(1F,1F,1F,1F);
  GL11.glPopMatrix();
  mc.mcProfiler.endSection();
}","private void renderMagicCircle(float r,float g,float b,float partialTickTime,int offset,boolean isChild){
  mc.mcProfiler.startSection(""String_Node_Str"");
  GL11.glPushMatrix();
  if (isChild) {
    ModelHelper.enableChildModelScale(false,SCALE);
  }
  GL11.glColor4f(r,g,b,1F);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_CULL_FACE);
  GL11.glTranslatef(0F,1.48F,0F);
  float circleScale=2.0F;
  GL11.glScalef(circleScale,circleScale,circleScale);
  float rotation=(float)((double)(mc.theWorld.getTotalWorldTime() + offset) / 0.8F % 360) + partialTickTime;
  GL11.glRotatef(rotation,0,1,0);
  ModRenderHelper.disableLighting();
  ModRenderHelper.enableAlphaBlend();
  bindTexture(circle);
  IRenderBuffer renderBuffer=RenderBridge.INSTANCE;
  renderBuffer.startDrawingQuads();
  renderBuffer.addVertexWithUV(-1,0,-1,1,0);
  renderBuffer.addVertexWithUV(1,0,-1,0,0);
  renderBuffer.addVertexWithUV(1,0,1,0,1);
  renderBuffer.addVertexWithUV(-1,0,1,1,1);
  renderBuffer.draw();
  GL11.glTranslatef(0F,-0.002F,0F);
  bindTexture(circleBlur);
  renderBuffer.startDrawingQuads();
  renderBuffer.addVertexWithUV(-1,0,-1,1,0);
  renderBuffer.addVertexWithUV(1,0,-1,0,0);
  renderBuffer.addVertexWithUV(1,0,1,0,1);
  renderBuffer.addVertexWithUV(-1,0,1,1,1);
  renderBuffer.draw();
  ModRenderHelper.disableAlphaBlend();
  ModRenderHelper.enableLighting();
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glColor4f(1F,1F,1F,1F);
  if (isChild) {
    ModelHelper.disableChildModelScale();
  }
  GL11.glPopMatrix();
  mc.mcProfiler.endSection();
}",0.949635520212061
170332,"private int renderModel(TileEntityMannequin te,ModelBiped targetBiped,MannequinFakePlayer fakePlayer){
  int displayList=0;
  if (hasRendered) {
    displayList=GLAllocation.generateDisplayLists(1);
    GL11.glNewList(displayList,GL11.GL_COMPILE);
  }
  if (!hasCustomHead(te)) {
    if (te.getBipedRotations().isChild) {
      ModelHelper.enableChildModelScale(true,SCALE);
    }
    targetBiped.bipedHead.render(SCALE);
    GL11.glDisable(GL11.GL_CULL_FACE);
    targetBiped.bipedHeadwear.render(SCALE);
    GL11.glEnable(GL11.GL_CULL_FACE);
    if (te.getBipedRotations().isChild) {
      ModelHelper.disableChildModelScale();
    }
  }
  if (te.getBipedRotations().isChild) {
    ModelHelper.enableChildModelScale(false,SCALE);
  }
  targetBiped.bipedBody.render(SCALE);
  targetBiped.bipedRightArm.render(SCALE);
  targetBiped.bipedLeftArm.render(SCALE);
  targetBiped.bipedRightLeg.render(SCALE);
  targetBiped.bipedLeftLeg.render(SCALE);
  if (te.getGameProfile() != null && te.getGameProfile().getName().equals(""String_Node_Str"")) {
    GL11.glPushMatrix();
    GL11.glRotated(Math.toDegrees(targetBiped.bipedHead.rotateAngleZ),0,0,1);
    GL11.glRotated(Math.toDegrees(targetBiped.bipedHead.rotateAngleY),0,1,0);
    GL11.glRotated(Math.toDegrees(targetBiped.bipedHead.rotateAngleX),1,0,0);
    GL11.glTranslated(-5.5F * SCALE,0,0);
    GL11.glTranslated(0,-6.5F * SCALE,0);
    targetBiped.bipedEars.render(SCALE);
    GL11.glTranslated(11F * SCALE,0,0);
    targetBiped.bipedEars.render(SCALE);
    GL11.glPopMatrix();
  }
  if (te.getBipedRotations().isChild) {
    ModelHelper.disableChildModelScale();
  }
  if (hasRendered) {
    GL11.glEndList();
  }
  hasRendered=true;
  return displayList;
}","private int renderModel(TileEntityMannequin te,ModelBiped targetBiped,MannequinFakePlayer fakePlayer){
  int displayList=0;
  if (hasRendered) {
    displayList=GLAllocation.generateDisplayLists(1);
    GL11.glNewList(displayList,GL11.GL_COMPILE);
  }
  if (!hasCustomHead(te)) {
    if (te.getBipedRotations().isChild) {
      ModelHelper.enableChildModelScale(true,SCALE);
    }
    targetBiped.bipedHead.render(SCALE);
    GL11.glDisable(GL11.GL_CULL_FACE);
    targetBiped.bipedHeadwear.render(SCALE);
    GL11.glEnable(GL11.GL_CULL_FACE);
    if (te.getBipedRotations().isChild) {
      ModelHelper.disableChildModelScale();
    }
    ;
  }
  if (te.getBipedRotations().isChild) {
    ModelHelper.enableChildModelScale(false,SCALE);
  }
  targetBiped.bipedBody.render(SCALE);
  targetBiped.bipedRightArm.render(SCALE);
  targetBiped.bipedLeftArm.render(SCALE);
  targetBiped.bipedRightLeg.render(SCALE);
  targetBiped.bipedLeftLeg.render(SCALE);
  if (te.getBipedRotations().isChild) {
    ModelHelper.disableChildModelScale();
  }
  if (hasRendered) {
    GL11.glEndList();
  }
  if (!hasRendered) {
    hasRendered=true;
  }
  return displayList;
}",0.6729493891797557
170333,"private static void saveArmourBlockToList(World world,int x,int y,int z,int ix,int iy,int iz,ArrayList<ICube> list,ArrayList<CubeMarkerData> markerBlocks,ForgeDirection direction) throws InvalidCubeTypeException {
  if (world.isAirBlock(x,y,z)) {
    return;
  }
  Block block=world.getBlock(x,y,z);
  if (block == ModBlocks.colourable | block == ModBlocks.colourableGlowing | block == ModBlocks.colourableGlass | block == ModBlocks.colourableGlassGlowing) {
    int meta=world.getBlockMetadata(x,y,z);
    ICubeColour colour=UtilBlocks.getColourFromTileEntity(world,x,y,z);
    byte blockType=0;
    if (block == ModBlocks.colourableGlowing) {
      blockType=1;
    }
    if (block == ModBlocks.colourableGlass) {
      blockType=2;
    }
    if (block == ModBlocks.colourableGlassGlowing) {
      blockType=3;
    }
    ICube blockData=CubeFactory.INSTANCE.getCubeInstanceFormId(blockType);
    blockData.setX((byte)ix);
    blockData.setY((byte)iy);
    blockData.setZ((byte)iz);
    blockData.setColour(colour);
    list.add(blockData);
    if (meta > 0) {
      markerBlocks.add(new CubeMarkerData((byte)ix,(byte)iy,(byte)iz,(byte)meta));
    }
  }
}","private static void saveArmourBlockToList(World world,int x,int y,int z,int ix,int iy,int iz,ArrayList<ICube> list,ArrayList<CubeMarkerData> markerBlocks,ForgeDirection direction) throws InvalidCubeTypeException {
  if (world.isAirBlock(x,y,z)) {
    return;
  }
  Block block=world.getBlock(x,y,z);
  if (block == ModBlocks.colourable | block == ModBlocks.colourableGlowing | block == ModBlocks.colourableGlass | block == ModBlocks.colourableGlassGlowing) {
    int meta=world.getBlockMetadata(x,y,z);
    ICubeColour colour=UtilBlocks.getColourFromTileEntity(world,x,y,z);
    byte blockType=0;
    if (block == ModBlocks.colourableGlowing) {
      blockType=1;
    }
    if (block == ModBlocks.colourableGlass) {
      blockType=2;
    }
    if (block == ModBlocks.colourableGlassGlowing) {
      blockType=3;
    }
    ICube blockData=CubeFactory.INSTANCE.getCubeInstanceFormId(blockType);
    blockData.setX((byte)ix);
    blockData.setY((byte)iy);
    blockData.setZ((byte)iz);
    blockData.setColour(new CubeColour(colour));
    list.add(blockData);
    if (meta > 0) {
      markerBlocks.add(new CubeMarkerData((byte)ix,(byte)iy,(byte)iz,(byte)meta));
    }
  }
}",0.9879725085910652
170334,"private static void loadSkinBlockIntoWorld(World world,int x,int y,int z,int xOrigin,int yOrigin,int zOrigin,ICube blockData,ForgeDirection direction,int meta){
  int shiftX=-blockData.getX() - 1;
  int shiftY=blockData.getY() + 1;
  int shiftZ=blockData.getZ();
  int targetX=x + shiftX + xOrigin;
  int targetY=y + yOrigin - shiftY;
  int targetZ=z + shiftZ + zOrigin;
  if (world.isAirBlock(targetX,targetY,targetZ)) {
    Block targetBlock=ModBlocks.colourable;
    if (blockData.getId() == 1) {
      targetBlock=ModBlocks.colourableGlowing;
    }
    if (blockData.getId() == 2) {
      targetBlock=ModBlocks.colourableGlass;
    }
    if (blockData.getId() == 3) {
      targetBlock=ModBlocks.colourableGlassGlowing;
    }
    world.setBlock(targetX,targetY,targetZ,targetBlock);
    world.setBlockMetadataWithNotify(targetX,targetY,targetZ,meta,2);
    TileEntity te=world.getTileEntity(targetX,targetY,targetZ);
    if (te != null && te instanceof TileEntityColourable) {
      ((TileEntityColourable)te).setColour(blockData.getCubeColour());
    }
  }
}","private static void loadSkinBlockIntoWorld(World world,int x,int y,int z,int xOrigin,int yOrigin,int zOrigin,ICube blockData,ForgeDirection direction,int meta){
  int shiftX=-blockData.getX() - 1;
  int shiftY=blockData.getY() + 1;
  int shiftZ=blockData.getZ();
  int targetX=x + shiftX + xOrigin;
  int targetY=y + yOrigin - shiftY;
  int targetZ=z + shiftZ + zOrigin;
  if (world.isAirBlock(targetX,targetY,targetZ)) {
    Block targetBlock=ModBlocks.colourable;
    if (blockData.getId() == 1) {
      targetBlock=ModBlocks.colourableGlowing;
    }
    if (blockData.getId() == 2) {
      targetBlock=ModBlocks.colourableGlass;
    }
    if (blockData.getId() == 3) {
      targetBlock=ModBlocks.colourableGlassGlowing;
    }
    world.setBlock(targetX,targetY,targetZ,targetBlock);
    world.setBlockMetadataWithNotify(targetX,targetY,targetZ,meta,2);
    TileEntity te=world.getTileEntity(targetX,targetY,targetZ);
    if (te != null && te instanceof TileEntityColourable) {
      ((TileEntityColourable)te).setColour(new CubeColour(blockData.getCubeColour()));
    }
  }
}",0.992530345471522
170335,"private static int clearEquipmentCubesForSkinPart(World world,int x,int y,int z,ISkinPartType skinPart){
  IRectangle3D buildSpace=skinPart.getBuildingSpace();
  IPoint3D offset=skinPart.getOffset();
  int blockCount=0;
  for (int ix=0; ix < buildSpace.getWidth(); ix++) {
    for (int iy=0; iy < buildSpace.getHeight(); iy++) {
      for (int iz=0; iz < buildSpace.getDepth(); iz++) {
        int xTar=x + ix + -offset.getX()+ buildSpace.getX();
        int yTar=y + iy + -offset.getY();
        int zTar=z + iz + offset.getZ()+ buildSpace.getZ();
        if (world.blockExists(xTar,yTar,zTar)) {
          Block block=world.getBlock(xTar,yTar,zTar);
          if (block == ModBlocks.colourable | block == ModBlocks.colourableGlowing | block == ModBlocks.colourableGlass | block == ModBlocks.colourableGlassGlowing) {
            world.setBlockToAir(xTar,yTar,zTar);
            blockCount++;
          }
        }
      }
    }
  }
  return blockCount;
}","private static int clearEquipmentCubesForSkinPart(World world,int x,int y,int z,ISkinPartType skinPart){
  IRectangle3D buildSpace=skinPart.getBuildingSpace();
  IPoint3D offset=skinPart.getOffset();
  int blockCount=0;
  for (int ix=0; ix < buildSpace.getWidth(); ix++) {
    for (int iy=0; iy < buildSpace.getHeight(); iy++) {
      for (int iz=0; iz < buildSpace.getDepth(); iz++) {
        int xTar=x + ix + -offset.getX()+ buildSpace.getX();
        int yTar=y + iy + -offset.getY();
        int zTar=z + iz + offset.getZ()+ buildSpace.getZ();
        if (world.blockExists(xTar,yTar,zTar)) {
          Block block=world.getBlock(xTar,yTar,zTar);
          if (block == ModBlocks.colourable | block == ModBlocks.colourableGlowing | block == ModBlocks.colourableGlass | block == ModBlocks.colourableGlassGlowing) {
            world.setBlockToAir(xTar,yTar,zTar);
            world.removeTileEntity(xTar,yTar,zTar);
            blockCount++;
          }
        }
      }
    }
  }
  return blockCount;
}",0.9735234215885948
170336,"@Override public void renderItem(ItemRenderType type,ItemStack stack,Object... data){
  if (canRenderModel(stack) & type != ItemRenderType.INVENTORY) {
    if (type != ItemRenderType.ENTITY) {
      GL11.glPopMatrix();
    }
    GL11.glPushMatrix();
    int useCount=0;
    boolean hasArrow=false;
    boolean hasArrowSkin=false;
    int arrowSkinId=0;
    if (data.length >= 2) {
      if (data[1] instanceof AbstractClientPlayer & data[0] instanceof RenderBlocks) {
        RenderBlocks renderBlocks=(RenderBlocks)data[0];
        AbstractClientPlayer player=(AbstractClientPlayer)data[1];
        useCount=player.getItemInUseDuration();
        hasArrow=player.inventory.hasItem(Items.arrow);
        IEntityEquipment entityEquipment=EquipmentModelRenderer.INSTANCE.getPlayerCustomEquipmentData(player);
        if (entityEquipment.haveEquipment(SkinTypeRegistry.skinArrow)) {
          hasArrowSkin=true;
          arrowSkinId=entityEquipment.getEquipmentId(SkinTypeRegistry.skinArrow);
        }
        if (!hasArrow) {
          if (player.capabilities.isCreativeMode) {
            hasArrow=true;
          }
        }
      }
    }
    float scale=0.0625F;
    float angle=(float)(((double)System.currentTimeMillis() / 5) % 360F);
switch (type) {
case EQUIPPED:
      GL11.glScalef(1F,-1F,1F);
    GL11.glScalef(1.6F,1.6F,1.6F);
  GL11.glRotatef(-135,0,1,0);
GL11.glRotatef(10,0,0,1);
GL11.glRotatef(-20,1,0,0);
GL11.glRotatef(90,0,1,0);
GL11.glTranslatef(0F * scale,-6F * scale,1F * scale);
break;
case ENTITY:
GL11.glRotatef(180,0,0,1);
GL11.glTranslatef(0F,-10F * scale,0F);
break;
case EQUIPPED_FIRST_PERSON:
GL11.glScalef(1.6F,1.6F,1.6F);
GL11.glRotatef(-135,0,1,0);
GL11.glRotatef(180,0,0,1);
GL11.glRotatef(-90,0,1,0);
GL11.glRotatef(-17,1,0,0);
GL11.glRotatef(2,0,0,1);
GL11.glTranslatef(0F * scale,-2F * scale,1F * scale);
if (useCount > 0) {
GL11.glTranslatef(-5 * scale,3 * scale,1 * scale);
GL11.glRotatef(-6,1,0,0);
GL11.glRotatef(-16,0,1,0);
GL11.glRotatef(2,0,0,1);
}
break;
default :
break;
}
GL11.glEnable(GL11.GL_CULL_FACE);
ModelCustomEquipmetBow model=EquipmentModelRenderer.INSTANCE.customBow;
model.bowUse=useCount;
int equipmentId=EquipmentNBTHelper.getSkinIdFromStack(stack);
Skin skin=ClientModelCache.INSTANCE.getEquipmentItemData(equipmentId);
model.render(null,skin,false);
if (hasArrow) {
GL11.glTranslatef(1 * scale,1 * scale,-12 * scale);
int tarPart=useCount / 10;
if (tarPart > 2) {
tarPart=2;
}
if (skin.getParts().get(tarPart).getMarkerBlocks().size() > 0) {
CubeMarkerData cmd=skin.getParts().get(tarPart).getMarkerBlocks().get(0);
ForgeDirection dir=ForgeDirection.getOrientation(cmd.meta).getOpposite();
GL11.glTranslatef((dir.offsetX + cmd.x) * scale,(dir.offsetY + cmd.y) * scale,(dir.offsetZ + cmd.z) * scale);
GL11.glTranslatef(0.01F * scale,-0.01F * scale,0.01F * scale);
if (hasArrowSkin && ClientModelCache.INSTANCE.isEquipmentInCache(arrowSkinId)) {
Skin arrowSkin=ClientModelCache.INSTANCE.getEquipmentItemData(arrowSkinId);
if (arrowSkin != null) {
arrowSkin.onUsed();
for (int i=0; i < arrowSkin.getParts().size(); i++) {
SkinPart skinPart=arrowSkin.getParts().get(i);
EquipmentPartRenderer.INSTANCE.renderPart(skinPart,scale);
}
}
 else {
ModelArrow.MODEL.render(scale,false);
}
}
 else {
ClientModelCache.INSTANCE.requestEquipmentDataFromServer(arrowSkinId);
ModelArrow.MODEL.render(scale,false);
}
}
}
GL11.glDisable(GL11.GL_CULL_FACE);
GL11.glPopMatrix();
if (type != ItemRenderType.ENTITY) {
GL11.glPushMatrix();
}
}
 else {
IItemRenderer render=Addons.getItemRenderer(stack,type);
if (render != null) {
render.renderItem(type,stack,data);
}
 else {
renderNomalIcon(stack);
}
}
}","@Override public void renderItem(ItemRenderType type,ItemStack stack,Object... data){
  if (canRenderModel(stack) & type != ItemRenderType.INVENTORY) {
    if (type != ItemRenderType.ENTITY) {
      GL11.glPopMatrix();
    }
    GL11.glPushMatrix();
    int useCount=0;
    boolean hasArrow=false;
    boolean hasArrowSkin=false;
    int arrowSkinId=0;
    if (data.length >= 2) {
      if (data[1] instanceof AbstractClientPlayer & data[0] instanceof RenderBlocks) {
        RenderBlocks renderBlocks=(RenderBlocks)data[0];
        AbstractClientPlayer player=(AbstractClientPlayer)data[1];
        useCount=player.getItemInUseDuration();
        hasArrow=player.inventory.hasItem(Items.arrow);
        IEntityEquipment entityEquipment=EquipmentModelRenderer.INSTANCE.getPlayerCustomEquipmentData(player);
        if (entityEquipment.haveEquipment(SkinTypeRegistry.skinArrow)) {
          hasArrowSkin=true;
          arrowSkinId=entityEquipment.getEquipmentId(SkinTypeRegistry.skinArrow);
        }
        if (!hasArrow) {
          if (player.capabilities.isCreativeMode) {
            hasArrow=true;
          }
        }
      }
    }
    float scale=0.0625F;
    float angle=(float)(((double)System.currentTimeMillis() / 5) % 360F);
switch (type) {
case EQUIPPED:
      GL11.glScalef(1F,-1F,1F);
    GL11.glScalef(1.6F,1.6F,1.6F);
  GL11.glRotatef(-135,0,1,0);
GL11.glRotatef(10,0,0,1);
GL11.glRotatef(-20,1,0,0);
GL11.glRotatef(90,0,1,0);
GL11.glTranslatef(0F * scale,-6F * scale,1F * scale);
break;
case ENTITY:
GL11.glRotatef(180,0,0,1);
GL11.glTranslatef(0F,-10F * scale,0F);
break;
case EQUIPPED_FIRST_PERSON:
GL11.glScalef(1.6F,1.6F,1.6F);
GL11.glRotatef(-135,0,1,0);
GL11.glRotatef(180,0,0,1);
GL11.glRotatef(-90,0,1,0);
GL11.glRotatef(-17,1,0,0);
GL11.glRotatef(2,0,0,1);
GL11.glTranslatef(0F * scale,-2F * scale,1F * scale);
if (useCount > 0) {
GL11.glTranslatef(-5 * scale,3 * scale,1 * scale);
GL11.glRotatef(-6,1,0,0);
GL11.glRotatef(-16,0,1,0);
GL11.glRotatef(2,0,0,1);
}
break;
default :
break;
}
GL11.glEnable(GL11.GL_CULL_FACE);
ModelCustomEquipmetBow model=EquipmentModelRenderer.INSTANCE.customBow;
model.bowUse=useCount;
int equipmentId=EquipmentNBTHelper.getSkinIdFromStack(stack);
Skin skin=ClientModelCache.INSTANCE.getEquipmentItemData(equipmentId);
model.render(null,skin,false);
if (hasArrow) {
GL11.glTranslatef(1 * scale,1 * scale,-12 * scale);
int tarPart=useCount / 10;
if (tarPart > 2) {
tarPart=2;
}
if (skin.getParts().get(tarPart).getMarkerBlocks().size() > 0) {
CubeMarkerData cmd=skin.getParts().get(tarPart).getMarkerBlocks().get(0);
ForgeDirection dir=ForgeDirection.getOrientation(cmd.meta - 1);
GL11.glTranslatef((-dir.offsetX + cmd.x) * scale,(-dir.offsetY + cmd.y) * scale,(dir.offsetZ + cmd.z) * scale);
GL11.glTranslatef(-0.01F * scale,0.01F * scale,-0.01F * scale);
if (hasArrowSkin && ClientModelCache.INSTANCE.isEquipmentInCache(arrowSkinId)) {
Skin arrowSkin=ClientModelCache.INSTANCE.getEquipmentItemData(arrowSkinId);
if (arrowSkin != null) {
arrowSkin.onUsed();
for (int i=0; i < arrowSkin.getParts().size(); i++) {
SkinPart skinPart=arrowSkin.getParts().get(i);
EquipmentPartRenderer.INSTANCE.renderPart(skinPart,scale);
}
}
 else {
ModelArrow.MODEL.render(scale,false);
}
}
 else {
ClientModelCache.INSTANCE.requestEquipmentDataFromServer(arrowSkinId);
ModelArrow.MODEL.render(scale,false);
}
}
}
GL11.glDisable(GL11.GL_CULL_FACE);
GL11.glPopMatrix();
if (type != ItemRenderType.ENTITY) {
GL11.glPushMatrix();
}
}
 else {
IItemRenderer render=Addons.getItemRenderer(stack,type);
if (render != null) {
render.renderItem(type,stack,data);
}
 else {
renderNomalIcon(stack);
}
}
}",0.9932664559571251
170337,"@Override public void init(){
  PlayerSkinHandler.init();
  ClientModelCache.init();
  FMLCommonHandler.instance().bus().register(new ModClientFMLEventHandler());
  MinecraftForge.EVENT_BUS.register(new DebugTextHandler());
  try {
    Class.forName(""String_Node_Str"");
    ModLogger.log(""String_Node_Str"");
    shadersModLoaded=true;
  }
 catch (  Exception e) {
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    moreplayermodelsLoaded=true;
    ModLogger.log(""String_Node_Str"");
  }
}","@Override public void init(){
  PlayerSkinHandler.init();
  ClientModelCache.init();
  FMLCommonHandler.instance().bus().register(new ModClientFMLEventHandler());
  MinecraftForge.EVENT_BUS.register(new DebugTextHandler());
  try {
    Class.forName(""String_Node_Str"");
    ModLogger.log(""String_Node_Str"");
    shadersModLoaded=true;
  }
 catch (  Exception e) {
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    moreplayermodelsLoaded=true;
    ModLogger.log(""String_Node_Str"");
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    coloredLightsLoaded=true;
    ModLogger.log(""String_Node_Str"");
  }
}",0.8919164396003633
170338,"public static boolean useSafeTextureRender(){
  if (shadersModLoaded) {
    return true;
  }
  if (ConfigHandler.skinTextureRenderOverride) {
    return true;
  }
  return false;
}","public static boolean useSafeTextureRender(){
  if (shadersModLoaded) {
    return true;
  }
  if (ConfigHandler.skinTextureRenderOverride) {
    return true;
  }
  if (coloredLightsLoaded) {
    return true;
  }
  return false;
}",0.8048780487804879
170339,"@SubscribeEvent @SideOnly(Side.CLIENT) public void onDebugText(RenderGameOverlayEvent.Text event){
  if (event.left != null && event.left.size() > 0) {
    event.left.add(""String_Node_Str"");
    event.left.add(""String_Node_Str"" + EquipmentItemRenderCache.getCacheSize());
    event.left.add(""String_Node_Str"" + ArmourersWorkshop.proxy.getPlayerModelCacheSize());
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void onDebugText(RenderGameOverlayEvent.Text event){
  if (event.left != null && event.left.size() > 0) {
    event.left.add(""String_Node_Str"");
    String prefix=EnumChatFormatting.GOLD + ""String_Node_Str"" + LibModInfo.NAME+ ""String_Node_Str""+ EnumChatFormatting.WHITE;
    event.left.add(prefix + ""String_Node_Str"" + EquipmentItemRenderCache.getCacheSize());
    event.left.add(prefix + ""String_Node_Str"" + ArmourersWorkshop.proxy.getPlayerModelCacheSize());
  }
}",0.8022727272727272
170340,"public TemplateModel get(int idx) throws TemplateModelException {
  final int size=elements.size();
  if (idx < 0 || idx >= size) {
    throw new TemplateModelException(""String_Node_Str"" + idx + ""String_Node_Str""+ (size - 1));
  }
  JSONNode[] wrappedChildren=this.wrappedElements;
  if (wrappedChildren == null) {
    wrappedChildren=new JSONNode[size];
    this.wrappedElements=wrappedChildren;
  }
  JSONNode r=wrappedChildren[idx];
  if (r == null) {
    r=wrap(elements.get(idx));
    if (r == null) {
      r=JSON_NULL_MARK;
    }
    wrappedChildren[idx]=r;
  }
  return r != JSON_NULL_MARK ? r : null;
}","public TemplateModel get(int idx) throws TemplateModelException {
  final int size=elements.size();
  if (idx < 0 || idx >= size) {
    throw new TemplateModelException(""String_Node_Str"" + idx + ""String_Node_Str""+ (size - 1));
  }
  JSONNode[] wrappedChildren=this.wrappedElements;
  if (wrappedChildren == null) {
    wrappedChildren=new JSONNode[size];
    this.wrappedElements=wrappedChildren;
  }
  JSONNode r=wrappedChildren[idx];
  if (r == null) {
    r=wrap(elements.get(idx),this,null);
    if (r == null) {
      r=JSON_NULL_MARK;
    }
    wrappedChildren[idx]=r;
  }
  return r != JSON_NULL_MARK ? r : null;
}",0.9918831168831168
170341,"@Override protected void processMessage(byte[] message,SpoutOutputCollector collector){
  final MetricEnvelope metricEnvelope;
  try {
    metricEnvelope=MetricEnvelopes.fromJson(message);
    logger.debug(""String_Node_Str"",metricEnvelope);
  }
 catch (  RuntimeException re) {
    logger.warn(""String_Node_Str"",re);
    return;
  }
  String tenantId=(String)metricEnvelope.meta.get(""String_Node_Str"");
  if (tenantId == null) {
    logger.error(""String_Node_Str"",DEFAULT_TENANT_ID,metricEnvelope.metric);
    tenantId=DEFAULT_TENANT_ID;
  }
  collector.emit(new Values(new TenantIdAndMetricName(tenantId,metricEnvelope.metric.definition().name),metricEnvelope.creationTime,metricEnvelope.metric));
}","@Override protected void processMessage(byte[] message,SpoutOutputCollector collector){
  final MetricEnvelope metricEnvelope;
  try {
    metricEnvelope=MetricEnvelopes.fromJson(message);
    logger.debug(""String_Node_Str"",metricEnvelope);
  }
 catch (  RuntimeException re) {
    logger.warn(""String_Node_Str"",re);
    return;
  }
  String tenantId=(String)metricEnvelope.meta.get(""String_Node_Str"");
  if (tenantId == null) {
    logger.error(""String_Node_Str"",DEFAULT_TENANT_ID,metricEnvelope.metric);
    tenantId=DEFAULT_TENANT_ID;
  }
  final Metric metric=metricEnvelope.metric;
  if (metric.dimensions == null) {
    metric.dimensions=EMPTY_DIMENSIONS;
  }
  collector.emit(new Values(new TenantIdAndMetricName(tenantId,metricEnvelope.metric.definition().name),metricEnvelope.creationTime,metric));
}",0.9078860172299535
170342,"@Override public void execute(Tuple tuple){
  LOG.debug(""String_Node_Str"",tuple);
  try {
    if (Streams.DEFAULT_STREAM_ID.equals(tuple.getSourceStreamId())) {
      final MetricDefinitionAndTenantId metricDefinitionAndTenantId=(MetricDefinitionAndTenantId)tuple.getValue(0);
      final Metric metric=(Metric)tuple.getValue(1);
      checkLag(metric);
      LOG.debug(""String_Node_Str"",metricDefinitionAndTenantId);
      final List<MetricDefinitionAndTenantId> matches=matcher.match(metricDefinitionAndTenantId);
      for (      final MetricDefinitionAndTenantId match : matches)       collector.emit(tuple,new Values(match,metric));
    }
 else {
      String eventType=tuple.getString(0);
      MetricDefinitionAndTenantId metricDefinitionAndTenantId=(MetricDefinitionAndTenantId)tuple.getValue(1);
      LOG.debug(""String_Node_Str"",eventType,metricDefinitionAndTenantId);
      if (EventProcessingBolt.METRIC_ALARM_EVENT_STREAM_ID.equals(tuple.getSourceStreamId())) {
        if (EventProcessingBolt.DELETED.equals(eventType))         removeSubAlarm(metricDefinitionAndTenantId,tuple.getString(2));
      }
 else       if (EventProcessingBolt.METRIC_SUB_ALARM_EVENT_STREAM_ID.equals(tuple.getSourceStreamId())) {
        if (EventProcessingBolt.CREATED.equals(eventType)) synchronized (SENTINAL) {
          final SubAlarm subAlarm=(SubAlarm)tuple.getValue(2);
          addMetricDef(metricDefinitionAndTenantId,subAlarm.getId());
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",tuple,e);
  }
 finally {
    collector.ack(tuple);
  }
}","@Override public void execute(Tuple tuple){
  LOG.debug(""String_Node_Str"",tuple);
  try {
    if (Streams.DEFAULT_STREAM_ID.equals(tuple.getSourceStreamId())) {
      final MetricDefinitionAndTenantId metricDefinitionAndTenantId=(MetricDefinitionAndTenantId)tuple.getValue(0);
      final Metric metric=(Metric)tuple.getValue(1);
      checkLag(metric);
      LOG.debug(""String_Node_Str"",metricDefinitionAndTenantId);
      final List<MetricDefinitionAndTenantId> matches=matcher.match(metricDefinitionAndTenantId);
      for (      final MetricDefinitionAndTenantId match : matches)       collector.emit(new Values(match,metric));
    }
 else {
      String eventType=tuple.getString(0);
      MetricDefinitionAndTenantId metricDefinitionAndTenantId=(MetricDefinitionAndTenantId)tuple.getValue(1);
      LOG.debug(""String_Node_Str"",eventType,metricDefinitionAndTenantId);
      if (EventProcessingBolt.METRIC_ALARM_EVENT_STREAM_ID.equals(tuple.getSourceStreamId())) {
        if (EventProcessingBolt.DELETED.equals(eventType))         removeSubAlarm(metricDefinitionAndTenantId,tuple.getString(2));
      }
 else       if (EventProcessingBolt.METRIC_SUB_ALARM_EVENT_STREAM_ID.equals(tuple.getSourceStreamId())) {
        if (EventProcessingBolt.CREATED.equals(eventType)) synchronized (SENTINAL) {
          final SubAlarm subAlarm=(SubAlarm)tuple.getValue(2);
          addMetricDef(metricDefinitionAndTenantId,subAlarm.getId());
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",tuple,e);
  }
 finally {
    collector.ack(tuple);
  }
}",0.9980964467005076
170343,"@Override public List<MetricDefinition> findForAlarms(){
  Handle h=db.open();
  try {
    List<Map<String,Object>> rows=h.createQuery(METRIC_DEF_SQL).list();
    List<MetricDefinition> metricDefs=new ArrayList<MetricDefinition>(rows.size());
    for (    Map<String,Object> row : rows) {
      String name=(String)row.get(""String_Node_Str"");
      String dimensionSet=(String)row.get(""String_Node_Str"");
      Map<String,String> dimensions=null;
      if (dimensionSet != null) {
        for (        String kvStr : dimensionSet.split(""String_Node_Str"")) {
          String[] kv=kvStr.split(""String_Node_Str"");
          if (kv.length > 1) {
            if (dimensions == null)             dimensions=new HashMap<String,String>();
            dimensions.put(kv[0],kv[1]);
          }
        }
      }
      metricDefs.add(new MetricDefinition(name,dimensions));
    }
    return metricDefs;
  }
  finally {
    h.close();
  }
}","@Override public List<MetricDefinition> findForAlarms(){
  Handle h=db.open();
  try {
    List<Map<String,Object>> rows=h.createQuery(METRIC_DEF_SQL).list();
    List<MetricDefinition> metricDefs=new ArrayList<MetricDefinition>(rows.size());
    for (    Map<String,Object> row : rows) {
      String metric_name=(String)row.get(""String_Node_Str"");
      String dimensionSet=(String)row.get(""String_Node_Str"");
      Map<String,String> dimensions=null;
      if (dimensionSet != null) {
        for (        String kvStr : dimensionSet.split(""String_Node_Str"")) {
          String[] kv=kvStr.split(""String_Node_Str"");
          if (kv.length > 1) {
            if (dimensions == null)             dimensions=new HashMap<String,String>();
            dimensions.put(kv[0],kv[1]);
          }
        }
      }
      metricDefs.add(new MetricDefinition(metric_name,dimensions));
    }
    return metricDefs;
  }
  finally {
    h.close();
  }
}",0.9925213675213675
170344,"@Override public List<List<?>> deserialize(byte[] tuple){
  FlatMetric flatMetric=FlatMetrics.fromJson(tuple);
  Metric metric=flatMetric.toMetric();
  return Collections.<List<?>>singletonList(Arrays.asList(metric.definition,metric));
}","@Override public List<List<?>> deserialize(byte[] tuple){
  FlatMetric flatMetric=FlatMetrics.fromJson(tuple);
  Metric metric=flatMetric.toMetric();
  return Collections.<List<?>>singletonList(Arrays.asList(metric.definition(),metric));
}",0.9957983193277312
170345,"public void shouldDeserialize(){
  FlatMetric initial=new FlatMetric(""String_Node_Str"",null,123,5.0);
  List<List<?>> metrics=deserializer.deserialize(FlatMetrics.toJson(initial).getBytes());
  Metric expected=initial.toMetric();
  assertEquals(metrics,Collections.singletonList(Arrays.asList(expected.definition,expected)));
}","public void shouldDeserialize(){
  FlatMetric initial=new FlatMetric(""String_Node_Str"",null,123,5.0);
  List<List<?>> metrics=deserializer.deserialize(FlatMetrics.toJson(initial).getBytes());
  Metric expected=initial.toMetric();
  assertEquals(metrics,Collections.singletonList(Arrays.asList(expected.definition(),expected)));
}",0.9969512195121952
170346,"/** 
 * Return a paged list of computer
 * @param page Page to display
 * @param pageSize Number of computers per page
 * @param sortBy Computer property used for sorting
 * @param order Sort order (either or asc or desc)
 * @param filter Filter applied on the name column
 */
public static PagedList<Computer> page(int page,int pageSize,String sortBy,String order,String filter){
  return find.where().ilike(""String_Node_Str"",""String_Node_Str"" + filter + ""String_Node_Str"").orderBy(sortBy + ""String_Node_Str"" + order).fetch(""String_Node_Str"").setFirstRow(page).setMaxRows(pageSize).findPagedList();
}","/** 
 * Return a paged list of computer
 * @param page Page to display
 * @param pageSize Number of computers per page
 * @param sortBy Computer property used for sorting
 * @param order Sort order (either or asc or desc)
 * @param filter Filter applied on the name column
 */
public static PagedList<Computer> page(int page,int pageSize,String sortBy,String order,String filter){
  return find.where().ilike(""String_Node_Str"",""String_Node_Str"" + filter + ""String_Node_Str"").orderBy(sortBy + ""String_Node_Str"" + order).fetch(""String_Node_Str"").setFirstRow(page * pageSize).setMaxRows(pageSize).findPagedList();
}",0.9909315746084087
170347,"/** 
 * Initialize the rects with borders, taking shadows into account
 */
private void initRectsWithBorders(){
  mBorderRect.set(mRect);
  mBorderRect.left+=mBorderWidth;
  mBorderRect.top+=mBorderWidth;
  mBorderRect.right-=mBorderWidth;
  mBorderRect.bottom-=mBorderWidth;
  if (mShadowWidth > 0) {
    mBorderRect.right-=mShadowWidth;
    mBorderRect.bottom-=mShadowWidth;
  }
  mImageRect.set(mBorderRect.left + mBorderWidth,mBorderRect.top + mBorderWidth,mBorderRect.right - mBorderWidth,mBorderRect.bottom - mBorderWidth);
}","/** 
 * Initialize the rects with borders, taking shadows into account
 */
private void initRectsWithBorders(){
  mBorderRect.set(mRect);
  mBorderRect.inset(mBorderWidth / 1.3f,mBorderWidth / 1.3f);
  if (mShadowWidth > 0) {
    mBorderRect.right-=mShadowWidth;
    mBorderRect.bottom-=mShadowWidth;
  }
  mImageRect.set(mBorderRect);
  mImageRect.inset(mBorderWidth / 1.3f,mBorderWidth / 1.3f);
}",0.4520990312163617
170348,"private Map<String,String> prepDimensions(Map<String,String> dimMap){
  Map<String,String> newDimMap=new TreeMap<>();
  if (dimMap != null) {
    for (    String dimName : dimMap.keySet()) {
      if (dimName != null && !dimName.isEmpty()) {
        String dimValue=dimMap.get(dimName);
        if (dimValue != null && !dimValue.isEmpty()) {
          newDimMap.put(trunc(dimName,MAX_COLUMN_LENGTH),trunc(dimValue,MAX_COLUMN_LENGTH));
        }
      }
    }
  }
  return newDimMap;
}","private Map<String,String> prepDimensions(Map<String,String> dimMap){
  Map<String,String> newDimMap=new TreeMap<>();
  if (dimMap != null) {
    for (    String dimName : dimMap.keySet()) {
      if (dimName != null && !dimName.isEmpty()) {
        String dimValue=dimMap.get(dimName);
        if (dimValue != null && !dimValue.isEmpty()) {
          newDimMap.put(trunc(dimName,MAX_COLUMN_LENGTH),trunc(dimValue,MAX_COLUMN_LENGTH));
          dimensionCounter.inc();
        }
      }
    }
  }
  return newDimMap;
}",0.9660678642714572
170349,"private int processEnvelope(MetricEnvelope metricEnvelope){
  int metricCount=0;
  Metric metric=metricEnvelope.metric;
  Map<String,Object> meta=metricEnvelope.meta;
  logger.debug(""String_Node_Str"",ordinal);
  logger.debug(""String_Node_Str"",metric);
  logger.debug(""String_Node_Str"",meta);
  String tenantId=""String_Node_Str"";
  if (meta.containsKey(TENANT_ID)) {
    tenantId=(String)meta.get(TENANT_ID);
  }
 else {
    logger.warn(""String_Node_Str"");
    logger.warn(""String_Node_Str"",metric.toString());
    logger.warn(""String_Node_Str"",meta.toString());
  }
  String region=""String_Node_Str"";
  if (meta.containsKey(REGION)) {
    region=(String)meta.get(REGION);
  }
 else {
    logger.warn(""String_Node_Str"");
    logger.warn(""String_Node_Str"",metric.toString());
    logger.warn(""String_Node_Str"",meta.toString());
  }
  StringBuilder definitionIdStringToHash=new StringBuilder(trunc(metric.getName(),MAX_COLUMN_LENGTH));
  definitionIdStringToHash.append(trunc(tenantId,MAX_COLUMN_LENGTH));
  definitionIdStringToHash.append(trunc(region,MAX_COLUMN_LENGTH));
  byte[] definitionIdSha1Hash=DigestUtils.sha(definitionIdStringToHash.toString());
  Sha1HashId definitionSha1HashId=new Sha1HashId((definitionIdSha1Hash));
  metricRepo.addDefinitionToBatch(definitionSha1HashId,trunc(metric.getName(),MAX_COLUMN_LENGTH),trunc(tenantId,MAX_COLUMN_LENGTH),trunc(region,MAX_COLUMN_LENGTH));
  definitionCounter.inc();
  StringBuilder dimensionIdStringToHash=new StringBuilder();
  Map<String,String> preppedDimMap=prepDimensions(metric.getDimensions());
  for (  Map.Entry<String,String> entry : preppedDimMap.entrySet()) {
    dimensionIdStringToHash.append(entry.getKey());
    dimensionIdStringToHash.append(entry.getValue());
  }
  byte[] dimensionIdSha1Hash=DigestUtils.sha(dimensionIdStringToHash.toString());
  Sha1HashId dimensionsSha1HashId=new Sha1HashId(dimensionIdSha1Hash);
  for (  Map.Entry<String,String> entry : preppedDimMap.entrySet()) {
    metricRepo.addDimensionToBatch(dimensionsSha1HashId,entry.getKey(),entry.getValue());
    dimensionCounter.inc();
  }
  StringBuilder definitionDimensionsIdStringToHash=new StringBuilder(definitionSha1HashId.toHexString());
  definitionDimensionsIdStringToHash.append(dimensionsSha1HashId.toHexString());
  byte[] definitionDimensionsIdSha1Hash=DigestUtils.sha(definitionDimensionsIdStringToHash.toString());
  Sha1HashId definitionDimensionsSha1HashId=new Sha1HashId(definitionDimensionsIdSha1Hash);
  metricRepo.addDefinitionDimensionToBatch(definitionDimensionsSha1HashId,definitionSha1HashId,dimensionsSha1HashId);
  definitionDimensionsCounter.inc();
  String timeStamp=simpleDateFormat.format(new Date(metric.getTimestamp()));
  double value=metric.getValue();
  metricRepo.addMetricToBatch(definitionDimensionsSha1HashId,timeStamp,value,metric.getValueMeta());
  metricCounter.inc();
  metricCount++;
  return metricCount;
}","private int processEnvelope(MetricEnvelope metricEnvelope){
  int metricCount=0;
  Metric metric=metricEnvelope.metric;
  Map<String,Object> meta=metricEnvelope.meta;
  logger.debug(""String_Node_Str"",ordinal);
  logger.debug(""String_Node_Str"",metric);
  logger.debug(""String_Node_Str"",meta);
  String tenantId=""String_Node_Str"";
  if (meta.containsKey(TENANT_ID)) {
    tenantId=(String)meta.get(TENANT_ID);
  }
 else {
    logger.warn(""String_Node_Str"");
    logger.warn(""String_Node_Str"",metric.toString());
    logger.warn(""String_Node_Str"",meta.toString());
  }
  String region=""String_Node_Str"";
  if (meta.containsKey(REGION)) {
    region=(String)meta.get(REGION);
  }
 else {
    logger.warn(""String_Node_Str"");
    logger.warn(""String_Node_Str"",metric.toString());
    logger.warn(""String_Node_Str"",meta.toString());
  }
  StringBuilder definitionIdStringToHash=new StringBuilder(trunc(metric.getName(),MAX_COLUMN_LENGTH));
  definitionIdStringToHash.append(trunc(tenantId,MAX_COLUMN_LENGTH));
  definitionIdStringToHash.append(trunc(region,MAX_COLUMN_LENGTH));
  byte[] definitionIdSha1Hash=DigestUtils.sha(definitionIdStringToHash.toString());
  Sha1HashId definitionSha1HashId=new Sha1HashId((definitionIdSha1Hash));
  metricRepo.addDefinitionToBatch(definitionSha1HashId,trunc(metric.getName(),MAX_COLUMN_LENGTH),trunc(tenantId,MAX_COLUMN_LENGTH),trunc(region,MAX_COLUMN_LENGTH));
  definitionCounter.inc();
  StringBuilder dimensionIdStringToHash=new StringBuilder();
  Map<String,String> preppedDimMap=prepDimensions(metric.getDimensions());
  for (  Map.Entry<String,String> entry : preppedDimMap.entrySet()) {
    dimensionIdStringToHash.append(entry.getKey());
    dimensionIdStringToHash.append(entry.getValue());
  }
  byte[] dimensionIdSha1Hash=DigestUtils.sha(dimensionIdStringToHash.toString());
  Sha1HashId dimensionsSha1HashId=new Sha1HashId(dimensionIdSha1Hash);
  metricRepo.addDimensionsToBatch(dimensionsSha1HashId,preppedDimMap);
  StringBuilder definitionDimensionsIdStringToHash=new StringBuilder(definitionSha1HashId.toHexString());
  definitionDimensionsIdStringToHash.append(dimensionsSha1HashId.toHexString());
  byte[] definitionDimensionsIdSha1Hash=DigestUtils.sha(definitionDimensionsIdStringToHash.toString());
  Sha1HashId definitionDimensionsSha1HashId=new Sha1HashId(definitionDimensionsIdSha1Hash);
  metricRepo.addDefinitionDimensionToBatch(definitionDimensionsSha1HashId,definitionSha1HashId,dimensionsSha1HashId);
  definitionDimensionsCounter.inc();
  String timeStamp=simpleDateFormat.format(new Date(metric.getTimestamp()));
  double value=metric.getValue();
  metricRepo.addMetricToBatch(definitionDimensionsSha1HashId,timeStamp,value,metric.getValueMeta());
  metricCounter.inc();
  metricCount++;
  return metricCount;
}",0.9557241136002822
170350,"@Override public void addDefinitionToBatch(final Sha1HashId defId,final String name,final String tenantId,final String region){
  final Def def=new Def(defId,name,tenantId,region);
  this.defMap.put(defId,def);
}","@Override public void addDefinitionToBatch(final Sha1HashId defId,final String name,final String tenantId,final String region){
  if (!this.defMap.containsKey(defId)) {
    final Def def=new Def(defId,name,tenantId,region);
    this.defMap.put(defId,def);
  }
}",0.8964059196617337
170351,"@Override public void addDefinitionDimensionToBatch(final Sha1HashId defDimsId,final Sha1HashId defId,Sha1HashId dimId){
  final DefDim defDim=new DefDim(defDimsId,defId,dimId);
  this.defDimMap.put(defDimsId,defDim);
}","@Override public void addDefinitionDimensionToBatch(final Sha1HashId defDimsId,final Sha1HashId defId,Sha1HashId dimId){
  if (!this.defDimMap.containsKey(defDimsId)) {
    final DefDim defDim=new DefDim(defDimsId,defId,dimId);
    this.defDimMap.put(defDimsId,defDim);
  }
}",0.8866396761133604
170352,"@Override public void addDefinitionToBatch(Sha1HashId defId,String name,String tenantId,String region){
  if (definitionsIdCache.getIfPresent(defId) == null) {
    logger.debug(""String_Node_Str"",defId.toHexString(),name,tenantId,region);
    stagedDefinitionsBatch.add().bind(""String_Node_Str"",defId.getSha1Hash()).bind(""String_Node_Str"",name).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",region);
    definitionIdSet.add(defId);
    definitionCacheMissMeter.mark();
  }
 else {
    definitionCacheHitMeter.mark();
  }
}","@Override public void addDefinitionToBatch(Sha1HashId defId,String name,String tenantId,String region){
  if (definitionsIdCache.getIfPresent(defId) == null) {
    definitionCacheMissMeter.mark();
    if (!definitionIdSet.contains(defId)) {
      logger.debug(""String_Node_Str"",defId.toHexString(),name,tenantId,region);
      stagedDefinitionsBatch.add().bind(""String_Node_Str"",defId.getSha1Hash()).bind(""String_Node_Str"",name).bind(""String_Node_Str"",tenantId).bind(""String_Node_Str"",region);
      definitionIdSet.add(defId);
    }
  }
 else {
    definitionCacheHitMeter.mark();
  }
}",0.8568872987477638
170353,"@Override public void addDefinitionDimensionToBatch(Sha1HashId defDimsId,Sha1HashId defId,Sha1HashId dimId){
  if (definitionDimensionsIdCache.getIfPresent(defDimsId) == null) {
    logger.debug(""String_Node_Str"",defDimsId.toHexString(),defId,dimId);
    stagedDefinitionDimensionsBatch.add().bind(""String_Node_Str"",defDimsId.getSha1Hash()).bind(""String_Node_Str"",defId.getSha1Hash()).bind(""String_Node_Str"",dimId.getSha1Hash());
    definitionDimensionsIdSet.add(defDimsId);
    definitionDimensionCacheMissMeter.mark();
  }
 else {
    definitionDimensionCacheHitMeter.mark();
  }
}","@Override public void addDefinitionDimensionToBatch(Sha1HashId defDimsId,Sha1HashId defId,Sha1HashId dimId){
  if (definitionDimensionsIdCache.getIfPresent(defDimsId) == null) {
    definitionDimensionCacheMissMeter.mark();
    if (!definitionDimensionsIdSet.contains(defDimsId)) {
      logger.debug(""String_Node_Str"",defDimsId.toHexString(),defId,dimId);
      stagedDefinitionDimensionsBatch.add().bind(""String_Node_Str"",defDimsId.getSha1Hash()).bind(""String_Node_Str"",defId.getSha1Hash()).bind(""String_Node_Str"",dimId.getSha1Hash());
      definitionDimensionsIdSet.add(defDimsId);
    }
  }
 else {
    definitionDimensionCacheHitMeter.mark();
  }
}",0.8449111470113085
170354,"public void delete(long id){
  for (  RelationCheck rel : relations.values()) {
    rel.deleteFrom(id);
    rel.deleteTo(id);
  }
}","public void delete(long id){
synchronized (relations) {
    for (    RelationCheck rel : relations.values()) {
      rel.deleteFrom(id);
      rel.deleteTo(id);
    }
  }
}",0.8646864686468647
170355,"private boolean updateAngleBands(Product multiSizeProduct,Product targetProduct,S2BandConstants bandConstants){
  Vector<RenderedOp> inputsZenith=new Vector(17);
  Vector<RenderedOp> inputsAzimuth=new Vector(17);
  String azimuthAnglesBandName=String.format(""String_Node_Str"",bandConstants.getPhysicalName());
  String zenithAnglesBandName=String.format(""String_Node_Str"",bandConstants.getPhysicalName());
  Band bandZenith=targetProduct.getBand(zenithAnglesBandName);
  Band bandAzimuth=targetProduct.getBand(azimuthAnglesBandName);
  if (bandAzimuth == null || bandZenith == null) {
    return false;
  }
  for (int detectorId=1; detectorId <= 12; detectorId++) {
    String maskName=String.format(""String_Node_Str"",bandConstants.getFilenameBandId(),detectorId);
    String nextMaskName=String.format(""String_Node_Str"",bandConstants.getFilenameBandId(),detectorId + 1);
    if (multiSizeProduct.getMaskGroup().get(maskName) == null) {
      continue;
    }
    String maskExpression;
    if (multiSizeProduct.getMaskGroup().get(nextMaskName) == null) {
      maskExpression=String.format(""String_Node_Str"",maskName);
    }
 else {
      maskExpression=String.format(""String_Node_Str"",maskName,nextMaskName);
    }
    MultiLevelImage footprint=multiSizeProduct.getMaskImage(maskExpression,multiSizeProduct.getBand(bandConstants.getPhysicalName()));
    MultiLevelImage footprintFinal=S2ResamplerUtils.createInterpolatedImage(footprint,0.0f,multiSizeProduct.getBand(bandConstants.getPhysicalName()).getImageToModelTransform(),referenceWidth,referenceHeight,referenceTileSize,referenceMultiLevelModel,S2ResamplerUtils.getInterpolation(""String_Node_Str""));
    S2BandAnglesGridByDetector[] anglesGridByDetector=((Sentinel2OrthoProductReader)multiSizeProduct.getProductReader()).getMetadataHeader().getAnglesGridByDetector(bandConstants.getBandIndex(),detectorId);
    float[] extendedZenithData=S2ResamplerUtils.extendDataV2(anglesGridByDetector[0].getData(),anglesGridByDetector[0].getWidth(),anglesGridByDetector[0].getHeight());
    float[] extendedAzimuthData=S2ResamplerUtils.extendDataV2(anglesGridByDetector[1].getData(),anglesGridByDetector[1].getWidth(),anglesGridByDetector[1].getHeight());
    int extendedWidth=anglesGridByDetector[0].getWidth() + 2;
    int extendedHeight=anglesGridByDetector[0].getHeight() + 2;
    AffineTransform originalAffineTransform5000=new AffineTransform(anglesGridByDetector[0].getResX(),0.0f,0.0f,-anglesGridByDetector[0].getResX(),anglesGridByDetector[0].originX,anglesGridByDetector[0].originY);
    AffineTransform extendedAffineTransform5000=(AffineTransform)originalAffineTransform5000.clone();
    extendedAffineTransform5000.translate(-1d,-1d);
    MultiLevelImage zenithMultiLevelImage=S2ResamplerUtils.createMultiLevelImage(extendedZenithData,extendedWidth,extendedHeight,extendedAffineTransform5000);
    MultiLevelImage targetImageZenith=S2ResamplerUtils.createInterpolatedImage(zenithMultiLevelImage,0.0f,extendedAffineTransform5000,referenceWidth,referenceHeight,referenceTileSize,referenceMultiLevelModel,S2ResamplerUtils.getInterpolation(""String_Node_Str""));
    MultiLevelImage azimuthMultiLevelImage=S2ResamplerUtils.createMultiLevelImage(extendedAzimuthData,extendedWidth,extendedHeight,extendedAffineTransform5000);
    MultiLevelImage targetImageAzimuth=S2ResamplerUtils.createInterpolatedImage(azimuthMultiLevelImage,0.0f,extendedAffineTransform5000,referenceWidth,referenceHeight,referenceTileSize,referenceMultiLevelModel,S2ResamplerUtils.getInterpolation(""String_Node_Str""));
    ImageLayout imageLayout=new ImageLayout();
    imageLayout.setMinX(0);
    imageLayout.setMinY(0);
    imageLayout.setTileWidth(DEFAULT_JAI_TILE_SIZE);
    imageLayout.setTileHeight(DEFAULT_JAI_TILE_SIZE);
    imageLayout.setTileGridXOffset(0);
    imageLayout.setTileGridYOffset(0);
    RenderingHints hints=new RenderingHints(JAI.KEY_TILE_CACHE,JAI.getDefaultInstance().getTileCache());
    hints.put(JAI.KEY_IMAGE_LAYOUT,imageLayout);
    RenderedOp multiZenith=MultiplyDescriptor.create(targetImageZenith.getImage(0),footprintFinal.getImage(0),hints);
    multiZenith=MultiplyConstDescriptor.create(multiZenith,new double[]{1 / 255.0},hints);
    RenderedOp multiAzimuth=MultiplyDescriptor.create(targetImageAzimuth.getImage(0),footprintFinal.getImage(0),hints);
    multiAzimuth=MultiplyConstDescriptor.create(multiAzimuth,new double[]{1 / 255.0},hints);
    inputsZenith.add(multiZenith);
    inputsAzimuth.add(multiAzimuth);
  }
  if (inputsAzimuth.size() == 0 || inputsZenith.size() == 0) {
    return false;
  }
  ImageLayout imageLayout=new ImageLayout();
  imageLayout.setMinX(0);
  imageLayout.setMinY(0);
  imageLayout.setTileWidth(DEFAULT_JAI_TILE_SIZE);
  imageLayout.setTileHeight(DEFAULT_JAI_TILE_SIZE);
  imageLayout.setTileGridXOffset(0);
  imageLayout.setTileGridYOffset(0);
  RenderingHints hints=new RenderingHints(JAI.KEY_TILE_CACHE,JAI.getDefaultInstance().getTileCache());
  hints.put(JAI.KEY_IMAGE_LAYOUT,imageLayout);
  RenderedOp finalAnglesZenith=AddCollectionDescriptor.create(inputsZenith,hints);
  RenderedOp finalAnglesAzimuth=AddCollectionDescriptor.create(inputsAzimuth,hints);
  MultiLevelImage finalImageZenith=new DefaultMultiLevelImage(new DefaultMultiLevelSource(finalAnglesZenith,referenceMultiLevelModel,Interpolation.getInstance(Interpolation.INTERP_NEAREST)));
  MultiLevelImage finalImageAzimuth=new DefaultMultiLevelImage(new DefaultMultiLevelSource(finalAnglesAzimuth,referenceMultiLevelModel,Interpolation.getInstance(Interpolation.INTERP_NEAREST)));
  bandZenith.setSourceImage(S2ResamplerUtils.adjustImageToModelTransform(finalImageZenith,referenceMultiLevelModel));
  bandAzimuth.setSourceImage(S2ResamplerUtils.adjustImageToModelTransform(finalImageAzimuth,referenceMultiLevelModel));
  return true;
}","private boolean updateAngleBands(Product multiSizeProduct,Product targetProduct,S2BandConstants bandConstants){
  Vector<RenderedOp> inputsZenith=new Vector(17);
  Vector<RenderedOp> inputsAzimuth=new Vector(17);
  String azimuthAnglesBandName=String.format(""String_Node_Str"",bandConstants.getPhysicalName());
  String zenithAnglesBandName=String.format(""String_Node_Str"",bandConstants.getPhysicalName());
  Band bandZenith=targetProduct.getBand(zenithAnglesBandName);
  Band bandAzimuth=targetProduct.getBand(azimuthAnglesBandName);
  if (bandAzimuth == null || bandZenith == null) {
    return false;
  }
  for (int detectorId=1; detectorId <= 12; detectorId++) {
    String maskName=String.format(""String_Node_Str"",bandConstants.getFilenameBandId(),detectorId);
    String nextMaskName=String.format(""String_Node_Str"",bandConstants.getFilenameBandId(),detectorId + 1);
    if (multiSizeProduct.getMaskGroup().get(maskName) == null) {
      continue;
    }
    String maskExpression;
    if (multiSizeProduct.getMaskGroup().get(nextMaskName) == null) {
      maskExpression=String.format(""String_Node_Str"",maskName);
    }
 else {
      maskExpression=String.format(""String_Node_Str"",maskName,nextMaskName);
    }
    MultiLevelImage footprint=multiSizeProduct.getMaskImage(maskExpression,multiSizeProduct.getBand(bandConstants.getPhysicalName()));
    MultiLevelImage footprintFinal=S2ResamplerUtils.createInterpolatedImage(footprint,0.0f,multiSizeProduct.getBand(bandConstants.getPhysicalName()).getImageToModelTransform(),referenceWidth,referenceHeight,referenceTileSize,referenceMultiLevelModel,S2ResamplerUtils.getInterpolation(""String_Node_Str""));
    S2BandAnglesGridByDetector[] anglesGridByDetector=((Sentinel2OrthoProductReader)multiSizeProduct.getProductReader()).getMetadataHeader().getAnglesGridByDetector(bandConstants.getBandIndex(),detectorId);
    float[] extendedZenithData=S2ResamplerUtils.extendDataV2(anglesGridByDetector[0].getData(),anglesGridByDetector[0].getWidth(),anglesGridByDetector[0].getHeight());
    float[] extendedAzimuthData=S2ResamplerUtils.extendDataV2(anglesGridByDetector[1].getData(),anglesGridByDetector[1].getWidth(),anglesGridByDetector[1].getHeight());
    int extendedWidth=anglesGridByDetector[0].getWidth() + 2;
    int extendedHeight=anglesGridByDetector[0].getHeight() + 2;
    AffineTransform originalAffineTransform5000=new AffineTransform(anglesGridByDetector[0].getResX(),0.0f,0.0f,-anglesGridByDetector[0].getResX(),anglesGridByDetector[0].originX,anglesGridByDetector[0].originY);
    AffineTransform extendedAffineTransform5000=(AffineTransform)originalAffineTransform5000.clone();
    extendedAffineTransform5000.translate(-1d,-1d);
    MultiLevelImage zenithMultiLevelImage=S2ResamplerUtils.createMultiLevelImage(extendedZenithData,extendedWidth,extendedHeight,extendedAffineTransform5000);
    MultiLevelImage targetImageZenith=S2ResamplerUtils.createInterpolatedImage(zenithMultiLevelImage,0.0f,extendedAffineTransform5000,referenceWidth,referenceHeight,referenceTileSize,referenceMultiLevelModel,S2ResamplerUtils.getInterpolation(""String_Node_Str""));
    MultiLevelImage azimuthMultiLevelImage=S2ResamplerUtils.createMultiLevelImage(extendedAzimuthData,extendedWidth,extendedHeight,extendedAffineTransform5000);
    MultiLevelImage targetImageAzimuth=S2ResamplerUtils.createInterpolatedImage(azimuthMultiLevelImage,0.0f,extendedAffineTransform5000,referenceWidth,referenceHeight,referenceTileSize,referenceMultiLevelModel,S2ResamplerUtils.getInterpolation(""String_Node_Str""));
    ImageLayout imageLayout=new ImageLayout();
    imageLayout.setMinX(0);
    imageLayout.setMinY(0);
    imageLayout.setTileWidth(DEFAULT_JAI_TILE_SIZE);
    imageLayout.setTileHeight(DEFAULT_JAI_TILE_SIZE);
    imageLayout.setTileGridXOffset(0);
    imageLayout.setTileGridYOffset(0);
    RenderingHints hints=new RenderingHints(JAI.KEY_TILE_CACHE,JAI.getDefaultInstance().getTileCache());
    hints.put(JAI.KEY_IMAGE_LAYOUT,imageLayout);
    RenderedOp multiZenith=MultiplyDescriptor.create(targetImageZenith.getImage(0),footprintFinal.getImage(0),hints);
    multiZenith=MultiplyConstDescriptor.create(multiZenith,new double[]{1 / 255.0},hints);
    RenderedOp multiAzimuth=MultiplyDescriptor.create(targetImageAzimuth.getImage(0),footprintFinal.getImage(0),hints);
    multiAzimuth=MultiplyConstDescriptor.create(multiAzimuth,new double[]{1 / 255.0},hints);
    inputsZenith.add(multiZenith);
    inputsAzimuth.add(multiAzimuth);
  }
  if (inputsAzimuth.size() == 0 || inputsZenith.size() == 0) {
    return false;
  }
  ImageLayout imageLayout=new ImageLayout();
  imageLayout.setMinX(0);
  imageLayout.setMinY(0);
  imageLayout.setTileWidth(DEFAULT_JAI_TILE_SIZE);
  imageLayout.setTileHeight(DEFAULT_JAI_TILE_SIZE);
  imageLayout.setTileGridXOffset(0);
  imageLayout.setTileGridYOffset(0);
  RenderingHints hints=new RenderingHints(JAI.KEY_TILE_CACHE,JAI.getDefaultInstance().getTileCache());
  hints.put(JAI.KEY_IMAGE_LAYOUT,imageLayout);
  RenderedOp finalAnglesZenith;
  RenderedOp finalAnglesAzimuth;
  if (inputsZenith.size() > 1) {
    finalAnglesZenith=AddCollectionDescriptor.create(inputsZenith,hints);
  }
 else {
    finalAnglesZenith=inputsZenith.firstElement();
  }
  if (inputsAzimuth.size() > 1) {
    finalAnglesAzimuth=AddCollectionDescriptor.create(inputsAzimuth,hints);
  }
 else {
    finalAnglesAzimuth=inputsAzimuth.firstElement();
  }
  MultiLevelImage finalImageZenith=new DefaultMultiLevelImage(new DefaultMultiLevelSource(finalAnglesZenith,referenceMultiLevelModel,Interpolation.getInstance(Interpolation.INTERP_NEAREST)));
  MultiLevelImage finalImageAzimuth=new DefaultMultiLevelImage(new DefaultMultiLevelSource(finalAnglesAzimuth,referenceMultiLevelModel,Interpolation.getInstance(Interpolation.INTERP_NEAREST)));
  bandZenith.setSourceImage(S2ResamplerUtils.adjustImageToModelTransform(finalImageZenith,referenceMultiLevelModel));
  bandAzimuth.setSourceImage(S2ResamplerUtils.adjustImageToModelTransform(finalImageAzimuth,referenceMultiLevelModel));
  return true;
}",0.9753503292250548
170356,"@Override public int getMaximumMosaicIndex(){
  int maxIndex=0;
  for (  String pviName : getAttributeValues(L3PSD13Constants.PATH_GRANULE_METADATA_PVI_FILENAME)) {
    try {
      int aux=Integer.parseInt(pviName.substring(pviName.lastIndexOf(""String_Node_Str"") + 1));
      if (aux > maxIndex)       maxIndex=aux;
    }
 catch (    Exception e) {
    }
  }
  String[] mosaicContentTileNumbers=getAttributeValues(L3PSD13Constants.PATH_GRANULE_METADATA_MOSAIC_CONTENT_TILE_NUMBER);
  if (mosaicContentTileNumbers != null) {
    for (    String tileNumber : mosaicContentTileNumbers) {
      try {
        int aux=Integer.parseInt(tileNumber);
        if (aux > maxIndex)         maxIndex=aux;
      }
 catch (      Exception e) {
      }
    }
  }
  return maxIndex;
}","@Override public int getMaximumMosaicIndex(){
  int maxIndex=1;
  String[] attributeValuesPVI=getAttributeValues(L3PSD13Constants.PATH_GRANULE_METADATA_PVI_FILENAME);
  if (attributeValuesPVI != null) {
    for (    String pviName : attributeValuesPVI) {
      try {
        int aux=Integer.parseInt(pviName.substring(pviName.lastIndexOf(""String_Node_Str"") + 1));
        if (aux > maxIndex)         maxIndex=aux;
      }
 catch (      Exception e) {
      }
    }
  }
  String[] mosaicContentTileNumbers=getAttributeValues(L3PSD13Constants.PATH_GRANULE_METADATA_MOSAIC_CONTENT_TILE_NUMBER);
  if (mosaicContentTileNumbers != null) {
    for (    String tileNumber : mosaicContentTileNumbers) {
      try {
        int aux=Integer.parseInt(tileNumber);
        if (aux > maxIndex)         maxIndex=aux;
      }
 catch (      Exception e) {
      }
    }
  }
  return maxIndex;
}",0.9100850546780072
170357,"@Override public VirtualPath resolve(String other){
  return new VirtualPath(path.resolve(other),this.dir);
}","@Override public VirtualPath resolve(String other){
  if (path.getFileName().toString().equals(""String_Node_Str"")) {
    return new VirtualPath(path.resolveSibling(other),this.dir);
  }
  return new VirtualPath(path.resolve(other),this.dir);
}",0.6193181818181818
170358,"@Override public VirtualPath resolveSibling(String other){
  return new VirtualPath(path.resolveSibling(other),this.dir);
}","@Override public VirtualPath resolveSibling(String other){
  if (path.getFileName().toString().equals(""String_Node_Str"")) {
    return new VirtualPath(path.normalize().resolveSibling(other),this.dir);
  }
  return new VirtualPath(path.resolveSibling(other),this.dir);
}",0.6275510204081632
170359,"@Override public Path getFileName(){
  Path name=path.getFileName();
  if (name != null) {
    return name;
  }
  return Paths.get(getVirtualDir().getBasePath()).getFileName();
}","@Override public Path getFileName(){
  Path name=path.getFileName();
  if (name != null && !name.toString().equals(""String_Node_Str"")) {
    return name;
  }
  if (name != null && name.equals(""String_Node_Str"")) {
    return this.getParent().getFileName();
  }
  return Paths.get(getVirtualDir().getBasePath()).getFileName();
}",0.7049504950495049
170360,"@Override public VirtualPath getParent(){
  if (path.getFileName() == null || path.getFileName().toString().equals(""String_Node_Str"") || path.getParent() == null) {
    Path dirPath=Paths.get(this.dir.getBasePath());
    VirtualPath parent=new VirtualPath(dirPath.getFileName(),VirtualDirEx.create(dirPath.getParent().toFile()));
    return parent;
  }
  VirtualPath parent=new VirtualPath(path.getParent(),this.dir);
  return parent;
}","@Override public VirtualPath getParent(){
  Path normalizedPath=path.normalize();
  if (normalizedPath.getParent() != null) {
    return new VirtualPath(normalizedPath.getParent(),this.dir);
  }
  if (normalizedPath.getNameCount() == 1) {
    return new VirtualPath(""String_Node_Str"",this.dir);
  }
  if (normalizedPath.getNameCount() == 0) {
    if (VirtualDirEx.isPackedFile(new File(dir.getBasePath())) || dir.isCompressed()) {
      return null;
    }
 else {
      Path dirPath=Paths.get(this.dir.getBasePath());
      VirtualPath parent=new VirtualPath(dirPath.getFileName(),VirtualDirEx.create(dirPath.getParent().toFile()));
      return parent;
    }
  }
  return null;
}",0.4516129032258064
170361,"public boolean exists(){
  if (dir == null) {
    return Files.exists(path);
  }
  return dir.exists(path.toString().replace(FileSystems.getDefault().getSeparator(),separator));
}","public boolean exists(){
  if (dir == null) {
    return Files.exists(path);
  }
  if (path == null || path.getNameCount() == 0 || path.getNameCount() == 1 && path.toString().equals(""String_Node_Str"")) {
    return Files.exists(Paths.get(dir.getBasePath().toString()));
  }
  return dir.exists(path.toString().replace(FileSystems.getDefault().getSeparator(),separator));
}",0.617059891107078
170362,"public VirtualPath(String stringPath,VirtualDirEx dir){
  this(Paths.get(stringPath),dir);
}","public VirtualPath(String stringPath){
  this(stringPath,null);
}",0.7770700636942676
170363,"private File getQuicklookFile(final File metadataFile){
  File[] files=metadataFile.getParentFile().listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"") && (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str""));
    }
  }
);
  if (files != null && files.length > 0) {
    return files[0];
  }
  return null;
}","private File getQuicklookFile(final VirtualPath metadataPath){
  String[] files=null;
  try {
    files=metadataPath.getParent().list();
  }
 catch (  IOException e) {
    return null;
  }
  if (files == null || files.length == 0) {
    return null;
  }
  for (  String file : files) {
    if (file.endsWith(""String_Node_Str"") && (file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str""))) {
      return metadataPath.resolveSibling(file).toFile();
    }
  }
  return null;
}",0.3015521064301552
170364,"@Override protected Product readProductNodesImpl() throws IOException {
  SystemUtils.LOG.fine(""String_Node_Str"" + getInput().toString());
  if (getInput() instanceof File) {
    final File inputFile;
    File file;
    String longInput=GetLongPathNameW(getInput().toString());
    if (longInput.length() != 0) {
      file=new File(longInput);
    }
 else {
      file=new File(getInput().toString());
    }
    namingConvention=NamingConventionFactory.createNamingConvention(S2NamingConventionUtils.transformToSentinel2VirtualPath(file.toPath()));
  }
 else   if (getInput() instanceof VirtualPath) {
    namingConvention=NamingConventionFactory.createNamingConvention((VirtualPath)getInput());
  }
  if (namingConvention == null) {
    throw new IOException(""String_Node_Str"");
  }
  VirtualPath inputPath=namingConvention.getInputXml();
  if (!inputPath.exists()) {
    throw new FileNotFoundException(inputPath.getFullPathString());
  }
  if (namingConvention.hasValidStructure()) {
    product=getMosaicProduct(inputPath);
    if (product != null) {
      product.setModified(false);
    }
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
  return product;
}","@Override protected Product readProductNodesImpl() throws IOException {
  SystemUtils.LOG.fine(""String_Node_Str"" + getInput().toString());
  if (getInput() instanceof File) {
    final File inputFile;
    File file;
    String longInput=GetLongPathNameW(getInput().toString());
    if (longInput.length() != 0) {
      file=new File(longInput);
    }
 else {
      file=new File(getInput().toString());
    }
    namingConvention=NamingConventionFactory.createNamingConvention(S2NamingConventionUtils.transformToSentinel2VirtualPath(file.toPath()));
  }
 else   if (getInput() instanceof VirtualPath) {
    namingConvention=NamingConventionFactory.createNamingConvention((VirtualPath)getInput());
  }
  if (namingConvention == null) {
    throw new IOException(""String_Node_Str"");
  }
  inputPath=namingConvention.getInputXml();
  if (!inputPath.exists()) {
    throw new FileNotFoundException(inputPath.getFullPathString());
  }
  if (namingConvention.hasValidStructure()) {
    product=getMosaicProduct(inputPath);
    addQuicklook(product,getQuicklookFile(inputPath));
    if (product != null) {
      product.setModified(false);
    }
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
  return product;
}",0.9720483938256154
170365,"@Override public void close() throws IOException {
  if (product != null) {
    for (    Band band : product.getBands()) {
      MultiLevelImage sourceImage=band.getSourceImage();
      if (sourceImage != null) {
        sourceImage.reset();
        sourceImage.dispose();
        sourceImage=null;
      }
    }
  }
  super.close();
}","@Override public void close() throws IOException {
  if (product != null) {
    for (    Band band : product.getBands()) {
      MultiLevelImage sourceImage=band.getSourceImage();
      if (sourceImage != null) {
        sourceImage.reset();
        sourceImage.dispose();
        sourceImage=null;
      }
    }
  }
  if (inputPath != null) {
    inputPath.getVirtualDir().close();
  }
  super.close();
}",0.8648648648648649
170366,"/** 
 * From a product path, search a jpeg file for the given resolution, extract tile layout information and update
 * @param productMetadataFilePath the complete path to the product metadata file
 * @param resolution              the resolution for which we wan to find the tile layout
 * @return the tile layout for the resolution, or {@code null} if none was found
 */
public TileLayout retrieveTileLayoutFromProduct(VirtualPath productMetadataFilePath,S2SpatialResolution resolution){
  TileLayout tileLayoutForResolution=null;
  if (productMetadataFilePath.exists() && productMetadataFilePath.getFileName().toString().endsWith(""String_Node_Str"")) {
    VirtualPath productFolder=productMetadataFilePath.getParent();
    VirtualPath granulesFolder=productFolder.resolve(""String_Node_Str"");
    try {
      VirtualPath[] granulesFolderList=granulesFolder.listPaths();
      if (granulesFolderList != null && granulesFolderList.length > 0) {
        for (        VirtualPath granulePath : granulesFolderList) {
          tileLayoutForResolution=retrieveTileLayoutFromGranuleDirectory(granulePath,resolution);
          if (tileLayoutForResolution != null) {
            break;
          }
        }
      }
    }
 catch (    IOException e) {
      SystemUtils.LOG.warning(""String_Node_Str"" + productMetadataFilePath.toAbsolutePath().toString() + ""String_Node_Str""+ e.getMessage());
    }
  }
  return tileLayoutForResolution;
}","/** 
 * From a product path, search a jpeg file for the given resolution, extract tile layout information and update
 * @param productMetadataFilePath the complete path to the product metadata file
 * @param resolution              the resolution for which we wan to find the tile layout
 * @return the tile layout for the resolution, or {@code null} if none was found
 */
public TileLayout retrieveTileLayoutFromProduct(VirtualPath productMetadataFilePath,S2SpatialResolution resolution){
  TileLayout tileLayoutForResolution=null;
  if (productMetadataFilePath.exists() && productMetadataFilePath.getFileName().toString().endsWith(""String_Node_Str"")) {
    VirtualPath granulesFolder=productMetadataFilePath.resolveSibling(""String_Node_Str"");
    try {
      VirtualPath[] granulesFolderList=granulesFolder.listPaths();
      if (granulesFolderList != null && granulesFolderList.length > 0) {
        for (        VirtualPath granulePath : granulesFolderList) {
          tileLayoutForResolution=retrieveTileLayoutFromGranuleDirectory(granulePath,resolution);
          if (tileLayoutForResolution != null) {
            break;
          }
        }
      }
    }
 catch (    IOException e) {
      SystemUtils.LOG.warning(""String_Node_Str"" + productMetadataFilePath.toAbsolutePath().toString() + ""String_Node_Str""+ e.getMessage());
    }
  }
  return tileLayoutForResolution;
}",0.9715302491103204
170367,"public static VirtualPath transformToSentinel2VirtualPath(Path path){
  VirtualPath virtualPath;
  if (VirtualDirEx.isPackedFile(path.toFile())) {
    VirtualDirEx virtualDirEx=VirtualDirEx.create(path.toFile());
    String folderName=PathUtils.getFileNameWithoutExtension(path);
    if (!folderName.endsWith(""String_Node_Str"")) {
      folderName=folderName + ""String_Node_Str"";
    }
    if (virtualDirEx.exists(folderName)) {
      virtualPath=new VirtualPath(folderName,virtualDirEx);
    }
 else {
      virtualPath=new VirtualPath(""String_Node_Str"",virtualDirEx);
    }
  }
 else {
    virtualPath=new VirtualPath(path,null);
  }
  return virtualPath;
}","public static VirtualPath transformToSentinel2VirtualPath(Path path){
  VirtualPath virtualPath;
  if (VirtualDirEx.isPackedFile(path.toFile())) {
    VirtualDirEx virtualDirEx=VirtualDirEx.create(path.toFile());
    String folderName=PathUtils.getFileNameWithoutExtension(path);
    if (!folderName.endsWith(""String_Node_Str"")) {
      folderName=folderName + ""String_Node_Str"";
    }
    if (virtualDirEx.exists(folderName)) {
      virtualPath=new VirtualPath(folderName,virtualDirEx);
    }
 else {
      virtualPath=new VirtualPath(""String_Node_Str"",virtualDirEx);
    }
  }
 else {
    virtualPath=new VirtualPath(path);
  }
  return virtualPath;
}",0.996191926884996
170368,"/** 
 * Extract the source band index from the xml file.
 * @param metadataRoot the tree root element of the xml file
 * @param sourceBandName the band name
 * @return the band index
 */
private int extractSourceBandIndex(MetadataElement metadataRoot,String sourceBandName){
  String[] bandListPath={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  MetadataElement bandListElement=findTreeElement(metadataRoot,bandListPath);
  if (bandListElement != null) {
    for (int i=0; i < bandListElement.getNumAttributes(); i++) {
      MetadataAttribute metadataAttribute=bandListElement.getAttributeAt(i);
      ProductData data=metadataAttribute.getData();
      String bandName=data.getElemString();
      if (sourceBandName.equals(bandName)) {
        return i;
      }
    }
  }
  return -1;
}","/** 
 * Extract the source band index from the xml file.
 * @param metadataRoot the tree root element of the xml file
 * @param sourceBandName the band name
 * @return the band index
 */
private static int extractSourceBandIndex(MetadataElement metadataRoot,String sourceBandName){
  String[] bandListPath={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  MetadataElement bandListElement=findTreeElement(metadataRoot,bandListPath);
  if (bandListElement != null) {
    for (int i=0; i < bandListElement.getNumElements(); i++) {
      MetadataElement metadataElement=bandListElement.getElementAt(i);
      MetadataAttribute metadataAttribute=metadataElement.getAttribute(""String_Node_Str"");
      ProductData data=metadataAttribute.getData();
      String bandName=data.getElemString();
      if (sourceBandName.equals(bandName)) {
        MetadataAttribute bandIdAttribute=metadataElement.getAttribute(""String_Node_Str"");
        ProductData bandIdData=bandIdAttribute.getData();
        String bandIdAsString=bandIdData.getElemString();
        return Integer.parseInt(bandIdAsString);
      }
    }
  }
  return -1;
}",0.4460141271442986
170369,"String getCompressor(){
  return String.format(""String_Node_Str"",directory,File.separator,decompressor);
}","String getCompressor(){
  return Paths.get(directory,compressor).toString();
}",0.6521739130434783
170370,"String getDecompressor(){
  return String.format(""String_Node_Str"",directory,File.separator,decompressor);
}","String getDecompressor(){
  return Paths.get(directory,decompressor).toString();
}",0.6736842105263158
170371,"String getDump(){
  return String.format(""String_Node_Str"",directory,File.separator,dump);
}","String getDump(){
  return Paths.get(directory,dump).toString();
}",0.6075949367088608
170372,"public static Path getOpenJPEGAuxDataPath(){
  Path versionFile=ResourceInstaller.findModuleCodeBasePath(OpenJpegExecRetriever.class).resolve(""String_Node_Str"");
  Properties versionProp=new Properties();
  try (InputStream inputStream=Files.newInputStream(versionFile)){
    versionProp.load(inputStream);
  }
 catch (  IOException e) {
    SystemUtils.LOG.severe(""String_Node_Str"" + versionFile.toString());
    return null;
  }
  String version=versionProp.getProperty(""String_Node_Str"");
  if (version == null) {
    SystemUtils.LOG.severe(""String_Node_Str"" + versionFile.toString());
    return null;
  }
  return SystemUtils.getAuxDataPath().resolve(""String_Node_Str"").resolve(version);
}","public static Path getOpenJPEGAuxDataPath(){
  Path versionFile=ResourceInstaller.findModuleCodeBasePath(OpenJpegExecRetriever.class).resolve(""String_Node_Str"").resolve(""String_Node_Str"");
  Properties versionProp=new Properties();
  try (InputStream inputStream=Files.newInputStream(versionFile)){
    versionProp.load(inputStream);
  }
 catch (  IOException e) {
    SystemUtils.LOG.severe(""String_Node_Str"" + versionFile.toString());
    return null;
  }
  String version=versionProp.getProperty(""String_Node_Str"");
  if (version == null) {
    SystemUtils.LOG.severe(""String_Node_Str"" + versionFile.toString());
    return null;
  }
  return SystemUtils.getAuxDataPath().resolve(""String_Node_Str"").resolve(version);
}",0.9809187279151944
170373,"/** 
 * Get the tile layout with opj_dump
 * @param opjdumpPath path to opj_dump
 * @param jp2FilePath the path to the jpeg file
 * @return the tile layout for the openjpeg file
 * @throws IOException
 * @throws InterruptedException
 */
public static TileLayout getTileLayoutWithOpenJPEG(String opjdumpPath,Path jp2FilePath) throws IOException, InterruptedException {
  if (opjdumpPath == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TileLayout tileLayout;
  String pathToImageFile=jp2FilePath.toAbsolutePath().toString();
  if (SystemUtils.IS_OS_WINDOWS) {
    pathToImageFile=Utils.GetIterativeShortPathNameW(pathToImageFile);
  }
  ProcessBuilder builder=new ProcessBuilder(opjdumpPath,""String_Node_Str"",pathToImageFile);
  builder.redirectErrorStream(true);
  CommandOutput exit=OpenJpegUtils.runProcess(builder);
  if (exit.getErrorCode() != 0) {
    StringBuilder sbu=new StringBuilder();
    for (    String fragment : builder.command()) {
      sbu.append(fragment);
      sbu.append(' ');
    }
    throw new IOException(String.format(""String_Node_Str"",sbu.toString(),exit.getErrorCode(),exit.getTextOutput(),exit.getErrorOutput()));
  }
  tileLayout=OpenJpegUtils.parseOpjDump(exit.getTextOutput());
  return tileLayout;
}","/** 
 * Get the tile layout with opj_dump
 * @param opjdumpPath path to opj_dump
 * @param jp2FilePath the path to the jpeg file
 * @return the tile layout for the openjpeg file
 * @throws IOException
 * @throws InterruptedException
 */
public static TileLayout getTileLayoutWithOpenJPEG(String opjdumpPath,Path jp2FilePath) throws IOException, InterruptedException {
  if (opjdumpPath == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TileLayout tileLayout;
  String pathToImageFile=jp2FilePath.toAbsolutePath().toString();
  if (SystemUtils.IS_OS_WINDOWS) {
    pathToImageFile=Utils.GetIterativeShortPathNameW(pathToImageFile);
  }
  ProcessBuilder builder=new ProcessBuilder(opjdumpPath,""String_Node_Str"",pathToImageFile);
  builder.redirectErrorStream(true);
  CommandOutput exit=OpenJpegUtils.runProcess(builder);
  if (exit.getErrorCode() != 0) {
    StringBuilder sbu=new StringBuilder();
    for (    String fragment : builder.command()) {
      sbu.append(fragment);
      sbu.append(' ');
    }
    throw new IOException(String.format(""String_Node_Str"",sbu.toString(),exit.getErrorCode(),exit.getTextOutput(),exit.getErrorOutput()));
  }
  tileLayout=OpenJpegUtils.parseOpjDump(exit.getTextOutput());
  if (tileLayout.numResolutions == 0) {
    return null;
  }
  return tileLayout;
}",0.970873786407767
170374,"public static CommandOutput runProcess(ProcessBuilder builder) throws InterruptedException, IOException {
  builder.environment().putAll(System.getenv());
  StringBuilder output=new StringBuilder();
  boolean isStopped=false;
  final Process process=builder.start();
  try (BufferedReader outReader=new BufferedReader(new InputStreamReader(process.getInputStream()))){
    while (!isStopped) {
      while (outReader.ready()) {
        String line=outReader.readLine();
        if (line != null && !line.isEmpty()) {
          output.append(line);
        }
      }
      if (!process.isAlive()) {
        isStopped=true;
      }
 else {
        Thread.yield();
      }
    }
    outReader.close();
  }
   int exitCode=process.exitValue();
  String errorOutput=convertStreamToString(process.getErrorStream());
  return new CommandOutput(exitCode,output.toString(),errorOutput);
}","public static CommandOutput runProcess(ProcessBuilder builder) throws InterruptedException, IOException {
  builder.environment().putAll(System.getenv());
  StringBuilder output=new StringBuilder();
  boolean isStopped=false;
  final Process process=builder.start();
  try (BufferedReader outReader=new BufferedReader(new InputStreamReader(process.getInputStream()))){
    while (!isStopped) {
      if (!process.isAlive()) {
        isStopped=true;
      }
 else {
        Thread.yield();
      }
      while (outReader.ready()) {
        String line=outReader.readLine();
        if (line != null && !line.isEmpty()) {
          output.append(line);
        }
      }
    }
    outReader.close();
  }
   int exitCode=process.exitValue();
  String errorOutput=convertStreamToString(process.getErrorStream());
  return new CommandOutput(exitCode,output.toString(),errorOutput);
}",0.6518771331058021
170375,"private void addIndexMasks(Product product,List<BandInfo> bandInfoList) throws IOException {
  for (  BandInfo bandInfo : bandInfoList) {
    if (bandInfo.getBandInformation() instanceof S2IndexBandInformation) {
      S2IndexBandInformation indexBandInformation=(S2IndexBandInformation)bandInfo.getBandInformation();
      IndexCoding indexCoding=indexBandInformation.getIndexCoding();
      product.getIndexCodingGroup().add(indexCoding);
      List<Color> colors=indexBandInformation.getColors();
      Iterator<Color> colorIterator=colors.iterator();
      for (      String indexName : indexCoding.getIndexNames()) {
        int indexValue=indexCoding.getIndexValue(indexName);
        String description=indexCoding.getIndex(indexName).getDescription();
        if (!colorIterator.hasNext()) {
          throw new IOException(String.format(""String_Node_Str""));
        }
        Color color=colorIterator.next();
        Mask mask=Mask.BandMathsType.create(""String_Node_Str"" + indexName.toLowerCase(),description,product.getSceneRasterWidth(),product.getSceneRasterHeight(),String.format(""String_Node_Str"",indexBandInformation.getPhysicalBand(),indexValue),color,0.5);
        product.addMask(mask);
      }
    }
  }
}","private void addIndexMasks(Product product,List<BandInfo> bandInfoList,S2OrthoSceneLayout sceneDescription) throws IOException {
  for (  BandInfo bandInfo : bandInfoList) {
    if (bandInfo.getBandInformation() instanceof S2IndexBandInformation) {
      S2IndexBandInformation indexBandInformation=(S2IndexBandInformation)bandInfo.getBandInformation();
      IndexCoding indexCoding=indexBandInformation.getIndexCoding();
      product.getIndexCodingGroup().add(indexCoding);
      Dimension dimension=sceneDescription.getSceneDimension(bandInfo.getBandInformation().getResolution());
      List<Color> colors=indexBandInformation.getColors();
      Iterator<Color> colorIterator=colors.iterator();
      for (      String indexName : indexCoding.getIndexNames()) {
        int indexValue=indexCoding.getIndexValue(indexName);
        String description=indexCoding.getIndex(indexName).getDescription();
        if (!colorIterator.hasNext()) {
          throw new IOException(String.format(""String_Node_Str""));
        }
        Color color=colorIterator.next();
        Mask mask=Mask.BandMathsType.create(""String_Node_Str"" + indexName.toLowerCase(),description,dimension.width,dimension.height,String.format(""String_Node_Str"",indexBandInformation.getPhysicalBand(),indexValue),color,0.5);
        product.addMask(mask);
      }
    }
  }
}",0.9123490455784964
170376,"@Override protected Product getMosaicProduct(File metadataFile) throws IOException {
  if (!validateOpenJpegExecutables(S2Config.OPJ_INFO_EXE,S2Config.OPJ_DECOMPRESSOR_EXE)) {
    throw new IOException(""String_Node_Str"");
  }
  Objects.requireNonNull(metadataFile);
  boolean isAGranule=S2OrthoGranuleMetadataFilename.isGranuleFilename(metadataFile.getName());
  if (isAGranule) {
    logger.fine(""String_Node_Str"");
  }
  TimeProbe timeProbe=TimeProbe.start();
  if (!updateTileLayout(metadataFile.toPath(),isAGranule)) {
    throw new IOException(String.format(""String_Node_Str"",metadataFile.getName()));
  }
  SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
  String filterTileId=null;
  File rootMetaDataFile=null;
  String granuleDirName=null;
  timeProbe.reset();
  if (isAGranule) {
    granuleDirName=metadataFile.getParentFile().getName();
    try {
      Objects.requireNonNull(metadataFile.getParentFile());
      Objects.requireNonNull(metadataFile.getParentFile().getParentFile());
      Objects.requireNonNull(metadataFile.getParentFile().getParentFile().getParentFile());
    }
 catch (    NullPointerException npe) {
      throw new IOException(String.format(""String_Node_Str"",metadataFile.getName()));
    }
    File up2levels=metadataFile.getParentFile().getParentFile().getParentFile();
    File tileIdFilter=metadataFile.getParentFile();
    filterTileId=tileIdFilter.getName();
    File[] files=up2levels.listFiles();
    if (files != null) {
      for (      File f : files) {
        if (S2ProductFilename.isProductFilename(f.getName()) && S2ProductFilename.isMetadataFilename(f.getName())) {
          rootMetaDataFile=f;
          break;
        }
      }
    }
    if (rootMetaDataFile == null) {
      throw new IOException(String.format(""String_Node_Str"",metadataFile.getName()));
    }
  }
 else {
    rootMetaDataFile=metadataFile;
  }
  final String aFilter=filterTileId;
  S2Metadata metadataHeader=parseHeader(rootMetaDataFile,granuleDirName,getConfig(),epsgCode);
  SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
  timeProbe.reset();
  S2OrthoSceneLayout sceneDescription=S2OrthoSceneLayout.create(metadataHeader);
  logger.fine(""String_Node_Str"" + sceneDescription);
  File productDir=getProductDir(rootMetaDataFile);
  initCacheDir(productDir);
  S2Metadata.ProductCharacteristics productCharacteristics=metadataHeader.getProductCharacteristics();
  Product product=new Product(FileUtils.getFilenameWithoutExtension(rootMetaDataFile),""String_Node_Str"" + productCharacteristics.getProcessingLevel(),sceneDescription.getSceneDimension(getProductResolution()).width,sceneDescription.getSceneDimension(getProductResolution()).height);
  for (  MetadataElement metadataElement : metadataHeader.getMetadataElements()) {
    product.getMetadataRoot().addElement(metadataElement);
  }
  product.setFileLocation(metadataFile);
  try {
    product.setSceneGeoCoding(new CrsGeoCoding(CRS.decode(this.epsgCode),product.getSceneRasterWidth(),product.getSceneRasterHeight(),sceneDescription.getSceneOrigin()[0],sceneDescription.getSceneOrigin()[1],this.getProductResolution().resolution,this.getProductResolution().resolution,0.0,0.0));
  }
 catch (  FactoryException e) {
    throw new IOException(e);
  }
catch (  TransformException e) {
    throw new IOException(e);
  }
  product.setPreferredTileSize(S2Config.DEFAULT_JAI_TILE_SIZE,S2Config.DEFAULT_JAI_TILE_SIZE);
  product.setNumResolutionsMax(getConfig().getTileLayout(S2SpatialResolution.R10M.resolution).numResolutions);
  product.setAutoGrouping(""String_Node_Str"");
  product.setStartTime(parseDate(productCharacteristics.getProductStartTime(),""String_Node_Str""));
  product.setEndTime(parseDate(productCharacteristics.getProductStopTime(),""String_Node_Str""));
  List<BandInfo> bandInfoList=new ArrayList<>();
  List<S2Metadata.Tile> tileList=metadataHeader.getTileList();
  if (isAGranule) {
    tileList=tileList.stream().filter(p -> p.getId().equalsIgnoreCase(aFilter)).collect(Collectors.toList());
  }
  for (  S2BandInformation bandInformation : productCharacteristics.getBandInformations()) {
    HashMap<String,File> tileFileMap=new HashMap<>();
    for (    S2Metadata.Tile tile : tileList) {
      S2OrthoGranuleDirFilename gf=S2OrthoGranuleDirFilename.create(tile.getId());
      if (gf != null) {
        String imgFilename=String.format(""String_Node_Str"",File.separator,tile.getId(),File.separator,bandInformation.getImageFileTemplate().replace(""String_Node_Str"",gf.missionID).replace(""String_Node_Str"",gf.siteCentre).replace(""String_Node_Str"",gf.creationDate).replace(""String_Node_Str"",gf.absoluteOrbit).replace(""String_Node_Str"",gf.tileNumber).replace(""String_Node_Str"",String.format(""String_Node_Str"",bandInformation.getResolution().resolution)));
        logger.finer(""String_Node_Str"" + imgFilename + ""String_Node_Str""+ bandInformation.getPhysicalBand());
        File file=new File(productDir,imgFilename);
        if (file.exists()) {
          tileFileMap.put(tile.getId(),file);
        }
 else {
          logger.warning(String.format(""String_Node_Str"",file));
        }
      }
    }
    if (!tileFileMap.isEmpty()) {
      BandInfo bandInfo=createBandInfoFromHeaderInfo(bandInformation,tileFileMap);
      bandInfoList.add(bandInfo);
    }
 else {
      logger.warning(String.format(""String_Node_Str"",bandInformation.getPhysicalBand()));
    }
  }
  SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
  timeProbe.reset();
  if (!bandInfoList.isEmpty()) {
    addBands(product,bandInfoList,sceneDescription);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
    scaleBands(product,bandInfoList);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
    addVectorMasks(product,tileList,bandInfoList);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
    addIndexMasks(product,bandInfoList);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
  }
  if (!""String_Node_Str"".equalsIgnoreCase(productCharacteristics.getMetaDataLevel())) {
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",SUN_ZENITH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",SUN_AZIMUTH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",VIEW_ZENITH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",VIEW_AZIMUTH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
  }
  return product;
}","@Override protected Product getMosaicProduct(File metadataFile) throws IOException {
  if (!validateOpenJpegExecutables(S2Config.OPJ_INFO_EXE,S2Config.OPJ_DECOMPRESSOR_EXE)) {
    throw new IOException(""String_Node_Str"");
  }
  Objects.requireNonNull(metadataFile);
  boolean isAGranule=S2OrthoGranuleMetadataFilename.isGranuleFilename(metadataFile.getName());
  if (isAGranule) {
    logger.fine(""String_Node_Str"");
  }
  TimeProbe timeProbe=TimeProbe.start();
  if (!updateTileLayout(metadataFile.toPath(),isAGranule)) {
    throw new IOException(String.format(""String_Node_Str"",metadataFile.getName()));
  }
  SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
  String filterTileId=null;
  File rootMetaDataFile=null;
  String granuleDirName=null;
  timeProbe.reset();
  if (isAGranule) {
    granuleDirName=metadataFile.getParentFile().getName();
    try {
      Objects.requireNonNull(metadataFile.getParentFile());
      Objects.requireNonNull(metadataFile.getParentFile().getParentFile());
      Objects.requireNonNull(metadataFile.getParentFile().getParentFile().getParentFile());
    }
 catch (    NullPointerException npe) {
      throw new IOException(String.format(""String_Node_Str"",metadataFile.getName()));
    }
    File up2levels=metadataFile.getParentFile().getParentFile().getParentFile();
    File tileIdFilter=metadataFile.getParentFile();
    filterTileId=tileIdFilter.getName();
    File[] files=up2levels.listFiles();
    if (files != null) {
      for (      File f : files) {
        if (S2ProductFilename.isProductFilename(f.getName()) && S2ProductFilename.isMetadataFilename(f.getName())) {
          rootMetaDataFile=f;
          break;
        }
      }
    }
    if (rootMetaDataFile == null) {
      throw new IOException(String.format(""String_Node_Str"",metadataFile.getName()));
    }
  }
 else {
    rootMetaDataFile=metadataFile;
  }
  final String aFilter=filterTileId;
  S2Metadata metadataHeader=parseHeader(rootMetaDataFile,granuleDirName,getConfig(),epsgCode);
  SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
  timeProbe.reset();
  S2OrthoSceneLayout sceneDescription=S2OrthoSceneLayout.create(metadataHeader);
  logger.fine(""String_Node_Str"" + sceneDescription);
  File productDir=getProductDir(rootMetaDataFile);
  initCacheDir(productDir);
  S2Metadata.ProductCharacteristics productCharacteristics=metadataHeader.getProductCharacteristics();
  Product product=new Product(FileUtils.getFilenameWithoutExtension(rootMetaDataFile),""String_Node_Str"" + productCharacteristics.getProcessingLevel(),sceneDescription.getSceneDimension(getProductResolution()).width,sceneDescription.getSceneDimension(getProductResolution()).height);
  for (  MetadataElement metadataElement : metadataHeader.getMetadataElements()) {
    product.getMetadataRoot().addElement(metadataElement);
  }
  product.setFileLocation(metadataFile);
  try {
    product.setSceneGeoCoding(new CrsGeoCoding(CRS.decode(this.epsgCode),product.getSceneRasterWidth(),product.getSceneRasterHeight(),sceneDescription.getSceneOrigin()[0],sceneDescription.getSceneOrigin()[1],this.getProductResolution().resolution,this.getProductResolution().resolution,0.0,0.0));
  }
 catch (  FactoryException e) {
    throw new IOException(e);
  }
catch (  TransformException e) {
    throw new IOException(e);
  }
  product.setPreferredTileSize(S2Config.DEFAULT_JAI_TILE_SIZE,S2Config.DEFAULT_JAI_TILE_SIZE);
  product.setNumResolutionsMax(getConfig().getTileLayout(S2SpatialResolution.R10M.resolution).numResolutions);
  product.setAutoGrouping(""String_Node_Str"");
  product.setStartTime(parseDate(productCharacteristics.getProductStartTime(),""String_Node_Str""));
  product.setEndTime(parseDate(productCharacteristics.getProductStopTime(),""String_Node_Str""));
  List<BandInfo> bandInfoList=new ArrayList<>();
  List<S2Metadata.Tile> tileList=metadataHeader.getTileList();
  if (isAGranule) {
    tileList=tileList.stream().filter(p -> p.getId().equalsIgnoreCase(aFilter)).collect(Collectors.toList());
  }
  for (  S2BandInformation bandInformation : productCharacteristics.getBandInformations()) {
    HashMap<String,File> tileFileMap=new HashMap<>();
    for (    S2Metadata.Tile tile : tileList) {
      S2OrthoGranuleDirFilename gf=S2OrthoGranuleDirFilename.create(tile.getId());
      if (gf != null) {
        String imgFilename=String.format(""String_Node_Str"",File.separator,tile.getId(),File.separator,bandInformation.getImageFileTemplate().replace(""String_Node_Str"",gf.missionID).replace(""String_Node_Str"",gf.siteCentre).replace(""String_Node_Str"",gf.creationDate).replace(""String_Node_Str"",gf.absoluteOrbit).replace(""String_Node_Str"",gf.tileNumber).replace(""String_Node_Str"",String.format(""String_Node_Str"",bandInformation.getResolution().resolution)));
        logger.finer(""String_Node_Str"" + imgFilename + ""String_Node_Str""+ bandInformation.getPhysicalBand());
        File file=new File(productDir,imgFilename);
        if (file.exists()) {
          tileFileMap.put(tile.getId(),file);
        }
 else {
          logger.warning(String.format(""String_Node_Str"",file));
        }
      }
    }
    if (!tileFileMap.isEmpty()) {
      BandInfo bandInfo=createBandInfoFromHeaderInfo(bandInformation,tileFileMap);
      bandInfoList.add(bandInfo);
    }
 else {
      logger.warning(String.format(""String_Node_Str"",bandInformation.getPhysicalBand()));
    }
  }
  SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
  timeProbe.reset();
  if (!bandInfoList.isEmpty()) {
    addBands(product,bandInfoList,sceneDescription);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
    scaleBands(product,bandInfoList);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
    addVectorMasks(product,tileList,bandInfoList);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
    addIndexMasks(product,bandInfoList,sceneDescription);
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
  }
  if (!""String_Node_Str"".equalsIgnoreCase(productCharacteristics.getMetaDataLevel())) {
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",SUN_ZENITH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",SUN_AZIMUTH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",VIEW_ZENITH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",VIEW_AZIMUTH_GRID_INDEX,""String_Node_Str"",""String_Node_Str"");
    SystemUtils.LOG.fine(String.format(""String_Node_Str"",timeProbe.elapsed(TimeUnit.MILLISECONDS)));
    timeProbe.reset();
  }
  return product;
}",0.9988037435789178
170377,"protected Path decompressTile(int tileIndex,int level) throws IOException {
  Path tileFile=PathUtils.get(cacheDir,PathUtils.getFileNameWithoutExtension(imageFile).toLowerCase() + ""String_Node_Str"" + String.valueOf(tileIndex)+ ""String_Node_Str""+ String.valueOf(level)+ ""String_Node_Str"");
  if ((!Files.exists(tileFile)) || (diffLastModifiedTimes(tileFile.toFile(),imageFile.toFile()) < 0L)) {
    final OpjExecutor decompress=new OpjExecutor(OpenJpegExecRetriever.getOpjDecompress());
    final Map<String,String> params=new HashMap<String,String>(){
{
        put(""String_Node_Str"",GetIterativeShortPathNameW(imageFile.toString()));
        put(""String_Node_Str"",String.valueOf(level));
        put(""String_Node_Str"",""String_Node_Str"");
      }
    }
;
    params.put(""String_Node_Str"",tileFile.toString());
    params.put(""String_Node_Str"",String.valueOf(tileIndex));
    params.put(""String_Node_Str"",String.valueOf(DataBuffer.getDataTypeSize(this.getSampleModel().getDataType())));
    params.put(""String_Node_Str"",""String_Node_Str"");
    if (decompress.execute(params) != 0) {
      logger.severe(decompress.getLastError());
      tileFile=null;
    }
 else {
      logger.fine(""String_Node_Str"" + String.valueOf(tileIndex) + ""String_Node_Str""+ String.valueOf(level));
    }
  }
  return tileFile;
}","protected Path decompressTile(int tileIndex,int level) throws IOException {
  Path tileFile=PathUtils.get(cacheDir,PathUtils.getFileNameWithoutExtension(imageFile).toLowerCase() + ""String_Node_Str"" + String.valueOf(tileIndex)+ ""String_Node_Str""+ String.valueOf(level)+ ""String_Node_Str"");
  if ((!Files.exists(tileFile)) || (diffLastModifiedTimes(tileFile.toFile(),imageFile.toFile()) < 0L)) {
    final OpjExecutor decompress=new OpjExecutor(OpenJpegExecRetriever.getOpjDecompress());
    final Map<String,String> params=new HashMap<String,String>(){
{
        put(""String_Node_Str"",GetIterativeShortPathNameW(imageFile.toString()));
        put(""String_Node_Str"",String.valueOf(level));
        put(""String_Node_Str"",""String_Node_Str"");
      }
    }
;
    String tileFileName;
    if (org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS && (tileFile.getParent() != null)) {
      tileFileName=Utils.GetIterativeShortPathNameW(tileFile.getParent().toString()) + File.separator + tileFile.getName(tileFile.getNameCount() - 1);
    }
 else {
      tileFileName=tileFile.toString();
    }
    params.put(""String_Node_Str"",tileFileName);
    params.put(""String_Node_Str"",String.valueOf(tileIndex));
    params.put(""String_Node_Str"",String.valueOf(DataBuffer.getDataTypeSize(this.getSampleModel().getDataType())));
    params.put(""String_Node_Str"",""String_Node_Str"");
    if (decompress.execute(params) != 0) {
      logger.severe(decompress.getLastError());
      tileFile=null;
    }
 else {
      logger.fine(""String_Node_Str"" + String.valueOf(tileIndex) + ""String_Node_Str""+ String.valueOf(level));
    }
  }
  return tileFile;
}",0.8819918144611187
170378,"protected void decompressTile(final File outputFile,int jp2TileX,int jp2TileY) throws IOException {
  final int tileIndex=tileLayout.numXTiles * jp2TileY + jp2TileX;
  ProcessBuilder builder;
  if (S2Config.OPJ_DECOMPRESSOR_EXE != null) {
    if (org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS) {
      String inputFileName=Utils.GetIterativeShortPathNameW(imageFile.getPath());
      String outputFileName=outputFile.getPath();
      if (inputFileName.length() == 0) {
        inputFileName=imageFile.getPath();
      }
      Guardian.assertTrue(""String_Node_Str"",new File(inputFileName).exists());
      builder=new ProcessBuilder(S2Config.OPJ_DECOMPRESSOR_EXE,""String_Node_Str"",inputFileName,""String_Node_Str"",outputFileName,""String_Node_Str"",getLevel() + ""String_Node_Str"",""String_Node_Str"",tileIndex + ""String_Node_Str"");
    }
 else {
      SystemUtils.LOG.fine(""String_Node_Str"" + outputFile.getPath());
      Guardian.assertTrue(""String_Node_Str"",imageFile.exists());
      builder=new ProcessBuilder(S2Config.OPJ_DECOMPRESSOR_EXE,""String_Node_Str"",imageFile.getPath(),""String_Node_Str"",outputFile.getPath(),""String_Node_Str"",getLevel() + ""String_Node_Str"",""String_Node_Str"",tileIndex + ""String_Node_Str"");
    }
  }
 else {
    throw new UnexpectedException(""String_Node_Str"");
  }
  builder=builder.directory(cacheDir);
  try {
    builder.redirectErrorStream(true);
    CommandOutput result=OpenJpegUtils.runProcess(builder);
    final int exitCode=result.getErrorCode();
    if (exitCode != 0) {
      SystemUtils.LOG.severe(String.format(""String_Node_Str"",imageFile.getPath(),exitCode,builder.command().toString(),result.getTextOutput(),result.getErrorOutput()));
    }
  }
 catch (  InterruptedException e) {
    SystemUtils.LOG.severe(""String_Node_Str"" + e.getMessage());
  }
}","protected void decompressTile(final File outputFile,int jp2TileX,int jp2TileY) throws IOException {
  final int tileIndex=tileLayout.numXTiles * jp2TileY + jp2TileX;
  ProcessBuilder builder;
  if (S2Config.OPJ_DECOMPRESSOR_EXE != null) {
    if (org.apache.commons.lang.SystemUtils.IS_OS_WINDOWS) {
      String inputFileName=Utils.GetIterativeShortPathNameW(imageFile.getPath());
      String outputFileName=outputFile.getPath();
      String outputNameShort=Utils.GetIterativeShortPathNameW(outputFile.getParent()) + File.separator + outputFile.getName();
      if (inputFileName.length() == 0) {
        inputFileName=imageFile.getPath();
      }
      Guardian.assertTrue(""String_Node_Str"",new File(inputFileName).exists());
      builder=new ProcessBuilder(S2Config.OPJ_DECOMPRESSOR_EXE,""String_Node_Str"",inputFileName,""String_Node_Str"",outputNameShort,""String_Node_Str"",getLevel() + ""String_Node_Str"",""String_Node_Str"",tileIndex + ""String_Node_Str"");
    }
 else {
      SystemUtils.LOG.fine(""String_Node_Str"" + outputFile.getPath());
      Guardian.assertTrue(""String_Node_Str"",imageFile.exists());
      builder=new ProcessBuilder(S2Config.OPJ_DECOMPRESSOR_EXE,""String_Node_Str"",imageFile.getPath(),""String_Node_Str"",outputFile.getPath(),""String_Node_Str"",getLevel() + ""String_Node_Str"",""String_Node_Str"",tileIndex + ""String_Node_Str"");
    }
  }
 else {
    throw new UnexpectedException(""String_Node_Str"");
  }
  builder=builder.directory(cacheDir);
  try {
    builder.redirectErrorStream(true);
    CommandOutput result=OpenJpegUtils.runProcess(builder);
    final int exitCode=result.getErrorCode();
    if (exitCode != 0) {
      SystemUtils.LOG.severe(String.format(""String_Node_Str"",imageFile.getPath(),exitCode,builder.command().toString(),result.getTextOutput(),result.getErrorOutput()));
    }
  }
 catch (  InterruptedException e) {
    SystemUtils.LOG.severe(""String_Node_Str"" + e.getMessage());
  }
}",0.961269499731038
170379,"@Override protected Product readProductNodesImpl() throws IOException {
  SystemUtils.LOG.fine(""String_Node_Str"" + getInput().toString());
  Product p;
  final File inputFile=new File(getInput().toString());
  if (!inputFile.exists()) {
    throw new FileNotFoundException(inputFile.getPath());
  }
  if (S2ProductFilename.isMetadataFilename(inputFile.getName())) {
    p=getMosaicProduct(inputFile);
    addQuicklook(p,getQuicklookFile(inputFile));
    if (p != null) {
      p.setModified(false);
    }
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
  return p;
}","@Override protected Product readProductNodesImpl() throws IOException {
  SystemUtils.LOG.fine(""String_Node_Str"" + getInput().toString());
  Product p;
  final File inputFile;
  String longInput=GetLongPathNameW(getInput().toString());
  if (longInput.length() != 0) {
    inputFile=new File(longInput);
  }
 else {
    inputFile=new File(getInput().toString());
  }
  if (!inputFile.exists()) {
    throw new FileNotFoundException(inputFile.getPath());
  }
  if (S2ProductFilename.isMetadataFilename(inputFile.getName())) {
    p=getMosaicProduct(inputFile);
    addQuicklook(p,getQuicklookFile(inputFile));
    if (p != null) {
      p.setModified(false);
    }
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
  return p;
}",0.844579226686884
170380,"public static L1cMetadata.ProductCharacteristics getProductOrganization(Level1C_User_Product product){
  L1cMetadata.ProductCharacteristics characteristics=new L1cMetadata.ProductCharacteristics();
  characteristics.spacecraft=product.getGeneral_Info().getProduct_Info().getDatatake().getSPACECRAFT_NAME();
  characteristics.datasetProductionDate=product.getGeneral_Info().getProduct_Info().getDatatake().getDATATAKE_SENSING_START().toString();
  characteristics.processingLevel=product.getGeneral_Info().getProduct_Info().getPROCESSING_LEVEL().getValue().value();
  characteristics.setMetaDataLevel(product.getGeneral_Info().getProduct_Info().getQuery_Options().getMETADATA_LEVEL());
  List<S2SpectralInformation> aInfo=new ArrayList<>();
  if (product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List() != null) {
    List<A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information> spectralInfoList=product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List().getSpectral_Information();
    for (    A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information sin : spectralInfoList) {
      S2SpectralInformation data=new S2SpectralInformation();
      data.setBandId(Integer.parseInt(sin.getBandId()));
      data.setPhysicalBand(sin.getPhysicalBand().value());
      data.setResolution(sin.getRESOLUTION());
      int size=sin.getSpectral_Response().getVALUES().size();
      data.setSpectralResponseValues(ArrayUtils.toPrimitive(sin.getSpectral_Response().getVALUES().toArray(new Double[size])));
      data.setWavelengthCentral(sin.getWavelength().getCENTRAL().getValue());
      data.setWavelengthMax(sin.getWavelength().getMAX().getValue());
      data.setWavelengthMin(sin.getWavelength().getMIN().getValue());
      aInfo.add(data);
    }
  }
 else {
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",0,60,414,472,490));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",1,10,425,555,490));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",2,10,510,610,560));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",3,10,617,707,665));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",4,20,625,722,705));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",5,20,720,760,740));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",6,20,741,812,783));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",7,10,752,927,842));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",8,20,823,902,865));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",9,60,903,982,945));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",10,60,1338,1413,1375));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",11,20,1532,1704,1610));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",12,20,2035,2311,2190));
  }
  int size=aInfo.size();
  characteristics.bandInformations=aInfo.toArray(new S2SpectralInformation[size]);
  return characteristics;
}","public static L1cMetadata.ProductCharacteristics getProductOrganization(Level1C_User_Product product){
  L1cMetadata.ProductCharacteristics characteristics=new L1cMetadata.ProductCharacteristics();
  characteristics.spacecraft=product.getGeneral_Info().getProduct_Info().getDatatake().getSPACECRAFT_NAME();
  characteristics.datasetProductionDate=product.getGeneral_Info().getProduct_Info().getDatatake().getDATATAKE_SENSING_START().toString();
  characteristics.processingLevel=product.getGeneral_Info().getProduct_Info().getPROCESSING_LEVEL().getValue().value();
  characteristics.setMetaDataLevel(product.getGeneral_Info().getProduct_Info().getQuery_Options().getMETADATA_LEVEL());
  List<S2SpectralInformation> aInfo=new ArrayList<>();
  if (product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List() != null) {
    List<A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information> spectralInfoList=product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List().getSpectral_Information();
    for (    A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information sin : spectralInfoList) {
      S2SpectralInformation data=new S2SpectralInformation();
      data.setBandId(Integer.parseInt(sin.getBandId()));
      data.setPhysicalBand(sin.getPhysicalBand().value());
      data.setResolution(sin.getRESOLUTION());
      int size=sin.getSpectral_Response().getVALUES().size();
      data.setSpectralResponseValues(ArrayUtils.toPrimitive(sin.getSpectral_Response().getVALUES().toArray(new Double[size])));
      data.setWavelengthCentral(sin.getWavelength().getCENTRAL().getValue());
      data.setWavelengthMax(sin.getWavelength().getMAX().getValue());
      data.setWavelengthMin(sin.getWavelength().getMIN().getValue());
      aInfo.add(data);
    }
  }
 else {
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",0,60,414,472,443));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",1,10,425,555,490));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",2,10,510,610,560));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",3,10,617,707,665));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",4,20,625,722,705));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",5,20,720,760,740));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",6,20,741,812,783));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",7,10,752,927,842));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",8,20,823,902,865));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",9,60,903,982,945));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",10,60,1338,1413,1375));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",11,20,1532,1704,1610));
    aInfo.add(new S2SpectralInformation(""String_Node_Str"",12,20,2035,2311,2190));
  }
  int size=aInfo.size();
  characteristics.bandInformations=aInfo.toArray(new S2SpectralInformation[size]);
  return characteristics;
}",0.9993491701919948
170381,"public static L1cMetadata.ProductCharacteristics getProductOrganization(Level1C_User_Product product){
  L1cMetadata.ProductCharacteristics characteristics=new L1cMetadata.ProductCharacteristics();
  characteristics.spacecraft=product.getGeneral_Info().getProduct_Info().getDatatake().getSPACECRAFT_NAME();
  characteristics.datasetProductionDate=product.getGeneral_Info().getProduct_Info().getDatatake().getDATATAKE_SENSING_START().toString();
  characteristics.processingLevel=product.getGeneral_Info().getProduct_Info().getPROCESSING_LEVEL().getValue().value();
  List<L1cMetadata.SpectralInformation> aInfo=new ArrayList<L1cMetadata.SpectralInformation>();
  if (product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List() != null) {
    List<A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information> spectralInfoList=product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List().getSpectral_Information();
    for (    A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information sin : spectralInfoList) {
      L1cMetadata.SpectralInformation data=new L1cMetadata.SpectralInformation();
      data.bandId=Integer.parseInt(sin.getBandId());
      data.physicalBand=sin.getPhysicalBand().value();
      data.resolution=sin.getRESOLUTION();
      data.spectralResponseStep=sin.getSpectral_Response().getSTEP().getValue();
      int size=sin.getSpectral_Response().getVALUES().size();
      data.spectralResponseValues=ArrayUtils.toPrimitive(sin.getSpectral_Response().getVALUES().toArray(new Double[size]));
      data.wavelenghtCentral=sin.getWavelength().getCENTRAL().getValue();
      data.wavelenghtMax=sin.getWavelength().getMAX().getValue();
      data.wavelenghtMin=sin.getWavelength().getMIN().getValue();
      aInfo.add(data);
    }
  }
 else {
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",0,60));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",1,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",2,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",3,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",4,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",5,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",6,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",7,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",8,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",9,60));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",10,60));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",11,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",12,20));
  }
  int size=aInfo.size();
  characteristics.bandInformations=aInfo.toArray(new L1cMetadata.SpectralInformation[size]);
  return characteristics;
}","public static L1cMetadata.ProductCharacteristics getProductOrganization(Level1C_User_Product product){
  L1cMetadata.ProductCharacteristics characteristics=new L1cMetadata.ProductCharacteristics();
  characteristics.spacecraft=product.getGeneral_Info().getProduct_Info().getDatatake().getSPACECRAFT_NAME();
  characteristics.datasetProductionDate=product.getGeneral_Info().getProduct_Info().getDatatake().getDATATAKE_SENSING_START().toString();
  characteristics.processingLevel=product.getGeneral_Info().getProduct_Info().getPROCESSING_LEVEL().getValue().value();
  characteristics.setMetaDataLevel(product.getGeneral_Info().getProduct_Info().getQuery_Options().getMETADATA_LEVEL());
  List<L1cMetadata.SpectralInformation> aInfo=new ArrayList<L1cMetadata.SpectralInformation>();
  if (product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List() != null) {
    List<A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information> spectralInfoList=product.getGeneral_Info().getProduct_Image_Characteristics().getSpectral_Information_List().getSpectral_Information();
    for (    A_PRODUCT_INFO_USERL1C.Product_Image_Characteristics.Spectral_Information_List.Spectral_Information sin : spectralInfoList) {
      L1cMetadata.SpectralInformation data=new L1cMetadata.SpectralInformation();
      data.bandId=Integer.parseInt(sin.getBandId());
      data.physicalBand=sin.getPhysicalBand().value();
      data.resolution=sin.getRESOLUTION();
      data.spectralResponseStep=sin.getSpectral_Response().getSTEP().getValue();
      int size=sin.getSpectral_Response().getVALUES().size();
      data.spectralResponseValues=ArrayUtils.toPrimitive(sin.getSpectral_Response().getVALUES().toArray(new Double[size]));
      data.wavelenghtCentral=sin.getWavelength().getCENTRAL().getValue();
      data.wavelenghtMax=sin.getWavelength().getMAX().getValue();
      data.wavelenghtMin=sin.getWavelength().getMIN().getValue();
      aInfo.add(data);
    }
  }
 else {
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",0,60));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",1,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",2,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",3,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",4,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",5,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",6,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",7,10));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",8,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",9,60));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",10,60));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",11,20));
    aInfo.add(new L1cMetadata.SpectralInformation(""String_Node_Str"",12,20));
  }
  int size=aInfo.size();
  characteristics.bandInformations=aInfo.toArray(new L1cMetadata.SpectralInformation[size]);
  return characteristics;
}",0.9806576402321084
170382,"private Product getL1cMosaicProduct(File granuleMetadataFile,boolean isAGranule) throws IOException {
  Objects.requireNonNull(granuleMetadataFile);
  String filterTileId=null;
  File metadataFile=null;
  if (isAGranule) {
    try {
      Objects.requireNonNull(granuleMetadataFile.getParentFile());
      Objects.requireNonNull(granuleMetadataFile.getParentFile().getParentFile());
      Objects.requireNonNull(granuleMetadataFile.getParentFile().getParentFile().getParentFile());
    }
 catch (    NullPointerException npe) {
      throw new IOException(String.format(""String_Node_Str"",granuleMetadataFile.getName()));
    }
    File up2levels=granuleMetadataFile.getParentFile().getParentFile().getParentFile();
    File tileIdFilter=granuleMetadataFile.getParentFile();
    filterTileId=tileIdFilter.getName();
    File[] files=up2levels.listFiles();
    for (    File f : files) {
      if (S2ProductFilename.isProductFilename(f.getName()) && S2ProductFilename.isMetadataFilename(f.getName())) {
        metadataFile=f;
        break;
      }
    }
    if (metadataFile == null) {
      throw new IOException(String.format(""String_Node_Str"",granuleMetadataFile.getName()));
    }
  }
 else {
    metadataFile=granuleMetadataFile;
  }
  final String aFilter=filterTileId;
  L1cMetadata metadataHeader=null;
  try {
    metadataHeader=parseHeader(metadataFile);
  }
 catch (  JDOMException|UnmarshalException e) {
    throw new IOException(""String_Node_Str"" + metadataFile.getName());
  }
  L1cSceneDescription sceneDescription=L1cSceneDescription.create(metadataHeader,Tile.idGeom.G10M);
  logger.fine(""String_Node_Str"" + sceneDescription);
  File productDir=getProductDir(metadataFile);
  initCacheDir(productDir);
  ProductCharacteristics productCharacteristics=metadataHeader.getProductCharacteristics();
  Product product=new Product(FileUtils.getFilenameWithoutExtension(metadataFile),""String_Node_Str"" + productCharacteristics.processingLevel,sceneDescription.getSceneRectangle().width,sceneDescription.getSceneRectangle().height);
  product.getMetadataRoot().addElement(metadataHeader.getMetadataElement());
  product.setFileLocation(metadataFile.getParentFile());
  if (forceResize) {
    setGeoCoding(product,sceneDescription.getSceneEnvelope());
  }
  product.setPreferredTileSize(DEFAULT_JAI_TILE_SIZE,DEFAULT_JAI_TILE_SIZE);
  product.setNumResolutionsMax(L1C_TILE_LAYOUTS[0].numResolutions);
  String autoGrouping=""String_Node_Str"";
  for (  String utmZone : metadataHeader.getUTMZonesList()) {
    autoGrouping+=utmZone.replace(':','_');
  }
  autoGrouping+=""String_Node_Str"";
  product.setAutoGrouping(autoGrouping);
  for (  String utmZone : metadataHeader.getUTMZonesList()) {
    Map<Integer,BandInfo> bandInfoMap=new HashMap<Integer,BandInfo>();
    List<L1cMetadata.Tile> utmZoneTileList;
    if (isAGranule) {
      utmZoneTileList=metadataHeader.getTileList().stream().filter(p -> p.id.equalsIgnoreCase(aFilter)).collect(Collectors.toList());
    }
 else {
      utmZoneTileList=metadataHeader.getTileList(utmZone);
    }
    for (    SpectralInformation bandInformation : productCharacteristics.bandInformations) {
      int bandIndex=bandInformation.bandId;
      if (bandIndex >= 0 && bandIndex < productCharacteristics.bandInformations.length) {
        HashMap<String,File> tileFileMap=new HashMap<String,File>();
        for (        Tile tile : utmZoneTileList) {
          S2GranuleDirFilename gf=S2GranuleDirFilename.create(tile.id);
          S2GranuleImageFilename imageFilename=gf.getImageFilename(bandInformation.physicalBand);
          String imgFilename=""String_Node_Str"" + File.separator + tile.id+ File.separator+ ""String_Node_Str""+ File.separator+ imageFilename.name;
          logger.finer(""String_Node_Str"" + imgFilename + ""String_Node_Str""+ bandInformation.physicalBand);
          File file=new File(productDir,imgFilename);
          if (file.exists()) {
            tileFileMap.put(tile.id,file);
          }
 else {
            logger.warning(String.format(""String_Node_Str"",file));
          }
        }
        if (!tileFileMap.isEmpty()) {
          BandInfo bandInfo=createBandInfoFromHeaderInfo(bandInformation,tileFileMap);
          bandInfoMap.put(bandIndex,bandInfo);
        }
 else {
          logger.warning(String.format(""String_Node_Str"",bandInformation.physicalBand));
        }
      }
 else {
        logger.warning(String.format(""String_Node_Str"",bandInformation.physicalBand));
      }
    }
    if (!bandInfoMap.isEmpty()) {
      addBands(product,bandInfoMap,sceneDescription.getSceneEnvelope(),new L1cSceneMultiLevelImageFactory(sceneDescription,ImageManager.getImageToModelTransform(product.getGeoCoding())),utmZone);
    }
    List<EopPolygon> polygons=filterMasksInUTMZones(utmZoneTileList);
    Map<String,List<EopPolygon>> polygonsByType=new HashMap<>();
    if (!polygons.isEmpty()) {
      Set<String> polygonTypes=polygons.stream().map(p -> p.getType()).collect(Collectors.toSet());
      for (      String polygonType : polygonTypes) {
        polygonsByType.put(polygonType,polygons.stream().filter(p -> p.getType().equals(polygonType)).collect(Collectors.toList()));
      }
      try {
        AffineTransform scaler=AffineTransform.getScaleInstance(this.productResolution,this.productResolution).createInverse();
        AffineTransform move=AffineTransform.getTranslateInstance(-sceneDescription.getSceneEnvelope().getMinX(),-sceneDescription.getSceneEnvelope().getMinY());
        AffineTransform mirror_y=new AffineTransform(1,0,0,-1,0,sceneDescription.getSceneEnvelope().getHeight() / this.productResolution);
        AffineTransform world2pixel=new AffineTransform(mirror_y);
        world2pixel.concatenate(scaler);
        world2pixel.concatenate(move);
        try {
          for (          String polygonType : polygonTypes) {
            final SimpleFeatureType type=Placemark.createGeometryFeatureType();
            final DefaultFeatureCollection collection=new DefaultFeatureCollection(""String_Node_Str"",type);
            List<EopPolygon> typedPolygon=polygonsByType.get(polygonType);
            for (int index=0; index < typedPolygon.size(); index++) {
              Polygon pol=typedPolygon.get(index).getPolygon();
              pol=(Polygon)JTS.transform(pol,new AffineTransform2D(world2pixel));
              Object[] data1={pol,String.format(""String_Node_Str"",index)};
              SimpleFeatureImpl f1=new SimpleFeatureImpl(data1,type,new FeatureIdImpl(String.format(""String_Node_Str"",index)),true);
              collection.add(f1);
            }
            VectorDataNode vdn=new VectorDataNode(polygonType,collection);
            product.getVectorDataGroup().add(vdn);
          }
        }
 catch (        MismatchedDimensionException e) {
        }
catch (        TransformException e) {
        }
      }
 catch (      NoninvertibleTransformException e) {
      }
    }
  }
  if (metadataHeader.getTileList().get(0).sunAnglesGrid != null) {
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",0);
  }
  if (metadataHeader.getTileList().get(1).sunAnglesGrid != null) {
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",1);
  }
  if (metadataHeader.getTileList().get(2).sunAnglesGrid != null) {
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",2);
  }
  if (metadataHeader.getTileList().get(3).sunAnglesGrid != null) {
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",3);
  }
  return product;
}","private Product getL1cMosaicProduct(File granuleMetadataFile,boolean isAGranule) throws IOException {
  Objects.requireNonNull(granuleMetadataFile);
  String filterTileId=null;
  File metadataFile=null;
  if (isAGranule) {
    try {
      Objects.requireNonNull(granuleMetadataFile.getParentFile());
      Objects.requireNonNull(granuleMetadataFile.getParentFile().getParentFile());
      Objects.requireNonNull(granuleMetadataFile.getParentFile().getParentFile().getParentFile());
    }
 catch (    NullPointerException npe) {
      throw new IOException(String.format(""String_Node_Str"",granuleMetadataFile.getName()));
    }
    File up2levels=granuleMetadataFile.getParentFile().getParentFile().getParentFile();
    File tileIdFilter=granuleMetadataFile.getParentFile();
    filterTileId=tileIdFilter.getName();
    File[] files=up2levels.listFiles();
    for (    File f : files) {
      if (S2ProductFilename.isProductFilename(f.getName()) && S2ProductFilename.isMetadataFilename(f.getName())) {
        metadataFile=f;
        break;
      }
    }
    if (metadataFile == null) {
      throw new IOException(String.format(""String_Node_Str"",granuleMetadataFile.getName()));
    }
  }
 else {
    metadataFile=granuleMetadataFile;
  }
  final String aFilter=filterTileId;
  L1cMetadata metadataHeader=null;
  try {
    metadataHeader=parseHeader(metadataFile);
  }
 catch (  JDOMException|UnmarshalException e) {
    throw new IOException(""String_Node_Str"" + metadataFile.getName());
  }
  L1cSceneDescription sceneDescription=L1cSceneDescription.create(metadataHeader,Tile.idGeom.G10M);
  logger.fine(""String_Node_Str"" + sceneDescription);
  File productDir=getProductDir(metadataFile);
  initCacheDir(productDir);
  ProductCharacteristics productCharacteristics=metadataHeader.getProductCharacteristics();
  Product product=new Product(FileUtils.getFilenameWithoutExtension(metadataFile),""String_Node_Str"" + productCharacteristics.processingLevel,sceneDescription.getSceneRectangle().width,sceneDescription.getSceneRectangle().height);
  product.getMetadataRoot().addElement(metadataHeader.getMetadataElement());
  product.setFileLocation(metadataFile.getParentFile());
  if (forceResize) {
    setGeoCoding(product,sceneDescription.getSceneEnvelope());
  }
  product.setPreferredTileSize(DEFAULT_JAI_TILE_SIZE,DEFAULT_JAI_TILE_SIZE);
  product.setNumResolutionsMax(L1C_TILE_LAYOUTS[0].numResolutions);
  String autoGrouping=""String_Node_Str"";
  for (  String utmZone : metadataHeader.getUTMZonesList()) {
    autoGrouping+=utmZone.replace(':','_');
  }
  autoGrouping+=""String_Node_Str"";
  product.setAutoGrouping(autoGrouping);
  for (  String utmZone : metadataHeader.getUTMZonesList()) {
    Map<Integer,BandInfo> bandInfoMap=new HashMap<Integer,BandInfo>();
    List<L1cMetadata.Tile> utmZoneTileList=metadataHeader.getTileList(utmZone);
    if (isAGranule) {
      utmZoneTileList=utmZoneTileList.stream().filter(p -> p.id.equalsIgnoreCase(aFilter)).collect(Collectors.toList());
    }
    for (    SpectralInformation bandInformation : productCharacteristics.bandInformations) {
      int bandIndex=bandInformation.bandId;
      if (bandIndex >= 0 && bandIndex < productCharacteristics.bandInformations.length) {
        HashMap<String,File> tileFileMap=new HashMap<String,File>();
        for (        Tile tile : utmZoneTileList) {
          S2GranuleDirFilename gf=S2GranuleDirFilename.create(tile.id);
          S2GranuleImageFilename imageFilename=gf.getImageFilename(bandInformation.physicalBand);
          String imgFilename=""String_Node_Str"" + File.separator + tile.id+ File.separator+ ""String_Node_Str""+ File.separator+ imageFilename.name;
          logger.finer(""String_Node_Str"" + imgFilename + ""String_Node_Str""+ bandInformation.physicalBand);
          File file=new File(productDir,imgFilename);
          if (file.exists()) {
            tileFileMap.put(tile.id,file);
          }
 else {
            logger.warning(String.format(""String_Node_Str"",file));
          }
        }
        if (!tileFileMap.isEmpty()) {
          BandInfo bandInfo=createBandInfoFromHeaderInfo(bandInformation,tileFileMap);
          bandInfoMap.put(bandIndex,bandInfo);
        }
 else {
          logger.warning(String.format(""String_Node_Str"",bandInformation.physicalBand));
        }
      }
 else {
        logger.warning(String.format(""String_Node_Str"",bandInformation.physicalBand));
      }
    }
    if (!bandInfoMap.isEmpty()) {
      addBands(product,bandInfoMap,sceneDescription.getSceneEnvelope(),new L1cSceneMultiLevelImageFactory(sceneDescription,ImageManager.getImageToModelTransform(product.getGeoCoding())),utmZone);
    }
    List<EopPolygon> polygons=filterMasksInUTMZones(utmZoneTileList);
    Map<String,List<EopPolygon>> polygonsByType=new HashMap<>();
    if (!polygons.isEmpty()) {
      Set<String> polygonTypes=polygons.stream().map(p -> p.getType()).collect(Collectors.toSet());
      for (      String polygonType : polygonTypes) {
        polygonsByType.put(polygonType,polygons.stream().filter(p -> p.getType().equals(polygonType)).collect(Collectors.toList()));
      }
      try {
        AffineTransform scaler=AffineTransform.getScaleInstance(this.productResolution,this.productResolution).createInverse();
        AffineTransform move=AffineTransform.getTranslateInstance(-sceneDescription.getSceneEnvelope().getMinX(),-sceneDescription.getSceneEnvelope().getMinY());
        AffineTransform mirror_y=new AffineTransform(1,0,0,-1,0,sceneDescription.getSceneEnvelope().getHeight() / this.productResolution);
        AffineTransform world2pixel=new AffineTransform(mirror_y);
        world2pixel.concatenate(scaler);
        world2pixel.concatenate(move);
        try {
          for (          String polygonType : polygonTypes) {
            final SimpleFeatureType type=Placemark.createGeometryFeatureType();
            final DefaultFeatureCollection collection=new DefaultFeatureCollection(""String_Node_Str"",type);
            List<EopPolygon> typedPolygon=polygonsByType.get(polygonType);
            for (int index=0; index < typedPolygon.size(); index++) {
              Polygon pol=typedPolygon.get(index).getPolygon();
              pol=(Polygon)JTS.transform(pol,new AffineTransform2D(world2pixel));
              Object[] data1={pol,String.format(""String_Node_Str"",index)};
              SimpleFeatureImpl f1=new SimpleFeatureImpl(data1,type,new FeatureIdImpl(String.format(""String_Node_Str"",index)),true);
              collection.add(f1);
            }
            VectorDataNode vdn=new VectorDataNode(polygonType,collection);
            product.getVectorDataGroup().add(vdn);
          }
        }
 catch (        MismatchedDimensionException e) {
        }
catch (        TransformException e) {
        }
      }
 catch (      NoninvertibleTransformException e) {
      }
    }
  }
  if (!""String_Node_Str"".equalsIgnoreCase(productCharacteristics.getMetaDataLevel())) {
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",SUN_ZENITH_GRID_INDEX);
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",SUN_AZIMUTH_GRID_INDEX);
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",VIEW_ZENITH_GRID_INDEX);
    addTiePointGridBand(product,metadataHeader,sceneDescription,""String_Node_Str"",VIEW_AZIMUTH_GRID_INDEX);
  }
  return product;
}",0.9615333065272752
170383,"public static String getSafeInfoExtractor(){
  try {
    File candidateByAPI=InstalledFileLocator.getDefault().locate(getInfoExtractor(),null,false);
    return candidateByAPI.getAbsolutePath();
  }
 catch (  IOException e) {
    return null;
  }
catch (  InterruptedException e) {
    return null;
  }
}","public static String getSafeInfoExtractor(){
  try {
    String nbDirs=System.getProperty(""String_Node_Str"");
    String[] dirModuleCandidates=nbDirs.split(SystemUtils.PATH_SEPARATOR);
    File candidateByIteration=null;
    for (    String aModuleCandidate : dirModuleCandidates) {
      candidateByIteration=new File(aModuleCandidate,getInfoExtractor());
      if (candidateByIteration.exists()) {
        break;
      }
    }
    if (candidateByIteration != null) {
      return candidateByIteration.getAbsolutePath();
    }
    File candidateByAPI=InstalledFileLocator.getDefault().locate(getInfoExtractor(),null,false);
    if (candidateByAPI != null) {
      return candidateByAPI.getAbsolutePath();
    }
 else {
      return ""String_Node_Str"";
    }
  }
 catch (  IOException e) {
    return null;
  }
catch (  InterruptedException e) {
    return null;
  }
}",0.5072587532023911
170384,"public static String getSafeDecompressor(){
  try {
    File candidateByAPI=InstalledFileLocator.getDefault().locate(getDecompressor(),null,false);
    return candidateByAPI.getAbsolutePath();
  }
 catch (  InterruptedException e) {
    return null;
  }
catch (  IOException e) {
    return null;
  }
}","public static String getSafeDecompressor(){
  try {
    String nbDirs=System.getProperty(""String_Node_Str"");
    String[] dirModuleCandidates=nbDirs.split(SystemUtils.PATH_SEPARATOR);
    File candidateByIteration=null;
    for (    String aModuleCandidate : dirModuleCandidates) {
      candidateByIteration=new File(aModuleCandidate,getDecompressor());
      if (candidateByIteration.exists()) {
        break;
      }
    }
    if (candidateByIteration != null) {
      return candidateByIteration.getAbsolutePath();
    }
    File candidateByAPI=InstalledFileLocator.getDefault().locate(getDecompressor(),null,false);
    if (candidateByAPI != null) {
      return candidateByAPI.getAbsolutePath();
    }
 else {
      return ""String_Node_Str"";
    }
  }
 catch (  InterruptedException e) {
    return null;
  }
catch (  IOException e) {
    return null;
  }
}",0.5060034305317325
170385,"@Override public void run(){
  String usedPath=null;
  String winPath=""String_Node_Str"";
  String linuxPath=""String_Node_Str"";
  String linux64Path=""String_Node_Str"";
  String macPath=""String_Node_Str"";
  try {
    if (SystemUtils.IS_OS_LINUX) {
      Process p=Runtime.getRuntime().exec(""String_Node_Str"");
      p.waitFor();
      String output=convertStreamToString(p.getInputStream());
      String errorOutput=convertStreamToString(p.getErrorStream());
      if (output.startsWith(""String_Node_Str"")) {
        usedPath=linuxPath;
      }
 else {
        usedPath=linux64Path;
      }
    }
 else     if (SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_MAC_OSX) {
      usedPath=macPath;
    }
 else {
      usedPath=winPath;
    }
    String testExtension=""String_Node_Str"" + usedPath;
    FileObject fo=FileUtil.getConfigRoot();
    File theFileCandidate=FileUtil.toFile(fo);
    File relativeToFileCandidate=new File(theFileCandidate,testExtension);
    relativeToFileCandidate=relativeToFileCandidate.getCanonicalFile();
    if (SystemUtils.IS_OS_LINUX || SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_MAC_OSX) {
      setExecutable(relativeToFileCandidate,true);
    }
  }
 catch (  IOException e) {
    ErrorManager.getDefault().notify(e);
  }
catch (  InterruptedException e) {
    ErrorManager.getDefault().notify(e);
  }
}","@Override public void run(){
  String infoExtractor=getSafeInfoExtractor();
  String decompressor=getSafeDecompressor();
  if (!infoExtractor.isEmpty()) {
    File infoExtractorFile=new File(infoExtractor);
    if (SystemUtils.IS_OS_LINUX || SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_MAC_OSX) {
      setExecutable(infoExtractorFile,true);
    }
  }
  if (!decompressor.isEmpty()) {
    File decompressorFile=new File(decompressor);
    if (SystemUtils.IS_OS_LINUX || SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_MAC_OSX) {
      setExecutable(decompressorFile,true);
    }
  }
}",0.2612801678908709
170386,"public static L1cMetadata.AnglesGrid[] getAnglesGrid(Level1C_Tile product){
  A_GEOMETRIC_INFO_TILE.Tile_Angles ang=product.getGeometric_Info().getTile_Angles();
  List<AN_INCIDENCE_ANGLE_GRID> incilist=ang.getViewing_Incidence_Angles_Grids();
  L1cMetadata.AnglesGrid[] darr=new L1cMetadata.AnglesGrid[incilist.size()];
  for (int index=0; index < incilist.size(); index++) {
    AN_INCIDENCE_ANGLE_GRID angleGrid=incilist.get(index);
    int azrows2=angleGrid.getAzimuth().getValues_List().getVALUES().size();
    int azcolumns2=angleGrid.getAzimuth().getValues_List().getVALUES().get(0).getValue().size();
    int zenrows2=angleGrid.getZenith().getValues_List().getVALUES().size();
    int zencolumns2=angleGrid.getZenith().getValues_List().getVALUES().size();
    L1cMetadata.AnglesGrid ag2=new L1cMetadata.AnglesGrid();
    ag2.azimuth=new float[azrows2][azcolumns2];
    ag2.zenith=new float[zenrows2][zencolumns2];
    for (int rowindex=0; rowindex < azrows2; rowindex++) {
      List<Float> azimuths=angleGrid.getAzimuth().getValues_List().getVALUES().get(rowindex).getValue();
      for (int colindex=0; colindex < azcolumns2; colindex++) {
        ag2.azimuth[rowindex][colindex]=azimuths.get(colindex);
      }
    }
    for (int rowindex=0; rowindex < zenrows2; rowindex++) {
      List<Float> zeniths=angleGrid.getZenith().getValues_List().getVALUES().get(rowindex).getValue();
      for (int colindex=0; colindex < zencolumns2; colindex++) {
        ag2.zenith[rowindex][colindex]=zeniths.get(colindex);
      }
    }
    ag2.bandId=Integer.parseInt(angleGrid.getBandId());
    ag2.detectorId=Integer.parseInt(angleGrid.getDetectorId());
    darr[index]=ag2;
  }
  return darr;
}","public static L1cMetadata.AnglesGrid[] getAnglesGrid(Level1C_Tile product){
  A_GEOMETRIC_INFO_TILE.Tile_Angles ang=product.getGeometric_Info().getTile_Angles();
  List<AN_INCIDENCE_ANGLE_GRID> incilist=ang.getViewing_Incidence_Angles_Grids();
  L1cMetadata.AnglesGrid[] darr=new L1cMetadata.AnglesGrid[incilist.size()];
  for (int index=0; index < incilist.size(); index++) {
    AN_INCIDENCE_ANGLE_GRID angleGrid=incilist.get(index);
    int azrows2=angleGrid.getAzimuth().getValues_List().getVALUES().size();
    int azcolumns2=angleGrid.getAzimuth().getValues_List().getVALUES().get(0).getValue().size();
    int zenrows2=angleGrid.getZenith().getValues_List().getVALUES().size();
    int zencolumns2=angleGrid.getZenith().getValues_List().getVALUES().get(0).getValue().size();
    L1cMetadata.AnglesGrid ag2=new L1cMetadata.AnglesGrid();
    ag2.azimuth=new float[azrows2][azcolumns2];
    ag2.zenith=new float[zenrows2][zencolumns2];
    for (int rowindex=0; rowindex < azrows2; rowindex++) {
      List<Float> azimuths=angleGrid.getAzimuth().getValues_List().getVALUES().get(rowindex).getValue();
      for (int colindex=0; colindex < azcolumns2; colindex++) {
        ag2.azimuth[rowindex][colindex]=azimuths.get(colindex);
      }
    }
    for (int rowindex=0; rowindex < zenrows2; rowindex++) {
      List<Float> zeniths=angleGrid.getZenith().getValues_List().getVALUES().get(rowindex).getValue();
      for (int colindex=0; colindex < zencolumns2; colindex++) {
        ag2.zenith[rowindex][colindex]=zeniths.get(colindex);
      }
    }
    ag2.bandId=Integer.parseInt(angleGrid.getBandId());
    ag2.detectorId=Integer.parseInt(angleGrid.getDetectorId());
    darr[index]=ag2;
  }
  return darr;
}",0.9947121034077556
170387,"private L1bMetadata(InputStream stream,File file,String parent) throws DataConversionException {
  try {
    Level1B_User_Product product=(Level1B_User_Product)L1bMetadataProc.readJaxbFromFilename(stream);
    productCharacteristics=L1bMetadataProc.getProductOrganization(product);
    Collection<String> tileNames=L1bMetadataProc.getTiles(product);
    List<File> fullTileNamesList=new ArrayList<File>();
    tileList=new ArrayList<Tile>();
    for (    String granuleName : tileNames) {
      FileInputStream fi=(FileInputStream)stream;
      File nestedMetadata=new File(parent,""String_Node_Str"" + File.separator + granuleName);
      logger.log(Level.WARNING,""String_Node_Str"" + nestedMetadata.getAbsolutePath());
      if (nestedMetadata.exists()) {
        S2L1bGranuleDirFilename aGranuleDir=S2L1bGranuleDirFilename.create(granuleName);
        Guardian.assertNotNull(""String_Node_Str"",aGranuleDir);
        String theName=aGranuleDir.getMetadataFilename().name;
        File nestedGranuleMetadata=new File(parent,""String_Node_Str"" + File.separator + granuleName+ File.separator+ theName);
        if (nestedGranuleMetadata.exists()) {
          fullTileNamesList.add(nestedGranuleMetadata);
        }
 else {
          String errorMessage=""String_Node_Str"" + granuleName + ""String_Node_Str"";
          logger.log(Level.WARNING,errorMessage);
        }
      }
 else {
        logger.log(Level.SEVERE,""String_Node_Str"" + nestedMetadata.getAbsolutePath());
      }
    }
    int index=0;
    for (    File aGranuleMetadataFile : fullTileNamesList) {
      long startTime=System.currentTimeMillis();
      Level1B_Granule aGranule=(Level1B_Granule)L1bMetadataProc.readJaxbFromFilename(new FileInputStream(aGranuleMetadataFile));
      long endTime=System.currentTimeMillis();
      logger.log(Level.SEVERE,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
      startTime=System.currentTimeMillis();
      Map<Integer,TileGeometry> geoms=L1bMetadataProc.getGranuleGeometries(aGranule);
      endTime=System.currentTimeMillis();
      logger.log(Level.SEVERE,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
      Tile t=new Tile(aGranule.getGeneral_Info().getGRANULE_ID().getValue());
      t.tileGeometry10M=geoms.get(10);
      t.tileGeometry20M=geoms.get(20);
      t.tileGeometry60M=geoms.get(60);
      tileList.add(t);
      index=index + 1;
      logger.log(Level.WARNING,""String_Node_Str"" + index);
    }
    S2L1bDatastripFilename stripName=L1bMetadataProc.getDatastrip(product);
    S2L1bDatastripDirFilename dirStripName=L1bMetadataProc.getDatastripDir(product);
    File dataStripMetadata=new File(parent,""String_Node_Str"" + File.separator + dirStripName.name+ File.separator+ stripName.name);
    metadataElement=new MetadataElement(""String_Node_Str"");
    MetadataElement userProduct=parseAll(new SAXBuilder().build(file).getRootElement());
    MetadataElement dataStrip=parseAll(new SAXBuilder().build(dataStripMetadata).getRootElement());
    metadataElement.addElement(userProduct);
    metadataElement.addElement(dataStrip);
    MetadataElement granulesMetaData=new MetadataElement(""String_Node_Str"");
    for (    File aGranuleMetadataFile : fullTileNamesList) {
      MetadataElement aGranule=parseAll(new SAXBuilder().build(aGranuleMetadataFile).getRootElement());
      granulesMetaData.addElement(aGranule);
    }
    metadataElement.addElement(granulesMetaData);
  }
 catch (  JAXBException e) {
    logger.severe(Utils.getStackTrace(e));
  }
catch (  FileNotFoundException e) {
    logger.severe(Utils.getStackTrace(e));
  }
catch (  JDOMException e) {
    logger.severe(Utils.getStackTrace(e));
  }
catch (  IOException e) {
    logger.severe(Utils.getStackTrace(e));
  }
}","private L1bMetadata(InputStream stream,File file,String parent) throws DataConversionException {
  try {
    context=L1bMetadataProc.getJaxbContext();
    unmarshaller=context.createUnmarshaller();
    Object ob=unmarshaller.unmarshal(stream);
    Object casted=((JAXBElement)ob).getValue();
    Level1B_User_Product product=(Level1B_User_Product)casted;
    productCharacteristics=L1bMetadataProc.getProductOrganization(product);
    Collection<String> tileNames=L1bMetadataProc.getTiles(product);
    List<File> fullTileNamesList=new ArrayList<File>();
    tileList=new ArrayList<Tile>();
    for (    String granuleName : tileNames) {
      File nestedMetadata=new File(parent,""String_Node_Str"" + File.separator + granuleName);
      logger.log(Level.WARNING,""String_Node_Str"" + nestedMetadata.getAbsolutePath());
      if (nestedMetadata.exists()) {
        S2L1bGranuleDirFilename aGranuleDir=S2L1bGranuleDirFilename.create(granuleName);
        Guardian.assertNotNull(""String_Node_Str"",aGranuleDir);
        String theName=aGranuleDir.getMetadataFilename().name;
        File nestedGranuleMetadata=new File(parent,""String_Node_Str"" + File.separator + granuleName+ File.separator+ theName);
        if (nestedGranuleMetadata.exists()) {
          fullTileNamesList.add(nestedGranuleMetadata);
        }
 else {
          String errorMessage=""String_Node_Str"" + granuleName + ""String_Node_Str"";
          logger.log(Level.WARNING,errorMessage);
        }
      }
 else {
        logger.log(Level.SEVERE,""String_Node_Str"" + nestedMetadata.getAbsolutePath());
      }
    }
    int index=0;
    for (    File aGranuleMetadataFile : fullTileNamesList) {
      long startTime=System.currentTimeMillis();
      Object aob=unmarshaller.unmarshal(new FileInputStream(aGranuleMetadataFile));
      Object acasted=((JAXBElement)aob).getValue();
      Level1B_Granule aGranule=(Level1B_Granule)acasted;
      long endTime=System.currentTimeMillis();
      logger.log(Level.SEVERE,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
      startTime=System.currentTimeMillis();
      Map<Integer,TileGeometry> geoms=L1bMetadataProc.getGranuleGeometries(aGranule);
      endTime=System.currentTimeMillis();
      logger.log(Level.SEVERE,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
      Tile t=new Tile(aGranule.getGeneral_Info().getGRANULE_ID().getValue());
      t.tileGeometry10M=geoms.get(10);
      t.tileGeometry20M=geoms.get(20);
      t.tileGeometry60M=geoms.get(60);
      tileList.add(t);
      index=index + 1;
      logger.log(Level.WARNING,""String_Node_Str"" + index);
    }
    S2L1bDatastripFilename stripName=L1bMetadataProc.getDatastrip(product);
    S2L1bDatastripDirFilename dirStripName=L1bMetadataProc.getDatastripDir(product);
    File dataStripMetadata=new File(parent,""String_Node_Str"" + File.separator + dirStripName.name+ File.separator+ stripName.name);
    metadataElement=new MetadataElement(""String_Node_Str"");
    MetadataElement userProduct=parseAll(new SAXBuilder().build(file).getRootElement());
    MetadataElement dataStrip=parseAll(new SAXBuilder().build(dataStripMetadata).getRootElement());
    metadataElement.addElement(userProduct);
    metadataElement.addElement(dataStrip);
    MetadataElement granulesMetaData=new MetadataElement(""String_Node_Str"");
    for (    File aGranuleMetadataFile : fullTileNamesList) {
      MetadataElement aGranule=parseAll(new SAXBuilder().build(aGranuleMetadataFile).getRootElement());
      granulesMetaData.addElement(aGranule);
    }
    metadataElement.addElement(granulesMetaData);
  }
 catch (  JAXBException e) {
    logger.severe(Utils.getStackTrace(e));
  }
catch (  FileNotFoundException e) {
    logger.severe(Utils.getStackTrace(e));
  }
catch (  JDOMException e) {
    logger.severe(Utils.getStackTrace(e));
  }
catch (  IOException e) {
    logger.severe(Utils.getStackTrace(e));
  }
}",0.933280901821995
170388,"public static Object readJaxbFromFilename(InputStream stream) throws JAXBException, FileNotFoundException {
  ClassLoader s2c=Sentinel2L1BProductReader.class.getClassLoader();
  JAXBContext jaxbContext=JAXBContext.newInstance(MetadataType.L1B,s2c);
  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
  Marshaller marshaller=jaxbContext.createMarshaller();
  Object ob=unmarshaller.unmarshal(stream);
  Object casted=((JAXBElement)ob).getValue();
  return casted;
}","public static Object readJaxbFromFilename(InputStream stream) throws JAXBException, FileNotFoundException {
  ClassLoader s2c=Sentinel2L1BProductReader.class.getClassLoader();
  JAXBContext jaxbContext=JAXBContext.newInstance(MetadataType.L1B,s2c);
  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
  Object ob=unmarshaller.unmarshal(stream);
  Object casted=((JAXBElement)ob).getValue();
  return casted;
}",0.9373601789709172
170389,"public static Map<Integer,L1bMetadata.TileGeometry> getGranuleGeometries(Level1B_Granule product){
  String id=product.getGeneral_Info().getGRANULE_ID().getValue();
  List<Double> polygon=product.getGeometric_Info().getGranule_Footprint().getGranule_Footprint().getFootprint().getEXT_POS_LIST();
  List<Coordinate> thePoints=as3DCoordinates(polygon);
  Coordinate[] arr=thePoints.toArray(new Coordinate[thePoints.size()]);
  ReferencedEnvelope re=new ReferencedEnvelope(arr[0].x,arr[2].x,arr[0].y,arr[2].y,DefaultGeographicCRS.WGS84);
  Map<Integer,L1bMetadata.TileGeometry> resolutions=new HashMap<Integer,L1bMetadata.TileGeometry>();
  List<A_GRANULE_DIMENSIONS.Size> sizes=product.getGeometric_Info().getGranule_Dimensions().getSize();
  int pos=product.getGeometric_Info().getGranule_Position().getPOSITION();
  for (  A_GRANULE_DIMENSIONS.Size gpos : sizes) {
    int index=gpos.getResolution();
    L1bMetadata.TileGeometry tgeox=new L1bMetadata.TileGeometry();
    tgeox.numCols=gpos.getNCOLS();
    tgeox.numRows=gpos.getNROWS();
    tgeox.envelope=re;
    tgeox.position=pos;
    tgeox.xDim=index;
    tgeox.yDim=-index;
    resolutions.put(index,tgeox);
  }
  return resolutions;
}","public static Map<Integer,L1bMetadata.TileGeometry> getGranuleGeometries(Level1B_Granule product){
  List<Double> polygon=product.getGeometric_Info().getGranule_Footprint().getGranule_Footprint().getFootprint().getEXT_POS_LIST();
  List<Coordinate> thePoints=as3DCoordinates(polygon);
  Coordinate[] arr=thePoints.toArray(new Coordinate[thePoints.size()]);
  ReferencedEnvelope re=new ReferencedEnvelope(arr[0].x,arr[2].x,arr[0].y,arr[2].y,DefaultGeographicCRS.WGS84);
  Map<Integer,L1bMetadata.TileGeometry> resolutions=new HashMap<Integer,L1bMetadata.TileGeometry>();
  List<A_GRANULE_DIMENSIONS.Size> sizes=product.getGeometric_Info().getGranule_Dimensions().getSize();
  int pos=product.getGeometric_Info().getGranule_Position().getPOSITION();
  for (  A_GRANULE_DIMENSIONS.Size gpos : sizes) {
    int index=gpos.getResolution();
    L1bMetadata.TileGeometry tgeox=new L1bMetadata.TileGeometry();
    tgeox.numCols=gpos.getNCOLS();
    tgeox.numRows=gpos.getNROWS();
    tgeox.envelope=re;
    tgeox.position=pos;
    tgeox.xDim=index;
    tgeox.yDim=-index;
    BeamLogManager.getSystemLogger().warning(""String_Node_Str"" + tgeox.toString());
    resolutions.put(index,tgeox);
  }
  return resolutions;
}",0.9375
170390,"public static L1bSceneDescription create(L1bMetadata header,L1bMetadata.Tile.idGeom index){
  List<L1bMetadata.Tile> tileList=header.getTileList();
  CoordinateReferenceSystem crs=null;
  Envelope2D[] tileEnvelopes=new Envelope2D[tileList.size()];
  TileInfo[] tileInfos=new TileInfo[tileList.size()];
  Envelope2D sceneEnvelope=null;
  if (tileList.isEmpty()) {
    throw new IllegalStateException();
  }
  for (int i=0; i < tileList.size(); i++) {
    L1bMetadata.Tile tile=tileList.get(i);
    if (crs == null) {
      try {
        crs=CRS.decode(tile.horizontalCsCode);
        BeamLogManager.getSystemLogger().fine(""String_Node_Str"" + crs);
      }
 catch (      FactoryException e) {
        BeamLogManager.getSystemLogger().severe(""String_Node_Str"" + tile.horizontalCsCode);
      }
    }
    L1bMetadata.TileGeometry selectedGeometry=tile.getGeometry(index);
    Envelope2D envelope=new Envelope2D(selectedGeometry.envelope);
    tileEnvelopes[i]=envelope;
    if (sceneEnvelope == null) {
      sceneEnvelope=new Envelope2D(crs,envelope);
    }
 else {
      sceneEnvelope.add(envelope);
    }
    tileInfos[i]=new TileInfo(i,tile.id,envelope,new Rectangle());
  }
  if (sceneEnvelope == null) {
    throw new IllegalStateException();
  }
  double imageX=sceneEnvelope.getX();
  double imageY=sceneEnvelope.getY() + sceneEnvelope.getHeight();
  Rectangle sceneBounds=null;
  for (int i=0; i < tileEnvelopes.length; i++) {
    L1bMetadata.Tile tile=tileList.get(i);
    L1bMetadata.TileGeometry selectedGeometry=tile.getGeometry(index);
    Envelope2D tileEnvelope=tileEnvelopes[i];
    double tileX=tileEnvelope.getX();
    double tileY=tileEnvelope.getY() + tileEnvelope.getHeight();
    Rectangle rectangle=new Rectangle((int)((tileX - imageX) / selectedGeometry.xDim),(int)((imageY - tileY) / -selectedGeometry.yDim),selectedGeometry.numCols,selectedGeometry.numRows);
    if (sceneBounds == null) {
      sceneBounds=new Rectangle(rectangle);
    }
 else {
      sceneBounds.add(rectangle);
    }
    tileInfos[i]=new TileInfo(i,tile.id,tileEnvelope,rectangle);
  }
  return new L1bSceneDescription(tileInfos,sceneEnvelope,sceneBounds,index);
}","public static L1bSceneDescription create(L1bMetadata header,L1bMetadata.Tile.idGeom index){
  List<L1bMetadata.Tile> tileList=header.getTileList();
  CoordinateReferenceSystem crs=null;
  Envelope2D[] tileEnvelopes=new Envelope2D[tileList.size()];
  TileInfo[] tileInfos=new TileInfo[tileList.size()];
  Envelope2D sceneEnvelope=null;
  if (tileList.isEmpty()) {
    throw new IllegalStateException();
  }
  for (int i=0; i < tileList.size(); i++) {
    L1bMetadata.Tile tile=tileList.get(i);
    if (crs == null) {
      crs=DefaultGeographicCRS.WGS84;
    }
    L1bMetadata.TileGeometry selectedGeometry=tile.getGeometry(index);
    Envelope2D envelope=new Envelope2D(selectedGeometry.envelope);
    tileEnvelopes[i]=envelope;
    if (sceneEnvelope == null) {
      sceneEnvelope=new Envelope2D(crs,envelope);
    }
 else {
      sceneEnvelope.add(envelope);
    }
    tileInfos[i]=new TileInfo(i,tile.id,envelope,new Rectangle());
  }
  if (sceneEnvelope == null) {
    throw new IllegalStateException();
  }
  double imageX=sceneEnvelope.getX();
  double imageY=sceneEnvelope.getY() + sceneEnvelope.getHeight();
  Rectangle sceneBounds=null;
  for (int i=0; i < tileEnvelopes.length; i++) {
    L1bMetadata.Tile tile=tileList.get(i);
    L1bMetadata.TileGeometry selectedGeometry=tile.getGeometry(index);
    Envelope2D tileEnvelope=tileEnvelopes[i];
    double tileX=tileEnvelope.getX();
    double tileY=tileEnvelope.getY() + tileEnvelope.getHeight();
    Rectangle rectangle=new Rectangle((int)((tileX - imageX) / selectedGeometry.xDim),(int)((imageY - tileY) / -selectedGeometry.yDim),selectedGeometry.numCols,selectedGeometry.numRows);
    if (sceneBounds == null) {
      sceneBounds=new Rectangle(rectangle);
    }
 else {
      sceneBounds.add(rectangle);
    }
    tileInfos[i]=new TileInfo(i,tile.id,tileEnvelope,rectangle);
  }
  return new L1bSceneDescription(tileInfos,sceneEnvelope,sceneBounds,index);
}",0.929149301299338
170391,"@Override protected Product readProductNodesImpl() throws IOException {
  productDirectory=RapidEyeL1ReaderPlugin.getInput(getInput());
  String metadataFileName=productDirectory.findFirst(RapidEyeConstants.METADATA_FILE_SUFFIX);
  File metadataFile=productDirectory.getFile(metadataFileName);
  if (metadataFile.exists()) {
    logger.info(""String_Node_Str"");
    metadata=XmlMetadata.create(RapidEyeMetadata.class,metadataFile);
    if (metadata == null) {
      logger.warning(String.format(""String_Node_Str"",metadataFile.getName()));
    }
 else {
      metadata.setFileName(metadataFile.getName());
      String metadataProfile=metadata.getMetadataProfile();
      if (metadataProfile == null || !metadataProfile.startsWith(RapidEyeConstants.PROFILE_L1)) {
        IOException ex=new IOException(""String_Node_Str"");
        logger.log(Level.SEVERE,ex.getMessage(),ex);
        throw ex;
      }
    }
  }
 else {
    logger.info(""String_Node_Str"");
  }
  parseAdditionalMetadataFiles();
  try {
    String[] nitfFiles=getRasterFileNames(productDirectory);
    for (int i=0; i < nitfFiles.length; i++) {
      NITFReaderWrapper reader=new NITFReaderWrapper(productDirectory.getFile(nitfFiles[i]));
      if (product == null) {
        product=new Product(metadata != null ? metadata.getProductName() : RapidEyeConstants.PRODUCT_GENERIC_NAME,RapidEyeConstants.L1_FORMAT_NAMES[0],metadata != null ? metadata.getRasterWidth() : reader.getWidth(),metadata != null ? metadata.getRasterHeight() : reader.getHeight(),this);
        if (metadata != null) {
          product.setProductType(metadata.getMetadataProfile());
          product.setStartTime(metadata.getProductStartTime());
          product.setEndTime(metadata.getProductEndTime());
          product.getMetadataRoot().addElement(metadata.getRootElement());
          NITFMetadata nitfMetadata=reader.getMetadata();
          if (nitfMetadata != null)           product.getMetadataRoot().addElement(nitfMetadata.getMetadataRoot());
        }
        product.setPreferredTileSize(getPreferredTileSize());
      }
      addBandToProduct(product,reader,i);
    }
    if (product != null) {
      readMasks(productDirectory);
      initGeoCoding(product);
      product.setModified(false);
    }
  }
 catch (  IIOException e) {
    logger.severe(""String_Node_Str"");
  }
  return product;
}","@Override protected Product readProductNodesImpl() throws IOException {
  productDirectory=RapidEyeReader.getInput(getInput());
  String metadataFileName=productDirectory.findFirst(RapidEyeConstants.METADATA_FILE_SUFFIX);
  File metadataFile=productDirectory.getFile(metadataFileName);
  if (metadataFile.exists()) {
    logger.info(""String_Node_Str"");
    metadata=XmlMetadata.create(RapidEyeMetadata.class,metadataFile);
    if (metadata == null) {
      logger.warning(String.format(""String_Node_Str"",metadataFile.getName()));
    }
 else {
      metadata.setFileName(metadataFile.getName());
      String metadataProfile=metadata.getMetadataProfile();
      if (metadataProfile == null || !metadataProfile.startsWith(RapidEyeConstants.PROFILE_L1)) {
        IOException ex=new IOException(""String_Node_Str"");
        logger.log(Level.SEVERE,ex.getMessage(),ex);
        throw ex;
      }
    }
  }
 else {
    logger.info(""String_Node_Str"");
  }
  parseAdditionalMetadataFiles();
  try {
    String[] nitfFiles=getRasterFileNames(productDirectory);
    for (int i=0; i < nitfFiles.length; i++) {
      NITFReaderWrapper reader=new NITFReaderWrapper(productDirectory.getFile(nitfFiles[i]));
      if (product == null) {
        product=new Product(metadata != null ? metadata.getProductName() : RapidEyeConstants.PRODUCT_GENERIC_NAME,RapidEyeConstants.L1_FORMAT_NAMES[0],metadata != null ? metadata.getRasterWidth() : reader.getWidth(),metadata != null ? metadata.getRasterHeight() : reader.getHeight(),this);
        if (metadata != null) {
          product.setProductType(metadata.getMetadataProfile());
          product.setStartTime(metadata.getProductStartTime());
          product.setEndTime(metadata.getProductEndTime());
          product.getMetadataRoot().addElement(metadata.getRootElement());
          NITFMetadata nitfMetadata=reader.getMetadata();
          if (nitfMetadata != null)           product.getMetadataRoot().addElement(nitfMetadata.getMetadataRoot());
        }
        product.setPreferredTileSize(getPreferredTileSize());
      }
      addBandToProduct(product,reader,i);
    }
    if (product != null) {
      readMasks(productDirectory);
      initGeoCoding(product);
      product.setModified(false);
    }
  }
 catch (  IIOException e) {
    logger.severe(""String_Node_Str"");
  }
  return product;
}",0.9982905982905984
170392,"@Override public DecodeQualification getDecodeQualification(Object input){
  DecodeQualification qualification=DecodeQualification.UNABLE;
  File file=new File(input.toString());
  String fileName=file.getName().toLowerCase();
  if (fileName.endsWith(""String_Node_Str"")) {
    qualification=DecodeQualification.SUITABLE;
  }
 else   if (fileName.endsWith(RapidEyeConstants.METADATA_FILE_SUFFIX)) {
    File folder=file.getParentFile();
    File[] files=folder.listFiles();
    if (files != null) {
      boolean consistentProduct=true;
      for (      String namePattern : RapidEyeConstants.L1_FILENAME_PATTERNS) {
        if (!namePattern.endsWith(""String_Node_Str"")) {
          boolean patternMatched=false;
          for (          File f : files) {
            patternMatched|=f.getName().matches(namePattern);
          }
          consistentProduct&=patternMatched;
        }
      }
      if (consistentProduct)       qualification=DecodeQualification.INTENDED;
    }
  }
  return qualification;
}","@Override public DecodeQualification getDecodeQualification(Object input){
  DecodeQualification qualification=DecodeQualification.UNABLE;
  File file=new File(input.toString());
  String fileName=file.getName().toLowerCase();
  String[] files=null;
  if (fileName.endsWith(""String_Node_Str"")) {
    try {
      files=RapidEyeReader.getInput(input).list(""String_Node_Str"");
    }
 catch (    IOException e) {
    }
  }
 else   if (fileName.endsWith(RapidEyeConstants.METADATA_FILE_SUFFIX)) {
    File folder=file.getParentFile();
    files=folder.list();
  }
  if (files != null) {
    boolean consistentProduct=true;
    for (    String namePattern : RapidEyeConstants.L1_FILENAME_PATTERNS) {
      if (!namePattern.endsWith(""String_Node_Str"")) {
        boolean patternMatched=false;
        for (        String f : files) {
          patternMatched|=f.matches(namePattern);
        }
        consistentProduct&=patternMatched;
      }
    }
    if (consistentProduct)     qualification=DecodeQualification.INTENDED;
  }
  return qualification;
}",0.6669912366114897
170393,"@Override protected Product readProductNodesImpl() throws IOException {
  productDirectory=RapidEyeL1ReaderPlugin.getInput(getInput());
  File selection=RapidEyeL1ReaderPlugin.getFileInput(getInput());
  String metadataFileName;
  File metadataFile;
  if (selection.isFile() && selection.getName().toLowerCase().endsWith(RapidEyeConstants.METADATA_FILE_SUFFIX)) {
    metadataFile=selection;
  }
 else {
    metadataFileName=productDirectory.findFirst(RapidEyeConstants.METADATA_FILE_SUFFIX);
    metadataFile=productDirectory.getFile(metadataFileName);
  }
  if (metadataFile.exists()) {
    logger.info(""String_Node_Str"");
    metadata=XmlMetadata.create(RapidEyeMetadata.class,metadataFile);
    if (metadata == null) {
      logger.warning(String.format(""String_Node_Str"",metadataFile.getName()));
    }
 else {
      metadata.setFileName(metadataFile.getName());
    }
  }
 else {
    logger.info(""String_Node_Str"");
  }
  if (metadata != null) {
    String metadataProfile=metadata.getMetadataProfile();
    if (metadataProfile == null || !metadataProfile.startsWith(RapidEyeConstants.PROFILE_L3)) {
      IOException ex=new IOException(""String_Node_Str"");
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      throw ex;
    }
    if (metadata.getRasterWidth() > 0 && metadata.getRasterHeight() > 0) {
      createProduct(metadata.getRasterWidth(),metadata.getRasterHeight(),metadataProfile);
    }
    addBands(product,metadata);
    readMasks(productDirectory);
    product.setModified(false);
  }
 else {
    product.setModified(false);
  }
  return product;
}","@Override protected Product readProductNodesImpl() throws IOException {
  productDirectory=RapidEyeReader.getInput(getInput());
  File selection=RapidEyeReader.getFileInput(getInput());
  String metadataFileName;
  File metadataFile;
  if (selection.isFile() && selection.getName().toLowerCase().endsWith(RapidEyeConstants.METADATA_FILE_SUFFIX)) {
    metadataFile=selection;
  }
 else {
    metadataFileName=productDirectory.findFirst(RapidEyeConstants.METADATA_FILE_SUFFIX);
    metadataFile=productDirectory.getFile(metadataFileName);
  }
  if (metadataFile.exists()) {
    logger.info(""String_Node_Str"");
    metadata=XmlMetadata.create(RapidEyeMetadata.class,metadataFile);
    if (metadata == null) {
      logger.warning(String.format(""String_Node_Str"",metadataFile.getName()));
    }
 else {
      metadata.setFileName(metadataFile.getName());
    }
  }
 else {
    logger.info(""String_Node_Str"");
  }
  if (metadata != null) {
    String metadataProfile=metadata.getMetadataProfile();
    if (metadataProfile == null || !metadataProfile.startsWith(RapidEyeConstants.PROFILE_L3)) {
      IOException ex=new IOException(""String_Node_Str"");
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      throw ex;
    }
    if (metadata.getRasterWidth() > 0 && metadata.getRasterHeight() > 0) {
      createProduct(metadata.getRasterWidth(),metadata.getRasterHeight(),metadataProfile);
    }
    addBands(product,metadata);
    readMasks(productDirectory);
    product.setModified(false);
  }
 else {
    product.setModified(false);
  }
  return product;
}",0.9948849104859336
170394,"@Override public DecodeQualification getDecodeQualification(Object input){
  DecodeQualification qualification=DecodeQualification.UNABLE;
  File file=new File(input.toString());
  String fileName=file.getName().toLowerCase();
  if (fileName.endsWith(""String_Node_Str"")) {
    qualification=DecodeQualification.SUITABLE;
  }
 else   if (fileName.endsWith(RapidEyeConstants.METADATA_FILE_SUFFIX)) {
    File folder=file.getParentFile();
    File[] files=folder.listFiles();
    if (files != null) {
      boolean consistentProduct=true;
      for (      String namePattern : RapidEyeConstants.L3_FILENAME_PATTERNS) {
        if (!namePattern.endsWith(""String_Node_Str"")) {
          boolean patternMatched=false;
          for (          File f : files) {
            patternMatched|=f.getName().matches(namePattern);
          }
          consistentProduct&=patternMatched;
        }
      }
      if (consistentProduct)       qualification=DecodeQualification.INTENDED;
    }
  }
  return qualification;
}","@Override public DecodeQualification getDecodeQualification(Object input){
  DecodeQualification qualification=DecodeQualification.UNABLE;
  File file=new File(input.toString());
  String fileName=file.getName().toLowerCase();
  String[] files=null;
  if (fileName.endsWith(""String_Node_Str"")) {
    try {
      files=RapidEyeReader.getInput(input).list(""String_Node_Str"");
    }
 catch (    IOException e) {
    }
  }
 else   if (fileName.endsWith(RapidEyeConstants.METADATA_FILE_SUFFIX)) {
    File folder=file.getParentFile();
    files=folder.list();
  }
  if (files != null) {
    boolean consistentProduct=true;
    for (    String namePattern : RapidEyeConstants.L3_FILENAME_PATTERNS) {
      if (!namePattern.endsWith(""String_Node_Str"")) {
        boolean patternMatched=false;
        for (        String f : files) {
          if (f.matches(RapidEyeConstants.NOT_L3_FILENAME_PATTERN)) {
            consistentProduct=false;
          }
 else {
            patternMatched|=f.matches(namePattern);
          }
        }
        consistentProduct&=patternMatched;
      }
    }
    if (consistentProduct)     qualification=DecodeQualification.INTENDED;
  }
  return qualification;
}",0.6177676537585421
170395,"public ProductData.UTC getCenterTime(){
  ProductData.UTC centerTime=null;
  MetadataElement currentElement;
  if (((currentElement=rootElement.getElement(SpotConstants.TAG_DATA_STRIP)) != null) && ((currentElement=currentElement.getElement(SpotConstants.TAG_SENSOR_CONFIGURATION)) != null) && ((currentElement=currentElement.getElement(SpotConstants.TAG_TIME_STAMP)) != null)) {
    String stringData=currentElement.getAttributeString(SpotConstants.TAG_SCENE_CENTER_TIME);
    if (stringData != null) {
      String milliseconds=stringData.substring(stringData.indexOf(""String_Node_Str"") + 1);
      try {
        Date date=new SimpleDateFormat(SpotConstants.UTC_DATE_FORMAT).parse(stringData);
        centerTime=ProductData.UTC.create(date,Long.parseLong(milliseconds));
      }
 catch (      ParseException pEx) {
        logger.warning(String.format(MISSING_ELEMENT_WARNING,SpotConstants.TAG_SCENE_CENTER_TIME));
      }
    }
  }
 else {
    logger.warning(String.format(MISSING_ELEMENT_WARNING,SpotConstants.TAG_SCENE_CENTER_TIME));
  }
  return centerTime;
}","public ProductData.UTC getCenterTime(){
  ProductData.UTC centerTime=null;
  MetadataElement currentElement;
  if (((currentElement=rootElement.getElement(SpotConstants.TAG_DATA_STRIP)) != null) && ((currentElement=currentElement.getElement(SpotConstants.TAG_SENSOR_CONFIGURATION)) != null) && ((currentElement=currentElement.getElement(SpotConstants.TAG_TIME_STAMP)) != null)) {
    String stringData=currentElement.getAttributeString(SpotConstants.TAG_SCENE_CENTER_TIME);
    if (stringData != null) {
      String milliseconds=stringData.substring(stringData.indexOf(""String_Node_Str"") + 1);
      stringData=stringData.substring(0,stringData.indexOf(""String_Node_Str"")) + ""String_Node_Str"";
      try {
        Date date=new SimpleDateFormat(SpotConstants.UTC_DATE_FORMAT).parse(stringData);
        centerTime=ProductData.UTC.create(date,Long.parseLong(milliseconds));
      }
 catch (      ParseException pEx) {
        logger.warning(String.format(MISSING_ELEMENT_WARNING,SpotConstants.TAG_SCENE_CENTER_TIME));
      }
    }
  }
 else {
    logger.warning(String.format(MISSING_ELEMENT_WARNING,SpotConstants.TAG_SCENE_CENTER_TIME));
  }
  return centerTime;
}",0.9551971326164874
170396,"public static String getModulesDir() throws URISyntaxException, FileNotFoundException {
  String subStr=""String_Node_Str"";
  ClassLoader s2c=Sentinel2ProductReader.class.getClassLoader();
  URLClassLoader s2ClassLoader=(URLClassLoader)s2c;
  URL[] theURLs=s2ClassLoader.getURLs();
  for (  URL url : theURLs) {
    if (url.getPath().contains(subStr) && url.getPath().contains(""String_Node_Str"")) {
      URI uri=url.toURI();
      URI parent=uri.getPath().endsWith(""String_Node_Str"") ? uri.resolve(""String_Node_Str"") : uri.resolve(""String_Node_Str"");
      return parent.getPath();
    }
  }
  throw new FileNotFoundException(""String_Node_Str"" + subStr + ""String_Node_Str"");
}","public static String getModulesDir() throws URISyntaxException, FileNotFoundException {
  String subStr=""String_Node_Str"";
  ClassLoader s2c=Sentinel2ProductReader.class.getClassLoader();
  URLClassLoader s2ClassLoader=(URLClassLoader)s2c;
  URL[] theURLs=s2ClassLoader.getURLs();
  for (  URL url : theURLs) {
    if (url.getPath().contains(subStr) && url.getPath().contains(""String_Node_Str"")) {
      URI uri=url.toURI();
      URI parent=uri.getPath().endsWith(""String_Node_Str"") ? uri.resolve(""String_Node_Str"") : uri.resolve(""String_Node_Str"");
      return parent.getPath();
    }
 else {
      if (url.getPath().contains(subStr)) {
        URI uri=url.toURI();
        URI parent=uri.getPath().endsWith(""String_Node_Str"") ? uri.resolve(""String_Node_Str"") : uri.resolve(""String_Node_Str"");
        return parent.getPath();
      }
    }
  }
  throw new FileNotFoundException(""String_Node_Str"" + subStr + ""String_Node_Str"");
}",0.8407960199004975
170397,"public static Object readJaxbFromFilename(InputStream stream) throws JAXBException, FileNotFoundException {
  JAXBContext jaxbContext=JAXBContext.newInstance(""String_Node_Str"");
  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
  Marshaller marshaller=jaxbContext.createMarshaller();
  Object ob=unmarshaller.unmarshal(stream);
  Object casted=((JAXBElement)ob).getValue();
  return casted;
}","public static Object readJaxbFromFilename(InputStream stream) throws JAXBException, FileNotFoundException {
  ClassLoader s2c=Sentinel2ProductReader.class.getClassLoader();
  JAXBContext jaxbContext=JAXBContext.newInstance(""String_Node_Str"",s2c);
  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
  Marshaller marshaller=jaxbContext.createMarshaller();
  Object ob=unmarshaller.unmarshal(stream);
  Object casted=((JAXBElement)ob).getValue();
  return casted;
}",0.9213226909920182
170398,"static PlanarImage create(File imageFile,File cacheDir,Point imagePos,L1cTileLayout l1cTileLayout,MultiLevelModel imageModel,S2SpatialResolution spatialResolution,int level){
  Assert.notNull(cacheDir,""String_Node_Str"");
  Assert.notNull(l1cTileLayout,""String_Node_Str"");
  Assert.notNull(imageModel,""String_Node_Str"");
  Assert.notNull(spatialResolution,""String_Node_Str"");
  if (imageFile != null) {
    PlanarImage opImage=new L1cTileOpImage(imageFile,cacheDir,imagePos,l1cTileLayout,imageModel,level);
    if (spatialResolution != S2SpatialResolution.R10M) {
      System.err.println(""String_Node_Str"");
      return createScaledImage(opImage,spatialResolution,level);
    }
    System.err.println(""String_Node_Str"");
    return opImage;
  }
 else {
    int targetWidth=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].width,level);
    int targetHeight=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].height,level);
    Dimension targetTileDim=getTileDimAtResolutionLevel(L1C_TILE_LAYOUTS[0].tileWidth,L1C_TILE_LAYOUTS[0].tileHeight,level);
    SampleModel sampleModel=ImageUtils.createSingleBandedSampleModel(S2Config.SAMPLE_DATA_BUFFER_TYPE,targetWidth,targetHeight);
    ImageLayout imageLayout=new ImageLayout(0,0,targetWidth,targetHeight,0,0,targetTileDim.width,targetTileDim.height,sampleModel,null);
    return ConstantDescriptor.create((float)imageLayout.getWidth(null),(float)imageLayout.getHeight(null),new Short[]{S2Config.FILL_CODE_NO_FILE},new RenderingHints(JAI.KEY_IMAGE_LAYOUT,imageLayout));
  }
}","static PlanarImage create(File imageFile,File cacheDir,Point imagePos,L1cTileLayout l1cTileLayout,MultiLevelModel imageModel,S2SpatialResolution spatialResolution,int level){
  Assert.notNull(cacheDir,""String_Node_Str"");
  Assert.notNull(l1cTileLayout,""String_Node_Str"");
  Assert.notNull(imageModel,""String_Node_Str"");
  Assert.notNull(spatialResolution,""String_Node_Str"");
  if (imageFile != null) {
    PlanarImage opImage=new L1cTileOpImage(imageFile,cacheDir,imagePos,l1cTileLayout,imageModel,level);
    if (spatialResolution != S2SpatialResolution.R10M) {
      return createScaledImage(opImage,spatialResolution,level);
    }
    return opImage;
  }
 else {
    int targetWidth=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].width,level);
    int targetHeight=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].height,level);
    Dimension targetTileDim=getTileDimAtResolutionLevel(L1C_TILE_LAYOUTS[0].tileWidth,L1C_TILE_LAYOUTS[0].tileHeight,level);
    SampleModel sampleModel=ImageUtils.createSingleBandedSampleModel(S2Config.SAMPLE_DATA_BUFFER_TYPE,targetWidth,targetHeight);
    ImageLayout imageLayout=new ImageLayout(0,0,targetWidth,targetHeight,0,0,targetTileDim.width,targetTileDim.height,sampleModel,null);
    return ConstantDescriptor.create((float)imageLayout.getWidth(null),(float)imageLayout.getHeight(null),new Short[]{S2Config.FILL_CODE_NO_FILE},new RenderingHints(JAI.KEY_IMAGE_LAYOUT,imageLayout));
  }
}",0.9325153374233128
170399,"private void decompressTile(final File outputFile,int jp2TileX,int jp2TileY) throws IOException {
  final int tileIndex=l1cTileLayout.numXTiles * jp2TileY + jp2TileX;
  ProcessBuilder builder=new ProcessBuilder(S2Config.OPJ_DECOMPRESSOR_EXE,""String_Node_Str"",imageFile.getPath(),""String_Node_Str"",outputFile.getPath(),""String_Node_Str"",getLevel() + ""String_Node_Str"",""String_Node_Str"",tileIndex + ""String_Node_Str"");
  final Process process=builder.directory(cacheDir).start();
  System.err.println(builder.command());
  try {
    final int exitCode=process.waitFor();
    if (exitCode != 0) {
      System.err.println(""String_Node_Str"" + exitCode);
    }
  }
 catch (  InterruptedException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}","private void decompressTile(final File outputFile,int jp2TileX,int jp2TileY) throws IOException {
  final int tileIndex=l1cTileLayout.numXTiles * jp2TileY + jp2TileX;
  ProcessBuilder builder=null;
  if (SystemUtils.IS_OS_WINDOWS) {
    String inputFileName=Utils.GetShortPathName(imageFile.getPath());
    String outputFileName=outputFile.getPath();
    builder=new ProcessBuilder(S2Config.OPJ_DECOMPRESSOR_EXE,""String_Node_Str"",inputFileName,""String_Node_Str"",outputFileName,""String_Node_Str"",getLevel() + ""String_Node_Str"",""String_Node_Str"",tileIndex + ""String_Node_Str"");
  }
 else {
    builder=new ProcessBuilder(S2Config.OPJ_DECOMPRESSOR_EXE,""String_Node_Str"",imageFile.getPath(),""String_Node_Str"",outputFile.getPath(),""String_Node_Str"",getLevel() + ""String_Node_Str"",""String_Node_Str"",tileIndex + ""String_Node_Str"");
  }
  final Process process=builder.directory(cacheDir).start();
  System.err.println(builder.command());
  try {
    final int exitCode=process.waitFor();
    if (exitCode != 0) {
      System.err.println(""String_Node_Str"" + exitCode);
    }
  }
 catch (  InterruptedException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}",0.7828335056876939
170400,"static PlanarImage createScaledImage(PlanarImage sourceImage,S2SpatialResolution resolution,int level){
  int sourceWidth=sourceImage.getWidth();
  int sourceHeight=sourceImage.getHeight();
  int targetWidth=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].width,level);
  int targetHeight=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].height,level);
  float scaleX=resolution.resolution / (float)S2SpatialResolution.R10M.resolution;
  float scaleY=resolution.resolution / (float)S2SpatialResolution.R10M.resolution;
  final Dimension tileDim=getTileDim(targetWidth,targetHeight);
  ImageLayout imageLayout=new ImageLayout();
  imageLayout.setTileWidth(tileDim.width);
  imageLayout.setTileHeight(tileDim.height);
  RenderingHints renderingHints=new RenderingHints(JAI.KEY_BORDER_EXTENDER,BorderExtender.createInstance(BorderExtender.BORDER_ZERO));
  renderingHints.put(JAI.KEY_IMAGE_LAYOUT,imageLayout);
  RenderedOp scaledImage=ScaleDescriptor.create(sourceImage,scaleX,scaleY,sourceImage.getMinX() - sourceImage.getMinX() * scaleX,sourceImage.getMinY() - sourceImage.getMinY() * scaleY,Interpolation.getInstance(Interpolation.INTERP_NEAREST),renderingHints);
  if (scaledImage.getWidth() != targetWidth || scaledImage.getHeight() != targetHeight) {
    return CropDescriptor.create(scaledImage,(float)sourceImage.getMinX(),(float)sourceImage.getMinY(),(float)targetWidth,(float)targetHeight,null);
  }
 else {
    return scaledImage;
  }
}","static PlanarImage createScaledImage(PlanarImage sourceImage,S2SpatialResolution resolution,int level){
  int sourceWidth=sourceImage.getWidth();
  int sourceHeight=sourceImage.getHeight();
  int targetWidth=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].width,level);
  int targetHeight=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].height,level);
  float scaleX=resolution.resolution / (float)S2SpatialResolution.R10M.resolution;
  float scaleY=resolution.resolution / (float)S2SpatialResolution.R10M.resolution;
  final Dimension tileDim=getTileDim(targetWidth,targetHeight);
  ImageLayout imageLayout=new ImageLayout();
  imageLayout.setTileWidth(tileDim.width);
  imageLayout.setTileHeight(tileDim.height);
  BorderExtender borderExtender=BorderExtender.createInstance(BorderExtender.BORDER_ZERO);
  RenderingHints renderingHints=new RenderingHints(JAI.KEY_BORDER_EXTENDER,borderExtender);
  renderingHints.put(JAI.KEY_IMAGE_LAYOUT,imageLayout);
  RenderedOp scaledImage=ScaleDescriptor.create(sourceImage,scaleX,scaleY,sourceImage.getMinX() - sourceImage.getMinX() * scaleX,sourceImage.getMinY() - sourceImage.getMinY() * scaleY,Interpolation.getInstance(Interpolation.INTERP_NEAREST),renderingHints);
  if (scaledImage.getWidth() == targetWidth && scaledImage.getHeight() == targetHeight) {
    return scaledImage;
  }
 else   if (scaledImage.getWidth() >= targetWidth && scaledImage.getHeight() >= targetHeight) {
    return CropDescriptor.create(scaledImage,(float)sourceImage.getMinX(),(float)sourceImage.getMinY(),(float)targetWidth,(float)targetHeight,null);
  }
 else   if (scaledImage.getWidth() <= targetWidth && scaledImage.getHeight() <= targetHeight) {
    int rightPad=targetWidth - scaledImage.getWidth();
    int bottomPad=targetHeight - scaledImage.getHeight();
    return BorderDescriptor.create(scaledImage,0,rightPad,0,bottomPad,borderExtender,null);
  }
 else {
    throw new IllegalStateException();
  }
}",0.8146167557932263
170401,"static Dimension getTileDim(int width,int height){
  return new Dimension(width < S2Config.DEFAULT_TILE_SIZE ? width : S2Config.DEFAULT_TILE_SIZE,height < S2Config.DEFAULT_TILE_SIZE ? height : S2Config.DEFAULT_TILE_SIZE);
}","static Dimension getTileDim(int width,int height){
  return new Dimension(width < S2Config.DEFAULT_JAI_TILE_SIZE ? width : S2Config.DEFAULT_JAI_TILE_SIZE,height < S2Config.DEFAULT_JAI_TILE_SIZE ? height : S2Config.DEFAULT_JAI_TILE_SIZE);
}",0.9653679653679652
170402,"L1cTileOpImage(File imageFile,File cacheDir,Point imagePos,L1cTileLayout l1cTileLayout,MultiLevelModel imageModel,int level){
  super(S2Config.DATA_BUFFER_TYPE,imagePos,l1cTileLayout.width,l1cTileLayout.height,getTileDimAtResolutionLevel(l1cTileLayout.tileWidth,l1cTileLayout.tileHeight,level),null,ResolutionLevel.create(imageModel,level));
  Assert.notNull(imageFile,""String_Node_Str"");
  Assert.notNull(cacheDir,""String_Node_Str"");
  Assert.notNull(l1cTileLayout,""String_Node_Str"");
  Assert.notNull(imageModel,""String_Node_Str"");
  this.imageFile=imageFile;
  this.cacheDir=cacheDir;
  this.l1cTileLayout=l1cTileLayout;
  this.openFiles=new HashMap<File,Jp2File>();
  this.locks=new HashMap<File,Object>();
}","L1cTileOpImage(File imageFile,File cacheDir,Point imagePos,L1cTileLayout l1cTileLayout,MultiLevelModel imageModel,int level){
  super(S2Config.SAMPLE_DATA_BUFFER_TYPE,imagePos,l1cTileLayout.width,l1cTileLayout.height,getTileDimAtResolutionLevel(l1cTileLayout.tileWidth,l1cTileLayout.tileHeight,level),null,ResolutionLevel.create(imageModel,level));
  Assert.notNull(imageFile,""String_Node_Str"");
  Assert.notNull(cacheDir,""String_Node_Str"");
  Assert.notNull(l1cTileLayout,""String_Node_Str"");
  Assert.notNull(imageModel,""String_Node_Str"");
  this.imageFile=imageFile;
  this.cacheDir=cacheDir;
  this.l1cTileLayout=l1cTileLayout;
  this.openFiles=new HashMap<File,Jp2File>();
  this.locks=new HashMap<File,Object>();
}",0.9951083158630328
170403,"static PlanarImage create(File imageFile,File cacheDir,Point imagePos,L1cTileLayout l1cTileLayout,MultiLevelModel imageModel,S2SpatialResolution spatialResolution,int level){
  Assert.notNull(cacheDir,""String_Node_Str"");
  Assert.notNull(l1cTileLayout,""String_Node_Str"");
  Assert.notNull(imageModel,""String_Node_Str"");
  Assert.notNull(spatialResolution,""String_Node_Str"");
  if (imageFile != null) {
    PlanarImage opImage=new L1cTileOpImage(imageFile,cacheDir,imagePos,l1cTileLayout,imageModel,level);
    if (spatialResolution != S2SpatialResolution.R10M) {
      return createScaledImage(opImage,spatialResolution,level);
    }
    return opImage;
  }
 else {
    int targetWidth=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].width,level);
    int targetHeight=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].height,level);
    Dimension targetTileDim=getTileDimAtResolutionLevel(L1C_TILE_LAYOUTS[0].tileWidth,L1C_TILE_LAYOUTS[0].tileHeight,level);
    SampleModel sampleModel=ImageUtils.createSingleBandedSampleModel(S2Config.DATA_BUFFER_TYPE,targetWidth,targetHeight);
    ImageLayout imageLayout=new ImageLayout(0,0,targetWidth,targetHeight,0,0,targetTileDim.width,targetTileDim.height,sampleModel,null);
    return ConstantDescriptor.create((float)imageLayout.getWidth(null),(float)imageLayout.getHeight(null),new Short[]{S2Config.FILL_CODE_NO_FILE},new RenderingHints(JAI.KEY_IMAGE_LAYOUT,imageLayout));
  }
}","static PlanarImage create(File imageFile,File cacheDir,Point imagePos,L1cTileLayout l1cTileLayout,MultiLevelModel imageModel,S2SpatialResolution spatialResolution,int level){
  Assert.notNull(cacheDir,""String_Node_Str"");
  Assert.notNull(l1cTileLayout,""String_Node_Str"");
  Assert.notNull(imageModel,""String_Node_Str"");
  Assert.notNull(spatialResolution,""String_Node_Str"");
  if (imageFile != null) {
    PlanarImage opImage=new L1cTileOpImage(imageFile,cacheDir,imagePos,l1cTileLayout,imageModel,level);
    if (spatialResolution != S2SpatialResolution.R10M) {
      return createScaledImage(opImage,spatialResolution,level);
    }
    return opImage;
  }
 else {
    int targetWidth=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].width,level);
    int targetHeight=getSizeAtResolutionLevel(L1C_TILE_LAYOUTS[0].height,level);
    Dimension targetTileDim=getTileDimAtResolutionLevel(L1C_TILE_LAYOUTS[0].tileWidth,L1C_TILE_LAYOUTS[0].tileHeight,level);
    SampleModel sampleModel=ImageUtils.createSingleBandedSampleModel(S2Config.SAMPLE_DATA_BUFFER_TYPE,targetWidth,targetHeight);
    ImageLayout imageLayout=new ImageLayout(0,0,targetWidth,targetHeight,0,0,targetTileDim.width,targetTileDim.height,sampleModel,null);
    return ConstantDescriptor.create((float)imageLayout.getWidth(null),(float)imageLayout.getHeight(null),new Short[]{S2Config.FILL_CODE_NO_FILE},new RenderingHints(JAI.KEY_IMAGE_LAYOUT,imageLayout));
  }
}",0.9975343430785488
170404,"private void readTileData(File outputFile,int tileX,int tileY,int tileWidth,int tileHeight,int jp2TileX,int jp2TileY,int jp2TileWidth,int jp2TileHeight,short[] tileData,Rectangle destRect) throws IOException {
synchronized (this) {
    if (!locks.containsKey(outputFile)) {
      locks.put(outputFile,new Object());
    }
  }
  final Object lock=locks.get(outputFile);
synchronized (lock) {
    Jp2File jp2File=getOpenJ2pFile(outputFile);
    int jp2Width=jp2File.width;
    int jp2Height=jp2File.height;
    if (jp2Width > jp2TileWidth || jp2Height > jp2TileHeight) {
      throw new IllegalStateException(String.format(""String_Node_Str"",jp2Width,jp2TileWidth,jp2Height,jp2TileHeight));
    }
    int jp2X=destRect.x - jp2TileX * jp2TileWidth;
    int jp2Y=destRect.y - jp2TileY * jp2TileHeight;
    if (jp2X < 0 || jp2Y < 0) {
      throw new IllegalStateException(String.format(""String_Node_Str"",jp2X,jp2Y));
    }
    final ImageInputStream stream=jp2File.stream;
    if (jp2X == 0 && jp2Width == tileWidth && jp2Y == 0 && jp2Height == tileHeight && tileWidth * tileHeight == tileData.length) {
      stream.seek(jp2File.dataPos);
      stream.readFully(tileData,0,tileData.length);
    }
 else {
      final Rectangle jp2FileRect=new Rectangle(0,0,jp2Width,jp2Height);
      final Rectangle tileRect=new Rectangle(jp2X,jp2Y,tileWidth,tileHeight);
      final Rectangle intersection=jp2FileRect.intersection(tileRect);
      if (!intersection.isEmpty()) {
        long seekPos=jp2File.dataPos + S2Config.SAMPLE_ELEM_SIZE * (intersection.y * jp2Width + intersection.x);
        int tilePos=0;
        for (int y=0; y < intersection.height; y++) {
          stream.seek(seekPos);
          stream.readFully(tileData,tilePos,intersection.width);
          seekPos+=S2Config.SAMPLE_ELEM_SIZE * jp2Width;
          tilePos+=tileWidth;
          for (int x=intersection.width; x < tileWidth; x++) {
            tileData[y * tileWidth + x]=S2Config.FILL_CODE_OUT_OF_X_BOUNDS;
          }
        }
        for (int y=intersection.height; y < tileWidth; y++) {
          for (int x=0; x < tileWidth; x++) {
            tileData[y * tileWidth + x]=S2Config.FILL_CODE_OUT_OF_Y_BOUNDS;
          }
        }
      }
 else {
        Arrays.fill(tileData,S2Config.FILL_CODE_NO_INTERSECTION);
      }
    }
  }
}","private void readTileData(File outputFile,int tileX,int tileY,int tileWidth,int tileHeight,int jp2TileX,int jp2TileY,int jp2TileWidth,int jp2TileHeight,short[] tileData,Rectangle destRect) throws IOException {
synchronized (this) {
    if (!locks.containsKey(outputFile)) {
      locks.put(outputFile,new Object());
    }
  }
  final Object lock=locks.get(outputFile);
synchronized (lock) {
    Jp2File jp2File=getOpenJ2pFile(outputFile);
    int jp2Width=jp2File.width;
    int jp2Height=jp2File.height;
    if (jp2Width > jp2TileWidth || jp2Height > jp2TileHeight) {
      throw new IllegalStateException(String.format(""String_Node_Str"",jp2Width,jp2TileWidth,jp2Height,jp2TileHeight));
    }
    int jp2X=destRect.x - jp2TileX * jp2TileWidth;
    int jp2Y=destRect.y - jp2TileY * jp2TileHeight;
    if (jp2X < 0 || jp2Y < 0) {
      throw new IllegalStateException(String.format(""String_Node_Str"",jp2X,jp2Y));
    }
    final ImageInputStream stream=jp2File.stream;
    if (jp2X == 0 && jp2Width == tileWidth && jp2Y == 0 && jp2Height == tileHeight && tileWidth * tileHeight == tileData.length) {
      stream.seek(jp2File.dataPos);
      stream.readFully(tileData,0,tileData.length);
    }
 else {
      final Rectangle jp2FileRect=new Rectangle(0,0,jp2Width,jp2Height);
      final Rectangle tileRect=new Rectangle(jp2X,jp2Y,tileWidth,tileHeight);
      final Rectangle intersection=jp2FileRect.intersection(tileRect);
      if (!intersection.isEmpty()) {
        long seekPos=jp2File.dataPos + S2Config.SAMPLE_BYTE_COUNT * (intersection.y * jp2Width + intersection.x);
        int tilePos=0;
        for (int y=0; y < intersection.height; y++) {
          stream.seek(seekPos);
          stream.readFully(tileData,tilePos,intersection.width);
          seekPos+=S2Config.SAMPLE_BYTE_COUNT * jp2Width;
          tilePos+=tileWidth;
          for (int x=intersection.width; x < tileWidth; x++) {
            tileData[y * tileWidth + x]=S2Config.FILL_CODE_OUT_OF_X_BOUNDS;
          }
        }
        for (int y=intersection.height; y < tileWidth; y++) {
          for (int x=0; x < tileWidth; x++) {
            tileData[y * tileWidth + x]=S2Config.FILL_CODE_OUT_OF_Y_BOUNDS;
          }
        }
      }
 else {
        Arrays.fill(tileData,S2Config.FILL_CODE_NO_INTERSECTION);
      }
    }
  }
}",0.9934867564046896
170405,"private void addBands(Product product,Map<Integer,BandInfo> bandInfoMap,MultiLevelImageFactory mlif) throws IOException {
  product.setPreferredTileSize(DEFAULT_TILE_SIZE,DEFAULT_TILE_SIZE);
  product.setNumResolutionsMax(L1C_TILE_LAYOUTS[0].numResolutions);
  product.setAutoGrouping(""String_Node_Str"");
  ArrayList<Integer> bandIndexes=new ArrayList<Integer>(bandInfoMap.keySet());
  Collections.sort(bandIndexes);
  if (bandIndexes.isEmpty()) {
    throw new IOException(""String_Node_Str"");
  }
  for (  Integer bandIndex : bandIndexes) {
    BandInfo bandInfo=bandInfoMap.get(bandIndex);
    Band band=addBand(product,bandInfo);
    band.setSourceImage(mlif.createSourceImage(bandInfo));
  }
  for (  Integer bandIndex : bandIndexes) {
    BandInfo bandInfo=bandInfoMap.get(bandIndex);
    Band reflec=product.addBand(bandInfo.wavebandInfo.bandName.replace(""String_Node_Str"",""String_Node_Str""),bandInfo.wavebandInfo.bandName + ""String_Node_Str"" + bandInfo.wavebandInfo.reflecUnit+ ""String_Node_Str""+ bandInfo.wavebandInfo.quantificationValue+ ""String_Node_Str"");
    reflec.setDescription(""String_Node_Str"" + bandInfo.wavebandInfo.bandName + ""String_Node_Str"");
  }
  for (  Integer bandIndex : bandIndexes) {
    BandInfo bandInfo=bandInfoMap.get(bandIndex);
    Band radiance=product.addBand(bandInfo.wavebandInfo.bandName.replace(""String_Node_Str"",""String_Node_Str""),bandInfo.wavebandInfo.bandName + ""String_Node_Str"" + bandInfo.wavebandInfo.solarIrradiance+ ""String_Node_Str""+ bandInfo.wavebandInfo.reflecUnit+ ""String_Node_Str""+ bandInfo.wavebandInfo.quantificationValue+ ""String_Node_Str"");
    radiance.setDescription(""String_Node_Str"" + bandInfo.wavebandInfo.bandName + ""String_Node_Str"");
  }
  Band ndvi=product.addBand(""String_Node_Str"",""String_Node_Str"");
  ndvi.setDescription(""String_Node_Str"");
}","private void addBands(Product product,Map<Integer,BandInfo> bandInfoMap,MultiLevelImageFactory mlif) throws IOException {
  product.setPreferredTileSize(DEFAULT_JAI_TILE_SIZE,DEFAULT_JAI_TILE_SIZE);
  product.setNumResolutionsMax(L1C_TILE_LAYOUTS[0].numResolutions);
  product.setAutoGrouping(""String_Node_Str"");
  ArrayList<Integer> bandIndexes=new ArrayList<Integer>(bandInfoMap.keySet());
  Collections.sort(bandIndexes);
  if (bandIndexes.isEmpty()) {
    throw new IOException(""String_Node_Str"");
  }
  for (  Integer bandIndex : bandIndexes) {
    BandInfo bandInfo=bandInfoMap.get(bandIndex);
    Band band=addBand(product,bandInfo);
    band.setSourceImage(mlif.createSourceImage(bandInfo));
  }
  for (  Integer bandIndex : bandIndexes) {
    BandInfo bandInfo=bandInfoMap.get(bandIndex);
    Band reflec=product.addBand(bandInfo.wavebandInfo.bandName.replace(""String_Node_Str"",""String_Node_Str""),bandInfo.wavebandInfo.bandName + ""String_Node_Str"" + bandInfo.wavebandInfo.reflecUnit+ ""String_Node_Str""+ bandInfo.wavebandInfo.quantificationValue+ ""String_Node_Str"");
    reflec.setDescription(""String_Node_Str"" + bandInfo.wavebandInfo.bandName + ""String_Node_Str"");
  }
  for (  Integer bandIndex : bandIndexes) {
    BandInfo bandInfo=bandInfoMap.get(bandIndex);
    Band radiance=product.addBand(bandInfo.wavebandInfo.bandName.replace(""String_Node_Str"",""String_Node_Str""),bandInfo.wavebandInfo.bandName + ""String_Node_Str"" + bandInfo.wavebandInfo.solarIrradiance+ ""String_Node_Str""+ bandInfo.wavebandInfo.reflecUnit+ ""String_Node_Str""+ bandInfo.wavebandInfo.quantificationValue+ ""String_Node_Str"");
    radiance.setDescription(""String_Node_Str"" + bandInfo.wavebandInfo.bandName + ""String_Node_Str"");
  }
  Band ndvi=product.addBand(""String_Node_Str"",""String_Node_Str"");
  ndvi.setDescription(""String_Node_Str"");
}",0.9978009895547004
170406,"@Override protected RenderedImage createImage(int level){
  ArrayList<RenderedImage> tileImages=new ArrayList<RenderedImage>();
  for (  String tileId : sceneDescription.getTileIds()) {
    int tileIndex=sceneDescription.getTileIndex(tileId);
    Rectangle tileRectangle=sceneDescription.getTileRectangle(tileIndex);
    PlanarImage opImage=createL1cTileImage(tileId,level);
    opImage=TranslateDescriptor.create(opImage,(float)(tileRectangle.x >> level),(float)(tileRectangle.y >> level),Interpolation.getInstance(Interpolation.INTERP_NEAREST),null);
    tileImages.add(opImage);
  }
  if (tileImages.isEmpty()) {
    return null;
  }
  ImageLayout imageLayout=new ImageLayout();
  imageLayout.setMinX(0);
  imageLayout.setMinY(0);
  imageLayout.setTileWidth(DEFAULT_TILE_SIZE);
  imageLayout.setTileHeight(DEFAULT_TILE_SIZE);
  imageLayout.setTileGridXOffset(0);
  imageLayout.setTileGridYOffset(0);
  RenderedOp mosaicOp=MosaicDescriptor.create(tileImages.toArray(new RenderedImage[tileImages.size()]),MosaicDescriptor.MOSAIC_TYPE_OVERLAY,null,null,new double[][]{{1.0}},new double[]{FILL_CODE_MOSAIC_BG},new RenderingHints(JAI.KEY_IMAGE_LAYOUT,imageLayout));
  System.out.printf(""String_Node_Str"",level,mosaicOp.getMinX(),mosaicOp.getMinY());
  return mosaicOp;
}","@Override protected RenderedImage createImage(int level){
  ArrayList<RenderedImage> tileImages=new ArrayList<RenderedImage>();
  for (  String tileId : sceneDescription.getTileIds()) {
    int tileIndex=sceneDescription.getTileIndex(tileId);
    Rectangle tileRectangle=sceneDescription.getTileRectangle(tileIndex);
    PlanarImage opImage=createL1cTileImage(tileId,level);
    opImage=TranslateDescriptor.create(opImage,(float)(tileRectangle.x >> level),(float)(tileRectangle.y >> level),Interpolation.getInstance(Interpolation.INTERP_NEAREST),null);
    tileImages.add(opImage);
  }
  if (tileImages.isEmpty()) {
    return null;
  }
  ImageLayout imageLayout=new ImageLayout();
  imageLayout.setMinX(0);
  imageLayout.setMinY(0);
  imageLayout.setTileWidth(DEFAULT_JAI_TILE_SIZE);
  imageLayout.setTileHeight(DEFAULT_JAI_TILE_SIZE);
  imageLayout.setTileGridXOffset(0);
  imageLayout.setTileGridYOffset(0);
  RenderedOp mosaicOp=MosaicDescriptor.create(tileImages.toArray(new RenderedImage[tileImages.size()]),MosaicDescriptor.MOSAIC_TYPE_OVERLAY,null,null,new double[][]{{1.0}},new double[]{FILL_CODE_MOSAIC_BG},new RenderingHints(JAI.KEY_IMAGE_LAYOUT,imageLayout));
  System.out.printf(""String_Node_Str"",level,mosaicOp.getMinX(),mosaicOp.getMinY());
  return mosaicOp;
}",0.9968553459119496
170407,"private Band addBand(Product product,BandInfo bandInfo){
  final Band band=product.addBand(bandInfo.wavebandInfo.bandName,SAMPLE_DATA_TYPE);
  band.setSpectralBandIndex(bandInfo.bandIndex);
  band.setSpectralWavelength((float)bandInfo.wavebandInfo.wavelength);
  band.setSpectralBandwidth((float)bandInfo.wavebandInfo.bandwidth);
  band.setSolarFlux((float)bandInfo.wavebandInfo.solarIrradiance);
  return band;
}","private Band addBand(Product product,BandInfo bandInfo){
  final Band band=product.addBand(bandInfo.wavebandInfo.bandName,SAMPLE_PRODUCT_DATA_TYPE);
  band.setSpectralBandIndex(bandInfo.bandIndex);
  band.setSpectralWavelength((float)bandInfo.wavebandInfo.wavelength);
  band.setSpectralBandwidth((float)bandInfo.wavebandInfo.bandwidth);
  band.setSolarFlux((float)bandInfo.wavebandInfo.solarIrradiance);
  return band;
}",0.9904076738609112
170408,"@Override protected RenderedImage createImage(int targetLevel){
  final int masterWidth=masterImage.getImage(targetLevel).getWidth();
  final int masterHeight=masterImage.getImage(targetLevel).getHeight();
  final MultiLevelModel sourceModel=sourceImage.getModel();
  final MultiLevelModel targetModel=getModel();
  final double targetScale=targetModel.getScale(targetLevel);
  final int sourceLevel=sourceModel.getLevel(targetScale);
  final double sourceScale=sourceModel.getScale(sourceLevel);
  final RenderedImage image=sourceImage.getImage(sourceLevel);
  final float scaleRatio=(float)(sourceScale / targetScale);
  if (scaleTranslations == null) {
    scaleTranslations=new float[]{0f,0f};
  }
  RenderedImage renderedImage=image;
  final float xScale=scalings[0] * scaleRatio;
  final float yScale=scalings[1] * scaleRatio;
  if (xScale != 1.0f && yScale != 1.0f) {
    renderedImage=ScaleDescriptor.create(image,xScale,yScale,scaleTranslations[0],scaleTranslations[1],interpolation,renderingHints);
  }
  final float scaledXOffset=(offsets != null) ? (float)(offsets[0] / targetScale) : 0f;
  final float scaledYOffset=(offsets != null) ? (float)(offsets[1] / targetScale) : 0f;
  if (!Double.isNaN(noDataValue)) {
    final int padX=Math.round(Math.abs(scaledXOffset));
    final int padY=Math.round(Math.abs(scaledYOffset));
    final BorderExtender borderExtender=new BorderExtenderConstant(new double[]{noDataValue});
    renderedImage=BorderDescriptor.create(renderedImage,padX,padX,padY,padY,borderExtender,renderingHints);
  }
  if (scaledXOffset != 0.0f || scaledYOffset != 0.0f) {
    renderedImage=TranslateDescriptor.create(renderedImage,scaledXOffset,scaledYOffset,null,renderingHints);
  }
  renderedImage=CropDescriptor.create(renderedImage,0.0f,0.0f,(float)masterWidth,(float)masterHeight,renderingHints);
  return renderedImage;
}","@Override protected RenderedImage createImage(int targetLevel){
  final int masterWidth=masterImage.getImage(targetLevel).getWidth();
  final int masterHeight=masterImage.getImage(targetLevel).getHeight();
  final MultiLevelModel sourceModel=sourceImage.getModel();
  final MultiLevelModel targetModel=getModel();
  final double targetScale=targetModel.getScale(targetLevel);
  final int sourceLevel=sourceModel.getLevel(targetScale);
  final double sourceScale=sourceModel.getScale(sourceLevel);
  final RenderedImage image=sourceImage.getImage(sourceLevel);
  final float scaleRatio=(float)(sourceScale / targetScale);
  if (scaleTranslations == null) {
    scaleTranslations=new float[]{0f,0f};
  }
  RenderedImage renderedImage=image;
  final float xScale=scalings[0] * scaleRatio;
  final float yScale=scalings[1] * scaleRatio;
  if (xScale != 1.0f && yScale != 1.0f) {
    renderedImage=ScaleDescriptor.create(image,xScale,yScale,scaleTranslations[0],scaleTranslations[1],interpolation,renderingHints);
  }
  final float scaledXOffset=(offsets != null) ? (float)(offsets[0] / targetScale) : 0f;
  final float scaledYOffset=(offsets != null) ? (float)(offsets[1] / targetScale) : 0f;
  if (masterWidth != renderedImage.getWidth() || masterHeight != renderedImage.getHeight() || scaledXOffset != 0.0f || scaledYOffset != 0.0f) {
    final int padX=Math.round(scaledXOffset);
    final int padY=Math.round(scaledYOffset);
    int borderCorrectorX=(scaledXOffset - padX < 0) ? 1 : 0;
    int borderCorrectorY=(scaledYOffset - padY < 0) ? 1 : 0;
    final BorderExtender borderExtender=new BorderExtenderConstant(new double[]{noDataValue});
    final int rightPadX=Math.max(0,masterWidth - padX - renderedImage.getWidth() + borderCorrectorX);
    final int lowerPadY=Math.max(0,masterHeight - padY - renderedImage.getHeight() + borderCorrectorY);
    renderedImage=BorderDescriptor.create(renderedImage,padX,rightPadX,padY,lowerPadY,borderExtender,renderingHints);
  }
  if (scaledXOffset != 0.0f || scaledYOffset != 0.0f) {
    renderedImage=TranslateDescriptor.create(renderedImage,scaledXOffset,scaledYOffset,null,renderingHints);
  }
  renderedImage=CropDescriptor.create(renderedImage,0.0f,0.0f,(float)masterWidth,(float)masterHeight,renderingHints);
  return renderedImage;
}",0.8409859835669405
170409,"@Test public void testScaleMultiLevelImageWithDifferentLevelCounts(){
  Band targetBand=new Band(""String_Node_Str"",ProductData.TYPE_INT32,200,200);
  int masterLevelCount=5;
  int sourceLevelCount=3;
  MultiLevelImage masterImage=createNewMultiLevelMasterImage(masterLevelCount,200,200);
  targetBand.setSourceImage(masterImage);
  MultiLevelImage sourceImage=createSourceImage(sourceLevelCount,100,100);
  float[] scalings=new float[]{((float)targetBand.getRasterWidth()) / sourceImage.getWidth(),((float)targetBand.getRasterHeight()) / sourceImage.getHeight()};
  float[] translationsBeforeScaling=new float[]{0f,0f};
  final RenderingHints renderingHints=new RenderingHints(JAI.KEY_BORDER_EXTENDER,BorderExtender.createInstance(BorderExtender.BORDER_COPY));
  MultiLevelImage scaledImage=SourceImageScaler.scaleMultiLevelImage(masterImage,sourceImage,scalings,translationsBeforeScaling,new float[]{0f,0f},renderingHints,Double.NaN,Interpolation.getInstance(Interpolation.INTERP_NEAREST));
  final Rectangle targetBounds=targetBand.getSourceImage().getBounds();
  assertEquals(targetBand.getRasterWidth(),scaledImage.getWidth());
  assertEquals(targetBand.getRasterHeight(),scaledImage.getHeight());
  assertEquals(masterLevelCount,scaledImage.getModel().getLevelCount());
  for (int i=0; i < masterLevelCount; i++) {
    final RenderedImage masterImageAtLevel=((MultiLevelImage)targetBand.getSourceImage()).getImage(i);
    final RenderedImage scaledImageAtLevel=scaledImage.getImage(i);
    assertEquals(masterImageAtLevel.getWidth(),scaledImageAtLevel.getWidth());
    assertEquals(masterImageAtLevel.getHeight(),scaledImageAtLevel.getHeight());
  }
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,targetBounds.height - 1,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,targetBounds.height - 1,0));
}","@Test public void testScaleMultiLevelImageWithDifferentLevelCounts(){
  MultiLevelImage masterImage=createNewMultiLevelMasterImage(levelCount,200,200);
  targetBand.setSourceImage(masterImage);
  int sourceLevelCount=3;
  MultiLevelImage sourceImage=createSourceImage(sourceLevelCount,100,100);
  MultiLevelImage scaledImage=SourceImageScaler.scaleMultiLevelImage(masterImage,sourceImage,scalings,translationsBeforeScaling,new float[]{0f,0f},renderingHints,Double.NaN,Interpolation.getInstance(Interpolation.INTERP_NEAREST));
  final Rectangle targetBounds=targetBand.getSourceImage().getBounds();
  assertEquals(targetBand.getRasterWidth(),scaledImage.getWidth());
  assertEquals(targetBand.getRasterHeight(),scaledImage.getHeight());
  assertEquals(levelCount,scaledImage.getModel().getLevelCount());
  for (int i=0; i < levelCount; i++) {
    final RenderedImage masterImageAtLevel=((MultiLevelImage)targetBand.getSourceImage()).getImage(i);
    final RenderedImage scaledImageAtLevel=scaledImage.getImage(i);
    assertEquals(masterImageAtLevel.getWidth(),scaledImageAtLevel.getWidth());
    assertEquals(masterImageAtLevel.getHeight(),scaledImageAtLevel.getHeight());
  }
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,targetBounds.height - 1,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,targetBounds.height - 1,0));
}",0.784867306606437
170410,"@Test public void testScaleSourceImage(){
  Band targetBand=new Band(""String_Node_Str"",ProductData.TYPE_INT32,200,200);
  int levelCount=5;
  MultiLevelImage sourceImage=createSourceImage(levelCount,100,100);
  float[] scalings=new float[]{((float)targetBand.getRasterWidth()) / sourceImage.getWidth(),((float)targetBand.getRasterHeight()) / sourceImage.getHeight()};
  float[] translationsBeforeScaling=new float[]{0f,0f};
  final RenderingHints renderingHints=new RenderingHints(JAI.KEY_BORDER_EXTENDER,BorderExtender.createInstance(BorderExtender.BORDER_COPY));
  MultiLevelImage scaledImage=SourceImageScaler.scaleMultiLevelImage(targetBand.getSourceImage(),sourceImage,scalings,translationsBeforeScaling,new float[]{0f,0f},renderingHints,Double.NaN,Interpolation.getInstance(Interpolation.INTERP_NEAREST));
  final Rectangle targetBounds=targetBand.getSourceImage().getBounds();
  assertEquals(targetBand.getRasterWidth(),scaledImage.getWidth());
  assertEquals(targetBand.getRasterHeight(),scaledImage.getHeight());
  assertEquals(targetBand.getSourceImage().getModel().getLevelCount(),scaledImage.getModel().getLevelCount());
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,targetBounds.height - 1,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,targetBounds.height - 1,0));
}","@Test public void testScaleSourceImage(){
  MultiLevelImage sourceImage=createSourceImage(levelCount,100,100);
  MultiLevelImage scaledImage=SourceImageScaler.scaleMultiLevelImage(targetBand.getSourceImage(),sourceImage,scalings,translationsBeforeScaling,new float[]{0f,0f},renderingHints,Double.NaN,Interpolation.getInstance(Interpolation.INTERP_NEAREST));
  final Rectangle targetBounds=targetBand.getSourceImage().getBounds();
  assertEquals(targetBand.getRasterWidth(),scaledImage.getWidth());
  assertEquals(targetBand.getRasterHeight(),scaledImage.getHeight());
  assertEquals(targetBand.getSourceImage().getModel().getLevelCount(),scaledImage.getModel().getLevelCount());
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,0,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(0,targetBounds.height - 1,0));
  assertEquals(MAX_USHORT,scaledImage.getData().getSample(targetBounds.width - 1,targetBounds.height - 1,0));
}",0.7842981760507534
170411,"/** 
 * Create a new Variant with a given value.
 * @param value the value this Variant holds.
 */
public Variant(@Nullable Object value){
  if (value != null) {
    Class<?> clazz=value.getClass().isArray() ? ArrayUtil.getType(value) : value.getClass();
    checkArgument(clazz.isArray() || !Variant.class.equals(clazz),""String_Node_Str"");
    checkArgument(!DataValue.class.equals(clazz),""String_Node_Str"");
    checkArgument(!DiagnosticInfo.class.equals(clazz),""String_Node_Str"");
  }
  this.value=value;
}","/** 
 * Create a new Variant with a given value.
 * @param value the value this Variant holds.
 */
public Variant(@Nullable Object value){
  if (value != null) {
    boolean clazzIsArray=value.getClass().isArray();
    Class<?> componentClazz=clazzIsArray ? ArrayUtil.getType(value) : value.getClass();
    checkArgument(clazzIsArray || !Variant.class.equals(componentClazz),""String_Node_Str"");
    checkArgument(!DataValue.class.equals(componentClazz),""String_Node_Str"");
    checkArgument(!DiagnosticInfo.class.equals(componentClazz),""String_Node_Str"");
  }
  this.value=value;
}",0.8899082568807339
170412,"@DataProvider(name=""String_Node_Str"") public Object[][] getVariants(){
  return new Object[][]{{new Variant(null)},{new Variant(""String_Node_Str"")},{new Variant(42)},{new Variant(new Integer[]{0,1,2,3})},{new Variant(new Integer[][]{{0,1},{2,3}})},{new Variant(new Long[]{0L,1L,2L,3L})},{new Variant(new Long[][]{{0L,1L},{2L,3L}})},{new Variant(new UInteger[]{Unsigned.uint(0),Unsigned.uint(1),Unsigned.uint(2),Unsigned.uint(3)})},{new Variant(new UInteger[][]{{Unsigned.uint(0),Unsigned.uint(1)},{Unsigned.uint(2),Unsigned.uint(3)}})}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] getVariants(){
  return new Object[][]{{new Variant(null)},{new Variant(""String_Node_Str"")},{new Variant(42)},{new Variant(new Integer[]{0,1,2,3})},{new Variant(new Integer[][]{{0,1},{2,3}})},{new Variant(new Long[]{0L,1L,2L,3L})},{new Variant(new Long[][]{{0L,1L},{2L,3L}})},{new Variant(new UInteger[]{Unsigned.uint(0),Unsigned.uint(1),Unsigned.uint(2),Unsigned.uint(3)})},{new Variant(new UInteger[][]{{Unsigned.uint(0),Unsigned.uint(1)},{Unsigned.uint(2),Unsigned.uint(3)}})},{new Variant(new Variant[]{new Variant(0),new Variant(1),new Variant(2)})}};
}",0.9349522983521248
170413,"private void onError(ChannelHandlerContext ctx,ByteBuf buffer){
  try {
    ErrorMessage error=TcpMessageDecoder.decodeError(buffer);
    if (error.getError() == StatusCodes.Bad_TcpSecureChannelUnknown || error.getError() == StatusCodes.Bad_SecureChannelIdInvalid) {
      secureChannel.setChannelId(0);
    }
    logger.error(""String_Node_Str"" + error);
  }
 catch (  UaException e) {
    logger.error(""String_Node_Str"",e.getMessage(),e);
  }
 finally {
    ctx.close();
  }
}","private void onError(ChannelHandlerContext ctx,ByteBuf buffer){
  try {
    ErrorMessage error=TcpMessageDecoder.decodeError(buffer);
    if (error.getError().getValue() == StatusCodes.Bad_TcpSecureChannelUnknown || error.getError().getValue() == StatusCodes.Bad_SecureChannelIdInvalid) {
      secureChannel.setChannelId(0);
    }
    logger.error(""String_Node_Str"" + error);
  }
 catch (  UaException e) {
    logger.error(""String_Node_Str"",e.getMessage(),e);
  }
 finally {
    ctx.close();
  }
}",0.9774590163934426
170414,"/** 
 * Query the GetEndpoints service at the given endpoint URL.
 * @param endpointUrl the endpoint URL to get endpoints from.
 * @return the {@link EndpointDescription}s returned by the GetEndpoints service.
 */
public static CompletableFuture<EndpointDescription[]> getEndpoints(String endpointUrl){
  CompletableFuture<EndpointDescription[]> endpointsFuture=new CompletableFuture<>();
  UaTcpClient client=new UaTcpClientBuilder().build(endpointUrl);
  GetEndpointsRequest request=new GetEndpointsRequest(new RequestHeader(null,DateTime.now(),uint(1),uint(0),null,uint(5000),null),endpointUrl,null,new String[]{Stack.UA_TCP_BINARY_TRANSPORT_URI});
  client.sendRequest(request).whenComplete((r,ex) -> {
    GetEndpointsResponse response=(GetEndpointsResponse)r;
    if (response != null)     endpointsFuture.complete(response.getEndpoints());
 else     endpointsFuture.completeExceptionally(ex);
    client.disconnect();
  }
);
  return endpointsFuture;
}","/** 
 * Query the GetEndpoints service at the given endpoint URL.
 * @param endpointUrl the endpoint URL to get endpoints from.
 * @return the {@link EndpointDescription}s returned by the GetEndpoints service.
 */
public static CompletableFuture<EndpointDescription[]> getEndpoints(String endpointUrl){
  UaTcpClient client=new UaTcpClientBuilder().build(endpointUrl);
  GetEndpointsRequest request=new GetEndpointsRequest(new RequestHeader(null,DateTime.now(),uint(1),uint(0),null,uint(5000),null),endpointUrl,null,new String[]{Stack.UA_TCP_BINARY_TRANSPORT_URI});
  return client.<GetEndpointsResponse>sendRequest(request).thenApply(GetEndpointsResponse::getEndpoints);
}",0.7536764705882353
170415,"@Override public void readSecurityHeader(SecureChannel channel,ByteBuf chunkBuffer) throws UaException {
  long tokenId=SymmetricSecurityHeader.decode(chunkBuffer).getTokenId();
  ChannelSecurity channelSecurity=channel.getChannelSecurity();
  if (channelSecurity == null) {
    if (tokenId != 0L) {
      throw new UaException(StatusCodes.Bad_SecureChannelTokenUnknown,""String_Node_Str"" + tokenId);
    }
  }
 else {
    long currentTokenId=channelSecurity.getCurrentToken().getTokenId().longValue();
    if (tokenId == currentTokenId) {
      securitySecrets=channelSecurity.getCurrentKeys();
    }
 else {
      long previousTokenId=channelSecurity.getPreviousToken().map(t -> t.getTokenId().longValue()).orElse(-1L);
      if (tokenId == previousTokenId && channelSecurity.getPreviousKeys().isPresent()) {
        securitySecrets=channelSecurity.getPreviousKeys().get();
      }
 else {
        throw new UaException(StatusCodes.Bad_SecureChannelTokenUnknown,""String_Node_Str"" + tokenId);
      }
    }
  }
}","@Override public void readSecurityHeader(SecureChannel channel,ByteBuf chunkBuffer) throws UaException {
  long tokenId=SymmetricSecurityHeader.decode(chunkBuffer).getTokenId();
  ChannelSecurity channelSecurity=channel.getChannelSecurity();
  if (channelSecurity == null) {
    if (tokenId != 0L) {
      throw new UaException(StatusCodes.Bad_SecureChannelTokenUnknown,""String_Node_Str"" + tokenId);
    }
  }
 else {
    long currentTokenId=channelSecurity.getCurrentToken().getTokenId().longValue();
    if (tokenId == currentTokenId) {
      securitySecrets=channelSecurity.getCurrentKeys();
    }
 else {
      long previousTokenId=channelSecurity.getPreviousToken().map(t -> t.getTokenId().longValue()).orElse(-1L);
      if (tokenId != previousTokenId) {
        throw new UaException(StatusCodes.Bad_SecureChannelTokenUnknown,""String_Node_Str"" + tokenId);
      }
      if (channel.isSymmetricEncryptionEnabled() && channelSecurity.getPreviousKeys().isPresent()) {
        securitySecrets=channelSecurity.getPreviousKeys().get();
      }
    }
  }
}",0.8636363636363636
170416,"private void onOpenSecureChannel(ChannelHandlerContext ctx,ByteBuf buffer) throws UaException {
  buffer.skipBytes(3);
  char chunkType=(char)buffer.readByte();
  if (chunkType == 'A') {
    chunkBuffers.forEach(ByteBuf::release);
    chunkBuffers.clear();
  }
 else {
    buffer.skipBytes(4);
    long secureChannelId=buffer.readUnsignedInt();
    secureChannel.setChannelId(secureChannelId);
    AsymmetricSecurityHeader securityHeader=AsymmetricSecurityHeader.decode(buffer);
    if (!headerRef.compareAndSet(null,securityHeader)) {
      if (!securityHeader.equals(headerRef.get())) {
        throw new UaRuntimeException(StatusCodes.Bad_SecurityChecksFailed,""String_Node_Str"");
      }
    }
    chunkBuffers.add(buffer.readerIndex(0).retain());
    if (chunkBuffers.size() > maxChunkCount) {
      throw new UaException(StatusCodes.Bad_TcpMessageTooLarge,String.format(""String_Node_Str"",maxChunkCount));
    }
    if (chunkType == 'F') {
      final List<ByteBuf> buffersToDecode=chunkBuffers;
      chunkBuffers=Lists.newArrayListWithCapacity(maxChunkCount);
      serializationQueue.decode((binaryDecoder,chunkDecoder) -> {
        ByteBuf messageBuffer=chunkDecoder.decodeAsymmetric(secureChannel,MessageType.OpenSecureChannel,buffersToDecode);
        binaryDecoder.setBuffer(messageBuffer);
        OpenSecureChannelResponse response=binaryDecoder.decodeMessage(null);
        logger.debug(""String_Node_Str"");
        secureChannel.setPreviousTokenId(secureChannel.getCurrentTokenId());
        secureChannel.setCurrentTokenId(response.getSecurityToken().getTokenId());
        secureChannel.setChannelId(response.getSecurityToken().getChannelId());
        logger.debug(""String_Node_Str"",secureChannel.getChannelId());
        if (secureChannel.isSymmetricSigningEnabled()) {
          secureChannel.setRemoteNonce(response.getServerNonce());
          ChannelSecrets channelSecrets=ChannelSecrets.forChannel(secureChannel,secureChannel.getLocalNonce(),secureChannel.getRemoteNonce());
          secureChannel.setChannelSecrets(channelSecrets);
        }
        if (response.getServerProtocolVersion() < PROTOCOL_VERSION) {
          throw new UaRuntimeException(StatusCodes.Bad_ProtocolVersionUnsupported,""String_Node_Str"" + response.getServerProtocolVersion());
        }
        DateTime createdAt=response.getSecurityToken().getCreatedAt();
        long revisedLifetime=response.getSecurityToken().getRevisedLifetime();
        long renewAt=(long)(revisedLifetime * 0.75);
        renewFuture=ctx.executor().schedule(() -> renewSecureChannel(ctx),renewAt,TimeUnit.MILLISECONDS);
        messageBuffer.release();
        buffersToDecode.clear();
        ctx.executor().execute(() -> {
          ctx.pipeline().remove(UaTcpClientAcknowledgeHandler.class);
          ctx.pipeline().addFirst(new UaTcpClientSymmetricHandler(client,serializationQueue,handshakeFuture));
        }
);
      }
);
    }
  }
}","private void onOpenSecureChannel(ChannelHandlerContext ctx,ByteBuf buffer) throws UaException {
  buffer.skipBytes(3);
  char chunkType=(char)buffer.readByte();
  if (chunkType == 'A') {
    chunkBuffers.forEach(ByteBuf::release);
    chunkBuffers.clear();
  }
 else {
    buffer.skipBytes(4);
    long secureChannelId=buffer.readUnsignedInt();
    secureChannel.setChannelId(secureChannelId);
    AsymmetricSecurityHeader securityHeader=AsymmetricSecurityHeader.decode(buffer);
    if (!headerRef.compareAndSet(null,securityHeader)) {
      if (!securityHeader.equals(headerRef.get())) {
        throw new UaRuntimeException(StatusCodes.Bad_SecurityChecksFailed,""String_Node_Str"");
      }
    }
    chunkBuffers.add(buffer.readerIndex(0).retain());
    if (chunkBuffers.size() > maxChunkCount) {
      throw new UaException(StatusCodes.Bad_TcpMessageTooLarge,String.format(""String_Node_Str"",maxChunkCount));
    }
    if (chunkType == 'F') {
      final List<ByteBuf> buffersToDecode=chunkBuffers;
      chunkBuffers=Lists.newArrayListWithCapacity(maxChunkCount);
      serializationQueue.decode((binaryDecoder,chunkDecoder) -> {
        ByteBuf messageBuffer=chunkDecoder.decodeAsymmetric(secureChannel,MessageType.OpenSecureChannel,buffersToDecode);
        binaryDecoder.setBuffer(messageBuffer);
        OpenSecureChannelResponse response=binaryDecoder.decodeMessage(null);
        logger.debug(""String_Node_Str"");
        secureChannel.setPreviousTokenId(secureChannel.getCurrentTokenId());
        secureChannel.setCurrentTokenId(response.getSecurityToken().getTokenId());
        secureChannel.setChannelId(response.getSecurityToken().getChannelId());
        logger.debug(""String_Node_Str"",secureChannel.getChannelId());
        if (secureChannel.isSymmetricSigningEnabled()) {
          secureChannel.setRemoteNonce(response.getServerNonce());
          ChannelSecrets channelSecrets=ChannelSecrets.forChannel(secureChannel,secureChannel.getLocalNonce(),secureChannel.getRemoteNonce());
          secureChannel.setChannelSecrets(channelSecrets);
        }
        if (response.getServerProtocolVersion() < PROTOCOL_VERSION) {
          throw new UaRuntimeException(StatusCodes.Bad_ProtocolVersionUnsupported,""String_Node_Str"" + response.getServerProtocolVersion());
        }
        DateTime createdAt=response.getSecurityToken().getCreatedAt();
        long revisedLifetime=response.getSecurityToken().getRevisedLifetime();
        long renewAt=(long)(revisedLifetime * 0.75);
        renewFuture=ctx.executor().schedule(() -> renewSecureChannel(ctx),renewAt,TimeUnit.MILLISECONDS);
        messageBuffer.release();
        buffersToDecode.clear();
        ctx.executor().execute(() -> {
          if (ctx.pipeline().get(UaTcpClientAcknowledgeHandler.class) != null) {
            ctx.pipeline().remove(UaTcpClientAcknowledgeHandler.class);
          }
          ctx.pipeline().addFirst(new UaTcpClientSymmetricHandler(client,serializationQueue,handshakeFuture));
        }
);
      }
);
    }
  }
}",0.9839770618991398
170417,"private void receiveServiceFault(ServiceFault serviceFault){
  ResponseHeader header=serviceFault.getResponseHeader();
  Long requestHandle=header.getRequestHandle();
  CompletableFuture<UaResponseMessage> future=pending.remove(requestHandle);
  if (future != null) {
    StatusCode serviceResult=serviceFault.getResponseHeader().getServiceResult();
    future.completeExceptionally(new UaException(serviceResult.getValue(),""String_Node_Str""));
  }
  Timeout timeout=timeouts.remove(requestHandle);
  if (timeout != null)   timeout.cancel();
}","public void receiveServiceFault(ServiceFault serviceFault){
  ResponseHeader header=serviceFault.getResponseHeader();
  Long requestHandle=header.getRequestHandle();
  CompletableFuture<UaResponseMessage> future=pending.remove(requestHandle);
  if (future != null) {
    StatusCode serviceResult=serviceFault.getResponseHeader().getServiceResult();
    future.completeExceptionally(new UaException(serviceResult.getValue(),""String_Node_Str""));
  }
  Timeout timeout=timeouts.remove(requestHandle);
  if (timeout != null)   timeout.cancel();
}",0.9898617511520738
170418,"private void receiveServiceResponse(UaResponseMessage response){
  ResponseHeader header=response.getResponseHeader();
  Long requestHandle=header.getRequestHandle();
  CompletableFuture<UaResponseMessage> future=pending.remove(requestHandle);
  if (future != null) {
    future.complete(response);
  }
  Timeout timeout=timeouts.remove(requestHandle);
  if (timeout != null)   timeout.cancel();
}","public void receiveServiceResponse(UaResponseMessage response){
  ResponseHeader header=response.getResponseHeader();
  Long requestHandle=header.getRequestHandle();
  CompletableFuture<UaResponseMessage> future=pending.remove(requestHandle);
  if (future != null) {
    future.complete(response);
  }
  Timeout timeout=timeouts.remove(requestHandle);
  if (timeout != null)   timeout.cancel();
}",0.9861286254728878
170419,"private void onSecureMessage(ChannelHandlerContext ctx,ByteBuf buffer,List<Object> out) throws UaException {
  buffer.skipBytes(3);
  char chunkType=(char)buffer.readByte();
  if (chunkType == 'A') {
    chunkBuffers.forEach(ByteBuf::release);
    chunkBuffers.clear();
  }
 else {
    buffer.skipBytes(4);
    long secureChannelId=buffer.readUnsignedInt();
    if (secureChannelId != secureChannel.getChannelId()) {
      throw new UaException(StatusCodes.Bad_SecureChannelIdInvalid,""String_Node_Str"" + secureChannelId);
    }
    SymmetricSecurityHeader securityHeader=SymmetricSecurityHeader.decode(buffer);
    ChannelSecurity channelSecurity=secureChannel.getChannelSecurity();
    long currentTokenId=channelSecurity.getCurrentToken().getTokenId();
    if (securityHeader.getTokenId() != currentTokenId) {
      long previousTokenId=channelSecurity.getPreviousToken().map(ChannelSecurityToken::getTokenId).orElse(-1L);
      if (securityHeader.getTokenId() != previousTokenId) {
        throw new UaException(StatusCodes.Bad_SecureChannelTokenUnknown,""String_Node_Str"" + securityHeader.getTokenId());
      }
    }
    chunkBuffers.add(buffer.readerIndex(0).retain());
    if (chunkBuffers.size() > maxChunkCount) {
      throw new UaException(StatusCodes.Bad_TcpMessageTooLarge,String.format(""String_Node_Str"",maxChunkCount));
    }
    if (chunkType == 'F') {
      final List<ByteBuf> buffersToDecode=chunkBuffers;
      chunkBuffers=Lists.newArrayListWithCapacity(maxChunkCount);
      serializationQueue.decode((binaryDecoder,chunkDecoder) -> {
        try {
          ByteBuf messageBuffer=chunkDecoder.decodeSymmetric(secureChannel,MessageType.SecureMessage,buffersToDecode);
          binaryDecoder.setBuffer(messageBuffer);
          UaResponseMessage response=binaryDecoder.decodeMessage(null);
          if (response instanceof ServiceFault) {
            client.getExecutorService().execute(() -> client.receiveServiceFault((ServiceFault)response));
          }
 else {
            client.getExecutorService().execute(() -> client.receiveResponse(response));
          }
          messageBuffer.release();
          buffersToDecode.clear();
        }
 catch (        UaException e) {
          logger.error(""String_Node_Str"",e.getMessage(),e);
          ctx.close();
        }
      }
);
    }
  }
}","private void onSecureMessage(ChannelHandlerContext ctx,ByteBuf buffer,List<Object> out) throws UaException {
  buffer.skipBytes(3);
  char chunkType=(char)buffer.readByte();
  if (chunkType == 'A') {
    chunkBuffers.forEach(ByteBuf::release);
    chunkBuffers.clear();
  }
 else {
    buffer.skipBytes(4);
    long secureChannelId=buffer.readUnsignedInt();
    if (secureChannelId != secureChannel.getChannelId()) {
      throw new UaException(StatusCodes.Bad_SecureChannelIdInvalid,""String_Node_Str"" + secureChannelId);
    }
    SymmetricSecurityHeader securityHeader=SymmetricSecurityHeader.decode(buffer);
    ChannelSecurity channelSecurity=secureChannel.getChannelSecurity();
    long currentTokenId=channelSecurity.getCurrentToken().getTokenId();
    if (securityHeader.getTokenId() != currentTokenId) {
      long previousTokenId=channelSecurity.getPreviousToken().map(ChannelSecurityToken::getTokenId).orElse(-1L);
      if (securityHeader.getTokenId() != previousTokenId) {
        throw new UaException(StatusCodes.Bad_SecureChannelTokenUnknown,""String_Node_Str"" + securityHeader.getTokenId());
      }
    }
    chunkBuffers.add(buffer.readerIndex(0).retain());
    if (chunkBuffers.size() > maxChunkCount) {
      throw new UaException(StatusCodes.Bad_TcpMessageTooLarge,String.format(""String_Node_Str"",maxChunkCount));
    }
    if (chunkType == 'F') {
      final List<ByteBuf> buffersToDecode=chunkBuffers;
      chunkBuffers=Lists.newArrayListWithCapacity(maxChunkCount);
      serializationQueue.decode((binaryDecoder,chunkDecoder) -> {
        try {
          ByteBuf messageBuffer=chunkDecoder.decodeSymmetric(secureChannel,MessageType.SecureMessage,buffersToDecode);
          binaryDecoder.setBuffer(messageBuffer);
          UaResponseMessage response=binaryDecoder.decodeMessage(null);
          if (response instanceof ServiceFault) {
            client.getExecutorService().execute(() -> client.receiveServiceFault((ServiceFault)response));
          }
 else {
            client.getExecutorService().execute(() -> client.receiveServiceResponse(response));
          }
          messageBuffer.release();
          buffersToDecode.clear();
        }
 catch (        UaException e) {
          logger.error(""String_Node_Str"",e.getMessage(),e);
          ctx.close();
        }
      }
);
    }
  }
}",0.9984917043740572
170420,"private static Map<String,List<Object>> extractMultiValuedIdentifiers(ResourceMapping mapping,AmazonWebServiceRequest request,Object result){
  Map<String,List<Object>> ids=new HashMap<>();
  int listSize=-1;
  for (  PathSourceMapping m : mapping.getRequestParamMappings()) {
    List<Object> values=ReflectionUtils.getAllByPath(request,m.getSource());
    if (listSize == -1) {
      listSize=values.size();
    }
 else     if (values.size() != listSize) {
      throw new IllegalStateException(""String_Node_Str"" + listSize + ""String_Node_Str""+ values.size());
    }
    ids.put(m.getTarget(),values);
  }
  for (  PathSourceMapping m : mapping.getResponseIdentifierMappings()) {
    List<Object> values=ReflectionUtils.getAllByPath(result,m.getSource());
    if (listSize == -1) {
      listSize=values.size();
    }
 else     if (values.size() != listSize) {
      throw new IllegalStateException(""String_Node_Str"" + listSize + ""String_Node_Str""+ values.size());
    }
    ids.put(m.getTarget(),values);
  }
  return ids;
}","private static Map<String,List<Object>> extractMultiValuedIdentifiers(ResourceMapping mapping,AmazonWebServiceRequest request,Object result){
  Map<String,List<Object>> ids=new HashMap<>();
  int listSize=-1;
  for (  PathSourceMapping m : mapping.getResponseIdentifierMappings()) {
    List<Object> values=ReflectionUtils.getAllByPath(result,m.getSource());
    if (listSize == -1) {
      listSize=values.size();
    }
 else     if (values.size() != listSize) {
      throw new IllegalStateException(""String_Node_Str"" + listSize + ""String_Node_Str""+ values.size());
    }
    ids.put(m.getTarget(),values);
  }
  for (  PathSourceMapping m : mapping.getRequestParamMappings()) {
    List<Object> values;
    if (m.isMultiValued()) {
      values=ReflectionUtils.getAllByPath(request,m.getSource());
      if (listSize == -1) {
        listSize=values.size();
      }
 else       if (values.size() != listSize) {
        throw new IllegalStateException(""String_Node_Str"" + listSize + ""String_Node_Str""+ values.size());
      }
    }
 else {
      Object singleValue=ReflectionUtils.getByPath(request,m.getSource());
      values=new ArrayList<Object>(listSize);
      for (int i=0; i < listSize; i++) {
        values.add(singleValue);
      }
    }
    ids.put(m.getTarget(),values);
  }
  return ids;
}",0.8310463121783876
170421,"public final void setColorKey(final String ckey){
  if (null == ckey) {
    m_k_color=ckey;
    m_ignores=new ClearFilter();
  }
 else   if (false == ckey.equals(m_k_color)) {
    m_k_color=ckey;
    m_ignores=new RGBIgnoreAlphaImageDataFilter(m_k_color);
  }
 else {
    return;
  }
  if (isLoaded()) {
    doFiltering(m_filterImage,m_selectImage,m_ignores);
    if (m_image.isVisible()) {
      final Layer layer=m_image.getLayer();
      if (null != layer) {
        layer.batch();
      }
    }
  }
}","public final void setColorKey(final String ckey){
  if (null == ckey) {
    m_k_color=null;
    m_ignores=new ClearFilter();
  }
 else   if (false == ckey.equals(m_k_color)) {
    m_k_color=ckey;
    m_ignores=new RGBIgnoreAlphaImageDataFilter(m_k_color);
  }
 else {
    return;
  }
  if (isLoaded()) {
    doFiltering(m_filterImage,m_selectImage,m_ignores);
    if (m_image.isVisible()) {
      final Layer layer=m_image.getLayer();
      if (null != layer) {
        layer.batch();
      }
    }
  }
}",0.992063492063492
170422,"@Override protected void drawWithoutTransforms(final Context2D context,final double alpha,final BoundingBox bounds){
  if (false == isVisible()) {
    return;
  }
  final Viewport vp=getViewport();
  final int vw=vp.getWidth();
  final int vh=vp.getHeight();
  final Point2D a=new Point2D(0,0);
  final Point2D b=new Point2D(vw,vh);
  double scaleX=1, scaleY=1;
  Transform t=isTransformable() ? vp.getTransform() : null;
  if (t != null) {
    scaleX=t.getScaleX();
    scaleY=t.getScaleY();
    t=t.getInverse();
    t.transform(a,a);
    t.transform(b,b);
  }
  final double x1=a.getX();
  final double y1=a.getY();
  final double x2=b.getX();
  final double y2=b.getY();
  for (int direction=X; direction <= Y; direction++) {
    final boolean vertical=(direction == X);
    final double scale=vertical ? scaleX : scaleY;
    final double min=vertical ? x1 : y1;
    final double max=vertical ? x2 : y2;
    for (int primSec=0; primSec <= 1; primSec++) {
      final int index=(primSec * 2) + direction;
      final boolean isSecondary=(primSec == 1);
      if (m_lines[index] == null) {
        continue;
      }
      int n=0;
      if (isSecondary) {
        n=(int)Math.round(m_sizes[direction] / m_sizes[index]);
      }
      final Line line=m_lines[index];
      final double size=m_sizes[index];
      final double previousLineWidth=line.getStrokeWidth();
      line.setStrokeWidth(previousLineWidth / scale);
      final DashArray previousDashes=line.getDashArray();
      if (previousDashes != null) {
        final double[] d=previousDashes.getNormalizedArray();
        final DashArray dashes=new DashArray();
        for (        final double element : d) {
          dashes.push(element / scale);
        }
        line.setDashArray(dashes);
      }
      long n1=Math.round(min / size);
      if ((n1 * size) < min) {
        n1++;
      }
      long n2=Math.round(max / size);
      if ((n2 * size) > max) {
        n2--;
      }
      final Point2DArray points=line.getPoints();
      final Point2D p1=points.get(0);
      final Point2D p2=points.get(1);
      if (vertical) {
        p1.setY(y1);
        p2.setY(y2);
      }
 else {
        p1.setX(x1);
        p2.setX(x2);
      }
      for (long ni=n1; ni <= n2; ni++) {
        if (isSecondary && ((ni % n) == 0)) {
          continue;
        }
        if (vertical) {
          final double x=ni * size;
          p1.setX(x);
          p2.setX(x);
        }
 else {
          final double y=ni * size;
          p1.setY(y);
          p2.setY(y);
        }
        line.drawWithTransforms(context,alpha,bounds);
      }
      line.setStrokeWidth(previousLineWidth);
      if (previousDashes != null) {
        line.setDashArray(previousDashes);
      }
    }
  }
  super.drawWithoutTransforms(context,alpha,bounds);
}","@Override protected void drawWithoutTransforms(final Context2D context,final double alpha,final BoundingBox bounds){
  if (false == isVisible()) {
    return;
  }
  final Viewport vp=getViewport();
  final int vw=vp.getWidth();
  final int vh=vp.getHeight();
  final Point2D a=new Point2D(0,0);
  final Point2D b=new Point2D(vw,vh);
  double scaleX=1, scaleY=1;
  Transform t=isTransformable() ? vp.getTransform() : null;
  if (t != null) {
    scaleX=t.getScaleX();
    scaleY=t.getScaleY();
    t=t.getInverse();
    t.transform(a,a);
    t.transform(b,b);
  }
  final double x1=a.getX();
  final double y1=a.getY();
  final double x2=b.getX();
  final double y2=b.getY();
  for (int direction=X; direction <= Y; direction++) {
    final boolean vertical=(direction == X);
    final double scale=vertical ? scaleX : scaleY;
    final double min=vertical ? x1 : y1;
    final double max=vertical ? x2 : y2;
    for (int primSec=0; primSec <= 1; primSec++) {
      final int index=(primSec * 2) + direction;
      final boolean isSecondary=(primSec == 1);
      if (m_lines[index] == null) {
        continue;
      }
      int n=0;
      if (isSecondary) {
        n=(int)Math.round(m_sizes[direction] / m_sizes[index]);
      }
      final Line line=m_lines[index];
      final double size=m_sizes[index];
      final double previousLineWidth=line.getStrokeWidth();
      line.setStrokeWidth(previousLineWidth / scale);
      final DashArray previousDashes=line.getDashArray();
      final double[] d=previousDashes.getNormalizedArray();
      final DashArray dashes=new DashArray();
      for (      final double element : d) {
        dashes.push(element / scale);
      }
      line.setDashArray(dashes);
      long n1=Math.round(min / size);
      if ((n1 * size) < min) {
        n1++;
      }
      long n2=Math.round(max / size);
      if ((n2 * size) > max) {
        n2--;
      }
      final Point2DArray points=line.getPoints();
      final Point2D p1=points.get(0);
      final Point2D p2=points.get(1);
      if (vertical) {
        p1.setY(y1);
        p2.setY(y2);
      }
 else {
        p1.setX(x1);
        p2.setX(x2);
      }
      for (long ni=n1; ni <= n2; ni++) {
        if (isSecondary && ((ni % n) == 0)) {
          continue;
        }
        if (vertical) {
          final double x=ni * size;
          p1.setX(x);
          p2.setX(x);
        }
 else {
          final double y=ni * size;
          p1.setY(y);
          p2.setY(y);
        }
        line.drawWithTransforms(context,alpha,bounds);
      }
      line.setStrokeWidth(previousLineWidth);
      line.setDashArray(previousDashes);
    }
  }
  super.drawWithoutTransforms(context,alpha,bounds);
}",0.972293109733868
170423,"/** 
 * Draws the frames of the video.  If looping has been set, frames are drawn continuously in a loop.
 * @param context
 */
@Override protected boolean prepare(final Context2D context,final Attributes attr,final double alpha){
  if (m_inits) {
    init();
    if ((null == m_error) && (isAutoPlay())) {
      play();
    }
  }
  int wide=getWidth();
  int high=getHeight();
  if (null != m_error) {
    if (false == context.isSelection()) {
      if (wide < 1) {
        wide=MOVIE_ERROR_WIDE;
      }
      if (high < 1) {
        high=MOVIE_ERROR_HIGH;
      }
      context.save();
      context.setFillColor(ColorName.BLACK);
      context.rect(0,0,wide,high);
      context.fill();
      context.setTextAlign(TextAlign.CENTER);
      context.setTextBaseline(TextBaseLine.MIDDLE);
      context.setTextFont(getTextBestFit(context,m_error,wide));
      context.setFillColor(ColorName.WHITE);
      context.rect(0,0,wide,high);
      context.clip();
      context.fillText(m_error,wide / 2,high / 2);
      context.restore();
    }
  }
 else {
    if ((wide < 1) || (high < 1)) {
      return false;
    }
    if (context.isSelection()) {
      final String color=getColorKey();
      if (null != color) {
        context.save();
        context.setFillColor(color);
        context.fillRect(0,0,wide,high);
        context.restore();
      }
      return false;
    }
    if (isEnded()) {
      if (null != m_postr) {
        context.save();
        context.setGlobalAlpha(alpha);
        context.drawImage(m_postr,0,0,wide,high);
        context.restore();
      }
 else {
        final String fill=getFillColor();
        if (null != fill) {
          context.save();
          context.setGlobalAlpha(alpha);
          context.setFillColor(fill);
          context.fillRect(0,0,wide,high);
          context.restore();
        }
      }
      return false;
    }
    context.save();
    context.setGlobalAlpha(alpha);
    if ((false == m_xorig) && (m_filters.isActive())) {
      try {
        m_canvas.getContext().drawImage(m_video.getElement(),0,0,wide,high);
        m_canvas.getContext().putImageData(m_filters.filter(m_canvas.getContext().getImageData(0,0,wide,high),false),0,0);
        context.drawImage(m_canvas.getElement(),0,0,wide,high);
      }
 catch (      final Exception e) {
        context.drawImage(m_video.getElement(),0,0,wide,high);
        m_xorig=true;
        LienzoCore.get().error(""String_Node_Str"" + m_video.getSrc() + ""String_Node_Str""+ e.getMessage());
      }
    }
 else {
      context.drawImage(m_video.getElement(),0,0,wide,high);
    }
    context.restore();
  }
  return false;
}","/** 
 * Draws the frames of the video.  If looping has been set, frames are drawn continuously in a loop.
 * @param context
 */
@Override protected boolean prepare(final Context2D context,final Attributes attr,final double alpha){
  if (m_inits) {
    init();
    if ((null == m_error) && (isAutoPlay())) {
      play();
    }
  }
  int wide=getWidth();
  int high=getHeight();
  if (null != m_error) {
    if (false == context.isSelection()) {
      if (wide < 1) {
        wide=MOVIE_ERROR_WIDE;
      }
      if (high < 1) {
        high=MOVIE_ERROR_HIGH;
      }
      context.save();
      context.setFillColor(ColorName.BLACK);
      context.rect(0,0,wide,high);
      context.fill();
      context.setTextAlign(TextAlign.CENTER);
      context.setTextBaseline(TextBaseLine.MIDDLE);
      context.setTextFont(getTextBestFit(context,m_error,wide));
      context.setFillColor(ColorName.WHITE);
      context.rect(0,0,wide,high);
      context.clip();
      context.fillText(m_error,wide / 2.0d,high / 2.0d);
      context.restore();
    }
  }
 else {
    if ((wide < 1) || (high < 1)) {
      return false;
    }
    if (context.isSelection()) {
      final String color=getColorKey();
      if (null != color) {
        context.save();
        context.setFillColor(color);
        context.fillRect(0,0,wide,high);
        context.restore();
      }
      return false;
    }
    if (isEnded()) {
      if (null != m_postr) {
        context.save();
        context.setGlobalAlpha(alpha);
        context.drawImage(m_postr,0,0,wide,high);
        context.restore();
      }
 else {
        final String fill=getFillColor();
        if (null != fill) {
          context.save();
          context.setGlobalAlpha(alpha);
          context.setFillColor(fill);
          context.fillRect(0,0,wide,high);
          context.restore();
        }
      }
      return false;
    }
    context.save();
    context.setGlobalAlpha(alpha);
    if ((false == m_xorig) && (m_filters.isActive())) {
      try {
        m_canvas.getContext().drawImage(m_video.getElement(),0,0,wide,high);
        m_canvas.getContext().putImageData(m_filters.filter(m_canvas.getContext().getImageData(0,0,wide,high),false),0,0);
        context.drawImage(m_canvas.getElement(),0,0,wide,high);
      }
 catch (      final Exception e) {
        context.drawImage(m_video.getElement(),0,0,wide,high);
        m_xorig=true;
        LienzoCore.get().error(""String_Node_Str"" + m_video.getSrc() + ""String_Node_Str""+ e.getMessage());
      }
    }
 else {
      context.drawImage(m_video.getElement(),0,0,wide,high);
    }
    context.restore();
  }
  return false;
}",0.99885888170407
170424,"private final void setErrorCode(final int code){
switch (code) {
case MediaError.MEDIA_ERR_ABORTED:
    m_error=MessageConstants.MESSAGES.moviePlaybackWasAborted();
  break;
case MediaError.MEDIA_ERR_NETWORK:
m_error=MessageConstants.MESSAGES.movieNetworkError();
break;
case MediaError.MEDIA_ERR_DECODE:
m_error=MessageConstants.MESSAGES.movieErrorInDecoding();
break;
case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
m_error=MessageConstants.MESSAGES.movieFormatNotSupported();
break;
}
}","private final void setErrorCode(final int code){
switch (code) {
case MediaError.MEDIA_ERR_ABORTED:
    m_error=MessageConstants.MESSAGES.moviePlaybackWasAborted();
  break;
case MediaError.MEDIA_ERR_NETWORK:
m_error=MessageConstants.MESSAGES.movieNetworkError();
break;
case MediaError.MEDIA_ERR_DECODE:
m_error=MessageConstants.MESSAGES.movieErrorInDecoding();
break;
case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
m_error=MessageConstants.MESSAGES.movieFormatNotSupported();
break;
default :
m_error=""String_Node_Str"" + code;
break;
}
}",0.9501466275659824
170425,"@Override public boolean parse(final Attributes attr){
  final Point2DArray list=attr.getPoints().noAdjacentPoints();
  final int size=list.size();
  if (size > 1) {
    final PathPartList path=getPathPartList();
    final double headOffset=attr.getHeadOffset();
    final double tailOffset=attr.getTailOffset();
    m_headOffsetPoint=Geometry.getProjection(list.get(0),list.get(1),headOffset);
    m_tailOffsetPoint=Geometry.getProjection(list.get(size - 1),list.get(size - 2),tailOffset);
    path.M(m_headOffsetPoint);
    final double corner=getCornerRadius();
    if (corner <= 0) {
      for (int i=1; i < (size - 1); i++) {
        path.L(list.get(i));
      }
      path.L(m_tailOffsetPoint);
    }
 else {
      Geometry.drawArcJoinedLines(path,list.copy().set(size - 1,m_tailOffsetPoint),corner);
    }
    return true;
  }
  return false;
}","@Override public boolean parse(final Attributes attr){
  final Point2DArray points=attr.getPoints();
  if (points == null) {
    return false;
  }
  final Point2DArray list=points.noAdjacentPoints();
  final int size=list.size();
  if (size > 1) {
    final PathPartList path=getPathPartList();
    final double headOffset=attr.getHeadOffset();
    final double tailOffset=attr.getTailOffset();
    m_headOffsetPoint=Geometry.getProjection(list.get(0),list.get(1),headOffset);
    m_tailOffsetPoint=Geometry.getProjection(list.get(size - 1),list.get(size - 2),tailOffset);
    path.M(m_headOffsetPoint);
    final double corner=getCornerRadius();
    if (corner <= 0) {
      for (int i=1; i < (size - 1); i++) {
        path.L(list.get(i));
      }
      path.L(m_tailOffsetPoint);
    }
 else {
      Geometry.drawArcJoinedLines(path,list.copy().set(size - 1,m_tailOffsetPoint),corner);
    }
    return true;
  }
  return true;
}",0.9265283230510376
170426,"private static final NFastDoubleArrayJSO drawOrthogonalLinePoints(final Point2DArray points,Direction headDirection,Direction tailDirection,final double correction,final OrthogonalPolyLine pline,boolean write){
  final NFastDoubleArrayJSO buffer=NFastDoubleArrayJSO.make();
  Point2D p0=points.get(0);
  p0=correctP0(headDirection,correction,pline,write,buffer,p0);
  int i=1;
  Direction direction=headDirection;
  final int size=points.size();
  Point2D p1;
  Point2D p2;
  for (; i < size - 1; i++) {
    p1=points.get(i);
    p2=points.get(i + 1);
    direction=drawOrthogonalLineSegment(buffer,direction,null,p0.getX(),p0.getY(),p1.getX(),p1.getY(),p2.getX(),p2.getY(),write);
    if (null == direction) {
      return null;
    }
    p0=p1;
  }
  p1=points.get(size - 1);
  drawTail(points,buffer,direction,tailDirection,p0,p1,correction,pline);
  return buffer;
}","private static final NFastDoubleArrayJSO drawOrthogonalLinePoints(final Point2DArray points,Direction headDirection,Direction tailDirection,final double correction,final OrthogonalPolyLine pline,double breakDistance,boolean write){
  final NFastDoubleArrayJSO buffer=NFastDoubleArrayJSO.make();
  Point2D p0=points.get(0);
  p0=correctP0(headDirection,correction,pline,write,buffer,p0);
  int i=1;
  Direction direction=headDirection;
  final int size=points.size();
  Point2D p1;
  Point2D p2;
  for (; i < size - 1; i++) {
    p1=points.get(i);
    p2=points.get(i + 1);
    direction=drawOrthogonalLineSegment(buffer,direction,null,p0.getX(),p0.getY(),p1.getX(),p1.getY(),p2.getX(),p2.getY(),write);
    if (null == direction) {
      return null;
    }
    p0=p1;
  }
  p1=points.get(size - 1);
  drawTail(points,buffer,direction,tailDirection,p0,p1,correction,pline);
  return buffer;
}",0.9880749574105622
170427,"@Override public boolean parse(final Attributes attr){
  Point2DArray points=attr.getControlPoints();
  if (null != points) {
    points=points.copy();
    if (points.size() > 1) {
      final double headOffset=attr.getHeadOffset();
      final double correction=attr.getCorrectionOffset();
      Direction headDirection=attr.getHeadDirection();
      Direction tailDirection=attr.getTailDirection();
      if (headDirection == NONE) {
        Point2D p0=points.get(0);
        Point2D p1=points.get(1);
        double headOffsetAndCorrect=headOffset + correction;
        headDirection=getHeadDirection(points,null,headDirection,tailDirection,p0,p1,headOffsetAndCorrect,correction,this);
      }
      final NFastDoubleArrayJSO opoint=drawOrthogonalLinePoints(points,headDirection,tailDirection,correction,this,true);
      m_headOffsetPoint=points.get(0);
      m_tailOffsetPoint=points.get(points.size() - 1);
      if (null != opoint) {
        final PathPartList list=getPathPartList();
        list.M(m_headOffsetPoint.getX(),m_headOffsetPoint.getY());
        final double radius=getCornerRadius();
        m_computedPoint2DArray=Point2DArray.fromNFastDoubleArrayJSO(opoint);
        if (radius > 0) {
          Geometry.drawArcJoinedLines(list,m_computedPoint2DArray,radius);
        }
 else {
          final int size=opoint.size();
          for (int i=2; i < size; i+=2) {
            list.L(opoint.get(i),opoint.get(i + 1));
          }
        }
        return true;
      }
    }
  }
  m_computedPoint2DArray=null;
  return false;
}","@Override public boolean parse(final Attributes attr){
  Point2DArray points=attr.getControlPoints();
  points=correctBreakDistance(points,m_breakDistance);
  if (null != points) {
    if (points.size() > 1) {
      final double headOffset=attr.getHeadOffset();
      final double correction=attr.getCorrectionOffset();
      Direction headDirection=attr.getHeadDirection();
      Direction tailDirection=attr.getTailDirection();
      if (headDirection == NONE) {
        Point2D p0=points.get(0);
        Point2D p1=points.get(1);
        double headOffsetAndCorrect=headOffset + correction;
        headDirection=getHeadDirection(points,null,headDirection,tailDirection,p0,p1,headOffsetAndCorrect,correction,this);
      }
      final NFastDoubleArrayJSO opoint=drawOrthogonalLinePoints(points,headDirection,tailDirection,correction,this,m_breakDistance,true);
      m_headOffsetPoint=points.get(0);
      m_tailOffsetPoint=points.get(points.size() - 1);
      if (null != opoint) {
        final PathPartList list=getPathPartList();
        list.M(m_headOffsetPoint.getX(),m_headOffsetPoint.getY());
        final double radius=getCornerRadius();
        m_computedPoint2DArray=Point2DArray.fromNFastDoubleArrayJSO(opoint);
        if (radius > 0) {
          Geometry.drawArcJoinedLines(list,m_computedPoint2DArray,radius);
        }
 else {
          final int size=opoint.size();
          for (int i=2; i < size; i+=2) {
            list.L(opoint.get(i),opoint.get(i + 1));
          }
        }
        return true;
      }
    }
  }
  m_computedPoint2DArray=null;
  return false;
}",0.969078737647434
170428,"@Override public void clear(){
  for (  WiresShape shape : selectionContext.getShapes()) {
    enableDocking(shape.getControl());
    shape.getControl().clear();
  }
  clearState();
}","@Override public void clear(){
  for (  WiresShape shape : selectionContext.getShapes()) {
    shape.getControl().clear();
    enableDocking(shape.getControl());
  }
  clearState();
}",0.825136612021858
170429,"private Point2D getCandidateShapeLocationRelativeToInitialParent(final WiresShape shape){
  Point2D candidate=null;
  if (shape.getControl().getContainmentControl().isAllow()) {
    candidate=shape.getControl().getContainmentControl().getCandidateLocation();
  }
 else   if (shape.getControl().getDockingControl().isAllow()) {
    candidate=shape.getControl().getDockingControl().getCandidateLocation();
  }
  if (null != candidate) {
    final WiresParentPickerControlImpl parentPickerControl=(WiresParentPickerControlImpl)shape.getControl().getParentPickerControl();
    if (!parentPickerControl.getShapeLocationControl().isStartDocked() && parentPickerControl.getInitialParent() != parentPickerControl.getParent()) {
      final Point2D io=null != parentPickerControl.getInitialParent() ? parentPickerControl.getInitialParent().getComputedLocation() : new Point2D(0,0);
      final Point2D co=null != parentPickerControl.getParent() ? parentPickerControl.getParent().getComputedLocation() : new Point2D(0,0);
      return co.add(candidate).minus(io);
    }
    return candidate;
  }
  return shape.getControl().getParentPickerControl().getShapeLocation();
}","private Point2D getCandidateShapeLocationRelativeToInitialParent(final WiresShape shape){
  Point2D candidate=null;
  if (shape.getControl().getContainmentControl().isAllow()) {
    candidate=shape.getControl().getContainmentControl().getCandidateLocation();
  }
  if (null != candidate) {
    final WiresParentPickerControlImpl parentPickerControl=(WiresParentPickerControlImpl)shape.getControl().getParentPickerControl();
    if (!parentPickerControl.getShapeLocationControl().isStartDocked() && parentPickerControl.getInitialParent() != parentPickerControl.getParent()) {
      final Point2D io=null != parentPickerControl.getInitialParent() ? parentPickerControl.getInitialParent().getComputedLocation() : new Point2D(0,0);
      final Point2D co=null != parentPickerControl.getParent() ? parentPickerControl.getParent().getComputedLocation() : new Point2D(0,0);
      return co.add(candidate).minus(io);
    }
    return candidate;
  }
  return shape.getControl().getParentPickerControl().getShapeLocation();
}",0.9333333333333332
170430,"@Override public void reset(){
  for (  WiresShape shape : selectionContext.getShapes()) {
    shape.getControl().reset();
    shape.shapeMoved();
  }
  for (  WiresConnector connector : selectionContext.getConnectors()) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    handler.getControl().reset();
    WiresConnector.updateHeadTailForRefreshedConnector(connector);
  }
  clearState();
}","@Override public void reset(){
  for (  WiresShape shape : selectionContext.getShapes()) {
    shape.getControl().reset();
    enableDocking(shape.getControl());
  }
  for (  WiresConnector connector : selectionContext.getConnectors()) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    handler.getControl().reset();
    WiresConnector.updateHeadTailForRefreshedConnector(connector);
  }
  clearState();
}",0.944254835039818
170431,"@Override public void onNodeDragMove(NodeDragMoveEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    shape.getMagnets().onNodeDragMove(event);
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragMove(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections);
}","@Override public void onNodeDragMove(NodeDragMoveEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    if (shape.getMagnets() != null) {
      shape.getMagnets().onNodeDragMove(event);
    }
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragMove(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections);
  m_selectionManager.m_layer.batch();
}",0.9525959367945824
170432,"@Override public void onNodeDragStart(NodeDragStartEvent event){
  m_shapeStartLocations=new NFastDoubleArray();
  Map<String,WiresConnector> connectors=new HashMap<String,WiresConnector>();
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    WiresShapeControlImpl.collectionSpecialConnectors(shape,connectors);
    shape.getMagnets().onNodeDragStart(event);
    m_shapeStartLocations.push(shape.getX(),shape.getY());
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragStart(event.getDragContext());
  }
  m_connectorsWithSpecialConnections=connectors.values().toArray(new WiresConnector[connectors.size()]);
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    handler.onNodeDragStart(event);
  }
}","@Override public void onNodeDragStart(NodeDragStartEvent event){
  m_shapeStartLocations=new NFastDoubleArray();
  Map<String,WiresConnector> connectors=new HashMap<String,WiresConnector>();
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    if (shape.getMagnets() != null) {
      WiresShapeControlImpl.collectionSpecialConnectors(shape,connectors);
      shape.getMagnets().onNodeDragStart(event);
    }
    m_shapeStartLocations.push(shape.getX(),shape.getY());
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragStart(event.getDragContext());
  }
  m_connectorsWithSpecialConnections=connectors.values().toArray(new WiresConnector[connectors.size()]);
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    handler.onNodeDragStart(event);
  }
}",0.9726962457337884
170433,"@Override public void onNodeDragEnd(NodeDragEndEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    shape.getMagnets().onNodeDragEnd(event);
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragEnd(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
    ((WiresConnectorControlImpl)handler.getControl()).dragEnd();
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections);
  m_connectorsWithSpecialConnections=null;
  m_shapeStartLocations=null;
  m_selectionManager.m_ignoreMouseClick=true;
}","@Override public void onNodeDragEnd(NodeDragEndEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    if (shape.getMagnets() != null) {
      shape.getMagnets().onNodeDragEnd(event);
    }
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragEnd(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
    ((WiresConnectorControlImpl)handler.getControl()).dragEnd();
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections);
  m_connectorsWithSpecialConnections=null;
  m_shapeStartLocations=null;
  m_selectionManager.m_ignoreMouseClick=true;
  m_selectionManager.m_layer.batch();
}",0.9606003752345216
170434,"@Override public void onNodeDragMove(NodeDragMoveEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    if (shape.getMagnets() != null) {
      shape.getMagnets().onNodeDragMove(event);
    }
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragMove(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections);
  m_selectionManager.m_layer.batch();
}","@Override public void onNodeDragMove(NodeDragMoveEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    if (shape.getMagnets() != null) {
      shape.getMagnets().onNodeDragMove(event);
    }
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragMove(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections,false);
  m_selectionManager.m_layer.batch();
}",0.9967776584317938
170435,"@Override public void onNodeDragEnd(NodeDragEndEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    if (shape.getMagnets() != null) {
      shape.getMagnets().onNodeDragEnd(event);
    }
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragEnd(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
    ((WiresConnectorControlImpl)handler.getControl()).dragEnd();
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections);
  m_connectorsWithSpecialConnections=null;
  m_shapeStartLocations=null;
  m_selectionManager.m_ignoreMouseClick=true;
  m_selectionManager.m_layer.batch();
}","@Override public void onNodeDragEnd(NodeDragEndEvent event){
  int i=0;
  for (  WiresShape shape : m_selectionManager.m_selected.m_shapes) {
    shape.setX(m_shapeStartLocations.get(i++) + event.getDragContext().getDx());
    shape.setY(m_shapeStartLocations.get(i++) + event.getDragContext().getDy());
    if (shape.getMagnets() != null) {
      shape.getMagnets().onNodeDragEnd(event);
    }
    ((WiresShapeControlImpl)shape.getHandler().getControl()).dragEnd(event.getDragContext());
  }
  for (  WiresConnector connector : m_selectionManager.m_selected.m_connectors) {
    WiresConnector.WiresConnectorHandler handler=connector.getWiresConnectorHandler();
    ((WiresConnectorControlImpl)handler.getControl()).move(event.getDragContext().getDx(),event.getDragContext().getDy(),true,true);
    ((WiresConnectorControlImpl)handler.getControl()).dragEnd();
  }
  WiresShapeControlImpl.updateSpecialConnections(m_connectorsWithSpecialConnections,true);
  m_connectorsWithSpecialConnections=null;
  m_shapeStartLocations=null;
  m_selectionManager.m_ignoreMouseClick=true;
  m_selectionManager.m_layer.batch();
}",0.9977487618190004
170436,"public boolean isSpecialConnection(){
  return m_autoConnection || m_magnet != null && m_magnet.getIndex() == 0;
}","public static boolean isSpecialConnection(boolean auto,Integer magnet){
  return auto || magnet != null && magnet == 0;
}",0.7404255319148936
170437,"public WiresConnector setHeadMagnet(WiresMagnet headMagnet){
  if (null != headMagnet) {
    m_headConnection.setMagnet(headMagnet);
  }
  return this;
}","public WiresConnector setHeadMagnet(WiresMagnet headMagnet){
  m_headConnection.setMagnet(headMagnet);
  return this;
}",0.875
170438,"public boolean updateForAutoConnections(WiresShape headS,WiresShape tailS){
  boolean accept=true;
  WiresMagnet[] magnets=getMagnetsOnAutoConnection(headS,tailS);
  if (magnets != null) {
    if (magnets[0] != null && getHeadConnection().getMagnet() != magnets[0]) {
      accept=accept && getConnectionAcceptor().acceptHead(getHeadConnection(),magnets[0]);
      if (accept) {
        getHeadConnection().setMagnet(magnets[0]);
      }
    }
    if (accept && magnets[1] != null && getTailConnection().getMagnet() != magnets[1]) {
      accept=accept && getConnectionAcceptor().acceptTail(getTailConnection(),magnets[1]);
      if (accept) {
        getTailConnection().setMagnet(magnets[1]);
      }
    }
  }
  return accept;
}","public boolean updateForAutoConnections(WiresShape headS,WiresShape tailS,boolean isAcceptOp){
  boolean accept=true;
  WiresMagnet[] magnets=getMagnetsOnAutoConnection(headS,tailS);
  if (magnets != null) {
    if (magnets[0] != null && getHeadConnection().getMagnet() != magnets[0]) {
      accept=accept && executeHeadConnectionOperation(headS,magnets[0],isAcceptOp);
      if (accept) {
        getHeadConnection().setMagnet(magnets[0]);
      }
    }
    if (accept && magnets[1] != null && getTailConnection().getMagnet() != magnets[1]) {
      accept=accept && executeTailConnectionOperation(tailS,magnets[1],isAcceptOp);
      if (accept) {
        getTailConnection().setMagnet(magnets[1]);
      }
    }
  }
  return accept;
}",0.7593728698023177
170439,"public void updateForSpecialConnections(){
  updateForCenterConnection();
  updateForAutoConnections();
}","public void updateForSpecialConnections(boolean isAcceptOp){
  updateForCenterConnection();
  updateForAutoConnections(isAcceptOp);
}",0.8823529411764706
170440,"public WiresConnector setTailMagnet(WiresMagnet tailMagnet){
  if (null != tailMagnet) {
    m_tailConnection.setMagnet(tailMagnet);
  }
  return this;
}","public WiresConnector setTailMagnet(WiresMagnet tailMagnet){
  m_tailConnection.setMagnet(tailMagnet);
  return this;
}",0.875
170441,"public void add(WiresShape shape){
  if (shape.getParent() == this) {
    return;
  }
  if (shape.getParent() != null) {
    shape.removeFromParent();
  }
  m_childShapes.add(shape);
  m_container.add(shape.getGroup());
  shape.setParent(this);
  if (shape.getMagnets() != null) {
    shape.getMagnets().shapeMoved();
  }
  m_wiresManager.getAlignAndDistribute().getControlForShape(shape.uuid()).refresh();
  getLayoutHandler().requestLayout(this);
}","public void add(WiresShape shape){
  if (shape.getParent() == this) {
    return;
  }
  if (shape.getParent() != null) {
    shape.removeFromParent();
  }
  m_childShapes.add(shape);
  m_container.add(shape.getGroup());
  shape.setParent(this);
  if (shape.getMagnets() != null) {
    shape.getMagnets().shapeMoved();
  }
  if (m_wiresManager.getAlignAndDistribute().isShapeIndexed(shape.uuid())) {
    m_wiresManager.getAlignAndDistribute().getControlForShape(shape.uuid()).refresh();
  }
  getLayoutHandler().requestLayout(this);
}",0.9155645981688708
170442,"@Override public boolean onLayerBeforeDraw(Layer layer){
  for (  WiresConnector c : m_wiresManager.getConnectorList()) {
    if (c.getLine().getPathPartList().size() < 1) {
      AbstractDirectionalMultiPointShape<?> line=c.getLine();
      if (c.isSpecialConnection() && line.getPathPartList().size() == 0) {
        c.updateForSpecialConnections();
      }
      final boolean prepared=line.isPathPartListPrepared(c.getLine().getAttributes());
      if (!prepared) {
        return false;
      }
      Point2DArray points=line.getPoint2DArray();
      Point2D p0=points.get(0);
      Point2D p1=line.getHeadOffsetPoint();
      Point2DArray headPoints=new Point2DArray(p1,p0);
      c.getHeadDecorator().draw(headPoints);
      p0=points.get(points.size() - 1);
      p1=line.getTailOffsetPoint();
      Point2DArray tailPoints=new Point2DArray(p1,p0);
      c.getTailDecorator().draw(tailPoints);
    }
  }
  return true;
}","@Override public boolean onLayerBeforeDraw(Layer layer){
  for (  WiresConnector c : m_wiresManager.getConnectorList()) {
    if (c.getLine().getPathPartList().size() < 1) {
      AbstractDirectionalMultiPointShape<?> line=c.getLine();
      if (c.isSpecialConnection() && line.getPathPartList().size() == 0) {
        c.updateForSpecialConnections(false);
      }
      final boolean prepared=line.isPathPartListPrepared(c.getLine().getAttributes());
      if (!prepared) {
        return false;
      }
      Point2DArray points=line.getPoint2DArray();
      Point2D p0=points.get(0);
      Point2D p1=line.getHeadOffsetPoint();
      Point2DArray headPoints=new Point2DArray(p1,p0);
      c.getHeadDecorator().draw(headPoints);
      p0=points.get(points.size() - 1);
      p1=line.getTailOffsetPoint();
      Point2DArray tailPoints=new Point2DArray(p1,p0);
      c.getTailDecorator().draw(tailPoints);
    }
  }
  return true;
}",0.9973132724341752
170443,"public static boolean acceptMagnetAndUpdateAutoConnection(WiresConnection connection,boolean isHead,WiresShape headS,WiresShape tailS,WiresMagnet currentMagnet){
  WiresConnector connector=connection.getConnector();
  boolean accept=true;
  if (!connection.isAutoConnection()) {
    if (isHead) {
      accept=accept && connector.getConnectionAcceptor().acceptHead(connection,currentMagnet);
    }
 else {
      accept=accept && connector.getConnectionAcceptor().acceptTail(connection,currentMagnet);
    }
    if (accept) {
      connection.setMagnet(currentMagnet);
    }
  }
  if (accept) {
    accept=accept && connector.updateForAutoConnections(headS,tailS);
    connector.updateForCenterConnection();
  }
  return accept;
}","public static boolean acceptMagnetAndUpdateAutoConnection(WiresConnection connection,boolean isHead,WiresShape headS,WiresShape tailS,WiresMagnet currentMagnet){
  WiresConnector connector=connection.getConnector();
  boolean accept=true;
  final boolean isAuto=connection.isAutoConnection();
  if (!isAuto) {
    if (isHead) {
      accept=accept && connector.getConnectionAcceptor().acceptHead(connection,currentMagnet);
    }
 else {
      accept=accept && connector.getConnectionAcceptor().acceptTail(connection,currentMagnet);
    }
    if (accept) {
      connection.setMagnet(currentMagnet);
    }
  }
  if (accept) {
    accept=accept && connector.updateForAutoConnections(headS,tailS,isAuto);
    connector.updateForCenterConnection();
  }
  return accept;
}",0.9344919786096256
170444,"@Override public boolean dragAdjust(final Point2D dxy){
  int x=(int)(m_startX + dxy.getX());
  int y=(int)(m_startY + dxy.getY());
  String colorKey=BackingColorMapUtils.findColorAtPoint(m_shapesBacking,x,y);
  if (m_colorKey != null && colorKey != null && !colorKey.equals(m_colorKey)) {
    if (null != m_magnets) {
      m_magnets.hide();
    }
    m_magnets=null;
    m_colorKey=null;
  }
  boolean isAllowed=true;
  if (m_magnets == null) {
    isAllowed=checkAllowAndShowMagnets(colorKey);
  }
  m_connector.updateForSpecialConnections();
  if (isAllowed) {
    if (null != m_magnets) {
      String magnetColorKey=BackingColorMapUtils.findColorAtPoint(m_magnetsBacking,x,y);
      if (magnetColorKey == null) {
        if (null != m_magnets) {
          m_magnets.hide();
        }
        m_magnets=null;
        m_colorKey=null;
        m_current_magnet=null;
      }
 else {
        WiresMagnet potentialMagnet=m_magnet_color_map.get(magnetColorKey);
        if (m_connector.getHeadConnection().getMagnet() != potentialMagnet && m_connector.getTailConnection().getMagnet() != potentialMagnet) {
          m_current_magnet=potentialMagnet;
        }
 else         if (potentialMagnet == null) {
          m_current_magnet=null;
        }
      }
    }
    if (null != m_current_magnet) {
      Shape<?> control=m_current_magnet.getControl().asShape();
      if (control != null) {
        Point2D absControl=control.getComputedLocation();
        double targetX=absControl.getX();
        double targetY=absControl.getY();
        double dx=targetX - m_startX - dxy.getX();
        double dy=targetY - m_startY - dxy.getY();
        if (dx != 0 || dy != 0) {
          dxy.setX(dxy.getX() + dx).setY(dxy.getY() + dy);
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean dragAdjust(final Point2D dxy){
  int x=(int)(m_startX + dxy.getX());
  int y=(int)(m_startY + dxy.getY());
  String colorKey=BackingColorMapUtils.findColorAtPoint(m_shapesBacking,x,y);
  if (m_colorKey != null && colorKey != null && !colorKey.equals(m_colorKey)) {
    if (null != m_magnets) {
      m_magnets.hide();
    }
    m_magnets=null;
    m_colorKey=null;
  }
  boolean isAllowed=true;
  if (m_magnets == null) {
    isAllowed=checkAllowAndShowMagnets(colorKey);
  }
  m_connector.updateForSpecialConnections(false);
  if (isAllowed) {
    if (null != m_magnets) {
      String magnetColorKey=BackingColorMapUtils.findColorAtPoint(m_magnetsBacking,x,y);
      if (magnetColorKey == null) {
        if (null != m_magnets) {
          m_magnets.hide();
        }
        m_magnets=null;
        m_colorKey=null;
        m_current_magnet=null;
      }
 else {
        WiresMagnet potentialMagnet=m_magnet_color_map.get(magnetColorKey);
        if (m_connector.getHeadConnection().getMagnet() != potentialMagnet && m_connector.getTailConnection().getMagnet() != potentialMagnet) {
          m_current_magnet=potentialMagnet;
        }
 else         if (potentialMagnet == null) {
          m_current_magnet=null;
        }
      }
    }
    if (null != m_current_magnet) {
      Shape<?> control=m_current_magnet.getControl().asShape();
      if (control != null) {
        Point2D absControl=control.getComputedLocation();
        double targetX=absControl.getX();
        double targetY=absControl.getY();
        double dx=targetX - m_startX - dxy.getX();
        double dy=targetY - m_startY - dxy.getY();
        if (dx != 0 || dy != 0) {
          dxy.setX(dxy.getX() + dx).setY(dxy.getY() + dy);
        }
      }
    }
    return true;
  }
  return false;
}",0.99860529986053
170445,"@Override public boolean dragEnd(final DragContext context){
  WiresConnection connection=getConnection();
  boolean accept=makeAndUpdateSpecialConnections();
  if (!accept) {
    connection.setAutoConnection(m_initialAutoConnect);
    connection.setMagnet(m_initial_magnet);
    WiresConnector connector=connection.getConnector();
    connector.updateForSpecialConnections();
  }
  if (m_magnets != null) {
    m_magnets.hide();
  }
  m_shapesBacking=null;
  m_magnetsBacking=null;
  m_magnets=null;
  m_colorKey=null;
  m_current_magnet=null;
  m_initial_magnet=null;
  m_shape_color_map.clear();
  m_magnet_color_map.clear();
  return accept;
}","@Override public boolean dragEnd(final DragContext context){
  WiresConnection connection=getConnection();
  boolean accept=makeAndUpdateSpecialConnections();
  if (!accept) {
    connection.setAutoConnection(m_initialAutoConnect);
    connection.setMagnet(m_initial_magnet);
    WiresConnector connector=connection.getConnector();
    connector.updateForSpecialConnections(false);
  }
  if (m_magnets != null) {
    m_magnets.hide();
  }
  m_shapesBacking=null;
  m_magnetsBacking=null;
  m_magnets=null;
  m_colorKey=null;
  m_current_magnet=null;
  m_initial_magnet=null;
  m_shape_color_map.clear();
  m_magnet_color_map.clear();
  return accept;
}",0.9961508852963818
170446,"public void showPointHandles(){
  if (m_HandlerRegistrationManager == null) {
    m_HandlerRegistrationManager=m_connector.getPointHandles().getHandlerRegistrationManager();
  }
  m_connector.getPointHandles().show();
  final ConnectionHandler connectionHandler=new ConnectionHandler();
  Shape<?> head=m_connector.getHeadConnection().getControl().asShape();
  head.setDragConstraints(connectionHandler);
  m_HandlerRegistrationManager.register(head.addNodeDragEndHandler(connectionHandler));
  Shape<?> tail=m_connector.getTailConnection().getControl().asShape();
  tail.setDragConstraints(connectionHandler);
  m_HandlerRegistrationManager.register(tail.addNodeDragEndHandler(connectionHandler));
  final WiresConnectorControlHandler controlPointsHandler=new WiresConnectorControlHandler();
  for (  IControlHandle handle : m_connector.getPointHandles()) {
    Shape<?> shape=handle.getControl().asShape();
    m_HandlerRegistrationManager.register(shape.addNodeMouseDoubleClickHandler(controlPointsHandler));
  }
}","public void showPointHandles(){
  if (m_HandlerRegistrationManager == null) {
    m_HandlerRegistrationManager=m_connector.getPointHandles().getHandlerRegistrationManager();
    m_connector.getPointHandles().show();
    final ConnectionHandler connectionHandler=new ConnectionHandler();
    Shape<?> head=m_connector.getHeadConnection().getControl().asShape();
    head.setDragConstraints(connectionHandler);
    m_HandlerRegistrationManager.register(head.addNodeDragEndHandler(connectionHandler));
    Shape<?> tail=m_connector.getTailConnection().getControl().asShape();
    tail.setDragConstraints(connectionHandler);
    m_HandlerRegistrationManager.register(tail.addNodeDragEndHandler(connectionHandler));
    final WiresConnectorControlHandler controlPointsHandler=new WiresConnectorControlHandler();
    for (    IControlHandle handle : m_connector.getPointHandles()) {
      Shape<?> shape=handle.getControl().asShape();
      m_HandlerRegistrationManager.register(shape.addNodeMouseDoubleClickHandler(controlPointsHandler));
    }
  }
}",0.9844810863239574
170447,"@Override public void hideControlPoints(){
  if (m_HandlerRegistrationManager != null) {
    m_HandlerRegistrationManager.destroy();
  }
  m_HandlerRegistrationManager=null;
  m_connector.destroyPointHandles();
}","@Override public void hideControlPoints(){
  if (m_HandlerRegistrationManager != null) {
    m_HandlerRegistrationManager.destroy();
    m_connector.destroyPointHandles();
    m_HandlerRegistrationManager=null;
  }
}",0.8084112149532711
170448,"@Override public void showControlPoints(){
  if (this.m_HandlerRegistrationManager == null) {
    showPointHandles();
  }
}","@Override public void showControlPoints(){
  showPointHandles();
}",0.6984126984126984
170449,"public static void updateSpecialConnections(WiresConnector[] connectors){
  if (connectors == null) {
    return;
  }
  for (  WiresConnector connector : connectors) {
    connector.updateForSpecialConnections();
  }
}","public static void updateSpecialConnections(WiresConnector[] connectors,boolean isAcceptOp){
  if (connectors == null) {
    return;
  }
  for (  WiresConnector connector : connectors) {
    connector.updateForSpecialConnections(isAcceptOp);
  }
}",0.9376344086021504
170450,"@Override public boolean dragAdjust(final Point2D dxy){
  boolean adjusted1=false;
  if (m_dockingAndContainmentControl != null) {
    adjusted1=m_dockingAndContainmentControl.dragAdjust(dxy);
  }
  double dx=dxy.getX();
  double dy=dxy.getY();
  boolean adjusted2=false;
  if (m_alignAndDistributeControl != null && m_alignAndDistributeControl.isDraggable()) {
    adjusted2=m_alignAndDistributeControl.dragAdjust(dxy);
  }
  if (adjusted1 && adjusted2 && (dxy.getX() != dx || dxy.getY() != dy)) {
    BoundingBox box=m_shape.getPath().getBoundingBox();
    PickerPart part=m_dockingAndContainmentControl.getPicker().findShapeAt((int)(m_shapeStartX + dxy.getX() + (box.getWidth() / 2)),(int)(m_shapeStartY + dxy.getY() + (box.getHeight() / 2)));
    if (part == null || part.getShapePart() != PickerPart.ShapePart.BORDER) {
      dxy.setX(dx);
      dxy.setY(dy);
      adjusted2=false;
    }
  }
  updateSpecialConnections(m_connectorsWithSpecialConnections);
  if (m_shape.getChildShapes() != null && !m_shape.getChildShapes().isEmpty()) {
    for (    WiresShape child : m_shape.getChildShapes()) {
      if (child.getMagnets() != null) {
        child.getMagnets().shapeMoved();
      }
    }
  }
  return adjusted1 && adjusted2;
}","@Override public boolean dragAdjust(final Point2D dxy){
  boolean adjusted1=false;
  if (m_dockingAndContainmentControl != null) {
    adjusted1=m_dockingAndContainmentControl.dragAdjust(dxy);
  }
  double dx=dxy.getX();
  double dy=dxy.getY();
  boolean adjusted2=false;
  if (m_alignAndDistributeControl != null && m_alignAndDistributeControl.isDraggable()) {
    adjusted2=m_alignAndDistributeControl.dragAdjust(dxy);
  }
  if (adjusted1 && adjusted2 && (dxy.getX() != dx || dxy.getY() != dy)) {
    BoundingBox box=m_shape.getPath().getBoundingBox();
    PickerPart part=m_dockingAndContainmentControl.getPicker().findShapeAt((int)(m_shapeStartX + dxy.getX() + (box.getWidth() / 2)),(int)(m_shapeStartY + dxy.getY() + (box.getHeight() / 2)));
    if (part == null || part.getShapePart() != PickerPart.ShapePart.BORDER) {
      dxy.setX(dx);
      dxy.setY(dy);
      adjusted2=false;
    }
  }
  updateSpecialConnections(m_connectorsWithSpecialConnections,false);
  if (m_shape.getChildShapes() != null && !m_shape.getChildShapes().isEmpty()) {
    for (    WiresShape child : m_shape.getChildShapes()) {
      if (child.getMagnets() != null) {
        child.getMagnets().shapeMoved();
      }
    }
  }
  return adjusted1 && adjusted2;
}",0.9975786924939468
170451,"@Override public boolean dragEnd(final DragContext context){
  boolean allowed=true;
  if (m_dockingAndContainmentControl != null) {
    allowed=m_dockingAndContainmentControl.dragEnd(context);
  }
  allowed=allowed & checkForAndApplyLineSplice();
  if (!allowed) {
    context.reset();
  }
 else {
    updateSpecialConnections(m_connectorsWithSpecialConnections);
  }
  if (m_alignAndDistributeControl != null) {
    m_alignAndDistributeControl.dragEnd();
  }
  return allowed;
}","@Override public boolean dragEnd(final DragContext context){
  boolean allowed=true;
  if (m_dockingAndContainmentControl != null) {
    allowed=m_dockingAndContainmentControl.dragEnd(context);
  }
  allowed=allowed & checkForAndApplyLineSplice();
  if (!allowed) {
    context.reset();
  }
 else {
    updateSpecialConnections(m_connectorsWithSpecialConnections,false);
  }
  if (m_alignAndDistributeControl != null) {
    m_alignAndDistributeControl.dragEnd();
  }
  return allowed;
}",0.9937888198757764
170452,"/** 
 * Sets this layer's pixel size.
 * @param wide
 * @param high
 */
void setPixelSize(final int wide,final int high){
  m_wide=wide;
  m_high=high;
  if (LienzoCore.IS_CANVAS_SUPPORTED) {
    if (false == isSelection()) {
      getElement().getStyle().setWidth(wide,Unit.PX);
      getElement().getStyle().setHeight(high,Unit.PX);
    }
    final CanvasElement element=getCanvasElement();
    element.setWidth(wide);
    element.setHeight(high);
    if ((false == isSelection()) && (null != m_select)) {
      m_select.setPixelSize(wide,high);
    }
  }
}","/** 
 * Sets this layer's pixel size.
 * @param wide
 * @param high
 */
void setPixelSize(final int wide,final int high){
  m_wide=wide;
  m_high=high;
  if (LienzoCore.IS_CANVAS_SUPPORTED) {
    if (false == isSelection()) {
      getElement().getStyle().setWidth(wide,Unit.PX);
      getElement().getStyle().setHeight(high,Unit.PX);
    }
    final CanvasElement element=getCanvasElement();
    element.setWidth(wide);
    element.setHeight(high);
    if (false == isSelection()) {
      getContext().getNativeContext().initDeviceRatio();
    }
    if ((false == isSelection()) && (null != m_select)) {
      m_select.setPixelSize(wide,high);
    }
  }
}",0.920164609053498
170453,"public void shapeChanged(){
  if (m_list.isEmpty()) {
    return;
  }
  Direction[] cardinals=m_list.size() == 9 ? EIGHT_CARDINALS : FOUR_CARDINALS;
  final Point2DArray points=MagnetManager.getWiresIntersectionPoints(m_wiresShape,cardinals);
  for (int i=0; i < m_list.size(); i++) {
    Point2D p=points.get(i);
    WiresMagnet m=(WiresMagnet)m_list.getHandle(i);
    m.setRx(p.getX()).setRy(p.getY());
  }
  this.shapeMoved();
}","public void shapeChanged(){
  if (m_list.isEmpty()) {
    return;
  }
  Direction[] cardinals=m_list.size() == 9 ? EIGHT_CARDINALS : FOUR_CARDINALS;
  final Point2DArray points=MagnetManager.getWiresIntersectionPoints(m_wiresShape,cardinals);
  Console.get().info(""String_Node_Str"" + m_list.size() + ""String_Node_Str""+ points.size());
  for (int i=0; i < m_list.size(); i++) {
    Point2D p=points.get(i);
    WiresMagnet m=(WiresMagnet)m_list.getHandle(i);
    m.setRx(p.getX()).setRy(p.getY());
  }
  this.shapeMoved();
}",0.9035639412997905
170454,"public Magnets(MagnetManager magnetManager,IControlHandleList list,WiresShape wiresShape){
  m_list=list;
  m_magnetManager=magnetManager;
  m_wiresShape=wiresShape;
  Group shapeGroup=wiresShape.getGroup();
  m_registrationManager.register(shapeGroup.addAttributesChangedHandler(Attribute.X,this));
  m_registrationManager.register(shapeGroup.addAttributesChangedHandler(Attribute.Y,this));
  m_registrationManager.register(shapeGroup.addNodeDragStartHandler(this));
  m_registrationManager.register(shapeGroup.addNodeDragMoveHandler(this));
  m_registrationManager.register(shapeGroup.addNodeDragEndHandler(this));
}","public Magnets(MagnetManager magnetManager,IControlHandleList list,WiresShape wiresShape){
  m_list=list;
  m_magnetManager=magnetManager;
  m_wiresShape=wiresShape;
  if (list != null) {
    Group shapeGroup=wiresShape.getGroup();
    m_registrationManager.register(shapeGroup.addAttributesChangedHandler(Attribute.X,this));
    m_registrationManager.register(shapeGroup.addAttributesChangedHandler(Attribute.Y,this));
    m_registrationManager.register(shapeGroup.addNodeDragStartHandler(this));
    m_registrationManager.register(shapeGroup.addNodeDragMoveHandler(this));
    m_registrationManager.register(shapeGroup.addNodeDragEndHandler(this));
  }
 else {
    m_list=new ControlHandleList(wiresShape.getGroup());
  }
}",0.9203276247207745
170455,"public final HandlerRegistration addWiresResizeEndHandler(final WiresResizeEndHandler handler){
  Objects.requireNonNull(handler);
  return getHandlerManager().addHandler(WiresResizeEndEvent.TYPE,new WiresResizeEndHandler(){
    @Override public void onShapeResizeEnd(    WiresResizeEndEvent event){
      handler.onShapeResizeEnd(event);
      innerLayoutContainer.refresh();
      refresh();
    }
  }
);
}","public final HandlerRegistration addWiresResizeEndHandler(final WiresResizeEndHandler handler){
  Objects.requireNonNull(handler);
  return getHandlerManager().addHandler(WiresResizeEndEvent.TYPE,new WiresResizeEndHandler(){
    @Override public void onShapeResizeEnd(    WiresResizeEndEvent event){
      handler.onShapeResizeEnd(event);
      m_innerLayoutContainer.refresh();
      refresh();
    }
  }
);
}",0.9975550122249388
170456,"@Override public void onShapeResizeEnd(WiresResizeEndEvent event){
  handler.onShapeResizeEnd(event);
  innerLayoutContainer.refresh();
  refresh();
}","@Override public void onShapeResizeEnd(WiresResizeEndEvent event){
  handler.onShapeResizeEnd(event);
  m_innerLayoutContainer.refresh();
  refresh();
}",0.9933774834437086
170457,"private static Circle getControlPrimitive(double size,double x,double y,Shape<?> shape,DragMode dragMode){
  return new Circle(size).setX(x + shape.getX()).setY(y + shape.getY()).setFillColor(ColorName.RED).setFillAlpha(0.4).setStrokeColor(ColorName.BLACK).setStrokeWidth(2).setDraggable(true).setDragMode(dragMode);
}","private static Circle getControlPrimitive(double size,double x,double y,Shape<?> shape,DragMode dragMode){
  return new Circle(size).setX(x + shape.getX()).setY(y + shape.getY()).setFillColor(ColorName.DARKRED).setFillAlpha(0.8).setStrokeColor(ColorName.BLACK).setStrokeWidth(0.5).setDraggable(true).setDragMode(dragMode);
}",0.9844236760124612
170458,"@Override public void onNodeDragEnd(NodeDragEndEvent event){
  if ((m_handle.isActive()) && (m_chlist.isActive())) {
    for (    PathPartList list : m_listOfPaths) {
      list.resetBoundingBox();
    }
    m_prim.setFillColor(ColorName.RED);
    m_prim.getLayer().draw();
  }
}","@Override public void onNodeDragEnd(NodeDragEndEvent event){
  if ((m_handle.isActive()) && (m_chlist.isActive())) {
    for (    PathPartList list : m_listOfPaths) {
      list.resetBoundingBox();
    }
    m_prim.setFillColor(ColorName.DARKRED);
    m_prim.getLayer().draw();
  }
}",0.99288256227758
170459,"@Override public void onNodeDragEnd(NodeDragEndEvent event){
  m_isDragging=false;
  if ((m_handle.isActive()) && (m_handleList.isActive())) {
    m_prim.setFillColor(ColorName.RED);
    m_prim.getLayer().batch();
  }
}","@Override public void onNodeDragEnd(NodeDragEndEvent event){
  m_isDragging=false;
  if ((m_handle.isActive()) && (m_handleList.isActive())) {
    m_prim.setFillColor(ColorName.DARKRED);
    m_prim.getLayer().batch();
  }
}",0.990950226244344
170460,"private IControlHandleList getPointHandles(){
  final ControlHandleList chlist=new ControlHandleList(m_shape);
  HandlerRegistrationManager manager=chlist.getHandlerRegistrationManager();
  ShapeXorYChanged shapeXoYChangedHandler=new ShapeXorYChanged(m_shape,chlist);
  manager.register(m_shape.addNodeDragStartHandler(shapeXoYChangedHandler));
  manager.register(m_shape.addNodeDragMoveHandler(shapeXoYChangedHandler));
  manager.register(m_shape.addNodeDragEndHandler(shapeXoYChangedHandler));
  for (  Point2D point : m_shape.getPoint2DArray()) {
    final Point2D p=point;
    final Circle prim=new Circle(R0).setX(m_shape.getX() + p.getX()).setY(m_shape.getY() + p.getY()).setFillColor(ColorName.RED).setFillAlpha(0.4).setStrokeColor(ColorName.BLACK).setDraggable(true).setDragMode(m_dmode).setStrokeWidth(2);
    prim.setSelectionBoundsOffset(R0 * 0.5);
    chlist.add(new AbstractPointControlHandle(){
      @Override public AbstractPointControlHandle init(){
        ControlXorYChanged handler=new ControlXorYChanged(chlist,m_shape,p,prim,this,m_shape.getLayer());
        register(prim.addNodeDragMoveHandler(handler));
        register(prim.addNodeDragStartHandler(handler));
        register(prim.addNodeDragEndHandler(handler));
        register(prim.addNodeMouseEnterHandler(new NodeMouseEnterHandler(){
          @Override public void onNodeMouseEnter(          NodeMouseEnterEvent event){
            animate(prim,R1);
          }
        }
));
        register(prim.addNodeMouseExitHandler(new NodeMouseExitHandler(){
          @Override public void onNodeMouseExit(          NodeMouseExitEvent event){
            animate(prim,R0);
          }
        }
));
        setPoint(p);
        return this;
      }
      @Override public IPrimitive<?> getControl(){
        return prim;
      }
      @Override public void destroy(){
        super.destroy();
      }
    }
.init());
  }
  return chlist;
}","private IControlHandleList getPointHandles(){
  final ControlHandleList chlist=new ControlHandleList(m_shape);
  HandlerRegistrationManager manager=chlist.getHandlerRegistrationManager();
  ShapeXorYChanged shapeXoYChangedHandler=new ShapeXorYChanged(m_shape,chlist);
  manager.register(m_shape.addNodeDragStartHandler(shapeXoYChangedHandler));
  manager.register(m_shape.addNodeDragMoveHandler(shapeXoYChangedHandler));
  manager.register(m_shape.addNodeDragEndHandler(shapeXoYChangedHandler));
  for (  Point2D point : m_shape.getPoint2DArray()) {
    final Point2D p=point;
    final Circle prim=new Circle(R0).setX(m_shape.getX() + p.getX()).setY(m_shape.getY() + p.getY()).setFillColor(ColorName.DARKRED).setFillAlpha(0.8).setStrokeAlpha(0).setDraggable(true).setDragMode(m_dmode);
    prim.setSelectionBoundsOffset(R0 * 0.5);
    chlist.add(new AbstractPointControlHandle(){
      @Override public AbstractPointControlHandle init(){
        ControlXorYChanged handler=new ControlXorYChanged(chlist,m_shape,p,prim,this,m_shape.getLayer());
        register(prim.addNodeDragMoveHandler(handler));
        register(prim.addNodeDragStartHandler(handler));
        register(prim.addNodeDragEndHandler(handler));
        register(prim.addNodeMouseEnterHandler(new NodeMouseEnterHandler(){
          @Override public void onNodeMouseEnter(          NodeMouseEnterEvent event){
            animate(prim,R1);
          }
        }
));
        register(prim.addNodeMouseExitHandler(new NodeMouseExitHandler(){
          @Override public void onNodeMouseExit(          NodeMouseExitEvent event){
            animate(prim,R0);
          }
        }
));
        setPoint(p);
        return this;
      }
      @Override public IPrimitive<?> getControl(){
        return prim;
      }
      @Override public void destroy(){
        super.destroy();
      }
    }
.init());
  }
  return chlist;
}",0.9868490268279853
170461,"private Circle getControlPrimitive(double x,double y){
  return new Circle(m_ctrlSize).setFillColor(ColorName.RED).setFillAlpha(0.4).setX(x).setY(y).setDraggable(true).setDragMode(DragMode.SAME_LAYER).setStrokeColor(ColorName.BLACK).setStrokeWidth(CONTROL_STROKE_WIDTH);
}","private Circle getControlPrimitive(double x,double y){
  return new Circle(m_ctrlSize).setX(x).setY(y).setFillColor(ColorName.DARKRED).setFillAlpha(0.8).setStrokeAlpha(0).setDraggable(true).setDragMode(DragMode.SAME_LAYER);
}",0.7484909456740443
170462,"@Override public void onNodeMouseClick(NodeMouseClickEvent event){
  if (m_connector.getPointHandles().isVisible()) {
    this.m_control.hideControlPoints();
  }
 else   if (((Node<?>)event.getSource()).getParent() == m_connector.getGroup()) {
    this.m_control.showControlPoints();
  }
}","@Override public void onNodeMouseClick(NodeMouseClickEvent event){
  if (m_connector.getPointHandles().isVisible()) {
    if (event.isShiftKeyDown()) {
      this.m_control.addControlPoint(event.getX(),event.getY());
    }
 else {
      this.m_control.hideControlPoints();
    }
  }
 else   if (((Node<?>)event.getSource()).getParent() == m_connector.getGroup()) {
    this.m_control.showControlPoints();
  }
}",0.8097281831187411
170463,"private void init(){
  if (m_connector.m_HandlerRegistrationManager != null) {
    m_connector.m_HandlerRegistrationManager.removeHandler();
  }
  m_connector.m_HandlerRegistrationManager=new HandlerRegistrationManager();
  m_connector.m_HandlerRegistrationManager.register(m_connector.getLine().addNodeMouseClickHandler(this));
  m_connector.m_HandlerRegistrationManager.register(m_connector.getLine().addNodeMouseDoubleClickHandler(this));
  m_connector.m_HandlerRegistrationManager.register(m_connector.getHead().addNodeMouseClickHandler(this));
  m_connector.m_HandlerRegistrationManager.register(m_connector.getHead().addNodeMouseDoubleClickHandler(this));
  m_connector.m_HandlerRegistrationManager.register(m_connector.getTail().addNodeMouseClickHandler(this));
  m_connector.m_HandlerRegistrationManager.register(m_connector.getTail().addNodeMouseDoubleClickHandler(this));
}","private void init(){
  if (m_connector.m_HandlerRegistrationManager != null) {
    m_connector.m_HandlerRegistrationManager.removeHandler();
  }
  m_connector.m_HandlerRegistrationManager=new HandlerRegistrationManager();
  m_connector.m_HandlerRegistrationManager.register(m_connector.getLine().addNodeMouseClickHandler(this));
  m_connector.m_HandlerRegistrationManager.register(m_connector.getHead().addNodeMouseClickHandler(this));
  m_connector.m_HandlerRegistrationManager.register(m_connector.getTail().addNodeMouseClickHandler(this));
}",0.611072179397337
170464,"@Override public void onNodeMouseDoubleClick(final NodeMouseDoubleClickEvent event){
  WiresConnectorControlImpl.this.destroyControlPoint(event.getSource());
}","@Override public void onNodeMouseDoubleClick(final NodeMouseDoubleClickEvent event){
  if (m_connector.getPointHandles().isVisible()) {
    WiresConnectorControlImpl.this.destroyControlPoint(event.getSource());
  }
}",0.848
170465,"private int getIndexForSelectedSegment(final int mouseX,final int mouseY,final Point2DArray oldPoints){
  NFastStringMap<Integer> colorMap=new NFastStringMap<Integer>();
  AbstractDirectionalMultiPointShape<?> line=m_connector.getLine();
  ScratchPad scratch=line.getScratchPad();
  scratch.clear();
  PathPartList path=line.getPathPartList();
  int pointsIndex=1;
  String color=MagnetManager.m_c_rotor.next();
  colorMap.put(color,pointsIndex);
  Context2D ctx=scratch.getContext();
  double strokeWidth=line.getStrokeWidth();
  ctx.setStrokeWidth(strokeWidth);
  Point2D absolutePos=WiresUtils.getLocation(m_connector.getLine());
  double offsetX=absolutePos.getX();
  double offsetY=absolutePos.getY();
  Point2D pathStart=new Point2D(offsetX,offsetY);
  Point2D segmentStart=pathStart;
  for (int i=0; i < path.size(); i++) {
    PathPartEntryJSO entry=path.get(i);
    NFastDoubleArrayJSO points=entry.getPoints();
switch (entry.getCommand()) {
case PathPartEntryJSO.MOVETO_ABSOLUTE:
{
        double x0=points.get(0) + offsetX;
        double y0=points.get(1) + offsetY;
        Point2D m=new Point2D(x0,y0);
        if (i == 0) {
          pathStart=m;
        }
        segmentStart=m;
        break;
      }
case PathPartEntryJSO.LINETO_ABSOLUTE:
{
      points=entry.getPoints();
      double x0=points.get(0) + offsetX;
      double y0=points.get(1) + offsetY;
      Point2D end=new Point2D(x0,y0);
      if (oldPoints.get(pointsIndex).equals(segmentStart)) {
        pointsIndex++;
        color=MagnetManager.m_c_rotor.next();
        colorMap.put(color,pointsIndex);
      }
      ctx.setStrokeColor(color);
      ctx.beginPath();
      ctx.moveTo(segmentStart.getX(),segmentStart.getY());
      ctx.lineTo(x0,y0);
      ctx.stroke();
      segmentStart=end;
      break;
    }
case PathPartEntryJSO.CLOSE_PATH_PART:
{
    double x0=pathStart.getX() + offsetX;
    double y0=pathStart.getY() + offsetY;
    Point2D end=new Point2D(x0,y0);
    if (oldPoints.get(pointsIndex).equals(segmentStart)) {
      pointsIndex++;
      color=MagnetManager.m_c_rotor.next();
      colorMap.put(color,pointsIndex);
    }
    ctx.setStrokeColor(color);
    ctx.beginPath();
    ctx.moveTo(segmentStart.getX(),segmentStart.getY());
    ctx.lineTo(x0,y0);
    ctx.stroke();
    segmentStart=end;
    break;
  }
case PathPartEntryJSO.CANVAS_ARCTO_ABSOLUTE:
{
  points=entry.getPoints();
  double x0=points.get(0) + offsetX;
  double y0=points.get(1) + offsetY;
  Point2D p0=new Point2D(x0,y0);
  double x1=points.get(2) + offsetX;
  double y1=points.get(3) + offsetY;
  double r=points.get(4);
  Point2D p1=new Point2D(x1,y1);
  Point2D end=p1;
  if (p0.equals(oldPoints.get(pointsIndex))) {
    pointsIndex++;
    color=MagnetManager.m_c_rotor.next();
    colorMap.put(color,pointsIndex);
  }
  ctx.setStrokeColor(color);
  ctx.beginPath();
  ctx.moveTo(segmentStart.getX(),segmentStart.getY());
  ctx.arcTo(x0,y0,x1,y1,r);
  ctx.stroke();
  segmentStart=end;
  break;
}
}
}
BoundingBox box=m_connector.getLine().getBoundingBox();
int sx=(int)(box.getX() - strokeWidth - offsetX);
int sy=(int)(box.getY() - strokeWidth - offsetY);
ImageData backing=ctx.getImageData(sx,sy,(int)(box.getWidth() + strokeWidth + strokeWidth),(int)(box.getHeight() + strokeWidth + strokeWidth));
color=BackingColorMapUtils.findColorAtPoint(backing,mouseX - sx,mouseY - sy);
pointsIndex=colorMap.get(color);
return pointsIndex;
}","private int getIndexForSelectedSegment(final int mouseX,final int mouseY,final Point2DArray oldPoints){
  NFastStringMap<Integer> colorMap=new NFastStringMap<Integer>();
  AbstractDirectionalMultiPointShape<?> line=m_connector.getLine();
  ScratchPad scratch=line.getScratchPad();
  scratch.clear();
  PathPartList path=line.getPathPartList();
  int pointsIndex=1;
  String color=MagnetManager.m_c_rotor.next();
  colorMap.put(color,pointsIndex);
  Context2D ctx=scratch.getContext();
  double strokeWidth=line.getStrokeWidth();
  ctx.setStrokeWidth(strokeWidth);
  Point2D absolutePos=WiresUtils.getLocation(m_connector.getLine());
  double offsetX=absolutePos.getX();
  double offsetY=absolutePos.getY();
  Point2D pathStart=new Point2D(offsetX,offsetY);
  Point2D segmentStart=pathStart;
  for (int i=0; i < path.size(); i++) {
    PathPartEntryJSO entry=path.get(i);
    NFastDoubleArrayJSO points=entry.getPoints();
switch (entry.getCommand()) {
case PathPartEntryJSO.MOVETO_ABSOLUTE:
{
        double x0=points.get(0) + offsetX;
        double y0=points.get(1) + offsetY;
        Point2D m=new Point2D(x0,y0);
        if (i == 0) {
          pathStart=m;
        }
        segmentStart=m;
        break;
      }
case PathPartEntryJSO.LINETO_ABSOLUTE:
{
      points=entry.getPoints();
      double x0=points.get(0) + offsetX;
      double y0=points.get(1) + offsetY;
      Point2D end=new Point2D(x0,y0);
      if (oldPoints.get(pointsIndex).equals(segmentStart)) {
        pointsIndex++;
        color=MagnetManager.m_c_rotor.next();
        colorMap.put(color,pointsIndex);
      }
      ctx.setStrokeColor(color);
      ctx.beginPath();
      ctx.moveTo(segmentStart.getX(),segmentStart.getY());
      ctx.lineTo(x0,y0);
      ctx.stroke();
      segmentStart=end;
      break;
    }
case PathPartEntryJSO.CLOSE_PATH_PART:
{
    double x0=pathStart.getX() + offsetX;
    double y0=pathStart.getY() + offsetY;
    Point2D end=new Point2D(x0,y0);
    if (oldPoints.get(pointsIndex).equals(segmentStart)) {
      pointsIndex++;
      color=MagnetManager.m_c_rotor.next();
      colorMap.put(color,pointsIndex);
    }
    ctx.setStrokeColor(color);
    ctx.beginPath();
    ctx.moveTo(segmentStart.getX(),segmentStart.getY());
    ctx.lineTo(x0,y0);
    ctx.stroke();
    segmentStart=end;
    break;
  }
case PathPartEntryJSO.CANVAS_ARCTO_ABSOLUTE:
{
  points=entry.getPoints();
  double x0=points.get(0) + offsetX;
  double y0=points.get(1) + offsetY;
  Point2D p0=new Point2D(x0,y0);
  double x1=points.get(2) + offsetX;
  double y1=points.get(3) + offsetY;
  double r=points.get(4);
  Point2D p1=new Point2D(x1,y1);
  Point2D end=p1;
  if (p0.equals(oldPoints.get(pointsIndex))) {
    pointsIndex++;
    color=MagnetManager.m_c_rotor.next();
    colorMap.put(color,pointsIndex);
  }
  ctx.setStrokeColor(color);
  ctx.beginPath();
  ctx.moveTo(segmentStart.getX(),segmentStart.getY());
  ctx.arcTo(x0,y0,x1,y1,r);
  ctx.stroke();
  segmentStart=end;
  break;
}
}
}
BoundingBox box=m_connector.getLine().getBoundingBox();
int sx=(int)(box.getX() - strokeWidth - offsetX);
int sy=(int)(box.getY() - strokeWidth - offsetY);
ImageData backing=ctx.getImageData(sx,sy,(int)(box.getWidth() + strokeWidth + strokeWidth),(int)(box.getHeight() + strokeWidth + strokeWidth));
color=BackingColorMapUtils.findColorAtPoint(backing,mouseX - sx,mouseY - sy);
return null != color ? colorMap.get(color) : -1;
}",0.991186839012926
170466,"private void switchVisibility(final boolean visible){
  if (null == parent) {
    return;
  }
  for (  WiresShape shape : m_wires_shape.getChildShapes()) {
    if (shape.getControls() == null) {
      continue;
    }
    if (visible) {
      shape.getControls().show();
    }
 else {
      shape.getControls().hide();
    }
  }
  if (visible) {
    m_ctrls.showOn(parent);
  }
 else {
    m_ctrls.hide();
  }
}","private void switchVisibility(final boolean visible){
  if (null == parent) {
    return;
  }
  if (!visible) {
    for (    WiresShape shape : m_wires_shape.getChildShapes()) {
      if (shape.getControls() == null) {
        continue;
      }
      shape.getControls().hide();
    }
  }
  if (visible) {
    m_ctrls.showOn(parent);
  }
 else {
    m_ctrls.hide();
  }
}",0.8629961587708067
170467,"@Override public void dragStart(final Context context){
  Point2D absShapeLoc=WiresUtils.getLocation(m_shape.getPath());
  BoundingBox box=m_shape.getPath().getBoundingBox();
  m_shapeStartX=absShapeLoc.getX();
  m_shapeStartY=absShapeLoc.getY();
  m_shapeStartCenterX=m_shapeStartX + (box.getWidth() / 2);
  m_shapeStartCenterY=m_shapeStartY + (box.getHeight() / 2);
  m_mouseStartX=context.getX();
  m_mouseStartY=context.getY();
  m_startDocked=false;
  m_parent=m_shape.getParent();
  m_picker=makeColorMapBackedPicker(m_layer.getChildShapes(),m_layer.getLayer().getScratchPad(),m_shape,m_shape.getDockingAcceptor().dockingAllowed(m_parent,m_shape),m_shape.getDockingAcceptor().getHotspotSize());
  if (m_parent != null && m_parent instanceof WiresShape) {
    if (m_shape.getDockedTo() == null) {
      highlightBody((WiresShape)m_parent);
      m_parentPart=new PickerPart((WiresShape)m_parent,PickerPart.ShapePart.BODY);
    }
 else {
      highlightBorder((WiresShape)m_parent);
      m_parentPart=m_picker.findShapeAt((int)m_shapeStartCenterX,(int)m_shapeStartCenterY);
      m_startDocked=true;
    }
    m_layer.getLayer().batch();
    m_layer.getLayer().getOverLayer().batch();
  }
}","@Override public void dragStart(final Context context){
  Point2D absShapeLoc=WiresUtils.getLocation(m_shape.getPath());
  BoundingBox box=m_shape.getPath().getBoundingBox();
  m_shapeStartX=absShapeLoc.getX();
  m_shapeStartY=absShapeLoc.getY();
  m_shapeStartCenterX=m_shapeStartX + (box.getWidth() / 2);
  m_shapeStartCenterY=m_shapeStartY + (box.getHeight() / 2);
  m_mouseStartX=context.getX();
  m_mouseStartY=context.getY();
  m_startDocked=false;
  m_parent=m_shape.getParent();
  m_picker=makeColorMapBackedPicker(m_layer,m_parent,m_shape);
  if (m_parent != null && m_parent instanceof WiresShape) {
    if (m_shape.getDockedTo() == null) {
      highlightBody((WiresShape)m_parent);
      m_parentPart=new PickerPart((WiresShape)m_parent,PickerPart.ShapePart.BODY);
    }
 else {
      highlightBorder((WiresShape)m_parent);
      m_parentPart=m_picker.findShapeAt((int)m_shapeStartCenterX,(int)m_shapeStartCenterY);
      m_startDocked=true;
    }
    m_layer.getLayer().batch();
    m_layer.getLayer().getOverLayer().batch();
  }
}",0.9271996426976328
170468,"@Override public boolean dragAdjust(final Point2D dxy){
  int x=0;
  int y=0;
  if (m_startDocked) {
    x=(int)m_shapeStartCenterX;
    y=(int)m_shapeStartCenterY;
  }
 else {
    x=(int)m_mouseStartX;
    y=(int)m_mouseStartY;
  }
  WiresContainer parent=null;
  x=(int)(x + dxy.getX());
  y=(int)(y + dxy.getY());
  PickerPart parentPart=m_picker.findShapeAt(x,y);
  if (parentPart != null) {
    parent=parentPart.getShape();
  }
  if (parent != m_parent || parentPart != m_parentPart) {
    boolean batch=false;
    if (m_parent != null && m_parent instanceof WiresShape) {
      if (m_parentPart != null && m_parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        restoreBody();
      }
 else       if (m_path != null) {
        m_path.removeFromParent();
        m_path=null;
        m_shape.setDockedTo(null);
        m_startDocked=false;
      }
      batch=true;
    }
    if (parent != null && parent instanceof WiresShape) {
      if (parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        if (parent.getContainmentAcceptor().containmentAllowed(parent,m_shape)) {
          highlightBody((WiresShape)parent);
        }
      }
 else       if (parent.getDockingAcceptor().dockingAllowed(parent,m_shape)) {
        highlightBorder((WiresShape)parent);
      }
 else {
        parentPart=null;
      }
      batch=true;
    }
    if (batch) {
      m_layer.getLayer().batch();
      m_layer.getLayer().getOverLayer().batch();
    }
  }
  m_parent=parent;
  m_parentPart=parentPart;
  if (m_path != null) {
    Point2D absLoc=WiresUtils.getLocation(m_parent.getGroup());
    Point2D intersection=Geometry.findIntersection((int)(x - absLoc.getX()),(int)(y - absLoc.getY()),((WiresShape)m_parent).getPath());
    if (intersection != null) {
      BoundingBox box=m_shape.getPath().getBoundingBox();
      double newX=absLoc.getX() + intersection.getX() - (box.getWidth() / 2);
      double newY=absLoc.getY() + intersection.getY() - (box.getHeight() / 2);
      dxy.setX(newX - m_shapeStartX).setY(newY - m_shapeStartY);
      return true;
    }
  }
  return false;
}","@Override public boolean dragAdjust(final Point2D dxy){
  int x=0;
  int y=0;
  if (m_startDocked) {
    x=(int)m_shapeStartCenterX;
    y=(int)m_shapeStartCenterY;
  }
 else {
    x=(int)m_mouseStartX;
    y=(int)m_mouseStartY;
  }
  WiresContainer parent=null;
  x=(int)(x + dxy.getX());
  y=(int)(y + dxy.getY());
  PickerPart parentPart=m_picker.findShapeAt(x,y);
  if (parentPart != null) {
    parent=parentPart.getShape();
  }
  if (parent != m_parent || parentPart != m_parentPart) {
    m_picker=makeColorMapBackedPicker(m_layer,parent,m_shape);
    parentPart=m_picker.findShapeAt(x,y);
    parent=null != parentPart ? parentPart.getShape() : null;
    boolean batch=false;
    if (m_parent != null && m_parent instanceof WiresShape) {
      if (m_parentPart != null && m_parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        restoreBody();
      }
 else       if (m_path != null) {
        m_path.removeFromParent();
        m_path=null;
        m_shape.setDockedTo(null);
        m_startDocked=false;
      }
      batch=true;
    }
    if (parent != null && parent instanceof WiresShape) {
      if (parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        if (parent.getContainmentAcceptor().containmentAllowed(parent,m_shape)) {
          highlightBody((WiresShape)parent);
        }
      }
 else       if (parent.getDockingAcceptor().dockingAllowed(parent,m_shape)) {
        highlightBorder((WiresShape)parent);
      }
 else {
        parentPart=null;
      }
      batch=true;
    }
    if (batch) {
      m_layer.getLayer().batch();
      m_layer.getLayer().getOverLayer().batch();
    }
  }
  m_parent=parent;
  m_parentPart=parentPart;
  if (m_path != null) {
    Point2D absLoc=WiresUtils.getLocation(m_parent.getGroup());
    Point2D intersection=Geometry.findIntersection((int)(x - absLoc.getX()),(int)(y - absLoc.getY()),((WiresShape)m_parent).getPath());
    if (intersection != null) {
      BoundingBox box=m_shape.getPath().getBoundingBox();
      double newX=absLoc.getX() + intersection.getX() - (box.getWidth() / 2);
      double newY=absLoc.getY() + intersection.getY() - (box.getHeight() / 2);
      dxy.setX(newX - m_shapeStartX).setY(newY - m_shapeStartY);
      return true;
    }
  }
  return false;
}",0.9616708744549002
170469,"protected ColorMapBackedPicker makeColorMapBackedPicker(NFastArrayList<WiresShape> children,ScratchPad scratchPad,WiresShape shape,boolean isDockingAllowed,int hotSpotSize){
  return new ColorMapBackedPicker(children,scratchPad,shape,isDockingAllowed,hotSpotSize);
}","protected ColorMapBackedPicker makeColorMapBackedPicker(final WiresLayer m_layer,final WiresContainer m_parent,final WiresShape m_shape){
  return makeColorMapBackedPicker(m_layer.getChildShapes(),m_layer.getLayer().getScratchPad(),m_shape,m_shape.getDockingAcceptor().dockingAllowed(m_parent,m_shape),m_shape.getDockingAcceptor().getHotspotSize());
}",0.3209076175040519
170470,"public final HandlerRegistration addWiresMoveHandler(final WiresMoveHandler handler){
  Objects.requireNonNull(handler);
  return m_manager.addHandler(WiresMoveEvent.TYPE,handler);
}","public final HandlerRegistration addWiresMoveHandler(final WiresMoveHandler handler){
  Objects.requireNonNull(handler);
  return m_events.addHandler(WiresMoveEvent.TYPE,handler);
}",0.9696969696969696
170471,"@Override public void onAttributesChanged(AttributesChangedEvent event){
  if (!WiresContainer.this.m_dragging && event.evaluate(XYWH_OP)) {
    m_manager.fireEvent(new WiresMoveEvent(WiresContainer.this,(int)getGroup().getX(),(int)getGroup().getY()));
  }
}","@Override public void onAttributesChanged(AttributesChangedEvent event){
  if (!WiresContainer.this.m_dragging && event.evaluate(XYWH_OP)) {
    m_events.fireEvent(new WiresMoveEvent(WiresContainer.this,(int)getGroup().getX(),(int)getGroup().getY()));
  }
}",0.974757281553398
170472,"public WiresContainer setDraggable(final boolean draggable){
  getGroup().setDraggable(draggable);
  return this;
}","public WiresContainer setDraggable(final boolean draggable){
  ensureHandlers();
  getGroup().setDraggable(draggable);
  return this;
}",0.92
170473,"WiresContainer(final IContainer<?,IPrimitive<?>> container,final HandlerManager m_manager,final HandlerRegistrationManager m_registrationManager,final IAttributesChangedBatcher attributesChangedBatcher){
  this.m_container=container;
  this.m_manager=null != m_manager ? m_manager : new HandlerManager(this);
  this.m_dragging=false;
  this.m_childShapes=new NFastArrayList<WiresShape>();
  this.m_registrationManager=m_registrationManager;
  this.attributesChangedBatcher=attributesChangedBatcher;
  init();
}","WiresContainer(final IContainer<?,IPrimitive<?>> container,final HandlerManager m_events,final HandlerRegistrationManager m_registrationManager,final IAttributesChangedBatcher attributesChangedBatcher){
  this.m_container=container;
  this.m_events=null != m_events ? m_events : new HandlerManager(this);
  this.m_dragging=false;
  this.m_drag_initialized=false;
  this.m_childShapes=new NFastArrayList<WiresShape>();
  this.m_registrationManager=m_registrationManager;
  this.attributesChangedBatcher=attributesChangedBatcher;
}",0.9085659287776708
170474,"@Override public void onNodeDragMove(final NodeDragMoveEvent event){
  WiresContainer.this.m_dragging=true;
  m_manager.fireEvent(new WiresDragMoveEvent(WiresContainer.this,event));
}","@Override public void onNodeDragMove(final NodeDragMoveEvent event){
  WiresContainer.this.m_dragging=true;
  m_events.fireEvent(new WiresDragMoveEvent(WiresContainer.this,event));
}",0.96986301369863
170475,"@Override public void onNodeDragStart(final NodeDragStartEvent event){
  WiresContainer.this.m_dragging=true;
  m_manager.fireEvent(new WiresDragStartEvent(WiresContainer.this,event));
}","@Override public void onNodeDragStart(final NodeDragStartEvent event){
  WiresContainer.this.m_dragging=true;
  m_events.fireEvent(new WiresDragStartEvent(WiresContainer.this,event));
}",0.9703504043126684
170476,"public final HandlerRegistration addWiresDragMoveHandler(final WiresDragMoveHandler dragHandler){
  Objects.requireNonNull(dragHandler);
  return m_manager.addHandler(WiresDragMoveEvent.TYPE,dragHandler);
}","public final HandlerRegistration addWiresDragMoveHandler(final WiresDragMoveHandler dragHandler){
  Objects.requireNonNull(dragHandler);
  return m_events.addHandler(WiresDragMoveEvent.TYPE,dragHandler);
}",0.9683698296836984
170477,"@Override public void onNodeDragEnd(final NodeDragEndEvent event){
  WiresContainer.this.m_dragging=false;
  m_manager.fireEvent(new WiresDragEndEvent(WiresContainer.this,event));
}","@Override public void onNodeDragEnd(final NodeDragEndEvent event){
  WiresContainer.this.m_dragging=false;
  m_events.fireEvent(new WiresDragEndEvent(WiresContainer.this,event));
}",0.969529085872576
170478,"public final HandlerRegistration addWiresDragEndHandler(final WiresDragEndHandler dragHandler){
  Objects.requireNonNull(dragHandler);
  return m_manager.addHandler(WiresDragEndEvent.TYPE,dragHandler);
}","public final HandlerRegistration addWiresDragEndHandler(final WiresDragEndHandler dragHandler){
  Objects.requireNonNull(dragHandler);
  return m_events.addHandler(WiresDragEndEvent.TYPE,dragHandler);
}",0.9679012345679012
170479,"public final HandlerRegistration addWiresDragStartHandler(final WiresDragStartHandler dragHandler){
  Objects.requireNonNull(dragHandler);
  return m_manager.addHandler(WiresDragStartEvent.TYPE,dragHandler);
}","public final HandlerRegistration addWiresDragStartHandler(final WiresDragStartHandler dragHandler){
  Objects.requireNonNull(dragHandler);
  return m_events.addHandler(WiresDragStartEvent.TYPE,dragHandler);
}",0.9688249400479616
170480,"protected HandlerManager getHandlerManager(){
  return m_manager;
}","protected HandlerManager getHandlerManager(){
  return m_events;
}",0.9172932330827068
170481,"@Override public void onNodeDragEnd(NodeDragEndEvent event){
  this.shapeControl.dragEnd(new WiresDragControlContext(event.getX(),event.getY(),event.getSource()));
}","@Override public void onNodeDragEnd(NodeDragEndEvent event){
  final boolean accepts=this.shapeControl.dragEnd(new WiresDragControlContext(event.getX(),event.getY(),event.getSource()));
  if (!accepts) {
    event.getDragContext().reset();
  }
}",0.8048780487804879
170482,void dragEnd(Context context);,boolean dragEnd(Context context);,0.8571428571428571
170483,"@Override public void dragEnd(final Context context){
  if (m_magnets != null) {
    m_magnets.hide();
  }
  m_shapesBacking=null;
  m_magnetsBacking=null;
  m_magnets=null;
  m_colorKey=null;
  m_shape_color_map.clear();
  m_magnet_color_map.clear();
}","@Override public boolean dragEnd(final Context context){
  if (m_magnets != null) {
    m_magnets.hide();
  }
  m_shapesBacking=null;
  m_magnetsBacking=null;
  m_magnets=null;
  m_colorKey=null;
  m_shape_color_map.clear();
  m_magnet_color_map.clear();
  return true;
}",0.950381679389313
170484,"@Override public void dragEnd(final Context context){
  m_connector.getGroup().setX(0).setY(0);
  Point2DArray points=m_connector.getLine().getPoint2DArray();
  IControlHandleList handles=m_connector.getPointHandles();
  for (int i=0, j=0; i < handles.size(); i++, j+=2) {
    Point2D p=points.get(i);
    p.setX(p.getX() + context.getX());
    p.setY(p.getY() + context.getY());
    IControlHandle h=handles.getHandle(i);
    IPrimitive<?> prim=h.getControl();
    prim.setX(m_startPoints.get(j) + context.getX());
    prim.setY(m_startPoints.get(j + 1) + context.getY());
  }
  m_connector.getLine().refresh();
  m_wiresManager.getLayer().getLayer().batch();
  m_startPoints=null;
}","@Override public boolean dragEnd(final Context context){
  m_connector.getGroup().setX(0).setY(0);
  Point2DArray points=m_connector.getLine().getPoint2DArray();
  IControlHandleList handles=m_connector.getPointHandles();
  for (int i=0, j=0; i < handles.size(); i++, j+=2) {
    Point2D p=points.get(i);
    p.setX(p.getX() + context.getX());
    p.setY(p.getY() + context.getY());
    IControlHandle h=handles.getHandle(i);
    IPrimitive<?> prim=h.getControl();
    prim.setX(m_startPoints.get(j) + context.getX());
    prim.setY(m_startPoints.get(j + 1) + context.getY());
  }
  m_connector.getLine().refresh();
  m_wiresManager.getLayer().getLayer().batch();
  m_startPoints=null;
  return true;
}",0.9812409812409812
170485,"protected void addShapeToParent(){
  Point2D absLoc=WiresUtils.getLocation(m_shape.getGroup());
  if (m_parent == null) {
    m_parent=m_layer;
  }
  if (m_path != null) {
    m_path.removeFromParent();
    m_layer.getLayer().getOverLayer().batch();
  }
  if (m_parentPart == null || m_parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
    if (m_parent.getContainmentAcceptor().acceptContainment(m_parent,m_shape)) {
      if (m_parent instanceof WiresShape) {
        restoreBody();
      }
      if (m_parent == m_layer) {
        m_parent.getLayoutHandler().add(m_shape,m_parent,absLoc);
      }
 else {
        final Point2D trgAbsOffset=WiresUtils.getLocation(m_parent.getGroup());
        final Point2D relativeLoc=new Point2D(absLoc.getX() - trgAbsOffset.getX(),absLoc.getY() - trgAbsOffset.getY());
        m_parent.getLayoutHandler().add(m_shape,m_parent,relativeLoc);
      }
      m_shape.setDockedTo(null);
      m_layer.getLayer().batch();
    }
  }
 else   if (m_parentPart != null && m_parentPart.getShapePart() != PickerPart.ShapePart.BODY && m_parent.getDockingAcceptor().acceptDocking(m_parent,m_shape)) {
    m_shape.removeFromParent();
    Point2D trgAbsOffset=WiresUtils.getLocation(m_parent.getContainer());
    m_shape.getGroup().setX(absLoc.getX() - trgAbsOffset.getX()).setY(absLoc.getY() - trgAbsOffset.getY());
    m_parent.add(m_shape);
    m_shape.setDockedTo(m_parent);
    m_layer.getLayer().batch();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  m_parent=null;
  m_parentPart=null;
  m_priorFill=null;
  m_priorFillChanged=false;
  m_priorFillGradient=null;
  m_picker=null;
}","protected boolean addShapeToParent(){
  Point2D absLoc=WiresUtils.getLocation(m_shape.getGroup());
  if (m_parent == null) {
    m_parent=m_layer;
  }
  if (m_path != null) {
    m_path.removeFromParent();
    m_layer.getLayer().getOverLayer().batch();
  }
  boolean accepted=true;
  if (m_parentPart == null || m_parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
    if (m_parent.getContainmentAcceptor().acceptContainment(m_parent,m_shape)) {
      if (m_parent instanceof WiresShape) {
        restoreBody();
      }
      if (m_parent == m_layer) {
        m_parent.getLayoutHandler().add(m_shape,m_parent,absLoc);
      }
 else {
        final Point2D trgAbsOffset=WiresUtils.getLocation(m_parent.getGroup());
        final Point2D relativeLoc=new Point2D(absLoc.getX() - trgAbsOffset.getX(),absLoc.getY() - trgAbsOffset.getY());
        m_parent.getLayoutHandler().add(m_shape,m_parent,relativeLoc);
      }
      m_shape.setDockedTo(null);
      m_layer.getLayer().batch();
    }
 else {
      accepted=false;
    }
  }
 else   if (m_parentPart != null && m_parentPart.getShapePart() != PickerPart.ShapePart.BODY && m_parent.getDockingAcceptor().acceptDocking(m_parent,m_shape)) {
    m_shape.removeFromParent();
    Point2D trgAbsOffset=WiresUtils.getLocation(m_parent.getContainer());
    m_shape.getGroup().setX(absLoc.getX() - trgAbsOffset.getX()).setY(absLoc.getY() - trgAbsOffset.getY());
    m_parent.add(m_shape);
    m_shape.setDockedTo(m_parent);
    m_layer.getLayer().batch();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  m_parent=null;
  m_parentPart=null;
  m_priorFill=null;
  m_priorFillChanged=false;
  m_priorFillGradient=null;
  m_picker=null;
  return accepted;
}",0.9730050430139424
170486,"@Override public boolean dragAdjust(final Point2D dxy){
  int x=0;
  int y=0;
  if (m_startDocked) {
    x=(int)m_shapeStartCenterX;
    y=(int)m_shapeStartCenterY;
  }
 else {
    x=(int)m_mouseStartX;
    y=(int)m_mouseStartY;
  }
  WiresContainer parent=null;
  x=(int)(x + dxy.getX());
  y=(int)(y + dxy.getY());
  PickerPart parentPart=m_picker.findShapeAt(x,y);
  if (parentPart != null) {
    parent=parentPart.getShape();
  }
  if (parent != m_parent || parentPart != m_parentPart) {
    m_picker=makeColorMapBackedPicker(m_layer,parent,m_shape);
    parentPart=m_picker.findShapeAt(x,y);
    parent=null != parentPart ? parentPart.getShape() : null;
    boolean batch=false;
    if (m_parent != null && m_parent instanceof WiresShape) {
      if (m_parentPart != null && m_parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        restoreBody();
      }
 else       if (m_path != null) {
        m_path.removeFromParent();
        m_path=null;
        m_shape.setDockedTo(null);
        m_startDocked=false;
      }
      batch=true;
    }
    if (parent != null && parent instanceof WiresShape) {
      if (parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        if (parent.getContainmentAcceptor().containmentAllowed(parent,m_shape)) {
          highlightBody((WiresShape)parent);
        }
      }
 else       if (parent.getDockingAcceptor().dockingAllowed(parent,m_shape)) {
        highlightBorder((WiresShape)parent);
      }
 else {
        parentPart=null;
      }
      batch=true;
    }
    if (batch) {
      m_layer.getLayer().batch();
      m_layer.getLayer().getOverLayer().batch();
    }
  }
  m_parent=parent;
  m_parentPart=parentPart;
  if (m_path != null) {
    Point2D absLoc=WiresUtils.getLocation(m_parent.getGroup());
    Point2D intersection=Geometry.findIntersection((int)(x - absLoc.getX()),(int)(y - absLoc.getY()),((WiresShape)m_parent).getPath());
    if (intersection != null) {
      BoundingBox box=m_shape.getPath().getBoundingBox();
      double newX=absLoc.getX() + intersection.getX() - (box.getWidth() / 2);
      double newY=absLoc.getY() + intersection.getY() - (box.getHeight() / 2);
      dxy.setX(newX - m_shapeStartX).setY(newY - m_shapeStartY);
      return true;
    }
  }
  return false;
}","@Override public boolean dragAdjust(final Point2D dxy){
  int x=0;
  int y=0;
  if (m_startDocked) {
    x=(int)m_shapeStartCenterX;
    y=(int)m_shapeStartCenterY;
  }
 else {
    x=(int)m_mouseStartX;
    y=(int)m_mouseStartY;
  }
  WiresContainer parent=null;
  x=(int)(x + dxy.getX());
  y=(int)(y + dxy.getY());
  PickerPart parentPart=m_picker.findShapeAt(x,y);
  if (parentPart != null) {
    parent=parentPart.getShape();
  }
  if (parent != m_parent || parentPart != m_parentPart) {
    m_picker=makeColorMapBackedPicker(m_layer,parent,m_shape);
    parentPart=m_picker.findShapeAt(x,y);
    parent=null != parentPart ? parentPart.getShape() : null;
    boolean batch=false;
    if (m_parent != null && m_parent instanceof WiresShape) {
      if (m_parentPart != null && m_parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        restoreBody();
      }
 else       if (m_path != null) {
        m_path.removeFromParent();
        m_path=null;
        m_shape.setDockedTo(null);
        m_startDocked=false;
      }
      batch=true;
    }
    if (parent != null && parent instanceof WiresShape) {
      if (parentPart.getShapePart() == PickerPart.ShapePart.BODY) {
        if (parent.getContainmentAcceptor().containmentAllowed(parent,m_shape)) {
          highlightBody((WiresShape)parent);
        }
      }
 else       if (parent.getDockingAcceptor().dockingAllowed(parent,m_shape)) {
        highlightBorder((WiresShape)parent);
      }
 else {
        parentPart=null;
      }
      batch=true;
    }
 else {
      m_layer.getContainmentAcceptor().containmentAllowed(m_layer,m_shape);
    }
    if (batch) {
      m_layer.getLayer().batch();
      m_layer.getLayer().getOverLayer().batch();
    }
  }
  m_parent=parent;
  m_parentPart=parentPart;
  if (m_path != null) {
    Point2D absLoc=WiresUtils.getLocation(m_parent.getGroup());
    Point2D intersection=Geometry.findIntersection((int)(x - absLoc.getX()),(int)(y - absLoc.getY()),((WiresShape)m_parent).getPath());
    if (intersection != null) {
      BoundingBox box=m_shape.getPath().getBoundingBox();
      double newX=absLoc.getX() + intersection.getX() - (box.getWidth() / 2);
      double newY=absLoc.getY() + intersection.getY() - (box.getHeight() / 2);
      dxy.setX(newX - m_shapeStartX).setY(newY - m_shapeStartY);
      return true;
    }
  }
  return false;
}",0.9804941482444732
170487,"@Override public void dragEnd(final Context context){
  addShapeToParent();
}","@Override public boolean dragEnd(final Context context){
  return addShapeToParent();
}",0.902439024390244
170488,"@Override public void dragEnd(final Context context){
  if (m_dockingAndContainmentControl != null) {
    m_dockingAndContainmentControl.dragEnd(context);
  }
  if (m_alignAndDistributeHandler != null) {
    m_alignAndDistributeHandler.dragEnd();
  }
}","@Override public boolean dragEnd(final Context context){
  boolean result=true;
  if (m_dockingAndContainmentControl != null) {
    result=m_dockingAndContainmentControl.dragEnd(context);
  }
  if (m_alignAndDistributeHandler != null) {
    m_alignAndDistributeHandler.dragEnd();
  }
  return result;
}",0.8953068592057761
170489,"public Group add(IPrimitive<?> child,Layout layout,double dx,double dy){
  if (null == child.getID()) {
    child.setID(UUID.uuid());
  }
  layout_keys.add(child.getID());
  layout_values.add(layout);
  layout_x.add(dx);
  layout_y.add(dy);
  Group result=group.add(child);
  result.moveToTop();
  doPositionChild(result);
  return result;
}","public WiresLayoutContainer add(final IPrimitive<?> child,final LayoutContainer.Layout layout,final double dx,final double dy){
  if (null == child.getID()) {
    child.setID(UUID.uuid());
  }
  layout_keys.add(child.getID());
  layout_values.add(layout);
  layout_x.add(dx);
  layout_y.add(dy);
  Group result=group.add(child);
  result.moveToTop();
  doPositionChild(result);
  return this;
}",0.8843537414965986
170490,"public void setY(final double y){
  group.getAttributes().setY(y);
}","public WiresLayoutContainer setY(final double y){
  group.getAttributes().setY(y);
  return this;
}",0.7904191616766467
170491,"public WiresLayoutContainer move(String id,double dx,double dy){
  final int index=layout_keys.toList().indexOf(id);
  layout_x.set(index,dx);
  layout_y.set(index,dy);
  return this;
}","public WiresLayoutContainer move(final IPrimitive<?> child,final double dx,final double dy){
  final int index=layout_keys.toList().indexOf(child.getID());
  layout_x.set(index,dx);
  layout_y.set(index,dy);
  return this;
}",0.8459657701711492
170492,"public void setX(final double x){
  group.getAttributes().setX(x);
}","public WiresLayoutContainer setX(final double x){
  group.getAttributes().setX(x);
  return this;
}",0.7904191616766467
170493,"public WiresLayoutContainer(){
  this.group=new Group().setDraggable(false);
  this.layout_keys=new NFastArrayList<String>();
  this.layout_values=new NFastArrayList<Layout>();
  this.layout_x=new NFastArrayList<Double>();
  this.layout_y=new NFastArrayList<Double>();
  init();
}","public WiresLayoutContainer(){
  this.group=new Group().setDraggable(false);
  this.layout_keys=new NFastArrayList<String>();
  this.layout_values=new NFastArrayList<LayoutContainer.Layout>();
  this.layout_x=new NFastArrayList<Double>();
  this.layout_y=new NFastArrayList<Double>();
  init();
}",0.9722222222222222
170494,"public void setHeight(final double height){
  group.getAttributes().setHeight(height);
}","public WiresLayoutContainer setHeight(final double height){
  group.getAttributes().setHeight(height);
  return this;
}",0.8309178743961353
170495,"public void setWidth(final double width){
  group.getAttributes().setWidth(width);
}","public WiresLayoutContainer setWidth(final double width){
  group.getAttributes().setWidth(width);
  return this;
}",0.8241206030150754
170496,"public Group remove(IPrimitive<?> child){
  Group result=group.remove(child);
  final Layout layout=getLayout(child.getID());
  if (null != layout) {
    layout_keys.remove(child.getID());
    layout_values.remove(layout);
  }
  return result;
}","public WiresLayoutContainer remove(final IPrimitive<?> child){
  final LayoutContainer.Layout layout=getLayout(child.getID());
  if (null != layout) {
    layout_keys.remove(child.getID());
    layout_values.remove(layout);
  }
  group.remove(child);
  return this;
}",0.71484375
170497,"private Layout getLayout(final String key){
  final int index=layout_keys.toList().indexOf(key);
  return index > -1 ? layout_values.get(index) : null;
}","private LayoutContainer.Layout getLayout(final String key){
  final int index=layout_keys.toList().indexOf(key);
  return index > -1 ? layout_values.get(index) : null;
}",0.9503105590062112
170498,"private void doPositionChild(final IPrimitive<?> child){
  final int index=layout_keys.toList().indexOf(child.getID());
  final Layout childLayout=index > -1 ? layout_values.get(index) : null;
  if (null != childLayout) {
    LayoutBuilder builder=null;
switch (childLayout) {
case CENTER:
      builder=CENTER_LAYOUT;
    break;
case TOP:
  builder=TOP_LAYOUT;
break;
case LEFT:
builder=LEFT_LAYOUT;
break;
case BOTTOM:
builder=BOTTOM_LAYOUT;
break;
case RIGHT:
builder=RIGHT_LAYOUT;
break;
}
if (null != builder) {
builder.layoutIt(child);
child.setX(child.getX() + layout_x.get(index));
child.setY(child.getY() + layout_y.get(index));
}
}
}","private void doPositionChild(final IPrimitive<?> child){
  final int index=layout_keys.toList().indexOf(child.getID());
  final LayoutContainer.Layout childLayout=index > -1 ? layout_values.get(index) : null;
  if (null != childLayout) {
    LayoutBuilder builder=null;
switch (childLayout) {
case CENTER:
      builder=CENTER_LAYOUT;
    break;
case TOP:
  builder=TOP_LAYOUT;
break;
case LEFT:
builder=LEFT_LAYOUT;
break;
case BOTTOM:
builder=BOTTOM_LAYOUT;
break;
case RIGHT:
builder=RIGHT_LAYOUT;
break;
}
if (null != builder) {
builder.layoutIt(child);
child.setX(child.getX() + layout_x.get(index));
child.setY(child.getY() + layout_y.get(index));
}
}
}",0.9877112135176652
170499,"Group getGroup(){
  return group;
}","public Group getGroup(){
  return group;
}",0.9090909090909092
170500,"@Override public void layoutIt(final IPrimitive<?> child){
  final double y=getHeight() / 2;
  final BoundingBox bb=child.getBoundingBox();
  final double bbw=bb.getWidth();
  final double bbh=bb.getHeight();
  child.setX(getWidth() - bbw);
  child.setY(y - (bbh / 2));
}","@Override public void layoutIt(final IPrimitive<?> child){
  final double y=getHeight() / 2;
  final BoundingBox bb=child.getBoundingBox();
  final double bbw=bb.getWidth();
  child.setX(getWidth() - (bbw / 2));
  child.setY(y);
}",0.8942115768463074
170501,"public WiresShape createShape(final MultiPath path){
  Group group=new Group();
  group.add(path);
  group.setEventPropagationMode(EventPropagationMode.FIRST_ANCESTOR);
  WiresShape shape=new WiresShape(path,group,this);
  registerShape(shape);
  return shape;
}","public WiresShape createShape(final MultiPath path){
  WiresShape shape=new WiresShape(path,new WiresLayoutContainer(),this);
  return registerShape(shape);
}",0.6095238095238096
170502,"public WiresShape registerShape(final WiresShape shape){
  final Group group=shape.getGroup();
  final MultiPath path=shape.getPath();
  path.setDraggable(true);
  shape.setContainmentAcceptor(m_containmentAcceptor);
  m_shapesMap.put(shape.getGroup().uuid(),shape);
  WiresShapeDragHandler handler=new WiresShapeDragHandler(shape,this);
  group.addNodeMouseDownHandler(handler);
  group.addNodeMouseUpHandler(handler);
  group.addNodeDragStartHandler(handler);
  group.addNodeDragMoveHandler(handler);
  group.addNodeDragEndHandler(handler);
  createMagnets(shape);
  getLayer().add(shape);
  addToIndex(shape);
  return shape;
}","public WiresShape registerShape(final WiresShape shape){
  final Group group=shape.getGroup();
  final MultiPath path=shape.getPath();
  shape.setContainmentAcceptor(m_containmentAcceptor);
  m_shapesMap.put(shape.getGroup().uuid(),shape);
  WiresShapeDragHandler handler=new WiresShapeDragHandler(shape,this);
  group.addNodeMouseDownHandler(handler);
  group.addNodeMouseUpHandler(handler);
  group.addNodeDragStartHandler(handler);
  group.addNodeDragMoveHandler(handler);
  group.addNodeDragEndHandler(handler);
  getLayer().add(shape);
  addToIndex(shape);
  return shape;
}",0.957816377171216
170503,"public WiresShape createShape(final MultiPath path){
  Group group=new Group();
  group.add(path);
  group.setDraggable(true);
  group.setEventPropagationMode(EventPropagationMode.FIRST_ANCESTOR);
  WiresShape shape=new WiresShape(path,group,this);
  registerShape(shape);
  return shape;
}","public WiresShape createShape(final MultiPath path){
  Group group=new Group();
  group.add(path);
  group.setEventPropagationMode(EventPropagationMode.FIRST_ANCESTOR);
  WiresShape shape=new WiresShape(path,group,this);
  registerShape(shape);
  return shape;
}",0.9492753623188406
170504,"public final boolean addPlugin(final ILienzoPlugin plugin){
  if (null == plugin) {
    return false;
  }
  if (GWT.isScript()) {
    log(""String_Node_Str"" + plugin.getNameSpace());
  }
 else {
    GWT.log(""String_Node_Str"" + plugin.getNameSpace());
  }
  if (m_plugins.contains(plugin)) {
    error(""String_Node_Str"" + plugin.getNameSpace() + ""String_Node_Str"");
    return false;
  }
  for (  ILienzoPlugin p : m_plugins) {
    if (plugin.getNameSpace().equals(p)) {
      error(""String_Node_Str"" + plugin.getNameSpace() + ""String_Node_Str"");
      return false;
    }
  }
  m_plugins.add(plugin);
  return true;
}","public final boolean addPlugin(final ILienzoPlugin plugin){
  if (null == plugin) {
    return false;
  }
  if (GWT.isScript()) {
    log(""String_Node_Str"" + plugin.getNameSpace());
  }
 else {
    GWT.log(""String_Node_Str"" + plugin.getNameSpace());
  }
  if (m_plugins.contains(plugin)) {
    error(""String_Node_Str"" + plugin.getNameSpace() + ""String_Node_Str"");
    return false;
  }
  for (  ILienzoPlugin p : m_plugins) {
    if (plugin.getNameSpace().equals(p.getNameSpace())) {
      error(""String_Node_Str"" + plugin.getNameSpace() + ""String_Node_Str"");
      return false;
    }
  }
  m_plugins.add(plugin);
  return true;
}",0.9879711307137128
170505,"protected String toValidURL(String url){
  if (url.startsWith(""String_Node_Str"")) {
    return url;
  }
  if ((null == url) || ((url=url.trim()).isEmpty()) || (url.startsWith(""String_Node_Str""))) {
    throw new NullPointerException(""String_Node_Str"");
  }
  url=UriUtils.fromString(url).asString();
  if ((null == url) || ((url=url.trim()).isEmpty()) || (url.startsWith(""String_Node_Str""))) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return url;
}","protected String toValidURL(String url){
  if ((null == url) || ((url=url.trim()).isEmpty()) || (url.startsWith(""String_Node_Str""))) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (url.startsWith(""String_Node_Str"")) {
    return url;
  }
  url=UriUtils.fromString(url).asString();
  if ((null == url) || ((url=url.trim()).isEmpty()) || (url.startsWith(""String_Node_Str""))) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return url;
}",0.8653846153846154
170506,"@Override public void validate(final JSONValue jval,final ValidationContext ctx) throws ValidationException {
  if (null == jval) {
    ctx.addBadTypeError(""String_Node_Str"");
    return;
  }
  final JSONNumber s=jval.isNumber();
  if (null == s) {
    ctx.addBadTypeError(""String_Node_Str"");
  }
  if (false == isNumber(s.doubleValue())) {
    ctx.addBadTypeError(""String_Node_Str"");
  }
}","@Override public void validate(final JSONValue jval,final ValidationContext ctx) throws ValidationException {
  if (null == jval) {
    ctx.addBadTypeError(""String_Node_Str"");
    return;
  }
  final JSONNumber s=jval.isNumber();
  if (null == s) {
    ctx.addBadTypeError(""String_Node_Str"");
    return;
  }
  if (false == isNumber(s.doubleValue())) {
    ctx.addBadTypeError(""String_Node_Str"");
  }
}",0.9848484848484848
170507,"/** 
 * Returns the NESW quadrant the point is in.  The delta from the center NE x > 0, y < 0 SE x > 0, y >= 0 SW x <= 0, y >= 0 NW x <= 0, y < 0
 * @param x0
 * @param y0
 * @param c
 * @return
 */
public static Direction getQuadrant(double x0,double y0,Point2D c){
  Direction d;
  if (x0 > c.getX() && y0 < c.getY()) {
    d=Direction.NORTH_EAST;
  }
 else   if (x0 > c.getX() && y0 >= c.getY()) {
    d=Direction.SOUTH_EAST;
    ;
  }
 else   if (x0 <= c.getX() && y0 >= c.getY()) {
    d=Direction.SOUTH_WEST;
    ;
  }
 else {
    d=Direction.NORTH_WEST;
  }
  return d;
}","/** 
 * Returns the NESW quadrant the point is in.  The delta from the center NE x > 0, y < 0 SE x > 0, y >= 0 SW x <= 0, y >= 0 NW x <= 0, y < 0
 * @param x0
 * @param y0
 * @param c
 * @return
 */
public static Direction getQuadrant(double x0,double y0,Point2D c){
  Direction d;
  if (x0 > c.getX() && y0 < c.getY()) {
    d=Direction.NORTH_EAST;
  }
 else   if (x0 > c.getX() && y0 >= c.getY()) {
    d=Direction.SOUTH_EAST;
  }
 else   if (x0 <= c.getX() && y0 >= c.getY()) {
    d=Direction.SOUTH_WEST;
  }
 else {
    d=Direction.NORTH_WEST;
  }
  return d;
}",0.9895104895104896
170508,"public void removeLeftAlignIndexEntry(AlignAndDistributeHandler shape,double left){
  addAlignIndexEntry(m_leftIndex,shape,left);
}","public void removeLeftAlignIndexEntry(AlignAndDistributeHandler shape,double left){
  removeAlignIndexEntry(m_leftIndex,shape,left);
}",0.9660377358490566
170509,"/** 
 * use location,   {@link android.Manifest.permission#ACCESS_FINE_LOCATION},  {@link android.Manifest.permission#ACCESS_COARSE_LOCATION}
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkLocation(Activity activity) throws Exception {
  LocationManager locationManager=(LocationManager)activity.getSystemService(LOCATION_SERVICE);
  Location location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
  if (location == null) {
    return false;
  }
 else {
    if ((PermissionsPageManager.isUnderMHasPermissionRequestManufacturer() && PermissionsPageManager.BuildVersionUnderMAboveL()) || PermissionsPageManager.isXIAOMI()) {
      double latitude=location.getLatitude();
    }
    return true;
  }
}","/** 
 * use location,   {@link android.Manifest.permission#ACCESS_FINE_LOCATION},  {@link android.Manifest.permission#ACCESS_COARSE_LOCATION}
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkLocation(Activity activity) throws Exception {
  LocationManager locationManager=(LocationManager)activity.getSystemService(LOCATION_SERVICE);
  Location location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
  if (location != null) {
    if (PermissionsPageManager.isForceManufacturer()) {
      double latitude=location.getLatitude();
      Log.e(TAG,""String_Node_Str"" + latitude);
    }
    return true;
  }
 else {
    return false;
  }
}",0.6994609164420486
170510,"/** 
 * read call log,   {@link android.Manifest.permission#READ_CALL_LOG}
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkReadCallLog(Activity activity) throws Exception {
  Cursor cursor=activity.getContentResolver().query(Uri.parse(""String_Node_Str""),null,null,null,null);
  if (cursor != null) {
    if ((PermissionsPageManager.isUnderMHasPermissionRequestManufacturer() && PermissionsPageManager.BuildVersionUnderMAboveL()) || PermissionsPageManager.isXIAOMI()) {
      if (isNumberIndexInfoIsNull(cursor,cursor.getColumnIndex(CallLog.Calls.NUMBER))) {
        cursor.close();
        return false;
      }
    }
    cursor.close();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * read call log,   {@link android.Manifest.permission#READ_CALL_LOG}
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkReadCallLog(Activity activity) throws Exception {
  Cursor cursor=activity.getContentResolver().query(Uri.parse(""String_Node_Str""),null,null,null,null);
  if (cursor != null) {
    if (PermissionsPageManager.isForceManufacturer()) {
      if (isNumberIndexInfoIsNull(cursor,cursor.getColumnIndex(CallLog.Calls.NUMBER))) {
        cursor.close();
        return false;
      }
    }
    cursor.close();
    return true;
  }
 else {
    return false;
  }
}",0.8940832724616509
170511,"/** 
 * read contacts,   {@link android.Manifest.permission#READ_CONTACTS}
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkReadContacts(Activity activity) throws Exception {
  Cursor cursor=activity.getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,null,null,null);
  if (cursor != null) {
    if ((PermissionsPageManager.isUnderMHasPermissionRequestManufacturer() && PermissionsPageManager.BuildVersionUnderMAboveL()) || PermissionsPageManager.isXIAOMI()) {
      if (isNumberIndexInfoIsNull(cursor,cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER))) {
        cursor.close();
        return false;
      }
    }
    cursor.close();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * read contacts,   {@link android.Manifest.permission#READ_CONTACTS}
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkReadContacts(Activity activity) throws Exception {
  Cursor cursor=activity.getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,null,null,null);
  if (cursor != null) {
    if (PermissionsPageManager.isForceManufacturer()) {
      if (isNumberIndexInfoIsNull(cursor,cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER))) {
        cursor.close();
        return false;
      }
    }
    cursor.close();
    return true;
  }
 else {
    return false;
  }
}",0.9010238907849828
170512,"/** 
 * read sms,   {@link android.Manifest.permission#READ_SMS}in MEIZU 5.0~6.0, just according normal phone request in XIAOMI 6.0~, need force judge in XIAOMI 5.0~6.0, not test!!!
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkReadSms(Activity activity) throws Exception {
  Cursor cursor=activity.getContentResolver().query(Uri.parse(""String_Node_Str""),null,null,null,null);
  if (cursor != null) {
    if ((PermissionsPageManager.isUnderMHasPermissionRequestManufacturer() && PermissionsPageManager.BuildVersionUnderMAboveL()) || PermissionsPageManager.isXIAOMI()) {
      if (isNumberIndexInfoIsNull(cursor,cursor.getColumnIndex(Telephony.Sms.DATE))) {
        cursor.close();
        return false;
      }
    }
    cursor.close();
    return true;
  }
 else {
    return false;
  }
}","/** 
 * read sms,   {@link android.Manifest.permission#READ_SMS}in MEIZU 5.0~6.0, just according normal phone request in XIAOMI 6.0~, need force judge in XIAOMI 5.0~6.0, not test!!!
 * @param activity
 * @return true if success
 * @throws Exception
 */
private static boolean checkReadSms(Activity activity) throws Exception {
  Cursor cursor=activity.getContentResolver().query(Uri.parse(""String_Node_Str""),null,null,null,null);
  if (cursor != null) {
    if (PermissionsPageManager.isForceManufacturer()) {
      if (isNumberIndexInfoIsNull(cursor,cursor.getColumnIndex(Telephony.Sms.DATE))) {
        cursor.close();
        return false;
      }
    }
    cursor.close();
    return true;
  }
 else {
    return false;
  }
}",0.9077021005728836
170513,"public static void show(String content){
  if (toast == null) {
    toast=Toast.makeText(App.getAppContetxt(),content,Toast.LENGTH_SHORT);
  }
 else {
    toast.setText(content);
  }
  toast.show();
}","public static void show(String content){
  if (toast == null) {
    toast=Toast.makeText(App.getAppContext(),content,Toast.LENGTH_SHORT);
  }
 else {
    toast.setText(content);
  }
  toast.show();
}",0.9974937343358397
170514,"private void parsePageData(String page){
  Observable.just(page).map(s -> {
    ArrayList<Collection> collections=new ArrayList<>();
    try {
      Document doc=Jsoup.parse(s,AppConfig.GITHUB_BASE_URL);
      Elements elements=doc.getElementsByClass(""String_Node_Str"");
      for (      Element element : elements) {
        Element titleElement=element.select(""String_Node_Str"").first();
        Element descElement=element.select(""String_Node_Str"").first();
        String id=titleElement.attr(""String_Node_Str"");
        id=id.substring(id.lastIndexOf(""String_Node_Str"") + 1);
        String title=titleElement.textNodes().get(0).toString();
        String desc=descElement.textNodes().get(0).toString();
        Collection collection=new Collection(id,title,desc);
        collections.add(collection);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return collections;
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(results -> {
    if (mView == null)     return;
    if (results.size() != 0) {
      collections=results;
      mView.hideLoading();
      mView.showCollections(collections);
    }
 else {
      String errorTip=String.format(getString(R.string.github_page_parse_error),getString(R.string.repo_collections));
      mView.showLoadError(errorTip);
      mView.hideLoading();
    }
  }
);
}","private void parsePageData(String page){
  Observable.just(page).map(s -> {
    ArrayList<Collection> collections=new ArrayList<>();
    try {
      Document doc=Jsoup.parse(s,AppConfig.GITHUB_BASE_URL);
      Elements elements=doc.getElementsByClass(""String_Node_Str"");
      for (      Element element : elements) {
        Element titleElement=element.select(""String_Node_Str"").first();
        Element descElement=element.select(""String_Node_Str"").last();
        String id=titleElement.attr(""String_Node_Str"");
        id=id.substring(id.lastIndexOf(""String_Node_Str"") + 1);
        String title=titleElement.textNodes().get(0).toString();
        List<TextNode> descTextNodes=descElement.textNodes();
        int descIndex=descTextNodes.size() == 0 ? 0 : descTextNodes.size() - 1;
        String desc=descTextNodes.get(descIndex).toString().trim();
        Collection collection=new Collection(id,title,desc);
        collections.add(collection);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return collections;
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(results -> {
    if (mView == null)     return;
    if (results.size() != 0) {
      collections=results;
      mView.hideLoading();
      mView.showCollections(collections);
    }
 else {
      String errorTip=String.format(getString(R.string.github_page_parse_error),getString(R.string.repo_collections));
      mView.showLoadError(errorTip);
      mView.hideLoading();
    }
  }
);
}",0.9297036526533424
170515,"public ArrayList<String> getIssueUsersExceptMe(){
  if (timeline == null)   return null;
  ArrayList<String> users=new ArrayList<String>();
  for (  IssueEvent event : timeline) {
    if (!AppData.INSTANCE.getLoggedUser().getLogin().equals(event.getUser().getLogin()) && !users.contains(event.getUser().getLogin())) {
      users.add(event.getUser().getLogin());
    }
  }
  return users;
}","public ArrayList<String> getIssueUsersExceptMe(){
  if (timeline == null)   return null;
  ArrayList<String> users=new ArrayList<String>();
  for (  IssueEvent event : timeline) {
    String userLoginId=event.getUser() == null ? event.getActor().getLogin() : event.getUser().getLogin();
    if (!AppData.INSTANCE.getLoggedUser().getLogin().equals(userLoginId) && !users.contains(userLoginId)) {
      users.add(userLoginId);
    }
  }
  return users;
}",0.7410926365795725
170516,"@NonNull @GET(""String_Node_Str"") Observable<Response<ResponseBody>> getTrendingRepos(@Header(""String_Node_Str"") boolean forceNetWork,@Path(""String_Node_Str"") String language,@Query(""String_Node_Str"") String since);","@NonNull @GET(""String_Node_Str"") Observable<Response<ResponseBody>> getTrendingRepos(@Header(""String_Node_Str"") boolean forceNetWork,@Path(value=""String_Node_Str"",encoded=true) String language,@Query(""String_Node_Str"") String since);",0.8053691275167785
170517,"@Override public ArrayList<TrendingLanguage> getLanguagesFromLocal(){
  List<MyTrendingLanguage> myLanguages=daoSession.getMyTrendingLanguageDao().queryBuilder().orderAsc(MyTrendingLanguageDao.Properties.Order).list();
  if (StringUtils.isBlankList(myLanguages)) {
    languages=JSONUtils.jsonToArrayList(getString(R.string.trending_languages),TrendingLanguage.class);
    languages.addAll(0,getFixedLanguages());
    languages=sortLanguages(languages);
  }
 else {
    languages=TrendingLanguage.generateFromDB(myLanguages);
    fixFixedLanguagesName(languages);
  }
  return languages;
}","@Override public ArrayList<TrendingLanguage> getLanguagesFromLocal(){
  List<MyTrendingLanguage> myLanguages=daoSession.getMyTrendingLanguageDao().queryBuilder().orderAsc(MyTrendingLanguageDao.Properties.Order).list();
  if (StringUtils.isBlankList(myLanguages)) {
    languages=JSONUtils.jsonToArrayList(getString(R.string.trending_languages),TrendingLanguage.class);
    languages.addAll(0,getFixedLanguages());
    languages=sortLanguages(languages);
  }
 else {
    languages=TrendingLanguage.generateFromDB(myLanguages);
    fixFixedLanguagesName(languages);
  }
  fixLanguagesSlug(languages);
  return languages;
}",0.9743589743589745
170518,"void setEventIcon(IssueEvent model){
switch (model.getType()) {
case reopened:
    eventIcon.setImageResource(R.drawable.ic_dot);
  eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.commit_file_added_color));
setEventIconPadding(8);
break;
case closed:
eventIcon.setImageResource(R.drawable.ic_block);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_red_800));
recoverEventIconPadding();
break;
case locked:
eventIcon.setImageResource(R.drawable.ic_lock);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.black_light));
recoverEventIconPadding();
break;
case unlocked:
eventIcon.setImageResource(R.drawable.ic_unlock);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.commit_file_added_color));
recoverEventIconPadding();
break;
case crossReferenced:
eventIcon.setImageResource(R.drawable.ic_quote);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case assigned:
case unassigned:
eventIcon.setImageResource(R.drawable.ic_menu_person);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case milestoned:
case demilestoned:
eventIcon.setImageResource(R.drawable.ic_milestone);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case commentDeleted:
eventIcon.setImageResource(R.drawable.ic_delete);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case labeled:
case unlabeled:
eventIcon.setImageResource(R.drawable.ic_label);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
default :
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.transparent));
break;
}
}","void setEventIcon(IssueEvent model){
switch (model.getType()) {
case reopened:
    eventIcon.setImageResource(R.drawable.ic_dot);
  eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.commit_file_added_color));
setEventIconPadding(8);
break;
case closed:
eventIcon.setImageResource(R.drawable.ic_block);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_red_800));
recoverEventIconPadding();
break;
case renamed:
eventIcon.setImageResource(R.drawable.ic_edit);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case locked:
eventIcon.setImageResource(R.drawable.ic_lock);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.black_light));
recoverEventIconPadding();
break;
case unlocked:
eventIcon.setImageResource(R.drawable.ic_unlock);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.commit_file_added_color));
recoverEventIconPadding();
break;
case crossReferenced:
eventIcon.setImageResource(R.drawable.ic_quote);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case assigned:
case unassigned:
eventIcon.setImageResource(R.drawable.ic_menu_person);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case milestoned:
case demilestoned:
eventIcon.setImageResource(R.drawable.ic_milestone);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case commentDeleted:
eventIcon.setImageResource(R.drawable.ic_delete);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
case labeled:
case unlabeled:
eventIcon.setImageResource(R.drawable.ic_label);
eventIcon.setImageTintList(ColorStateList.valueOf(context.getResources().getColor(R.color.white)));
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.material_grey_500));
recoverEventIconPadding();
break;
default :
eventIcon.setBackgroundColor(context.getResources().getColor(R.color.transparent));
break;
}
}",0.7112676056338029
170519,"void setDesc(IssueEvent model){
  SpannableStringBuilder text=new SpannableStringBuilder(model.getActor().getLogin());
  text.append(""String_Node_Str"");
  String info;
switch (model.getType()) {
case reopened:
    text.append(getString(R.string.issue_reopened));
  break;
case closed:
text.append(getString(R.string.issue_close));
break;
case locked:
text.append(getString(R.string.issue_locked_conversation));
break;
case unlocked:
text.append(getString(R.string.issue_unlocked_conversation));
break;
case crossReferenced:
if (model.getSource().getType() != null) {
info=String.format(getString(R.string.issue_referenced),model.getSource().getIssue().getTitle());
text.append(info);
}
break;
case assigned:
info=String.format(getString(R.string.issue_assigned),model.getAssignee().getLogin());
text.append(info);
break;
case unassigned:
text.append(getString(R.string.issue_unassigned));
break;
case milestoned:
info=String.format(getString(R.string.issue_added_to_milestone),model.getMilestone().getTitle());
text.append(info);
break;
case demilestoned:
info=String.format(getString(R.string.issue_removed_from_milestone),model.getMilestone().getTitle());
text.append(info);
break;
case commentDeleted:
text.append(getString(R.string.issue_delete_comment));
break;
case labeled:
info=String.format(getString(R.string.issue_add_label),""String_Node_Str"");
text.append(info);
break;
case unlabeled:
info=String.format(getString(R.string.issue_remove_label),""String_Node_Str"");
text.append(info);
break;
default :
break;
}
int labelPos=text.toString().indexOf(""String_Node_Str"");
Label label=model.getLabel();
if (label != null && labelPos >= 0) {
text.replace(labelPos,labelPos + 7,label.getName());
text.setSpan(new IssueLabelSpan(context,label),labelPos,labelPos + label.getName().length(),0);
}
String timeStr=StringUtils.getNewsTimeStr(context,model.getCreatedAt());
text.append(""String_Node_Str"").append(timeStr);
desc.setText(text);
}","void setDesc(IssueEvent model){
  SpannableStringBuilder text=new SpannableStringBuilder(model.getActor().getLogin());
  text.append(""String_Node_Str"");
  String info;
switch (model.getType()) {
case reopened:
    text.append(getString(R.string.issue_reopened));
  break;
case closed:
text.append(getString(R.string.issue_close));
break;
case renamed:
text.append(getString(R.string.issue_modified));
break;
case locked:
text.append(getString(R.string.issue_locked_conversation));
break;
case unlocked:
text.append(getString(R.string.issue_unlocked_conversation));
break;
case crossReferenced:
if (model.getSource().getType() != null) {
info=String.format(getString(R.string.issue_referenced),""String_Node_Str"" + model.getSource().getIssue().getTitle());
text.append(info);
}
break;
case assigned:
info=String.format(getString(R.string.issue_assigned),model.getAssignee().getLogin());
text.append(info);
break;
case unassigned:
text.append(getString(R.string.issue_unassigned));
break;
case milestoned:
info=String.format(getString(R.string.issue_added_to_milestone),model.getMilestone().getTitle());
text.append(info);
break;
case demilestoned:
info=String.format(getString(R.string.issue_removed_from_milestone),model.getMilestone().getTitle());
text.append(info);
break;
case commentDeleted:
text.append(getString(R.string.issue_delete_comment));
break;
case labeled:
info=String.format(getString(R.string.issue_add_label),""String_Node_Str"");
text.append(info);
break;
case unlabeled:
info=String.format(getString(R.string.issue_remove_label),""String_Node_Str"");
text.append(info);
break;
default :
break;
}
int labelPos=text.toString().indexOf(""String_Node_Str"");
Label label=model.getLabel();
if (label != null && labelPos >= 0) {
text.replace(labelPos,labelPos + 7,label.getName());
text.setSpan(new IssueLabelSpan(context,label),labelPos,labelPos + label.getName().length(),0);
}
String timeStr=StringUtils.getNewsTimeStr(context,model.getCreatedAt());
text.append(""String_Node_Str"").append(timeStr);
desc.setText(text);
}",0.9773185483870968
170520,"@Override public void onCreate(){
  super.onCreate();
  application=this;
  long startTime=System.currentTimeMillis();
  initLogger();
  Logger.t(TAG).i(""String_Node_Str"" + startTime);
  mAppComponent=DaggerAppComponent.builder().appModule(new AppModule(this)).build();
  NetHelper.INSTANCE.init(this);
  initBugly();
  startTime=System.currentTimeMillis();
  Logger.t(TAG).i(""String_Node_Str"" + (System.currentTimeMillis() - startTime));
}","@Override public void onCreate(){
  super.onCreate();
  application=this;
  long startTime=System.currentTimeMillis();
  AppUtils.updateAppLanguage(getApplicationContext());
  initLogger();
  Logger.t(TAG).i(""String_Node_Str"" + startTime);
  mAppComponent=DaggerAppComponent.builder().appModule(new AppModule(this)).build();
  NetHelper.INSTANCE.init(this);
  initBugly();
  startTime=System.currentTimeMillis();
  Logger.t(TAG).i(""String_Node_Str"" + (System.currentTimeMillis() - startTime));
}",0.9411764705882352
170521,"@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  setToolbarTitle(getString(R.string.settings));
  if (recreated) {
    rootLayout.post(new Runnable(){
      @Override public void run(){
        startAnimation();
      }
    }
);
    setResult(Activity.RESULT_OK);
  }
}","@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  setToolbarTitle(getString(R.string.settings));
  if (recreated) {
    rootLayout.post(new Runnable(){
      @Override public void run(){
        startAnimation();
      }
    }
);
    setResult(Activity.RESULT_OK);
    recreated=false;
  }
}",0.968421052631579
170522,"@Override protected void onSaveInstanceState(Bundle outState){
  finish();
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (recreated) {
    super.onSaveInstanceState(outState);
  }
 else {
    finish();
  }
}",0.6608695652173913
170523,"@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View fragmentView=inflater.inflate(getLayoutId(),container,false);
  unbinder=ButterKnife.bind(this,fragmentView);
  initFragment(savedInstanceState);
  if (mPresenter != null)   mPresenter.onViewInitialized();
  return fragmentView;
}","@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  AppUtils.updateAppLanguage(getActivity());
  View fragmentView=inflater.inflate(getLayoutId(),container,false);
  unbinder=ButterKnife.bind(this,fragmentView);
  initFragment(savedInstanceState);
  if (mPresenter != null)   mPresenter.onViewInitialized();
  return fragmentView;
}",0.9445129469790382
170524,"private static String generateDiffHtml(@NonNull String diffSource,@NonNull String backgroundColor,String skin,boolean wrap){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + skin + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ backgroundColor+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ backgroundColor+ ""String_Node_Str""+ ""String_Node_Str""+ (wrap ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ (wrap ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ parseDiffSource(diffSource,wrap)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}","private static String generateDiffHtml(@NonNull String diffSource,@NonNull String backgroundColor,String skin,boolean wrap){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + skin + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ backgroundColor+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ backgroundColor+ ""String_Node_Str""+ ""String_Node_Str""+ (wrap ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ (wrap ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ parseDiffSource(formatCode(diffSource),wrap)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.9924050632911392
170525,"@Override public void run(){
  isTransitionComplete=true;
  if (isWaitForTransition)   mView.showProfileInfo(user);
  isWaitForTransition=false;
  getProfileInfo();
  checkFollowingStatus();
}","@Override public void run(){
  if (mView == null)   return;
  isTransitionComplete=true;
  if (isWaitForTransition)   mView.showProfileInfo(user);
  isWaitForTransition=false;
  getProfileInfo();
  checkFollowingStatus();
}",0.9253012048192772
170526,"@Override public void onViewInitialized(){
  super.onViewInitialized();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      isTransitionComplete=true;
      if (isWaitForTransition)       mView.showProfileInfo(user);
      isWaitForTransition=false;
      getProfileInfo();
      checkFollowingStatus();
    }
  }
,500);
}","@Override public void onViewInitialized(){
  super.onViewInitialized();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (mView == null)       return;
      isTransitionComplete=true;
      if (isWaitForTransition)       mView.showProfileInfo(user);
      isWaitForTransition=false;
      getProfileInfo();
      checkFollowingStatus();
    }
  }
,500);
}",0.9476510067114094
170527,"@Inject public SearchPresenter(DaoSession daoSession){
  super(daoSession);
  createSearchModels();
}","@Inject public SearchPresenter(DaoSession daoSession){
  super(daoSession);
}",0.8651685393258427
170528,"@Override public void showCommitInfo(RepoCommitExt commitExt){
  showCommit(commitExt);
  changedFileCount.setText(String.valueOf(commitExt.getFiles().size()));
  addtionsCount.setText(String.valueOf(commitExt.getStats().getAdditions()));
  deletionsCount.setText(String.valueOf(commitExt.getStats().getDeletions()));
  if (first) {
    getSupportFragmentManager().beginTransaction().add(R.id.container,CommitFilesFragment.create(commitExt.getFiles())).commit();
    first=false;
  }
}","@Override public void showCommitInfo(RepoCommitExt commitExt){
  showCommit(commitExt);
  changedFileCount.setText(String.valueOf(commitExt.getFiles().size()));
  addtionsCount.setText(String.valueOf(commitExt.getStats().getAdditions()));
  deletionsCount.setText(String.valueOf(commitExt.getStats().getDeletions()));
  if (commitFilesFragment == null) {
    commitFilesFragment=CommitFilesFragment.create(commitExt.getFiles());
    getSupportFragmentManager().beginTransaction().add(R.id.container,commitFilesFragment).commit();
  }
 else {
    commitFilesFragment.showCommitFiles(commitExt.getFiles());
  }
}",0.765296803652968
170529,"@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  setToolbarBackEnable();
  String repoFullName=user.concat(""String_Node_Str"").concat(repo);
  setToolbarTitle(getString(R.string.compare),repoFullName);
  Fragment fragment=null;
  if (CommitsListType.Compare.equals(type)) {
    fragment=CommitsFragment.createForCompare(user,repo,before,head);
  }
 else {
    return;
  }
  getSupportFragmentManager().beginTransaction().add(R.id.container,fragment).commit();
}","@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  String repoFullName=user.concat(""String_Node_Str"").concat(repo);
  setToolbarTitle(getString(R.string.compare),repoFullName);
}",0.6172506738544474
170530,"@Override public void run(){
  getSupportFragmentManager().beginTransaction().add(R.id.container,issueTimelineFragment).commit();
}","@Override public void run(){
  if (!isAlive)   return;
  getSupportFragmentManager().beginTransaction().add(R.id.container,issueTimelineFragment).commit();
}",0.9097222222222222
170531,"@Override public void showIssue(final Issue issue){
  setToolbarTitle(getString(R.string.issue).concat(""String_Node_Str"").concat(String.valueOf(issue.getNumber())));
  GlideApp.with(getActivity()).load(issue.getUser().getAvatarUrl()).placeholder(R.mipmap.logo).into(userImageView);
  issueTitle.setText(issue.getTitle());
  commentBn.setVisibility(issue.isLocked() ? View.GONE : View.VISIBLE);
  String commentStr=String.valueOf(issue.getCommentNum()).concat(""String_Node_Str"").concat(getString(R.string.comments).toLowerCase());
  if (Issue.IssueState.open.equals(issue.getState())) {
    issueStateImg.setImageResource(R.drawable.ic_issues);
    issueStateText.setText(getString(R.string.open).concat(""String_Node_Str"").concat(commentStr));
  }
 else {
    issueStateImg.setImageResource(R.drawable.ic_issues_closed);
    issueStateText.setText(getString(R.string.closed).concat(""String_Node_Str"").concat(commentStr));
  }
  invalidateOptionsMenu();
  if (issueTimelineFragment == null) {
    issueTimelineFragment=IssueTimelineFragment.create(issue);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        getSupportFragmentManager().beginTransaction().add(R.id.container,issueTimelineFragment).commit();
      }
    }
,500);
  }
  String loggedUser=AppData.INSTANCE.getLoggedUser().getLogin();
  boolean editAble=loggedUser.equals(issue.getUser().getLogin()) || loggedUser.equals(issue.getRepoAuthorName());
  editBn.setVisibility(editAble ? View.VISIBLE : View.GONE);
  commentBn.setVisibility(View.VISIBLE);
}","@Override public void showIssue(final Issue issue){
  setToolbarTitle(getString(R.string.issue).concat(""String_Node_Str"").concat(String.valueOf(issue.getNumber())));
  GlideApp.with(getActivity()).load(issue.getUser().getAvatarUrl()).placeholder(R.mipmap.logo).into(userImageView);
  issueTitle.setText(issue.getTitle());
  commentBn.setVisibility(issue.isLocked() ? View.GONE : View.VISIBLE);
  String commentStr=String.valueOf(issue.getCommentNum()).concat(""String_Node_Str"").concat(getString(R.string.comments).toLowerCase());
  if (Issue.IssueState.open.equals(issue.getState())) {
    issueStateImg.setImageResource(R.drawable.ic_issues);
    issueStateText.setText(getString(R.string.open).concat(""String_Node_Str"").concat(commentStr));
  }
 else {
    issueStateImg.setImageResource(R.drawable.ic_issues_closed);
    issueStateText.setText(getString(R.string.closed).concat(""String_Node_Str"").concat(commentStr));
  }
  invalidateOptionsMenu();
  if (issueTimelineFragment == null) {
    issueTimelineFragment=IssueTimelineFragment.create(issue);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        if (!isAlive)         return;
        getSupportFragmentManager().beginTransaction().add(R.id.container,issueTimelineFragment).commit();
      }
    }
,500);
  }
  String loggedUser=AppData.INSTANCE.getLoggedUser().getLogin();
  boolean editAble=loggedUser.equals(issue.getUser().getLogin()) || loggedUser.equals(issue.getRepoAuthorName());
  editBn.setVisibility(editAble ? View.VISIBLE : View.GONE);
  commentBn.setVisibility(View.VISIBLE);
}",0.9878826530612244
170532,"@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  setToolbarScrollAble(true);
  setToolbarBackEnable();
  setToolbarTitle(getString(R.string.issues));
  addBn.setVisibility(IssuesFilter.Type.Repo.equals(issuesType) ? View.VISIBLE : View.GONE);
  if (IssuesFilter.Type.User.equals(issuesType)) {
    pagerAdapter.setPagerList(FragmentPagerModel.createUserIssuesPagerList(getActivity()));
  }
 else {
    pagerAdapter.setPagerList(FragmentPagerModel.createRepoIssuesPagerList(getActivity(),userId,repoName));
    navView.getMenu().findItem(R.id.nav_type_chooser).setVisible(false);
  }
  listeners=new ArrayList<>();
  for (  FragmentPagerModel pagerModel : pagerAdapter.getPagerList()) {
    listeners.add((IssuesListListener)pagerModel.getFragment());
  }
  tabLayout.setVisibility(View.VISIBLE);
  tabLayout.setupWithViewPager(viewPager);
  viewPager.setAdapter(pagerAdapter);
  showFirstPager();
}","@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  setToolbarScrollAble(true);
  setToolbarBackEnable();
  setToolbarTitle(getString(R.string.issues));
  addBn.setVisibility(IssuesFilter.Type.Repo.equals(issuesType) ? View.VISIBLE : View.GONE);
  if (IssuesFilter.Type.User.equals(issuesType)) {
    pagerAdapter.setPagerList(FragmentPagerModel.createUserIssuesPagerList(getActivity(),getFragments()));
  }
 else {
    pagerAdapter.setPagerList(FragmentPagerModel.createRepoIssuesPagerList(getActivity(),userId,repoName,getFragments()));
    navView.getMenu().findItem(R.id.nav_type_chooser).setVisible(false);
  }
  listeners=new ArrayList<>();
  for (  FragmentPagerModel pagerModel : pagerAdapter.getPagerList()) {
    listeners.add((IssuesListListener)pagerModel.getFragment());
  }
  tabLayout.setVisibility(View.VISIBLE);
  tabLayout.setupWithViewPager(viewPager);
  viewPager.setAdapter(pagerAdapter);
  showFirstPager();
}",0.984472049689441
170533,boolean isTextChanged();,"@Override public boolean isTextChanged(){
  return markdownEditorCallback.isTextChanged();
}",0.4137931034482758
170534,"@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  setToolbarBackEnable();
  setToolbarTitle(getString(title));
  MarkdownEditorFragment editorFragment=MarkdownEditorFragment.create(text);
  markdownEditor=editorFragment;
  MarkdownPreviewFragment previewFragment=MarkdownPreviewFragment.create(markdownEditor);
  pagerAdapter.setPagerList(Arrays.asList(new FragmentPagerModel(getString(R.string.write),editorFragment),new FragmentPagerModel(getString(R.string.preview),previewFragment)));
  tabLayout.setVisibility(View.VISIBLE);
  tabLayout.setupWithViewPager(viewPager);
  viewPager.setAdapter(pagerAdapter);
}","@Override protected void initView(Bundle savedInstanceState){
  super.initView(savedInstanceState);
  setToolbarBackEnable();
  setToolbarTitle(getString(title));
  pagerAdapter.setPagerList(FragmentPagerModel.createMarkdownEditorPagerList(getActivity(),text,getFragments()));
  tabLayout.setVisibility(View.VISIBLE);
  tabLayout.setupWithViewPager(viewPager);
  viewPager.setAdapter(pagerAdapter);
}",0.5921052631578947
170535,String getText();,"@Override public String getText(){
  return markdownEditorCallback.getText();
}",0.3541666666666667
170536,"private void commit(){
  if (StringUtils.isBlank(markdownEditor.getText())) {
    Toasty.warning(getActivity(),getString(R.string.comment_null_warning)).show();
    return;
  }
  Intent data=new Intent();
  data.putExtra(""String_Node_Str"",markdownEditor.getText());
  setResult(RESULT_OK,data);
  finish();
}","private void commit(){
  if (StringUtils.isBlank(getText())) {
    Toasty.warning(getActivity(),getString(R.string.comment_null_warning)).show();
    return;
  }
  Intent data=new Intent();
  data.putExtra(""String_Node_Str"",getText());
  setResult(RESULT_OK,data);
  finish();
}",0.9488054607508531
170537,"@Override public void showProfileInfo(User user){
  invalidateOptionsMenu();
  setUserAvatar();
  joinedTime.setText(getString(R.string.joined_at).concat(""String_Node_Str"").concat(StringUtils.getDateStr(user.getCreatedAt())));
  location.setText(user.getLocation());
  if (pagerAdapter.getCount() == 0) {
    pagerAdapter.setPagerList(FragmentPagerModel.createProfilePagerList(getActivity(),user));
    tabLayout.setVisibility(View.VISIBLE);
    tabLayout.setupWithViewPager(viewPager);
    viewPager.setAdapter(pagerAdapter);
    showFirstPager();
  }
 else {
  }
}","@Override public void showProfileInfo(User user){
  invalidateOptionsMenu();
  setUserAvatar();
  joinedTime.setText(getString(R.string.joined_at).concat(""String_Node_Str"").concat(StringUtils.getDateStr(user.getCreatedAt())));
  location.setText(user.getLocation());
  if (pagerAdapter.getCount() == 0) {
    pagerAdapter.setPagerList(FragmentPagerModel.createProfilePagerList(getActivity(),user,getFragments()));
    tabLayout.setVisibility(View.VISIBLE);
    tabLayout.setupWithViewPager(viewPager);
    viewPager.setAdapter(pagerAdapter);
    showFirstPager();
  }
 else {
  }
}",0.986922406277245
170538,"@NonNull @GET(""String_Node_Str"") Observable<Response<Issue>> getIssueInfo(@Header(""String_Node_Str"") boolean forceNetWork,@Path(""String_Node_Str"") String owner,@Path(""String_Node_Str"") String repo,@Path(""String_Node_Str"") int issueNumber);","@NonNull @GET(""String_Node_Str"") @Headers(""String_Node_Str"") Observable<Response<Issue>> getIssueInfo(@Header(""String_Node_Str"") boolean forceNetWork,@Path(""String_Node_Str"") String owner,@Path(""String_Node_Str"") String repo,@Path(""String_Node_Str"") int issueNumber);",0.9446640316205532
170539,"private void loadIssueInfo(){
  if (!GitHubHelper.isIssueUrl(issueUrl))   return;
  String[] arrays=issueUrl.substring(issueUrl.indexOf(""String_Node_Str"") + 4).split(""String_Node_Str"");
  final String user=arrays[0];
  final String repo=arrays[1];
  final int issueNumber=Integer.parseInt(arrays[3]);
  HttpObserver<Issue> httpObserver=new HttpObserver<Issue>(){
    @Override public void onError(    Throwable error){
      mView.showErrorToast(getErrorTip(error));
      mView.hideLoading();
    }
    @Override public void onSuccess(    HttpResponse<Issue> response){
      issue=response.body();
      mView.showIssue(issue);
      mView.hideLoading();
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<Issue>(){
    @Override public Observable<Response<Issue>> createObservable(    boolean forceNetWork){
      return getIssueService().getIssueInfo(forceNetWork,user,repo,issueNumber);
    }
  }
,httpObserver,true);
  mView.showLoading();
}","private void loadIssueInfo(){
  if (issue != null) {
    loadIssueInfo(issue.getRepoAuthorName(),issue.getRepoName(),issue.getNumber());
  }
 else {
    if (!GitHubHelper.isIssueUrl(issueUrl))     return;
    String[] arrays=issueUrl.substring(issueUrl.indexOf(""String_Node_Str"") + 4).split(""String_Node_Str"");
    final String user=arrays[0];
    final String repo=arrays[1];
    final int issueNumber=Integer.parseInt(arrays[3]);
    loadIssueInfo(user,repo,issueNumber);
  }
}",0.4521981856245639
170540,"@Override public void onViewInitialized(){
  super.onViewInitialized();
  if (issue == null) {
    loadIssueInfo();
  }
 else {
    mView.showIssue(issue);
  }
}","@Override public void onViewInitialized(){
  super.onViewInitialized();
  if (issue == null || issue.getBodyHtml() == null) {
    loadIssueInfo();
  }
 else {
    mView.showIssue(issue);
  }
}",0.9121813031161472
170541,"@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeInt(this.id);
  dest.writeString(this.name);
  dest.writeString(this.fullName);
  dest.writeByte(this.repPrivate ? (byte)1 : (byte)0);
  dest.writeString(this.htmlUrl);
  dest.writeString(this.description);
  dest.writeString(this.language);
  dest.writeParcelable(this.owner,flags);
  dest.writeString(this.defaultBranch);
  dest.writeLong(this.createdAt != null ? this.createdAt.getTime() : -1);
  dest.writeLong(this.updatedAt != null ? this.updatedAt.getTime() : -1);
  dest.writeLong(this.pushedAt != null ? this.pushedAt.getTime() : -1);
  dest.writeString(this.gitUrl);
  dest.writeString(this.sshUrl);
  dest.writeString(this.cloneUrl);
  dest.writeString(this.svnUrl);
  dest.writeInt(this.size);
  dest.writeInt(this.stargazersCount);
  dest.writeInt(this.watchersCount);
  dest.writeInt(this.forksCount);
  dest.writeInt(this.openIssuesCount);
  dest.writeInt(this.subscribersCount);
  dest.writeByte(this.fork ? (byte)1 : (byte)0);
  dest.writeParcelable(this.parent,flags);
  dest.writeParcelable(this.permissions,flags);
}","@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeInt(this.id);
  dest.writeString(this.name);
  dest.writeString(this.fullName);
  dest.writeByte(this.repPrivate ? (byte)1 : (byte)0);
  dest.writeString(this.htmlUrl);
  dest.writeString(this.description);
  dest.writeString(this.language);
  dest.writeParcelable(this.owner,flags);
  dest.writeString(this.defaultBranch);
  dest.writeLong(this.createdAt != null ? this.createdAt.getTime() : -1);
  dest.writeLong(this.updatedAt != null ? this.updatedAt.getTime() : -1);
  dest.writeLong(this.pushedAt != null ? this.pushedAt.getTime() : -1);
  dest.writeString(this.gitUrl);
  dest.writeString(this.sshUrl);
  dest.writeString(this.cloneUrl);
  dest.writeString(this.svnUrl);
  dest.writeInt(this.size);
  dest.writeInt(this.stargazersCount);
  dest.writeInt(this.watchersCount);
  dest.writeInt(this.forksCount);
  dest.writeInt(this.openIssuesCount);
  dest.writeInt(this.subscribersCount);
  dest.writeByte(this.fork ? (byte)1 : (byte)0);
  dest.writeParcelable(this.parent,flags);
  dest.writeParcelable(this.permissions,flags);
  dest.writeByte(this.hasIssues ? (byte)1 : (byte)0);
  dest.writeByte(this.hasProjects ? (byte)1 : (byte)0);
  dest.writeByte(this.hasDownloads ? (byte)1 : (byte)0);
  dest.writeByte(this.hasWiki ? (byte)1 : (byte)0);
  dest.writeByte(this.hasPages ? (byte)1 : (byte)0);
}",0.8906752411575563
170542,"protected Repository(Parcel in){
  this.id=in.readInt();
  this.name=in.readString();
  this.fullName=in.readString();
  this.repPrivate=in.readByte() != 0;
  this.htmlUrl=in.readString();
  this.description=in.readString();
  this.language=in.readString();
  this.owner=in.readParcelable(User.class.getClassLoader());
  this.defaultBranch=in.readString();
  long tmpCreatedAt=in.readLong();
  this.createdAt=tmpCreatedAt == -1 ? null : new Date(tmpCreatedAt);
  long tmpUpdatedAt=in.readLong();
  this.updatedAt=tmpUpdatedAt == -1 ? null : new Date(tmpUpdatedAt);
  long tmpPushedAt=in.readLong();
  this.pushedAt=tmpPushedAt == -1 ? null : new Date(tmpPushedAt);
  this.gitUrl=in.readString();
  this.sshUrl=in.readString();
  this.cloneUrl=in.readString();
  this.svnUrl=in.readString();
  this.size=in.readInt();
  this.stargazersCount=in.readInt();
  this.watchersCount=in.readInt();
  this.forksCount=in.readInt();
  this.openIssuesCount=in.readInt();
  this.subscribersCount=in.readInt();
  this.fork=in.readByte() != 0;
  this.parent=in.readParcelable(Repository.class.getClassLoader());
  this.permissions=in.readParcelable(RepositoryPermissions.class.getClassLoader());
}","protected Repository(Parcel in){
  this.id=in.readInt();
  this.name=in.readString();
  this.fullName=in.readString();
  this.repPrivate=in.readByte() != 0;
  this.htmlUrl=in.readString();
  this.description=in.readString();
  this.language=in.readString();
  this.owner=in.readParcelable(User.class.getClassLoader());
  this.defaultBranch=in.readString();
  long tmpCreatedAt=in.readLong();
  this.createdAt=tmpCreatedAt == -1 ? null : new Date(tmpCreatedAt);
  long tmpUpdatedAt=in.readLong();
  this.updatedAt=tmpUpdatedAt == -1 ? null : new Date(tmpUpdatedAt);
  long tmpPushedAt=in.readLong();
  this.pushedAt=tmpPushedAt == -1 ? null : new Date(tmpPushedAt);
  this.gitUrl=in.readString();
  this.sshUrl=in.readString();
  this.cloneUrl=in.readString();
  this.svnUrl=in.readString();
  this.size=in.readInt();
  this.stargazersCount=in.readInt();
  this.watchersCount=in.readInt();
  this.forksCount=in.readInt();
  this.openIssuesCount=in.readInt();
  this.subscribersCount=in.readInt();
  this.fork=in.readByte() != 0;
  this.parent=in.readParcelable(Repository.class.getClassLoader());
  this.permissions=in.readParcelable(RepositoryPermissions.class.getClassLoader());
  this.hasIssues=in.readByte() != 0;
  this.hasProjects=in.readByte() != 0;
  this.hasDownloads=in.readByte() != 0;
  this.hasWiki=in.readByte() != 0;
  this.hasPages=in.readByte() != 0;
}",0.926637897214594
170543,"@Override public void showRepoInfo(Repository repository){
  issueLay.setVisibility(repository.isFork() ? View.GONE : View.VISIBLE);
  issuesNumText.setText(String.valueOf(repository.getOpenIssuesCount()));
  stargazersNumText.setText(String.valueOf(repository.getStargazersCount()));
  forksNumText.setText(String.valueOf(repository.getForksCount()));
  watchersNumText.setText(String.valueOf(repository.getSubscribersCount()));
  String createStr=(repository.isFork() ? getString(R.string.forked_at) : getString(R.string.created_at)) + ""String_Node_Str"" + StringUtils.getDateStr(repository.getCreatedAt());
  String updateStr=getString(R.string.latest_update) + ""String_Node_Str"" + StringUtils.getNewsTimeStr(getActivity(),repository.getUpdatedAt());
  repoCreatedInfoText.setText(String.format(""String_Node_Str"",createStr,updateStr));
  if (repository.isFork() && repository.getParent() != null) {
    forkInfoText.setVisibility(View.VISIBLE);
    forkInfoText.setText(getString(R.string.forked_from).concat(""String_Node_Str"").concat(repository.getParent().getFullName()));
  }
 else {
    forkInfoText.setVisibility(View.GONE);
  }
  String fullName=repository.getFullName();
  SpannableStringBuilder spannable=new SpannableStringBuilder(fullName);
  spannable.setSpan(new ForegroundColorSpan(ViewHelper.getAccentColor(getContext())),0,fullName.indexOf(""String_Node_Str""),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  spannable.setSpan(new ClickableSpan(){
    @Override public void onClick(    View widget){
      ProfileActivity.show(getActivity(),mPresenter.getRepository().getOwner().getLogin(),mPresenter.getRepository().getOwner().getAvatarUrl());
    }
    @Override public void updateDrawState(    TextPaint ds){
    }
  }
,0,fullName.indexOf(""String_Node_Str""),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  repoTitleText.setMovementMethod(LinkMovementMethod.getInstance());
  repoTitleText.setText(spannable);
}","@Override public void showRepoInfo(Repository repository){
  issueLay.setVisibility(repository.isHasIssues() ? View.VISIBLE : View.GONE);
  issuesNumText.setText(String.valueOf(repository.getOpenIssuesCount()));
  stargazersNumText.setText(String.valueOf(repository.getStargazersCount()));
  forksNumText.setText(String.valueOf(repository.getForksCount()));
  watchersNumText.setText(String.valueOf(repository.getSubscribersCount()));
  String createStr=(repository.isFork() ? getString(R.string.forked_at) : getString(R.string.created_at)) + ""String_Node_Str"" + StringUtils.getDateStr(repository.getCreatedAt());
  String updateStr=getString(R.string.latest_update) + ""String_Node_Str"" + StringUtils.getNewsTimeStr(getActivity(),repository.getUpdatedAt());
  repoCreatedInfoText.setText(String.format(""String_Node_Str"",createStr,updateStr));
  if (repository.isFork() && repository.getParent() != null) {
    forkInfoText.setVisibility(View.VISIBLE);
    forkInfoText.setText(getString(R.string.forked_from).concat(""String_Node_Str"").concat(repository.getParent().getFullName()));
  }
 else {
    forkInfoText.setVisibility(View.GONE);
  }
  String fullName=repository.getFullName();
  SpannableStringBuilder spannable=new SpannableStringBuilder(fullName);
  spannable.setSpan(new ForegroundColorSpan(ViewHelper.getAccentColor(getContext())),0,fullName.indexOf(""String_Node_Str""),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  spannable.setSpan(new ClickableSpan(){
    @Override public void onClick(    View widget){
      ProfileActivity.show(getActivity(),mPresenter.getRepository().getOwner().getLogin(),mPresenter.getRepository().getOwner().getAvatarUrl());
    }
    @Override public void updateDrawState(    TextPaint ds){
    }
  }
,0,fullName.indexOf(""String_Node_Str""),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  repoTitleText.setMovementMethod(LinkMovementMethod.getInstance());
  repoTitleText.setText(spannable);
}",0.9903267973856208
170544,"@Override public void prepareLoadData(){
  if (mView == null)   return;
  if (mView.isPagerFragment() && (!isViewInitialized() || !mView.isFragmentShowed()))   return;
  if (isLoaded)   return;
  isLoaded=true;
  loadData();
}","@Override public void prepareLoadData(){
  if (mView == null) {
    return;
  }
  if (mView.isPagerFragment() && (!isViewInitialized() || !mView.isFragmentShowed())) {
    return;
  }
  if (isLoaded)   return;
  isLoaded=true;
  loadData();
}",0.8888888888888888
170545,"@Override public void onPageSelected(final int position){
  postNotifyFragmentStatus(prePosition,false,100);
  postNotifyFragmentStatus(position,true,500);
  prePosition=position;
}","@Override public void onPageSelected(final int position){
  postNotifyFragmentStatus(prePosition,false,100);
  postNotifyFragmentStatus(position,true,500);
  prePosition=position;
  Logger.d(""String_Node_Str"" + position);
}",0.8960396039603961
170546,"@NonNull public ArrayList<Fragment> getFragments(){
  return fragments;
}","@NonNull public ArrayList<Fragment> getFragments(){
  if (fragments == null) {
    fragments=new ArrayList<>();
    for (int i=0; i < getPagerSize(); i++) {
      fragments.add(null);
    }
  }
  return fragments;
}",0.3819444444444444
170547,"@Override public void onAttachFragment(Fragment fragment){
  super.onAttachFragment(fragment);
  fragments.add(fragment);
  Logger.d(""String_Node_Str"" + fragment);
}","@Override public void onAttachFragment(Fragment fragment){
  super.onAttachFragment(fragment);
  int fragmentPosition=getFragmentPosition(fragment);
  if (fragmentPosition != -1)   getFragments().set(fragmentPosition,fragment);
  Logger.d(""String_Node_Str"" + fragment);
}",0.6972477064220184
170548,"@Override protected void onClick(){
  super.onClick();
  oriColor=getSelectedColor();
  colorChooserDialog=new ColorChooserDialog.Builder(BaseActivity.getCurActivity(),this,R.string.theme_accent_color).titleSub(R.string.choose_theme).customColors(getAccentColors(),null).preselect(oriColor).customButton(0).accentMode(true).show();
}","@Override protected void onClick(){
  super.onClick();
  oriColor=getSelectedColor();
  new ColorChooserDialog.Builder(BaseActivity.getCurActivity(),this,R.string.theme_accent_color).titleSub(R.string.choose_theme).customColors(getAccentColors(),null).preselect(oriColor).customButton(0).accentMode(true).show();
}",0.9706336939721792
170549,"@Override public void onBindViewHolder(PreferenceViewHolder holder){
  super.onBindViewHolder(holder);
  colorView=holder.findViewById(R.id.color_view);
  colorView.setBackgroundResource(R.drawable.shape_circle);
  colorView.getBackground().setColorFilter(getSelectedColor(),PorterDuff.Mode.SRC_IN);
}","@Override public void onBindViewHolder(PreferenceViewHolder holder){
  super.onBindViewHolder(holder);
  View colorView=holder.findViewById(R.id.color_view);
  colorView.setBackgroundResource(R.drawable.shape_circle);
  colorView.getBackground().setColorFilter(getSelectedColor(),PorterDuff.Mode.SRC_IN);
}",0.9917627677100496
170550,"@Override public void onColorSelection(@NonNull ColorChooserDialog dialog,@ColorInt int selectedColor){
  PrefHelper.set(PrefHelper.ACCENT_COLOR,getColorIndex(selectedColor));
  colorView.getBackground().setColorFilter(selectedColor,PorterDuff.Mode.SRC_IN);
  if (colorChooserCallback != null && oriColor != selectedColor) {
    colorChooserCallback.onColorChanged(oriColor,selectedColor);
  }
}","@Override public void onColorSelection(@NonNull ColorChooserDialog dialog,@ColorInt int selectedColor){
  PrefHelper.set(PrefHelper.ACCENT_COLOR,getColorIndex(selectedColor));
  if (colorChooserCallback != null && oriColor != selectedColor) {
    colorChooserCallback.onColorChanged(oriColor,selectedColor);
  }
}",0.884180790960452
170551,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  ThemeEngine.apply(this);
  AppHelper.updateAppLanguage(getActivity());
  super.onCreate(savedInstanceState);
  isAlive=true;
  setupActivityComponent(getAppComponent());
  DataAutoAccess.getData(this,savedInstanceState);
  if (mPresenter != null) {
    mPresenter.onRestoreInstanceState(savedInstanceState == null ? getIntent().getExtras() : savedInstanceState);
    mPresenter.attachView(this);
  }
  if (savedInstanceState != null && AppData.INSTANCE.getAuthUser() == null) {
    DataAutoAccess.getData(AppData.INSTANCE,savedInstanceState);
  }
  getScreenSize();
  if (getContentView() != 0) {
    setContentView(getContentView());
    ButterKnife.bind(getActivity());
  }
  initActivity();
  initView(savedInstanceState);
  if (mPresenter != null)   mPresenter.onViewInitialized();
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  if ((AppData.INSTANCE.getAuthUser() == null || AppData.INSTANCE.getLoggedUser() == null) && !this.getClass().equals(SplashActivity.class) && !this.getClass().equals(LoginActivity.class)) {
    super.onCreate(savedInstanceState);
    finishAffinity();
    startActivity(new Intent(getActivity(),SplashActivity.class));
    return;
  }
  ThemeEngine.apply(this);
  AppHelper.updateAppLanguage(getActivity());
  super.onCreate(savedInstanceState);
  isAlive=true;
  setupActivityComponent(getAppComponent());
  DataAutoAccess.getData(this,savedInstanceState);
  if (mPresenter != null) {
    mPresenter.onRestoreInstanceState(savedInstanceState == null ? getIntent().getExtras() : savedInstanceState);
    mPresenter.attachView(this);
  }
  if (savedInstanceState != null && AppData.INSTANCE.getAuthUser() == null) {
    DataAutoAccess.getData(AppData.INSTANCE,savedInstanceState);
  }
  getScreenSize();
  if (getContentView() != 0) {
    setContentView(getContentView());
    ButterKnife.bind(getActivity());
  }
  initActivity();
  initView(savedInstanceState);
  if (mPresenter != null)   mPresenter.onViewInitialized();
}",0.8367346938775511
170552,"public static void showDownloadServiceSetting(Context context){
  try {
    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
    intent.setData(Uri.parse(""String_Node_Str"" + DOWNLOAD_SERVICE_PACKAGE_NAME));
    context.startActivity(intent);
  }
 catch (  ActivityNotFoundException e) {
    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
    context.startActivity(intent);
  }
}","public static void showDownloadServiceSetting(Context context){
  try {
    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
    intent.setData(Uri.parse(""String_Node_Str"" + DOWNLOAD_SERVICE_PACKAGE_NAME));
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(intent);
  }
 catch (  ActivityNotFoundException e) {
    Intent intent=new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(intent);
  }
}",0.8984375
170553,"@NonNull @GET(""String_Node_Str"") Observable<Response<ArrayList<Repository>>> getForks(@Header(""String_Node_Str"") boolean forceNetWork,@Path(""String_Node_Str"") String owner,@Path(""String_Node_Str"") String repo);","@NonNull @GET(""String_Node_Str"") Observable<Response<ArrayList<Repository>>> getForks(@Header(""String_Node_Str"") boolean forceNetWork,@Path(""String_Node_Str"") String owner,@Path(""String_Node_Str"") String repo,@Query(""String_Node_Str"") int page);",0.9230769230769232
170554,"@Override public void loadEvents(final boolean isReload,final int page){
  mView.showLoading();
  final boolean readCacheFirst=!isReload && page == 1;
  HttpObserver<ArrayList<Event>> httpObserver=new HttpObserver<ArrayList<Event>>(){
    @Override public void onError(    Throwable error){
      mView.hideLoading();
      mView.showShortToast(error.getMessage());
    }
    @Override public void onSuccess(    HttpResponse<ArrayList<Event>> response){
      mView.hideLoading();
      correctEvent(response.body());
      if (events == null || isReload || readCacheFirst) {
        events=response.body();
      }
 else {
        events.addAll(response.body());
      }
      mView.showEvents(events);
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<ArrayList<Event>>(){
    @Override public Observable<Response<ArrayList<Event>>> createObservable(    boolean forceNetWork){
      return getObservable(forceNetWork,page);
    }
  }
,httpObserver,readCacheFirst);
}","@Override public void loadEvents(final boolean isReload,final int page){
  mView.showLoading();
  final boolean readCacheFirst=!isReload && page == 1;
  HttpObserver<ArrayList<Event>> httpObserver=new HttpObserver<ArrayList<Event>>(){
    @Override public void onError(    Throwable error){
      mView.hideLoading();
      mView.showShortToast(error.getMessage());
    }
    @Override public void onSuccess(    HttpResponse<ArrayList<Event>> response){
      mView.hideLoading();
      correctEvent(response.body());
      if (events == null || isReload || readCacheFirst) {
        events=response.body();
      }
 else {
        events.addAll(response.body());
      }
      if (response.body().size() > 0) {
        mView.showEvents(events);
      }
 else {
        mView.setCanLoadMore(false);
      }
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<ArrayList<Event>>(){
    @Override public Observable<Response<ArrayList<Event>>> createObservable(    boolean forceNetWork){
      return getObservable(forceNetWork,page);
    }
  }
,httpObserver,readCacheFirst);
}",0.9498783454987836
170555,"@Override public void onSuccess(HttpResponse<ArrayList<Event>> response){
  mView.hideLoading();
  correctEvent(response.body());
  if (events == null || isReload || readCacheFirst) {
    events=response.body();
  }
 else {
    events.addAll(response.body());
  }
  mView.showEvents(events);
}","@Override public void onSuccess(HttpResponse<ArrayList<Event>> response){
  mView.hideLoading();
  correctEvent(response.body());
  if (events == null || isReload || readCacheFirst) {
    events=response.body();
  }
 else {
    events.addAll(response.body());
  }
  if (response.body().size() > 0) {
    mView.showEvents(events);
  }
 else {
    mView.setCanLoadMore(false);
  }
}",0.8677563150074294
170556,"@Override public void loadRepositories(final boolean isReLoad,final int page){
  if (type.equals(RepositoriesFragment.RepositoriesType.SEARCH)) {
    searchRepos(page);
    return;
  }
  mView.showLoading();
  final boolean readCacheFirst=!isReLoad && page == 1 && !type.equals(RepositoriesFragment.RepositoriesType.TRENDING);
  HttpObserver<ArrayList<Repository>> httpObserver=new HttpObserver<ArrayList<Repository>>(){
    @Override public void onError(    @NonNull Throwable error){
      mView.hideLoading();
      mView.showLoadError(error.getMessage());
    }
    @Override public void onSuccess(    @NonNull HttpResponse<ArrayList<Repository>> response){
      mView.hideLoading();
      if (isReLoad || readCacheFirst || repos == null) {
        repos=response.body();
      }
 else {
        repos.addAll(response.body());
      }
      mView.showRepositories(repos);
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<ArrayList<Repository>>(){
    @Nullable @Override public Observable<Response<ArrayList<Repository>>> createObservable(    boolean forceNetWork){
      return getObservable(forceNetWork,page);
    }
  }
,httpObserver,readCacheFirst);
}","@Override public void loadRepositories(final boolean isReLoad,final int page){
  if (type.equals(RepositoriesFragment.RepositoriesType.SEARCH)) {
    searchRepos(page);
    return;
  }
  mView.showLoading();
  final boolean readCacheFirst=!isReLoad && page == 1 && !type.equals(RepositoriesFragment.RepositoriesType.TRENDING);
  HttpObserver<ArrayList<Repository>> httpObserver=new HttpObserver<ArrayList<Repository>>(){
    @Override public void onError(    @NonNull Throwable error){
      mView.hideLoading();
      mView.showLoadError(error.getMessage());
    }
    @Override public void onSuccess(    @NonNull HttpResponse<ArrayList<Repository>> response){
      mView.hideLoading();
      if (isReLoad || readCacheFirst || repos == null) {
        repos=response.body();
      }
 else {
        repos.addAll(response.body());
      }
      if (response.body().size() > 0) {
        mView.showRepositories(repos);
      }
 else {
        mView.setCanLoadMore(false);
      }
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<ArrayList<Repository>>(){
    @Nullable @Override public Observable<Response<ArrayList<Repository>>> createObservable(    boolean forceNetWork){
      return getObservable(forceNetWork,page);
    }
  }
,httpObserver,readCacheFirst);
}",0.9578041786153216
170557,"private Observable<Response<ArrayList<Repository>>> getObservable(boolean forceNetWork,int page){
  String loginedUser=AppData.INSTANCE.getLoggedUser().getLogin();
switch (type) {
case OWNED:
    return getRepoService().getUserRepos(forceNetWork,user,page);
case STARRED:
  return getRepoService().getStarredRepos(forceNetWork,user,page);
case TRENDING:
return getOpenHubService().getTrendingRepos(since);
case FORKS:
return getRepoService().getForks(forceNetWork,user,repo);
default :
return null;
}
}","private Observable<Response<ArrayList<Repository>>> getObservable(boolean forceNetWork,int page){
  String loginedUser=AppData.INSTANCE.getLoggedUser().getLogin();
switch (type) {
case OWNED:
    return getRepoService().getUserRepos(forceNetWork,user,page);
case STARRED:
  return getRepoService().getStarredRepos(forceNetWork,user,page);
case TRENDING:
return getOpenHubService().getTrendingRepos(since);
case FORKS:
return getRepoService().getForks(forceNetWork,user,repo,page);
default :
return null;
}
}",0.9950445986124876
170558,"private void searchRepos(final int page){
  mView.showLoading();
  HttpObserver<SearchResult<Repository>> httpObserver=new HttpObserver<SearchResult<Repository>>(){
    @Override public void onError(    @NonNull Throwable error){
      mView.hideLoading();
      mView.showLoadError(error.getMessage());
    }
    @Override public void onSuccess(    @NonNull HttpResponse<SearchResult<Repository>> response){
      mView.hideLoading();
      if (repos == null || page == 1) {
        repos=response.body().getItems();
      }
 else {
        repos.addAll(response.body().getItems());
      }
      mView.showRepositories(repos);
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<SearchResult<Repository>>(){
    @Nullable @Override public Observable<Response<SearchResult<Repository>>> createObservable(    boolean forceNetWork){
      return getSearchService().searchRepos(searchModel.getQuery(),searchModel.getSort(),searchModel.getOrder(),page);
    }
  }
,httpObserver);
}","private void searchRepos(final int page){
  mView.showLoading();
  HttpObserver<SearchResult<Repository>> httpObserver=new HttpObserver<SearchResult<Repository>>(){
    @Override public void onError(    @NonNull Throwable error){
      mView.hideLoading();
      mView.showLoadError(error.getMessage());
    }
    @Override public void onSuccess(    @NonNull HttpResponse<SearchResult<Repository>> response){
      mView.hideLoading();
      if (repos == null || page == 1) {
        repos=response.body().getItems();
      }
 else {
        repos.addAll(response.body().getItems());
      }
      if (response.body().getItems().size() > 0) {
        mView.showRepositories(repos);
      }
 else {
        mView.setCanLoadMore(false);
      }
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<SearchResult<Repository>>(){
    @Nullable @Override public Observable<Response<SearchResult<Repository>>> createObservable(    boolean forceNetWork){
      return getSearchService().searchRepos(searchModel.getQuery(),searchModel.getSort(),searchModel.getOrder(),page);
    }
  }
,httpObserver);
}",0.9452449567723344
170559,"@Override public void onSuccess(@NonNull HttpResponse<SearchResult<Repository>> response){
  mView.hideLoading();
  if (repos == null || page == 1) {
    repos=response.body().getItems();
  }
 else {
    repos.addAll(response.body().getItems());
  }
  mView.showRepositories(repos);
}","@Override public void onSuccess(@NonNull HttpResponse<SearchResult<Repository>> response){
  mView.hideLoading();
  if (repos == null || page == 1) {
    repos=response.body().getItems();
  }
 else {
    repos.addAll(response.body().getItems());
  }
  if (response.body().getItems().size() > 0) {
    mView.showRepositories(repos);
  }
 else {
    mView.setCanLoadMore(false);
  }
}",0.8498498498498499
170560,"@Override public void loadUsers(final int page,final boolean isReload){
  if (type.equals(UserListFragment.UserListType.SEARCH)) {
    searchUsers(page);
    return;
  }
  mView.showLoading();
  final boolean readCacheFirst=page == 1 && !isReload;
  HttpObserver<ArrayList<User>> httpObserver=new HttpObserver<ArrayList<User>>(){
    @Override public void onError(    Throwable error){
      mView.hideLoading();
      mView.showShortToast(error.getMessage());
    }
    @Override public void onSuccess(    HttpResponse<ArrayList<User>> response){
      mView.hideLoading();
      if (isReload || users == null || readCacheFirst) {
        users=response.body();
      }
 else {
        users.addAll(response.body());
      }
      mView.showUsers(users);
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<ArrayList<User>>(){
    @Override public Observable<Response<ArrayList<User>>> createObservable(    boolean forceNetWork){
      if (type.equals(UserListFragment.UserListType.STARGAZERS)) {
        return getRepoService().getStargazers(forceNetWork,user,repo,page);
      }
 else       if (type.equals(UserListFragment.UserListType.WATCHERS)) {
        return getRepoService().getWatchers(forceNetWork,user,repo,page);
      }
 else       if (type.equals(UserListFragment.UserListType.FOLLOWERS)) {
        return getUserService().getFollowers(forceNetWork,user,page);
      }
 else       if (type.equals(UserListFragment.UserListType.FOLLOWING)) {
        return getUserService().getFollowing(forceNetWork,user,page);
      }
 else {
        throw new IllegalArgumentException(type.name());
      }
    }
  }
,httpObserver,readCacheFirst);
}","@Override public void loadUsers(final int page,final boolean isReload){
  if (type.equals(UserListFragment.UserListType.SEARCH)) {
    searchUsers(page);
    return;
  }
  mView.showLoading();
  final boolean readCacheFirst=page == 1 && !isReload;
  HttpObserver<ArrayList<User>> httpObserver=new HttpObserver<ArrayList<User>>(){
    @Override public void onError(    Throwable error){
      mView.hideLoading();
      mView.showShortToast(error.getMessage());
    }
    @Override public void onSuccess(    HttpResponse<ArrayList<User>> response){
      mView.hideLoading();
      if (isReload || users == null || readCacheFirst) {
        users=response.body();
      }
 else {
        users.addAll(response.body());
      }
      if (response.body().size() > 0) {
        mView.showUsers(users);
      }
 else {
        mView.setCanLoadMore(false);
      }
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<ArrayList<User>>(){
    @Override public Observable<Response<ArrayList<User>>> createObservable(    boolean forceNetWork){
      if (type.equals(UserListFragment.UserListType.STARGAZERS)) {
        return getRepoService().getStargazers(forceNetWork,user,repo,page);
      }
 else       if (type.equals(UserListFragment.UserListType.WATCHERS)) {
        return getRepoService().getWatchers(forceNetWork,user,repo,page);
      }
 else       if (type.equals(UserListFragment.UserListType.FOLLOWERS)) {
        return getUserService().getFollowers(forceNetWork,user,page);
      }
 else       if (type.equals(UserListFragment.UserListType.FOLLOWING)) {
        return getUserService().getFollowing(forceNetWork,user,page);
      }
 else {
        throw new IllegalArgumentException(type.name());
      }
    }
  }
,httpObserver,readCacheFirst);
}",0.9698389458272328
170561,"private void searchUsers(final int page){
  mView.showLoading();
  HttpObserver<SearchResult<User>> httpObserver=new HttpObserver<SearchResult<User>>(){
    @Override public void onError(    Throwable error){
      mView.hideLoading();
      mView.showShortToast(error.getMessage());
    }
    @Override public void onSuccess(    HttpResponse<SearchResult<User>> response){
      mView.hideLoading();
      if (users == null || page == 1) {
        users=response.body().getItems();
      }
 else {
        users.addAll(response.body().getItems());
      }
      mView.showUsers(users);
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<SearchResult<User>>(){
    @Override public Observable<Response<SearchResult<User>>> createObservable(    boolean forceNetWork){
      return getSearchService().searchUsers(searchModel.getQuery(),searchModel.getSort(),searchModel.getOrder(),page);
    }
  }
,httpObserver);
}","private void searchUsers(final int page){
  mView.showLoading();
  HttpObserver<SearchResult<User>> httpObserver=new HttpObserver<SearchResult<User>>(){
    @Override public void onError(    Throwable error){
      mView.hideLoading();
      mView.showShortToast(error.getMessage());
    }
    @Override public void onSuccess(    HttpResponse<SearchResult<User>> response){
      mView.hideLoading();
      if (users == null || page == 1) {
        users=response.body().getItems();
      }
 else {
        users.addAll(response.body().getItems());
      }
      if (response.body().getItems().size() > 0) {
        mView.showUsers(users);
      }
 else {
        mView.setCanLoadMore(false);
      }
    }
  }
;
  generalRxHttpExecute(new IObservableCreator<SearchResult<User>>(){
    @Override public Observable<Response<SearchResult<User>>> createObservable(    boolean forceNetWork){
      return getSearchService().searchUsers(searchModel.getQuery(),searchModel.getSort(),searchModel.getOrder(),page);
    }
  }
,httpObserver);
}",0.9416581371545548
170562,"@Override public void onSuccess(HttpResponse<SearchResult<User>> response){
  mView.hideLoading();
  if (users == null || page == 1) {
    users=response.body().getItems();
  }
 else {
    users.addAll(response.body().getItems());
  }
  mView.showUsers(users);
}","@Override public void onSuccess(HttpResponse<SearchResult<User>> response){
  mView.hideLoading();
  if (users == null || page == 1) {
    users=response.body().getItems();
  }
 else {
    users.addAll(response.body().getItems());
  }
  if (response.body().getItems().size() > 0) {
    mView.showUsers(users);
  }
 else {
    mView.setCanLoadMore(false);
  }
}",0.8392282958199357
170563,"@Override boolean shouldFlipSizes(){
  return mSensorOffset % 180 != 0;
}","@Override boolean shouldFlipSizes(){
  return (mDeviceOrientation + mSensorOffset) % 180 != 0;
}",0.863905325443787
170564,"void enable(Display display){
  mDisplay=display;
  mListener.enable();
  mLastKnownDisplayOffset=DISPLAY_ORIENTATIONS.get(display.getRotation());
  mCallbacks.onDisplayOffsetChanged(mLastKnownDisplayOffset);
}","void enable(Context context){
  mDisplay=((WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  mListener.enable();
  mLastKnownDisplayOffset=DISPLAY_ORIENTATIONS.get(mDisplay.getRotation());
  mCallbacks.onDisplayOffsetChanged(mLastKnownDisplayOffset);
}",0.468937875751503
170565,"/** 
 * Checks that we have appropriate permissions for this session type. Throws if session = audio and manifest did not add the microphone permissions.
 * @return true if we can go on, false otherwise.
 */
@SuppressLint(""String_Node_Str"") protected boolean checkPermissions(SessionType sessionType,Audio audio){
  checkPermissionsManifestOrThrow(sessionType,audio);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)   return true;
  Context c=getContext();
  boolean needsCamera=true;
  boolean needsAudio=sessionType == SessionType.VIDEO && audio == Audio.ON;
  needsCamera=needsCamera && c.checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED;
  needsAudio=needsAudio && c.checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED;
  if (needsCamera || needsAudio) {
    requestPermissions(needsCamera,needsAudio);
    return false;
  }
  return true;
}","/** 
 * Checks that we have appropriate permissions for this session type. Throws if session = audio and manifest did not add the microphone permissions.     
 * @param sessionType
 * @param audio
 * @return true if we can go on, false otherwise.
 */
@SuppressLint(""String_Node_Str"") protected boolean checkPermissions(SessionType sessionType,Audio audio){
  checkPermissionsManifestOrThrow(sessionType,audio);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)   return true;
  Context c=getContext();
  boolean needsCamera=true;
  boolean needsAudio=sessionType == SessionType.VIDEO && audio == Audio.ON;
  needsCamera=needsCamera && c.checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED;
  needsAudio=needsAudio && c.checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED;
  if (needsCamera || needsAudio) {
    requestPermissions(needsCamera,needsAudio);
    return false;
  }
  return true;
}",0.977284733227681
170566,"/** 
 * Controls whether CameraView should play sound effects on certain events (picture taken, focus complete). Note that: - On API level < 16, this flag is always false - Camera1 will always play the shutter sound when taking pictures
 * @param playSounds whether to play sound effects
 */
public void setPlaySounds(boolean playSounds){
  mPlaySounds=playSounds && Build.VERSION.SDK_INT >= 16;
}","/** 
 * Controls whether CameraView should play sound effects on certain events (picture taken, focus complete). Note that: - On API level   {@literal <} 16, this flag is always false- Camera1 will always play the shutter sound when taking pictures
 * @param playSounds whether to play sound effects
 */
public void setPlaySounds(boolean playSounds){
  mPlaySounds=playSounds && Build.VERSION.SDK_INT >= 16;
}",0.9826302729528535
170567,"Camera2(CameraView.CameraListenerWrapper callback,PreviewImpl preview,Context context){
  super(callback,preview);
  preview.setCallback(new PreviewImpl.OnPreviewSurfaceChangedCallback(){
    @Override public void onPreviewSurfaceChanged(){
    }
  }
);
  mCameraManager=(CameraManager)context.getSystemService(Context.CAMERA_SERVICE);
  try {
    for (    final String cameraId : mCameraManager.getCameraIdList()) {
      CameraCharacteristics characteristics=mCameraManager.getCameraCharacteristics(cameraId);
      @SuppressWarnings(""String_Node_Str"") int orientation=characteristics.get(CameraCharacteristics.LENS_FACING);
      if (orientation == CameraCharacteristics.LENS_FACING_BACK) {
        float[] maxFocus=characteristics.get(CameraCharacteristics.LENS_INFO_AVAILABLE_FOCAL_LENGTHS);
        if (maxFocus == null) {
          continue;
        }
        SizeF size=characteristics.get(CameraCharacteristics.SENSOR_INFO_PHYSICAL_SIZE);
        if (size == null) {
          continue;
        }
        float w=size.getWidth();
        float h=size.getHeight();
        mExtraPropertiesMap.put(cameraId,new ExtraProperties((float)Math.toDegrees(2 * Math.atan(w / (maxFocus[0] * 2))),(float)Math.toDegrees(2 * Math.atan(h / (maxFocus[0] * 2)))));
      }
    }
  }
 catch (  CameraAccessException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","Camera2(CameraView.CameraListenerWrapper callback,PreviewImpl preview,Context context){
  super(callback,preview);
  mCameraManager=(CameraManager)context.getSystemService(Context.CAMERA_SERVICE);
  try {
    for (    final String cameraId : mCameraManager.getCameraIdList()) {
      CameraCharacteristics characteristics=mCameraManager.getCameraCharacteristics(cameraId);
      @SuppressWarnings(""String_Node_Str"") int orientation=characteristics.get(CameraCharacteristics.LENS_FACING);
      if (orientation == CameraCharacteristics.LENS_FACING_BACK) {
        float[] maxFocus=characteristics.get(CameraCharacteristics.LENS_INFO_AVAILABLE_FOCAL_LENGTHS);
        if (maxFocus == null) {
          continue;
        }
        SizeF size=characteristics.get(CameraCharacteristics.SENSOR_INFO_PHYSICAL_SIZE);
        if (size == null) {
          continue;
        }
        float w=size.getWidth();
        float h=size.getHeight();
        mExtraPropertiesMap.put(cameraId,new ExtraProperties((float)Math.toDegrees(2 * Math.atan(w / (maxFocus[0] * 2))),(float)Math.toDegrees(2 * Math.atan(h / (maxFocus[0] * 2)))));
      }
    }
  }
 catch (  CameraAccessException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.946559015763168
170568,"CameraImpl(CameraView.CameraListenerWrapper callback,PreviewImpl preview){
  mCameraListener=callback;
  mPreview=preview;
}","CameraImpl(CameraView.CameraListenerWrapper callback,PreviewImpl preview){
  mCameraListener=callback;
  mPreview=preview;
  mPreview.setSurfaceCallback(this);
}",0.8701754385964913
170569,"TextureViewPreview(Context context,ViewGroup parent){
  final View view=View.inflate(context,R.layout.texture_view,parent);
  mTextureView=(TextureView)view.findViewById(R.id.texture_view);
  mTextureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      setSurfaceSize(width,height);
      dispatchSurfaceChanged();
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      setSurfaceSize(width,height);
      dispatchSurfaceChanged();
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      setSurfaceSize(0,0);
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
}","TextureViewPreview(Context context,ViewGroup parent){
  final View view=View.inflate(context,R.layout.texture_view,parent);
  mTextureView=(TextureView)view.findViewById(R.id.texture_view);
  mTextureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      onSurfaceAvailable(width,height);
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      onSurfaceSizeChanged(width,height);
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      onSurfaceDestroyed();
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
}",0.9166173861620344
170570,"@Override public void onSurfaceTextureAvailable(SurfaceTexture surface,int width,int height){
  setSurfaceSize(width,height);
  dispatchSurfaceChanged();
}","@Override public void onSurfaceTextureAvailable(SurfaceTexture surface,int width,int height){
  onSurfaceAvailable(width,height);
}",0.8531468531468531
170571,"@Override public boolean onSurfaceTextureDestroyed(SurfaceTexture surface){
  setSurfaceSize(0,0);
  return true;
}","@Override public boolean onSurfaceTextureDestroyed(SurfaceTexture surface){
  onSurfaceDestroyed();
  return true;
}",0.9177489177489178
170572,"@Override public void onSurfaceTextureSizeChanged(SurfaceTexture surface,int width,int height){
  setSurfaceSize(width,height);
  dispatchSurfaceChanged();
}","@Override public void onSurfaceTextureSizeChanged(SurfaceTexture surface,int width,int height){
  onSurfaceSizeChanged(width,height);
}",0.863013698630137
170573,"CameraImpl(CameraListener callback,PreviewImpl preview){
  mCameraListener=callback;
  mPreview=preview;
}","CameraImpl(CameraView.CameraListenerWrapper callback,PreviewImpl preview){
  mCameraListener=callback;
  mPreview=preview;
}",0.9217391304347826
170574,"public void onPictureTaken(YuvImage yuv){
}","public void onPictureTaken(byte[] jpeg){
}",0.7529411764705882
170575,"@Override Size getPreviewSize(){
  if (mPreviewSize == null && mCameraCharacteristics != null) {
    TreeSet<Size> sizes=new TreeSet<>();
    sizes.addAll(getAvailablePreviewResolutions());
    TreeSet<AspectRatio> aspectRatios=new CommonAspectRatioFilter(getAvailablePreviewResolutions(),getAvailableCaptureResolutions()).filter();
    AspectRatio targetRatio=aspectRatios.size() > 0 ? aspectRatios.last() : null;
    Iterator<Size> descendingSizes=sizes.descendingIterator();
    Size size;
    while (descendingSizes.hasNext() && mPreviewSize == null) {
      size=descendingSizes.next();
      if (targetRatio == null || targetRatio.matches(size)) {
        mPreviewSize=size;
        break;
      }
    }
  }
  return mPreviewSize;
}","@Override Size getPreviewSize(){
  if (mPreviewSize == null && mCameraCharacteristics != null) {
    TreeSet<Size> sizes=new TreeSet<>();
    sizes.addAll(getAvailablePreviewResolutions());
  }
  return mPreviewSize;
}",0.407949790794979
170576,"@Override Size getCaptureSize(){
  if (mCaptureSize == null && mCameraCharacteristics != null) {
    TreeSet<Size> sizes=new TreeSet<>();
    sizes.addAll(getAvailableCaptureResolutions());
    TreeSet<AspectRatio> aspectRatios=new CommonAspectRatioFilter(getAvailablePreviewResolutions(),getAvailableCaptureResolutions()).filter();
    AspectRatio targetRatio=aspectRatios.size() > 0 ? aspectRatios.last() : null;
    Iterator<Size> descendingSizes=sizes.descendingIterator();
    Size size;
    while (descendingSizes.hasNext() && mCaptureSize == null) {
      size=descendingSizes.next();
      if (targetRatio == null || targetRatio.matches(size)) {
        mCaptureSize=size;
        break;
      }
    }
  }
  return mCaptureSize;
}","@Override Size getCaptureSize(){
  if (mCaptureSize == null && mCameraCharacteristics != null) {
    TreeSet<Size> sizes=new TreeSet<>();
    sizes.addAll(getAvailableCaptureResolutions());
  }
  return mCaptureSize;
}",0.407949790794979
170577,"/** 
 * Decodes an input byte array and outputs a Bitmap that is ready to be displayed. The difference with   {@link android.graphics.BitmapFactory#decodeByteArray(byte[],int,int)}is that this cares about orientation, reading it from the EXIF header. This is executed in a background thread, and returns the result to the original thread. This ignores flipping at the moment. TODO care about flipping using Matrix.scale()
 * @param source a JPEG byte array
 * @param callback a callback to be notified
 */
public static void decodeBitmap(final byte[] source,final BitmapCallback callback){
  final Handler ui=new Handler();
  new Thread(new Runnable(){
    @Override public void run(){
      int orientation=0;
      boolean flip=false;
      try {
        ExifInterface exif=new ExifInterface(new ByteArrayInputStream(source));
        Integer exifOrientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL);
switch (exifOrientation) {
case ExifInterface.ORIENTATION_NORMAL:
case ExifInterface.ORIENTATION_FLIP_HORIZONTAL:
          orientation=0;
        break;
case ExifInterface.ORIENTATION_ROTATE_180:
case ExifInterface.ORIENTATION_FLIP_VERTICAL:
      orientation=180;
    break;
case ExifInterface.ORIENTATION_ROTATE_90:
case ExifInterface.ORIENTATION_TRANSPOSE:
  orientation=90;
break;
case ExifInterface.ORIENTATION_ROTATE_270:
case ExifInterface.ORIENTATION_TRANSVERSE:
orientation=270;
break;
default :
orientation=0;
}
flip=exifOrientation == ExifInterface.ORIENTATION_FLIP_HORIZONTAL || exifOrientation == ExifInterface.ORIENTATION_FLIP_VERTICAL || exifOrientation == ExifInterface.ORIENTATION_TRANSPOSE || exifOrientation == ExifInterface.ORIENTATION_TRANSVERSE;
}
 catch (IOException e) {
e.printStackTrace();
orientation=0;
flip=false;
}
Bitmap bitmap=BitmapFactory.decodeByteArray(source,0,source.length);
if (orientation != 0 || flip) {
Matrix matrix=new Matrix();
matrix.setRotate(orientation);
Bitmap temp=bitmap;
bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
temp.recycle();
}
final Bitmap result=bitmap;
ui.post(new Runnable(){
@Override public void run(){
callback.onBitmapReady(result);
}
}
);
}
}
).start();
}","static Bitmap decodeBitmap(byte[] source){
  int orientation;
  boolean flip;
  InputStream stream=null;
  try {
    stream=new ByteArrayInputStream(source);
    ExifInterface exif=new ExifInterface(stream);
    Integer exifOrientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL);
switch (exifOrientation) {
case ExifInterface.ORIENTATION_NORMAL:
case ExifInterface.ORIENTATION_FLIP_HORIZONTAL:
      orientation=0;
    break;
case ExifInterface.ORIENTATION_ROTATE_180:
case ExifInterface.ORIENTATION_FLIP_VERTICAL:
  orientation=180;
break;
case ExifInterface.ORIENTATION_ROTATE_90:
case ExifInterface.ORIENTATION_TRANSPOSE:
orientation=90;
break;
case ExifInterface.ORIENTATION_ROTATE_270:
case ExifInterface.ORIENTATION_TRANSVERSE:
orientation=270;
break;
default :
orientation=0;
}
flip=exifOrientation == ExifInterface.ORIENTATION_FLIP_HORIZONTAL || exifOrientation == ExifInterface.ORIENTATION_FLIP_VERTICAL || exifOrientation == ExifInterface.ORIENTATION_TRANSPOSE || exifOrientation == ExifInterface.ORIENTATION_TRANSVERSE;
}
 catch (IOException e) {
e.printStackTrace();
orientation=0;
flip=false;
}
 finally {
if (stream != null) {
try {
stream.close();
}
 catch (Exception e) {
}
}
}
Bitmap bitmap=BitmapFactory.decodeByteArray(source,0,source.length);
if (orientation != 0 || flip) {
Matrix matrix=new Matrix();
matrix.setRotate(orientation);
Bitmap temp=bitmap;
bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
temp.recycle();
}
return bitmap;
}",0.6737683089214381
170578,"@Override public void run(){
  callback.onBitmapReady(result);
}","@Override public void run(){
  callback.onBitmapReady(bitmap);
}",0.921875
170579,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  mDisplayOrientationDetector.enable(ViewCompat.isAttachedToWindow(this) ? DisplayManagerCompat.getInstance(getContext()).getDisplay(Display.DEFAULT_DISPLAY) : null);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (!isInEditMode()) {
    mDisplayOrientationDetector.enable(ViewCompat.isAttachedToWindow(this) ? DisplayManagerCompat.getInstance(getContext()).getDisplay(Display.DEFAULT_DISPLAY) : null);
  }
}",0.9404990403071016
170580,"@SuppressWarnings(""String_Node_Str"") public CameraView(@NonNull Context context,@Nullable AttributeSet attrs){
  super(context,attrs);
  if (attrs != null) {
    TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CameraView,0,0);
    try {
      mFacing=a.getInteger(R.styleable.CameraView_ckFacing,CameraKit.Defaults.DEFAULT_FACING);
      mFlash=a.getInteger(R.styleable.CameraView_ckFlash,CameraKit.Defaults.DEFAULT_FLASH);
      mFocus=a.getInteger(R.styleable.CameraView_ckFocus,CameraKit.Defaults.DEFAULT_FOCUS);
      mMethod=a.getInteger(R.styleable.CameraView_ckMethod,CameraKit.Defaults.DEFAULT_METHOD);
      mZoom=a.getInteger(R.styleable.CameraView_ckZoom,CameraKit.Defaults.DEFAULT_ZOOM);
      mPermissions=a.getInteger(R.styleable.CameraView_ckPermissions,CameraKit.Defaults.DEFAULT_PERMISSIONS);
      mVideoQuality=a.getInteger(R.styleable.CameraView_ckVideoQuality,CameraKit.Defaults.DEFAULT_VIDEO_QUALITY);
      mJpegQuality=a.getInteger(R.styleable.CameraView_ckJpegQuality,CameraKit.Defaults.DEFAULT_JPEG_QUALITY);
      mCropOutput=a.getBoolean(R.styleable.CameraView_ckCropOutput,CameraKit.Defaults.DEFAULT_CROP_OUTPUT);
      mAdjustViewBounds=a.getBoolean(R.styleable.CameraView_android_adjustViewBounds,CameraKit.Defaults.DEFAULT_ADJUST_VIEW_BOUNDS);
    }
  finally {
      a.recycle();
    }
  }
  mCameraListener=new CameraListenerMiddleWare();
  mPreviewImpl=new TextureViewPreview(context,this);
  mCameraImpl=new Camera1(mCameraListener,mPreviewImpl);
  setFacing(mFacing);
  setFlash(mFlash);
  setFocus(mFocus);
  setMethod(mMethod);
  setZoom(mZoom);
  setPermissions(mPermissions);
  setVideoQuality(mVideoQuality);
  mDisplayOrientationDetector=new DisplayOrientationDetector(context){
    @Override public void onDisplayOrientationChanged(    int displayOrientation){
      mCameraImpl.setDisplayOrientation(displayOrientation);
      mPreviewImpl.setDisplayOrientation(displayOrientation);
    }
  }
;
  final FocusMarkerLayout focusMarkerLayout=new FocusMarkerLayout(getContext());
  addView(focusMarkerLayout);
  focusMarkerLayout.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent motionEvent){
      int action=motionEvent.getAction();
      if (motionEvent.getAction() == MotionEvent.ACTION_UP && mFocus == CameraKit.Constants.FOCUS_TAP_WITH_MARKER) {
        focusMarkerLayout.focus(motionEvent.getX(),motionEvent.getY());
      }
      mPreviewImpl.getView().dispatchTouchEvent(motionEvent);
      return true;
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") public CameraView(@NonNull Context context,@Nullable AttributeSet attrs){
  super(context,attrs);
  if (attrs != null) {
    TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CameraView,0,0);
    try {
      mFacing=a.getInteger(R.styleable.CameraView_ckFacing,CameraKit.Defaults.DEFAULT_FACING);
      mFlash=a.getInteger(R.styleable.CameraView_ckFlash,CameraKit.Defaults.DEFAULT_FLASH);
      mFocus=a.getInteger(R.styleable.CameraView_ckFocus,CameraKit.Defaults.DEFAULT_FOCUS);
      mMethod=a.getInteger(R.styleable.CameraView_ckMethod,CameraKit.Defaults.DEFAULT_METHOD);
      mZoom=a.getInteger(R.styleable.CameraView_ckZoom,CameraKit.Defaults.DEFAULT_ZOOM);
      mPermissions=a.getInteger(R.styleable.CameraView_ckPermissions,CameraKit.Defaults.DEFAULT_PERMISSIONS);
      mVideoQuality=a.getInteger(R.styleable.CameraView_ckVideoQuality,CameraKit.Defaults.DEFAULT_VIDEO_QUALITY);
      mJpegQuality=a.getInteger(R.styleable.CameraView_ckJpegQuality,CameraKit.Defaults.DEFAULT_JPEG_QUALITY);
      mCropOutput=a.getBoolean(R.styleable.CameraView_ckCropOutput,CameraKit.Defaults.DEFAULT_CROP_OUTPUT);
      mAdjustViewBounds=a.getBoolean(R.styleable.CameraView_android_adjustViewBounds,CameraKit.Defaults.DEFAULT_ADJUST_VIEW_BOUNDS);
    }
  finally {
      a.recycle();
    }
  }
  mCameraListener=new CameraListenerMiddleWare();
  mPreviewImpl=new TextureViewPreview(context,this);
  mCameraImpl=new Camera1(mCameraListener,mPreviewImpl);
  setFacing(mFacing);
  setFlash(mFlash);
  setFocus(mFocus);
  setMethod(mMethod);
  setZoom(mZoom);
  setPermissions(mPermissions);
  setVideoQuality(mVideoQuality);
  if (!isInEditMode()) {
    mDisplayOrientationDetector=new DisplayOrientationDetector(context){
      @Override public void onDisplayOrientationChanged(      int displayOrientation){
        mCameraImpl.setDisplayOrientation(displayOrientation);
        mPreviewImpl.setDisplayOrientation(displayOrientation);
      }
    }
;
    final FocusMarkerLayout focusMarkerLayout=new FocusMarkerLayout(getContext());
    addView(focusMarkerLayout);
    focusMarkerLayout.setOnTouchListener(new OnTouchListener(){
      @Override public boolean onTouch(      View v,      MotionEvent motionEvent){
        int action=motionEvent.getAction();
        if (motionEvent.getAction() == MotionEvent.ACTION_UP && mFocus == CameraKit.Constants.FOCUS_TAP_WITH_MARKER) {
          focusMarkerLayout.focus(motionEvent.getX(),motionEvent.getY());
        }
        mPreviewImpl.getView().dispatchTouchEvent(motionEvent);
        return true;
      }
    }
);
  }
}",0.98124153935409
170581,"@Override protected void onDetachedFromWindow(){
  mDisplayOrientationDetector.disable();
  super.onDetachedFromWindow();
}","@Override protected void onDetachedFromWindow(){
  if (!isInEditMode()) {
    mDisplayOrientationDetector.disable();
  }
  super.onDetachedFromWindow();
}",0.8880866425992779
170582,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  mDisplayOrientationDetector.enable(ViewCompat.isAttachedToWindow(this) ? DisplayManagerCompat.getInstance(getContext()).getDisplay(Display.DEFAULT_DISPLAY) : null);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (!isInEditMode()) {
    mDisplayOrientationDetector.enable(ViewCompat.isAttachedToWindow(this) ? DisplayManagerCompat.getInstance(getContext()).getDisplay(Display.DEFAULT_DISPLAY) : null);
  }
}",0.9404990403071016
170583,"@SuppressWarnings(""String_Node_Str"") public CameraView(@NonNull Context context,@Nullable AttributeSet attrs){
  super(context,attrs);
  if (attrs != null) {
    TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CameraView,0,0);
    try {
      mFacing=a.getInteger(R.styleable.CameraView_ckFacing,CameraKit.Defaults.DEFAULT_FACING);
      mFlash=a.getInteger(R.styleable.CameraView_ckFlash,CameraKit.Defaults.DEFAULT_FLASH);
      mFocus=a.getInteger(R.styleable.CameraView_ckFocus,CameraKit.Defaults.DEFAULT_FOCUS);
      mMethod=a.getInteger(R.styleable.CameraView_ckMethod,CameraKit.Defaults.DEFAULT_METHOD);
      mZoom=a.getInteger(R.styleable.CameraView_ckZoom,CameraKit.Defaults.DEFAULT_ZOOM);
      mPermissions=a.getInteger(R.styleable.CameraView_ckPermissions,CameraKit.Defaults.DEFAULT_PERMISSIONS);
      mVideoQuality=a.getInteger(R.styleable.CameraView_ckVideoQuality,CameraKit.Defaults.DEFAULT_VIDEO_QUALITY);
      mJpegQuality=a.getInteger(R.styleable.CameraView_ckJpegQuality,CameraKit.Defaults.DEFAULT_JPEG_QUALITY);
      mCropOutput=a.getBoolean(R.styleable.CameraView_ckCropOutput,CameraKit.Defaults.DEFAULT_CROP_OUTPUT);
      mAdjustViewBounds=a.getBoolean(R.styleable.CameraView_android_adjustViewBounds,CameraKit.Defaults.DEFAULT_ADJUST_VIEW_BOUNDS);
    }
  finally {
      a.recycle();
    }
  }
  mCameraListener=new CameraListenerMiddleWare();
  mPreviewImpl=new TextureViewPreview(context,this);
  mCameraImpl=new Camera1(mCameraListener,mPreviewImpl);
  setFacing(mFacing);
  setFlash(mFlash);
  setFocus(mFocus);
  setMethod(mMethod);
  setZoom(mZoom);
  setPermissions(mPermissions);
  setVideoQuality(mVideoQuality);
  mDisplayOrientationDetector=new DisplayOrientationDetector(context){
    @Override public void onDisplayOrientationChanged(    int displayOrientation){
      mCameraImpl.setDisplayOrientation(displayOrientation);
      mPreviewImpl.setDisplayOrientation(displayOrientation);
    }
  }
;
  final FocusMarkerLayout focusMarkerLayout=new FocusMarkerLayout(getContext());
  addView(focusMarkerLayout);
  focusMarkerLayout.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent motionEvent){
      int action=motionEvent.getAction();
      if (motionEvent.getAction() == MotionEvent.ACTION_UP && mFocus == CameraKit.Constants.FOCUS_TAP_WITH_MARKER) {
        focusMarkerLayout.focus(motionEvent.getX(),motionEvent.getY());
      }
      mPreviewImpl.getView().dispatchTouchEvent(motionEvent);
      return true;
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") public CameraView(@NonNull Context context,@Nullable AttributeSet attrs){
  super(context,attrs);
  if (attrs != null) {
    TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CameraView,0,0);
    try {
      mFacing=a.getInteger(R.styleable.CameraView_ckFacing,CameraKit.Defaults.DEFAULT_FACING);
      mFlash=a.getInteger(R.styleable.CameraView_ckFlash,CameraKit.Defaults.DEFAULT_FLASH);
      mFocus=a.getInteger(R.styleable.CameraView_ckFocus,CameraKit.Defaults.DEFAULT_FOCUS);
      mMethod=a.getInteger(R.styleable.CameraView_ckMethod,CameraKit.Defaults.DEFAULT_METHOD);
      mZoom=a.getInteger(R.styleable.CameraView_ckZoom,CameraKit.Defaults.DEFAULT_ZOOM);
      mPermissions=a.getInteger(R.styleable.CameraView_ckPermissions,CameraKit.Defaults.DEFAULT_PERMISSIONS);
      mVideoQuality=a.getInteger(R.styleable.CameraView_ckVideoQuality,CameraKit.Defaults.DEFAULT_VIDEO_QUALITY);
      mJpegQuality=a.getInteger(R.styleable.CameraView_ckJpegQuality,CameraKit.Defaults.DEFAULT_JPEG_QUALITY);
      mCropOutput=a.getBoolean(R.styleable.CameraView_ckCropOutput,CameraKit.Defaults.DEFAULT_CROP_OUTPUT);
      mAdjustViewBounds=a.getBoolean(R.styleable.CameraView_android_adjustViewBounds,CameraKit.Defaults.DEFAULT_ADJUST_VIEW_BOUNDS);
    }
  finally {
      a.recycle();
    }
  }
  mCameraListener=new CameraListenerMiddleWare();
  mPreviewImpl=new TextureViewPreview(context,this);
  mCameraImpl=new Camera1(mCameraListener,mPreviewImpl);
  setFacing(mFacing);
  setFlash(mFlash);
  setFocus(mFocus);
  setMethod(mMethod);
  setZoom(mZoom);
  setPermissions(mPermissions);
  setVideoQuality(mVideoQuality);
  if (!isInEditMode()) {
    mDisplayOrientationDetector=new DisplayOrientationDetector(context){
      @Override public void onDisplayOrientationChanged(      int displayOrientation){
        mCameraImpl.setDisplayOrientation(displayOrientation);
        mPreviewImpl.setDisplayOrientation(displayOrientation);
      }
    }
;
  }
  final FocusMarkerLayout focusMarkerLayout=new FocusMarkerLayout(getContext());
  addView(focusMarkerLayout);
  focusMarkerLayout.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent motionEvent){
      int action=motionEvent.getAction();
      if (motionEvent.getAction() == MotionEvent.ACTION_UP && mFocus == CameraKit.Constants.FOCUS_TAP_WITH_MARKER) {
        focusMarkerLayout.focus(motionEvent.getX(),motionEvent.getY());
      }
      mPreviewImpl.getView().dispatchTouchEvent(motionEvent);
      return true;
    }
  }
);
}",0.991639121135524
170584,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  mDisplayOrientationDetector.enable(ViewCompat.isAttachedToWindow(this) ? DisplayManagerCompat.getInstance(getContext()).getDisplay(Display.DEFAULT_DISPLAY) : null);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (!isInEditMode()) {
    mDisplayOrientationDetector.enable(ViewCompat.isAttachedToWindow(this) ? DisplayManagerCompat.getInstance(getContext()).getDisplay(Display.DEFAULT_DISPLAY) : null);
  }
}",0.9404990403071016
170585,"@SuppressWarnings(""String_Node_Str"") public CameraView(@NonNull Context context,@Nullable AttributeSet attrs){
  super(context,attrs);
  if (attrs != null) {
    TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CameraView,0,0);
    try {
      mFacing=a.getInteger(R.styleable.CameraView_ckFacing,CameraKit.Defaults.DEFAULT_FACING);
      mFlash=a.getInteger(R.styleable.CameraView_ckFlash,CameraKit.Defaults.DEFAULT_FLASH);
      mFocus=a.getInteger(R.styleable.CameraView_ckFocus,CameraKit.Defaults.DEFAULT_FOCUS);
      mMethod=a.getInteger(R.styleable.CameraView_ckMethod,CameraKit.Defaults.DEFAULT_METHOD);
      mZoom=a.getInteger(R.styleable.CameraView_ckZoom,CameraKit.Defaults.DEFAULT_ZOOM);
      mPermissions=a.getInteger(R.styleable.CameraView_ckPermissions,CameraKit.Defaults.DEFAULT_PERMISSIONS);
      mVideoQuality=a.getInteger(R.styleable.CameraView_ckVideoQuality,CameraKit.Defaults.DEFAULT_VIDEO_QUALITY);
      mJpegQuality=a.getInteger(R.styleable.CameraView_ckJpegQuality,CameraKit.Defaults.DEFAULT_JPEG_QUALITY);
      mCropOutput=a.getBoolean(R.styleable.CameraView_ckCropOutput,CameraKit.Defaults.DEFAULT_CROP_OUTPUT);
      mAdjustViewBounds=a.getBoolean(R.styleable.CameraView_android_adjustViewBounds,CameraKit.Defaults.DEFAULT_ADJUST_VIEW_BOUNDS);
    }
  finally {
      a.recycle();
    }
  }
  mCameraListener=new CameraListenerMiddleWare();
  mPreviewImpl=new TextureViewPreview(context,this);
  mCameraImpl=new Camera1(mCameraListener,mPreviewImpl);
  setFacing(mFacing);
  setFlash(mFlash);
  setFocus(mFocus);
  setMethod(mMethod);
  setZoom(mZoom);
  setPermissions(mPermissions);
  setVideoQuality(mVideoQuality);
  mDisplayOrientationDetector=new DisplayOrientationDetector(context){
    @Override public void onDisplayOrientationChanged(    int displayOrientation){
      mCameraImpl.setDisplayOrientation(displayOrientation);
      mPreviewImpl.setDisplayOrientation(displayOrientation);
    }
  }
;
  final FocusMarkerLayout focusMarkerLayout=new FocusMarkerLayout(getContext());
  addView(focusMarkerLayout);
  focusMarkerLayout.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent motionEvent){
      int action=motionEvent.getAction();
      if (motionEvent.getAction() == MotionEvent.ACTION_UP && mFocus == CameraKit.Constants.FOCUS_TAP_WITH_MARKER) {
        focusMarkerLayout.focus(motionEvent.getX(),motionEvent.getY());
      }
      mPreviewImpl.getView().dispatchTouchEvent(motionEvent);
      return true;
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") public CameraView(@NonNull Context context,@Nullable AttributeSet attrs){
  super(context,attrs);
  if (attrs != null) {
    TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CameraView,0,0);
    try {
      mFacing=a.getInteger(R.styleable.CameraView_ckFacing,CameraKit.Defaults.DEFAULT_FACING);
      mFlash=a.getInteger(R.styleable.CameraView_ckFlash,CameraKit.Defaults.DEFAULT_FLASH);
      mFocus=a.getInteger(R.styleable.CameraView_ckFocus,CameraKit.Defaults.DEFAULT_FOCUS);
      mMethod=a.getInteger(R.styleable.CameraView_ckMethod,CameraKit.Defaults.DEFAULT_METHOD);
      mZoom=a.getInteger(R.styleable.CameraView_ckZoom,CameraKit.Defaults.DEFAULT_ZOOM);
      mPermissions=a.getInteger(R.styleable.CameraView_ckPermissions,CameraKit.Defaults.DEFAULT_PERMISSIONS);
      mVideoQuality=a.getInteger(R.styleable.CameraView_ckVideoQuality,CameraKit.Defaults.DEFAULT_VIDEO_QUALITY);
      mJpegQuality=a.getInteger(R.styleable.CameraView_ckJpegQuality,CameraKit.Defaults.DEFAULT_JPEG_QUALITY);
      mCropOutput=a.getBoolean(R.styleable.CameraView_ckCropOutput,CameraKit.Defaults.DEFAULT_CROP_OUTPUT);
      mAdjustViewBounds=a.getBoolean(R.styleable.CameraView_android_adjustViewBounds,CameraKit.Defaults.DEFAULT_ADJUST_VIEW_BOUNDS);
    }
  finally {
      a.recycle();
    }
  }
  mCameraListener=new CameraListenerMiddleWare();
  mPreviewImpl=new TextureViewPreview(context,this);
  mCameraImpl=new Camera1(mCameraListener,mPreviewImpl);
  setFacing(mFacing);
  setFlash(mFlash);
  setFocus(mFocus);
  setMethod(mMethod);
  setZoom(mZoom);
  setPermissions(mPermissions);
  setVideoQuality(mVideoQuality);
  if (!isInEditMode()) {
    mDisplayOrientationDetector=new DisplayOrientationDetector(context){
      @Override public void onDisplayOrientationChanged(      int displayOrientation){
        mCameraImpl.setDisplayOrientation(displayOrientation);
        mPreviewImpl.setDisplayOrientation(displayOrientation);
      }
    }
;
  }
  final FocusMarkerLayout focusMarkerLayout=new FocusMarkerLayout(getContext());
  addView(focusMarkerLayout);
  focusMarkerLayout.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent motionEvent){
      int action=motionEvent.getAction();
      if (motionEvent.getAction() == MotionEvent.ACTION_UP && mFocus == CameraKit.Constants.FOCUS_TAP_WITH_MARKER) {
        focusMarkerLayout.focus(motionEvent.getX(),motionEvent.getY());
      }
      mPreviewImpl.getView().dispatchTouchEvent(motionEvent);
      return true;
    }
  }
);
}",0.991639121135524
170586,"/** 
 * As far as I can see, this extends either width or height of the surface, to match the desired aspect ratio. This means that the external part of the surface will be cropped by the outer view.
 */
protected void refreshScale(){
  getView().post(new Runnable(){
    @Override public void run(){
      if (mDesiredWidth != 0 && mDesiredHeight != 0) {
        AspectRatio aspectRatio=AspectRatio.of(mDesiredWidth,mDesiredHeight);
        int targetHeight=(int)(getView().getWidth() * aspectRatio.toFloat());
        float scaleY;
        if (getView().getHeight() > 0) {
          scaleY=(float)targetHeight / (float)getView().getHeight();
        }
 else {
          scaleY=1;
        }
        if (scaleY > 1) {
          getView().setScaleX(1);
          getView().setScaleY(scaleY);
        }
 else {
          getView().setScaleX(1 / scaleY);
          getView().setScaleY(1);
        }
      }
    }
  }
);
}","/** 
 * As far as I can see, this extends either width or height of the surface, to match the desired aspect ratio. This means that the external part of the surface will be cropped by the outer view.
 */
private void refreshScale(){
  getView().post(new Runnable(){
    @Override public void run(){
      if (mDesiredWidth != 0 && mDesiredHeight != 0) {
        AspectRatio aspectRatio=AspectRatio.of(mDesiredWidth,mDesiredHeight);
        float targetHeight=(float)mSurfaceWidth / aspectRatio.toFloat();
        float scale=1;
        if (mSurfaceHeight > 0) {
          scale=targetHeight / (float)mSurfaceHeight;
        }
        if (scale > 1) {
          getView().setScaleX(1f);
          getView().setScaleY(scale);
        }
 else {
          getView().setScaleX(1f / scale);
          getView().setScaleY(1f);
        }
      }
    }
  }
);
}",0.6338983050847458
170587,"@Override public void run(){
  if (mDesiredWidth != 0 && mDesiredHeight != 0) {
    AspectRatio aspectRatio=AspectRatio.of(mDesiredWidth,mDesiredHeight);
    int targetHeight=(int)(getView().getWidth() * aspectRatio.toFloat());
    float scaleY;
    if (getView().getHeight() > 0) {
      scaleY=(float)targetHeight / (float)getView().getHeight();
    }
 else {
      scaleY=1;
    }
    if (scaleY > 1) {
      getView().setScaleX(1);
      getView().setScaleY(scaleY);
    }
 else {
      getView().setScaleX(1 / scaleY);
      getView().setScaleY(1);
    }
  }
}","@Override public void run(){
  if (mDesiredWidth != 0 && mDesiredHeight != 0) {
    AspectRatio aspectRatio=AspectRatio.of(mDesiredWidth,mDesiredHeight);
    float targetHeight=(float)mSurfaceWidth / aspectRatio.toFloat();
    float scale=1;
    if (mSurfaceHeight > 0) {
      scale=targetHeight / (float)mSurfaceHeight;
    }
    if (scale > 1) {
      getView().setScaleX(1f);
      getView().setScaleY(scale);
    }
 else {
      getView().setScaleX(1f / scale);
      getView().setScaleY(1f);
    }
  }
}",0.4655493482309125
170588,"TextureViewPreview(Context context,ViewGroup parent){
  final View view=View.inflate(context,R.layout.texture_view,parent);
  mTextureView=(TextureView)view.findViewById(R.id.texture_view);
  mTextureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      setSurfaceSize(width,height);
      dispatchSurfaceChanged();
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      setSurfaceSize(width,height);
      dispatchSurfaceChanged();
      refreshScale();
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      setSurfaceSize(0,0);
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
}","TextureViewPreview(Context context,ViewGroup parent){
  final View view=View.inflate(context,R.layout.texture_view,parent);
  mTextureView=(TextureView)view.findViewById(R.id.texture_view);
  mTextureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      setSurfaceSize(width,height);
      dispatchSurfaceChanged();
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      setSurfaceSize(width,height);
      dispatchSurfaceChanged();
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      setSurfaceSize(0,0);
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
}",0.987542468856172
170589,"@Override public void onSurfaceTextureSizeChanged(SurfaceTexture surface,int width,int height){
  setSurfaceSize(width,height);
  dispatchSurfaceChanged();
  refreshScale();
}","@Override public void onSurfaceTextureSizeChanged(SurfaceTexture surface,int width,int height){
  setSurfaceSize(width,height);
  dispatchSurfaceChanged();
}",0.9457831325301204
170590,"@Override void captureImage(){
switch (mMethod) {
case METHOD_STANDARD:
    mCamera.takePicture(null,null,null,new Camera.PictureCallback(){
      @Override public void onPictureTaken(      byte[] data,      Camera camera){
        mCameraListener.onPictureTaken(data);
        camera.startPreview();
      }
    }
);
  break;
case METHOD_STILL:
mCamera.setOneShotPreviewCallback(new Camera.PreviewCallback(){
  @Override public void onPreviewFrame(  byte[] data,  Camera camera){
    new Thread(new ProcessStillTask(data,camera,mCameraInfo,new ProcessStillTask.OnStillProcessedListener(){
      @Override public void onStillProcessed(      final YuvImage yuv){
        mCameraListener.onPictureTaken(yuv);
      }
    }
)).start();
  }
}
);
break;
}
}","@Override void captureImage(){
switch (mMethod) {
case METHOD_STANDARD:
    mCamera.takePicture(null,null,null,new Camera.PictureCallback(){
      @Override public void onPictureTaken(      byte[] data,      Camera camera){
        mCameraListener.onPictureTaken(data);
        camera.startPreview();
      }
    }
);
  break;
case METHOD_STILL:
mCamera.setOneShotPreviewCallback(new Camera.PreviewCallback(){
  @Override public void onPreviewFrame(  byte[] data,  Camera camera){
    new Thread(new ProcessStillTask(data,camera,calculateCaptureRotation(),new ProcessStillTask.OnStillProcessedListener(){
      @Override public void onStillProcessed(      final YuvImage yuv){
        mCameraListener.onPictureTaken(yuv);
      }
    }
)).start();
  }
}
);
break;
}
}",0.9756418696510862
170591,"private void openCamera(){
  if (mCamera != null) {
    releaseCamera();
  }
  mCamera=Camera.open(mCameraId);
  mCameraParameters=mCamera.getParameters();
  adjustCameraParameters();
  mCamera.setDisplayOrientation(calculateCameraRotation(mDisplayOrientation));
  mCameraListener.onCameraOpened();
}","private void openCamera(){
  if (mCamera != null) {
    releaseCamera();
  }
  mCamera=Camera.open(mCameraId);
  mCameraParameters=mCamera.getParameters();
  adjustCameraParameters();
  mCamera.setDisplayOrientation(calculatePreviewRotation());
  mCameraListener.onCameraOpened();
}",0.8419243986254296
170592,"@Override public void onPreviewFrame(byte[] data,Camera camera){
  new Thread(new ProcessStillTask(data,camera,mCameraInfo,new ProcessStillTask.OnStillProcessedListener(){
    @Override public void onStillProcessed(    final YuvImage yuv){
      mCameraListener.onPictureTaken(yuv);
    }
  }
)).start();
}","@Override public void onPreviewFrame(byte[] data,Camera camera){
  new Thread(new ProcessStillTask(data,camera,calculateCaptureRotation(),new ProcessStillTask.OnStillProcessedListener(){
    @Override public void onStillProcessed(    final YuvImage yuv){
      mCameraListener.onPictureTaken(yuv);
    }
  }
)).start();
}",0.9473684210526316
170593,"private void adjustCameraParameters(){
  boolean invertPreviewSizes=mDisplayOrientation % 180 != 0;
  mPreview.setTruePreviewSize(invertPreviewSizes ? getPreviewResolution().getHeight() : getPreviewResolution().getWidth(),invertPreviewSizes ? getPreviewResolution().getWidth() : getPreviewResolution().getHeight());
  mCameraParameters.setPreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPictureSize(getCaptureResolution().getWidth(),getCaptureResolution().getHeight());
  int rotation=(calculateCameraRotation(mDisplayOrientation) + (mFacing == CameraKit.Constants.FACING_FRONT ? 180 : 0)) % 360;
  mCameraParameters.setRotation(rotation);
  setFocus(mFocus);
  setFlash(mFlash);
  mCamera.setParameters(mCameraParameters);
}","private void adjustCameraParameters(){
  boolean invertPreviewSizes=mDisplayOrientation % 180 != 0;
  mPreview.setTruePreviewSize(invertPreviewSizes ? getPreviewResolution().getHeight() : getPreviewResolution().getWidth(),invertPreviewSizes ? getPreviewResolution().getWidth() : getPreviewResolution().getHeight());
  mCameraParameters.setPreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPictureSize(getCaptureResolution().getWidth(),getCaptureResolution().getHeight());
  int rotation=calculateCaptureRotation();
  mCameraParameters.setRotation(rotation);
  setFocus(mFocus);
  setFlash(mFlash);
  mCamera.setParameters(mCameraParameters);
}",0.8259109311740891
170594,"public ProcessStillTask(byte[] data,Camera camera,Camera.CameraInfo cameraInfo,OnStillProcessedListener onStillProcessedListener){
  this.data=data;
  this.camera=camera;
  this.cameraInfo=cameraInfo;
  this.onStillProcessedListener=onStillProcessedListener;
}","public ProcessStillTask(byte[] data,Camera camera,int rotation,OnStillProcessedListener onStillProcessedListener){
  this.data=data;
  this.camera=camera;
  this.rotation=rotation;
  this.onStillProcessedListener=onStillProcessedListener;
}",0.844
170595,"@Override public void run(){
  Camera.Parameters parameters=camera.getParameters();
  int width=parameters.getPreviewSize().width;
  int height=parameters.getPreviewSize().height;
  int rotation=cameraInfo.orientation;
  byte[] rotatedData=new Rotation(data,width,height,rotation).getYuv();
  int postWidth;
  int postHeight;
switch (rotation) {
case 90:
case 270:
    postWidth=height;
  postHeight=width;
break;
case 0:
case 180:
default :
postWidth=width;
postHeight=height;
break;
}
YuvImage yuv=new YuvImage(rotatedData,parameters.getPreviewFormat(),postWidth,postHeight,null);
onStillProcessedListener.onStillProcessed(yuv);
}","@Override public void run(){
  Camera.Parameters parameters=camera.getParameters();
  int width=parameters.getPreviewSize().width;
  int height=parameters.getPreviewSize().height;
  byte[] rotatedData=new Rotation(data,width,height,rotation).getYuv();
  int postWidth;
  int postHeight;
switch (rotation) {
case 90:
case 270:
    postWidth=height;
  postHeight=width;
break;
case 0:
case 180:
default :
postWidth=width;
postHeight=height;
break;
}
YuvImage yuv=new YuvImage(rotatedData,parameters.getPreviewFormat(),postWidth,postHeight,null);
onStillProcessedListener.onStillProcessed(yuv);
}",0.9681632653061224
170596,"private void adjustCameraParameters(){
  mPreview.setTruePreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPictureSize(getCaptureResolution().getWidth(),getCaptureResolution().getHeight());
  int rotation=(calculateCameraRotation(mDisplayOrientation) + (mFacing == CameraKit.Constants.FACING_FRONT ? 180 : 0)) % 360;
  mCameraParameters.setRotation(rotation);
  setFocus(mFocus);
  setFlash(mFlash);
  mCamera.setParameters(mCameraParameters);
}","private void adjustCameraParameters(){
  boolean invertPreviewSizes=mDisplayOrientation % 180 != 0;
  mPreview.setTruePreviewSize(invertPreviewSizes ? getPreviewResolution().getHeight() : getPreviewResolution().getWidth(),invertPreviewSizes ? getPreviewResolution().getWidth() : getPreviewResolution().getHeight());
  mCameraParameters.setPreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPictureSize(getCaptureResolution().getWidth(),getCaptureResolution().getHeight());
  int rotation=(calculateCameraRotation(mDisplayOrientation) + (mFacing == CameraKit.Constants.FACING_FRONT ? 180 : 0)) % 360;
  mCameraParameters.setRotation(rotation);
  setFocus(mFocus);
  setFlash(mFlash);
  mCamera.setParameters(mCameraParameters);
}",0.8733812949640288
170597,"@Override public void onSurfaceTextureAvailable(SurfaceTexture surface,int width,int height){
  setSize(width,height);
  configureTransform();
  dispatchSurfaceChanged();
}","@Override public void onSurfaceTextureAvailable(SurfaceTexture surface,int width,int height){
  setSize(width,height);
  dispatchSurfaceChanged();
}",0.925
170598,"@Override public void onSurfaceTextureSizeChanged(SurfaceTexture surface,int width,int height){
  setSize(width,height);
  configureTransform();
  dispatchSurfaceChanged();
  setTruePreviewSize(mTrueWidth,mTrueHeight);
}","@Override public void onSurfaceTextureSizeChanged(SurfaceTexture surface,int width,int height){
  setSize(width,height);
  dispatchSurfaceChanged();
  setTruePreviewSize(mTrueWidth,mTrueHeight);
}",0.9423076923076924
170599,"@Override void setDisplayOrientation(int displayOrientation){
  mDisplayOrientation=displayOrientation;
  configureTransform();
}","@Override void setDisplayOrientation(int displayOrientation){
  mDisplayOrientation=displayOrientation;
}",0.8974358974358975
170600,"TextureViewPreview(Context context,ViewGroup parent){
  final View view=View.inflate(context,R.layout.texture_view,parent);
  mTextureView=(TextureView)view.findViewById(R.id.texture_view);
  mTextureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      setSize(width,height);
      configureTransform();
      dispatchSurfaceChanged();
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      setSize(width,height);
      configureTransform();
      dispatchSurfaceChanged();
      setTruePreviewSize(mTrueWidth,mTrueHeight);
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      setSize(0,0);
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
}","TextureViewPreview(Context context,ViewGroup parent){
  final View view=View.inflate(context,R.layout.texture_view,parent);
  mTextureView=(TextureView)view.findViewById(R.id.texture_view);
  mTextureView.setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      setSize(width,height);
      dispatchSurfaceChanged();
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      setSize(width,height);
      dispatchSurfaceChanged();
      setTruePreviewSize(mTrueWidth,mTrueHeight);
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      setSize(0,0);
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
}",0.969860064585576
170601,"private void adjustCameraParameters(){
  mPreview.setTruePreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPictureSize(getCaptureResolution().getWidth(),getCaptureResolution().getHeight());
  mCameraParameters.setRotation(calculateCameraRotation(mDisplayOrientation) + (mFacing == CameraKit.Constants.FACING_FRONT ? 180 : 0));
  setFocus(mFocus);
  setFlash(mFlash);
  mCamera.setParameters(mCameraParameters);
}","private void adjustCameraParameters(){
  mPreview.setTruePreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPreviewSize(getPreviewResolution().getWidth(),getPreviewResolution().getHeight());
  mCameraParameters.setPictureSize(getCaptureResolution().getWidth(),getCaptureResolution().getHeight());
  int rotation=(calculateCameraRotation(mDisplayOrientation) + (mFacing == CameraKit.Constants.FACING_FRONT ? 180 : 0)) % 360;
  mCameraParameters.setRotation(rotation);
  setFocus(mFocus);
  setFlash(mFlash);
  mCamera.setParameters(mCameraParameters);
}",0.9229466553767992
170602,"public void cancelAllTask(){
synchronized (mTaskPoolLock) {
    SLogger.i(TAG,""String_Node_Str"");
    if (sTaskPool.size() != 0) {
      for (int i=0; i < sTaskPool.size(); i++) {
        final int key=sTaskPool.keyAt(i);
        SoterTaskThread.getInstance().postToWorker(new Runnable(){
          @Override public void run(){
            BaseSoterTask task=sTaskPool.get(key);
            if (task != null) {
              task.onRemovedFromTaskPoolActively();
            }
          }
        }
);
      }
    }
    sTaskPool.clear();
  }
}","public void cancelAllTask(){
synchronized (mTaskPoolLock) {
    SLogger.i(TAG,""String_Node_Str"");
    if (sTaskPool.size() != 0) {
      for (int i=0; i < sTaskPool.size(); i++) {
        final int key=sTaskPool.keyAt(i);
        SoterTaskThread.getInstance().postToWorker(new Runnable(){
          @Override public void run(){
synchronized (mTaskPoolLock) {
              BaseSoterTask task=sTaskPool.get(key);
              if (task != null) {
                task.onRemovedFromTaskPoolActively();
              }
            }
          }
        }
);
      }
    }
    sTaskPool.clear();
  }
}",0.8326029798422436
170603,"public void publishAuthCancellation(){
synchronized (mTaskPoolLock) {
    SLogger.i(TAG,""String_Node_Str"");
    if (sTaskPool.size() != 0) {
      for (int i=0; i < sTaskPool.size(); i++) {
        final int key=sTaskPool.keyAt(i);
        SoterTaskThread.getInstance().postToWorker(new Runnable(){
          @Override public void run(){
            BaseSoterTask task=sTaskPool.get(key);
            if (task != null && (task instanceof AuthCancellationCallable)) {
              if (!((AuthCancellationCallable)task).isCancelled()) {
                ((AuthCancellationCallable)task).callCancellationInternal();
              }
            }
          }
        }
);
      }
    }
  }
}","public void publishAuthCancellation(){
synchronized (mTaskPoolLock) {
    SLogger.i(TAG,""String_Node_Str"");
    if (sTaskPool.size() != 0) {
      for (int i=0; i < sTaskPool.size(); i++) {
        final int key=sTaskPool.keyAt(i);
        SoterTaskThread.getInstance().postToWorker(new Runnable(){
          @Override public void run(){
synchronized (mTaskPoolLock) {
              BaseSoterTask task=sTaskPool.get(key);
              if (task != null && (task instanceof AuthCancellationCallable)) {
                if (!((AuthCancellationCallable)task).isCancelled()) {
                  ((AuthCancellationCallable)task).callCancellationInternal();
                }
              }
            }
          }
        }
);
      }
    }
  }
}",0.960167714884696
170604,"@Override public void run(){
  BaseSoterTask task=sTaskPool.get(key);
  if (task != null && (task instanceof AuthCancellationCallable)) {
    if (!((AuthCancellationCallable)task).isCancelled()) {
      ((AuthCancellationCallable)task).callCancellationInternal();
    }
  }
}","@Override public void run(){
synchronized (mTaskPoolLock) {
    BaseSoterTask task=sTaskPool.get(key);
    if (task != null && (task instanceof AuthCancellationCallable)) {
      if (!((AuthCancellationCallable)task).isCancelled()) {
        ((AuthCancellationCallable)task).callCancellationInternal();
      }
    }
  }
}",0.9212730318257956
170605,"/** 
 * Add the task to the task pool and execute
 * @param task The task to add and
 * @return true if added and executed successfully
 */
public boolean addToTask(final BaseSoterTask task,SoterProcessResultBase instanceOnError){
  if (task == null) {
    SLogger.e(TAG,""String_Node_Str"");
    return false;
  }
  if (instanceOnError == null) {
    SLogger.e(TAG,""String_Node_Str"");
    return false;
  }
  boolean isEat=task.preExecute();
  if (!isEat) {
    int taskClassIndex=task.hashCode();
    if (!task.isSingleInstance()) {
      SLogger.i(TAG,""String_Node_Str"");
synchronized (mTaskPoolLock) {
        sTaskPool.put(taskClassIndex,task);
      }
      SoterTaskThread.getInstance().postToWorker(new Runnable(){
        @Override public void run(){
          task.execute();
        }
      }
);
      return true;
    }
 else {
synchronized (mTaskPoolLock) {
        for (int i=0; i < sTaskPool.size(); i++) {
          int key=sTaskPool.keyAt(i);
          if (sTaskPool.get(key).getClass().getName().equals(task.getClass().getName())) {
            SLogger.w(TAG,""String_Node_Str"");
            instanceOnError.setErrCode(ERR_ADD_TASK_FAILED);
            instanceOnError.setErrMsg(""String_Node_Str"");
            task.callback(instanceOnError);
            return false;
          }
        }
        sTaskPool.put(taskClassIndex,task);
      }
      SoterTaskThread.getInstance().postToWorker(new Runnable(){
        @Override public void run(){
          task.execute();
        }
      }
);
      return true;
    }
  }
 else {
    SLogger.d(TAG,""String_Node_Str"");
    return false;
  }
}","/** 
 * Add the task to the task pool and execute
 * @param task The task to add and
 * @return true if added and executed successfully
 */
public boolean addToTask(final BaseSoterTask task,SoterProcessResultBase instanceOnError){
  if (task == null) {
    SLogger.e(TAG,""String_Node_Str"");
    return false;
  }
  if (instanceOnError == null) {
    SLogger.e(TAG,""String_Node_Str"");
    return false;
  }
  boolean isEat=task.preExecute();
  if (!isEat) {
    int taskClassIndex=task.hashCode();
    if (!task.isSingleInstance()) {
      SLogger.i(TAG,""String_Node_Str"");
synchronized (mTaskPoolLock) {
        sTaskPool.put(taskClassIndex,task);
      }
      SoterTaskThread.getInstance().postToWorker(new Runnable(){
        @Override public void run(){
          task.execute();
        }
      }
);
      return true;
    }
 else {
synchronized (mTaskPoolLock) {
        for (int i=0; i < sTaskPool.size(); i++) {
          int key=sTaskPool.keyAt(i);
          if (sTaskPool.get(key) != null && sTaskPool.get(key).getClass().getName().equals(task.getClass().getName())) {
            SLogger.w(TAG,""String_Node_Str"");
            instanceOnError.setErrCode(ERR_ADD_TASK_FAILED);
            instanceOnError.setErrMsg(""String_Node_Str"");
            task.callback(instanceOnError);
            return false;
          }
        }
        sTaskPool.put(taskClassIndex,task);
      }
      SoterTaskThread.getInstance().postToWorker(new Runnable(){
        @Override public void run(){
          task.execute();
        }
      }
);
      return true;
    }
  }
 else {
    SLogger.d(TAG,""String_Node_Str"");
    return false;
  }
}",0.9907407407407408
170606,"private SoterTaskThread(){
  HandlerThread taskHandlerThread=new HandlerThread(HANDLER_THREAD_NAME);
  taskHandlerThread.start();
  mTaskHandler=new Handler(taskHandlerThread.getLooper());
  mMainLooperHandler=new Handler(Looper.getMainLooper());
}","private SoterTaskThread(){
  HandlerThread taskHandlerThread=new HandlerThread(HANDLER_THREAD_NAME);
  taskHandlerThread.start();
  Looper taskLooper=taskHandlerThread.getLooper();
  if (taskLooper != null) {
    mTaskHandler=new Handler(taskHandlerThread.getLooper());
  }
 else {
    SLogger.e(TAG,""String_Node_Str"");
    mTaskHandler=new Handler(Looper.getMainLooper());
  }
  mMainLooperHandler=new Handler(Looper.getMainLooper());
}",0.724087591240876
170607,"@Override public void onAuthenticationSucceeded(FingerprintManagerCompat.AuthenticationResult result){
  SLogger.i(TAG,""String_Node_Str"");
  SoterTaskThread.getInstance().postToWorker(new Runnable(){
    @Override public void run(){
      if (!SoterCoreUtil.isNullOrNil(mChallenge)) {
        try {
          mSignatureToAuth.update(mChallenge.getBytes());
          executeWhenAuthenticated(mSignatureToAuth);
        }
 catch (        SignatureException e) {
          SLogger.e(TAG,""String_Node_Str"");
          SLogger.printErrStackTrace(TAG,e,""String_Node_Str"");
          onAuthenticationError(-1000,""String_Node_Str"");
        }
      }
 else {
        SLogger.e(TAG,""String_Node_Str"");
        onAuthenticationError(-1000,""String_Node_Str"");
      }
    }
  }
);
  SoterTaskThread.getInstance().postToMainThread(new Runnable(){
    @Override public void run(){
      if (mFingerprintStateCallback != null) {
        mFingerprintStateCallback.onAuthenticationSucceed();
      }
    }
  }
);
  compatLogicWhenDone();
}","@Override public void onAuthenticationSucceeded(FingerprintManagerCompat.AuthenticationResult result){
  SLogger.i(TAG,""String_Node_Str"");
  SoterTaskThread.getInstance().postToWorker(new Runnable(){
    @Override public void run(){
      if (!SoterCoreUtil.isNullOrNil(mChallenge)) {
        try {
          mSignatureToAuth.update(mChallenge.getBytes(Charset.forName(""String_Node_Str"")));
          executeWhenAuthenticated(mSignatureToAuth);
        }
 catch (        SignatureException e) {
          SLogger.e(TAG,""String_Node_Str"");
          SLogger.printErrStackTrace(TAG,e,""String_Node_Str"");
          onAuthenticationError(-1000,""String_Node_Str"");
        }
      }
 else {
        SLogger.e(TAG,""String_Node_Str"");
        onAuthenticationError(-1000,""String_Node_Str"");
      }
    }
  }
);
  SoterTaskThread.getInstance().postToMainThread(new Runnable(){
    @Override public void run(){
      if (mFingerprintStateCallback != null) {
        mFingerprintStateCallback.onAuthenticationSucceed();
      }
    }
  }
);
  compatLogicWhenDone();
}",0.983669548511047
170608,"private String getCompatDistinguishSalt(@NonNull String previousSalt){
  String saltMd5=SoterCoreUtil.getMessageDigest(previousSalt.getBytes());
  if (!SoterCoreUtil.isNullOrNil(saltMd5) && saltMd5.length() >= MAX_SALT_STR_LEN) {
    return saltMd5.substring(0,MAX_SALT_STR_LEN);
  }
  Log.e(TAG,""String_Node_Str"");
  return null;
}","private String getCompatDistinguishSalt(@NonNull String previousSalt){
  String saltMd5=SoterCoreUtil.getMessageDigest(previousSalt.getBytes(Charset.forName(""String_Node_Str"")));
  if (!SoterCoreUtil.isNullOrNil(saltMd5) && saltMd5.length() >= MAX_SALT_STR_LEN) {
    return saltMd5.substring(0,MAX_SALT_STR_LEN);
  }
  Log.e(TAG,""String_Node_Str"");
  return null;
}",0.9512893982808024
170609,"/** 
 * 获取子部门id
 */
@Override public List<Integer> getSubDeptId(Integer deptid){
  Wrapper<Dept> wrapper=new EntityWrapper<>();
  wrapper=wrapper.like(""String_Node_Str"",""String_Node_Str"" + deptid + ""String_Node_Str"");
  List<Dept> depts=this.deptMapper.selectList(wrapper);
  ArrayList<Integer> deptids=new ArrayList<>();
  if (depts != null || depts.size() > 0) {
    for (    Dept dept : depts) {
      deptids.add(dept.getId());
    }
  }
  return deptids;
}","/** 
 * 获取子部门id
 */
@Override public List<Integer> getSubDeptId(Integer deptid){
  Wrapper<Dept> wrapper=new EntityWrapper<>();
  wrapper=wrapper.like(""String_Node_Str"",""String_Node_Str"" + deptid + ""String_Node_Str"");
  List<Dept> depts=this.deptMapper.selectList(wrapper);
  ArrayList<Integer> deptids=new ArrayList<>();
  if (depts != null && depts.size() > 0) {
    for (    Dept dept : depts) {
      deptids.add(dept.getId());
    }
  }
  return deptids;
}",0.9956616052060736
170610,"private Menu createSubMenu(Menu parentMenu){
  Menu menu=new Menu();
  menu.setId(IdWorker.getId());
  menu.setPcode(parentMenu.getCode());
  menu.setPcodes(parentMenu.getPcodes() + ""String_Node_Str"" + parentMenu.getId()+ ""String_Node_Str"");
  menu.setIcon(""String_Node_Str"");
  menu.setNum(99);
  menu.setLevels(3);
  menu.setIsmenu(IsMenu.NO.getCode());
  menu.setStatus(1);
  menu.setIsopen(0);
  return menu;
}","private Menu createSubMenu(Menu parentMenu){
  Menu menu=new Menu();
  menu.setId(IdWorker.getId());
  menu.setPcode(parentMenu.getCode());
  menu.setPcodes(parentMenu.getPcodes() + ""String_Node_Str"" + parentMenu.getCode()+ ""String_Node_Str"");
  menu.setIcon(""String_Node_Str"");
  menu.setNum(99);
  menu.setLevels(3);
  menu.setIsmenu(IsMenu.NO.getCode());
  menu.setStatus(1);
  menu.setIsopen(0);
  return menu;
}",0.9927710843373494
170611,"public String[] getPcodeAndPcodes(){
  if (parentMenuName.equals(""String_Node_Str"")) {
    return new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  PreparedStatement preparedStatement=null;
  try {
    preparedStatement=connection.prepareStatement(""String_Node_Str"");
    preparedStatement.setString(1,""String_Node_Str"" + parentMenuName + ""String_Node_Str"");
    ResultSet results=preparedStatement.executeQuery();
    while (results.next()) {
      String pcode=String.valueOf(results.getLong(""String_Node_Str""));
      String pcodes=results.getString(""String_Node_Str"");
      if (ToolUtil.isNotEmpty(pcode) && ToolUtil.isNotEmpty(pcodes)) {
        String[] strings={pcode,pcodes};
        return strings;
      }
 else {
        return null;
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (preparedStatement != null) {
        preparedStatement.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  return null;
}","public String[] getPcodeAndPcodes(){
  if (parentMenuName.equals(""String_Node_Str"")) {
    return new String[]{""String_Node_Str"",""String_Node_Str""};
  }
  PreparedStatement preparedStatement=null;
  try {
    preparedStatement=connection.prepareStatement(""String_Node_Str"");
    preparedStatement.setString(1,""String_Node_Str"" + parentMenuName + ""String_Node_Str"");
    ResultSet results=preparedStatement.executeQuery();
    while (results.next()) {
      String pcode=results.getString(""String_Node_Str"");
      String pcodes=results.getString(""String_Node_Str"");
      if (ToolUtil.isNotEmpty(pcode) && ToolUtil.isNotEmpty(pcodes)) {
        String[] strings={pcode,pcodes};
        return strings;
      }
 else {
        return null;
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (preparedStatement != null) {
        preparedStatement.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.9611470860314524
170612,"@Override public void onClick(View v){
  HttpUrl url=RetrofitUrlManager.getInstance().fetchDomain(GANK_DOMAIN_NAME);
  if (url == null || !url.equals(HttpUrl.parse(mUrl3.getText().toString()))) {
    RetrofitUrlManager.getInstance().putDomain(DOUBAN_DOMAIN_NAME,mUrl3.getText().toString());
  }
  NetWorkManager.getInstance().getThreeApiService().getBook(1220562).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable disposable) throws Exception {
      mProgressDialog.show();
    }
  }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
    @Override public void run() throws Exception {
      mProgressDialog.dismiss();
    }
  }
).subscribe(new Consumer<ResponseBody>(){
    @Override public void accept(    ResponseBody response) throws Exception {
      String string=response.string();
      Log.d(""String_Node_Str"",string);
      mDisplay.setText(string);
    }
  }
,new Consumer<Throwable>(){
    @Override public void accept(    Throwable throwable) throws Exception {
      throwable.printStackTrace();
      mDisplay.setText(throwable.getMessage());
    }
  }
);
}","@Override public void onClick(View v){
  DomainHolder holder=RetrofitUrlManager.getInstance().fetchDomain(DOUBAN_DOMAIN_NAME);
  if (holder == null || !holder.getUrlStr().equals(mUrl3.getText().toString())) {
    RetrofitUrlManager.getInstance().putDomain(DOUBAN_DOMAIN_NAME,mUrl3.getText().toString());
  }
  NetWorkManager.getInstance().getThreeApiService().getBook(1220562).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable disposable) throws Exception {
      mProgressDialog.show();
    }
  }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
    @Override public void run() throws Exception {
      mProgressDialog.dismiss();
    }
  }
).subscribe(new Consumer<ResponseBody>(){
    @Override public void accept(    ResponseBody response) throws Exception {
      String string=response.string();
      Log.d(""String_Node_Str"",string);
      mDisplay.setText(string);
    }
  }
,new Consumer<Throwable>(){
    @Override public void accept(    Throwable throwable) throws Exception {
      throwable.printStackTrace();
      mDisplay.setText(throwable.getMessage());
    }
  }
);
}",0.966707768187423
170613,"private void initListener(){
  this.mListener=new ChangeListener();
  RetrofitUrlManager.getInstance().registerUrlChangeListener(mListener);
  findViewById(R.id.bt_request1).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HttpUrl url=RetrofitUrlManager.getInstance().fetchDomain(GITHUB_DOMAIN_NAME);
      if (url == null || !url.equals(HttpUrl.parse(mUrl1.getText().toString()))) {
        RetrofitUrlManager.getInstance().putDomain(GITHUB_DOMAIN_NAME,mUrl1.getText().toString());
      }
      NetWorkManager.getInstance().getOneApiService().getUsers(1,10).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable disposable) throws Exception {
          mProgressDialog.show();
        }
      }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
        @Override public void run() throws Exception {
          mProgressDialog.dismiss();
        }
      }
).subscribe(new Consumer<ResponseBody>(){
        @Override public void accept(        ResponseBody response) throws Exception {
          String string=response.string();
          Log.d(""String_Node_Str"",string);
          mDisplay.setText(string);
        }
      }
,new Consumer<Throwable>(){
        @Override public void accept(        Throwable throwable) throws Exception {
          throwable.printStackTrace();
          mDisplay.setText(throwable.getMessage());
        }
      }
);
    }
  }
);
  findViewById(R.id.bt_request2).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HttpUrl url=RetrofitUrlManager.getInstance().fetchDomain(GANK_DOMAIN_NAME);
      if (url == null || !url.equals(HttpUrl.parse(mUrl2.getText().toString()))) {
        RetrofitUrlManager.getInstance().putDomain(GANK_DOMAIN_NAME,mUrl2.getText().toString());
      }
      NetWorkManager.getInstance().getTwoApiService().getData(10,1).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable disposable) throws Exception {
          mProgressDialog.show();
        }
      }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
        @Override public void run() throws Exception {
          mProgressDialog.dismiss();
        }
      }
).subscribe(new Consumer<ResponseBody>(){
        @Override public void accept(        ResponseBody response) throws Exception {
          String string=response.string();
          Log.d(""String_Node_Str"",string);
          mDisplay.setText(string);
        }
      }
,new Consumer<Throwable>(){
        @Override public void accept(        Throwable throwable) throws Exception {
          throwable.printStackTrace();
          mDisplay.setText(throwable.getMessage());
        }
      }
);
    }
  }
);
  findViewById(R.id.bt_request3).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HttpUrl url=RetrofitUrlManager.getInstance().fetchDomain(GANK_DOMAIN_NAME);
      if (url == null || !url.equals(HttpUrl.parse(mUrl3.getText().toString()))) {
        RetrofitUrlManager.getInstance().putDomain(DOUBAN_DOMAIN_NAME,mUrl3.getText().toString());
      }
      NetWorkManager.getInstance().getThreeApiService().getBook(1220562).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable disposable) throws Exception {
          mProgressDialog.show();
        }
      }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
        @Override public void run() throws Exception {
          mProgressDialog.dismiss();
        }
      }
).subscribe(new Consumer<ResponseBody>(){
        @Override public void accept(        ResponseBody response) throws Exception {
          String string=response.string();
          Log.d(""String_Node_Str"",string);
          mDisplay.setText(string);
        }
      }
,new Consumer<Throwable>(){
        @Override public void accept(        Throwable throwable) throws Exception {
          throwable.printStackTrace();
          mDisplay.setText(throwable.getMessage());
        }
      }
);
    }
  }
);
}","private void initListener(){
  this.mListener=new ChangeListener();
  RetrofitUrlManager.getInstance().registerUrlChangeListener(mListener);
  findViewById(R.id.bt_request1).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      DomainHolder holder=RetrofitUrlManager.getInstance().fetchDomain(GITHUB_DOMAIN_NAME);
      if (holder == null || !holder.getUrlStr().equals(mUrl1.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(GITHUB_DOMAIN_NAME,mUrl1.getText().toString());
      }
      NetWorkManager.getInstance().getOneApiService().getUsers(1,10).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable disposable) throws Exception {
          mProgressDialog.show();
        }
      }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
        @Override public void run() throws Exception {
          mProgressDialog.dismiss();
        }
      }
).subscribe(new Consumer<ResponseBody>(){
        @Override public void accept(        ResponseBody response) throws Exception {
          String string=response.string();
          Log.d(""String_Node_Str"",string);
          mDisplay.setText(string);
        }
      }
,new Consumer<Throwable>(){
        @Override public void accept(        Throwable throwable) throws Exception {
          throwable.printStackTrace();
          mDisplay.setText(throwable.getMessage());
        }
      }
);
    }
  }
);
  findViewById(R.id.bt_request2).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      DomainHolder holder=RetrofitUrlManager.getInstance().fetchDomain(GANK_DOMAIN_NAME);
      if (holder == null || !holder.getUrlStr().equals(mUrl2.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(GANK_DOMAIN_NAME,mUrl2.getText().toString());
      }
      NetWorkManager.getInstance().getTwoApiService().getData(10,1).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable disposable) throws Exception {
          mProgressDialog.show();
        }
      }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
        @Override public void run() throws Exception {
          mProgressDialog.dismiss();
        }
      }
).subscribe(new Consumer<ResponseBody>(){
        @Override public void accept(        ResponseBody response) throws Exception {
          String string=response.string();
          Log.d(""String_Node_Str"",string);
          mDisplay.setText(string);
        }
      }
,new Consumer<Throwable>(){
        @Override public void accept(        Throwable throwable) throws Exception {
          throwable.printStackTrace();
          mDisplay.setText(throwable.getMessage());
        }
      }
);
    }
  }
);
  findViewById(R.id.bt_request3).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      DomainHolder holder=RetrofitUrlManager.getInstance().fetchDomain(DOUBAN_DOMAIN_NAME);
      if (holder == null || !holder.getUrlStr().equals(mUrl3.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(DOUBAN_DOMAIN_NAME,mUrl3.getText().toString());
      }
      NetWorkManager.getInstance().getThreeApiService().getBook(1220562).subscribeOn(Schedulers.io()).doOnSubscribe(new Consumer<Disposable>(){
        @Override public void accept(        Disposable disposable) throws Exception {
          mProgressDialog.show();
        }
      }
).subscribeOn(AndroidSchedulers.mainThread()).observeOn(AndroidSchedulers.mainThread()).doAfterTerminate(new Action(){
        @Override public void run() throws Exception {
          mProgressDialog.dismiss();
        }
      }
).subscribe(new Consumer<ResponseBody>(){
        @Override public void accept(        ResponseBody response) throws Exception {
          String string=response.string();
          Log.d(""String_Node_Str"",string);
          mDisplay.setText(string);
        }
      }
,new Consumer<Throwable>(){
        @Override public void accept(        Throwable throwable) throws Exception {
          throwable.printStackTrace();
          mDisplay.setText(throwable.getMessage());
        }
      }
);
    }
  }
);
}",0.9737768191622204
170614,"@Override public HttpUrl parseUrl(String domainUrl){
  return Utils.checkUrl(domainUrl);
}","@Override public HttpUrl parseUrl(HttpUrl domainUrl,HttpUrl url){
  if (null == domainUrl)   return url;
  return url.newBuilder().scheme(domainUrl.scheme()).host(domainUrl.host()).port(domainUrl.port()).build();
}",0.3223684210526316
170615,"/** 
 * 取出对应 DomainName 的 Url
 * @param domainName
 * @return
 */
public HttpUrl fetchDomain(String domainName){
  return mDomainNameHub.get(domainName);
}","/** 
 * 取出对应 DomainName 的 Url
 * @param domainName
 * @return
 */
public DomainHolder fetchDomain(String domainName){
  return mDomainNameHub.get(domainName);
}",0.9523809523809524
170616,"/** 
 * 全局动态替换baseUrl，优先级： Header中配置的url > 全局配置的url
 * @param url
 */
public void setGlobalDomain(String url){
synchronized (mDomainNameHub) {
    mDomainNameHub.put(GLOBAL_DOMAIN_NAME,mUrlParser.parseUrl(url));
  }
}","/** 
 * 全局动态替换baseUrl，优先级： Header中配置的url > 全局配置的url
 * @param url
 */
public void setGlobalDomain(String url){
synchronized (mDomainNameHub) {
    mDomainNameHub.put(GLOBAL_DOMAIN_NAME,new DomainHolder(url));
  }
}",0.9187935034802784
170617,"/** 
 * 存放 Domain 的映射关系
 * @param domainName
 * @param domainUrl
 */
public void putDomain(String domainName,String domainUrl){
synchronized (mDomainNameHub) {
    mDomainNameHub.put(domainName,mUrlParser.parseUrl(domainUrl));
  }
}","/** 
 * 存放 Domain 的映射关系
 * @param domainName
 * @param domainUrl
 */
public void putDomain(String domainName,String domainUrl){
synchronized (mDomainNameHub) {
    mDomainNameHub.put(domainName,new DomainHolder(domainUrl));
  }
}",0.8937093275488069
170618,"/** 
 * 对   {@link Request} 进行一些必要的加工
 * @param request
 * @return
 */
public Request processRequest(Request request){
  boolean hasDomainHeader;
  HttpUrl newUrl=null;
  String domainName=obtainDomainNameFromHeaders(request);
  hasDomainHeader=!TextUtils.isEmpty(domainName) && (newUrl=fetchDomain(domainName)) != null;
  if (!hasDomainHeader) {
    newUrl=fetchDomain(GLOBAL_DOMAIN_NAME);
    if (null == newUrl) {
      return request;
    }
  }
  Log.d(RetrofitUrlManager.TAG,""String_Node_Str"" + newUrl.toString() + ""String_Node_Str""+ request.url().toString()+ ""String_Node_Str"");
  Object[] listeners=listenersToArray();
  if (listeners != null) {
    for (int i=0; i < listeners.length; i++) {
      ((onUrlChangeListener)listeners[i]).onUrlChange(newUrl,request.url());
    }
  }
  return request.newBuilder().removeHeader(DOMAIN_NAME).url(newUrl).build();
}","/** 
 * 对   {@link Request} 进行一些必要的加工
 * @param request
 * @return
 */
public Request processRequest(Request request){
  Request.Builder newBuilder=request.newBuilder();
  String domainName=obtainDomainNameFromHeaders(request);
  DomainHolder holder;
  if (!TextUtils.isEmpty(domainName)) {
    holder=fetchDomain(domainName);
    newBuilder.removeHeader(DOMAIN_NAME);
  }
 else {
    holder=fetchDomain(GLOBAL_DOMAIN_NAME);
  }
  if (null != holder) {
    HttpUrl newUrl=mUrlParser.parseUrl(holder.getDomain(),request.url());
    Log.d(RetrofitUrlManager.TAG,""String_Node_Str"" + newUrl.toString() + ""String_Node_Str""+ request.url().toString()+ ""String_Node_Str"");
    Object[] listeners=listenersToArray();
    if (listeners != null) {
      for (int i=0; i < listeners.length; i++) {
        ((onUrlChangeListener)listeners[i]).onUrlChange(newUrl,request.url());
      }
    }
    return request.newBuilder().url(newUrl).build();
  }
  return newBuilder.build();
}",0.6750409612233752
170619,"/** 
 * 将   {@link RetrofitUrlManager#mDomainNameHub} 中映射的 Url 解析成完整的{@link HttpUrl}用来替换 @  {@link Request#url} 达到动态切换 Url
 * @param domainUrl
 * @return
 */
HttpUrl parseUrl(String domainUrl);","/** 
 * 将   {@link RetrofitUrlManager#mDomainNameHub} 中映射的 Url 解析成完整的{@link HttpUrl}用来替换 @  {@link Request#url} 达到动态切换 Url
 * @param domainUrl
 * @return
 */
HttpUrl parseUrl(HttpUrl domainUrl,HttpUrl url);",0.93734335839599
170620,"public static HttpUrl checkUrl(String url){
  HttpUrl parseUrl=HttpUrl.parse(url);
  if (null == parseUrl) {
    throw new InvalidUrlException(url);
  }
 else {
    return parseUrl;
  }
}","static HttpUrl checkUrl(String url){
  HttpUrl parseUrl=HttpUrl.parse(url);
  if (null == parseUrl) {
    throw new InvalidUrlException(url);
  }
 else {
    return parseUrl;
  }
}",0.9809264305177112
170621,"public void btnSetGlobalUrl(View view){
  DomainHolder domainHolder=RetrofitUrlManager.getInstance().getGlobalDomain();
  if (null == domainHolder || !domainHolder.getUrlStr().equals(mGlobalUrl.getText().toString().trim()))   RetrofitUrlManager.getInstance().setGlobalDomain(mGlobalUrl.getText().toString().trim());
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
}","public void btnSetGlobalUrl(View view){
  HttpUrl httpUrl=RetrofitUrlManager.getInstance().getGlobalDomain();
  if (null == httpUrl || !httpUrl.toString().equals(mGlobalUrl.getText().toString().trim()))   RetrofitUrlManager.getInstance().setGlobalDomain(mGlobalUrl.getText().toString().trim());
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.8792884371029225
170622,"private void initListener(){
  this.mListener=new ChangeListener();
  RetrofitUrlManager.getInstance().registerUrlChangeListener(mListener);
  findViewById(R.id.bt_request1).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      DomainHolder holder=RetrofitUrlManager.getInstance().fetchDomain(GITHUB_DOMAIN_NAME);
      if (holder == null || !holder.getUrlStr().equals(mUrl1.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(GITHUB_DOMAIN_NAME,mUrl1.getText().toString());
      }
      NetWorkManager.getInstance().getOneApiService().getUsers(1,10).compose(MainActivity.this.<ResponseBody>getDefaultTransformer()).subscribe(getDefaultObserver());
    }
  }
);
  findViewById(R.id.bt_request2).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      DomainHolder holder=RetrofitUrlManager.getInstance().fetchDomain(GANK_DOMAIN_NAME);
      if (holder == null || !holder.getUrlStr().equals(mUrl2.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(GANK_DOMAIN_NAME,mUrl2.getText().toString());
      }
      NetWorkManager.getInstance().getTwoApiService().getData(10,1).compose(MainActivity.this.<ResponseBody>getDefaultTransformer()).subscribe(getDefaultObserver());
    }
  }
);
  findViewById(R.id.bt_request3).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      DomainHolder holder=RetrofitUrlManager.getInstance().fetchDomain(DOUBAN_DOMAIN_NAME);
      if (holder == null || !holder.getUrlStr().equals(mUrl3.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(DOUBAN_DOMAIN_NAME,mUrl3.getText().toString());
      }
      NetWorkManager.getInstance().getThreeApiService().getBook(1220562).compose(MainActivity.this.<ResponseBody>getDefaultTransformer()).subscribe(getDefaultObserver());
    }
  }
);
}","private void initListener(){
  this.mListener=new ChangeListener();
  RetrofitUrlManager.getInstance().registerUrlChangeListener(mListener);
  findViewById(R.id.bt_request1).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HttpUrl httpUrl=RetrofitUrlManager.getInstance().fetchDomain(GITHUB_DOMAIN_NAME);
      if (httpUrl == null || !httpUrl.toString().equals(mUrl1.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(GITHUB_DOMAIN_NAME,mUrl1.getText().toString());
      }
      NetWorkManager.getInstance().getOneApiService().getUsers(1,10).compose(MainActivity.this.<ResponseBody>getDefaultTransformer()).subscribe(getDefaultObserver());
    }
  }
);
  findViewById(R.id.bt_request2).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HttpUrl httpUrl=RetrofitUrlManager.getInstance().fetchDomain(GANK_DOMAIN_NAME);
      if (httpUrl == null || !httpUrl.toString().equals(mUrl2.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(GANK_DOMAIN_NAME,mUrl2.getText().toString());
      }
      NetWorkManager.getInstance().getTwoApiService().getData(10,1).compose(MainActivity.this.<ResponseBody>getDefaultTransformer()).subscribe(getDefaultObserver());
    }
  }
);
  findViewById(R.id.bt_request3).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HttpUrl httpUrl=RetrofitUrlManager.getInstance().fetchDomain(DOUBAN_DOMAIN_NAME);
      if (httpUrl == null || !httpUrl.toString().equals(mUrl3.getText().toString())) {
        RetrofitUrlManager.getInstance().putDomain(DOUBAN_DOMAIN_NAME,mUrl3.getText().toString());
      }
      NetWorkManager.getInstance().getThreeApiService().getBook(1220562).compose(MainActivity.this.<ResponseBody>getDefaultTransformer()).subscribe(getDefaultObserver());
    }
  }
);
}",0.9505882352941176
170623,"/** 
 * 重新计算displayMetrics.xhdpi, 使单位pt重定义为设计稿的相对长度
 * @see #activate()
 * @param context
 * @param designWidth 设计稿的宽度
 */
private static void resetDensity(Context context,float designWidth){
  if (context == null)   return;
  Point size=new Point();
  ((WindowManager)context.getSystemService(WINDOW_SERVICE)).getDefaultDisplay().getSize(size);
  Resources resources=context.getResources();
  resources.getDisplayMetrics().xdpi=size.x / designWidth * 72f;
  if (""String_Node_Str"".equals(resources.getClass().getSimpleName())) {
    try {
      Field field=Resources.class.getDeclaredField(""String_Node_Str"");
      field.setAccessible(true);
      DisplayMetrics metrics=(DisplayMetrics)field.get(resources);
      metrics.xdpi=size.x / designWidth * 72f;
    }
 catch (    NoSuchFieldException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * 重新计算displayMetrics.xhdpi, 使单位pt重定义为设计稿的相对长度
 * @see #activate()
 * @param context
 * @param designWidth 设计稿的宽度
 */
private static void resetDensity(Context context,float designWidth){
  if (context == null)   return;
  Point size=new Point();
  ((WindowManager)context.getSystemService(WINDOW_SERVICE)).getDefaultDisplay().getSize(size);
  Resources resources=context.getResources();
  resources.getDisplayMetrics().xdpi=size.x / designWidth * 72f;
  if (""String_Node_Str"".equals(resources.getClass().getSimpleName()) || ""String_Node_Str"".equals(resources.getClass().getSimpleName())) {
    try {
      Field field=Resources.class.getDeclaredField(""String_Node_Str"");
      field.setAccessible(true);
      DisplayMetrics metrics=(DisplayMetrics)field.get(resources);
      metrics.xdpi=size.x / designWidth * 72f;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9174515235457064
170624,"/** 
 * @param application application
 * @param width 设计稿宽度
 */
public RudenessScreenHelper(Application application,float width){
  mApplication=application;
  designWidth=width;
  activityLifecycleCallbacks=new Application.ActivityLifecycleCallbacks(){
    @Override public void onActivityCreated(    Activity activity,    Bundle savedInstanceState){
      resetDensity(mApplication,designWidth);
      resetDensity(activity,designWidth);
    }
    @Override public void onActivityStarted(    Activity activity){
    }
    @Override public void onActivityResumed(    Activity activity){
    }
    @Override public void onActivityPaused(    Activity activity){
    }
    @Override public void onActivityStopped(    Activity activity){
    }
    @Override public void onActivitySaveInstanceState(    Activity activity,    Bundle outState){
    }
    @Override public void onActivityDestroyed(    Activity activity){
    }
  }
;
}","/** 
 * @param application application
 * @param width 设计稿宽度
 */
public RudenessScreenHelper(Application application,float width){
  mApplication=application;
  designWidth=width;
  activityLifecycleCallbacks=new Application.ActivityLifecycleCallbacks(){
    @Override public void onActivityCreated(    Activity activity,    Bundle savedInstanceState){
    }
    @Override public void onActivityStarted(    Activity activity){
      resetDensity(mApplication,designWidth);
      resetDensity(activity,designWidth);
    }
    @Override public void onActivityResumed(    Activity activity){
    }
    @Override public void onActivityPaused(    Activity activity){
    }
    @Override public void onActivityStopped(    Activity activity){
    }
    @Override public void onActivitySaveInstanceState(    Activity activity,    Bundle outState){
    }
    @Override public void onActivityDestroyed(    Activity activity){
    }
  }
;
}",0.9052744886975242
170625,"@Override public void onActivityCreated(Activity activity,Bundle savedInstanceState){
  resetDensity(mApplication,designWidth);
  resetDensity(activity,designWidth);
}","@Override public void onActivityCreated(Activity activity,Bundle savedInstanceState){
}",0.6850393700787402
170626,"@Override public void onActivityStarted(Activity activity){
}","@Override public void onActivityStarted(Activity activity){
  resetDensity(mApplication,designWidth);
  resetDensity(activity,designWidth);
}",0.6039603960396039
170627,"/** 
 * 重新计算displayMetrics.xhdpi, 使单位pt重定义为设计稿的相对长度
 * @see #activate()
 * @param context
 * @param designWidth 设计稿的宽度
 */
private static void resetDensity(Context context,float designWidth){
  Point size=new Point();
  ((WindowManager)context.getSystemService(WINDOW_SERVICE)).getDefaultDisplay().getSize(size);
  context.getResources().getDisplayMetrics().xdpi=size.x / designWidth * 72f;
}","/** 
 * 重新计算displayMetrics.xhdpi, 使单位pt重定义为设计稿的相对长度
 * @see #activate()
 * @param context
 * @param designWidth 设计稿的宽度
 */
private static void resetDensity(Context context,float designWidth){
  if (context == null)   return;
  Point size=new Point();
  ((WindowManager)context.getSystemService(WINDOW_SERVICE)).getDefaultDisplay().getSize(size);
  Resources resources=context.getResources();
  resources.getDisplayMetrics().xdpi=size.x / designWidth * 72f;
  if (""String_Node_Str"".equals(resources.getClass().getSimpleName())) {
    try {
      Field field=Resources.class.getDeclaredField(""String_Node_Str"");
      field.setAccessible(true);
      DisplayMetrics metrics=(DisplayMetrics)field.get(resources);
      metrics.xdpi=size.x / designWidth * 72f;
    }
 catch (    NoSuchFieldException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
}",0.5817344589409056
170628,"public LineRenderer(final Chart chart){
  super(chart);
  linePath=new Path();
  chart.setInternalViewportChangeListener(new OnViewportChangeListener(){
    @Override public void onViewportChange(    Viewport viewport){
      mViewport=viewport;
      calcDataSetMinMax();
    }
  }
);
  final Highlight highlight=new Highlight();
  chart.addOnTouchPointChangeListener(new Chart.OnTouchPointChangeListener(){
    @Override public void touch(    float x,    float y){
synchronized (lineData) {
        for (        LineDataSet line : getDataSet()) {
          if (line.isHighlightedVerticalEnable() && !line.getValues().isEmpty()) {
            int offset=line.getStartIndexOffset();
            int index=getEntryIndexByCoordinate(x,y) - offset;
            if (index > 0 && index < line.getValues().size()) {
              final PointValue pointValue=line.getEntryForIndex(index);
              float xPosition=pointValue.getX();
              float yPosition=pointValue.getY();
              if (xPosition > 0 && yPosition > 0) {
                highlight.setX(xPosition);
                highlight.setY(yPosition);
                highlight.setDataIndex(index);
                chart.highlightValue(highlight);
              }
            }
          }
        }
      }
    }
  }
);
}","public LineRenderer(final Chart chart){
  super(chart);
  linePath=new Path();
  chart.setInternalViewportChangeListener(new OnViewportChangeListener(){
    @Override public void onViewportChange(    Viewport viewport){
      mViewport=viewport;
      calcDataSetMinMax();
    }
  }
);
  final Highlight highlight=new Highlight();
  chart.addOnTouchPointChangeListener(new Chart.OnTouchPointChangeListener(){
    @Override public void touch(    float x,    float y){
synchronized (lineData) {
        for (        LineDataSet line : getDataSet()) {
          if (line.isHighlightedVerticalEnable() && !line.getValues().isEmpty()) {
            int offset=line.getStartIndexOffset();
            int index=getEntryIndexByCoordinate(x,y) - offset;
            if (index > 0 && index < line.getValues().size()) {
              final PointValue pointValue=line.getEntryForIndex(index);
              float xPosition=pointValue.getX();
              float yPosition=pointValue.getY();
              if (xPosition >= 0 && yPosition >= 0) {
                highlight.setX(xPosition);
                highlight.setY(yPosition);
                highlight.setDataIndex(index);
                chart.highlightValue(highlight);
              }
            }
          }
        }
      }
    }
  }
);
}",0.99922420480993
170629,"@Override public void touch(float x,float y){
synchronized (lineData) {
    for (    LineDataSet line : getDataSet()) {
      if (line.isHighlightedVerticalEnable() && !line.getValues().isEmpty()) {
        int offset=line.getStartIndexOffset();
        int index=getEntryIndexByCoordinate(x,y) - offset;
        if (index > 0 && index < line.getValues().size()) {
          final PointValue pointValue=line.getEntryForIndex(index);
          float xPosition=pointValue.getX();
          float yPosition=pointValue.getY();
          if (xPosition > 0 && yPosition > 0) {
            highlight.setX(xPosition);
            highlight.setY(yPosition);
            highlight.setDataIndex(index);
            chart.highlightValue(highlight);
          }
        }
      }
    }
  }
}","@Override public void touch(float x,float y){
synchronized (lineData) {
    for (    LineDataSet line : getDataSet()) {
      if (line.isHighlightedVerticalEnable() && !line.getValues().isEmpty()) {
        int offset=line.getStartIndexOffset();
        int index=getEntryIndexByCoordinate(x,y) - offset;
        if (index > 0 && index < line.getValues().size()) {
          final PointValue pointValue=line.getEntryForIndex(index);
          float xPosition=pointValue.getX();
          float yPosition=pointValue.getY();
          if (xPosition >= 0 && yPosition >= 0) {
            highlight.setX(xPosition);
            highlight.setY(yPosition);
            highlight.setDataIndex(index);
            chart.highlightValue(highlight);
          }
        }
      }
    }
  }
}",0.9987163029525032
170630,"@Override public final void renderer(Canvas canvas){
  int width=mContentRect.width();
  int height=mContentRect.height();
  if (mDrawBitmap == null || (mDrawBitmap.get().getWidth() != width) || (mDrawBitmap.get().getHeight() != height)) {
    if (width > 0 && height > 0) {
      mDrawBitmap=new WeakReference<>(Bitmap.createBitmap(width,height,mBitmapConfig));
      mBitmapCanvas=new Canvas(mDrawBitmap.get());
    }
 else     return;
  }
  mDrawBitmap.get().eraseColor(Color.TRANSPARENT);
  renderDataSet(mBitmapCanvas);
  canvas.drawBitmap(mDrawBitmap.get(),mContentRect.left,mContentRect.top,mRenderPaint);
}","@Override public final void renderer(Canvas canvas){
  int width=mContentRect.width() + mContentRect.left;
  int height=mContentRect.height();
  if (mDrawBitmap == null || (mDrawBitmap.get().getWidth() != width) || (mDrawBitmap.get().getHeight() != height)) {
    if (width > 0 && height > 0) {
      mDrawBitmap=new WeakReference<>(Bitmap.createBitmap(width,height,mBitmapConfig));
      mBitmapCanvas=new Canvas(mDrawBitmap.get());
    }
 else     return;
  }
  mDrawBitmap.get().eraseColor(Color.TRANSPARENT);
  renderDataSet(mBitmapCanvas);
  canvas.drawBitmap(mDrawBitmap.get(),0,0,mRenderPaint);
}",0.9498767460969596
170631,"@Override protected void setDataBindingVariables(ViewDataBinding binding){
  LayoutCombineChartBinding b=(LayoutCombineChartBinding)binding;
  CandlestickDataSet dataSet=new CandlestickDataSet(candlestickValues);
  dataSet.setHighlightedVerticalEnable(true);
  dataSet.setMaxVisibleEntry(20);
  b.combineChart.setHighlightColor(Color.BLACK);
  b.combineChart.setOnHighlightStatusChangeListener(highlightStatusChangeListener);
  b.combineChart.setDataSet(dataSet);
}","@Override protected void setDataBindingVariables(ViewDataBinding binding){
  LayoutCombineChartBinding b=(LayoutCombineChartBinding)binding;
  CandlestickDataSet dataSet=new CandlestickDataSet(candlestickValues);
  dataSet.setHighlightedVerticalEnable(true);
  dataSet.setMaxVisibleEntry(20);
  b.combineChart.getAxisLeft().setAxisPosition(LEFT_OUTSIDE);
  b.combineChart.getAxisRight().setAxisPosition(RIGHT_INSIDE);
  b.combineChart.setHighlightColor(Color.BLACK);
  b.combineChart.setOnHighlightStatusChangeListener(highlightStatusChangeListener);
  b.combineChart.setDataSet(dataSet);
}",0.875829383886256
170632,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mContentRect.set(getPaddingLeft() + mAxisLeft.getMaxLabelWidth() + (mAxisLeft.isInside() ? 0 : mAxisLeft.getLabelSeparation()),getPaddingTop(),getWidth() - getPaddingRight(),getHeight() - getPaddingBottom() - mAxisBottom.getLabelHeight()- mAxisBottom.getLabelSeparation());
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  mContentRect.set(getPaddingLeft() + (mAxisLeft.isInside() ? 0 : mAxisLeft.getLabelWidth()) + (mAxisLeft.isInside() ? 0 : mAxisLeft.getLabelSeparation()),getPaddingTop(),getWidth() - getPaddingRight() - (mAxisRight.isInside() ? 0 : mAxisRight.getLabelWidth()),getHeight() - getPaddingBottom() - mAxisBottom.getLabelHeight()- mAxisBottom.getLabelSeparation());
}",0.4664224664224664
170633,"public void moveRight(@FloatRange(from=0f,to=1.0f) float percent){
  releaseEdgeEffects();
  computeScrollSurfaceSize(mSurfaceSizeBuffer);
  mScrollerStartViewport.set(mCurrentViewport);
  float moveDistance=getWidth() * percent;
  int startX=(int)(mSurfaceSizeBuffer.x * (mScrollerStartViewport.left - Viewport.AXIS_X_MIN) / (Viewport.AXIS_X_MAX - Viewport.AXIS_X_MIN));
  if (!mScroller.isFinished()) {
    mScroller.forceFinished(true);
  }
  mScroller.startScroll(startX,0,(int)moveDistance,0,300);
  ViewCompat.postInvalidateOnAnimation(this);
}","public void moveRight(@FloatRange(from=0f,to=1.0f) float percent){
  releaseEdgeEffects();
  computeScrollSurfaceSize(mSurfaceSizeBuffer);
  mScrollerStartViewport.set(mCurrentViewport);
  float moveDistance=mContentRect.width() * percent;
  int startX=(int)(mSurfaceSizeBuffer.x * (mScrollerStartViewport.left - Viewport.AXIS_X_MIN) / (Viewport.AXIS_X_MAX - Viewport.AXIS_X_MIN));
  if (!mScroller.isFinished()) {
    mScroller.forceFinished(true);
  }
  mScroller.startScroll(startX,0,(int)moveDistance,0,300);
  ViewCompat.postInvalidateOnAnimation(this);
}",0.9837837837837838
170634,"public void moveLeft(@FloatRange(from=0f,to=1.0f) float percent){
  releaseEdgeEffects();
  computeScrollSurfaceSize(mSurfaceSizeBuffer);
  mScrollerStartViewport.set(mCurrentViewport);
  float moveDistance=getWidth() * percent;
  int startX=(int)(mSurfaceSizeBuffer.x * (mScrollerStartViewport.left - Viewport.AXIS_X_MIN) / (Viewport.AXIS_X_MAX - Viewport.AXIS_X_MIN));
  if (!mScroller.isFinished()) {
    mScroller.forceFinished(true);
  }
  mScroller.startScroll(startX,0,(int)-moveDistance,0,300);
  ViewCompat.postInvalidateOnAnimation(this);
}","public void moveLeft(@FloatRange(from=0f,to=1.0f) float percent){
  releaseEdgeEffects();
  computeScrollSurfaceSize(mSurfaceSizeBuffer);
  mScrollerStartViewport.set(mCurrentViewport);
  float moveDistance=mContentRect.width() * percent;
  int startX=(int)(mSurfaceSizeBuffer.x * (mScrollerStartViewport.left - Viewport.AXIS_X_MIN) / (Viewport.AXIS_X_MAX - Viewport.AXIS_X_MIN));
  if (!mScroller.isFinished()) {
    mScroller.forceFinished(true);
  }
  mScroller.startScroll(startX,0,(int)-moveDistance,0,300);
  ViewCompat.postInvalidateOnAnimation(this);
}",0.9837837837837838
170635,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  drawAxis(canvas);
  int clipRestoreCount=canvas.save();
  canvas.clipRect(mContentRect);
  render(canvas);
  drawEdgeEffectsUnclipped(canvas);
  canvas.restoreToCount(clipRestoreCount);
  drawLabels(canvas);
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  drawAxis(canvas);
  int clipRestoreCount=canvas.save();
  canvas.clipRect(mContentRect);
  render(canvas);
  canvas.restoreToCount(clipRestoreCount);
  drawEdgeEffectsUnclipped(canvas);
  drawLabels(canvas);
}",0.8480565371024735
170636,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int minChartSize=getResources().getDimensionPixelSize(R.dimen.jz_chart_min_size);
  setMeasuredDimension(Math.max(getSuggestedMinimumWidth(),resolveSize(minChartSize + getPaddingLeft() + (mAxisLeft.isInside() ? 0 : mAxisLeft.getMaxLabelWidth())+ (mAxisLeft.isInside() ? 0 : mAxisLeft.getLabelSeparation())+ getPaddingRight(),widthMeasureSpec)),Math.max(getSuggestedMinimumHeight(),resolveSize(minChartSize + getPaddingTop() + (mAxisBottom.isInside() ? 0 : mAxisBottom.getLabelHeight())+ (mAxisBottom.isInside() ? 0 : mAxisBottom.getLabelSeparation())+ getPaddingBottom(),heightMeasureSpec)));
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int minChartSize=getResources().getDimensionPixelSize(R.dimen.jz_chart_min_size);
  setMeasuredDimension(Math.max(getSuggestedMinimumWidth(),resolveSize(minChartSize + getPaddingLeft() + (mAxisLeft.isInside() ? 0 : mAxisLeft.getLabelWidth())+ (mAxisLeft.isInside() ? 0 : mAxisLeft.getLabelSeparation())+ getPaddingRight(),widthMeasureSpec)),Math.max(getSuggestedMinimumHeight(),resolveSize(minChartSize + getPaddingTop() + (mAxisBottom.isInside() ? 0 : mAxisBottom.getLabelHeight())+ (mAxisBottom.isInside() ? 0 : mAxisBottom.getLabelSeparation())+ getPaddingBottom(),heightMeasureSpec)));
}",0.9977761304670126
170637,"@Override public final void renderer(Canvas canvas){
  int width=mContentRect.width();
  int height=mContentRect.height();
  if (mDrawBitmap == null || (mDrawBitmap.get().getWidth() != width) || (mDrawBitmap.get().getHeight() != height)) {
    if (width > 0 && height > 0) {
      mDrawBitmap=new WeakReference<>(Bitmap.createBitmap(width,height,mBitmapConfig));
      mBitmapCanvas=new Canvas(mDrawBitmap.get());
    }
 else     return;
  }
  mDrawBitmap.get().eraseColor(Color.TRANSPARENT);
  renderDataSet(mBitmapCanvas);
  canvas.drawBitmap(mDrawBitmap.get(),0,0,mRenderPaint);
}","@Override public final void renderer(Canvas canvas){
  int width=mContentRect.width();
  int height=mContentRect.height();
  if (mDrawBitmap == null || (mDrawBitmap.get().getWidth() != width) || (mDrawBitmap.get().getHeight() != height)) {
    if (width > 0 && height > 0) {
      mDrawBitmap=new WeakReference<>(Bitmap.createBitmap(width,height,mBitmapConfig));
      mBitmapCanvas=new Canvas(mDrawBitmap.get());
    }
 else     return;
  }
  mDrawBitmap.get().eraseColor(Color.TRANSPARENT);
  renderDataSet(mBitmapCanvas);
  canvas.drawBitmap(mDrawBitmap.get(),mContentRect.left,mContentRect.top,mRenderPaint);
}",0.9707602339181286
170638,"@Override public void renderer(Canvas canvas){
  int i;
  if (mAxis instanceof AxisX) {
    computeAxisStopsX(mCurrentViewport.left,mCurrentViewport.right,(AxisX)mAxis,null);
  }
 else   if (mAxis instanceof AxisY) {
    computeAxisStopsY((AxisY)mAxis);
  }
  drawAxisLine(canvas);
  if (mAxis.isGridLineEnable()) {
    drawGridLines(canvas);
  }
}","@Override public void renderer(Canvas canvas){
  if (mAxis instanceof AxisX) {
    computeAxisStopsX(mCurrentViewport.left,mCurrentViewport.right,(AxisX)mAxis,null);
  }
 else   if (mAxis instanceof AxisY) {
    computeAxisStopsY((AxisY)mAxis);
  }
  drawAxisLine(canvas);
  if (mAxis.isGridLineEnable()) {
    drawGridLines(canvas);
  }
}",0.9868995633187772
170639,"public void initPaints(){
  mGridPaint=new Paint();
  mGridPaint.setStrokeWidth(mAxis.getGridThickness());
  mGridPaint.setColor(mAxis.getGridColor());
  mGridPaint.setStyle(Paint.Style.STROKE);
  mLabelTextPaint=new Paint();
  mLabelTextPaint.setAntiAlias(true);
  mLabelTextPaint.setTextSize(mAxis.getLabelTextSize());
  mLabelTextPaint.setColor(mAxis.getLabelTextColor());
  mAxis.setMaxLabelWidth((int)mLabelTextPaint.measureText(""String_Node_Str""));
  mAxis.setLabelHeight((int)Math.abs(mLabelTextPaint.getFontMetrics().top));
  mAxisPaint=new Paint();
  mAxisPaint.setStrokeWidth(mAxis.getAxisThickness());
  mAxisPaint.setColor(mAxis.getAxisColor());
  mAxisPaint.setStyle(Paint.Style.STROKE);
}","public void initPaints(){
  mGridPaint=new Paint();
  mGridPaint.setStrokeWidth(mAxis.getGridThickness());
  mGridPaint.setColor(mAxis.getGridColor());
  mGridPaint.setStyle(Paint.Style.STROKE);
  mLabelTextPaint=new Paint();
  mLabelTextPaint.setAntiAlias(true);
  mLabelTextPaint.setTextSize(mAxis.getLabelTextSize());
  mLabelTextPaint.setColor(mAxis.getLabelTextColor());
  mAxis.setLabelWidth((int)mLabelTextPaint.measureText(""String_Node_Str""));
  mAxis.setLabelHeight((int)Math.abs(mLabelTextPaint.getFontMetrics().top));
  mAxisPaint=new Paint();
  mAxisPaint.setStrokeWidth(mAxis.getAxisThickness());
  mAxisPaint.setColor(mAxis.getAxisColor());
  mAxisPaint.setStyle(Paint.Style.STROKE);
}",0.9978586723768736
170640,"private void drawDataSet(Canvas canvas,CandlestickDataSet candlestickDataSet,float lMax,float lMin,float rMax,float rMin){
  float min, max;
switch (candlestickDataSet.getAxisDependency()) {
case AxisY.DEPENDENCY_RIGHT:
    min=rMin;
  max=rMax;
break;
case AxisY.DEPENDENCY_BOTH:
case AxisY.DEPENDENCY_LEFT:
default :
min=lMin;
max=lMax;
break;
}
mRenderPaint.setStrokeWidth(candlestickDataSet.getStrokeThickness());
mRenderPaint.setColor(candlestickDataSet.getColor());
int valueCount=candlestickDataSet.getEntryCount();
Path path=new Path();
path.reset();
for (int i=0; i < valueCount; i++) {
final CandlestickValue candlestick=candlestickDataSet.getEntryForIndex(i);
float candleWidth=candlestickDataSet.getCandleWidth();
if (candlestickDataSet.isAutoWidth()) {
candleWidth=mContentRect.width() / candlestickDataSet.getVisibleValueCount(mViewport);
}
float xPosition=getDrawX(i / (valueCount + 0f));
float highY=(max - candlestick.getHigh()) / (max - min) * mContentRect.height();
float lowY=(max - candlestick.getLow()) / (max - min) * mContentRect.height();
float openY=(max - candlestick.getOpen()) / (max - min) * mContentRect.height();
float closeY=(max - candlestick.getClose()) / (max - min) * mContentRect.height();
float widthPercent=0.8f;
mBodyBuffers[0]=xPosition + (1 - widthPercent) * 0.5f * candleWidth;
mBodyBuffers[1]=closeY;
mBodyBuffers[2]=mBodyBuffers[0] + candleWidth * widthPercent;
mBodyBuffers[3]=openY;
final float candlestickCenterX=xPosition + candleWidth * 0.5f;
mUpperShadowBuffers[0]=candlestickCenterX;
mUpperShadowBuffers[2]=candlestickCenterX;
mLowerShadowBuffers[0]=candlestickCenterX;
mLowerShadowBuffers[2]=candlestickCenterX;
candlestick.setX(candlestickCenterX);
candlestick.setY(closeY);
if (Float.compare(candlestick.getOpen(),candlestick.getClose()) > 0) {
mUpperShadowBuffers[1]=highY;
mUpperShadowBuffers[3]=openY;
mLowerShadowBuffers[1]=lowY;
mLowerShadowBuffers[3]=closeY;
if (candlestick.getColor() == CandlestickValue.COLOR_NONE) {
mRenderPaint.setColor(candlestickDataSet.getDecreasingColor());
}
 else {
mRenderPaint.setColor(candlestick.getColor());
}
if (candlestick.getPaintStyle() != null) {
mRenderPaint.setStyle(candlestick.getPaintStyle());
}
 else {
mRenderPaint.setStyle(candlestickDataSet.getDecreasingPaintStyle());
}
}
 else if (Float.compare(candlestick.getOpen(),candlestick.getClose()) < 0) {
mUpperShadowBuffers[1]=highY;
mUpperShadowBuffers[3]=closeY;
mLowerShadowBuffers[1]=lowY;
mLowerShadowBuffers[3]=openY;
if (candlestick.getColor() == CandlestickValue.COLOR_NONE) {
mRenderPaint.setColor(candlestickDataSet.getIncreasingColor());
}
 else {
mRenderPaint.setColor(candlestick.getColor());
}
if (candlestick.getPaintStyle() != null) {
mRenderPaint.setStyle(candlestick.getPaintStyle());
}
 else {
mRenderPaint.setStyle(candlestickDataSet.getIncreasingPaintStyle());
}
}
 else {
mUpperShadowBuffers[1]=highY;
mUpperShadowBuffers[3]=openY;
mLowerShadowBuffers[1]=lowY;
mLowerShadowBuffers[3]=mUpperShadowBuffers[3];
if (candlestick.getColor() == CandlestickValue.COLOR_NONE) {
mRenderPaint.setColor(candlestickDataSet.getNeutralColor());
}
 else {
mRenderPaint.setColor(candlestick.getColor());
}
}
if (candlestickDataSet.getLimitUpColor() != Color.TRANSPARENT && i > 0) {
final CandlestickValue previousValue=candlestickDataSet.getEntryForIndex(i - 1);
boolean isLimitUp=Float.compare((candlestick.getClose() - previousValue.getClose()) / previousValue.getClose(),0.095f) > 0;
if (isLimitUp) {
mRenderPaint.setColor(candlestickDataSet.getLimitUpColor());
}
}
canvas.drawRect(mBodyBuffers[0],mBodyBuffers[1],mBodyBuffers[2],mBodyBuffers[3],mRenderPaint);
canvas.drawLines(mUpperShadowBuffers,mRenderPaint);
canvas.drawLines(mLowerShadowBuffers,mRenderPaint);
}
}","private void drawDataSet(Canvas canvas,CandlestickDataSet candlestickDataSet,float lMax,float lMin,float rMax,float rMin){
  float min, max;
switch (candlestickDataSet.getAxisDependency()) {
case AxisY.DEPENDENCY_RIGHT:
    min=rMin;
  max=rMax;
break;
case AxisY.DEPENDENCY_BOTH:
case AxisY.DEPENDENCY_LEFT:
default :
min=lMin;
max=lMax;
break;
}
mRenderPaint.setStrokeWidth(candlestickDataSet.getStrokeThickness());
mRenderPaint.setColor(candlestickDataSet.getColor());
int valueCount=candlestickDataSet.getEntryCount();
for (int i=0; i < valueCount; i++) {
final CandlestickValue candlestick=candlestickDataSet.getEntryForIndex(i);
float candleWidth=candlestickDataSet.getCandleWidth();
if (candlestickDataSet.isAutoWidth()) {
candleWidth=mContentRect.width() / candlestickDataSet.getVisibleValueCount(mViewport);
}
float xPosition=getDrawX(i / (valueCount + 0f));
float highY=(max - candlestick.getHigh()) / (max - min) * mContentRect.height();
float lowY=(max - candlestick.getLow()) / (max - min) * mContentRect.height();
float openY=(max - candlestick.getOpen()) / (max - min) * mContentRect.height();
float closeY=(max - candlestick.getClose()) / (max - min) * mContentRect.height();
float widthPercent=0.8f;
mBodyBuffers[0]=xPosition + (1 - widthPercent) * 0.5f * candleWidth;
mBodyBuffers[1]=closeY;
mBodyBuffers[2]=mBodyBuffers[0] + candleWidth * widthPercent;
mBodyBuffers[3]=openY;
final float candlestickCenterX=xPosition + candleWidth * 0.5f;
mUpperShadowBuffers[0]=candlestickCenterX;
mUpperShadowBuffers[2]=candlestickCenterX;
mLowerShadowBuffers[0]=candlestickCenterX;
mLowerShadowBuffers[2]=candlestickCenterX;
candlestick.setX(candlestickCenterX);
candlestick.setY(closeY);
if (Float.compare(candlestick.getOpen(),candlestick.getClose()) > 0) {
mUpperShadowBuffers[1]=highY;
mUpperShadowBuffers[3]=openY;
mLowerShadowBuffers[1]=lowY;
mLowerShadowBuffers[3]=closeY;
if (candlestick.getColor() == CandlestickValue.COLOR_NONE) {
mRenderPaint.setColor(candlestickDataSet.getDecreasingColor());
}
 else {
mRenderPaint.setColor(candlestick.getColor());
}
if (candlestick.getPaintStyle() != null) {
mRenderPaint.setStyle(candlestick.getPaintStyle());
}
 else {
mRenderPaint.setStyle(candlestickDataSet.getDecreasingPaintStyle());
}
}
 else if (Float.compare(candlestick.getOpen(),candlestick.getClose()) < 0) {
mUpperShadowBuffers[1]=highY;
mUpperShadowBuffers[3]=closeY;
mLowerShadowBuffers[1]=lowY;
mLowerShadowBuffers[3]=openY;
if (candlestick.getColor() == CandlestickValue.COLOR_NONE) {
mRenderPaint.setColor(candlestickDataSet.getIncreasingColor());
}
 else {
mRenderPaint.setColor(candlestick.getColor());
}
if (candlestick.getPaintStyle() != null) {
mRenderPaint.setStyle(candlestick.getPaintStyle());
}
 else {
mRenderPaint.setStyle(candlestickDataSet.getIncreasingPaintStyle());
}
}
 else {
mUpperShadowBuffers[1]=highY;
mUpperShadowBuffers[3]=openY;
mLowerShadowBuffers[1]=lowY;
mLowerShadowBuffers[3]=mUpperShadowBuffers[3];
if (candlestick.getColor() == CandlestickValue.COLOR_NONE) {
mRenderPaint.setColor(candlestickDataSet.getNeutralColor());
}
 else {
mRenderPaint.setColor(candlestick.getColor());
}
}
if (candlestickDataSet.getLimitUpColor() != Color.TRANSPARENT && i > 0) {
final CandlestickValue previousValue=candlestickDataSet.getEntryForIndex(i - 1);
boolean isLimitUp=Float.compare((candlestick.getClose() - previousValue.getClose()) / previousValue.getClose(),0.095f) > 0;
if (isLimitUp) {
mRenderPaint.setColor(candlestickDataSet.getLimitUpColor());
}
}
canvas.drawRect(mBodyBuffers[0],mBodyBuffers[1],mBodyBuffers[2],mBodyBuffers[3],mRenderPaint);
canvas.drawLines(mUpperShadowBuffers,mRenderPaint);
canvas.drawLines(mLowerShadowBuffers,mRenderPaint);
}
}",0.9951534733441034
170641,"@Override protected void setDataBindingVariables(ViewDataBinding binding){
  LayoutCombineChartBinding chartBinding=(LayoutCombineChartBinding)binding;
  chartBinding.combineChart.addDataSet(barDataSet);
  chartBinding.combineChart.addDataSet(line);
}","@Override protected void setDataBindingVariables(ViewDataBinding binding){
  LayoutCombineChartBinding chartBinding=(LayoutCombineChartBinding)binding;
  chartBinding.combineChart.enableHighlightDashPathEffect(new float[]{10,10},10);
  chartBinding.combineChart.addDataSet(barDataSet);
  chartBinding.combineChart.addDataSet(line);
}",0.8595890410958904
170642,"public MinuteChartModel(){
  final List<Float> floats=Arrays.asList(3134.55f,3134.62f,3134.34f,3133.53f,3133.37f,3132.10f,3131.55f,3132.10f,3133.30f,3133.39f,3133.02f,3133.32f,3132.60f,3132.88f,3132.46f,3131.71f,3132.14f,3132.83f,3132.40f,3133.32f,3134.26f,3135.62f,3136.88f,3138.13f,3138.51f,3138.17f,3138.73f,3138.40f,3138.65f,3137.40f,3137.05f,3136.25f,3136.70f,3137.04f,3136.28f,3136.26f,3135.62f,3135.91f,3135.85f,3135.80f,3136.21f,3136.12f,3136.41f,3136.54f,3136.30f,3136.35f,3135.62f,3134.05f,3133.15f,3132.52f,3132.28f,3132.98f,3133.08f,3132.93f,3133.18f,3133.12f,3134.12f,3133.87f,3133.84f,3134.03f,3134.16f,3134.62f,3135.23f,3135.51f,3135.59f,3135.79f,3136.02f,3135.46f,3135.90f,3135.09f,3135.05f,3134.57f,3135.03f,3134.52f,3134.82f,3134.57f,3134.78f,3135.44f,3135.13f,3136.28f,3136.62f,3137.25f,3137.16f,3137.62f,3138.21f,3138.07f,3138.09f,3138.47f,3139.63f,3139.70f,3140.38f,3140.87f,3142.22f,3142.80f,3143.58f,3142.84f,3143.13f,3143.77f,3143.77f,3146.54f,3145.62f,3144.90f,3144.80f,3144.78f,3144.76f,3144.40f,3144.15f,3144.60f,3145.46f,3146.13f,3145.82f,3146.05f,3144.65f,3144.27f,3144.29f,3143.62f,3143.67f,3143.56f,3142.93f,3142.19f,3142.72f,3142.29f,3142.39f,3141.31f,3141.92f,3142.13f,3141.65f,3141.60f,3140.42f,3139.55f,3139.94f,3140.05f,3139.12f,3139.35f,3138.90f,3139.02f,3138.87f,3138.83f,3138.53f,3139.31f,3139.36f,3138.91f,3139.06f,3139.13f,3139.52f,3139.57f,3138.82f,3138.17f,3138.5f,3137.95f,3138.55f,3137.82f,3138.25f,3137.59f,3137.75f,3137.96f,3138.37f,3137.82f,3138.22f,3138.17f,3137.31f,3137.96f,3137.22f,3137.82f,3137.19f,3137.78f,3137.93f,3138.65f,3138.70f,3140.12f,3140.35f,3140.28f,3140.46f,3140.22f,3140.06f,3138.75f,3139.31f,3138.73f,3137.54f,3137.13f,3136.23f,3136.20f,3136.53f,3135.56f,3135.71f,3135.68f,3135.89f,3136.31f,3135.81f,3135.82f,3135.5f,3136.18f,3138.01f,3137.89f,3138.09f,3138.21f,3138.52f,3138.70f,3138.55f,3138.02f,3137.73f,3137.36f,3137.59f,3137.45f,3137.89f,3138.29f,3138.63f,3138.54f,3139.09f,3140.09f,3140.89f,3141.19f,3141.57f,3141.92f,3142.10f,3142.44f,3143.38f,3143.96f,3144.77f,3144.37f,3148.02f,3149.62f,3149.79f,3149.5f,3148.58f,3148.39f,3148.43f,3148.5f,3148.12f,3146.07f,3144.87f,3145.0f,3144.67f,3142.95f,3143.63f,3143.5f,3144.13f,3145.08f,3145.06f,3144.96f,3143.86f);
  List<PointValue> values=new ArrayList<>();
  for (  Float value : floats) {
    values.add(new PointValue(value));
  }
  line=new MinuteLine(values);
  line.setHighlightedEnable(true);
  line.setLastClose(lastClose);
}","public MinuteChartModel(){
  final List<Float> floats=Arrays.asList(3134.55f,3134.62f,3134.34f,3133.53f,3133.37f,3132.10f,3131.55f,3132.10f,3133.30f,3133.39f,3133.02f,3133.32f,3132.60f,3132.88f,3132.46f,3131.71f,3132.14f,3132.83f,3132.40f,3133.32f,3134.26f,3135.62f,3136.88f,3138.13f,3138.51f,3138.17f,3138.73f,3138.40f,3138.65f,3137.40f,3137.05f,3136.25f,3136.70f,3137.04f,3136.28f,3136.26f,3135.62f,3135.91f,3135.85f,3135.80f,3136.21f,3136.12f,3136.41f,3136.54f,3136.30f,3136.35f,3135.62f,3134.05f,3133.15f,3132.52f,3132.28f,3132.98f,3133.08f,3132.93f,3133.18f,3133.12f,3134.12f,3133.87f,3133.84f,3134.03f,3134.16f,3134.62f,3135.23f,3135.51f,3135.59f,3135.79f,3136.02f,3135.46f,3135.90f,3135.09f,3135.05f,3134.57f,3135.03f,3134.52f,3134.82f,3134.57f,3134.78f,3135.44f,3135.13f,3136.28f,3136.62f,3137.25f,3137.16f,3137.62f,3138.21f,3138.07f,3138.09f,3138.47f,3139.63f,3139.70f,3140.38f,3140.87f,3142.22f,3142.80f,3143.58f,3142.84f,3143.13f,3143.77f,3143.77f,3146.54f,3145.62f,3144.90f,3144.80f,3144.78f,3144.76f,3144.40f,3144.15f,3144.60f,3145.46f,3146.13f,3145.82f,3146.05f,3144.65f,3144.27f,3144.29f,3143.62f,3143.67f,3143.56f,3142.93f,3142.19f,3142.72f,3142.29f,3142.39f,3141.31f,3141.92f,3142.13f,3141.65f,3141.60f,3140.42f,3139.55f,3139.94f,3140.05f,3139.12f,3139.35f,3138.90f,3139.02f,3138.87f,3138.83f,3138.53f,3139.31f,3139.36f,3138.91f,3139.06f,3139.13f,3139.52f,3139.57f,3138.82f,3138.17f,3138.5f,3137.95f,3138.55f,3137.82f,3138.25f,3137.59f,3137.75f,3137.96f,3138.37f,3137.82f,3138.22f,3138.17f,3137.31f,3137.96f,3137.22f,3137.82f,3137.19f,3137.78f,3137.93f,3138.65f,3138.70f,3140.12f,3140.35f,3140.28f,3140.46f,3140.22f,3140.06f,3138.75f,3139.31f,3138.73f,3137.54f,3137.13f,3136.23f,3136.20f,3136.53f,3135.56f,3135.71f,3135.68f,3135.89f,3136.31f,3135.81f,3135.82f,3135.5f,3136.18f,3138.01f,3137.89f,3138.09f,3138.21f,3138.52f,3138.70f,3138.55f,3138.02f,3137.73f,3137.36f,3137.59f,3137.45f,3137.89f,3138.29f,3138.63f,3138.54f,3139.09f,3140.09f,3140.89f,3141.19f,3141.57f,3141.92f,3142.10f,3142.44f,3143.38f,3143.96f,3144.77f,3144.37f,3148.02f,3149.62f,3149.79f,3149.5f,3148.58f,3148.39f,3148.43f,3148.5f,3148.12f,3146.07f,3144.87f,3145.0f,3144.67f,3142.95f,3143.63f,3143.5f,3144.13f,3145.08f,3145.06f,3144.96f,3143.86f);
  List<PointValue> values=new ArrayList<>();
  for (  Float value : floats) {
    values.add(new PointValue(value));
  }
  line=new MinuteLine(values);
  line.setHighlightedEnable(true);
  line.setHighlightedHorizontalEnable(true);
  line.setLastClose(lastClose);
}",0.9909109270854372
170643,"@Override @Nullable @Contract(""String_Node_Str"") public <T>T fromByteArray(@Nullable byte[] bytes,@NotNull Serializer<T> serializer) throws IOException, ClassNotFoundException {
  if (bytes == null || bytes.length == 0) {
    return null;
  }
  final SerializerInput serializerInput=new ByteBufferSerializerInput(bytes);
  try {
    return serializer.deserialize(mContext,serializerInput);
  }
 catch (  IOException|ClassNotFoundException|IllegalStateException e) {
    throw e;
  }
}","@Override @Nullable @Contract(""String_Node_Str"") public <T>T fromByteArray(@Nullable byte[] bytes,@NotNull Serializer<T> serializer) throws IOException, ClassNotFoundException {
  if (bytes == null || bytes.length == 0) {
    return null;
  }
  final SerializerInput serializerInput=new ByteBufferSerializerInput(bytes);
  try {
    return serializer.deserialize(mContext,serializerInput);
  }
 catch (  IOException|ClassNotFoundException|IllegalStateException e) {
    throw new SerializationException(""String_Node_Str"" + SerializationUtils.dumpSerializedData(bytes,serializerInput.getPosition(),mContext.isDebug()),e);
  }
}",0.8702702702702703
170644,"@NotNull private String decodeUtf8String(int length) throws IOException {
  try {
    final ByteBuffer buffer=mByteBuffer;
    final StringBuilder builder=new StringBuilder(length);
    for (int i=0; i < length; ++i) {
      final int b1=buffer.get();
      if ((b1 & 0x80) >= 0) {
        builder.append((char)b1);
      }
 else       if ((b1 & 0xE0) == 0xC0) {
        final int b2=buffer.get();
        builder.append((char)(((b1 << 6) ^ b2) ^ 0x0f80));
      }
 else       if ((b1 & 0xF0) == 0xE0) {
        final int b2=buffer.get();
        final int b3=buffer.get();
        builder.append((char)(((b1 << 12) ^ (b2 << 6) ^ b3) ^ 0x1f80));
      }
 else       if ((b1 & 0xF8) == 0xF0) {
        final int b2=buffer.get();
        final int b3=buffer.get();
        final int b4=buffer.get();
        final int code=((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6)| (b4 & 0x3f);
        builder.append(Surrogate.highSurrogate(code));
        builder.append(Surrogate.lowSurrogate(code));
        ++i;
      }
 else {
        throw new SerializationException(""String_Node_Str"");
      }
    }
    return builder.toString();
  }
 catch (  BufferUnderflowException ignore) {
    throw new EOFException();
  }
}","@NotNull private String decodeUtf8String(int length) throws IOException {
  try {
    final ByteBuffer buffer=mByteBuffer;
    final StringBuilder builder=new StringBuilder(length);
    for (int i=0; i < length; ++i) {
      final int b1=buffer.get();
      if ((b1 & 0x80) == 0) {
        builder.append((char)b1);
      }
 else       if ((b1 & 0xE0) == 0xC0) {
        final int b2=buffer.get();
        builder.append((char)(((b1 << 6) ^ b2) ^ 0x0f80));
      }
 else       if ((b1 & 0xF0) == 0xE0) {
        final int b2=buffer.get();
        final int b3=buffer.get();
        builder.append((char)(((b1 << 12) ^ (b2 << 6) ^ b3) ^ 0x1f80));
      }
 else       if ((b1 & 0xF8) == 0xF0) {
        final int b2=buffer.get();
        final int b3=buffer.get();
        final int b4=buffer.get();
        final int code=((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6)| (b4 & 0x3f);
        builder.append(Surrogate.highSurrogate(code));
        builder.append(Surrogate.lowSurrogate(code));
        ++i;
      }
 else {
        throw new SerializationException(""String_Node_Str"");
      }
    }
    return builder.toString();
  }
 catch (  BufferUnderflowException ignore) {
    throw new EOFException();
  }
}",0.9991843393148452
170645,"@Test @Ignore public void testSerializeString() throws Exception {
  final ByteBufferSerializerOutput output=new ByteBufferSerializerOutput();
  final String testString1=""String_Node_Str"";
  final String testString2=""String_Node_Str"";
  final String testString3=""String_Node_Str"";
  final String testString4=""String_Node_Str"";
  output.writeString(testString1);
  assertThat(output.getPosition()).isEqualTo(16);
  output.writeString(testString2);
  assertThat(output.getPosition()).isEqualTo(82);
  output.writeString(testString3);
  assertThat(output.getPosition()).isEqualTo(165);
  output.writeString(testString4);
  assertThat(output.getPosition()).isEqualTo(200);
  output.writeString(""String_Node_Str"");
  assertThat(output.getPosition()).isEqualTo(201);
  final ByteBufferSerializerInput input=new ByteBufferSerializerInput(output.getSerializedData());
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_ASCII);
  assertThat(input.readString()).isEqualTo(testString1);
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_UTF8);
  assertThat(input.readString()).isEqualTo(testString2);
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_UTF8);
  assertThat(input.readString()).isEqualTo(testString3);
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_UTF8);
  assertThat(input.readString()).isEqualTo(testString4);
  assertThat(input.readString()).isEmpty();
  final ByteBufferSerializerOutput longStringOutput=new ByteBufferSerializerOutput(new byte[32]);
  final String longString=""String_Node_Str"" + ""String_Node_Str"";
  longStringOutput.writeString(longString);
  assertThat(longStringOutput.getPosition()).isEqualTo(149);
  final ByteBufferSerializerInput longStringInput=new ByteBufferSerializerInput(longStringOutput.getSerializedData());
  assertThat(longStringInput.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_ASCII);
  assertThat(longStringInput.readString()).isEqualTo(longString);
}","@Test public void testSerializeString() throws Exception {
  final ByteBufferSerializerOutput output=new ByteBufferSerializerOutput();
  final String testString1=""String_Node_Str"";
  final String testString2=""String_Node_Str"";
  final String testString3=""String_Node_Str"";
  final String testString4=""String_Node_Str"";
  output.writeString(testString1);
  assertThat(output.getPosition()).isEqualTo(16);
  output.writeString(testString2);
  assertThat(output.getPosition()).isEqualTo(82);
  output.writeString(testString3);
  assertThat(output.getPosition()).isEqualTo(165);
  output.writeString(testString4);
  assertThat(output.getPosition()).isEqualTo(200);
  output.writeString(""String_Node_Str"");
  assertThat(output.getPosition()).isEqualTo(201);
  final ByteBufferSerializerInput input=new ByteBufferSerializerInput(output.getSerializedData());
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_ASCII);
  assertThat(input.readString()).isEqualTo(testString1);
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_UTF8);
  assertThat(input.readString()).isEqualTo(testString2);
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_UTF8);
  assertThat(input.readString()).isEqualTo(testString3);
  assertThat(input.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_UTF8);
  assertThat(input.readString()).isEqualTo(testString4);
  assertThat(input.readString()).isEmpty();
  final ByteBufferSerializerOutput longStringOutput=new ByteBufferSerializerOutput(new byte[32]);
  final String longString=""String_Node_Str"" + ""String_Node_Str"";
  longStringOutput.writeString(longString);
  assertThat(longStringOutput.getPosition()).isEqualTo(149);
  final ByteBufferSerializerInput longStringInput=new ByteBufferSerializerInput(longStringOutput.getSerializedData());
  assertThat(longStringInput.peekType()).isEqualTo(SerializerDefs.TYPE_STRING_ASCII);
  assertThat(longStringInput.readString()).isEqualTo(longString);
}",0.9979685119349924
170646,"@Override public synchronized Throwable fillInStackTrace(){
  return this;
}","@Override public synchronized Throwable fillInStackTrace(){
  setStackTrace(new StackTraceElement[0]);
  return this;
}",0.7794871794871795
170647,"/** 
 * Creates a new music folder.
 * @param musicFolder The music folder to create.
 */
public void createMusicFolder(MusicFolder musicFolder){
  String sql=""String_Node_Str"" + INSERT_COLUMNS + ""String_Node_Str"";
  update(sql,musicFolder.getPath(),musicFolder.getName(),musicFolder.isEnabled(),musicFolder.getChanged());
  Integer id=queryForInt(""String_Node_Str"",0);
  update(""String_Node_Str"" + userDao.getUserTable(),id);
  LOG.info(""String_Node_Str"" + musicFolder.getPath());
}","/** 
 * Creates a new music folder.
 * @param musicFolder The music folder to create.
 */
public void createMusicFolder(MusicFolder musicFolder){
  String sql=""String_Node_Str"" + INSERT_COLUMNS + ""String_Node_Str"";
  update(sql,musicFolder.getPath().getPath(),musicFolder.getName(),musicFolder.isEnabled(),musicFolder.getChanged());
  Integer id=queryForInt(""String_Node_Str"",0);
  update(""String_Node_Str"" + userDao.getUserTable(),id);
  LOG.info(""String_Node_Str"" + musicFolder.getPath());
}",0.9897540983606558
170648,"/** 
 * Creates a new player.
 * @param player The player to create.
 */
public synchronized void createPlayer(Player player){
  int id=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class) + 1;
  player.setId(String.valueOf(id));
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,player.getId(),player.getName(),player.getType(),player.getUsername(),player.getIpAddress(),player.isAutoControlEnabled(),player.isM3uBomEnabled(),player.getLastSeen(),CoverArtScheme.MEDIUM.name(),player.getTranscodeScheme().name(),player.isDynamicIp(),player.getTechnology().name(),player.getClientId());
  addPlaylist(player);
  LOG.info(""String_Node_Str"" + id + '.');
}","/** 
 * Creates a new player.
 * @param player The player to create.
 */
public synchronized void createPlayer(Player player){
  Integer existingMax=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class);
  if (existingMax == null) {
    existingMax=0;
  }
  int id=existingMax + 1;
  player.setId(String.valueOf(id));
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,player.getId(),player.getName(),player.getType(),player.getUsername(),player.getIpAddress(),player.isAutoControlEnabled(),player.isM3uBomEnabled(),player.getLastSeen(),CoverArtScheme.MEDIUM.name(),player.getTranscodeScheme().name(),player.isDynamicIp(),player.getTechnology().name(),player.getClientId());
  addPlaylist(player);
  LOG.info(""String_Node_Str"" + id + '.');
}",0.936252414681262
170649,"/** 
 * Creates a new transcoding.
 * @param transcoding The transcoding to create.
 */
public synchronized void createTranscoding(Transcoding transcoding){
  int id=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class);
  transcoding.setId(id);
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,transcoding.getId(),transcoding.getName(),transcoding.getSourceFormats(),transcoding.getTargetFormat(),transcoding.getStep1(),transcoding.getStep2(),transcoding.getStep3(),transcoding.isDefaultActive());
  LOG.info(""String_Node_Str"" + transcoding.getName());
}","/** 
 * Creates a new transcoding.
 * @param transcoding The transcoding to create.
 */
public synchronized void createTranscoding(Transcoding transcoding){
  Integer existingMax=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class);
  if (existingMax == null) {
    existingMax=0;
  }
  transcoding.setId(existingMax + 1);
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,transcoding.getId(),transcoding.getName(),transcoding.getSourceFormats(),transcoding.getTargetFormat(),transcoding.getStep1(),transcoding.getStep2(),transcoding.getStep3(),transcoding.isDefaultActive());
  LOG.info(""String_Node_Str"" + transcoding.getName());
}",0.9303703703703704
170650,"/** 
 * Creates a new player.
 * @param player The player to create.
 */
public synchronized void createPlayer(Player player){
  int id=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class) + 1;
  player.setId(String.valueOf(id));
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,player.getId(),player.getName(),player.getType(),player.getUsername(),player.getIpAddress(),player.isAutoControlEnabled(),player.getLastSeen(),CoverArtScheme.MEDIUM.name(),player.getTranscodeScheme().name(),player.isDynamicIp(),player.getTechnology().name(),player.getClientId());
  addPlaylist(player);
  LOG.info(""String_Node_Str"" + id + '.');
}","/** 
 * Creates a new player.
 * @param player The player to create.
 */
public synchronized void createPlayer(Player player){
  Integer existingMax=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class);
  if (existingMax == null) {
    existingMax=0;
  }
  int id=existingMax + 1;
  player.setId(String.valueOf(id));
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,player.getId(),player.getName(),player.getType(),player.getUsername(),player.getIpAddress(),player.isAutoControlEnabled(),player.getLastSeen(),CoverArtScheme.MEDIUM.name(),player.getTranscodeScheme().name(),player.isDynamicIp(),player.getTechnology().name(),player.getClientId());
  addPlaylist(player);
  LOG.info(""String_Node_Str"" + id + '.');
}",0.934131736526946
170651,"/** 
 * Creates a new transcoding.
 * @param transcoding The transcoding to create.
 */
public synchronized void createTranscoding(Transcoding transcoding){
  int id=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class);
  transcoding.setId(id);
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,transcoding.getId(),transcoding.getName(),transcoding.getSourceFormats(),transcoding.getTargetFormat(),transcoding.getStep1(),transcoding.getStep2(),transcoding.getStep3(),transcoding.isDefaultActive());
  LOG.info(""String_Node_Str"" + transcoding.getName());
}","/** 
 * Creates a new transcoding.
 * @param transcoding The transcoding to create.
 */
public synchronized void createTranscoding(Transcoding transcoding){
  Integer existingMax=getJdbcTemplate().queryForObject(""String_Node_Str"",Integer.class);
  if (existingMax == null) {
    existingMax=0;
  }
  transcoding.setId(existingMax + 1);
  String sql=""String_Node_Str"" + COLUMNS + ""String_Node_Str""+ questionMarks(COLUMNS)+ ""String_Node_Str"";
  update(sql,transcoding.getId(),transcoding.getName(),transcoding.getSourceFormats(),transcoding.getTargetFormat(),transcoding.getStep1(),transcoding.getStep2(),transcoding.getStep3(),transcoding.isDefaultActive());
  LOG.info(""String_Node_Str"" + transcoding.getName());
}",0.9303703703703704
170652,"public void setLocale(){
  Locale locale=settings.getLocale();
  Locale.setDefault(locale);
  Configuration config=new Configuration();
  config.locale=locale;
  getBaseContext().getResources().updateConfiguration(config,getBaseContext().getResources().getDisplayMetrics());
}","public void setLocale(){
  Locale locale=settings.getLocale();
  Locale.setDefault(locale);
  Resources resources=getBaseContext().getResources();
  Configuration config=resources.getConfiguration();
  config.locale=locale;
  resources.updateConfiguration(config,resources.getDisplayMetrics());
}",0.6188811188811189
170653,"public void checkPassword(String plainPassword){
  if (!oldPassword) {
    try {
      EncryptionHelper.PBKDF2Credentials credentials=EncryptionHelper.generatePBKDF2Credentials(plainPassword,settings.getSalt(),settings.getIterations());
      byte[] passwordArray=Base64.decode(password,Base64.URL_SAFE);
      if (Arrays.equals(passwordArray,credentials.password)) {
        finishWithResult(true,credentials.key);
      }
 else {
        finishWithResult(false,null);
      }
    }
 catch (    NoSuchAlgorithmException|InvalidKeySpecException e) {
      e.printStackTrace();
      finishWithResult(false,null);
    }
  }
 else {
    String hashedPassword=new String(Hex.encodeHex(DigestUtils.sha256(plainPassword)));
    if (hashedPassword.equals(password)) {
      byte[] key=settings.setAuthCredentials(plainPassword);
      if (key == null)       Toast.makeText(this,R.string.settings_toast_auth_upgrade_failed,Toast.LENGTH_LONG).show();
      if (authMethod == AuthMethod.PASSWORD)       settings.removeAuthPasswordHash();
 else       if (authMethod == AuthMethod.PIN)       settings.removeAuthPINHash();
      finishWithResult(true,key);
    }
 else {
      finishWithResult(false,null);
    }
  }
}","public void checkPassword(String plainPassword){
  if (!oldPassword) {
    try {
      EncryptionHelper.PBKDF2Credentials credentials=EncryptionHelper.generatePBKDF2Credentials(plainPassword,settings.getSalt(),settings.getIterations());
      byte[] passwordArray=Base64.decode(password,Base64.URL_SAFE);
      if (Arrays.equals(passwordArray,credentials.password)) {
        finishWithResult(true,credentials.key);
      }
 else {
        finishWithResult(false,null);
      }
    }
 catch (    NoSuchAlgorithmException|InvalidKeySpecException|IllegalArgumentException e) {
      e.printStackTrace();
      finishWithResult(false,null);
    }
  }
 else {
    String hashedPassword=new String(Hex.encodeHex(DigestUtils.sha256(plainPassword)));
    if (hashedPassword.equals(password)) {
      byte[] key=settings.setAuthCredentials(plainPassword);
      if (key == null)       Toast.makeText(this,R.string.settings_toast_auth_upgrade_failed,Toast.LENGTH_LONG).show();
      if (authMethod == AuthMethod.PASSWORD)       settings.removeAuthPasswordHash();
 else       if (authMethod == AuthMethod.PIN)       settings.removeAuthPINHash();
      finishWithResult(true,key);
    }
 else {
      finishWithResult(false,null);
    }
  }
}",0.9897414854329092
170654,"@Override public void onCreate(){
  String prefs=getDefaultSharedPreferencesName();
  SharedPreferencesBackupHelper sharedPreferencesBackupHelper=new SharedPreferencesBackupHelper(this,prefs);
  addHelper(PREFS_BACKUP_KEY,sharedPreferencesBackupHelper);
  FileBackupHelper fileBackupHelper=new FileBackupHelper(this,DatabaseHelper.KEY_FILE,DatabaseHelper.SETTINGS_FILE);
  addHelper(FILES_BACKUP_KEY,fileBackupHelper);
}","@Override public void onCreate(){
  String prefs=getDefaultSharedPreferencesName();
  SharedPreferencesBackupHelper sharedPreferencesBackupHelper=new SharedPreferencesBackupHelper(this,prefs);
  addHelper(PREFS_BACKUP_KEY,sharedPreferencesBackupHelper);
  FileBackupHelper fileBackupHelper=new FileBackupHelper(this,Constants.FILENAME_ENCRYPTED_KEY,Constants.FILENAME_DATABASE,Constants.FILENAME_DATABASE_BACKUP);
  addHelper(FILES_BACKUP_KEY,fileBackupHelper);
}",0.8221970554926388
170655,"public void updateAuthPassword(String newAuth){
  PasswordHashPreference pwPref=(PasswordHashPreference)catSecurity.findPreference(getString(R.string.settings_key_auth_password));
  PasswordHashPreference pinPref=(PasswordHashPreference)catSecurity.findPreference(getString(R.string.settings_key_auth_pin));
  if (pwPref != null)   catSecurity.removePreference(pwPref);
  if (pinPref != null)   catSecurity.removePreference(pinPref);
switch (newAuth) {
case ""String_Node_Str"":
    PasswordHashPreference authPassword=new PasswordHashPreference(getActivity(),null);
  authPassword.setTitle(R.string.settings_title_auth_password);
authPassword.setOrder(3);
authPassword.setKey(getString(R.string.settings_key_auth_password_hash));
authPassword.setMode(PasswordHashPreference.Mode.PASSWORD);
catSecurity.addPreference(authPassword);
break;
case ""String_Node_Str"":
PasswordHashPreference authPIN=new PasswordHashPreference(getActivity(),null);
authPIN.setTitle(R.string.settings_title_auth_pin);
authPIN.setOrder(3);
authPIN.setKey(getString(R.string.settings_key_auth_pin_hash));
authPIN.setMode(PasswordHashPreference.Mode.PIN);
catSecurity.addPreference(authPIN);
break;
default :
break;
}
}","public void updateAuthPassword(String newAuth){
  PasswordHashPreference pwPref=(PasswordHashPreference)catSecurity.findPreference(getString(R.string.settings_key_auth_password_hash));
  PasswordHashPreference pinPref=(PasswordHashPreference)catSecurity.findPreference(getString(R.string.settings_key_auth_pin_hash));
  if (pwPref != null)   catSecurity.removePreference(pwPref);
  if (pinPref != null)   catSecurity.removePreference(pinPref);
switch (newAuth) {
case ""String_Node_Str"":
    PasswordHashPreference authPassword=new PasswordHashPreference(getActivity(),null);
  authPassword.setTitle(R.string.settings_title_auth_password);
authPassword.setOrder(3);
authPassword.setKey(getString(R.string.settings_key_auth_password_hash));
authPassword.setMode(PasswordHashPreference.Mode.PASSWORD);
catSecurity.addPreference(authPassword);
break;
case ""String_Node_Str"":
PasswordHashPreference authPIN=new PasswordHashPreference(getActivity(),null);
authPIN.setTitle(R.string.settings_title_auth_pin);
authPIN.setOrder(3);
authPIN.setKey(getString(R.string.settings_key_auth_pin_hash));
authPIN.setMode(PasswordHashPreference.Mode.PIN);
catSecurity.addPreference(authPIN);
break;
default :
break;
}
}",0.99581589958159
170656,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(R.string.app_name);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);
  setContentView(R.layout.activity_main);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  PreferenceManager.setDefaultValues(this,R.xml.preferences,false);
  settings.registerPreferenceChangeListener(this);
  if (savedInstanceState == null)   requireAuthentication=true;
  setBroadcastCallback(new BroadcastReceivedCallback(){
    @Override public void onReceivedScreenOff(){
      requireAuthentication=true;
    }
  }
);
  if (!settings.getFirstTimeWarningShown()) {
    showFirstTimeWarning();
  }
  floatingActionMenu=new FloatingActionMenu(this,(ConstraintLayout)findViewById(R.id.fab_main_layout));
  floatingActionMenu.setFABHandler(new FloatingActionMenu.FABHandler(){
    @Override public void onQRFabClick(){
      scanQRCode();
    }
    @Override public void onManualFabClick(){
      enterDetails();
    }
  }
);
  final ProgressBar progressBar=findViewById(R.id.progressBar);
  RecyclerView recList=findViewById(R.id.cardList);
  recList.setHasFixedSize(true);
  LinearLayoutManager llm=new LinearLayoutManager(this);
  llm.setOrientation(LinearLayoutManager.VERTICAL);
  recList.setLayoutManager(llm);
  adapter=new EntriesCardAdapter(this);
  recList.setAdapter(adapter);
  recList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrolled(    RecyclerView recyclerView,    int dx,    int dy){
      super.onScrolled(recyclerView,dx,dy);
      if (dy > 0) {
        floatingActionMenu.hide();
      }
 else {
        if (searchView == null || searchView.isIconified())         floatingActionMenu.show();
      }
    }
  }
);
  touchHelperCallback=new SimpleItemTouchHelperCallback(adapter);
  ItemTouchHelper touchHelper=new ItemTouchHelper(touchHelperCallback);
  touchHelper.attachToRecyclerView(recList);
  restoreSortMode();
  float durationScale=android.provider.Settings.Global.getFloat(this.getContentResolver(),android.provider.Settings.Global.ANIMATOR_DURATION_SCALE,0);
  final long animatorDuration=(long)(1000 / durationScale);
  adapter.setCallback(new EntriesCardAdapter.Callback(){
    @Override public void onMoveEventStart(){
      stopUpdater();
    }
    @Override public void onMoveEventStop(){
      startUpdater();
    }
  }
);
  handler=new Handler();
  handlerTask=new Runnable(){
    @Override public void run(){
      int progress=(int)(TokenCalculator.TOTP_DEFAULT_PERIOD - (System.currentTimeMillis() / 1000) % TokenCalculator.TOTP_DEFAULT_PERIOD);
      progressBar.setProgress(progress * 100);
      ObjectAnimator animation=ObjectAnimator.ofInt(progressBar,""String_Node_Str"",(progress - 1) * 100);
      animation.setDuration(animatorDuration);
      animation.setInterpolator(new LinearInterpolator());
      animation.start();
      adapter.updateTokens();
      handler.postDelayed(this,1000);
    }
  }
;
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(R.string.app_name);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);
  setContentView(R.layout.activity_main);
  Toolbar toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  PreferenceManager.setDefaultValues(this,R.xml.preferences,false);
  settings.registerPreferenceChangeListener(this);
  if (savedInstanceState == null)   requireAuthentication=true;
  setBroadcastCallback(new BroadcastReceivedCallback(){
    @Override public void onReceivedScreenOff(){
      requireAuthentication=true;
    }
  }
);
  if (!settings.getFirstTimeWarningShown()) {
    showFirstTimeWarning();
  }
  floatingActionMenu=new FloatingActionMenu(this,(ConstraintLayout)findViewById(R.id.fab_main_layout));
  floatingActionMenu.setFABHandler(new FloatingActionMenu.FABHandler(){
    @Override public void onQRFabClick(){
      scanQRCode();
    }
    @Override public void onManualFabClick(){
      enterDetails();
    }
  }
);
  final ProgressBar progressBar=findViewById(R.id.progressBar);
  RecyclerView recList=findViewById(R.id.cardList);
  recList.setHasFixedSize(true);
  LinearLayoutManager llm=new LinearLayoutManager(this);
  llm.setOrientation(LinearLayoutManager.VERTICAL);
  recList.setLayoutManager(llm);
  adapter=new EntriesCardAdapter(this);
  recList.setAdapter(adapter);
  recList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrolled(    RecyclerView recyclerView,    int dx,    int dy){
      super.onScrolled(recyclerView,dx,dy);
      if (dy > 0) {
        floatingActionMenu.hide();
      }
 else {
        if (searchView == null || searchView.isIconified())         floatingActionMenu.show();
      }
    }
  }
);
  touchHelperCallback=new SimpleItemTouchHelperCallback(adapter);
  ItemTouchHelper touchHelper=new ItemTouchHelper(touchHelperCallback);
  touchHelper.attachToRecyclerView(recList);
  restoreSortMode();
  float durationScale=android.provider.Settings.Global.getFloat(this.getContentResolver(),android.provider.Settings.Global.ANIMATOR_DURATION_SCALE,0);
  if (durationScale == 0)   durationScale=1;
  final long animatorDuration=(long)(1000 / durationScale);
  adapter.setCallback(new EntriesCardAdapter.Callback(){
    @Override public void onMoveEventStart(){
      stopUpdater();
    }
    @Override public void onMoveEventStop(){
      startUpdater();
    }
  }
);
  handler=new Handler();
  handlerTask=new Runnable(){
    @Override public void run(){
      int progress=(int)(TokenCalculator.TOTP_DEFAULT_PERIOD - (System.currentTimeMillis() / 1000) % TokenCalculator.TOTP_DEFAULT_PERIOD);
      progressBar.setProgress(progress * 100);
      ObjectAnimator animation=ObjectAnimator.ofInt(progressBar,""String_Node_Str"",(progress - 1) * 100);
      animation.setDuration(animatorDuration);
      animation.setInterpolator(new LinearInterpolator());
      animation.start();
      adapter.updateTokens();
      handler.postDelayed(this,1000);
    }
  }
;
}",0.9926983611877332
170657,"private void showSimpleSnackbar(String msg){
  Snackbar.make(fab,msg,Snackbar.LENGTH_LONG).setCallback(new Snackbar.Callback(){
    @Override public void onDismissed(    Snackbar snackbar,    int event){
      super.onDismissed(snackbar,event);
      if (entries.isEmpty()) {
        showNoAccount();
      }
    }
  }
).show();
}","private void showSimpleSnackbar(String msg){
  Snackbar.make(fab,msg,Snackbar.LENGTH_LONG).addCallback(new Snackbar.Callback(){
    @Override public void onDismissed(    Snackbar snackbar,    int event){
      super.onDismissed(snackbar,event);
      if (entries.isEmpty()) {
        showNoAccount();
      }
    }
  }
).show();
}",0.990909090909091
170658,"public void editEntryLabel(final int pos){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.alert_rename);
  final EditText input=new EditText(this);
  input.setText(adapter.getItem(pos).getLabel());
  input.setSingleLine();
  FrameLayout container=new FrameLayout(this);
  FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  params.leftMargin=getResources().getDimensionPixelSize(R.dimen.activity_horizontal_margin);
  params.rightMargin=getResources().getDimensionPixelSize(R.dimen.activity_horizontal_margin);
  input.setLayoutParams(params);
  container.addView(input);
  builder.setView(container);
  builder.setPositiveButton(R.string.button_save,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      adapter.getItem(pos).setLabel(input.getEditableText().toString());
      adapter.notifyDataSetChanged();
      SettingsHelper.store(getBaseContext(),entries);
    }
  }
);
  builder.setNegativeButton(R.string.button_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      dialogInterface.cancel();
    }
  }
);
  builder.show();
}","public void editEntryLabel(final int pos){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.alert_rename);
  final EditText input=new EditText(this);
  input.setText(adapter.getItem(pos).getLabel());
  input.setSingleLine();
  FrameLayout container=new FrameLayout(this);
  FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  params.leftMargin=getResources().getDimensionPixelSize(R.dimen.activity_horizontal_margin);
  params.rightMargin=getResources().getDimensionPixelSize(R.dimen.activity_horizontal_margin);
  input.setLayoutParams(params);
  container.addView(input);
  builder.setView(container);
  builder.setPositiveButton(R.string.button_save,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      adapter.getItem(pos).setLabel(input.getEditableText().toString());
      adapter.notifyItemChanged(pos);
      SettingsHelper.store(getBaseContext(),entries);
    }
  }
);
  builder.setNegativeButton(R.string.button_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      dialogInterface.cancel();
    }
  }
);
  builder.show();
}",0.9946686976389948
170659,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  super.onActivityResult(requestCode,resultCode,intent);
  if (requestCode == IntentIntegrator.REQUEST_CODE && resultCode == Activity.RESULT_OK) {
    try {
      Entry e=new Entry(intent.getStringExtra(Intents.Scan.RESULT));
      e.setCurrentOTP(TOTPHelper.generate(e.getSecret(),e.getPeriod()));
      entries.add(e);
      SettingsHelper.store(this,entries);
      adapter.notifyDataSetChanged();
      Snackbar.make(fab,R.string.msg_account_added,Snackbar.LENGTH_LONG).show();
    }
 catch (    Exception e) {
      Snackbar.make(fab,R.string.msg_invalid_qr_code,Snackbar.LENGTH_LONG).setCallback(new Snackbar.Callback(){
        @Override public void onDismissed(        Snackbar snackbar,        int event){
          super.onDismissed(snackbar,event);
          if (entries.isEmpty()) {
            showNoAccount();
          }
        }
      }
).show();
      return;
    }
  }
 else   if (requestCode == INTENT_OPEN_DOCUMENT && resultCode == Activity.RESULT_OK) {
    Uri file=null;
    if (intent != null) {
      file=intent.getData();
      doImportJSON(file);
    }
  }
 else   if (requestCode == INTENT_SAVE_DOCUMENT && resultCode == Activity.RESULT_OK) {
    Uri file=null;
    if (intent != null) {
      file=intent.getData();
      doExportJSON(file);
    }
  }
  if (entries.isEmpty()) {
    showNoAccount();
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  super.onActivityResult(requestCode,resultCode,intent);
  if (requestCode == IntentIntegrator.REQUEST_CODE && resultCode == Activity.RESULT_OK) {
    try {
      Entry e=new Entry(intent.getStringExtra(Intents.Scan.RESULT));
      e.setCurrentOTP(TOTPHelper.generate(e.getSecret(),e.getPeriod()));
      entries.add(e);
      SettingsHelper.store(this,entries);
      adapter.notifyDataSetChanged();
      Snackbar.make(fab,R.string.msg_account_added,Snackbar.LENGTH_LONG).show();
    }
 catch (    Exception e) {
      showSimpleSnackbar(R.string.msg_invalid_qr_code);
      return;
    }
  }
 else   if (requestCode == INTENT_OPEN_DOCUMENT && resultCode == Activity.RESULT_OK) {
    Uri file;
    if (intent != null) {
      file=intent.getData();
      doImportJSON(file);
    }
  }
 else   if (requestCode == INTENT_SAVE_DOCUMENT && resultCode == Activity.RESULT_OK) {
    Uri file;
    if (intent != null) {
      file=intent.getData();
      doExportJSON(file);
    }
  }
  if (entries.isEmpty()) {
    showNoAccount();
  }
}",0.8660117878192535
170660,"private void showAbout(){
  View messageView=getLayoutInflater().inflate(R.layout.dialog_about,null,false);
  String versionName=""String_Node_Str"";
  try {
    PackageInfo packageInfo=getPackageManager().getPackageInfo(getPackageName(),0);
    versionName=packageInfo.versionName;
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  TextView versionText=(TextView)messageView.findViewById(R.id.about_version);
  versionText.setText(versionName);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.app_name);
  builder.setIcon(R.mipmap.ic_launcher);
  builder.setView(messageView);
  builder.create();
  builder.show();
}","private void showAbout(){
  ViewGroup container=(ViewGroup)findViewById(R.id.main_content);
  View messageView=getLayoutInflater().inflate(R.layout.dialog_about,container,false);
  String versionName=""String_Node_Str"";
  try {
    PackageInfo packageInfo=getPackageManager().getPackageInfo(getPackageName(),0);
    versionName=packageInfo.versionName;
  }
 catch (  PackageManager.NameNotFoundException e) {
    e.printStackTrace();
  }
  TextView versionText=(TextView)messageView.findViewById(R.id.about_version);
  versionText.setText(versionName);
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.app_name);
  builder.setIcon(R.mipmap.ic_launcher);
  builder.setView(messageView);
  builder.create();
  builder.show();
}",0.9293067947838024
170661,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(R.string.app_name);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);
  setContentView(R.layout.activity_main);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  fab=(FloatingActionButton)findViewById(R.id.action_scan);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      scanQRCode();
    }
  }
);
  final ListView listView=(ListView)findViewById(R.id.listView);
  final ProgressBar progressBar=(ProgressBar)findViewById(R.id.progressBar);
  entries=SettingsHelper.load(this);
  adapter=new EntriesAdapter();
  adapter.setEntries(entries);
  listView.setAdapter(adapter);
  listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      nextSelection=entries.get(i);
      startActionMode(MainActivity.this);
      return true;
    }
  }
);
  if (entries.isEmpty()) {
    showNoAccount();
  }
  handler=new Handler();
  handlerTask=new Runnable(){
    @Override public void run(){
      int progress=(int)(System.currentTimeMillis() / 1000) % 30;
      progressBar.setProgress(progress * 100);
      ObjectAnimator animation=ObjectAnimator.ofInt(progressBar,""String_Node_Str"",(progress + 1) * 100);
      animation.setDuration(1000);
      animation.setInterpolator(new LinearInterpolator());
      animation.start();
      for (int i=0; i < adapter.getCount(); i++) {
        if (progress == 0 || adapter.getItem(i).getCurrentOTP() == null) {
          adapter.getItem(i).setCurrentOTP(TOTPHelper.generate(adapter.getItem(i).getSecret()));
        }
      }
      adapter.notifyDataSetChanged();
      handler.postDelayed(this,1000);
    }
  }
;
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(R.string.app_name);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);
  setContentView(R.layout.activity_main);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  fab=(FloatingActionButton)findViewById(R.id.action_scan);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      scanQRCode();
    }
  }
);
  final ListView listView=(ListView)findViewById(R.id.listView);
  final ProgressBar progressBar=(ProgressBar)findViewById(R.id.progressBar);
  entries=SettingsHelper.load(this);
  adapter=new EntriesAdapter();
  adapter.setEntries(entries);
  listView.setAdapter(adapter);
  listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      nextSelection=entries.get(i);
      startActionMode(MainActivity.this);
      return true;
    }
  }
);
  if (entries.isEmpty()) {
    showNoAccount();
  }
  handler=new Handler();
  handlerTask=new Runnable(){
    @Override public void run(){
      int progress=(int)(System.currentTimeMillis() / 1000) % 30;
      progressBar.setProgress(progress * 100);
      ObjectAnimator animation=ObjectAnimator.ofInt(progressBar,""String_Node_Str"",(progress + 1) * 100);
      animation.setDuration(1000);
      animation.setInterpolator(new LinearInterpolator());
      animation.start();
      for (int i=0; i < adapter.getCount(); i++) {
        adapter.getItem(i).setCurrentOTP(TOTPHelper.generate(adapter.getItem(i).getSecret()));
      }
      adapter.notifyDataSetChanged();
      handler.postDelayed(this,1000);
    }
  }
;
}",0.9771112865035516
170662,"@Override public void run(){
  int progress=(int)(System.currentTimeMillis() / 1000) % 30;
  progressBar.setProgress(progress * 100);
  ObjectAnimator animation=ObjectAnimator.ofInt(progressBar,""String_Node_Str"",(progress + 1) * 100);
  animation.setDuration(1000);
  animation.setInterpolator(new LinearInterpolator());
  animation.start();
  for (int i=0; i < adapter.getCount(); i++) {
    if (progress == 0 || adapter.getItem(i).getCurrentOTP() == null) {
      adapter.getItem(i).setCurrentOTP(TOTPHelper.generate(adapter.getItem(i).getSecret()));
    }
  }
  adapter.notifyDataSetChanged();
  handler.postDelayed(this,1000);
}","@Override public void run(){
  int progress=(int)(System.currentTimeMillis() / 1000) % 30;
  progressBar.setProgress(progress * 100);
  ObjectAnimator animation=ObjectAnimator.ofInt(progressBar,""String_Node_Str"",(progress + 1) * 100);
  animation.setDuration(1000);
  animation.setInterpolator(new LinearInterpolator());
  animation.start();
  for (int i=0; i < adapter.getCount(); i++) {
    adapter.getItem(i).setCurrentOTP(TOTPHelper.generate(adapter.getItem(i).getSecret()));
  }
  adapter.notifyDataSetChanged();
  handler.postDelayed(this,1000);
}",0.9333333333333332
170663,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  storiesProgressView=(StoriesProgressView)findViewById(R.id.stories);
  storiesProgressView.setStoriesCount(PROGRESS_COUNT);
  storiesProgressView.setStoryDuration(5000L);
  storiesProgressView.setStoriesListener(this);
  storiesProgressView.startStories();
  image=(ImageView)findViewById(R.id.image);
  image.setImageResource(resources[counter]);
  View reverse=findViewById(R.id.reverse);
  reverse.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      storiesProgressView.reverse();
    }
  }
);
  View skip=findViewById(R.id.skip);
  skip.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      storiesProgressView.skip();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
  setContentView(R.layout.activity_main);
  storiesProgressView=(StoriesProgressView)findViewById(R.id.stories);
  storiesProgressView.setStoriesCount(PROGRESS_COUNT);
  storiesProgressView.setStoryDuration(3000L);
  storiesProgressView.setStoriesListener(this);
  storiesProgressView.startStories();
  image=(ImageView)findViewById(R.id.image);
  image.setImageResource(resources[counter]);
  View reverse=findViewById(R.id.reverse);
  reverse.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      storiesProgressView.reverse();
    }
  }
);
  reverse.setOnTouchListener(onTouchListener);
  View skip=findViewById(R.id.skip);
  skip.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      storiesProgressView.skip();
    }
  }
);
  skip.setOnTouchListener(onTouchListener);
}",0.9156626506024096
170664,"@Override public void onComplete(){
  Log.d(TAG,""String_Node_Str"");
}","@Override public void onComplete(){
}",0.6981132075471698
170665,"@Override public void onPrev(){
  Log.d(TAG,""String_Node_Str"");
  if ((counter - 1) < 0)   return;
  image.setImageResource(resources[--counter]);
}","@Override public void onPrev(){
  if ((counter - 1) < 0)   return;
  image.setImageResource(resources[--counter]);
}",0.8787878787878788
170666,"@Override public void onNext(){
  Log.d(TAG,""String_Node_Str"");
  image.setImageResource(resources[++counter]);
}","@Override public void onNext(){
  image.setImageResource(resources[++counter]);
}",0.8350515463917526
170667,"private void finishProgress(boolean isMax){
  int res=isMax ? R.color.progress_max_active : R.color.progress_max_inactive;
  maxProgressView.setBackgroundResource(res);
  maxProgressView.setVisibility(VISIBLE);
  if (animation != null) {
    animation.setAnimationListener(null);
    animation.cancel();
    if (callback != null) {
      callback.onFinishProgress();
    }
  }
}","private void finishProgress(boolean isMax){
  if (isMax)   maxProgressView.setBackgroundResource(R.color.progress_max_active);
  maxProgressView.setVisibility(isMax ? VISIBLE : GONE);
  if (animation != null) {
    animation.setAnimationListener(null);
    animation.cancel();
    if (callback != null) {
      callback.onFinishProgress();
    }
  }
}",0.8340192043895748
170668,"public void resume(){
  progressBars.get(current).resumeProgress();
}","/** 
 * Resume story
 */
public void resume(){
  progressBars.get(current).resumeProgress();
}",0.8466257668711656
170669,"@Override public void onStartProgress(){
  Log.d(TAG,""String_Node_Str"" + current + ""String_Node_Str"");
  current=index;
}","@Override public void onStartProgress(){
  current=index;
}",0.6555555555555556
170670,"public void pause(){
  progressBars.get(current).pauseProgress();
}","/** 
 * Pause story
 */
public void pause(){
  progressBars.get(current).pauseProgress();
}",0.8481012658227848
170671,"private PausableProgressBar.Callback callback(final int index){
  return new PausableProgressBar.Callback(){
    @Override public void onStartProgress(){
      Log.d(TAG,""String_Node_Str"" + current + ""String_Node_Str"");
      current=index;
    }
    @Override public void onFinishProgress(){
      Log.d(TAG,""String_Node_Str"" + current + ""String_Node_Str"");
      if (isReverse) {
        isReverse=false;
        if (storiesListener != null)         storiesListener.onPrev();
        if (0 <= (current - 1)) {
          PausableProgressBar p=progressBars.get(current - 1);
          p.setMinWithoutCallback();
          progressBars.get(--current).startProgress();
        }
 else {
          progressBars.get(current).startProgress();
        }
        return;
      }
      int next=current + 1;
      if (next <= (progressBars.size() - 1)) {
        if (storiesListener != null)         storiesListener.onNext();
        progressBars.get(next).startProgress();
      }
 else {
        isComplete=true;
        if (storiesListener != null)         storiesListener.onComplete();
      }
    }
  }
;
}","private PausableProgressBar.Callback callback(final int index){
  return new PausableProgressBar.Callback(){
    @Override public void onStartProgress(){
      current=index;
    }
    @Override public void onFinishProgress(){
      if (isReverse) {
        isReverse=false;
        if (storiesListener != null)         storiesListener.onPrev();
        if (0 <= (current - 1)) {
          PausableProgressBar p=progressBars.get(current - 1);
          p.setMinWithoutCallback();
          progressBars.get(--current).startProgress();
        }
 else {
          progressBars.get(current).startProgress();
        }
        return;
      }
      int next=current + 1;
      if (next <= (progressBars.size() - 1)) {
        if (storiesListener != null)         storiesListener.onNext();
        progressBars.get(next).startProgress();
      }
 else {
        isComplete=true;
        if (storiesListener != null)         storiesListener.onComplete();
      }
    }
  }
;
}",0.9363548698167792
170672,"@Override public void onFinishProgress(){
  Log.d(TAG,""String_Node_Str"" + current + ""String_Node_Str"");
  if (isReverse) {
    isReverse=false;
    if (storiesListener != null)     storiesListener.onPrev();
    if (0 <= (current - 1)) {
      PausableProgressBar p=progressBars.get(current - 1);
      p.setMinWithoutCallback();
      progressBars.get(--current).startProgress();
    }
 else {
      progressBars.get(current).startProgress();
    }
    return;
  }
  int next=current + 1;
  if (next <= (progressBars.size() - 1)) {
    if (storiesListener != null)     storiesListener.onNext();
    progressBars.get(next).startProgress();
  }
 else {
    isComplete=true;
    if (storiesListener != null)     storiesListener.onComplete();
  }
}","@Override public void onFinishProgress(){
  if (isReverse) {
    isReverse=false;
    if (storiesListener != null)     storiesListener.onPrev();
    if (0 <= (current - 1)) {
      PausableProgressBar p=progressBars.get(current - 1);
      p.setMinWithoutCallback();
      progressBars.get(--current).startProgress();
    }
 else {
      progressBars.get(current).startProgress();
    }
    return;
  }
  int next=current + 1;
  if (next <= (progressBars.size() - 1)) {
    if (storiesListener != null)     storiesListener.onNext();
    progressBars.get(next).startProgress();
  }
 else {
    isComplete=true;
    if (storiesListener != null)     storiesListener.onComplete();
  }
}",0.9565217391304348
170673,"public static List<NewEle> handlerTextType(String text,String outerHtml){
  List<NewEle> newEleList=new ArrayList<>();
  if (!TextUtils.isEmpty(text)) {
    String removeLogo=text.replaceAll(NewEle.TAG_LOGO,""String_Node_Str"");
    if (removeLogo.contains(NewEle.TAG_PERIOD)) {
      String[] splitArr=removeLogo.split(NewEle.TAG_PERIOD);
      for (      String str : splitArr) {
        NewEle newEleText=new NewEle();
        newEleText.type=NewEle.TYPE_TEXT;
        String itemStr=str.concat(NewEle.TAG_PERIOD);
        newEleText.text=itemStr.trim();
        newEleText.html=outerHtml;
        newEleList.add(newEleText);
      }
    }
 else {
      NewEle newEleText=new NewEle();
      newEleText.type=NewEle.TYPE_TEXT;
      newEleText.text=text.trim();
      newEleText.html=outerHtml;
      newEleList.add(newEleText);
    }
  }
  return newEleList;
}","public static List<NewEle> handlerTextType(String text,String outerHtml){
  List<NewEle> newEleList=new ArrayList<>();
  if (!TextUtils.isEmpty(text)) {
    String removeLogo=text.replaceAll(NewEle.TAG_LOGO,""String_Node_Str"");
    if (removeLogo.contains(NewEle.TAG_PERIOD)) {
      String[] splitArr=removeLogo.split(NewEle.TAG_PERIOD);
      for (      String str : splitArr) {
        if (str.length() > 1) {
          NewEle newEleText=new NewEle();
          newEleText.type=NewEle.TYPE_TEXT;
          String itemStr=str.concat(NewEle.TAG_PERIOD);
          newEleText.text=itemStr.trim();
          newEleText.html=outerHtml;
          newEleList.add(newEleText);
        }
      }
    }
 else {
      NewEle newEleText=new NewEle();
      newEleText.type=NewEle.TYPE_TEXT;
      newEleText.text=text.trim();
      newEleText.html=outerHtml;
      newEleList.add(newEleText);
    }
  }
  return newEleList;
}",0.9335585585585584
170674,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  String videoHtml=getIntent().getStringExtra(VIDEO_HTML);
  if (TextUtils.isEmpty(videoHtml)) {
    finish();
  }
  if (videoDetailFragment == null) {
    videoDetailFragment=VideoDetailFragment.newInstance(videoHtml);
    getSupportFragmentManager().beginTransaction().add(R.id.container_fl,videoDetailFragment,VideoDetailFragment.class.getSimpleName()).commit();
  }
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  setContentView(R.layout.container);
  String videoHtml=getIntent().getStringExtra(VIDEO_HTML);
  if (TextUtils.isEmpty(videoHtml)) {
    finish();
  }
  if (videoDetailFragment == null) {
    videoDetailFragment=VideoDetailFragment.newInstance(videoHtml);
    getSupportFragmentManager().beginTransaction().add(R.id.container_fl,videoDetailFragment,VideoDetailFragment.class.getSimpleName()).commit();
  }
}",0.9712121212121212
170675,"@Override public void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    convertListener=(ViewConvertListener)savedInstanceState.getSerializable(""String_Node_Str"");
  }
}","@Override public void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    convertListener=savedInstanceState.getParcelable(""String_Node_Str"");
  }
}",0.9247311827956988
170676,"/** 
 * 保存接口
 * @param outState
 */
@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putSerializable(""String_Node_Str"",convertListener);
}","/** 
 * 保存接口
 * @param outState
 */
@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putParcelable(""String_Node_Str"",convertListener);
}",0.9747474747474748
170677,"void convertView(ViewHolder holder,BaseNiceDialog dialog);","@Override protected void convertView(ViewHolder holder,BaseNiceDialog dialog){
}",0.8260869565217391
170678,"@Scheduled(cron=""String_Node_Str"") @SuppressWarnings(""String_Node_Str"") public void refreshIndex() throws Exception {
  String ip=IPUtils.getServerIp().replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (REGULARIP.equals(ip)) {
    String content=HttpHelper.getInstance().get(""String_Node_Str"");
    logService.record(""String_Node_Str"",""String_Node_Str"");
    JedisUtil.getInstance().set(""String_Node_Str"",content);
  }
}","@Scheduled(cron=""String_Node_Str"") @SuppressWarnings(""String_Node_Str"") public void refreshIndex() throws Exception {
  String ip=IPUtils.getServerIp().replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (REGULARIP.equals(ip)) {
    String content=HttpHelper.getInstance().get(""String_Node_Str"");
    logService.record(""String_Node_Str"",""String_Node_Str"");
    if (!Strings.isNullOrEmpty(content)) {
      JedisUtil.getInstance().set(""String_Node_Str"",content);
    }
  }
}",0.943270300333704
170679,"public List<Blog> searchBlog(Integer pageStart,String q,Integer pagehits) throws Exception {
  dir=FSDirectory.open(Paths.get(""String_Node_Str""));
  IndexReader reader=DirectoryReader.open(dir);
  IndexSearcher search=new IndexSearcher(reader);
  ScoreDoc lastBottom=null;
  BooleanQuery.Builder booleanQuery=new BooleanQuery.Builder();
  SmartChineseAnalyzer analyzer=new SmartChineseAnalyzer();
  QueryParser parser1=new QueryParser(""String_Node_Str"",analyzer);
  Query query1=parser1.parse(q);
  QueryParser parser2=new QueryParser(""String_Node_Str"",analyzer);
  Query query2=parser2.parse(q);
  booleanQuery.add(query1,BooleanClause.Occur.SHOULD);
  booleanQuery.add(query2,BooleanClause.Occur.SHOULD);
  TopDocs hits=search.searchAfter(lastBottom,booleanQuery.build(),pagehits);
  pageStart+=hits.scoreDocs.length;
  lastBottom=hits.scoreDocs[hits.scoreDocs.length - 1];
  QueryScorer scorer=new QueryScorer(query1);
  Fragmenter fragmenter=new SimpleSpanFragmenter(scorer);
  SimpleHTMLFormatter simpleHTMLFormatter=new SimpleHTMLFormatter(""String_Node_Str"",""String_Node_Str"");
  Highlighter highlighter=new Highlighter(simpleHTMLFormatter,scorer);
  highlighter.setTextFragmenter(fragmenter);
  List<Blog> blogIndexList=new LinkedList<>();
  for (  ScoreDoc scoreDoc : hits.scoreDocs) {
    Document doc=search.doc(scoreDoc.doc);
    Blog blog=new Blog();
    blog.setBlogid(Integer.parseInt(doc.get((""String_Node_Str""))));
    blog.setCreateAt(DateTime.parse(doc.get(""String_Node_Str"")).toString());
    blog.setImageurl(doc.get(""String_Node_Str""));
    blog.setCategoryid(Integer.parseInt(doc.get(""String_Node_Str"")));
    blog.setHits(Integer.parseInt(doc.get(""String_Node_Str"")));
    String title=doc.get(""String_Node_Str"");
    String content=doc.get(""String_Node_Str"");
    if (title != null) {
      TokenStream tokenStream=analyzer.tokenStream(""String_Node_Str"",new StringReader(title));
      String hTitle=highlighter.getBestFragment(tokenStream,title);
      if (StringUtil.isEmpty(hTitle)) {
        blog.setTitle(title);
      }
 else {
        blog.setTitle(hTitle);
      }
    }
    if (content != null) {
      TokenStream tokenStream=analyzer.tokenStream(""String_Node_Str"",new StringReader(content));
      String hContent=highlighter.getBestFragment(tokenStream,content);
      System.out.println(hContent);
      if (StringUtil.isEmpty(hContent)) {
        if (content.length() <= 400) {
          blog.setSummary(content);
        }
 else {
          blog.setSummary(content.substring(0,400));
        }
      }
 else {
        blog.setSummary(hContent);
      }
    }
    blogIndexList.add(blog);
  }
  return blogIndexList;
}","/** 
 * 首先是对标题进行查找，然后对文章内容进行查找
 * @param pageStart
 * @param q
 * @param pagehits
 * @return
 * @throws Exception
 */
public List<Blog> searchBlog(Integer pageStart,String q,Integer pagehits) throws Exception {
  dir=FSDirectory.open(Paths.get(""String_Node_Str""));
  IndexReader reader=DirectoryReader.open(dir);
  IndexSearcher search=new IndexSearcher(reader);
  ScoreDoc lastBottom=null;
  BooleanQuery.Builder booleanQuery=new BooleanQuery.Builder();
  SmartChineseAnalyzer analyzer=new SmartChineseAnalyzer();
  QueryParser parser1=new QueryParser(""String_Node_Str"",analyzer);
  Query query1=parser1.parse(q);
  QueryParser parser2=new QueryParser(""String_Node_Str"",analyzer);
  Query query2=parser2.parse(q);
  booleanQuery.add(query1,BooleanClause.Occur.SHOULD);
  booleanQuery.add(query2,BooleanClause.Occur.SHOULD);
  TopDocs hits=search.searchAfter(lastBottom,booleanQuery.build(),pagehits);
  QueryScorer scorer=new QueryScorer(query1);
  Fragmenter fragmenter=new SimpleSpanFragmenter(scorer);
  SimpleHTMLFormatter simpleHTMLFormatter=new SimpleHTMLFormatter(""String_Node_Str"",""String_Node_Str"");
  Highlighter highlighter=new Highlighter(simpleHTMLFormatter,scorer);
  highlighter.setTextFragmenter(fragmenter);
  List<Blog> blogIndexList=new LinkedList<>();
  for (  ScoreDoc scoreDoc : hits.scoreDocs) {
    Document doc=search.doc(scoreDoc.doc);
    Blog blog=new Blog();
    blog.setBlogid(Integer.parseInt(doc.get((""String_Node_Str""))));
    blog.setCreateAt(DateTime.parse(doc.get(""String_Node_Str"")).toString());
    blog.setImageurl(doc.get(""String_Node_Str""));
    blog.setCategoryid(Integer.parseInt(doc.get(""String_Node_Str"")));
    blog.setHits(Integer.parseInt(doc.get(""String_Node_Str"")));
    String title=doc.get(""String_Node_Str"");
    String content=doc.get(""String_Node_Str"");
    if (title != null) {
      TokenStream tokenStream=analyzer.tokenStream(""String_Node_Str"",new StringReader(title));
      String hTitle=highlighter.getBestFragment(tokenStream,title);
      if (StringUtil.isEmpty(hTitle)) {
        blog.setTitle(title);
      }
 else {
        blog.setTitle(hTitle);
      }
    }
    if (content != null) {
      TokenStream tokenStream=analyzer.tokenStream(""String_Node_Str"",new StringReader(content));
      String hContent=highlighter.getBestFragment(tokenStream,content);
      if (StringUtil.isEmpty(hContent)) {
        if (content.length() <= 400) {
          blog.setSummary(content);
        }
 else {
          blog.setSummary(content.substring(0,400));
        }
      }
 else {
        blog.setSummary(hContent);
      }
    }
    blogIndexList.add(blog);
  }
  return blogIndexList;
}",0.953602414183327
170680,"public BytesRef next(){
  if (productIterator.hasNext()) {
    currentBlog=productIterator.next();
    try {
      return new BytesRef(Jsoup.parse(currentBlog.getTitle()).text().getBytes(""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
      return null;
    }
  }
 else {
    return null;
  }
}","public BytesRef next(){
  if (blogIterator.hasNext()) {
    currentBlog=blogIterator.next();
    try {
      return new BytesRef(Jsoup.parse(currentBlog.getTitle()).text().getBytes(""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
      return null;
    }
  }
 else {
    return null;
  }
}",0.9660493827160492
170681,"/** 
 * 将Blog对象序列化存入payload [这里仅仅是个示例，其实这种做法不可取,一般不会把整个对象存入payload,这样索引体积会很大，浪费硬盘空间]
 */
public BytesRef payload(){
  try {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    ObjectOutputStream out=new ObjectOutputStream(bos);
    out.writeObject(currentBlog);
    out.close();
    BytesRef bytesRef=new BytesRef(bos.toByteArray());
    return bytesRef;
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * 将Blog对象序列化存入payload 可以只将所需要的字段存入payload，这里对整个实体类进行序列化，方便以后需求，不建议采用这种方法
 */
public BytesRef payload(){
  try {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    ObjectOutputStream out=new ObjectOutputStream(bos);
    out.writeObject(currentBlog);
    out.close();
    BytesRef bytesRef=new BytesRef(bos.toByteArray());
    return bytesRef;
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
}",0.8989010989010989
170682,"/** 
 * 返回权重值，这个值会影响排序 这里以产品的销售量作为权重值，weight值即最终返回的热词列表里每个热词的权重值 怎么设计返回这个权重值，发挥你们的想象力吧
 */
public long weight(){
  return currentBlog.getHits();
}","/** 
 * 返回权重值，这个值会影响排序 这里以产品的销售量作为权重值，weight值即最终返回的热词列表里每个热词的权重值
 */
public long weight(){
  return currentBlog.getHits();
}",0.9185185185185184
170683,"/** 
 * 把产品的销售区域存入context，context里可以是任意的自定义数据，一般用于数据过滤 Set集合里的每一个元素都会被创建一个TermQuery，你只是提供一个Set集合，至于new TermQuery Lucene底层API去做了，但你必须要了解底层干了些什么
 */
public Set<BytesRef> contexts(){
  try {
    Set<BytesRef> regions=new HashSet<BytesRef>();
    regions.add(new BytesRef(currentBlog.getTitle().getBytes(""String_Node_Str"")));
    return regions;
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * 文章标题
 */
public Set<BytesRef> contexts(){
  try {
    Set<BytesRef> regions=new HashSet<BytesRef>();
    regions.add(new BytesRef(currentBlog.getTitle().getBytes(""String_Node_Str"")));
    return regions;
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.8188976377952756
170684,"public BlogIterator(Iterator<Blog> productIterator){
  this.productIterator=productIterator;
}","public BlogIterator(Iterator<Blog> blogIterator){
  this.blogIterator=blogIterator;
}",0.8491620111731844
170685,"/** 
 * lookup
 * @param suggester
 * @param keyword
 * @throws IOException
 */
private static List<String> lookup(AnalyzingInfixSuggester suggester,String keyword) throws IOException {
  List<LookupResult> results=suggester.lookup(keyword,20,true,true);
  System.out.println(keyword);
  List<String> list=new ArrayList<>();
  for (  LookupResult result : results) {
    list.add(result.key.toString());
  }
  return list;
}","/** 
 * lookup
 * @param suggester
 * @param keyword
 * @throws IOException
 */
private static List<String> lookup(AnalyzingInfixSuggester suggester,String keyword) throws IOException {
  List<LookupResult> results=suggester.lookup(keyword,20,true,true);
  List<String> list=new ArrayList<>();
  for (  LookupResult result : results) {
    list.add(result.key.toString());
  }
  return list;
}",0.9620563035495716
170686,"/** 
 * ajax简历索引
 */
@Override public void ajaxbuild(){
  try {
    Directory dir=FSDirectory.open(Paths.get(""String_Node_Str""));
    RAMDirectory indexDir=new RAMDirectory();
    SmartChineseAnalyzer analyzer=new SmartChineseAnalyzer();
    AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(dir,analyzer);
    List<Blog> blogs=blogMapper.getAllBlog();
    suggester.build(new BlogIterator(blogs.iterator()));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
}","/** 
 * ajax简历索引
 */
@Override public void ajaxbuild(){
  try {
    Directory dir=FSDirectory.open(Paths.get(""String_Node_Str""));
    SmartChineseAnalyzer analyzer=new SmartChineseAnalyzer();
    AnalyzingInfixSuggester suggester=new AnalyzingInfixSuggester(dir,analyzer);
    List<Blog> blogs=blogMapper.getAllBlog();
    suggester.build(new BlogIterator(blogs.iterator()));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
}",0.9518828451882844
170687,"@SuppressWarnings(""String_Node_Str"") private void dataMatches(String address,DataTable dataTable,Consumer<Map<String,String>[]> dataProcessor){
  List<Map<String,String>> expectedMaps=dataTable.asMaps(String.class,String.class);
  List<Map<String,String>> actualMaps=new ArrayList<>();
  await().atMost(5,SECONDS).until(() -> {
    actualMaps.clear();
    Collections.addAll(actualMaps,retrieveDataMaps(address,dataProcessor));
    return expectedMaps.size() == actualMaps.size();
  }
);
  if (expectedMaps.isEmpty() && actualMaps.isEmpty()) {
    return;
  }
  LOG.info(""String_Node_Str"",actualMaps);
  dataTable.diff(DataTable.create(actualMaps));
}","@SuppressWarnings(""String_Node_Str"") private void dataMatches(String address,DataTable dataTable,Consumer<Map<String,String>[]> dataProcessor){
  List<Map<String,String>> expectedMaps=dataTable.asMaps(String.class,String.class);
  List<Map<String,String>> actualMaps=new ArrayList<>();
  await().atMost(5,SECONDS).until(() -> {
    actualMaps.clear();
    Collections.addAll(actualMaps,retrieveDataMaps(address,dataProcessor));
    boolean result=expectedMaps.size() == actualMaps.size();
    if (!result) {
      LOG.warn(""String_Node_Str"",expectedMaps.size(),actualMaps.size());
    }
    return expectedMaps.size() == actualMaps.size();
  }
);
  if (expectedMaps.isEmpty() && actualMaps.isEmpty()) {
    return;
  }
  LOG.info(""String_Node_Str"",actualMaps);
  dataTable.diff(DataTable.create(actualMaps));
}",0.7898699520876112
170688,"@Test public void abortTimeoutTxStartedEvent(){
  asyncStub.onConnected(serviceConfig,compensateResponseObserver);
  blockingStub.onTxEvent(someGrpcEvent(SagaStartedEvent,globalTxId,globalTxId,null));
  blockingStub.onTxEvent(someGrpcEventWithTimeout(TxStartedEvent,localTxId,globalTxId,1));
  await().atMost(2,SECONDS).until(() -> {
    List<TxEvent> events=eventRepo.findByGlobalTxId(globalTxId);
    return eventRepo.count() == 5 && events.get(events.size() - 1).type().equals(SagaEndedEvent.name());
  }
);
  List<TxEvent> events=eventRepo.findByGlobalTxId(globalTxId);
  assertThat(events.get(0).type(),is(SagaStartedEvent.name()));
  assertThat(events.get(1).type(),is(TxStartedEvent.name()));
  assertThat(events.get(2).type(),is(TxAbortedEvent.name()));
  assertThat(events.get(3).type(),is(TxCompensatedEvent.name()));
  assertThat(events.get(4).type(),is(SagaEndedEvent.name()));
  await().atMost(2,SECONDS).until(this::waitTillTimeoutDone);
  assertThat(timeoutEntityRepository.count(),is(1L));
  Iterable<TxTimeout> timeouts=timeoutEntityRepository.findAll();
  timeouts.forEach(timeout -> {
    assertThat(timeout.status(),is(DONE.name()));
    assertThat(timeout.globalTxId(),is(globalTxId));
    assertThat(timeout.localTxId(),is(localTxId));
  }
);
}","@Test public void abortTimeoutTxStartedEvent(){
  asyncStub.onConnected(serviceConfig,compensateResponseObserver);
  blockingStub.onTxEvent(someGrpcEvent(SagaStartedEvent,globalTxId,globalTxId,null));
  blockingStub.onTxEvent(someGrpcEventWithTimeout(TxStartedEvent,localTxId,globalTxId,1));
  await().atMost(2,SECONDS).until(() -> {
    List<TxEvent> events=eventRepo.findByGlobalTxId(globalTxId);
    return eventRepo.count() == 5 && events.get(events.size() - 1).type().equals(SagaEndedEvent.name());
  }
);
  List<TxEvent> events=eventRepo.findByGlobalTxId(globalTxId);
  assertThat(events.get(0).type(),is(SagaStartedEvent.name()));
  assertThat(events.get(1).type(),is(TxStartedEvent.name()));
  assertThat(events.get(2).type(),is(TxAbortedEvent.name()));
  if (""String_Node_Str"".equals(events.get(3).type())) {
    assertThat(events.get(4).type(),is(SagaEndedEvent.name()));
  }
 else {
    assertThat(events.get(3).type(),is(SagaEndedEvent.name()));
    assertThat(events.get(4).type(),is(TxCompensatedEvent.name()));
  }
  await().atMost(2,SECONDS).until(this::waitTillTimeoutDone);
  assertThat(timeoutEntityRepository.count(),is(1L));
  Iterable<TxTimeout> timeouts=timeoutEntityRepository.findAll();
  timeouts.forEach(timeout -> {
    assertThat(timeout.status(),is(DONE.name()));
    assertThat(timeout.globalTxId(),is(globalTxId));
    assertThat(timeout.localTxId(),is(localTxId));
  }
);
}",0.9034431137724552
170689,"@Test(timeout=5000) public void compensatesFailedGlobalTransaction() throws Exception {
  ResponseEntity<String> entity=restTemplate.getForEntity(""String_Node_Str"",String.class,TRESPASSER);
  assertThat(entity.getStatusCode(),is(INTERNAL_SERVER_ERROR));
  await().atMost(2,SECONDS).until(() -> eventRepo.count() == 7);
  List<String> distinctGlobalTxIds=eventRepo.findDistinctGlobalTxId();
  assertThat(distinctGlobalTxIds.size(),is(1));
  String globalTxId=distinctGlobalTxIds.get(0);
  List<TxEvent> events=eventRepo.findByGlobalTxIdOrderByCreationTime(globalTxId);
  assertThat(events.size(),is(7));
  TxEvent sagaStartedEvent=events.get(0);
  assertThat(sagaStartedEvent.type(),is(""String_Node_Str""));
  TxEvent txStartedEvent1=events.get(1);
  assertThat(txStartedEvent1.type(),is(""String_Node_Str""));
  assertThat(events.get(2).type(),is(""String_Node_Str""));
  TxEvent txStartedEvent2=events.get(3);
  assertThat(txStartedEvent2.type(),is(""String_Node_Str""));
  TxEvent txAbortedEvent=events.get(4);
  assertThat(txAbortedEvent.type(),is(""String_Node_Str""));
  assertThat(txAbortedEvent.localTxId(),is(txStartedEvent2.localTxId()));
  assertThat(txAbortedEvent.parentTxId(),is(globalTxId));
  assertThat(txAbortedEvent.serviceName(),is(serviceName));
  assertThat(txAbortedEvent.instanceId(),is(txStartedEvent2.instanceId()));
  assertThat(events.get(5).type(),is(""String_Node_Str""));
  txAbortedEvent=events.get(5);
  System.out.println(txAbortedEvent);
  assertThat(txAbortedEvent.localTxId(),is(globalTxId));
  assertThat(txAbortedEvent.globalTxId(),is(globalTxId));
  assertThat(txAbortedEvent.parentTxId(),is(nullValue()));
  TxEvent txCompensatedEvent1=events.get(6);
  assertThat(txCompensatedEvent1.type(),is(""String_Node_Str""));
  assertThat(txCompensatedEvent1.localTxId(),is(txStartedEvent1.localTxId()));
  assertThat(txCompensatedEvent1.parentTxId(),is(globalTxId));
  assertThat(txCompensatedEvent1.serviceName(),is(serviceName));
  assertThat(txCompensatedEvent1.instanceId(),is(txStartedEvent1.instanceId()));
  assertThat(compensatedMessages,contains(""String_Node_Str"" + TRESPASSER));
}","@Test(timeout=5000) public void compensatesFailedGlobalTransaction() throws Exception {
  ResponseEntity<String> entity=restTemplate.getForEntity(""String_Node_Str"",String.class,TRESPASSER);
  assertThat(entity.getStatusCode(),is(INTERNAL_SERVER_ERROR));
  await().atMost(2,SECONDS).until(() -> eventRepo.count() == 7);
  List<String> distinctGlobalTxIds=eventRepo.findDistinctGlobalTxId();
  assertThat(distinctGlobalTxIds.size(),is(1));
  String globalTxId=distinctGlobalTxIds.get(0);
  List<TxEvent> events=eventRepo.findByGlobalTxIdOrderByCreationTime(globalTxId);
  assertThat(events.size(),is(7));
  TxEvent sagaStartedEvent=events.get(0);
  assertThat(sagaStartedEvent.type(),is(""String_Node_Str""));
  TxEvent txStartedEvent1=events.get(1);
  assertThat(txStartedEvent1.type(),is(""String_Node_Str""));
  assertThat(events.get(2).type(),is(""String_Node_Str""));
  TxEvent txStartedEvent2=events.get(3);
  assertThat(txStartedEvent2.type(),is(""String_Node_Str""));
  TxEvent txAbortedEvent=events.get(4);
  assertThat(txAbortedEvent.type(),is(""String_Node_Str""));
  assertThat(txAbortedEvent.localTxId(),is(txStartedEvent2.localTxId()));
  assertThat(txAbortedEvent.parentTxId(),is(globalTxId));
  assertThat(txAbortedEvent.serviceName(),is(serviceName));
  assertThat(txAbortedEvent.instanceId(),is(txStartedEvent2.instanceId()));
  TxEvent event=events.get(5);
  checkedLastTwoEvents(globalTxId,txStartedEvent1,event);
  event=events.get(6);
  checkedLastTwoEvents(globalTxId,txStartedEvent1,event);
  assertThat(compensatedMessages,contains(""String_Node_Str"" + TRESPASSER));
}",0.7454594741122256
170690,"@Test(timeout=5000) public void compensateWhenRetryReachesMaximum() throws InterruptedException {
  ResponseEntity<String> entity=restTemplate.getForEntity(""String_Node_Str"",String.class,TRESPASSER,5);
  assertThat(entity.getStatusCode(),is(INTERNAL_SERVER_ERROR));
  await().atMost(3,SECONDS).until(() -> eventRepo.count() == 11);
  List<String> distinctGlobalTxIds=eventRepo.findDistinctGlobalTxId();
  assertThat(distinctGlobalTxIds.size(),is(1));
  String globalTxId=distinctGlobalTxIds.get(0);
  List<TxEvent> events=eventRepo.findByGlobalTxIdOrderByCreationTime(globalTxId);
  assertThat(events.size(),is(11));
  assertThat(events.get(0).type(),is(""String_Node_Str""));
  assertThat(events.get(1).type(),is(""String_Node_Str""));
  assertThat(events.get(2).type(),is(""String_Node_Str""));
  assertThat(events.get(3).type(),is(""String_Node_Str""));
  assertThat(events.get(4).type(),is(""String_Node_Str""));
  assertThat(events.get(5).type(),is(""String_Node_Str""));
  assertThat(events.get(6).type(),is(""String_Node_Str""));
  assertThat(events.get(7).type(),is(""String_Node_Str""));
  assertThat(events.get(8).type(),is(""String_Node_Str""));
  assertThat(events.get(9).type(),is(""String_Node_Str""));
  assertThat(events.get(10).type(),is(""String_Node_Str""));
  System.out.println(compensatedMessages);
  assertThat(compensatedMessages,contains(""String_Node_Str"" + TRESPASSER));
}","@Test(timeout=5000) public void compensateWhenRetryReachesMaximum() throws InterruptedException {
  ResponseEntity<String> entity=restTemplate.getForEntity(""String_Node_Str"",String.class,TRESPASSER,5);
  assertThat(entity.getStatusCode(),is(INTERNAL_SERVER_ERROR));
  await().atMost(5,SECONDS).until(() -> eventRepo.count() == 11);
  List<String> distinctGlobalTxIds=eventRepo.findDistinctGlobalTxId();
  assertThat(distinctGlobalTxIds.size(),is(1));
  String globalTxId=distinctGlobalTxIds.get(0);
  List<TxEvent> events=eventRepo.findByGlobalTxIdOrderByCreationTime(globalTxId);
  assertThat(events.size(),is(11));
  assertThat(events.get(0).type(),is(""String_Node_Str""));
  assertThat(events.get(1).type(),is(""String_Node_Str""));
  assertThat(events.get(2).type(),is(""String_Node_Str""));
  assertThat(events.get(3).type(),is(""String_Node_Str""));
  assertThat(events.get(4).type(),is(""String_Node_Str""));
  assertThat(events.get(5).type(),is(""String_Node_Str""));
  assertThat(events.get(6).type(),is(""String_Node_Str""));
  assertThat(events.get(7).type(),is(""String_Node_Str""));
  assertThat(events.get(8).type(),is(""String_Node_Str""));
  assertThat(events.get(9).type(),is(""String_Node_Str""));
  assertThat(events.get(10).type(),is(""String_Node_Str""));
  assertThat(compensatedMessages,contains(""String_Node_Str"" + TRESPASSER));
}",0.9833887043189368
170691,"private static void setUpLocalRegistry(){
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  URL resource=loader.getResource(""String_Node_Str"");
  System.setProperty(LOCAL_REGISTRY_FILE_KEY,resource.getPath());
}","private static void setUpLocalRegistry(){
  System.setProperty(LOCAL_REGISTRY_FILE_KEY,""String_Node_Str"");
}",0.5529411764705883
170692,"public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  OmegaContext omegaContext=(OmegaContext)(new SpringExtensionFactory()).getExtension(OmegaContext.class,""String_Node_Str"");
  if (omegaContext != null) {
    invocation.getAttachments().put(GLOBAL_TX_ID_KEY,omegaContext.globalTxId());
    invocation.getAttachments().put(LOCAL_TX_ID_KEY,omegaContext.localTxId());
  }
  if (omegaContext != null && omegaContext.globalTxId() != null) {
    LOG.info(""String_Node_Str"",new Object[]{GLOBAL_TX_ID_KEY,omegaContext.globalTxId(),LOCAL_TX_ID_KEY,omegaContext.localTxId()});
  }
  if (invoker != null) {
    return invoker.invoke(invocation);
  }
  return null;
}","public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  if (omegaContext != null) {
    invocation.getAttachments().put(GLOBAL_TX_ID_KEY,omegaContext.globalTxId());
    invocation.getAttachments().put(LOCAL_TX_ID_KEY,omegaContext.localTxId());
  }
  if (omegaContext != null && omegaContext.globalTxId() != null) {
    LOG.info(""String_Node_Str"",new Object[]{GLOBAL_TX_ID_KEY,omegaContext.globalTxId(),LOCAL_TX_ID_KEY,omegaContext.localTxId()});
  }
  if (invoker != null) {
    return invoker.invoke(invocation);
  }
  return null;
}",0.900398406374502
170693,"@Override public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  OmegaContext omegaContext=new SpringExtensionFactory().getExtension(OmegaContext.class,""String_Node_Str"");
  if (omegaContext != null) {
    String globalTxId=invocation.getAttachment(GLOBAL_TX_ID_KEY);
    if (globalTxId == null) {
      LOG.info(""String_Node_Str"",GLOBAL_TX_ID_KEY);
    }
 else {
      omegaContext.setGlobalTxId(globalTxId);
      omegaContext.setLocalTxId(invocation.getAttachment(LOCAL_TX_ID_KEY));
      LOG.info(""String_Node_Str"",new Object[]{GLOBAL_TX_ID_KEY,omegaContext.globalTxId(),LOCAL_TX_ID_KEY,omegaContext.localTxId()});
    }
    invocation.getAttachments().put(GLOBAL_TX_ID_KEY,null);
    invocation.getAttachments().put(LOCAL_TX_ID_KEY,null);
  }
  if (invoker != null) {
    return invoker.invoke(invocation);
  }
  return null;
}","@Override public Result invoke(Invoker<?> invoker,Invocation invocation) throws RpcException {
  if (omegaContext != null) {
    String globalTxId=invocation.getAttachment(GLOBAL_TX_ID_KEY);
    if (globalTxId == null) {
      LOG.info(""String_Node_Str"",GLOBAL_TX_ID_KEY);
    }
 else {
      omegaContext.setGlobalTxId(globalTxId);
      omegaContext.setLocalTxId(invocation.getAttachment(LOCAL_TX_ID_KEY));
      LOG.info(""String_Node_Str"",new Object[]{GLOBAL_TX_ID_KEY,omegaContext.globalTxId(),LOCAL_TX_ID_KEY,omegaContext.localTxId()});
    }
    invocation.getAttachments().put(GLOBAL_TX_ID_KEY,null);
    invocation.getAttachments().put(LOCAL_TX_ID_KEY,null);
  }
 else {
    LOG.debug(""String_Node_Str"");
  }
  if (invoker != null) {
    return invoker.invoke(invocation);
  }
  return null;
}",0.9069069069069068
170694,"@Before public void setUp(){
  omegaContext.clear();
  when(applicationContext.containsBean(""String_Node_Str"")).thenReturn(true);
  when(applicationContext.getBean(""String_Node_Str"")).thenReturn(omegaContext);
  SpringExtensionFactory.addApplicationContext(applicationContext);
}","@Before public void setUp(){
  omegaContext.clear();
  filter.setOmegaContext(omegaContext);
}",0.4343163538873995
170695,"@Test public void setUpOmegaContextInTransactionRequest() throws Exception {
  when(invocation.getAttachment(OmegaContext.GLOBAL_TX_ID_KEY)).thenReturn(globalTxId);
  when(invocation.getAttachment(OmegaContext.LOCAL_TX_ID_KEY)).thenReturn(localTxId);
  filter.invoke(null,invocation);
  assertThat(omegaContext.globalTxId(),is(globalTxId));
  assertThat(omegaContext.localTxId(),is(localTxId));
}","@Test public void setUpOmegaContextInTransactionRequest(){
  when(invocation.getAttachment(OmegaContext.GLOBAL_TX_ID_KEY)).thenReturn(globalTxId);
  when(invocation.getAttachment(OmegaContext.LOCAL_TX_ID_KEY)).thenReturn(localTxId);
  filter.invoke(null,invocation);
  assertThat(omegaContext.globalTxId(),is(globalTxId));
  assertThat(omegaContext.localTxId(),is(localTxId));
}",0.9767441860465116
170696,"@Before public void setUp(){
  omegaContext.clear();
  when(applicationContext.containsBean(""String_Node_Str"")).thenReturn(true);
  when(applicationContext.getBean(""String_Node_Str"")).thenReturn(omegaContext);
  SpringExtensionFactory.addApplicationContext(applicationContext);
}","@Before public void setUp(){
  omegaContext.clear();
  filter.setOmegaContext(omegaContext);
}",0.4343163538873995
170697,"@Test public void doNothingInNonTransactionRequest() throws Exception {
  when(invocation.getAttachment(OmegaContext.GLOBAL_TX_ID_KEY)).thenReturn(null);
  when(invocation.getAttachment(OmegaContext.LOCAL_TX_ID_KEY)).thenReturn(null);
  filter.invoke(null,invocation);
  assertThat(omegaContext.globalTxId(),is(nullValue()));
  assertThat(omegaContext.localTxId(),is(nullValue()));
}","@Test public void doNothingInNonTransactionRequest(){
  when(invocation.getAttachment(OmegaContext.GLOBAL_TX_ID_KEY)).thenReturn(null);
  when(invocation.getAttachment(OmegaContext.LOCAL_TX_ID_KEY)).thenReturn(null);
  filter.invoke(null,invocation);
  assertThat(omegaContext.globalTxId(),is(nullValue()));
  assertThat(omegaContext.localTxId(),is(nullValue()));
}",0.9759358288770054
170698,"@Before public void before(){
  eventRepo.deleteAll();
  receivedCommands.clear();
}","@Before public void before(){
  System.out.println(""String_Node_Str"" + globalTxId);
  eventRepo.deleteAll();
  receivedCommands.clear();
}",0.7567567567567568
170699,"@BeforeClass public static void setupClientChannel() throws Exception {
  clientChannel=NettyChannelBuilder.forAddress(""String_Node_Str"",port).usePlaintext().build();
}","@BeforeClass public static void setupClientChannel(){
  clientChannel=NettyChannelBuilder.forAddress(""String_Node_Str"",port).usePlaintext().build();
}",0.9433962264150944
170700,"@AfterClass public static void tearDown() throws Exception {
  clientChannel.shutdown();
}","@AfterClass public static void tearDown() throws Exception {
  clientChannel.shutdown();
  clientChannel=null;
}",0.8910891089108911
170701,"private void markSagaEnded(TxEvent event){
  if (commandRepository.findUncompletedCommands(event.globalTxId()).isEmpty()) {
    markGlobalTxEnd(event);
  }
}","private void markSagaEnded(TxEvent event){
  if (commandRepository.findUncompletedCommands(event.globalTxId()).isEmpty()) {
    markGlobalTxEntWithEvent(event);
  }
}",0.9659442724458204
170702,"private void updateTransactionStatus(){
  eventRepository.findFirstAbortedGlobalTransaction().ifPresent(this::markGlobalTxEnd);
}","private void updateTransactionStatus(){
  eventRepository.findFirstAbortedGlobalTransaction().ifPresent(this::markGlobalTxEndWithEvents);
}",0.9626865671641792
170703,"/** 
 * Find a   {@link TxEvent} which satisfies below requirements:<ol> <li> {@link TxEvent#type} is {@link EventType#TxAbortedEvent}</li> <li>There are no   {@link TxEvent} which has the same {@link TxEvent#globalTxId} and {@link TxEvent#type} is {@link EventType#TxEndedEvent} or {@link EventType#SagaEndedEvent}</li> </ol>
 * @return
 */
Optional<TxEvent> findFirstAbortedGlobalTransaction();","/** 
 * Find a   {@link TxEvent} which satisfies below requirements:<ol> <li> {@link TxEvent#type} is {@link EventType#TxAbortedEvent}</li> <li>There are no   {@link TxEvent} which has the same {@link TxEvent#globalTxId} and {@link TxEvent#type} is {@link EventType#TxEndedEvent} or {@link EventType#SagaEndedEvent}</li> </ol>
 * @return
 */
Optional<List<TxEvent>> findFirstAbortedGlobalTransaction();",0.974937343358396
170704,"@Override public Optional<TxEvent> findFirstAbortedGlobalTransaction(){
  return Optional.empty();
}","@Override public Optional<List<TxEvent>> findFirstAbortedGlobalTransaction(){
  return Optional.empty();
}",0.970873786407767
170705,"@Override public Optional<TxEvent> findFirstAbortedGlobalTransaction(){
  return eventRepo.findFirstAbortedGlobalTxByType();
}","@Override public Optional<List<TxEvent>> findFirstAbortedGlobalTransaction(){
  return eventRepo.findFirstAbortedGlobalTxByType();
}",0.9767441860465116
170706,"@Query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") Optional<TxEvent> findFirstAbortedGlobalTxByType();","@Query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"") Optional<List<TxEvent>> findFirstAbortedGlobalTxByType();",0.9913793103448276
170707,"public PackStepdefs(){
  Given(""String_Node_Str"",() -> {
    probe(System.getProperty(CAR_SERVICE_ADDRESS));
  }
);
  And(""String_Node_Str"",() -> {
    probe(System.getProperty(HOTEL_SERVICE_ADDRESS));
  }
);
  And(""String_Node_Str"",() -> {
    probe(System.getProperty(BOOKING_SERVICE_ADDRESS));
  }
);
  And(""String_Node_Str"",() -> {
    String infoURI=System.getProperty(INFO_SERVICE_URI,""String_Node_Str"");
    probe(System.getProperty(ALPHA_REST_ADDRESS),infoURI);
  }
);
  Given(""String_Node_Str"",(  String script,  String service) -> {
    String address=System.getProperty(""String_Node_Str"");
    String port=System.getProperty(service.toLowerCase() + ""String_Node_Str"");
    log.info(""String_Node_Str"",script,service,address,port);
    Submit bm=new Submit(address,Integer.parseInt(port));
    List<String> rules=new ArrayList<>();
    rules.add(""String_Node_Str"" + script);
    bm.addRulesFromFiles(rules);
  }
);
  When(""String_Node_Str"",(username,cars,rooms) -> {
    log.info(""String_Node_Str"",username,cars,rooms);
    given().pathParam(""String_Node_Str"",username).pathParam(""String_Node_Str"",rooms).pathParam(""String_Node_Str"",cars).when().post(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  }
);
  Then(""String_Node_Str"",(  DataTable dataTable) -> {
    Consumer<Map<String,String>[]> columnStrippingConsumer=dataMap -> {
      for (      Map<String,String> map : dataMap)       map.keySet().retainAll(dataTable.topCells());
    }
;
    dataMatches(System.getProperty(ALPHA_REST_ADDRESS) + ""String_Node_Str"",dataTable,columnStrippingConsumer);
  }
);
  And(""String_Node_Str"",(  DataTable dataTable) -> {
    dataMatches(System.getProperty(CAR_SERVICE_ADDRESS) + ""String_Node_Str"",dataTable,NO_OP_CONSUMER);
  }
);
  And(""String_Node_Str"",(  DataTable dataTable) -> {
    dataMatches(System.getProperty(HOTEL_SERVICE_ADDRESS) + ""String_Node_Str"",dataTable,NO_OP_CONSUMER);
  }
);
}","public PackStepdefs(){
  Given(""String_Node_Str"",() -> {
    probe(System.getProperty(CAR_SERVICE_ADDRESS));
  }
);
  And(""String_Node_Str"",() -> {
    probe(System.getProperty(HOTEL_SERVICE_ADDRESS));
  }
);
  And(""String_Node_Str"",() -> {
    probe(System.getProperty(BOOKING_SERVICE_ADDRESS));
  }
);
  And(""String_Node_Str"",() -> {
    String infoURI=System.getProperty(INFO_SERVICE_URI);
    if (isEmpty(infoURI)) {
      infoURI=""String_Node_Str"";
    }
    log.info(""String_Node_Str"" + infoURI);
    probe(System.getProperty(ALPHA_REST_ADDRESS),infoURI);
  }
);
  Given(""String_Node_Str"",(  String script,  String service) -> {
    String address=System.getProperty(""String_Node_Str"");
    String port=System.getProperty(service.toLowerCase() + ""String_Node_Str"");
    log.info(""String_Node_Str"",script,service,address,port);
    Submit bm=new Submit(address,Integer.parseInt(port));
    List<String> rules=new ArrayList<>();
    rules.add(""String_Node_Str"" + script);
    bm.addRulesFromFiles(rules);
  }
);
  When(""String_Node_Str"",(username,cars,rooms) -> {
    log.info(""String_Node_Str"",username,cars,rooms);
    given().pathParam(""String_Node_Str"",username).pathParam(""String_Node_Str"",rooms).pathParam(""String_Node_Str"",cars).when().post(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  }
);
  Then(""String_Node_Str"",(  DataTable dataTable) -> {
    Consumer<Map<String,String>[]> columnStrippingConsumer=dataMap -> {
      for (      Map<String,String> map : dataMap)       map.keySet().retainAll(dataTable.topCells());
    }
;
    dataMatches(System.getProperty(ALPHA_REST_ADDRESS) + ""String_Node_Str"",dataTable,columnStrippingConsumer);
  }
);
  And(""String_Node_Str"",(  DataTable dataTable) -> {
    dataMatches(System.getProperty(CAR_SERVICE_ADDRESS) + ""String_Node_Str"",dataTable,NO_OP_CONSUMER);
  }
);
  And(""String_Node_Str"",(  DataTable dataTable) -> {
    dataMatches(System.getProperty(HOTEL_SERVICE_ADDRESS) + ""String_Node_Str"",dataTable,NO_OP_CONSUMER);
  }
);
}",0.9672968829841594
170708,"RetrySagaLog(PersistentStore persistentStore,int retryDelay){
  this.retryPersistentStore=persistentStore;
  this.retryDelay=retryDelay;
}","RetrySagaLog(PersistentStore persistentStore,int retryDelay){
  this.persistentStore1=persistentStore;
  this.retryDelay=retryDelay;
}",0.9705882352941176
170709,"@Override public void offer(SagaEvent sagaEvent){
  boolean success=false;
  do {
    try {
      retryPersistentStore.offer(sagaEvent);
      success=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      try {
        sleep(retryDelay);
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
 while (!success);
}","@Override public void offer(SagaEvent sagaEvent){
  boolean success=false;
  do {
    try {
      persistentStore1.offer(sagaEvent);
      success=true;
    }
 catch (    Exception e) {
      e.printStackTrace();
      sleep(retryDelay);
    }
  }
 while (!success && !isInterrupted());
}",0.7927382753403933
170710,"@Override public long size(){
  return retryPersistentStore.size();
}","@Override public long size(){
  return persistentStore1.size();
}",0.9402985074626866
170711,"@Override public Map<String,List<EventEnvelope>> findPendingSagaEvents(){
  return retryPersistentStore.findPendingSagaEvents();
}","@Override public Map<String,List<EventEnvelope>> findPendingSagaEvents(){
  return persistentStore1.findPendingSagaEvents();
}",0.96875
170712,"public void registerExtenderCallbacks(IBurpExtenderCallbacks c){
  this.callbacks=c;
  helpers=callbacks.getHelpers();
  callbacks.setExtensionName(""String_Node_Str"");
  callbacks.registerContextMenuFactory(this);
  callbacks.registerExtensionStateListener(this);
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  serverStarted=false;
  applicationSpawned=false;
  lastPrintIsJS=false;
  try {
    InputStream inputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
    File outputFile=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    FileWriter fr=new FileWriter(outputFile);
    BufferedWriter br=new BufferedWriter(fr);
    String s;
    while ((s=reader.readLine()) != null) {
      br.write(s);
      br.newLine();
    }
    reader.close();
    br.close();
    pythonScript=outputFile.getAbsolutePath();
  }
 catch (  Exception e) {
    printException(e,""String_Node_Str"");
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainPanel=new JPanel();
      mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
      JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
      JSplitPane consoleTabbedSplitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      final JTabbedPane tabbedPanel=new JTabbedPane();
      tabbedPanel.addChangeListener(new ChangeListener(){
        public void stateChanged(        ChangeEvent e){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              showHideButtons(tabbedPanel.getSelectedIndex());
            }
          }
);
        }
      }
);
      JPanel configurationConfPanel=new JPanel();
      configurationConfPanel.setLayout(new BoxLayout(configurationConfPanel,BoxLayout.Y_AXIS));
      StyleContext styleContext=new StyleContext();
      redStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(redStyle,Color.RED);
      greenStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(greenStyle,Color.GREEN);
      JPanel serverStatusPanel=new JPanel();
      serverStatusPanel.setLayout(new BoxLayout(serverStatusPanel,BoxLayout.X_AXIS));
      serverStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelServerStatus=new JLabel(""String_Node_Str"");
      documentServerStatus=new DefaultStyledDocument();
      serverStatus=new JTextPane(documentServerStatus);
      try {
        documentServerStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatus.setMaximumSize(serverStatus.getPreferredSize());
      serverStatusPanel.add(labelServerStatus);
      serverStatusPanel.add(serverStatus);
      JPanel applicationStatusPanel=new JPanel();
      applicationStatusPanel.setLayout(new BoxLayout(applicationStatusPanel,BoxLayout.X_AXIS));
      applicationStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationStatus=new JLabel(""String_Node_Str"");
      documentApplicationStatus=new DefaultStyledDocument();
      applicationStatus=new JTextPane(documentApplicationStatus);
      try {
        documentApplicationStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatus.setMaximumSize(applicationStatus.getPreferredSize());
      applicationStatusPanel.add(labelApplicationStatus);
      applicationStatusPanel.add(applicationStatus);
      JPanel pythonPathPanel=new JPanel();
      pythonPathPanel.setLayout(new BoxLayout(pythonPathPanel,BoxLayout.X_AXIS));
      pythonPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPythonPath=new JLabel(""String_Node_Str"");
      pythonPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pythonPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          pythonPath.setText(""String_Node_Str"");
        }
 else {
          pythonPath.setText(""String_Node_Str"");
        }
      }
      pythonPath.setMaximumSize(pythonPath.getPreferredSize());
      JButton pythonPathButton=new JButton(""String_Node_Str"");
      pythonPathButton.setActionCommand(""String_Node_Str"");
      pythonPathButton.addActionListener(BurpExtender.this);
      pythonPathPanel.add(labelPythonPath);
      pythonPathPanel.add(pythonPath);
      pythonPathPanel.add(pythonPathButton);
      JPanel pyroHostPanel=new JPanel();
      pyroHostPanel.setLayout(new BoxLayout(pyroHostPanel,BoxLayout.X_AXIS));
      pyroHostPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroHost=new JLabel(""String_Node_Str"");
      pyroHost=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroHost.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroHost.setText(""String_Node_Str"");
      pyroHost.setMaximumSize(pyroHost.getPreferredSize());
      pyroHostPanel.add(labelPyroHost);
      pyroHostPanel.add(pyroHost);
      JPanel pyroPortPanel=new JPanel();
      pyroPortPanel.setLayout(new BoxLayout(pyroPortPanel,BoxLayout.X_AXIS));
      pyroPortPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroPort=new JLabel(""String_Node_Str"");
      pyroPort=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroPort.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroPort.setText(""String_Node_Str"");
      pyroPort.setMaximumSize(pyroPort.getPreferredSize());
      pyroPortPanel.add(labelPyroPort);
      pyroPortPanel.add(pyroPort);
      JPanel fridaPathPanel=new JPanel();
      fridaPathPanel.setLayout(new BoxLayout(fridaPathPanel,BoxLayout.X_AXIS));
      fridaPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelFridaPath=new JLabel(""String_Node_Str"");
      fridaPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       fridaPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          fridaPath.setText(""String_Node_Str"");
        }
 else {
          fridaPath.setText(""String_Node_Str"");
        }
      }
      fridaPath.setMaximumSize(fridaPath.getPreferredSize());
      JButton fridaPathButton=new JButton(""String_Node_Str"");
      fridaPathButton.setActionCommand(""String_Node_Str"");
      fridaPathButton.addActionListener(BurpExtender.this);
      fridaPathPanel.add(labelFridaPath);
      fridaPathPanel.add(fridaPath);
      fridaPathPanel.add(fridaPathButton);
      JPanel applicationIdPanel=new JPanel();
      applicationIdPanel.setLayout(new BoxLayout(applicationIdPanel,BoxLayout.X_AXIS));
      applicationIdPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationId=new JLabel(""String_Node_Str"");
      applicationId=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       applicationId.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       applicationId.setText(""String_Node_Str"");
      applicationId.setMaximumSize(applicationId.getPreferredSize());
      applicationIdPanel.add(labelApplicationId);
      applicationIdPanel.add(applicationId);
      JPanel localRemotePanel=new JPanel();
      localRemotePanel.setLayout(new BoxLayout(localRemotePanel,BoxLayout.X_AXIS));
      localRemotePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      remoteRadioButton=new JRadioButton(""String_Node_Str"");
      localRadioButton=new JRadioButton(""String_Node_Str"");
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        if (callbacks.loadExtensionSetting(""String_Node_Str"").equals(""String_Node_Str""))         remoteRadioButton.setSelected(true);
 else         localRadioButton.setSelected(true);
      }
 else {
        remoteRadioButton.setSelected(true);
      }
      ButtonGroup localRemoteButtonGroup=new ButtonGroup();
      localRemoteButtonGroup.add(remoteRadioButton);
      localRemoteButtonGroup.add(localRadioButton);
      localRemotePanel.add(remoteRadioButton);
      localRemotePanel.add(localRadioButton);
      configurationConfPanel.add(serverStatusPanel);
      configurationConfPanel.add(applicationStatusPanel);
      configurationConfPanel.add(pythonPathPanel);
      configurationConfPanel.add(pyroHostPanel);
      configurationConfPanel.add(pyroPortPanel);
      configurationConfPanel.add(fridaPathPanel);
      configurationConfPanel.add(applicationIdPanel);
      configurationConfPanel.add(localRemotePanel);
      jsEditorTextArea=new RSyntaxTextArea();
      jsEditorTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
      jsEditorTextArea.setCodeFoldingEnabled(false);
      RTextScrollPane sp=new RTextScrollPane(jsEditorTextArea);
      jsEditorTextArea.setFocusable(true);
      JPanel treeSearchPanel=new JPanel();
      treeSearchPanel.setLayout(new BorderLayout());
      JPanel treePanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
      JScrollPane scrollTreeJPanel=new JScrollPane(treePanel);
      scrollTreeJPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      DefaultMutableTreeNode top=new DefaultMutableTreeNode(""String_Node_Str"");
      tree=new JTree(top);
      tree.addMouseListener(BurpExtender.this);
      treePanel.add(tree);
      JPanel searchPanelBar=new JPanel(new FlowLayout(FlowLayout.LEFT));
      JLabel findLabel=new JLabel(""String_Node_Str"");
      findTextField=new JTextField(60);
      JButton searchButton=new JButton(""String_Node_Str"");
      searchButton.setActionCommand(""String_Node_Str"");
      searchButton.addActionListener(BurpExtender.this);
      searchPanelBar.add(findLabel);
      searchPanelBar.add(findTextField);
      searchPanelBar.add(searchButton);
      treeSearchPanel.add(scrollTreeJPanel);
      treeSearchPanel.add(searchPanelBar,BorderLayout.SOUTH);
      stubTextEditor=callbacks.createTextEditor();
      stubTextEditor.setEditable(false);
      JPanel executeMethodPanel=new JPanel();
      executeMethodPanel.setLayout(new BoxLayout(executeMethodPanel,BoxLayout.Y_AXIS));
      JPanel executeMethodNamePanel=new JPanel();
      executeMethodNamePanel.setLayout(new BoxLayout(executeMethodNamePanel,BoxLayout.X_AXIS));
      executeMethodNamePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodName=new JLabel(""String_Node_Str"");
      executeMethodName=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       executeMethodName.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
      executeMethodName.setMaximumSize(executeMethodName.getPreferredSize());
      executeMethodNamePanel.add(labelExecuteMethodName);
      executeMethodNamePanel.add(executeMethodName);
      JPanel executeMethodArgumentPanel=new JPanel();
      executeMethodArgumentPanel.setLayout(new BoxLayout(executeMethodArgumentPanel,BoxLayout.X_AXIS));
      executeMethodArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodArgument=new JLabel(""String_Node_Str"");
      executeMethodArgument=new JTextField(200);
      executeMethodArgument.setMaximumSize(executeMethodArgument.getPreferredSize());
      JButton addExecuteMethodArgument=new JButton(""String_Node_Str"");
      addExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      addExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodArgumentPanel.add(labelExecuteMethodArgument);
      executeMethodArgumentPanel.add(executeMethodArgument);
      executeMethodArgumentPanel.add(addExecuteMethodArgument);
      executeMethodInsertedArgumentList=new DefaultListModel();
      JPanel executeMethodInsertedArgumentPanel=new JPanel();
      executeMethodInsertedArgumentPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentPanel,BoxLayout.X_AXIS));
      executeMethodInsertedArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodInsertedArgument=new JLabel(""String_Node_Str"");
      executeMethodInsertedArgument=new JList(executeMethodInsertedArgumentList);
      JScrollPane executeMethodInsertedArgumentScrollPane=new JScrollPane(executeMethodInsertedArgument);
      executeMethodInsertedArgumentScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      executeMethodInsertedArgumentScrollPane.setBorder(new LineBorder(Color.BLACK));
      executeMethodInsertedArgumentScrollPane.setMaximumSize(executeMethodInsertedArgumentScrollPane.getPreferredSize());
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        int sizeArguments=Integer.parseInt(callbacks.loadExtensionSetting(""String_Node_Str""));
        for (int i=0; i < sizeArguments; i++) {
          executeMethodInsertedArgumentList.addElement(callbacks.loadExtensionSetting(""String_Node_Str"" + i));
        }
      }
      JPanel executeMethodInsertedArgumentButtonPanel=new JPanel();
      executeMethodInsertedArgumentButtonPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentButtonPanel,BoxLayout.Y_AXIS));
      JButton removeExecuteMethodArgument=new JButton(""String_Node_Str"");
      removeExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      removeExecuteMethodArgument.addActionListener(BurpExtender.this);
      JButton modifyExecuteMethodArgument=new JButton(""String_Node_Str"");
      modifyExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      modifyExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodInsertedArgumentButtonPanel.add(removeExecuteMethodArgument);
      executeMethodInsertedArgumentButtonPanel.add(modifyExecuteMethodArgument);
      executeMethodInsertedArgumentPanel.add(labelExecuteMethodInsertedArgument);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentScrollPane);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentButtonPanel);
      executeMethodPanel.add(executeMethodNamePanel);
      executeMethodPanel.add(executeMethodArgumentPanel);
      executeMethodPanel.add(executeMethodInsertedArgumentPanel);
      trapTable=new JTable(new TrapTableModel());
      JScrollPane trapTableScrollPane=new JScrollPane(trapTable);
      trapTableScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      trapTableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      trapTable.setAutoCreateRowSorter(true);
      ((DefaultTableCellRenderer)trapTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
      DefaultTableCellRenderer centerRenderer=new DefaultTableCellRenderer();
      centerRenderer.setHorizontalAlignment(JLabel.CENTER);
      trapTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
      trapTable.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
      tabbedPanel.add(""String_Node_Str"",configurationConfPanel);
      tabbedPanel.add(""String_Node_Str"",sp);
      tabbedPanel.add(""String_Node_Str"",treeSearchPanel);
      tabbedPanel.add(""String_Node_Str"",stubTextEditor.getComponent());
      tabbedPanel.add(""String_Node_Str"",executeMethodPanel);
      tabbedPanel.add(""String_Node_Str"",trapTableScrollPane);
      pluginConsoleTextArea=new JEditorPane(""String_Node_Str"",""String_Node_Str"");
      JScrollPane scrollPluginConsoleTextArea=new JScrollPane(pluginConsoleTextArea);
      scrollPluginConsoleTextArea.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      pluginConsoleTextArea.setEditable(false);
      consoleTabbedSplitPane.setTopComponent(tabbedPanel);
      consoleTabbedSplitPane.setBottomComponent(scrollPluginConsoleTextArea);
      consoleTabbedSplitPane.setResizeWeight(.7d);
      JPanel rightSplitPane=new JPanel();
      rightSplitPane.setLayout(new GridBagLayout());
      GridBagConstraints gbc=new GridBagConstraints();
      gbc.gridwidth=GridBagConstraints.REMAINDER;
      gbc.fill=GridBagConstraints.HORIZONTAL;
      documentServerStatusButtons=new DefaultStyledDocument();
      serverStatusButtons=new JTextPane(documentServerStatusButtons);
      try {
        documentServerStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatusButtons.setMaximumSize(serverStatusButtons.getPreferredSize());
      documentApplicationStatusButtons=new DefaultStyledDocument();
      applicationStatusButtons=new JTextPane(documentApplicationStatusButtons);
      try {
        documentApplicationStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatusButtons.setMaximumSize(applicationStatusButtons.getPreferredSize());
      JButton startServer=new JButton(""String_Node_Str"");
      startServer.setActionCommand(""String_Node_Str"");
      startServer.addActionListener(BurpExtender.this);
      JButton killServer=new JButton(""String_Node_Str"");
      killServer.setActionCommand(""String_Node_Str"");
      killServer.addActionListener(BurpExtender.this);
      JButton spawnApplication=new JButton(""String_Node_Str"");
      spawnApplication.setActionCommand(""String_Node_Str"");
      spawnApplication.addActionListener(BurpExtender.this);
      JButton killApplication=new JButton(""String_Node_Str"");
      killApplication.setActionCommand(""String_Node_Str"");
      killApplication.addActionListener(BurpExtender.this);
      JButton reloadScript=new JButton(""String_Node_Str"");
      reloadScript.setActionCommand(""String_Node_Str"");
      reloadScript.addActionListener(BurpExtender.this);
      clearConsoleButton=new JButton(""String_Node_Str"");
      clearConsoleButton.setActionCommand(""String_Node_Str"");
      clearConsoleButton.addActionListener(BurpExtender.this);
      executeMethodButton=new JButton(""String_Node_Str"");
      executeMethodButton.setActionCommand(""String_Node_Str"");
      executeMethodButton.addActionListener(BurpExtender.this);
      generateJavaStubButton=new JButton(""String_Node_Str"");
      generateJavaStubButton.setActionCommand(""String_Node_Str"");
      generateJavaStubButton.addActionListener(BurpExtender.this);
      generatePythonStubButton=new JButton(""String_Node_Str"");
      generatePythonStubButton.setActionCommand(""String_Node_Str"");
      generatePythonStubButton.addActionListener(BurpExtender.this);
      saveSettingsToFileButton=new JButton(""String_Node_Str"");
      saveSettingsToFileButton.setActionCommand(""String_Node_Str"");
      saveSettingsToFileButton.addActionListener(BurpExtender.this);
      loadSettingsFromFileButton=new JButton(""String_Node_Str"");
      loadSettingsFromFileButton.setActionCommand(""String_Node_Str"");
      loadSettingsFromFileButton.addActionListener(BurpExtender.this);
      loadJSFileButton=new JButton(""String_Node_Str"");
      loadJSFileButton.setActionCommand(""String_Node_Str"");
      loadJSFileButton.addActionListener(BurpExtender.this);
      saveJSFileButton=new JButton(""String_Node_Str"");
      saveJSFileButton.setActionCommand(""String_Node_Str"");
      saveJSFileButton.addActionListener(BurpExtender.this);
      loadTreeButton=new JButton(""String_Node_Str"");
      loadTreeButton.setActionCommand(""String_Node_Str"");
      loadTreeButton.addActionListener(BurpExtender.this);
      detachAllButton=new JButton(""String_Node_Str"");
      detachAllButton.setActionCommand(""String_Node_Str"");
      detachAllButton.addActionListener(BurpExtender.this);
      JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);
      separator.setBorder(BorderFactory.createMatteBorder(3,0,3,0,Color.ORANGE));
      rightSplitPane.add(serverStatusButtons,gbc);
      rightSplitPane.add(applicationStatusButtons,gbc);
      rightSplitPane.add(startServer,gbc);
      rightSplitPane.add(killServer,gbc);
      rightSplitPane.add(spawnApplication,gbc);
      rightSplitPane.add(killApplication,gbc);
      rightSplitPane.add(reloadScript,gbc);
      rightSplitPane.add(clearConsoleButton,gbc);
      rightSplitPane.add(separator,gbc);
      rightSplitPane.add(saveSettingsToFileButton,gbc);
      rightSplitPane.add(loadSettingsFromFileButton,gbc);
      rightSplitPane.add(loadJSFileButton,gbc);
      rightSplitPane.add(saveJSFileButton,gbc);
      rightSplitPane.add(executeMethodButton,gbc);
      rightSplitPane.add(generateJavaStubButton,gbc);
      rightSplitPane.add(generatePythonStubButton,gbc);
      rightSplitPane.add(loadTreeButton,gbc);
      rightSplitPane.add(detachAllButton,gbc);
      splitPane.setLeftComponent(consoleTabbedSplitPane);
      splitPane.setRightComponent(rightSplitPane);
      splitPane.setResizeWeight(.9d);
      mainPanel.add(splitPane);
      callbacks.customizeUiComponent(mainPanel);
      callbacks.addSuiteTab(BurpExtender.this);
    }
  }
);
}","public void registerExtenderCallbacks(IBurpExtenderCallbacks c){
  this.callbacks=c;
  helpers=callbacks.getHelpers();
  callbacks.setExtensionName(""String_Node_Str"");
  callbacks.registerContextMenuFactory(this);
  callbacks.registerExtensionStateListener(this);
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  serverStarted=false;
  applicationSpawned=false;
  lastPrintIsJS=false;
  try {
    InputStream inputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
    File outputFile=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    FileWriter fr=new FileWriter(outputFile);
    BufferedWriter br=new BufferedWriter(fr);
    String s;
    while ((s=reader.readLine()) != null) {
      br.write(s);
      br.newLine();
    }
    reader.close();
    br.close();
    pythonScript=outputFile.getAbsolutePath();
  }
 catch (  Exception e) {
    printException(e,""String_Node_Str"");
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainPanel=new JPanel();
      mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
      JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
      JSplitPane consoleTabbedSplitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      final JTabbedPane tabbedPanel=new JTabbedPane();
      tabbedPanel.addChangeListener(new ChangeListener(){
        public void stateChanged(        ChangeEvent e){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              showHideButtons(tabbedPanel.getSelectedIndex());
            }
          }
);
        }
      }
);
      JPanel configurationConfPanel=new JPanel();
      configurationConfPanel.setLayout(new BoxLayout(configurationConfPanel,BoxLayout.Y_AXIS));
      StyleContext styleContext=new StyleContext();
      redStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(redStyle,Color.RED);
      greenStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(greenStyle,Color.GREEN);
      JPanel serverStatusPanel=new JPanel();
      serverStatusPanel.setLayout(new BoxLayout(serverStatusPanel,BoxLayout.X_AXIS));
      serverStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelServerStatus=new JLabel(""String_Node_Str"");
      documentServerStatus=new DefaultStyledDocument();
      serverStatus=new JTextPane(documentServerStatus);
      try {
        documentServerStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatus.setMaximumSize(serverStatus.getPreferredSize());
      serverStatusPanel.add(labelServerStatus);
      serverStatusPanel.add(serverStatus);
      JPanel applicationStatusPanel=new JPanel();
      applicationStatusPanel.setLayout(new BoxLayout(applicationStatusPanel,BoxLayout.X_AXIS));
      applicationStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationStatus=new JLabel(""String_Node_Str"");
      documentApplicationStatus=new DefaultStyledDocument();
      applicationStatus=new JTextPane(documentApplicationStatus);
      try {
        documentApplicationStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatus.setMaximumSize(applicationStatus.getPreferredSize());
      applicationStatusPanel.add(labelApplicationStatus);
      applicationStatusPanel.add(applicationStatus);
      JPanel pythonPathPanel=new JPanel();
      pythonPathPanel.setLayout(new BoxLayout(pythonPathPanel,BoxLayout.X_AXIS));
      pythonPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPythonPath=new JLabel(""String_Node_Str"");
      pythonPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pythonPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          pythonPath.setText(""String_Node_Str"");
        }
 else {
          pythonPath.setText(""String_Node_Str"");
        }
      }
      pythonPath.setMaximumSize(pythonPath.getPreferredSize());
      JButton pythonPathButton=new JButton(""String_Node_Str"");
      pythonPathButton.setActionCommand(""String_Node_Str"");
      pythonPathButton.addActionListener(BurpExtender.this);
      pythonPathPanel.add(labelPythonPath);
      pythonPathPanel.add(pythonPath);
      pythonPathPanel.add(pythonPathButton);
      JPanel pyroHostPanel=new JPanel();
      pyroHostPanel.setLayout(new BoxLayout(pyroHostPanel,BoxLayout.X_AXIS));
      pyroHostPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroHost=new JLabel(""String_Node_Str"");
      pyroHost=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroHost.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroHost.setText(""String_Node_Str"");
      pyroHost.setMaximumSize(pyroHost.getPreferredSize());
      pyroHostPanel.add(labelPyroHost);
      pyroHostPanel.add(pyroHost);
      JPanel pyroPortPanel=new JPanel();
      pyroPortPanel.setLayout(new BoxLayout(pyroPortPanel,BoxLayout.X_AXIS));
      pyroPortPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroPort=new JLabel(""String_Node_Str"");
      pyroPort=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroPort.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroPort.setText(""String_Node_Str"");
      pyroPort.setMaximumSize(pyroPort.getPreferredSize());
      pyroPortPanel.add(labelPyroPort);
      pyroPortPanel.add(pyroPort);
      JPanel fridaPathPanel=new JPanel();
      fridaPathPanel.setLayout(new BoxLayout(fridaPathPanel,BoxLayout.X_AXIS));
      fridaPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelFridaPath=new JLabel(""String_Node_Str"");
      fridaPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       fridaPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          fridaPath.setText(""String_Node_Str"");
        }
 else {
          fridaPath.setText(""String_Node_Str"");
        }
      }
      fridaPath.setMaximumSize(fridaPath.getPreferredSize());
      JButton fridaPathButton=new JButton(""String_Node_Str"");
      fridaPathButton.setActionCommand(""String_Node_Str"");
      fridaPathButton.addActionListener(BurpExtender.this);
      fridaPathPanel.add(labelFridaPath);
      fridaPathPanel.add(fridaPath);
      fridaPathPanel.add(fridaPathButton);
      JPanel applicationIdPanel=new JPanel();
      applicationIdPanel.setLayout(new BoxLayout(applicationIdPanel,BoxLayout.X_AXIS));
      applicationIdPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationId=new JLabel(""String_Node_Str"");
      applicationId=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       applicationId.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       applicationId.setText(""String_Node_Str"");
      applicationId.setMaximumSize(applicationId.getPreferredSize());
      applicationIdPanel.add(labelApplicationId);
      applicationIdPanel.add(applicationId);
      JPanel localRemotePanel=new JPanel();
      localRemotePanel.setLayout(new BoxLayout(localRemotePanel,BoxLayout.X_AXIS));
      localRemotePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      remoteRadioButton=new JRadioButton(""String_Node_Str"");
      localRadioButton=new JRadioButton(""String_Node_Str"");
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        if (callbacks.loadExtensionSetting(""String_Node_Str"").equals(""String_Node_Str""))         remoteRadioButton.setSelected(true);
 else         localRadioButton.setSelected(true);
      }
 else {
        remoteRadioButton.setSelected(true);
      }
      ButtonGroup localRemoteButtonGroup=new ButtonGroup();
      localRemoteButtonGroup.add(remoteRadioButton);
      localRemoteButtonGroup.add(localRadioButton);
      localRemotePanel.add(remoteRadioButton);
      localRemotePanel.add(localRadioButton);
      configurationConfPanel.add(serverStatusPanel);
      configurationConfPanel.add(applicationStatusPanel);
      configurationConfPanel.add(pythonPathPanel);
      configurationConfPanel.add(pyroHostPanel);
      configurationConfPanel.add(pyroPortPanel);
      configurationConfPanel.add(fridaPathPanel);
      configurationConfPanel.add(applicationIdPanel);
      configurationConfPanel.add(localRemotePanel);
      jsEditorTextArea=new RSyntaxTextArea();
      jsEditorTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
      jsEditorTextArea.setCodeFoldingEnabled(false);
      RTextScrollPane sp=new RTextScrollPane(jsEditorTextArea);
      jsEditorTextArea.setFocusable(true);
      JPanel treeSearchPanel=new JPanel();
      treeSearchPanel.setLayout(new BorderLayout());
      JPanel treePanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
      JScrollPane scrollTreeJPanel=new JScrollPane(treePanel);
      scrollTreeJPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      DefaultMutableTreeNode top=new DefaultMutableTreeNode(""String_Node_Str"");
      tree=new JTree(top);
      tree.addMouseListener(BurpExtender.this);
      treePanel.add(tree);
      JPanel searchPanelBar=new JPanel();
      searchPanelBar.setLayout(new BoxLayout(searchPanelBar,BoxLayout.X_AXIS));
      JLabel findLabel=new JLabel(""String_Node_Str"");
      findTextField=new JTextField();
      JButton searchButton=new JButton(""String_Node_Str"");
      searchButton.setActionCommand(""String_Node_Str"");
      searchButton.addActionListener(BurpExtender.this);
      searchPanelBar.add(findLabel);
      searchPanelBar.add(findTextField);
      searchPanelBar.add(searchButton);
      treeSearchPanel.add(scrollTreeJPanel);
      treeSearchPanel.add(searchPanelBar,BorderLayout.SOUTH);
      stubTextEditor=callbacks.createTextEditor();
      stubTextEditor.setEditable(false);
      JPanel executeMethodPanel=new JPanel();
      executeMethodPanel.setLayout(new BoxLayout(executeMethodPanel,BoxLayout.Y_AXIS));
      JPanel executeMethodNamePanel=new JPanel();
      executeMethodNamePanel.setLayout(new BoxLayout(executeMethodNamePanel,BoxLayout.X_AXIS));
      executeMethodNamePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodName=new JLabel(""String_Node_Str"");
      executeMethodName=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       executeMethodName.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
      executeMethodName.setMaximumSize(executeMethodName.getPreferredSize());
      executeMethodNamePanel.add(labelExecuteMethodName);
      executeMethodNamePanel.add(executeMethodName);
      JPanel executeMethodArgumentPanel=new JPanel();
      executeMethodArgumentPanel.setLayout(new BoxLayout(executeMethodArgumentPanel,BoxLayout.X_AXIS));
      executeMethodArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodArgument=new JLabel(""String_Node_Str"");
      executeMethodArgument=new JTextField(200);
      executeMethodArgument.setMaximumSize(executeMethodArgument.getPreferredSize());
      JButton addExecuteMethodArgument=new JButton(""String_Node_Str"");
      addExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      addExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodArgumentPanel.add(labelExecuteMethodArgument);
      executeMethodArgumentPanel.add(executeMethodArgument);
      executeMethodArgumentPanel.add(addExecuteMethodArgument);
      executeMethodInsertedArgumentList=new DefaultListModel();
      JPanel executeMethodInsertedArgumentPanel=new JPanel();
      executeMethodInsertedArgumentPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentPanel,BoxLayout.X_AXIS));
      executeMethodInsertedArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodInsertedArgument=new JLabel(""String_Node_Str"");
      executeMethodInsertedArgument=new JList(executeMethodInsertedArgumentList);
      JScrollPane executeMethodInsertedArgumentScrollPane=new JScrollPane(executeMethodInsertedArgument);
      executeMethodInsertedArgumentScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      executeMethodInsertedArgumentScrollPane.setBorder(new LineBorder(Color.BLACK));
      executeMethodInsertedArgumentScrollPane.setMaximumSize(executeMethodInsertedArgumentScrollPane.getPreferredSize());
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        int sizeArguments=Integer.parseInt(callbacks.loadExtensionSetting(""String_Node_Str""));
        for (int i=0; i < sizeArguments; i++) {
          executeMethodInsertedArgumentList.addElement(callbacks.loadExtensionSetting(""String_Node_Str"" + i));
        }
      }
      JPanel executeMethodInsertedArgumentButtonPanel=new JPanel();
      executeMethodInsertedArgumentButtonPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentButtonPanel,BoxLayout.Y_AXIS));
      JButton removeExecuteMethodArgument=new JButton(""String_Node_Str"");
      removeExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      removeExecuteMethodArgument.addActionListener(BurpExtender.this);
      JButton modifyExecuteMethodArgument=new JButton(""String_Node_Str"");
      modifyExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      modifyExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodInsertedArgumentButtonPanel.add(removeExecuteMethodArgument);
      executeMethodInsertedArgumentButtonPanel.add(modifyExecuteMethodArgument);
      executeMethodInsertedArgumentPanel.add(labelExecuteMethodInsertedArgument);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentScrollPane);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentButtonPanel);
      executeMethodPanel.add(executeMethodNamePanel);
      executeMethodPanel.add(executeMethodArgumentPanel);
      executeMethodPanel.add(executeMethodInsertedArgumentPanel);
      trapTable=new JTable(new TrapTableModel());
      JScrollPane trapTableScrollPane=new JScrollPane(trapTable);
      trapTableScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      trapTableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      trapTable.setAutoCreateRowSorter(true);
      ((DefaultTableCellRenderer)trapTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
      DefaultTableCellRenderer centerRenderer=new DefaultTableCellRenderer();
      centerRenderer.setHorizontalAlignment(JLabel.CENTER);
      trapTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
      trapTable.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
      tabbedPanel.add(""String_Node_Str"",configurationConfPanel);
      tabbedPanel.add(""String_Node_Str"",sp);
      tabbedPanel.add(""String_Node_Str"",treeSearchPanel);
      tabbedPanel.add(""String_Node_Str"",stubTextEditor.getComponent());
      tabbedPanel.add(""String_Node_Str"",executeMethodPanel);
      tabbedPanel.add(""String_Node_Str"",trapTableScrollPane);
      pluginConsoleTextArea=new JEditorPane(""String_Node_Str"",""String_Node_Str"");
      JScrollPane scrollPluginConsoleTextArea=new JScrollPane(pluginConsoleTextArea);
      scrollPluginConsoleTextArea.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      pluginConsoleTextArea.setEditable(false);
      consoleTabbedSplitPane.setTopComponent(tabbedPanel);
      consoleTabbedSplitPane.setBottomComponent(scrollPluginConsoleTextArea);
      consoleTabbedSplitPane.setResizeWeight(.7d);
      JPanel rightSplitPane=new JPanel();
      rightSplitPane.setLayout(new GridBagLayout());
      GridBagConstraints gbc=new GridBagConstraints();
      gbc.gridwidth=GridBagConstraints.REMAINDER;
      gbc.fill=GridBagConstraints.HORIZONTAL;
      documentServerStatusButtons=new DefaultStyledDocument();
      serverStatusButtons=new JTextPane(documentServerStatusButtons);
      try {
        documentServerStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatusButtons.setMaximumSize(serverStatusButtons.getPreferredSize());
      documentApplicationStatusButtons=new DefaultStyledDocument();
      applicationStatusButtons=new JTextPane(documentApplicationStatusButtons);
      try {
        documentApplicationStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatusButtons.setMaximumSize(applicationStatusButtons.getPreferredSize());
      JButton startServer=new JButton(""String_Node_Str"");
      startServer.setActionCommand(""String_Node_Str"");
      startServer.addActionListener(BurpExtender.this);
      JButton killServer=new JButton(""String_Node_Str"");
      killServer.setActionCommand(""String_Node_Str"");
      killServer.addActionListener(BurpExtender.this);
      JButton spawnApplication=new JButton(""String_Node_Str"");
      spawnApplication.setActionCommand(""String_Node_Str"");
      spawnApplication.addActionListener(BurpExtender.this);
      JButton killApplication=new JButton(""String_Node_Str"");
      killApplication.setActionCommand(""String_Node_Str"");
      killApplication.addActionListener(BurpExtender.this);
      JButton reloadScript=new JButton(""String_Node_Str"");
      reloadScript.setActionCommand(""String_Node_Str"");
      reloadScript.addActionListener(BurpExtender.this);
      clearConsoleButton=new JButton(""String_Node_Str"");
      clearConsoleButton.setActionCommand(""String_Node_Str"");
      clearConsoleButton.addActionListener(BurpExtender.this);
      executeMethodButton=new JButton(""String_Node_Str"");
      executeMethodButton.setActionCommand(""String_Node_Str"");
      executeMethodButton.addActionListener(BurpExtender.this);
      generateJavaStubButton=new JButton(""String_Node_Str"");
      generateJavaStubButton.setActionCommand(""String_Node_Str"");
      generateJavaStubButton.addActionListener(BurpExtender.this);
      generatePythonStubButton=new JButton(""String_Node_Str"");
      generatePythonStubButton.setActionCommand(""String_Node_Str"");
      generatePythonStubButton.addActionListener(BurpExtender.this);
      saveSettingsToFileButton=new JButton(""String_Node_Str"");
      saveSettingsToFileButton.setActionCommand(""String_Node_Str"");
      saveSettingsToFileButton.addActionListener(BurpExtender.this);
      loadSettingsFromFileButton=new JButton(""String_Node_Str"");
      loadSettingsFromFileButton.setActionCommand(""String_Node_Str"");
      loadSettingsFromFileButton.addActionListener(BurpExtender.this);
      loadJSFileButton=new JButton(""String_Node_Str"");
      loadJSFileButton.setActionCommand(""String_Node_Str"");
      loadJSFileButton.addActionListener(BurpExtender.this);
      saveJSFileButton=new JButton(""String_Node_Str"");
      saveJSFileButton.setActionCommand(""String_Node_Str"");
      saveJSFileButton.addActionListener(BurpExtender.this);
      loadTreeButton=new JButton(""String_Node_Str"");
      loadTreeButton.setActionCommand(""String_Node_Str"");
      loadTreeButton.addActionListener(BurpExtender.this);
      detachAllButton=new JButton(""String_Node_Str"");
      detachAllButton.setActionCommand(""String_Node_Str"");
      detachAllButton.addActionListener(BurpExtender.this);
      JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);
      separator.setBorder(BorderFactory.createMatteBorder(3,0,3,0,Color.ORANGE));
      rightSplitPane.add(serverStatusButtons,gbc);
      rightSplitPane.add(applicationStatusButtons,gbc);
      rightSplitPane.add(startServer,gbc);
      rightSplitPane.add(killServer,gbc);
      rightSplitPane.add(spawnApplication,gbc);
      rightSplitPane.add(killApplication,gbc);
      rightSplitPane.add(reloadScript,gbc);
      rightSplitPane.add(clearConsoleButton,gbc);
      rightSplitPane.add(separator,gbc);
      rightSplitPane.add(saveSettingsToFileButton,gbc);
      rightSplitPane.add(loadSettingsFromFileButton,gbc);
      rightSplitPane.add(loadJSFileButton,gbc);
      rightSplitPane.add(saveJSFileButton,gbc);
      rightSplitPane.add(executeMethodButton,gbc);
      rightSplitPane.add(generateJavaStubButton,gbc);
      rightSplitPane.add(generatePythonStubButton,gbc);
      rightSplitPane.add(loadTreeButton,gbc);
      rightSplitPane.add(detachAllButton,gbc);
      splitPane.setLeftComponent(consoleTabbedSplitPane);
      splitPane.setRightComponent(rightSplitPane);
      splitPane.setResizeWeight(.9d);
      mainPanel.add(splitPane);
      callbacks.customizeUiComponent(mainPanel);
      callbacks.addSuiteTab(BurpExtender.this);
    }
  }
);
}",0.998269377206544
170713,"public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        executeMethodInsertedArgumentList.addElement(executeMethodArgument.getText().trim());
        executeMethodArgument.setText(""String_Node_Str"");
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        int index=executeMethodInsertedArgument.getSelectedIndex();
        if (index != -1) {
          executeMethodInsertedArgumentList.remove(index);
        }
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        int index=executeMethodInsertedArgument.getSelectedIndex();
        if (index != -1) {
          executeMethodArgument.setText((String)executeMethodInsertedArgument.getSelectedValue());
          executeMethodInsertedArgumentList.remove(index);
        }
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted) {
    try {
      pyroBridaService.call(""String_Node_Str"",applicationId.getText().trim(),fridaPath.getText().trim(),remoteRadioButton.isSelected());
      applicationSpawned=true;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          applicationStatus.setText(""String_Node_Str"");
          applicationStatusButtons.setText(""String_Node_Str"");
          List<TrapTableItem> trapEntries=((TrapTableModel)(trapTable.getModel())).getTrappedMethods();
synchronized (trapEntries) {
            int trapEntryOldSize=trapEntries.size();
            if (trapEntryOldSize > 0) {
              trapEntries.clear();
              ((TrapTableModel)(trapTable.getModel())).fireTableRowsDeleted(0,trapEntryOldSize - 1);
            }
          }
          try {
            documentApplicationStatus.insertString(0,""String_Node_Str"",greenStyle);
            documentApplicationStatusButtons.insertString(0,""String_Node_Str"",greenStyle);
          }
 catch (          BadLocationException e) {
            printException(e,""String_Node_Str"");
          }
        }
      }
);
      printSuccessMessage(""String_Node_Str"" + applicationId.getText().trim() + ""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
    try {
      platform=(int)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{}));
      if (platform == BurpExtender.PLATFORM_ANDROID) {
        printSuccessMessage(""String_Node_Str"");
      }
 else       if (platform == BurpExtender.PLATFORM_IOS) {
        printSuccessMessage(""String_Node_Str"");
      }
 else {
        printSuccessMessage(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted && applicationSpawned) {
    try {
      pyroBridaService.call(""String_Node_Str"");
      printSuccessMessage(""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted && applicationSpawned) {
    try {
      pyroBridaService.call(""String_Node_Str"");
      applicationSpawned=false;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          applicationStatus.setText(""String_Node_Str"");
          applicationStatusButtons.setText(""String_Node_Str"");
          try {
            documentApplicationStatus.insertString(0,""String_Node_Str"",redStyle);
            documentApplicationStatusButtons.insertString(0,""String_Node_Str"",redStyle);
          }
 catch (          BadLocationException e) {
            printException(e,""String_Node_Str"");
          }
        }
      }
);
      printSuccessMessage(""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted) {
    stdoutThread.stop();
    stderrThread.stop();
    try {
      pyroBridaService.call(""String_Node_Str"");
      pyroServerProcess.destroy();
      pyroBridaService.close();
      serverStarted=false;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          serverStatus.setText(""String_Node_Str"");
          serverStatusButtons.setText(""String_Node_Str"");
          try {
            documentServerStatus.insertString(0,""String_Node_Str"",redStyle);
            documentServerStatusButtons.insertString(0,""String_Node_Str"",redStyle);
          }
 catch (          BadLocationException e) {
            printException(e,""String_Node_Str"");
          }
        }
      }
);
      printSuccessMessage(""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && !serverStarted) {
    savePersistentSettings();
    try {
      final String startPyroServerResult=launchPyroServer(pythonPath.getText().trim(),pythonScript);
      if (startPyroServerResult.trim().equals(""String_Node_Str"")) {
        pyroBridaService=new PyroProxy(new PyroURI(""String_Node_Str"" + pyroHost.getText().trim() + ""String_Node_Str""+ pyroPort.getText().trim()));
        serverStarted=true;
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            serverStatus.setText(""String_Node_Str"");
            serverStatusButtons.setText(""String_Node_Str"");
            try {
              documentServerStatus.insertString(0,""String_Node_Str"",greenStyle);
              documentServerStatusButtons.insertString(0,""String_Node_Str"",greenStyle);
            }
 catch (            BadLocationException e) {
              printException(e,""String_Node_Str"");
            }
          }
        }
);
        printSuccessMessage(""String_Node_Str"");
      }
 else {
        if (!(startPyroServerResult.trim().equals(""String_Node_Str""))) {
          printException(null,""String_Node_Str"");
          printException(null,startPyroServerResult.trim());
        }
        return;
      }
    }
 catch (    final Exception e) {
      printException(null,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    savePersistentSettings();
    try {
      String[] arguments=new String[executeMethodInsertedArgumentList.size()];
      for (int i=0; i < executeMethodInsertedArgumentList.size(); i++) {
        arguments[i]=(String)(executeMethodInsertedArgumentList.getElementAt(i));
      }
      final String s=(String)(pyroBridaService.call(""String_Node_Str"",executeMethodName.getText().trim(),arguments));
      printJSMessage(""String_Node_Str"" + executeMethodName.getText().trim() + ""String_Node_Str"");
      printJSMessage(s);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        stubTextEditor.setText(generateJavaStub().getBytes());
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        stubTextEditor.setText(generatePythonStub().getBytes());
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    exportConfigurationsToFile();
  }
 else   if (command.equals(""String_Node_Str"")) {
    loadConfigurationsFromFile();
  }
 else   if (command.equals(""String_Node_Str"")) {
    File jsFile=new File(fridaPath.getText().trim());
    byte[] jsFileContent=null;
    try {
      jsFileContent=Files.readAllBytes(jsFile.toPath());
    }
 catch (    IOException e) {
      printException(e,""String_Node_Str"");
    }
    final byte[] test=jsFileContent;
    if (jsFileContent != null) {
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          jsEditorTextArea.setText(new String(test));
        }
      }
);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    File jsFile=new File(fridaPath.getText().trim());
    try {
      Files.write(jsFile.toPath(),jsEditorTextArea.getText().getBytes(),StandardOpenOption.WRITE);
    }
 catch (    IOException e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str"")) {
    IHttpRequestResponse[] selectedItems=currentInvocation.getSelectedMessages();
    int[] selectedBounds=currentInvocation.getSelectionBounds();
    byte selectedInvocationContext=currentInvocation.getInvocationContext();
    try {
      byte[] selectedRequestOrResponse=null;
      if (selectedInvocationContext == IContextMenuInvocation.CONTEXT_MESSAGE_EDITOR_REQUEST) {
        selectedRequestOrResponse=selectedItems[0].getRequest();
      }
 else {
        selectedRequestOrResponse=selectedItems[0].getResponse();
      }
      byte[] preSelectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,0,selectedBounds[0]);
      byte[] selectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,selectedBounds[0],selectedBounds[1]);
      byte[] postSelectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,selectedBounds[1],selectedRequestOrResponse.length);
      String s=(String)(pyroBridaService.call(""String_Node_Str"",command,new String[]{byteArrayToHexString(selectedPortion)}));
      byte[] newRequest=ArrayUtils.addAll(preSelectedPortion,hexStringToByteArray(s));
      newRequest=ArrayUtils.addAll(newRequest,postSelectedPortion);
      selectedItems[0].setRequest(newRequest);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    try {
      ArrayList<String> allClasses=(ArrayList<String>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[0]));
      HashMap<String,Integer> allModules=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[0]));
      Collections.sort(allClasses,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      ArrayList<String> moduleNames=new ArrayList<String>(allModules.keySet());
      Collections.sort(moduleNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      DefaultTreeModel model=(DefaultTreeModel)tree.getModel();
      DefaultMutableTreeNode newRoot=new DefaultMutableTreeNode(""String_Node_Str"");
      DefaultMutableTreeNode currentNode;
      if (platform == BurpExtender.PLATFORM_ANDROID || platform == BurpExtender.PLATFORM_IOS) {
        DefaultMutableTreeNode objNode=(platform == BurpExtender.PLATFORM_ANDROID ? new DefaultMutableTreeNode(""String_Node_Str"") : new DefaultMutableTreeNode(""String_Node_Str""));
        for (int i=0; i < allClasses.size(); i++) {
          currentNode=new DefaultMutableTreeNode(allClasses.get(i));
          objNode.add(currentNode);
        }
        newRoot.add(objNode);
      }
      DefaultMutableTreeNode modulesNode=new DefaultMutableTreeNode(""String_Node_Str"");
      for (int i=0; i < moduleNames.size(); i++) {
        currentNode=new DefaultMutableTreeNode(moduleNames.get(i));
        modulesNode.add(currentNode);
      }
      newRoot.add(modulesNode);
      model.setRoot(newRoot);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    String toSearch=findTextField.getText().trim();
    HashMap<String,Integer> foundObjcMethods=null;
    if (platform == BurpExtender.PLATFORM_IOS) {
      try {
        foundObjcMethods=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{toSearch}));
      }
 catch (      Exception e) {
        printException(e,""String_Node_Str"");
        return;
      }
    }
    HashMap<String,Integer> foundImports=null;
    try {
      foundImports=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{toSearch}));
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
      return;
    }
    HashMap<String,Integer> foundExports=null;
    try {
      foundExports=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{toSearch}));
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
      return;
    }
    printJSMessage(""String_Node_Str"" + findTextField.getText().trim());
    if (foundObjcMethods != null) {
      ArrayList<String> objcMethodNames=new ArrayList<String>(foundObjcMethods.keySet());
      Collections.sort(objcMethodNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      Iterator<String> currentClassMethodsIterator=objcMethodNames.iterator();
      String currentMethodName;
      while (currentClassMethodsIterator.hasNext()) {
        currentMethodName=currentClassMethodsIterator.next();
        printJSMessage(""String_Node_Str"" + currentMethodName);
      }
    }
    if (foundImports != null) {
      ArrayList<String> importNames=new ArrayList<String>(foundImports.keySet());
      Collections.sort(importNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      Iterator<String> currentImportIterator=importNames.iterator();
      String currentImportName;
      while (currentImportIterator.hasNext()) {
        currentImportName=currentImportIterator.next();
        printJSMessage(""String_Node_Str"" + currentImportName);
      }
    }
    if (foundExports != null) {
      ArrayList<String> exportNames=new ArrayList<String>(foundExports.keySet());
      Collections.sort(exportNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      Iterator<String> exportIterator=exportNames.iterator();
      String currentExportName;
      while (exportIterator.hasNext()) {
        currentExportName=exportIterator.next();
        printJSMessage(""String_Node_Str"" + currentExportName);
      }
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    trap(false);
  }
 else   if (command.equals(""String_Node_Str"")) {
    int dialogButton=JOptionPane.YES_NO_OPTION;
    int dialogResult=JOptionPane.showConfirmDialog(mainPanel,""String_Node_Str"",""String_Node_Str"",dialogButton);
    if (dialogResult == 0) {
      try {
        pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{});
      }
 catch (      Exception e) {
        printException(e,""String_Node_Str"");
        return;
      }
      List<TrapTableItem> trapEntries=((TrapTableModel)(trapTable.getModel())).getTrappedMethods();
synchronized (trapEntries) {
        int trapEntryOldSize=trapEntries.size();
        if (trapEntryOldSize > 0) {
          trapEntries.clear();
          ((TrapTableModel)(trapTable.getModel())).fireTableRowsDeleted(0,trapEntryOldSize - 1);
        }
      }
      printSuccessMessage(""String_Node_Str"");
    }
 else {
      printSuccessMessage(""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    trap(true);
  }
 else   if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str"")) {
    IHttpRequestResponse[] selectedItems=currentInvocation.getSelectedMessages();
    int[] selectedBounds=currentInvocation.getSelectionBounds();
    byte selectedInvocationContext=currentInvocation.getInvocationContext();
    try {
      byte[] selectedRequestOrResponse=null;
      if (selectedInvocationContext == IContextMenuInvocation.CONTEXT_MESSAGE_VIEWER_REQUEST) {
        selectedRequestOrResponse=selectedItems[0].getRequest();
      }
 else {
        selectedRequestOrResponse=selectedItems[0].getResponse();
      }
      byte[] selectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,selectedBounds[0],selectedBounds[1]);
      final String s=(String)(pyroBridaService.call(""String_Node_Str"",command,new String[]{byteArrayToHexString(selectedPortion)}));
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          JTextArea ta=new JTextArea(10,10);
          ta.setText(new String(hexStringToByteArray(s)));
          ta.setWrapStyleWord(true);
          ta.setLineWrap(true);
          ta.setCaretPosition(0);
          ta.setEditable(false);
          JOptionPane.showMessageDialog(null,new JScrollPane(ta),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    JFrame parentFrame=new JFrame();
    JFileChooser fileChooser=new JFileChooser();
    fileChooser.setDialogTitle(""String_Node_Str"");
    int userSelection=fileChooser.showOpenDialog(parentFrame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      final File pythonPathFile=fileChooser.getSelectedFile();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          pythonPath.setText(pythonPathFile.getAbsolutePath());
        }
      }
);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    JFrame parentFrame=new JFrame();
    JFileChooser fileChooser=new JFileChooser();
    fileChooser.setDialogTitle(""String_Node_Str"");
    int userSelection=fileChooser.showOpenDialog(parentFrame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      final File fridaPathFile=fileChooser.getSelectedFile();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          fridaPath.setText(fridaPathFile.getAbsolutePath());
        }
      }
);
    }
  }
 else   if (command.startsWith(""String_Node_Str"")) {
    Pattern p=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Matcher m=p.matcher(command);
    String changeType=null;
    if (m.find()) {
      changeType=m.group(1);
    }
    if (changeType != null) {
      String dialogResult=JOptionPane.showInputDialog(mainPanel,""String_Node_Str"" + changeType + ""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
      changeReturnValue(changeType,dialogResult);
    }
  }
 else   if (command.startsWith(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        String newConsoleText=""String_Node_Str"";
        newConsoleText=newConsoleText + ""String_Node_Str"";
        newConsoleText=newConsoleText + ""String_Node_Str"";
        pluginConsoleTextArea.setText(newConsoleText);
      }
    }
);
  }
}","public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        executeMethodInsertedArgumentList.addElement(executeMethodArgument.getText().trim());
        executeMethodArgument.setText(""String_Node_Str"");
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        int index=executeMethodInsertedArgument.getSelectedIndex();
        if (index != -1) {
          executeMethodInsertedArgumentList.remove(index);
        }
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        int index=executeMethodInsertedArgument.getSelectedIndex();
        if (index != -1) {
          executeMethodArgument.setText((String)executeMethodInsertedArgument.getSelectedValue());
          executeMethodInsertedArgumentList.remove(index);
        }
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted) {
    try {
      pyroBridaService.call(""String_Node_Str"",applicationId.getText().trim(),fridaPath.getText().trim(),remoteRadioButton.isSelected());
      applicationSpawned=true;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          applicationStatus.setText(""String_Node_Str"");
          applicationStatusButtons.setText(""String_Node_Str"");
          List<TrapTableItem> trapEntries=((TrapTableModel)(trapTable.getModel())).getTrappedMethods();
synchronized (trapEntries) {
            int trapEntryOldSize=trapEntries.size();
            if (trapEntryOldSize > 0) {
              trapEntries.clear();
              ((TrapTableModel)(trapTable.getModel())).fireTableRowsDeleted(0,trapEntryOldSize - 1);
            }
          }
          try {
            documentApplicationStatus.insertString(0,""String_Node_Str"",greenStyle);
            documentApplicationStatusButtons.insertString(0,""String_Node_Str"",greenStyle);
          }
 catch (          BadLocationException e) {
            printException(e,""String_Node_Str"");
          }
        }
      }
);
      printSuccessMessage(""String_Node_Str"" + applicationId.getText().trim() + ""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
    try {
      platform=(int)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{}));
      if (platform == BurpExtender.PLATFORM_ANDROID) {
        printSuccessMessage(""String_Node_Str"");
      }
 else       if (platform == BurpExtender.PLATFORM_IOS) {
        printSuccessMessage(""String_Node_Str"");
      }
 else {
        printSuccessMessage(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted && applicationSpawned) {
    try {
      pyroBridaService.call(""String_Node_Str"");
      printSuccessMessage(""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted && applicationSpawned) {
    try {
      pyroBridaService.call(""String_Node_Str"");
      applicationSpawned=false;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          applicationStatus.setText(""String_Node_Str"");
          applicationStatusButtons.setText(""String_Node_Str"");
          try {
            documentApplicationStatus.insertString(0,""String_Node_Str"",redStyle);
            documentApplicationStatusButtons.insertString(0,""String_Node_Str"",redStyle);
          }
 catch (          BadLocationException e) {
            printException(e,""String_Node_Str"");
          }
        }
      }
);
      printSuccessMessage(""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && serverStarted) {
    stdoutThread.stop();
    stderrThread.stop();
    try {
      pyroBridaService.call(""String_Node_Str"");
      pyroServerProcess.destroy();
      pyroBridaService.close();
      serverStarted=false;
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          serverStatus.setText(""String_Node_Str"");
          serverStatusButtons.setText(""String_Node_Str"");
          try {
            documentServerStatus.insertString(0,""String_Node_Str"",redStyle);
            documentServerStatusButtons.insertString(0,""String_Node_Str"",redStyle);
          }
 catch (          BadLocationException e) {
            printException(e,""String_Node_Str"");
          }
        }
      }
);
      printSuccessMessage(""String_Node_Str"");
    }
 catch (    final Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") && !serverStarted) {
    savePersistentSettings();
    try {
      final String startPyroServerResult=launchPyroServer(pythonPath.getText().trim(),pythonScript);
      if (startPyroServerResult.trim().equals(""String_Node_Str"")) {
        pyroBridaService=new PyroProxy(new PyroURI(""String_Node_Str"" + pyroHost.getText().trim() + ""String_Node_Str""+ pyroPort.getText().trim()));
        serverStarted=true;
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            serverStatus.setText(""String_Node_Str"");
            serverStatusButtons.setText(""String_Node_Str"");
            try {
              documentServerStatus.insertString(0,""String_Node_Str"",greenStyle);
              documentServerStatusButtons.insertString(0,""String_Node_Str"",greenStyle);
            }
 catch (            BadLocationException e) {
              printException(e,""String_Node_Str"");
            }
          }
        }
);
        printSuccessMessage(""String_Node_Str"");
      }
 else {
        if (!(startPyroServerResult.trim().equals(""String_Node_Str""))) {
          printException(null,""String_Node_Str"");
          printException(null,startPyroServerResult.trim());
        }
        return;
      }
    }
 catch (    final Exception e) {
      printException(null,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    savePersistentSettings();
    try {
      String[] arguments=new String[executeMethodInsertedArgumentList.size()];
      for (int i=0; i < executeMethodInsertedArgumentList.size(); i++) {
        arguments[i]=(String)(executeMethodInsertedArgumentList.getElementAt(i));
      }
      final String s=(String)(pyroBridaService.call(""String_Node_Str"",executeMethodName.getText().trim(),arguments));
      printJSMessage(""String_Node_Str"" + executeMethodName.getText().trim() + ""String_Node_Str"");
      printJSMessage(s);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        stubTextEditor.setText(generateJavaStub().getBytes());
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        stubTextEditor.setText(generatePythonStub().getBytes());
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    exportConfigurationsToFile();
  }
 else   if (command.equals(""String_Node_Str"")) {
    loadConfigurationsFromFile();
  }
 else   if (command.equals(""String_Node_Str"")) {
    File jsFile=new File(fridaPath.getText().trim());
    final FileLocation fl=FileLocation.create(jsFile);
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        try {
          jsEditorTextArea.load(fl,null);
        }
 catch (        IOException e) {
          printException(e,""String_Node_Str"");
        }
      }
    }
);
  }
 else   if (command.equals(""String_Node_Str"")) {
    try {
      jsEditorTextArea.save();
    }
 catch (    IOException e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str"")) {
    IHttpRequestResponse[] selectedItems=currentInvocation.getSelectedMessages();
    int[] selectedBounds=currentInvocation.getSelectionBounds();
    byte selectedInvocationContext=currentInvocation.getInvocationContext();
    try {
      byte[] selectedRequestOrResponse=null;
      if (selectedInvocationContext == IContextMenuInvocation.CONTEXT_MESSAGE_EDITOR_REQUEST) {
        selectedRequestOrResponse=selectedItems[0].getRequest();
      }
 else {
        selectedRequestOrResponse=selectedItems[0].getResponse();
      }
      byte[] preSelectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,0,selectedBounds[0]);
      byte[] selectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,selectedBounds[0],selectedBounds[1]);
      byte[] postSelectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,selectedBounds[1],selectedRequestOrResponse.length);
      String s=(String)(pyroBridaService.call(""String_Node_Str"",command,new String[]{byteArrayToHexString(selectedPortion)}));
      byte[] newRequest=ArrayUtils.addAll(preSelectedPortion,hexStringToByteArray(s));
      newRequest=ArrayUtils.addAll(newRequest,postSelectedPortion);
      selectedItems[0].setRequest(newRequest);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    try {
      ArrayList<String> allClasses=(ArrayList<String>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[0]));
      HashMap<String,Integer> allModules=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[0]));
      Collections.sort(allClasses,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      ArrayList<String> moduleNames=new ArrayList<String>(allModules.keySet());
      Collections.sort(moduleNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      DefaultTreeModel model=(DefaultTreeModel)tree.getModel();
      DefaultMutableTreeNode newRoot=new DefaultMutableTreeNode(""String_Node_Str"");
      DefaultMutableTreeNode currentNode;
      if (platform == BurpExtender.PLATFORM_ANDROID || platform == BurpExtender.PLATFORM_IOS) {
        DefaultMutableTreeNode objNode=(platform == BurpExtender.PLATFORM_ANDROID ? new DefaultMutableTreeNode(""String_Node_Str"") : new DefaultMutableTreeNode(""String_Node_Str""));
        for (int i=0; i < allClasses.size(); i++) {
          currentNode=new DefaultMutableTreeNode(allClasses.get(i));
          objNode.add(currentNode);
        }
        newRoot.add(objNode);
      }
      DefaultMutableTreeNode modulesNode=new DefaultMutableTreeNode(""String_Node_Str"");
      for (int i=0; i < moduleNames.size(); i++) {
        currentNode=new DefaultMutableTreeNode(moduleNames.get(i));
        modulesNode.add(currentNode);
      }
      newRoot.add(modulesNode);
      model.setRoot(newRoot);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    String toSearch=findTextField.getText().trim();
    HashMap<String,Integer> foundObjcMethods=null;
    if (platform == BurpExtender.PLATFORM_IOS) {
      try {
        foundObjcMethods=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{toSearch}));
      }
 catch (      Exception e) {
        printException(e,""String_Node_Str"");
        return;
      }
    }
    HashMap<String,Integer> foundImports=null;
    try {
      foundImports=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{toSearch}));
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
      return;
    }
    HashMap<String,Integer> foundExports=null;
    try {
      foundExports=(HashMap<String,Integer>)(pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{toSearch}));
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
      return;
    }
    printJSMessage(""String_Node_Str"" + findTextField.getText().trim());
    if (foundObjcMethods != null) {
      ArrayList<String> objcMethodNames=new ArrayList<String>(foundObjcMethods.keySet());
      Collections.sort(objcMethodNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      Iterator<String> currentClassMethodsIterator=objcMethodNames.iterator();
      String currentMethodName;
      while (currentClassMethodsIterator.hasNext()) {
        currentMethodName=currentClassMethodsIterator.next();
        printJSMessage(""String_Node_Str"" + currentMethodName);
      }
    }
    if (foundImports != null) {
      ArrayList<String> importNames=new ArrayList<String>(foundImports.keySet());
      Collections.sort(importNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      Iterator<String> currentImportIterator=importNames.iterator();
      String currentImportName;
      while (currentImportIterator.hasNext()) {
        currentImportName=currentImportIterator.next();
        printJSMessage(""String_Node_Str"" + currentImportName);
      }
    }
    if (foundExports != null) {
      ArrayList<String> exportNames=new ArrayList<String>(foundExports.keySet());
      Collections.sort(exportNames,new Comparator<String>(){
        @Override public int compare(        String class1,        String class2){
          return class1.compareToIgnoreCase(class2);
        }
      }
);
      Iterator<String> exportIterator=exportNames.iterator();
      String currentExportName;
      while (exportIterator.hasNext()) {
        currentExportName=exportIterator.next();
        printJSMessage(""String_Node_Str"" + currentExportName);
      }
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    trap(false);
  }
 else   if (command.equals(""String_Node_Str"")) {
    int dialogButton=JOptionPane.YES_NO_OPTION;
    int dialogResult=JOptionPane.showConfirmDialog(mainPanel,""String_Node_Str"",""String_Node_Str"",dialogButton);
    if (dialogResult == 0) {
      try {
        pyroBridaService.call(""String_Node_Str"",""String_Node_Str"",new String[]{});
      }
 catch (      Exception e) {
        printException(e,""String_Node_Str"");
        return;
      }
      List<TrapTableItem> trapEntries=((TrapTableModel)(trapTable.getModel())).getTrappedMethods();
synchronized (trapEntries) {
        int trapEntryOldSize=trapEntries.size();
        if (trapEntryOldSize > 0) {
          trapEntries.clear();
          ((TrapTableModel)(trapTable.getModel())).fireTableRowsDeleted(0,trapEntryOldSize - 1);
        }
      }
      printSuccessMessage(""String_Node_Str"");
    }
 else {
      printSuccessMessage(""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    trap(true);
  }
 else   if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str"")) {
    IHttpRequestResponse[] selectedItems=currentInvocation.getSelectedMessages();
    int[] selectedBounds=currentInvocation.getSelectionBounds();
    byte selectedInvocationContext=currentInvocation.getInvocationContext();
    try {
      byte[] selectedRequestOrResponse=null;
      if (selectedInvocationContext == IContextMenuInvocation.CONTEXT_MESSAGE_VIEWER_REQUEST) {
        selectedRequestOrResponse=selectedItems[0].getRequest();
      }
 else {
        selectedRequestOrResponse=selectedItems[0].getResponse();
      }
      byte[] selectedPortion=Arrays.copyOfRange(selectedRequestOrResponse,selectedBounds[0],selectedBounds[1]);
      final String s=(String)(pyroBridaService.call(""String_Node_Str"",command,new String[]{byteArrayToHexString(selectedPortion)}));
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          JTextArea ta=new JTextArea(10,10);
          ta.setText(new String(hexStringToByteArray(s)));
          ta.setWrapStyleWord(true);
          ta.setLineWrap(true);
          ta.setCaretPosition(0);
          ta.setEditable(false);
          JOptionPane.showMessageDialog(null,new JScrollPane(ta),""String_Node_Str"",JOptionPane.INFORMATION_MESSAGE);
        }
      }
);
    }
 catch (    Exception e) {
      printException(e,""String_Node_Str"");
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    JFrame parentFrame=new JFrame();
    JFileChooser fileChooser=new JFileChooser();
    fileChooser.setDialogTitle(""String_Node_Str"");
    int userSelection=fileChooser.showOpenDialog(parentFrame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      final File pythonPathFile=fileChooser.getSelectedFile();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          pythonPath.setText(pythonPathFile.getAbsolutePath());
        }
      }
);
    }
  }
 else   if (command.equals(""String_Node_Str"")) {
    JFrame parentFrame=new JFrame();
    JFileChooser fileChooser=new JFileChooser();
    fileChooser.setDialogTitle(""String_Node_Str"");
    int userSelection=fileChooser.showOpenDialog(parentFrame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      final File fridaPathFile=fileChooser.getSelectedFile();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          fridaPath.setText(fridaPathFile.getAbsolutePath());
        }
      }
);
    }
  }
 else   if (command.startsWith(""String_Node_Str"")) {
    Pattern p=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
    Matcher m=p.matcher(command);
    String changeType=null;
    if (m.find()) {
      changeType=m.group(1);
    }
    if (changeType != null) {
      String dialogResult=JOptionPane.showInputDialog(mainPanel,""String_Node_Str"" + changeType + ""String_Node_Str"",""String_Node_Str"",JOptionPane.QUESTION_MESSAGE);
      changeReturnValue(changeType,dialogResult);
    }
  }
 else   if (command.startsWith(""String_Node_Str"")) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        String newConsoleText=""String_Node_Str"";
        newConsoleText=newConsoleText + ""String_Node_Str"";
        newConsoleText=newConsoleText + ""String_Node_Str"";
        pluginConsoleTextArea.setText(newConsoleText);
      }
    }
);
  }
}",0.9777871244183908
170714,"public void registerExtenderCallbacks(IBurpExtenderCallbacks c){
  this.callbacks=c;
  helpers=callbacks.getHelpers();
  callbacks.setExtensionName(""String_Node_Str"");
  callbacks.registerContextMenuFactory(this);
  callbacks.registerExtensionStateListener(this);
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  serverStarted=false;
  applicationSpawned=false;
  lastPrintIsJS=false;
  try {
    InputStream inputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
    File outputFile=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    FileWriter fr=new FileWriter(outputFile);
    BufferedWriter br=new BufferedWriter(fr);
    String s;
    while ((s=reader.readLine()) != null) {
      br.write(s);
      br.newLine();
    }
    reader.close();
    br.close();
    pythonScript=outputFile.getAbsolutePath();
  }
 catch (  Exception e) {
    printException(e,""String_Node_Str"");
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainPanel=new JPanel();
      mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
      JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
      JSplitPane consoleTabbedSplitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      final JTabbedPane tabbedPanel=new JTabbedPane();
      tabbedPanel.addChangeListener(new ChangeListener(){
        public void stateChanged(        ChangeEvent e){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              showHideButtons(tabbedPanel.getSelectedIndex());
            }
          }
);
        }
      }
);
      JPanel configurationConfPanel=new JPanel();
      configurationConfPanel.setLayout(new BoxLayout(configurationConfPanel,BoxLayout.Y_AXIS));
      StyleContext styleContext=new StyleContext();
      redStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(redStyle,Color.RED);
      greenStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(greenStyle,Color.GREEN);
      JPanel serverStatusPanel=new JPanel();
      serverStatusPanel.setLayout(new BoxLayout(serverStatusPanel,BoxLayout.X_AXIS));
      serverStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelServerStatus=new JLabel(""String_Node_Str"");
      documentServerStatus=new DefaultStyledDocument();
      serverStatus=new JTextPane(documentServerStatus);
      try {
        documentServerStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatus.setMaximumSize(serverStatus.getPreferredSize());
      serverStatusPanel.add(labelServerStatus);
      serverStatusPanel.add(serverStatus);
      JPanel applicationStatusPanel=new JPanel();
      applicationStatusPanel.setLayout(new BoxLayout(applicationStatusPanel,BoxLayout.X_AXIS));
      applicationStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationStatus=new JLabel(""String_Node_Str"");
      documentApplicationStatus=new DefaultStyledDocument();
      applicationStatus=new JTextPane(documentApplicationStatus);
      try {
        documentApplicationStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatus.setMaximumSize(applicationStatus.getPreferredSize());
      applicationStatusPanel.add(labelApplicationStatus);
      applicationStatusPanel.add(applicationStatus);
      JPanel pythonPathPanel=new JPanel();
      pythonPathPanel.setLayout(new BoxLayout(pythonPathPanel,BoxLayout.X_AXIS));
      pythonPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPythonPath=new JLabel(""String_Node_Str"");
      pythonPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pythonPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          pythonPath.setText(""String_Node_Str"");
        }
 else {
          pythonPath.setText(""String_Node_Str"");
        }
      }
      pythonPath.setMaximumSize(pythonPath.getPreferredSize());
      JButton pythonPathButton=new JButton(""String_Node_Str"");
      pythonPathButton.setActionCommand(""String_Node_Str"");
      pythonPathButton.addActionListener(BurpExtender.this);
      pythonPathPanel.add(labelPythonPath);
      pythonPathPanel.add(pythonPath);
      pythonPathPanel.add(pythonPathButton);
      JPanel pyroHostPanel=new JPanel();
      pyroHostPanel.setLayout(new BoxLayout(pyroHostPanel,BoxLayout.X_AXIS));
      pyroHostPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroHost=new JLabel(""String_Node_Str"");
      pyroHost=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroHost.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroHost.setText(""String_Node_Str"");
      pyroHost.setMaximumSize(pyroHost.getPreferredSize());
      pyroHostPanel.add(labelPyroHost);
      pyroHostPanel.add(pyroHost);
      JPanel pyroPortPanel=new JPanel();
      pyroPortPanel.setLayout(new BoxLayout(pyroPortPanel,BoxLayout.X_AXIS));
      pyroPortPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroPort=new JLabel(""String_Node_Str"");
      pyroPort=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroPort.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroPort.setText(""String_Node_Str"");
      pyroPort.setMaximumSize(pyroPort.getPreferredSize());
      pyroPortPanel.add(labelPyroPort);
      pyroPortPanel.add(pyroPort);
      JPanel fridaPathPanel=new JPanel();
      fridaPathPanel.setLayout(new BoxLayout(fridaPathPanel,BoxLayout.X_AXIS));
      fridaPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelFridaPath=new JLabel(""String_Node_Str"");
      fridaPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       fridaPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          fridaPath.setText(""String_Node_Str"");
        }
 else {
          fridaPath.setText(""String_Node_Str"");
        }
      }
      fridaPath.setMaximumSize(fridaPath.getPreferredSize());
      JButton fridaPathButton=new JButton(""String_Node_Str"");
      fridaPathButton.setActionCommand(""String_Node_Str"");
      fridaPathButton.addActionListener(BurpExtender.this);
      fridaPathPanel.add(labelFridaPath);
      fridaPathPanel.add(fridaPath);
      fridaPathPanel.add(fridaPathButton);
      JPanel applicationIdPanel=new JPanel();
      applicationIdPanel.setLayout(new BoxLayout(applicationIdPanel,BoxLayout.X_AXIS));
      applicationIdPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationId=new JLabel(""String_Node_Str"");
      applicationId=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       applicationId.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       applicationId.setText(""String_Node_Str"");
      applicationId.setMaximumSize(applicationId.getPreferredSize());
      applicationIdPanel.add(labelApplicationId);
      applicationIdPanel.add(applicationId);
      JPanel localRemotePanel=new JPanel();
      localRemotePanel.setLayout(new BoxLayout(localRemotePanel,BoxLayout.X_AXIS));
      localRemotePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      remoteRadioButton=new JRadioButton(""String_Node_Str"");
      localRadioButton=new JRadioButton(""String_Node_Str"");
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        if (callbacks.loadExtensionSetting(""String_Node_Str"").equals(""String_Node_Str""))         remoteRadioButton.setSelected(true);
 else         localRadioButton.setSelected(true);
      }
 else {
        remoteRadioButton.setSelected(true);
      }
      ButtonGroup localRemoteButtonGroup=new ButtonGroup();
      localRemoteButtonGroup.add(remoteRadioButton);
      localRemoteButtonGroup.add(localRadioButton);
      localRemotePanel.add(remoteRadioButton);
      localRemotePanel.add(localRadioButton);
      configurationConfPanel.add(serverStatusPanel);
      configurationConfPanel.add(applicationStatusPanel);
      configurationConfPanel.add(pythonPathPanel);
      configurationConfPanel.add(pyroHostPanel);
      configurationConfPanel.add(pyroPortPanel);
      configurationConfPanel.add(fridaPathPanel);
      configurationConfPanel.add(applicationIdPanel);
      configurationConfPanel.add(localRemotePanel);
      jsEditorTextArea=new RSyntaxTextArea();
      jsEditorTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
      jsEditorTextArea.setCodeFoldingEnabled(false);
      RTextScrollPane sp=new RTextScrollPane(jsEditorTextArea);
      jsEditorTextArea.setFocusable(true);
      JPanel treeSearchPanel=new JPanel();
      treeSearchPanel.setLayout(new BorderLayout());
      JPanel treePanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
      JScrollPane scrollTreeJPanel=new JScrollPane(treePanel);
      scrollTreeJPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      DefaultMutableTreeNode top=new DefaultMutableTreeNode(""String_Node_Str"");
      tree=new JTree(top);
      tree.addMouseListener(BurpExtender.this);
      treePanel.add(tree);
      JPanel searchPanelBar=new JPanel();
      searchPanelBar.setLayout(new BoxLayout(searchPanelBar,BoxLayout.X_AXIS));
      JLabel findLabel=new JLabel(""String_Node_Str"");
      findTextField=new JTextField();
      JButton searchButton=new JButton(""String_Node_Str"");
      searchButton.setActionCommand(""String_Node_Str"");
      searchButton.addActionListener(BurpExtender.this);
      searchPanelBar.add(findLabel);
      searchPanelBar.add(findTextField);
      searchPanelBar.add(searchButton);
      treeSearchPanel.add(scrollTreeJPanel);
      treeSearchPanel.add(searchPanelBar,BorderLayout.SOUTH);
      stubTextEditor=callbacks.createTextEditor();
      stubTextEditor.setEditable(false);
      JPanel executeMethodPanel=new JPanel();
      executeMethodPanel.setLayout(new BoxLayout(executeMethodPanel,BoxLayout.Y_AXIS));
      JPanel executeMethodNamePanel=new JPanel();
      executeMethodNamePanel.setLayout(new BoxLayout(executeMethodNamePanel,BoxLayout.X_AXIS));
      executeMethodNamePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodName=new JLabel(""String_Node_Str"");
      executeMethodName=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       executeMethodName.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
      executeMethodName.setMaximumSize(executeMethodName.getPreferredSize());
      executeMethodNamePanel.add(labelExecuteMethodName);
      executeMethodNamePanel.add(executeMethodName);
      JPanel executeMethodArgumentPanel=new JPanel();
      executeMethodArgumentPanel.setLayout(new BoxLayout(executeMethodArgumentPanel,BoxLayout.X_AXIS));
      executeMethodArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodArgument=new JLabel(""String_Node_Str"");
      executeMethodArgument=new JTextField(200);
      executeMethodArgument.setMaximumSize(executeMethodArgument.getPreferredSize());
      JButton addExecuteMethodArgument=new JButton(""String_Node_Str"");
      addExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      addExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodArgumentPanel.add(labelExecuteMethodArgument);
      executeMethodArgumentPanel.add(executeMethodArgument);
      executeMethodArgumentPanel.add(addExecuteMethodArgument);
      executeMethodInsertedArgumentList=new DefaultListModel();
      JPanel executeMethodInsertedArgumentPanel=new JPanel();
      executeMethodInsertedArgumentPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentPanel,BoxLayout.X_AXIS));
      executeMethodInsertedArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodInsertedArgument=new JLabel(""String_Node_Str"");
      executeMethodInsertedArgument=new JList(executeMethodInsertedArgumentList);
      JScrollPane executeMethodInsertedArgumentScrollPane=new JScrollPane(executeMethodInsertedArgument);
      executeMethodInsertedArgumentScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      executeMethodInsertedArgumentScrollPane.setBorder(new LineBorder(Color.BLACK));
      executeMethodInsertedArgumentScrollPane.setMaximumSize(executeMethodInsertedArgumentScrollPane.getPreferredSize());
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        int sizeArguments=Integer.parseInt(callbacks.loadExtensionSetting(""String_Node_Str""));
        for (int i=0; i < sizeArguments; i++) {
          executeMethodInsertedArgumentList.addElement(callbacks.loadExtensionSetting(""String_Node_Str"" + i));
        }
      }
      JPanel executeMethodInsertedArgumentButtonPanel=new JPanel();
      executeMethodInsertedArgumentButtonPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentButtonPanel,BoxLayout.Y_AXIS));
      JButton removeExecuteMethodArgument=new JButton(""String_Node_Str"");
      removeExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      removeExecuteMethodArgument.addActionListener(BurpExtender.this);
      JButton modifyExecuteMethodArgument=new JButton(""String_Node_Str"");
      modifyExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      modifyExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodInsertedArgumentButtonPanel.add(removeExecuteMethodArgument);
      executeMethodInsertedArgumentButtonPanel.add(modifyExecuteMethodArgument);
      executeMethodInsertedArgumentPanel.add(labelExecuteMethodInsertedArgument);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentScrollPane);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentButtonPanel);
      executeMethodPanel.add(executeMethodNamePanel);
      executeMethodPanel.add(executeMethodArgumentPanel);
      executeMethodPanel.add(executeMethodInsertedArgumentPanel);
      trapTable=new JTable(new TrapTableModel());
      JScrollPane trapTableScrollPane=new JScrollPane(trapTable);
      trapTableScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      trapTableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      trapTable.setAutoCreateRowSorter(true);
      ((DefaultTableCellRenderer)trapTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
      DefaultTableCellRenderer centerRenderer=new DefaultTableCellRenderer();
      centerRenderer.setHorizontalAlignment(JLabel.CENTER);
      trapTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
      trapTable.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
      tabbedPanel.add(""String_Node_Str"",configurationConfPanel);
      tabbedPanel.add(""String_Node_Str"",sp);
      tabbedPanel.add(""String_Node_Str"",treeSearchPanel);
      tabbedPanel.add(""String_Node_Str"",stubTextEditor.getComponent());
      tabbedPanel.add(""String_Node_Str"",executeMethodPanel);
      tabbedPanel.add(""String_Node_Str"",trapTableScrollPane);
      pluginConsoleTextArea=new JEditorPane(""String_Node_Str"",""String_Node_Str"");
      JScrollPane scrollPluginConsoleTextArea=new JScrollPane(pluginConsoleTextArea);
      scrollPluginConsoleTextArea.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      pluginConsoleTextArea.setEditable(false);
      consoleTabbedSplitPane.setTopComponent(tabbedPanel);
      consoleTabbedSplitPane.setBottomComponent(scrollPluginConsoleTextArea);
      consoleTabbedSplitPane.setResizeWeight(.7d);
      JPanel rightSplitPane=new JPanel();
      rightSplitPane.setLayout(new GridBagLayout());
      GridBagConstraints gbc=new GridBagConstraints();
      gbc.gridwidth=GridBagConstraints.REMAINDER;
      gbc.fill=GridBagConstraints.HORIZONTAL;
      documentServerStatusButtons=new DefaultStyledDocument();
      serverStatusButtons=new JTextPane(documentServerStatusButtons);
      try {
        documentServerStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatusButtons.setMaximumSize(serverStatusButtons.getPreferredSize());
      documentApplicationStatusButtons=new DefaultStyledDocument();
      applicationStatusButtons=new JTextPane(documentApplicationStatusButtons);
      try {
        documentApplicationStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatusButtons.setMaximumSize(applicationStatusButtons.getPreferredSize());
      JButton startServer=new JButton(""String_Node_Str"");
      startServer.setActionCommand(""String_Node_Str"");
      startServer.addActionListener(BurpExtender.this);
      JButton killServer=new JButton(""String_Node_Str"");
      killServer.setActionCommand(""String_Node_Str"");
      killServer.addActionListener(BurpExtender.this);
      JButton spawnApplication=new JButton(""String_Node_Str"");
      spawnApplication.setActionCommand(""String_Node_Str"");
      spawnApplication.addActionListener(BurpExtender.this);
      JButton killApplication=new JButton(""String_Node_Str"");
      killApplication.setActionCommand(""String_Node_Str"");
      killApplication.addActionListener(BurpExtender.this);
      JButton reloadScript=new JButton(""String_Node_Str"");
      reloadScript.setActionCommand(""String_Node_Str"");
      reloadScript.addActionListener(BurpExtender.this);
      clearConsoleButton=new JButton(""String_Node_Str"");
      clearConsoleButton.setActionCommand(""String_Node_Str"");
      clearConsoleButton.addActionListener(BurpExtender.this);
      executeMethodButton=new JButton(""String_Node_Str"");
      executeMethodButton.setActionCommand(""String_Node_Str"");
      executeMethodButton.addActionListener(BurpExtender.this);
      generateJavaStubButton=new JButton(""String_Node_Str"");
      generateJavaStubButton.setActionCommand(""String_Node_Str"");
      generateJavaStubButton.addActionListener(BurpExtender.this);
      generatePythonStubButton=new JButton(""String_Node_Str"");
      generatePythonStubButton.setActionCommand(""String_Node_Str"");
      generatePythonStubButton.addActionListener(BurpExtender.this);
      saveSettingsToFileButton=new JButton(""String_Node_Str"");
      saveSettingsToFileButton.setActionCommand(""String_Node_Str"");
      saveSettingsToFileButton.addActionListener(BurpExtender.this);
      loadSettingsFromFileButton=new JButton(""String_Node_Str"");
      loadSettingsFromFileButton.setActionCommand(""String_Node_Str"");
      loadSettingsFromFileButton.addActionListener(BurpExtender.this);
      loadJSFileButton=new JButton(""String_Node_Str"");
      loadJSFileButton.setActionCommand(""String_Node_Str"");
      loadJSFileButton.addActionListener(BurpExtender.this);
      saveJSFileButton=new JButton(""String_Node_Str"");
      saveJSFileButton.setActionCommand(""String_Node_Str"");
      saveJSFileButton.addActionListener(BurpExtender.this);
      loadTreeButton=new JButton(""String_Node_Str"");
      loadTreeButton.setActionCommand(""String_Node_Str"");
      loadTreeButton.addActionListener(BurpExtender.this);
      detachAllButton=new JButton(""String_Node_Str"");
      detachAllButton.setActionCommand(""String_Node_Str"");
      detachAllButton.addActionListener(BurpExtender.this);
      JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);
      separator.setBorder(BorderFactory.createMatteBorder(3,0,3,0,Color.ORANGE));
      rightSplitPane.add(serverStatusButtons,gbc);
      rightSplitPane.add(applicationStatusButtons,gbc);
      rightSplitPane.add(startServer,gbc);
      rightSplitPane.add(killServer,gbc);
      rightSplitPane.add(spawnApplication,gbc);
      rightSplitPane.add(killApplication,gbc);
      rightSplitPane.add(reloadScript,gbc);
      rightSplitPane.add(clearConsoleButton,gbc);
      rightSplitPane.add(separator,gbc);
      rightSplitPane.add(saveSettingsToFileButton,gbc);
      rightSplitPane.add(loadSettingsFromFileButton,gbc);
      rightSplitPane.add(loadJSFileButton,gbc);
      rightSplitPane.add(saveJSFileButton,gbc);
      rightSplitPane.add(executeMethodButton,gbc);
      rightSplitPane.add(generateJavaStubButton,gbc);
      rightSplitPane.add(generatePythonStubButton,gbc);
      rightSplitPane.add(loadTreeButton,gbc);
      rightSplitPane.add(detachAllButton,gbc);
      splitPane.setLeftComponent(consoleTabbedSplitPane);
      splitPane.setRightComponent(rightSplitPane);
      splitPane.setResizeWeight(.9d);
      mainPanel.add(splitPane);
      callbacks.customizeUiComponent(mainPanel);
      callbacks.addSuiteTab(BurpExtender.this);
    }
  }
);
}","public void registerExtenderCallbacks(IBurpExtenderCallbacks c){
  this.callbacks=c;
  helpers=callbacks.getHelpers();
  callbacks.setExtensionName(""String_Node_Str"");
  callbacks.registerContextMenuFactory(this);
  callbacks.registerExtensionStateListener(this);
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  serverStarted=false;
  applicationSpawned=false;
  lastPrintIsJS=false;
  try {
    InputStream inputStream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
    File outputFile=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    FileWriter fr=new FileWriter(outputFile);
    BufferedWriter br=new BufferedWriter(fr);
    String s;
    while ((s=reader.readLine()) != null) {
      br.write(s);
      br.newLine();
    }
    reader.close();
    br.close();
    pythonScript=outputFile.getAbsolutePath();
  }
 catch (  Exception e) {
    printException(e,""String_Node_Str"");
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainPanel=new JPanel();
      mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
      JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
      JSplitPane consoleTabbedSplitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      final JTabbedPane tabbedPanel=new JTabbedPane();
      tabbedPanel.addChangeListener(new ChangeListener(){
        public void stateChanged(        ChangeEvent e){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              showHideButtons(tabbedPanel.getSelectedIndex());
            }
          }
);
        }
      }
);
      JPanel configurationConfPanel=new JPanel();
      configurationConfPanel.setLayout(new BoxLayout(configurationConfPanel,BoxLayout.Y_AXIS));
      StyleContext styleContext=new StyleContext();
      redStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(redStyle,Color.RED);
      greenStyle=styleContext.addStyle(""String_Node_Str"",null);
      StyleConstants.setForeground(greenStyle,Color.GREEN);
      JPanel serverStatusPanel=new JPanel();
      serverStatusPanel.setLayout(new BoxLayout(serverStatusPanel,BoxLayout.X_AXIS));
      serverStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelServerStatus=new JLabel(""String_Node_Str"");
      documentServerStatus=new DefaultStyledDocument();
      serverStatus=new JTextPane(documentServerStatus);
      try {
        documentServerStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatus.setMaximumSize(serverStatus.getPreferredSize());
      serverStatusPanel.add(labelServerStatus);
      serverStatusPanel.add(serverStatus);
      JPanel applicationStatusPanel=new JPanel();
      applicationStatusPanel.setLayout(new BoxLayout(applicationStatusPanel,BoxLayout.X_AXIS));
      applicationStatusPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationStatus=new JLabel(""String_Node_Str"");
      documentApplicationStatus=new DefaultStyledDocument();
      applicationStatus=new JTextPane(documentApplicationStatus);
      try {
        documentApplicationStatus.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatus.setMaximumSize(applicationStatus.getPreferredSize());
      applicationStatusPanel.add(labelApplicationStatus);
      applicationStatusPanel.add(applicationStatus);
      JPanel pythonPathPanel=new JPanel();
      pythonPathPanel.setLayout(new BoxLayout(pythonPathPanel,BoxLayout.X_AXIS));
      pythonPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPythonPath=new JLabel(""String_Node_Str"");
      pythonPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pythonPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          pythonPath.setText(""String_Node_Str"");
        }
 else {
          pythonPath.setText(""String_Node_Str"");
        }
      }
      pythonPath.setMaximumSize(pythonPath.getPreferredSize());
      JButton pythonPathButton=new JButton(""String_Node_Str"");
      pythonPathButton.setActionCommand(""String_Node_Str"");
      pythonPathButton.addActionListener(BurpExtender.this);
      pythonPathPanel.add(labelPythonPath);
      pythonPathPanel.add(pythonPath);
      pythonPathPanel.add(pythonPathButton);
      JPanel pyroHostPanel=new JPanel();
      pyroHostPanel.setLayout(new BoxLayout(pyroHostPanel,BoxLayout.X_AXIS));
      pyroHostPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroHost=new JLabel(""String_Node_Str"");
      pyroHost=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroHost.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroHost.setText(""String_Node_Str"");
      pyroHost.setMaximumSize(pyroHost.getPreferredSize());
      pyroHostPanel.add(labelPyroHost);
      pyroHostPanel.add(pyroHost);
      JPanel pyroPortPanel=new JPanel();
      pyroPortPanel.setLayout(new BoxLayout(pyroPortPanel,BoxLayout.X_AXIS));
      pyroPortPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelPyroPort=new JLabel(""String_Node_Str"");
      pyroPort=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       pyroPort.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       pyroPort.setText(""String_Node_Str"");
      pyroPort.setMaximumSize(pyroPort.getPreferredSize());
      pyroPortPanel.add(labelPyroPort);
      pyroPortPanel.add(pyroPort);
      JPanel fridaPathPanel=new JPanel();
      fridaPathPanel.setLayout(new BoxLayout(fridaPathPanel,BoxLayout.X_AXIS));
      fridaPathPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelFridaPath=new JLabel(""String_Node_Str"");
      fridaPath=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       fridaPath.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          fridaPath.setText(""String_Node_Str"");
        }
 else {
          fridaPath.setText(""String_Node_Str"");
        }
      }
      fridaPath.setMaximumSize(fridaPath.getPreferredSize());
      JButton fridaPathButton=new JButton(""String_Node_Str"");
      fridaPathButton.setActionCommand(""String_Node_Str"");
      fridaPathButton.addActionListener(BurpExtender.this);
      fridaPathPanel.add(labelFridaPath);
      fridaPathPanel.add(fridaPath);
      fridaPathPanel.add(fridaPathButton);
      JPanel applicationIdPanel=new JPanel();
      applicationIdPanel.setLayout(new BoxLayout(applicationIdPanel,BoxLayout.X_AXIS));
      applicationIdPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelApplicationId=new JLabel(""String_Node_Str"");
      applicationId=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       applicationId.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
 else       applicationId.setText(""String_Node_Str"");
      applicationId.setMaximumSize(applicationId.getPreferredSize());
      applicationIdPanel.add(labelApplicationId);
      applicationIdPanel.add(applicationId);
      JPanel localRemotePanel=new JPanel();
      localRemotePanel.setLayout(new BoxLayout(localRemotePanel,BoxLayout.X_AXIS));
      localRemotePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      remoteRadioButton=new JRadioButton(""String_Node_Str"");
      localRadioButton=new JRadioButton(""String_Node_Str"");
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        if (callbacks.loadExtensionSetting(""String_Node_Str"").equals(""String_Node_Str""))         remoteRadioButton.setSelected(true);
 else         localRadioButton.setSelected(true);
      }
 else {
        remoteRadioButton.setSelected(true);
      }
      ButtonGroup localRemoteButtonGroup=new ButtonGroup();
      localRemoteButtonGroup.add(remoteRadioButton);
      localRemoteButtonGroup.add(localRadioButton);
      localRemotePanel.add(remoteRadioButton);
      localRemotePanel.add(localRadioButton);
      configurationConfPanel.add(serverStatusPanel);
      configurationConfPanel.add(applicationStatusPanel);
      configurationConfPanel.add(pythonPathPanel);
      configurationConfPanel.add(pyroHostPanel);
      configurationConfPanel.add(pyroPortPanel);
      configurationConfPanel.add(fridaPathPanel);
      configurationConfPanel.add(applicationIdPanel);
      configurationConfPanel.add(localRemotePanel);
      jsEditorTextArea=new TextEditorPane();
      jsEditorTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
      jsEditorTextArea.setCodeFoldingEnabled(false);
      RTextScrollPane sp=new RTextScrollPane(jsEditorTextArea);
      jsEditorTextArea.setFocusable(true);
      JPanel treeSearchPanel=new JPanel();
      treeSearchPanel.setLayout(new BorderLayout());
      JPanel treePanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
      JScrollPane scrollTreeJPanel=new JScrollPane(treePanel);
      scrollTreeJPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      DefaultMutableTreeNode top=new DefaultMutableTreeNode(""String_Node_Str"");
      tree=new JTree(top);
      tree.addMouseListener(BurpExtender.this);
      treePanel.add(tree);
      JPanel searchPanelBar=new JPanel();
      searchPanelBar.setLayout(new BoxLayout(searchPanelBar,BoxLayout.X_AXIS));
      JLabel findLabel=new JLabel(""String_Node_Str"");
      findTextField=new JTextField();
      JButton searchButton=new JButton(""String_Node_Str"");
      searchButton.setActionCommand(""String_Node_Str"");
      searchButton.addActionListener(BurpExtender.this);
      searchPanelBar.add(findLabel);
      searchPanelBar.add(findTextField);
      searchPanelBar.add(searchButton);
      treeSearchPanel.add(scrollTreeJPanel);
      treeSearchPanel.add(searchPanelBar,BorderLayout.SOUTH);
      stubTextEditor=callbacks.createTextEditor();
      stubTextEditor.setEditable(false);
      JPanel executeMethodPanel=new JPanel();
      executeMethodPanel.setLayout(new BoxLayout(executeMethodPanel,BoxLayout.Y_AXIS));
      JPanel executeMethodNamePanel=new JPanel();
      executeMethodNamePanel.setLayout(new BoxLayout(executeMethodNamePanel,BoxLayout.X_AXIS));
      executeMethodNamePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodName=new JLabel(""String_Node_Str"");
      executeMethodName=new JTextField(200);
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null)       executeMethodName.setText(callbacks.loadExtensionSetting(""String_Node_Str""));
      executeMethodName.setMaximumSize(executeMethodName.getPreferredSize());
      executeMethodNamePanel.add(labelExecuteMethodName);
      executeMethodNamePanel.add(executeMethodName);
      JPanel executeMethodArgumentPanel=new JPanel();
      executeMethodArgumentPanel.setLayout(new BoxLayout(executeMethodArgumentPanel,BoxLayout.X_AXIS));
      executeMethodArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodArgument=new JLabel(""String_Node_Str"");
      executeMethodArgument=new JTextField(200);
      executeMethodArgument.setMaximumSize(executeMethodArgument.getPreferredSize());
      JButton addExecuteMethodArgument=new JButton(""String_Node_Str"");
      addExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      addExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodArgumentPanel.add(labelExecuteMethodArgument);
      executeMethodArgumentPanel.add(executeMethodArgument);
      executeMethodArgumentPanel.add(addExecuteMethodArgument);
      executeMethodInsertedArgumentList=new DefaultListModel();
      JPanel executeMethodInsertedArgumentPanel=new JPanel();
      executeMethodInsertedArgumentPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentPanel,BoxLayout.X_AXIS));
      executeMethodInsertedArgumentPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel labelExecuteMethodInsertedArgument=new JLabel(""String_Node_Str"");
      executeMethodInsertedArgument=new JList(executeMethodInsertedArgumentList);
      JScrollPane executeMethodInsertedArgumentScrollPane=new JScrollPane(executeMethodInsertedArgument);
      executeMethodInsertedArgumentScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      executeMethodInsertedArgumentScrollPane.setBorder(new LineBorder(Color.BLACK));
      executeMethodInsertedArgumentScrollPane.setMaximumSize(executeMethodInsertedArgumentScrollPane.getPreferredSize());
      if (callbacks.loadExtensionSetting(""String_Node_Str"") != null) {
        int sizeArguments=Integer.parseInt(callbacks.loadExtensionSetting(""String_Node_Str""));
        for (int i=0; i < sizeArguments; i++) {
          executeMethodInsertedArgumentList.addElement(callbacks.loadExtensionSetting(""String_Node_Str"" + i));
        }
      }
      JPanel executeMethodInsertedArgumentButtonPanel=new JPanel();
      executeMethodInsertedArgumentButtonPanel.setLayout(new BoxLayout(executeMethodInsertedArgumentButtonPanel,BoxLayout.Y_AXIS));
      JButton removeExecuteMethodArgument=new JButton(""String_Node_Str"");
      removeExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      removeExecuteMethodArgument.addActionListener(BurpExtender.this);
      JButton modifyExecuteMethodArgument=new JButton(""String_Node_Str"");
      modifyExecuteMethodArgument.setActionCommand(""String_Node_Str"");
      modifyExecuteMethodArgument.addActionListener(BurpExtender.this);
      executeMethodInsertedArgumentButtonPanel.add(removeExecuteMethodArgument);
      executeMethodInsertedArgumentButtonPanel.add(modifyExecuteMethodArgument);
      executeMethodInsertedArgumentPanel.add(labelExecuteMethodInsertedArgument);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentScrollPane);
      executeMethodInsertedArgumentPanel.add(executeMethodInsertedArgumentButtonPanel);
      executeMethodPanel.add(executeMethodNamePanel);
      executeMethodPanel.add(executeMethodArgumentPanel);
      executeMethodPanel.add(executeMethodInsertedArgumentPanel);
      trapTable=new JTable(new TrapTableModel());
      JScrollPane trapTableScrollPane=new JScrollPane(trapTable);
      trapTableScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      trapTableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      trapTable.setAutoCreateRowSorter(true);
      ((DefaultTableCellRenderer)trapTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
      DefaultTableCellRenderer centerRenderer=new DefaultTableCellRenderer();
      centerRenderer.setHorizontalAlignment(JLabel.CENTER);
      trapTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
      trapTable.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
      tabbedPanel.add(""String_Node_Str"",configurationConfPanel);
      tabbedPanel.add(""String_Node_Str"",sp);
      tabbedPanel.add(""String_Node_Str"",treeSearchPanel);
      tabbedPanel.add(""String_Node_Str"",stubTextEditor.getComponent());
      tabbedPanel.add(""String_Node_Str"",executeMethodPanel);
      tabbedPanel.add(""String_Node_Str"",trapTableScrollPane);
      pluginConsoleTextArea=new JEditorPane(""String_Node_Str"",""String_Node_Str"");
      JScrollPane scrollPluginConsoleTextArea=new JScrollPane(pluginConsoleTextArea);
      scrollPluginConsoleTextArea.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      pluginConsoleTextArea.setEditable(false);
      consoleTabbedSplitPane.setTopComponent(tabbedPanel);
      consoleTabbedSplitPane.setBottomComponent(scrollPluginConsoleTextArea);
      consoleTabbedSplitPane.setResizeWeight(.7d);
      JPanel rightSplitPane=new JPanel();
      rightSplitPane.setLayout(new GridBagLayout());
      GridBagConstraints gbc=new GridBagConstraints();
      gbc.gridwidth=GridBagConstraints.REMAINDER;
      gbc.fill=GridBagConstraints.HORIZONTAL;
      documentServerStatusButtons=new DefaultStyledDocument();
      serverStatusButtons=new JTextPane(documentServerStatusButtons);
      try {
        documentServerStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      serverStatusButtons.setMaximumSize(serverStatusButtons.getPreferredSize());
      documentApplicationStatusButtons=new DefaultStyledDocument();
      applicationStatusButtons=new JTextPane(documentApplicationStatusButtons);
      try {
        documentApplicationStatusButtons.insertString(0,""String_Node_Str"",redStyle);
      }
 catch (      BadLocationException e) {
        printException(e,""String_Node_Str"");
      }
      applicationStatusButtons.setMaximumSize(applicationStatusButtons.getPreferredSize());
      JButton startServer=new JButton(""String_Node_Str"");
      startServer.setActionCommand(""String_Node_Str"");
      startServer.addActionListener(BurpExtender.this);
      JButton killServer=new JButton(""String_Node_Str"");
      killServer.setActionCommand(""String_Node_Str"");
      killServer.addActionListener(BurpExtender.this);
      JButton spawnApplication=new JButton(""String_Node_Str"");
      spawnApplication.setActionCommand(""String_Node_Str"");
      spawnApplication.addActionListener(BurpExtender.this);
      JButton killApplication=new JButton(""String_Node_Str"");
      killApplication.setActionCommand(""String_Node_Str"");
      killApplication.addActionListener(BurpExtender.this);
      JButton reloadScript=new JButton(""String_Node_Str"");
      reloadScript.setActionCommand(""String_Node_Str"");
      reloadScript.addActionListener(BurpExtender.this);
      clearConsoleButton=new JButton(""String_Node_Str"");
      clearConsoleButton.setActionCommand(""String_Node_Str"");
      clearConsoleButton.addActionListener(BurpExtender.this);
      executeMethodButton=new JButton(""String_Node_Str"");
      executeMethodButton.setActionCommand(""String_Node_Str"");
      executeMethodButton.addActionListener(BurpExtender.this);
      generateJavaStubButton=new JButton(""String_Node_Str"");
      generateJavaStubButton.setActionCommand(""String_Node_Str"");
      generateJavaStubButton.addActionListener(BurpExtender.this);
      generatePythonStubButton=new JButton(""String_Node_Str"");
      generatePythonStubButton.setActionCommand(""String_Node_Str"");
      generatePythonStubButton.addActionListener(BurpExtender.this);
      saveSettingsToFileButton=new JButton(""String_Node_Str"");
      saveSettingsToFileButton.setActionCommand(""String_Node_Str"");
      saveSettingsToFileButton.addActionListener(BurpExtender.this);
      loadSettingsFromFileButton=new JButton(""String_Node_Str"");
      loadSettingsFromFileButton.setActionCommand(""String_Node_Str"");
      loadSettingsFromFileButton.addActionListener(BurpExtender.this);
      loadJSFileButton=new JButton(""String_Node_Str"");
      loadJSFileButton.setActionCommand(""String_Node_Str"");
      loadJSFileButton.addActionListener(BurpExtender.this);
      saveJSFileButton=new JButton(""String_Node_Str"");
      saveJSFileButton.setActionCommand(""String_Node_Str"");
      saveJSFileButton.addActionListener(BurpExtender.this);
      loadTreeButton=new JButton(""String_Node_Str"");
      loadTreeButton.setActionCommand(""String_Node_Str"");
      loadTreeButton.addActionListener(BurpExtender.this);
      detachAllButton=new JButton(""String_Node_Str"");
      detachAllButton.setActionCommand(""String_Node_Str"");
      detachAllButton.addActionListener(BurpExtender.this);
      JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);
      separator.setBorder(BorderFactory.createMatteBorder(3,0,3,0,Color.ORANGE));
      rightSplitPane.add(serverStatusButtons,gbc);
      rightSplitPane.add(applicationStatusButtons,gbc);
      rightSplitPane.add(startServer,gbc);
      rightSplitPane.add(killServer,gbc);
      rightSplitPane.add(spawnApplication,gbc);
      rightSplitPane.add(killApplication,gbc);
      rightSplitPane.add(reloadScript,gbc);
      rightSplitPane.add(clearConsoleButton,gbc);
      rightSplitPane.add(separator,gbc);
      rightSplitPane.add(saveSettingsToFileButton,gbc);
      rightSplitPane.add(loadSettingsFromFileButton,gbc);
      rightSplitPane.add(loadJSFileButton,gbc);
      rightSplitPane.add(saveJSFileButton,gbc);
      rightSplitPane.add(executeMethodButton,gbc);
      rightSplitPane.add(generateJavaStubButton,gbc);
      rightSplitPane.add(generatePythonStubButton,gbc);
      rightSplitPane.add(loadTreeButton,gbc);
      rightSplitPane.add(detachAllButton,gbc);
      splitPane.setLeftComponent(consoleTabbedSplitPane);
      splitPane.setRightComponent(rightSplitPane);
      splitPane.setResizeWeight(.9d);
      mainPanel.add(splitPane);
      callbacks.customizeUiComponent(mainPanel);
      callbacks.addSuiteTab(BurpExtender.this);
    }
  }
);
}",0.9995159394232764
170715,"@Bean public WebExceptionHandler exceptionHandler(){
  return (  ServerWebExchange exchange,  Throwable ex) -> {
    if (ex instanceof PostNotFoundException) {
      exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);
      return exchange.getResponse().setComplete();
    }
    return Mono.empty();
  }
;
}","@Bean public WebExceptionHandler exceptionHandler(){
  return (  ServerWebExchange exchange,  Throwable ex) -> {
    if (ex instanceof PostNotFoundException) {
      exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);
      return exchange.getResponse().setComplete();
    }
    return Mono.error(ex);
  }
;
}",0.981012658227848
170716,"@Bean public MapReactiveUserDetailsService userDetailsService(){
  UserDetails user=User.withUsername(""String_Node_Str"").password(""String_Node_Str"").roles(""String_Node_Str"").build();
  UserDetails admin=User.withUsername(""String_Node_Str"").password(""String_Node_Str"").roles(""String_Node_Str"",""String_Node_Str"").build();
  return new MapReactiveUserDetailsService(user,admin);
}","@Bean public MapReactiveUserDetailsService userDetailsService(){
  UserDetails user=User.withDefaultPasswordEncoder().username(""String_Node_Str"").password(""String_Node_Str"").roles(""String_Node_Str"").build();
  UserDetails admin=User.withDefaultPasswordEncoder().username(""String_Node_Str"").password(""String_Node_Str"").roles(""String_Node_Str"",""String_Node_Str"").build();
  return new MapReactiveUserDetailsService(user,admin);
}",0.9328358208955224
170717,"@Bean SecurityWebFilterChain springWebFilterChain(ServerHttpSecurity http) throws Exception {
  return http.authorizeExchange().pathMatchers(HttpMethod.GET,""String_Node_Str"").permitAll().pathMatchers(HttpMethod.DELETE,""String_Node_Str"").hasRole(""String_Node_Str"").anyExchange().authenticated().and().build();
}","@Bean SecurityWebFilterChain springWebFilterChain(ServerHttpSecurity http) throws Exception {
  return http.csrf().disable().authorizeExchange().pathMatchers(HttpMethod.GET,""String_Node_Str"").permitAll().pathMatchers(HttpMethod.DELETE,""String_Node_Str"").hasRole(""String_Node_Str"").anyExchange().authenticated().and().build();
}",0.9733124018838304
170718,"public ReflectiveOpcodeSheet(InsnListEditor list,AbstractInsnNode insn){
  this.list=list;
  refresh(insn);
  setSearchBoxVisible(false);
  setModeSwitcherVisible(false);
}","public ReflectiveOpcodeSheet(InsnListEditor list,AbstractInsnNode insn){
  this.list=list;
  add0Hook();
  refresh(insn);
  setSearchBoxVisible(false);
  setModeSwitcherVisible(false);
}",0.9608938547486032
170719,"/** 
 * Create a PropertySheet by parsing fields of a class.
 * @param instances Instances of classes to populate the property table.
 */
public ReflectivePropertySheet(Object... instances){
  for (  Object instance : instances)   setupItems(instance);
}","/** 
 * Create a PropertySheet by parsing fields of a class.
 * @param instances Instances of classes to populate the property table.
 */
public ReflectivePropertySheet(Object... instances){
  add0Hook();
  for (  Object instance : instances)   setupItems(instance);
}",0.9731800766283524
170720,"private static void addOpcode(OpcodeHBox text,AbstractInsnNode ain,MethodNode method){
  if (!OpcodeUtil.isolated(ain)) {
    int spaces=String.valueOf(OpcodeUtil.getSize(ain,method)).length();
    String index=pad(String.valueOf(OpcodeUtil.index(ain,method)),spaces);
    addRaw(text,index);
    addRaw(text,""String_Node_Str"");
  }
  String opName=OpcodeUtil.opcodeToName(ain.getOpcode());
  if (ain.getType() == AbstractInsnNode.LINE) {
    opName=""String_Node_Str"";
  }
 else   if (ain.getType() == AbstractInsnNode.LABEL) {
    opName=""String_Node_Str"";
  }
  text.append(opName);
  Label op=text(opName);
  style(op,""String_Node_Str"");
  add(text,op);
  if (ain.getType() != AbstractInsnNode.INSN) {
    addRaw(text,""String_Node_Str"");
  }
switch (ain.getType()) {
case AbstractInsnNode.FIELD_INSN:
{
      FieldInsnNode fin=(FieldInsnNode)ain;
      addType(text,Type.getObjectType(fin.owner));
      addRaw(text,""String_Node_Str"");
      addName(text,fin.name);
      addRaw(text,""String_Node_Str"");
      addType(text,Type.getType(fin.desc));
      break;
    }
case AbstractInsnNode.METHOD_INSN:
{
    MethodInsnNode min=(MethodInsnNode)ain;
    addType(text,Type.getObjectType(min.owner));
    addRaw(text,""String_Node_Str"");
    addName(text,min.name);
    addMethodType(text,Type.getType(min.desc));
    break;
  }
case AbstractInsnNode.TYPE_INSN:
{
  TypeInsnNode tin=(TypeInsnNode)ain;
  String desc=tin.desc;
  addType(text,Type.getObjectType(desc));
  if (ain.getOpcode() == Opcodes.ANEWARRAY) {
    addRaw(text,""String_Node_Str"");
  }
  break;
}
case AbstractInsnNode.INT_INSN:
{
IntInsnNode iin=(IntInsnNode)ain;
addValue(text,String.valueOf(iin.operand));
break;
}
case AbstractInsnNode.LDC_INSN:
{
LdcInsnNode ldc=(LdcInsnNode)ain;
if (ldc.cst instanceof String) {
String value=String.valueOf(ldc.cst);
if (value.length() > MAX_LDC_LENGTH) {
  value=value.substring(0,MAX_LDC_LENGTH) + ""String_Node_Str"";
}
addString(text,""String_Node_Str"" + value + ""String_Node_Str"");
}
 else if (ldc.cst instanceof Type) {
addType(text,TypeUtil.parse(ldc.cst.toString()));
}
 else {
addValue(text,String.valueOf(ldc.cst));
}
break;
}
case AbstractInsnNode.LINE:
{
LineNumberNode line=(LineNumberNode)ain;
addValue(text,String.valueOf(line.line));
if (line.start != null) {
addRaw(text,""String_Node_Str"");
addOpcode(text,line.start,method);
addRaw(text,""String_Node_Str"");
}
break;
}
case AbstractInsnNode.JUMP_INSN:
{
JumpInsnNode jin=(JumpInsnNode)ain;
if (ConfDisplay.instance().jumpHelp) {
String z=""String_Node_Str"";
switch (ain.getOpcode()) {
case IFEQ:
z+=""String_Node_Str"";
break;
case IFNE:
z+=""String_Node_Str"";
break;
case IFLE:
z+=""String_Node_Str"";
break;
case IFLT:
z+=""String_Node_Str"";
break;
case IFGE:
z+=""String_Node_Str"";
break;
case IFGT:
z+=""String_Node_Str"";
break;
case IF_ACMPNE:
z+=""String_Node_Str"";
break;
case IF_ACMPEQ:
z+=""String_Node_Str"";
break;
case IF_ICMPEQ:
z+=""String_Node_Str"";
break;
case IF_ICMPNE:
z+=""String_Node_Str"";
break;
case IF_ICMPLE:
z+=""String_Node_Str"";
break;
case IF_ICMPLT:
z+=""String_Node_Str"";
break;
case IF_ICMPGE:
z+=""String_Node_Str"";
break;
case IF_ICMPGT:
z+=""String_Node_Str"";
break;
case GOTO:
z+=""String_Node_Str"";
break;
case JSR:
z+=""String_Node_Str"";
break;
case IFNULL:
z+=""String_Node_Str"";
break;
case IFNONNULL:
z+=""String_Node_Str"";
break;
}
addNote(text,z);
}
addRaw(text,""String_Node_Str"");
addOpcode(text,jin.label,method);
addRaw(text,""String_Node_Str"");
break;
}
case AbstractInsnNode.VAR_INSN:
{
VarInsnNode vin=(VarInsnNode)ain;
addValue(text,String.valueOf(vin.var));
if (method != null && method.localVariables != null && vin.var < method.localVariables.size()) {
LocalVariableNode lvn=method.localVariables.get(vin.var);
addRaw(text,""String_Node_Str"");
addName(text,lvn.name);
addRaw(text,""String_Node_Str"");
addType(text,Type.getType(lvn.desc));
addRaw(text,""String_Node_Str"");
}
break;
}
case AbstractInsnNode.TABLESWITCH_INSN:
{
TableSwitchInsnNode tsin=(TableSwitchInsnNode)ain;
StringBuilder lbls=new StringBuilder();
for (LabelNode label : tsin.labels) {
lbls.append(OpcodeUtil.index(label,method)).append(""String_Node_Str"");
}
if (lbls.toString().endsWith(""String_Node_Str"")) {
lbls=new StringBuilder(lbls.substring(0,lbls.length() - 2));
}
int dfltOff=OpcodeUtil.index(tsin.dflt,method);
addNote(text,""String_Node_Str"" + tsin.min + ""String_Node_Str""+ tsin.max+ ""String_Node_Str"");
addNote(text,""String_Node_Str"" + lbls + ""String_Node_Str"");
addNote(text,""String_Node_Str"" + dfltOff);
break;
}
case AbstractInsnNode.LOOKUPSWITCH_INSN:
{
LookupSwitchInsnNode lsin=(LookupSwitchInsnNode)ain;
String lbls=""String_Node_Str"";
int cap=Math.min(lsin.keys.size(),lsin.labels.size());
for (int i=0; i < cap; i++) {
int offset=OpcodeUtil.index(lsin.labels.get(i),method);
lbls+=lsin.keys.get(i) + ""String_Node_Str"" + offset+ ""String_Node_Str"";
}
if (lsin.dflt != null) {
int offset=OpcodeUtil.index(lsin.dflt,method);
lbls+=""String_Node_Str"" + offset;
}
if (lbls.endsWith(""String_Node_Str"")) {
lbls=lbls.substring(0,lbls.length() - 2);
}
addNote(text,""String_Node_Str"" + lbls + ""String_Node_Str"");
break;
}
case AbstractInsnNode.MULTIANEWARRAY_INSN:
{
MultiANewArrayInsnNode manain=(MultiANewArrayInsnNode)ain;
addType(text,Type.getType(manain.desc));
addNote(text,""String_Node_Str"" + manain.dims);
break;
}
case AbstractInsnNode.INVOKE_DYNAMIC_INSN:
{
InvokeDynamicInsnNode insnIndy=(InvokeDynamicInsnNode)ain;
if (insnIndy.bsmArgs.length >= 2 && insnIndy.bsmArgs[1] instanceof Handle) {
Handle handle=(Handle)insnIndy.bsmArgs[1];
Type typeIndyOwner=Type.getObjectType(handle.getOwner());
Type typeIndyDesc=Type.getMethodType(handle.getDesc());
addType(text,typeIndyDesc.getReturnType());
addRaw(text,""String_Node_Str"");
addType(text,typeIndyOwner);
addRaw(text,""String_Node_Str"");
addName(text,handle.getName());
addRaw(text,""String_Node_Str"");
Type[] args=typeIndyDesc.getArgumentTypes();
for (int i=0; i < args.length; i++) {
Type t=args[i];
addType(text,t);
if (i < args.length - 1) {
addRaw(text,""String_Node_Str"");
}
}
addRaw(text,""String_Node_Str"");
}
 else {
addNote(text,""String_Node_Str"");
}
break;
}
case AbstractInsnNode.LABEL:
{
addRaw(text,OpcodeUtil.labelName(ain));
break;
}
case AbstractInsnNode.FRAME:
{
break;
}
}
}","private static void addOpcode(OpcodeHBox text,AbstractInsnNode ain,MethodNode method){
  if (!OpcodeUtil.isolated(ain)) {
    int spaces=String.valueOf(OpcodeUtil.getSize(ain,method)).length();
    String index=pad(String.valueOf(OpcodeUtil.index(ain,method)),spaces);
    addRaw(text,index);
    addRaw(text,""String_Node_Str"");
  }
  String opName=OpcodeUtil.opcodeToName(ain.getOpcode());
  if (ain.getType() == AbstractInsnNode.LINE) {
    opName=""String_Node_Str"";
  }
 else   if (ain.getType() == AbstractInsnNode.LABEL) {
    opName=""String_Node_Str"";
  }
  text.append(opName);
  Label op=text(opName);
  style(op,""String_Node_Str"");
  add(text,op);
  if (ain.getType() != AbstractInsnNode.INSN) {
    addRaw(text,""String_Node_Str"");
  }
switch (ain.getType()) {
case AbstractInsnNode.FIELD_INSN:
{
      FieldInsnNode fin=(FieldInsnNode)ain;
      addType(text,Type.getObjectType(fin.owner));
      addRaw(text,""String_Node_Str"");
      addName(text,fin.name);
      addRaw(text,""String_Node_Str"");
      addType(text,Type.getType(fin.desc));
      break;
    }
case AbstractInsnNode.METHOD_INSN:
{
    MethodInsnNode min=(MethodInsnNode)ain;
    addType(text,Type.getObjectType(min.owner));
    addRaw(text,""String_Node_Str"");
    addName(text,min.name);
    addMethodType(text,Type.getType(min.desc));
    break;
  }
case AbstractInsnNode.TYPE_INSN:
{
  TypeInsnNode tin=(TypeInsnNode)ain;
  String desc=tin.desc;
  addType(text,Type.getObjectType(desc));
  if (ain.getOpcode() == Opcodes.ANEWARRAY) {
    addRaw(text,""String_Node_Str"");
  }
  break;
}
case AbstractInsnNode.INT_INSN:
{
IntInsnNode iin=(IntInsnNode)ain;
addValue(text,String.valueOf(iin.operand));
break;
}
case AbstractInsnNode.LDC_INSN:
{
LdcInsnNode ldc=(LdcInsnNode)ain;
if (ldc.cst instanceof String) {
String value=String.valueOf(ldc.cst);
if (value.length() > MAX_LDC_LENGTH) {
  value=value.substring(0,MAX_LDC_LENGTH) + ""String_Node_Str"";
}
addString(text,""String_Node_Str"" + value + ""String_Node_Str"");
}
 else if (ldc.cst instanceof Type) {
addType(text,TypeUtil.parse(ldc.cst.toString()));
}
 else {
addValue(text,String.valueOf(ldc.cst));
}
break;
}
case AbstractInsnNode.LINE:
{
LineNumberNode line=(LineNumberNode)ain;
addValue(text,String.valueOf(line.line));
if (line.start != null) {
addRaw(text,""String_Node_Str"");
addOpcode(text,line.start,method);
addRaw(text,""String_Node_Str"");
}
break;
}
case AbstractInsnNode.JUMP_INSN:
{
JumpInsnNode jin=(JumpInsnNode)ain;
if (ConfDisplay.instance().jumpHelp) {
String z=""String_Node_Str"";
switch (ain.getOpcode()) {
case IFEQ:
z+=""String_Node_Str"";
break;
case IFNE:
z+=""String_Node_Str"";
break;
case IFLE:
z+=""String_Node_Str"";
break;
case IFLT:
z+=""String_Node_Str"";
break;
case IFGE:
z+=""String_Node_Str"";
break;
case IFGT:
z+=""String_Node_Str"";
break;
case IF_ACMPNE:
z+=""String_Node_Str"";
break;
case IF_ACMPEQ:
z+=""String_Node_Str"";
break;
case IF_ICMPEQ:
z+=""String_Node_Str"";
break;
case IF_ICMPNE:
z+=""String_Node_Str"";
break;
case IF_ICMPLE:
z+=""String_Node_Str"";
break;
case IF_ICMPLT:
z+=""String_Node_Str"";
break;
case IF_ICMPGE:
z+=""String_Node_Str"";
break;
case IF_ICMPGT:
z+=""String_Node_Str"";
break;
case GOTO:
z+=""String_Node_Str"";
break;
case JSR:
z+=""String_Node_Str"";
break;
case IFNULL:
z+=""String_Node_Str"";
break;
case IFNONNULL:
z+=""String_Node_Str"";
break;
}
addNote(text,z);
}
addRaw(text,""String_Node_Str"");
addOpcode(text,jin.label,method);
addRaw(text,""String_Node_Str"");
break;
}
case AbstractInsnNode.VAR_INSN:
{
VarInsnNode vin=(VarInsnNode)ain;
addValue(text,String.valueOf(vin.var));
if (method != null && method.localVariables != null && vin.var < method.localVariables.size()) {
LocalVariableNode lvn=Asm.getLocal(method,vin.var);
addRaw(text,""String_Node_Str"");
addName(text,lvn.name);
addRaw(text,""String_Node_Str"");
addType(text,Type.getType(lvn.desc));
addRaw(text,""String_Node_Str"");
}
break;
}
case AbstractInsnNode.TABLESWITCH_INSN:
{
TableSwitchInsnNode tsin=(TableSwitchInsnNode)ain;
StringBuilder lbls=new StringBuilder();
for (LabelNode label : tsin.labels) {
lbls.append(OpcodeUtil.index(label,method)).append(""String_Node_Str"");
}
if (lbls.toString().endsWith(""String_Node_Str"")) {
lbls=new StringBuilder(lbls.substring(0,lbls.length() - 2));
}
int dfltOff=OpcodeUtil.index(tsin.dflt,method);
addNote(text,""String_Node_Str"" + tsin.min + ""String_Node_Str""+ tsin.max+ ""String_Node_Str"");
addNote(text,""String_Node_Str"" + lbls + ""String_Node_Str"");
addNote(text,""String_Node_Str"" + dfltOff);
break;
}
case AbstractInsnNode.LOOKUPSWITCH_INSN:
{
LookupSwitchInsnNode lsin=(LookupSwitchInsnNode)ain;
String lbls=""String_Node_Str"";
int cap=Math.min(lsin.keys.size(),lsin.labels.size());
for (int i=0; i < cap; i++) {
int offset=OpcodeUtil.index(lsin.labels.get(i),method);
lbls+=lsin.keys.get(i) + ""String_Node_Str"" + offset+ ""String_Node_Str"";
}
if (lsin.dflt != null) {
int offset=OpcodeUtil.index(lsin.dflt,method);
lbls+=""String_Node_Str"" + offset;
}
if (lbls.endsWith(""String_Node_Str"")) {
lbls=lbls.substring(0,lbls.length() - 2);
}
addNote(text,""String_Node_Str"" + lbls + ""String_Node_Str"");
break;
}
case AbstractInsnNode.MULTIANEWARRAY_INSN:
{
MultiANewArrayInsnNode manain=(MultiANewArrayInsnNode)ain;
addType(text,Type.getType(manain.desc));
addNote(text,""String_Node_Str"" + manain.dims);
break;
}
case AbstractInsnNode.INVOKE_DYNAMIC_INSN:
{
InvokeDynamicInsnNode insnIndy=(InvokeDynamicInsnNode)ain;
if (insnIndy.bsmArgs.length >= 2 && insnIndy.bsmArgs[1] instanceof Handle) {
Handle handle=(Handle)insnIndy.bsmArgs[1];
Type typeIndyOwner=Type.getObjectType(handle.getOwner());
Type typeIndyDesc=Type.getMethodType(handle.getDesc());
addType(text,typeIndyDesc.getReturnType());
addRaw(text,""String_Node_Str"");
addType(text,typeIndyOwner);
addRaw(text,""String_Node_Str"");
addName(text,handle.getName());
addRaw(text,""String_Node_Str"");
Type[] args=typeIndyDesc.getArgumentTypes();
for (int i=0; i < args.length; i++) {
Type t=args[i];
addType(text,t);
if (i < args.length - 1) {
addRaw(text,""String_Node_Str"");
}
}
addRaw(text,""String_Node_Str"");
}
 else {
addNote(text,""String_Node_Str"");
}
break;
}
case AbstractInsnNode.LABEL:
{
addRaw(text,OpcodeUtil.labelName(ain));
break;
}
case AbstractInsnNode.FRAME:
{
break;
}
}
}",0.9972664415500884
170721,"public void setExternal(){
  external=true;
  for (  MethodWrapper method : methods) {
    method.setLocked(true);
  }
}","public void setExternal(){
  external=true;
  for (  MethodWrapper method : getMethods()) {
    method.setLocked(true);
  }
}",0.9714285714285714
170722,"/** 
 * @param other Other method wrapper to check for match.
 * @return Matching method definition <i>(name + desc)</i>
 */
public boolean meatches(MethodWrapper other){
  if (getOwner().equals(other.getOwner())) {
    return false;
  }
  MethodNode mnOther=other.getValue();
  MethodNode mnThis=this.getValue();
  return mnThis.name.equals(mnOther.name) && mnThis.desc.equals(mnOther.desc);
}","/** 
 * @param other Other method wrapper to check for match.
 * @return Matching method definition <i>(name + desc)</i>
 */
public boolean meatches(MethodWrapper other){
  if (other == null || getOwner().equals(other.getOwner())) {
    return false;
  }
  MethodNode mnOther=other.getValue();
  MethodNode mnThis=this.getValue();
  return mnThis.name.equals(mnOther.name) && mnThis.desc.equals(mnOther.desc);
}",0.9788819875776398
170723,"private void linkMethods(ClassWrapper other,Set<ClassWrapper> existing){
  if (existing.contains(other)) {
    return;
  }
  for (  MethodWrapper method : other.getMethods()) {
    if (meatches(method)) {
      addChild(method);
      addParent(method);
    }
  }
  existing.add(other);
  for (  Node<ClassNode> node : other.getChildren()) {
    linkMethods((ClassWrapper)node,existing);
  }
  for (  Node<ClassNode> node : other.getParents()) {
    linkMethods((ClassWrapper)node,existing);
  }
}","private void linkMethods(ClassWrapper other,Set<ClassWrapper> existing){
  if (existing.contains(other) || isObjectClass(other)) {
    return;
  }
  MethodNode value=getValue();
  if (value != null) {
    MethodWrapper method=other.getMethodMap().get(value.name + value.desc);
    if (meatches(method)) {
      addChild(method);
      addParent(method);
    }
  }
  existing.add(other);
  for (  Node<ClassNode> node : other.getChildren()) {
    linkMethods((ClassWrapper)node,existing);
  }
  for (  Node<ClassNode> node : other.getParents()) {
    linkMethods((ClassWrapper)node,existing);
  }
}",0.3382084095063985
170724,"/** 
 * Add class to class-map.
 * @param name Class to add.
 * @param classes Map of ASM ClassNodes to pull values from.
 * @return ClassWrapper associated with name.
 */
private ClassWrapper addClass(String name,Map<String,ClassNode> classes){
  if (classMap.containsKey(name)) {
    return classMap.get(name);
  }
  ClassWrapper node=null;
  if (classes.containsKey(name)) {
    node=new ClassWrapper(classes.get(name));
  }
 else {
    node=new ClassWrapper(null);
    try {
      Class<?> cls=Class.forName(name,false,ClassLoader.getSystemClassLoader());
      for (      Method method : cls.getDeclaredMethods()) {
        String desc=Type.getMethodDescriptor(method).toString();
        MethodNode dummy=new MethodNode();
        dummy.name=method.getName();
        dummy.desc=desc;
        methodMap.put(name + ""String_Node_Str"" + method.getName()+ desc,node.addMethod(dummy));
      }
    }
 catch (    Exception e) {
    }
    node.setExternal();
  }
  classMap.put(name,node);
  ClassNode cn=node.getValue();
  if (cn != null) {
    node.addParent(addClass(cn.superName,classes));
    for (    String interfac : cn.interfaces) {
      node.addParent(addClass(interfac,classes));
    }
    for (    MethodNode mn : cn.methods) {
      methodMap.put(name + ""String_Node_Str"" + mn.name+ mn.desc,node.addMethod(mn));
    }
  }
  return node;
}","/** 
 * Add class to class-map.
 * @param name Class to add.
 * @param classes Map of ASM ClassNodes to pull values from.
 * @return ClassWrapper associated with name.
 */
private ClassWrapper addClass(String name,Map<String,ClassNode> classes){
  if (name == null) {
    return null;
  }
  if (classMap.containsKey(name)) {
    return classMap.get(name);
  }
  ClassWrapper node=null;
  if (classes.containsKey(name)) {
    node=new ClassWrapper(classes.get(name));
  }
 else {
    node=new ReflectiveClassWrapper(name);
    try {
      Class<?> cls=Class.forName(name,false,ClassLoader.getSystemClassLoader());
      for (      Method method : cls.getDeclaredMethods()) {
        String desc=Type.getMethodDescriptor(method).toString();
        MethodNode dummy=new MethodNode();
        dummy.name=method.getName();
        dummy.desc=desc;
        methodMap.put(name + ""String_Node_Str"" + method.getName()+ desc,node.addMethod(dummy));
      }
    }
 catch (    Exception e) {
    }
    node.setExternal();
  }
  classMap.put(name,node);
  ClassNode cn=node.getValue();
  if (cn != null) {
    if (cn.superName != null) {
      ClassWrapper c=addClass(cn.superName,classes);
      if (c != null) {
        node.addParent(c);
      }
    }
    for (    String interfac : cn.interfaces) {
      ClassWrapper i=addClass(interfac,classes);
      if (i != null) {
        node.addParent(i);
      }
    }
    for (    MethodNode mn : cn.methods) {
      methodMap.put(name + ""String_Node_Str"" + mn.name+ mn.desc,node.addMethod(mn));
    }
  }
  return node;
}",0.8607768992781024
170725,"public MethodWrapper addMethod(MethodNode mn){
  MethodWrapper node=new MethodWrapper(this,mn);
  getMethods().add(node);
  return node;
}","public MethodWrapper addMethod(MethodNode mn){
  MethodWrapper node=new MethodWrapper(this,mn);
  getMethodMap().put(mn.name + mn.desc,node);
  return node;
}",0.9121621621621622
170726,"/** 
 * Provides access to a map of class hierarchy of ClassNodes. Keys are internal names of classes such as <i>""my/class/Name""</i>
 * @return Map of node wrappers for ClassNodes.
 */
public static Map<String,MethodWrapper> getMethodMap(){
  return INSTANCE.methodMap;
}","public Map<String,MethodWrapper> getMethodMap(){
  return methods;
}",0.3952802359882006
170727,"public List<MethodWrapper> getMethods(){
  return methods;
}","public Collection<MethodWrapper> getMethods(){
  return getMethodMap().values();
}",0.7887323943661971
170728,"/** 
 * Print an exception.
 * @param exception Exception to print.
 * @param display Show error in UI.
 * @param terminate Stop program after printing.
 */
public static void error(Exception exception,boolean display,boolean terminate){
  String message=getErrorMessage(exception);
  Logging.error(message);
  if (display) {
    Notifications.create().title(""String_Node_Str"" + exception.getClass().getSimpleName()).text(message).hideAfter(Duration.seconds(5)).showError();
  }
  if (terminate) {
    System.exit(0);
  }
}","/** 
 * Print an exception.
 * @param exception Exception to print.
 * @param display Show error in UI.
 * @param terminate Stop program after printing.
 */
public static void error(Exception exception,boolean display,boolean terminate){
  String message=getErrorMessage(exception);
  Logging.error(message);
  if (display) {
    Threads.runLaterFx(0,() -> {
      Notifications.create().title(""String_Node_Str"" + exception.getClass().getSimpleName()).text(message).hideAfter(Duration.seconds(5)).showError();
    }
);
  }
  if (terminate) {
    System.exit(0);
  }
}",0.9596330275229358
170729,"@SuppressWarnings(""String_Node_Str"") public MethodInfo(ClassNode owner,List<MethodNode> methods){
  MethodInfo info=this;
  setOnMouseClicked(new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent e){
      if ((e.getClickCount() == 2 && e.getButton() == MouseButton.PRIMARY) || (e.getButton() == MouseButton.MIDDLE)) {
        MethodNode mn=getSelectionModel().getSelectedItem();
        Bus.INSTANCE.post(new MethodOpenEvent(owner,mn,info));
      }
    }
  }
);
  getItems().addListener((  ListChangeListener.Change<? extends MethodNode> c) -> {
    while (c.next()) {
      if (c.wasRemoved() || c.wasAdded()) {
        Bus.INSTANCE.post(new ClassDirtyEvent(owner));
      }
    }
  }
);
  TableColumn<MethodNode,Integer> colFlags=new TableColumn<>(Lang.get(""String_Node_Str""));
  TableColumn<MethodNode,String> colName=new TableColumn<>(Lang.get(""String_Node_Str""));
  TableColumn<MethodNode,Type> colRet=new TableColumn<>(Lang.get(""String_Node_Str""));
  TableColumn<MethodNode,Type[]> colArgs=new TableColumn<>(Lang.get(""String_Node_Str""));
  setFixedCellSize(20);
  getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
  getColumns().addAll(colFlags,colRet,colName,colArgs);
  colFlags.setCellValueFactory(cell -> JavaFX.observable(cell.getValue().access));
  colFlags.setCellFactory(cell -> new TableCell<MethodNode,Integer>(){
    @Override protected void updateItem(    Integer flags,    boolean empty){
      super.updateItem(flags,empty);
      if (empty || flags == null) {
        setGraphic(null);
      }
 else {
        setGraphic(Icons.getMember(true,flags));
      }
    }
  }
);
  colFlags.setComparator(Integer::compare);
  colName.setCellValueFactory(cell -> JavaFX.observable(cell.getValue().name));
  colName.setCellFactory(cell -> new TableCell<MethodNode,String>(){
    @Override protected void updateItem(    String name,    boolean empty){
      super.updateItem(name,empty);
      if (empty || name == null) {
        setGraphic(null);
      }
 else {
        setGraphic(FormatFactory.name(name));
      }
    }
  }
);
  colName.setComparator(Comparator.comparing(String::toString));
  colRet.setCellValueFactory(cell -> JavaFX.observable(Type.getType(cell.getValue().desc).getReturnType()));
  colRet.setCellFactory(cell -> new TableCell<MethodNode,Type>(){
    @Override protected void updateItem(    Type type,    boolean empty){
      super.updateItem(type,empty);
      if (empty || type == null) {
        setGraphic(null);
      }
 else {
        setGraphic(FormatFactory.type(type));
      }
    }
  }
);
  colRet.setComparator(Comparator.comparing(Type::toString));
  colRet.setComparator(new Comparator<Type>(){
    @Override public int compare(    Type o1,    Type o2){
      String s1=Misc.filter(o1);
      String s2=Misc.filter(o2);
      return Comparator.comparing(String::toString).compare(s1,s2);
    }
  }
);
  colArgs.setCellValueFactory(cell -> JavaFX.observable(Type.getType(cell.getValue().desc).getArgumentTypes()));
  colArgs.setCellFactory(cell -> new TableCell<MethodNode,Type[]>(){
    @Override protected void updateItem(    Type[] types,    boolean empty){
      super.updateItem(types,empty);
      if (empty || types == null || types.length == 0) {
        setGraphic(null);
      }
 else {
        setGraphic(FormatFactory.typeArray(types));
      }
    }
  }
);
  colArgs.setComparator(new Comparator<Type[]>(){
    @Override public int compare(    Type[] o1,    Type[] o2){
      int len=Math.min(o1.length,o2.length);
      for (int i=0; i < len; i++) {
        int c=Comparator.comparing(String::toString).compare(Misc.filter(o1[i]),Misc.filter(o2[i]));
        if (c != 0) {
          return c;
        }
      }
      if (o1.length == o2.length) {
        return 0;
      }
      return o1.length < o2.length ? -1 : 1;
    }
  }
);
  setItems(FXCollections.observableArrayList(methods));
  ContextMenu ctxBase=new ContextMenu();
  ContextMenu ctx=new ContextMenu();
  ctxBase.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=new MethodNode(0,""String_Node_Str"",""String_Node_Str"",null,null);
    methods.add(mn);
    getItems().add(mn);
  }
));
  setContextMenu(ctxBase);
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    methods.add(new MethodNode(0,""String_Node_Str"",""String_Node_Str"",null,null));
    MethodNode mn=getSelectionModel().getSelectedItem();
    Bus.INSTANCE.post(new InsnOpenEvent(owner,mn,null));
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=getSelectionModel().getSelectedItem();
    DecompileItem decomp=new DecompileItem(owner,mn);
    decomp.decompile();
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=getSelectionModel().getSelectedItem();
    FxSearch.open(Parameter.references(owner.name,mn.name,mn.desc));
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=new MethodNode(0,""String_Node_Str"",""String_Node_Str"",null,null);
    methods.add(mn);
    getItems().add(mn);
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    int i=getSelectionModel().getSelectedIndex();
    methods.remove(i);
    getItems().remove(i);
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode sel=getSelectionModel().getSelectedItem();
    String[] exceptions=sel.exceptions.toArray(new String[sel.exceptions.size()]);
    MethodNode copy=new MethodNode(sel.access,sel.name + ""String_Node_Str"",sel.desc,sel.signature,exceptions);
    sel.accept(copy);
    methods.add(copy);
    getItems().add(copy);
  }
));
  getSelectionModel().selectedIndexProperty().addListener((c) -> {
    setContextMenu(getSelectionModel().getSelectedIndex() == -1 ? null : ctx);
  }
);
  getItems().addListener((  ListChangeListener.Change<? extends MethodNode> c) -> {
    Bus.INSTANCE.post(new ClassDirtyEvent(owner));
  }
);
}","@SuppressWarnings(""String_Node_Str"") public MethodInfo(ClassNode owner,List<MethodNode> methods){
  MethodInfo info=this;
  setOnMouseClicked(new EventHandler<MouseEvent>(){
    @Override public void handle(    MouseEvent e){
      if ((e.getClickCount() == 2 && e.getButton() == MouseButton.PRIMARY) || (e.getButton() == MouseButton.MIDDLE)) {
        MethodNode mn=getSelectionModel().getSelectedItem();
        Bus.INSTANCE.post(new MethodOpenEvent(owner,mn,info));
      }
    }
  }
);
  getItems().addListener((  ListChangeListener.Change<? extends MethodNode> c) -> {
    while (c.next()) {
      if (c.wasRemoved() || c.wasAdded()) {
        Bus.INSTANCE.post(new ClassDirtyEvent(owner));
      }
    }
  }
);
  TableColumn<MethodNode,Integer> colFlags=new TableColumn<>(Lang.get(""String_Node_Str""));
  TableColumn<MethodNode,String> colName=new TableColumn<>(Lang.get(""String_Node_Str""));
  TableColumn<MethodNode,Type> colRet=new TableColumn<>(Lang.get(""String_Node_Str""));
  TableColumn<MethodNode,Type[]> colArgs=new TableColumn<>(Lang.get(""String_Node_Str""));
  setFixedCellSize(20);
  getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
  getColumns().addAll(colFlags,colRet,colName,colArgs);
  colFlags.setCellValueFactory(cell -> JavaFX.observable(cell.getValue().access));
  colFlags.setCellFactory(cell -> new TableCell<MethodNode,Integer>(){
    @Override protected void updateItem(    Integer flags,    boolean empty){
      super.updateItem(flags,empty);
      if (empty || flags == null) {
        setGraphic(null);
      }
 else {
        setGraphic(Icons.getMember(true,flags));
      }
    }
  }
);
  colFlags.setComparator(Integer::compare);
  colName.setCellValueFactory(cell -> JavaFX.observable(cell.getValue().name));
  colName.setCellFactory(cell -> new TableCell<MethodNode,String>(){
    @Override protected void updateItem(    String name,    boolean empty){
      super.updateItem(name,empty);
      if (empty || name == null) {
        setGraphic(null);
      }
 else {
        setGraphic(FormatFactory.name(name));
      }
    }
  }
);
  colName.setComparator(Comparator.comparing(String::toString));
  colRet.setCellValueFactory(cell -> JavaFX.observable(Type.getType(cell.getValue().desc).getReturnType()));
  colRet.setCellFactory(cell -> new TableCell<MethodNode,Type>(){
    @Override protected void updateItem(    Type type,    boolean empty){
      super.updateItem(type,empty);
      if (empty || type == null) {
        setGraphic(null);
      }
 else {
        setGraphic(FormatFactory.type(type));
      }
    }
  }
);
  colRet.setComparator(Comparator.comparing(Type::toString));
  colRet.setComparator(new Comparator<Type>(){
    @Override public int compare(    Type o1,    Type o2){
      String s1=Misc.filter(o1);
      String s2=Misc.filter(o2);
      return Comparator.comparing(String::toString).compare(s1,s2);
    }
  }
);
  colArgs.setCellValueFactory(cell -> JavaFX.observable(Type.getType(cell.getValue().desc).getArgumentTypes()));
  colArgs.setCellFactory(cell -> new TableCell<MethodNode,Type[]>(){
    @Override protected void updateItem(    Type[] types,    boolean empty){
      super.updateItem(types,empty);
      if (empty || types == null || types.length == 0) {
        setGraphic(null);
      }
 else {
        setGraphic(FormatFactory.typeArray(types));
      }
    }
  }
);
  colArgs.setComparator(new Comparator<Type[]>(){
    @Override public int compare(    Type[] o1,    Type[] o2){
      int len=Math.min(o1.length,o2.length);
      for (int i=0; i < len; i++) {
        int c=Comparator.comparing(String::toString).compare(Misc.filter(o1[i]),Misc.filter(o2[i]));
        if (c != 0) {
          return c;
        }
      }
      if (o1.length == o2.length) {
        return 0;
      }
      return o1.length < o2.length ? -1 : 1;
    }
  }
);
  setItems(FXCollections.observableArrayList(methods));
  ContextMenu ctxBase=new ContextMenu();
  ContextMenu ctx=new ContextMenu();
  ctxBase.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=new MethodNode(0,""String_Node_Str"",""String_Node_Str"",null,null);
    methods.add(mn);
    getItems().add(mn);
  }
));
  setContextMenu(ctxBase);
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=getSelectionModel().getSelectedItem();
    Bus.INSTANCE.post(new InsnOpenEvent(owner,mn,null));
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=getSelectionModel().getSelectedItem();
    DecompileItem decomp=new DecompileItem(owner,mn);
    decomp.decompile();
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=getSelectionModel().getSelectedItem();
    FxSearch.open(Parameter.references(owner.name,mn.name,mn.desc));
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode mn=new MethodNode(0,""String_Node_Str"",""String_Node_Str"",null,null);
    methods.add(mn);
    getItems().add(mn);
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    int i=getSelectionModel().getSelectedIndex();
    methods.remove(i);
    getItems().remove(i);
  }
));
  ctx.getItems().add(new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    MethodNode sel=getSelectionModel().getSelectedItem();
    String[] exceptions=sel.exceptions.toArray(new String[sel.exceptions.size()]);
    MethodNode copy=new MethodNode(sel.access,sel.name + ""String_Node_Str"",sel.desc,sel.signature,exceptions);
    sel.accept(copy);
    methods.add(copy);
    getItems().add(copy);
  }
));
  getSelectionModel().selectedIndexProperty().addListener((c) -> {
    setContextMenu(getSelectionModel().getSelectedIndex() == -1 ? null : ctx);
  }
);
  getItems().addListener((  ListChangeListener.Change<? extends MethodNode> c) -> {
    Bus.INSTANCE.post(new ClassDirtyEvent(owner));
  }
);
}",0.9931380753138076
170730,"private Map<String,ActionMenuItem> createActionMap(AbstractInsnNode ain,int x,int y){
  ActionMenuItem itemEdit=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> createEdit(ain,x,y));
  ActionMenuItem itemNewBefore=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new OpcodeCreationBox(true,list,method,ain)));
  ActionMenuItem itemNewAfter=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new OpcodeCreationBox(false,list,method,ain)));
  ActionMenuItem itemUp=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    Asm.moveUp(list.getMethod().instructions,list.getSelectedValuesList());
    list.repopulate();
  }
);
  ActionMenuItem itemDown=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    Asm.moveDown(list.getMethod().instructions,list.getSelectedValuesList());
    list.repopulate();
  }
);
  ActionMenuItem itemSave=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new BlockSaveBox(list.getSelectedValuesList())));
  ActionMenuItem itemInsert=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new BlockInsertBox(method.instructions,list)));
  ActionMenuItem itemRemove=new ActionMenuItem(Lang.get(""String_Node_Str""),(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (recaf.configs.ui.confirmDeletions) {
        int dialogResult=JOptionPane.showConfirmDialog(null,Lang.get(""String_Node_Str""),Lang.get(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
        if (dialogResult != JOptionPane.YES_OPTION) {
          return;
        }
      }
      DefaultListModel<AbstractInsnNode> model=(DefaultListModel<AbstractInsnNode>)list.getModel();
      int[] ascending=list.getSelectedIndices();
      if (ascending.length > 1) {
        List<Range> ranges=new ArrayList<>();
        int startIndex=ascending[0], lastIndex=-1;
        for (int i=1; i < ascending.length; i++) {
          int currentIndex=ascending[i];
          if (lastIndex - currentIndex != -1) {
            ranges.add(new Range(startIndex,ascending[i - 1]));
            startIndex=currentIndex;
          }
          lastIndex=currentIndex;
        }
        ranges.add(new Range(startIndex,lastIndex));
        Collections.sort(ranges);
        for (        Range range : ranges) {
          model.removeRange(range.start,range.end);
          AbstractInsnNode insnStart=method.instructions.get(range.start);
          AbstractInsnNode insnEnd=method.instructions.get(range.end);
          link(insnStart,insnEnd);
        }
        setSize(model.size());
      }
 else {
        model.remove(list.getSelectedIndex());
        method.instructions.remove(ain);
      }
    }
    /** 
 * Links two given insns together via their linked list's previous and next values.
 * @param insnStart
 * @param insnEnd
 */
    private void link(    AbstractInsnNode insnStart,    AbstractInsnNode insnEnd){
      try {
        boolean first=method.instructions.getFirst().equals(insnStart);
        Field next=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
        Field prev=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
        next.setAccessible(true);
        prev.setAccessible(true);
        if (first) {
          Field listStart=InsnList.class.getDeclaredField(""String_Node_Str"");
          listStart.setAccessible(true);
          listStart.set(method.instructions,insnEnd.getNext());
          prev.set(insnEnd.getNext(),null);
        }
 else {
          next.set(insnStart.getPrevious(),insnEnd.getNext());
          prev.set(insnEnd.getNext(),insnStart.getPrevious());
        }
        if (method.instructions instanceof TInsnList) {
          ((TInsnList)method.instructions).setModified();
        }
      }
 catch (      Exception e) {
      }
    }
    /** 
 * Sets the InsnList size through reflection since insns were cut out of the list through reflection and not the given methods. It's ugly but it makes a MASSIVE performance boost to do it this way.
 * @param size New method instructions size.
 */
    private void setSize(    int size){
      try {
        Field f=InsnList.class.getDeclaredField(""String_Node_Str"");
        f.setAccessible(true);
        f.setInt(method.instructions,size);
      }
 catch (      Exception e) {
      }
    }
    /** 
 * Utility class for creating comparable ranges of opcode indices.
 * @author Matt
 */
class Range implements Comparable<Range> {
      int start, end;
      public Range(      int start,      int end){
        this.start=start;
        this.end=end;
      }
      @Override public int compareTo(      Range r){
        if (start > r.start)         return -1;
 else         if (start < r.start)         return 1;
        return 0;
      }
    }
  }
));
  Map<String,ActionMenuItem> actionMap=new HashMap<>();
  if (list.getSelectedIndices().length == 1) {
    actionMap.put(""String_Node_Str"",itemEdit);
    actionMap.put(""String_Node_Str"",itemNewBefore);
    actionMap.put(""String_Node_Str"",itemNewAfter);
    actionMap.put(""String_Node_Str"",itemUp);
    actionMap.put(""String_Node_Str"",itemDown);
    actionMap.put(""String_Node_Str"",itemInsert);
    actionMap.put(""String_Node_Str"",createGotoDef(ain));
    actionMap.put(""String_Node_Str"",createGotoJump(ain));
  }
 else {
    actionMap.put(""String_Node_Str"",itemUp);
    actionMap.put(""String_Node_Str"",itemDown);
    actionMap.put(""String_Node_Str"",itemSave);
    actionMap.put(""String_Node_Str"",itemInsert);
  }
  actionMap.put(""String_Node_Str"",itemRemove);
  return actionMap;
}","private Map<String,ActionMenuItem> createActionMap(AbstractInsnNode ain,int x,int y){
  ActionMenuItem itemEdit=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> createEdit(ain,x,y));
  ActionMenuItem itemNewBefore=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new OpcodeCreationBox(true,list,method,ain)));
  ActionMenuItem itemNewAfter=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new OpcodeCreationBox(false,list,method,ain)));
  ActionMenuItem itemUp=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    Asm.moveUp(list.getMethod().instructions,list.getSelectedValuesList());
    list.repopulate();
  }
);
  ActionMenuItem itemDown=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> {
    Asm.moveDown(list.getMethod().instructions,list.getSelectedValuesList());
    list.repopulate();
  }
);
  ActionMenuItem itemSave=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new BlockSaveBox(list.getSelectedValuesList())));
  ActionMenuItem itemInsert=new ActionMenuItem(Lang.get(""String_Node_Str""),() -> display.addWindow(new BlockInsertBox(method.instructions,list)));
  ActionMenuItem itemRemove=new ActionMenuItem(Lang.get(""String_Node_Str""),(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (recaf.configs.ui.confirmDeletions) {
        int dialogResult=JOptionPane.showConfirmDialog(null,Lang.get(""String_Node_Str""),Lang.get(""String_Node_Str""),JOptionPane.YES_NO_OPTION);
        if (dialogResult != JOptionPane.YES_OPTION) {
          return;
        }
      }
      DefaultListModel<AbstractInsnNode> model=(DefaultListModel<AbstractInsnNode>)list.getModel();
      int[] ascending=list.getSelectedIndices();
      if (ascending.length > 1) {
        List<Range> ranges=new ArrayList<>();
        int startIndex=ascending[0], lastIndex=-1;
        for (int i=1; i < ascending.length; i++) {
          int currentIndex=ascending[i];
          if (lastIndex - currentIndex != -1) {
            ranges.add(new Range(startIndex,ascending[i - 1]));
            startIndex=currentIndex;
          }
          lastIndex=currentIndex;
        }
        ranges.add(new Range(startIndex,lastIndex));
        Collections.sort(ranges);
        for (        Range range : ranges) {
          model.removeRange(range.start,range.end);
          AbstractInsnNode insnStart=method.instructions.get(range.start);
          AbstractInsnNode insnEnd=method.instructions.get(range.end);
          link(insnStart,insnEnd);
        }
        setSize(model.size());
      }
 else {
        model.remove(list.getSelectedIndex());
        method.instructions.remove(ain);
      }
    }
    /** 
 * Links two given insns together via their linked list's previous and next values.
 * @param insnStart
 * @param insnEnd
 */
    private void link(    AbstractInsnNode insnStart,    AbstractInsnNode insnEnd){
      try {
        boolean first=method.instructions.getFirst().equals(insnStart);
        Field next=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
        Field prev=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
        next.setAccessible(true);
        prev.setAccessible(true);
        if (first) {
          Field listStart=InsnList.class.getDeclaredField(""String_Node_Str"");
          listStart.setAccessible(true);
          listStart.set(method.instructions,insnEnd.getNext());
          prev.set(insnEnd.getNext(),null);
        }
 else {
          next.set(insnStart.getPrevious(),insnEnd.getNext());
          prev.set(insnEnd.getNext(),insnStart.getPrevious());
        }
        Field listStart=InsnList.class.getDeclaredField(""String_Node_Str"");
        listStart.setAccessible(true);
        listStart.set(method.instructions,null);
        if (method.instructions instanceof TInsnList) {
          ((TInsnList)method.instructions).setModified();
        }
      }
 catch (      Exception e) {
      }
    }
    /** 
 * Sets the InsnList size through reflection since insns were cut out of the list through reflection and not the given methods. It's ugly but it makes a MASSIVE performance boost to do it this way.
 * @param size New method instructions size.
 */
    private void setSize(    int size){
      try {
        Field f=InsnList.class.getDeclaredField(""String_Node_Str"");
        f.setAccessible(true);
        f.setInt(method.instructions,size);
      }
 catch (      Exception e) {
      }
    }
    /** 
 * Utility class for creating comparable ranges of opcode indices.
 * @author Matt
 */
class Range implements Comparable<Range> {
      int start, end;
      public Range(      int start,      int end){
        this.start=start;
        this.end=end;
      }
      @Override public int compareTo(      Range r){
        if (start > r.start)         return -1;
 else         if (start < r.start)         return 1;
        return 0;
      }
    }
  }
));
  Map<String,ActionMenuItem> actionMap=new HashMap<>();
  if (list.getSelectedIndices().length == 1) {
    actionMap.put(""String_Node_Str"",itemEdit);
    actionMap.put(""String_Node_Str"",itemNewBefore);
    actionMap.put(""String_Node_Str"",itemNewAfter);
    actionMap.put(""String_Node_Str"",itemUp);
    actionMap.put(""String_Node_Str"",itemDown);
    actionMap.put(""String_Node_Str"",itemInsert);
    actionMap.put(""String_Node_Str"",createGotoDef(ain));
    actionMap.put(""String_Node_Str"",createGotoJump(ain));
  }
 else {
    actionMap.put(""String_Node_Str"",itemUp);
    actionMap.put(""String_Node_Str"",itemDown);
    actionMap.put(""String_Node_Str"",itemSave);
    actionMap.put(""String_Node_Str"",itemInsert);
  }
  actionMap.put(""String_Node_Str"",itemRemove);
  return actionMap;
}",0.9854299928926794
170731,"/** 
 * Links two given insns together via their linked list's previous and next values.
 * @param insnStart
 * @param insnEnd
 */
private void link(AbstractInsnNode insnStart,AbstractInsnNode insnEnd){
  try {
    boolean first=method.instructions.getFirst().equals(insnStart);
    Field next=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
    Field prev=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
    next.setAccessible(true);
    prev.setAccessible(true);
    if (first) {
      Field listStart=InsnList.class.getDeclaredField(""String_Node_Str"");
      listStart.setAccessible(true);
      listStart.set(method.instructions,insnEnd.getNext());
      prev.set(insnEnd.getNext(),null);
    }
 else {
      next.set(insnStart.getPrevious(),insnEnd.getNext());
      prev.set(insnEnd.getNext(),insnStart.getPrevious());
    }
    if (method.instructions instanceof TInsnList) {
      ((TInsnList)method.instructions).setModified();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * Links two given insns together via their linked list's previous and next values.
 * @param insnStart
 * @param insnEnd
 */
private void link(AbstractInsnNode insnStart,AbstractInsnNode insnEnd){
  try {
    boolean first=method.instructions.getFirst().equals(insnStart);
    Field next=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
    Field prev=AbstractInsnNode.class.getDeclaredField(""String_Node_Str"");
    next.setAccessible(true);
    prev.setAccessible(true);
    if (first) {
      Field listStart=InsnList.class.getDeclaredField(""String_Node_Str"");
      listStart.setAccessible(true);
      listStart.set(method.instructions,insnEnd.getNext());
      prev.set(insnEnd.getNext(),null);
    }
 else {
      next.set(insnStart.getPrevious(),insnEnd.getNext());
      prev.set(insnEnd.getNext(),insnStart.getPrevious());
    }
    Field listStart=InsnList.class.getDeclaredField(""String_Node_Str"");
    listStart.setAccessible(true);
    listStart.set(method.instructions,null);
    if (method.instructions instanceof TInsnList) {
      ((TInsnList)method.instructions).setModified();
    }
  }
 catch (  Exception e) {
  }
}",0.9294336118848654
170732,"/** 
 * Creates an array of modifable loaded classes.
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static Class[] getModifable(){
  Set<Class> set=new HashSet<>();
  for (  Class clazz : instrument.getAllLoadedClasses()) {
    if (valid(clazz.getName()) && instrument.isModifiableClass(clazz)) {
      set.add(clazz);
    }
  }
  return set.toArray(new Class[set.size()]);
}","/** 
 * Creates an array of modifable loaded classes.
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private static Class[] getModifable(){
  Set<Class> set=new HashSet<>();
  for (  Class clazz : instrument.getAllLoadedClasses()) {
    if (clazz.isArray() || clazz.isPrimitive() || clazz.isSynthetic()) {
      continue;
    }
    if (valid(clazz.getName()) && instrument.isModifiableClass(clazz)) {
      set.add(clazz);
    }
  }
  return set.toArray(new Class[set.size()]);
}",0.8911798396334479
170733,"/** 
 * Get node via its internal class name.
 * @param name
 * @return
 * @throws IOException
 */
private static ClassNode getNode(String name) throws IOException {
  byte[] bytes=classes.get(name);
  if (bytes == null) {
    return null;
  }
  return Asm.getNode(bytes);
}","/** 
 * Get node via its class.
 * @param clazz
 * @return
 * @throws IOException
 */
public static ClassNode getNode(Class<?> clazz) throws IOException {
  String name=clazz.getName().replace(""String_Node_Str"",""String_Node_Str"");
  byte[] bytes=classes.get(name);
  if (bytes == null) {
    InputStream is=clazz.getResourceAsStream(""String_Node_Str"" + clazz.getName().replace('.','/') + ""String_Node_Str"");
    if (is == null) {
      return null;
    }
    bytes=Streams.from(is);
  }
  return Asm.getNode(bytes);
}",0.515802781289507
170734,"/** 
 * Retrieve the map of ClassNodes using   {@link #instrument}.
 * @return Map of JVM classes.
 * @throws IOException Thrown if classes could not be read.
 */
@SuppressWarnings(""String_Node_Str"") public static Map<String,ClassNode> getNodesViaInst(){
  Map<String,ClassNode> map=new HashMap<>();
  for (  Class clazz : instrument.getAllLoadedClasses()) {
    try {
      ClassNode node=getNode(clazz.getName().replace(""String_Node_Str"",""String_Node_Str""));
      if (node != null) {
        map.put(node.name,node);
        Recaf.INSTANCE.logging.fine(""String_Node_Str"" + node.name,1);
      }
    }
 catch (    Exception e) {
      Recaf.INSTANCE.logging.fine(""String_Node_Str"" + clazz.getName().replace(""String_Node_Str"",""String_Node_Str""),1);
      Recaf.INSTANCE.logging.error(e,false);
    }
  }
  return map;
}","/** 
 * Retrieve the map of ClassNodes using   {@link #instrument}.
 * @return Map of JVM classes.
 * @throws IOException Thrown if classes could not be read.
 */
@SuppressWarnings(""String_Node_Str"") public static Map<String,ClassNode> getNodesViaInst(){
  Map<String,ClassNode> map=new HashMap<>();
  for (  Class clazz : instrument.getAllLoadedClasses()) {
    try {
      String name=clazz.getName().replace(""String_Node_Str"",""String_Node_Str"");
      if (!valid(name)) {
        continue;
      }
      ClassNode node=getNode(clazz);
      if (node != null) {
        map.put(node.name,node);
        Recaf.INSTANCE.logging.fine(""String_Node_Str"" + node.name,1);
      }
    }
 catch (    Exception e) {
      Recaf.INSTANCE.logging.fine(""String_Node_Str"" + clazz.getName().replace(""String_Node_Str"",""String_Node_Str""));
      Recaf.INSTANCE.logging.error(e,false);
    }
  }
  return map;
}",0.9294460641399416
170735,"/** 
 * Add class to map and current class tree if recaf's UI is already open.
 * @param name
 * @param bytes
 */
public static void addClass(String name,byte[] bytes){
  classes.put(name,bytes);
  Recaf rc=Recaf.INSTANCE;
  if (rc.ui != null) {
    try {
      rc.jarData.classes.put(name,getNode(name));
      if (rc.configs.agent.autoRefresh) {
        rc.ui.refreshTree();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Add class to map and current class tree if recaf's UI is already open.
 * @param name
 * @param bytes
 */
public static void addClass(String name,byte[] bytes){
  classes.put(name,bytes);
  Recaf rc=Recaf.INSTANCE;
  try {
    ClassNode cn=getNode(name.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    if (cn == null) {
      return;
    }
    if (rc.jarData == null) {
      rc.logging.info(""String_Node_Str"" + name);
    }
 else {
      rc.jarData.classes.put(name,cn);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (rc.ui != null && valid(name) && rc.configs.agent.autoRefresh) {
    rc.ui.refreshTree();
  }
}",0.4804177545691906
170736,"public TrackingClassNode(){
  super(Opcodes.ASM6);
}","public TrackingClassNode(){
  super(Opcodes.ASM5);
}",0.9807692307692308
170737,"public TrackingMethodNode(TrackingClassNode clazz,int access,String name,String desc,String signature,String[] exceptions){
  super(Opcodes.ASM6,access,name,desc,signature,exceptions);
  this.clazz=clazz;
  this.instructions=new TrackingInsnList(this);
}","public TrackingMethodNode(TrackingClassNode clazz,int access,String name,String desc,String signature,String[] exceptions){
  super(Opcodes.ASM5,access,name,desc,signature,exceptions);
  this.clazz=clazz;
  this.instructions=new TrackingInsnList(this);
}",0.9960629921259844
170738,"@Override protected String getCommonSuperClass(String type1,String type2){
  if (type1 == null || type2 == null) {
    return DEFAULT_PARENT;
  }
  ClassNode node1=loadNode(type1);
  ClassNode node2=loadNode(type2);
  if (node1 == null || node2 == null) {
    return DEFAULT_PARENT;
  }
 else   if (isAssignableFrom(node1,node2)) {
    return type1;
  }
 else   if (isAssignableFrom(node2,node1)) {
    return type2;
  }
  do {
    node1=loadNode(node1.superName);
    if (node1 == null) {
      if (node2.name.equals(type1)) {
        return DEFAULT_PARENT;
      }
      node1=loadNode(type2);
      node2=loadNode(type1);
    }
 else     if (isAssignableFrom(node1,node2)) {
      return type1;
    }
 else     if (isAssignableFrom(node2,node1)) {
      return type2;
    }
  }
 while (!isAssignableFrom(node1,node2));
  return DEFAULT_PARENT;
}","@Override protected String getCommonSuperClass(String type1,String type2){
  if (type1 == null || type2 == null) {
    return DEFAULT_PARENT;
  }
  ClassNode node1=loadNode(type1);
  ClassNode node2=loadNode(type2);
  if (node1 == null || node2 == null) {
    return DEFAULT_PARENT;
  }
 else   if (isAssignableFrom(node1,node2)) {
    return type1;
  }
 else   if (isAssignableFrom(node2,node1)) {
    return type2;
  }
  do {
    node1=loadNode(node1.superName);
    if (node1 == null) {
      if (node2.name.equals(type1)) {
        return DEFAULT_PARENT;
      }
      node1=loadNode(type2);
      node2=loadNode(type1);
    }
 else     if (isAssignableFrom(node1,node2)) {
      return node1.name;
    }
 else     if (isAssignableFrom(node2,node1)) {
      return node2.name;
    }
  }
 while (!isAssignableFrom(node1,node2));
  return DEFAULT_PARENT;
}",0.9824150058616647
170739,"/** 
 * Reads the bytes from the inputstream into a byte array.
 * @param is InputStream to read from.
 * @return byt earray representation of the input stream.
 * @throws IOException Thrown if the given input stream cannot be read from.
 */
public static byte[] fromStream(InputStream is) throws IOException {
  try (ByteArrayOutputStream buffer=new ByteArrayOutputStream()){
    int r;
    byte[] data=new byte[BUFF_SIZE];
    while ((r=is.read(data,0,data.length)) != -1) {
      buffer.write(data,0,r);
    }
    buffer.flush();
    return buffer.toByteArray();
  }
 }","/** 
 * Reads the bytes from the inputstream into a byte array.
 * @param is InputStream to read from.
 * @return byte array representation of the input stream.
 * @throws IOException Thrown if the given input stream cannot be read from.
 */
public static byte[] fromStream(InputStream is) throws IOException {
  try (ByteArrayOutputStream buffer=new ByteArrayOutputStream()){
    int r;
    byte[] data=new byte[BUFF_SIZE];
    while ((r=is.read(data,0,data.length)) != -1) {
      buffer.write(data,0,r);
    }
    buffer.flush();
    return buffer.toByteArray();
  }
 }",0.9965034965034965
170740,"/** 
 * Save current settings to configuration.
 */
public void save(){
  try {
    if (!optionsFile.exists()) {
      optionsFile.createNewFile();
    }
    JsonObject json=Json.object();
    for (    Field field : Options.class.getDeclaredFields()) {
      field.setAccessible(true);
      String name=field.getName();
      Object value=field.get(this);
      if (value instanceof Boolean) {
        json.set(name,(boolean)value);
      }
 else       if (value instanceof Integer) {
        json.set(name,(int)value);
      }
 else       if (value instanceof String) {
        json.set(name,(String)value);
      }
    }
    StringWriter w=new StringWriter();
    json.writeTo(w,WriterConfig.PRETTY_PRINT);
    Misc.writeFile(optionsFile.getAbsolutePath(),w.toString());
  }
 catch (  Exception e) {
    e.getMessage();
  }
}","/** 
 * Save current settings to configuration.
 */
public void save(){
  try {
    if (!optionsFile.exists() && !optionsFile.createNewFile()) {
      return;
    }
    JsonObject json=Json.object();
    for (    Field field : Options.class.getDeclaredFields()) {
      field.setAccessible(true);
      String name=field.getName();
      Object value=field.get(this);
      if (value instanceof Boolean) {
        json.set(name,(boolean)value);
      }
 else       if (value instanceof Integer) {
        json.set(name,(int)value);
      }
 else       if (value instanceof String) {
        json.set(name,(String)value);
      }
    }
    StringWriter w=new StringWriter();
    json.writeTo(w,WriterConfig.PRETTY_PRINT);
    Misc.writeFile(optionsFile.getAbsolutePath(),w.toString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9677033492822966
170741,"/** 
 * Reads the classes of the given jar into a map.
 * @param jarPath Path to jarfile to read classes from.
 * @return Map of classes from the given jarfile.
 * @throws IOException If an exception was encountered while reading the jarfile.
 */
public Map<String,ClassNode> readClasses(String jarPath) throws IOException {
  Map<String,ClassNode> map=new HashMap<>();
  try (ZipFile file=new ZipFile(jarPath)){
    Enumeration<? extends ZipEntry> entries=file.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=entries.nextElement();
      if (entry.isDirectory() || !entry.getName().endsWith(""String_Node_Str"")) {
        continue;
      }
      String name=null;
      try (InputStream is=file.getInputStream(entry)){
        ClassReader cr=new PluginClassReader(is);
        name=cr.getClassName();
        map.put(cr.getClassName(),getNode(cr));
      }
 catch (      IndexOutOfBoundsException ioobe) {
        if (name == null) {
          recaf.window.displayError(new RuntimeException(""String_Node_Str"" + entry.getName(),ioobe));
        }
 else {
          recaf.window.displayError(new RuntimeException(""String_Node_Str"" + name,ioobe));
        }
      }
    }
  }
   return map;
}","/** 
 * Reads the classes of the given jar into a map.
 * @param jarPath Path to jarfile to read classes from.
 * @return Map of classes from the given jarfile.
 * @throws IOException If an exception was encountered while reading the jarfile.
 */
public Map<String,ClassNode> readClasses(String jarPath) throws IOException {
  Map<String,ClassNode> map=new HashMap<>();
  try (ZipFile file=new ZipFile(jarPath)){
    Enumeration<? extends ZipEntry> entries=file.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=entries.nextElement();
      if (entry.isDirectory() || !entry.getName().endsWith(""String_Node_Str"")) {
        continue;
      }
      String name=null;
      try (InputStream is=file.getInputStream(entry)){
        ClassReader cr=new PluginClassReader(is);
        name=cr.getClassName();
        map.put(cr.getClassName(),getNode(cr));
      }
 catch (      IndexOutOfBoundsException ioobe) {
        if (name == null) {
          recaf.gui.displayError(new RuntimeException(""String_Node_Str"" + entry.getName(),ioobe));
        }
 else {
          recaf.gui.displayError(new RuntimeException(""String_Node_Str"" + name,ioobe));
        }
      }
    }
  }
   return map;
}",0.9925619834710744
170742,"public void save(File jar) throws IOException {
  try (JarOutputStream output=new JarOutputStream(new FileOutputStream(jar))){
    for (    String name : classes.keySet()) {
      byte[] data=recaf.asm.toBytes(classes.get(name));
      output.putNextEntry(new JarEntry(name.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
      output.write(data);
      output.closeEntry();
    }
    for (    String name : resources.keySet()) {
      output.putNextEntry(new JarEntry(name));
      output.write(resources.get(name));
      output.closeEntry();
    }
  }
 }","public void save(File jar) throws IOException {
  try (JarOutputStream output=new JarOutputStream(new FileOutputStream(jar))){
    for (    Entry<String,ClassNode> entry : classes.entrySet()) {
      byte[] data=recaf.asm.toBytes(entry.getValue());
      output.putNextEntry(new JarEntry(entry.getKey().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
      output.write(data);
      output.closeEntry();
    }
    for (    Entry<String,byte[]> entry : resources.entrySet()) {
      output.putNextEntry(new JarEntry(entry.getKey()));
      output.write(entry.getValue());
      output.closeEntry();
    }
  }
 }",0.8434134217067109
170743,"/** 
 * Load node from the node map.
 * @param type
 * @return
 */
private ClassNode loadNode(String type){
  if (type == null) {
    return null;
  }
 else   if (nodes.containsKey(type)) {
    return nodes.get(type);
  }
  String nameStr=type.replace(""String_Node_Str"",""String_Node_Str"");
  try {
    Class<?> clazz=Class.forName(nameStr);
    if (clazz == null) {
      return null;
    }
    return recaf.asm.getNode(clazz);
  }
 catch (  IOException e) {
    return null;
  }
catch (  ClassNotFoundException e) {
    return null;
  }
}","/** 
 * Load node from the node map.
 * @param type
 * @return
 */
private ClassNode loadNode(String type){
  if (type == null) {
    return null;
  }
 else   if (nodes.containsKey(type)) {
    return nodes.get(type);
  }
  String nameStr=type.replace(""String_Node_Str"",""String_Node_Str"");
  try {
    Class<?> clazz=Class.forName(nameStr);
    if (clazz != null) {
      return recaf.asm.getNode(clazz);
    }
  }
 catch (  ClassNotFoundException|IOException e) {
    e.printStackTrace();
  }
  return null;
}",0.8503336510962822
170744,"@Override public void onClick(View v){
  if (blog.getBlogUrl() != null) {
    Intent intent=new Intent();
    intent.setAction(Intent.ACTION_VIEW);
    intent.addCategory(Intent.CATEGORY_BROWSABLE);
    intent.setData(Uri.parse(blog.getBlogUrl()));
    itemView.getContext().startActivity(intent);
  }
}","@Override public void onClick(View v){
  if (blog.getBlogUrl() != null) {
    try {
      Intent intent=new Intent();
      intent.setAction(Intent.ACTION_VIEW);
      intent.addCategory(Intent.CATEGORY_BROWSABLE);
      intent.setData(Uri.parse(blog.getBlogUrl()));
      itemView.getContext().startActivity(intent);
    }
 catch (    Exception e) {
      AppLogger.d(""String_Node_Str"");
    }
  }
}",0.8620199146514936
170745,"public void onBind(int position){
  super.onBind(position);
  final BlogResponse.Blog blog=mBlogResponseList.get(position);
  if (blog.getCoverImgUrl() != null) {
    Glide.with(itemView.getContext()).load(blog.getCoverImgUrl()).asBitmap().centerCrop().into(coverImageView);
  }
  if (blog.getTitle() != null) {
    titleTextView.setText(blog.getTitle());
  }
  if (blog.getAuthor() != null) {
    authorTextView.setText(blog.getAuthor());
  }
  if (blog.getDate() != null) {
    dateTextView.setText(blog.getDate());
  }
  if (blog.getDescription() != null) {
    contentTextView.setText(blog.getDescription());
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (blog.getBlogUrl() != null) {
        Intent intent=new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        intent.addCategory(Intent.CATEGORY_BROWSABLE);
        intent.setData(Uri.parse(blog.getBlogUrl()));
        itemView.getContext().startActivity(intent);
      }
    }
  }
);
}","public void onBind(int position){
  super.onBind(position);
  final BlogResponse.Blog blog=mBlogResponseList.get(position);
  if (blog.getCoverImgUrl() != null) {
    Glide.with(itemView.getContext()).load(blog.getCoverImgUrl()).asBitmap().centerCrop().into(coverImageView);
  }
  if (blog.getTitle() != null) {
    titleTextView.setText(blog.getTitle());
  }
  if (blog.getAuthor() != null) {
    authorTextView.setText(blog.getAuthor());
  }
  if (blog.getDate() != null) {
    dateTextView.setText(blog.getDate());
  }
  if (blog.getDescription() != null) {
    contentTextView.setText(blog.getDescription());
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (blog.getBlogUrl() != null) {
        try {
          Intent intent=new Intent();
          intent.setAction(Intent.ACTION_VIEW);
          intent.addCategory(Intent.CATEGORY_BROWSABLE);
          intent.setData(Uri.parse(blog.getBlogUrl()));
          itemView.getContext().startActivity(intent);
        }
 catch (        Exception e) {
          AppLogger.d(""String_Node_Str"");
        }
      }
    }
  }
);
}",0.943344081068632
170746,"private void init(Context context,AttributeSet attributeSet){
  try {
    buttonSpacing=(int)DimensionUtils.convertDpToPixel(16,context);
    labelsMargin=getResources().getDimensionPixelSize(R.dimen.fab_labels_margin);
    labelsVerticalOffset=(int)DimensionUtils.convertDpToPixel(-1.5f,context);
    touchDelegateGroup=new TouchDelegateGroup(this);
    setTouchDelegate(touchDelegateGroup);
    TypedArray attr=context.obtainStyledAttributes(attributeSet,R.styleable.FABsMenu,0,0);
    menuMargins=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuMargins,0);
    menuTopMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuTopMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuBottomMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuBottomMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuRightMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuRightMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuLeftMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuLeftMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuButtonIcon=attr.getDrawable(R.styleable.FABsMenu_fab_moreButtonPlusIcon);
    menuButtonColor=attr.getColor(R.styleable.FABsMenu_fab_moreButtonBackgroundColor,getColor(android.R.color.holo_blue_dark));
    menuButtonRippleColor=attr.getColor(R.styleable.FABsMenu_fab_moreButtonRippleColor,getColor(android.R.color.holo_blue_light));
    menuButtonSize=attr.getInt(R.styleable.FABsMenu_fab_moreButtonSize,TitleFAB.SIZE_NORMAL);
    expandDirection=attr.getInt(R.styleable.FABsMenu_fab_expandDirection,EXPAND_UP);
    labelsPosition=attr.getInt(R.styleable.FABsMenu_fab_labelsPosition,LABELS_ON_LEFT_SIDE);
    attr.recycle();
    if (menuListener == null) {
      setMenuListener(new FABsMenuListener(){
      }
);
    }
    createAddButton(context);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void init(Context context,AttributeSet attributeSet){
  try {
    buttonSpacing=(int)DimensionUtils.convertDpToPixel(16,context);
    labelsMargin=getResources().getDimensionPixelSize(R.dimen.fab_labels_margin);
    labelsVerticalOffset=(int)DimensionUtils.convertDpToPixel(-1.5f,context);
    touchDelegateGroup=new TouchDelegateGroup(this);
    setTouchDelegate(touchDelegateGroup);
    TypedArray attr=context.obtainStyledAttributes(attributeSet,R.styleable.FABsMenu,0,0);
    menuMargins=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuMargins,0);
    menuTopMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuTopMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuBottomMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuBottomMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuRightMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuRightMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuLeftMargin=attr.getDimensionPixelSize(R.styleable.FABsMenu_fab_menuLeftMargin,menuMargins != 0 ? menuMargins : (int)DimensionUtils.convertDpToPixel(16,context));
    menuButtonIcon=attr.getDrawable(R.styleable.FABsMenu_fab_moreButtonPlusIcon);
    menuButtonColor=attr.getColor(R.styleable.FABsMenu_fab_moreButtonBackgroundColor,getColor(android.R.color.holo_blue_dark));
    menuButtonRippleColor=attr.getColor(R.styleable.FABsMenu_fab_moreButtonRippleColor,getColor(android.R.color.holo_blue_light));
    menuButtonSize=attr.getInt(R.styleable.FABsMenu_fab_moreButtonSize,TitleFAB.SIZE_NORMAL);
    expandDirection=attr.getInt(R.styleable.FABsMenu_fab_expandDirection,EXPAND_UP);
    labelsPosition=attr.getInt(R.styleable.FABsMenu_fab_labelsPosition,isRtl() ? LABELS_ON_RIGHT_SIDE : LABELS_ON_LEFT_SIDE);
    attr.recycle();
    if (menuListener == null) {
      setMenuListener(new FABsMenuListener(){
      }
);
    }
    createAddButton(context);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9920882282426275
170747,"@SuppressLint(""String_Node_Str"") @Override protected void onLayout(boolean changed,int l,int t,int r,int b){
switch (expandDirection) {
case EXPAND_UP:
case EXPAND_DOWN:
    boolean expandUp=expandDirection == EXPAND_UP;
  touchDelegateGroup.clearTouchDelegates();
int addButtonY=expandUp ? b - t - menuButton.getMeasuredHeight() : 0;
if (expandUp) addButtonY-=menuBottomMargin;
 else addButtonY+=menuTopMargin;
int buttonsHorizontalCenter=labelsPosition == LABELS_ON_LEFT_SIDE ? r - l - maxButtonWidth / 2 : maxButtonWidth / 2;
buttonsHorizontalCenter-=labelsPosition == LABELS_ON_LEFT_SIDE ? menuRightMargin : menuLeftMargin;
int addButtonLeft=buttonsHorizontalCenter - menuButton.getMeasuredWidth() / 2;
menuButton.layout(addButtonLeft,addButtonY,addButtonLeft + menuButton.getMeasuredWidth(),addButtonY + menuButton.getMeasuredHeight());
int labelsOffset=maxButtonWidth / 2 + labelsMargin;
int labelsXNearButton=labelsPosition == LABELS_ON_LEFT_SIDE ? buttonsHorizontalCenter - labelsOffset : buttonsHorizontalCenter + labelsOffset;
int nextY=expandUp ? addButtonY - buttonSpacing : addButtonY + menuButton.getMeasuredHeight() + buttonSpacing;
for (int i=buttonsCount - 1; i >= 0; i--) {
final View child=getChildAt(i);
if (child == menuButton || child.getVisibility() == GONE) continue;
int childX=buttonsHorizontalCenter - child.getMeasuredWidth() / 2;
int childY=expandUp ? nextY - child.getMeasuredHeight() : nextY;
child.layout(childX,childY,childX + child.getMeasuredWidth(),childY + child.getMeasuredHeight());
float collapsedTranslation=addButtonY - childY;
float expandedTranslation=0f;
child.setTranslationY(expanded ? expandedTranslation : collapsedTranslation);
child.setAlpha(expanded ? 1f : 0f);
LayoutParams params=(LayoutParams)child.getLayoutParams();
params.mCollapseDir.setFloatValues(expandedTranslation,collapsedTranslation);
params.mExpandDir.setFloatValues(collapsedTranslation,expandedTranslation);
params.setAnimationsTarget(child);
View label=(View)child.getTag(R.id.fab_label);
if (label != null) {
int labelXAwayFromButton=labelsPosition == LABELS_ON_LEFT_SIDE ? labelsXNearButton - label.getMeasuredWidth() : labelsXNearButton + label.getMeasuredWidth();
int labelLeft=labelsPosition == LABELS_ON_LEFT_SIDE ? labelXAwayFromButton : labelsXNearButton;
int labelRight=labelsPosition == LABELS_ON_LEFT_SIDE ? labelsXNearButton : labelXAwayFromButton;
int labelTop=childY - labelsVerticalOffset + (child.getMeasuredHeight() - label.getMeasuredHeight()) / 2;
label.layout(labelLeft,labelTop,labelRight,labelTop + label.getMeasuredHeight());
Rect touchArea=new Rect(Math.min(childX,labelLeft),childY - buttonSpacing / 2,Math.max(childX + child.getMeasuredWidth(),labelRight),childY + child.getMeasuredHeight() + buttonSpacing / 2);
touchDelegateGroup.addTouchDelegate(new TouchDelegate(touchArea,child));
label.setTranslationY(expanded ? expandedTranslation : collapsedTranslation);
label.setAlpha(expanded ? 1f : 0f);
LayoutParams labelParams=(LayoutParams)label.getLayoutParams();
labelParams.mCollapseDir.setFloatValues(expandedTranslation,collapsedTranslation);
labelParams.mExpandDir.setFloatValues(collapsedTranslation,expandedTranslation);
labelParams.setAnimationsTarget(label);
}
nextY=expandUp ? childY - buttonSpacing : childY + child.getMeasuredHeight() + buttonSpacing;
}
break;
case EXPAND_LEFT:
case EXPAND_RIGHT:
boolean expandLeft=expandDirection == EXPAND_LEFT;
int addButtonX=expandLeft ? r - l - menuButton.getMeasuredWidth() : 0;
if (expandLeft) addButtonX-=menuRightMargin;
 else addButtonX+=menuLeftMargin;
int addButtonTop=b - t - maxButtonHeight + (maxButtonHeight - menuButton.getMeasuredHeight()) / 2;
addButtonTop-=menuBottomMargin;
menuButton.layout(addButtonX,addButtonTop,addButtonX + menuButton.getMeasuredWidth(),addButtonTop + menuButton.getMeasuredHeight());
int nextX=expandLeft ? addButtonX - buttonSpacing : addButtonX + menuButton.getMeasuredWidth() + buttonSpacing;
for (int i=buttonsCount - 1; i >= 0; i--) {
final View child=getChildAt(i);
if (child == menuButton || child.getVisibility() == GONE) continue;
int childX=expandLeft ? nextX - child.getMeasuredWidth() : nextX;
int childY=addButtonTop + (menuButton.getMeasuredHeight() - child.getMeasuredHeight()) / 2;
child.layout(childX,childY,childX + child.getMeasuredWidth(),childY + child.getMeasuredHeight());
float collapsedTranslation=addButtonX - childX;
float expandedTranslation=0f;
child.setTranslationX(expanded ? expandedTranslation : collapsedTranslation);
child.setAlpha(expanded ? 1f : 0f);
LayoutParams params=(LayoutParams)child.getLayoutParams();
params.mCollapseDir.setFloatValues(expandedTranslation,collapsedTranslation);
params.mExpandDir.setFloatValues(collapsedTranslation,expandedTranslation);
params.setAnimationsTarget(child);
nextX=expandLeft ? childX - buttonSpacing : childX + child.getMeasuredWidth() + buttonSpacing;
}
break;
}
}","@SuppressLint(""String_Node_Str"") @Override protected void onLayout(boolean changed,int l,int t,int r,int b){
switch (expandDirection) {
case EXPAND_UP:
case EXPAND_DOWN:
    boolean expandUp=expandDirection == EXPAND_UP;
  touchDelegateGroup.clearTouchDelegates();
int addButtonY=expandUp ? b - t - menuButton.getMeasuredHeight() : 0;
if (expandUp) addButtonY-=menuBottomMargin;
 else addButtonY+=menuTopMargin;
int buttonsHorizontalCenter=labelsPosition == LABELS_ON_LEFT_SIDE ? r - l - maxButtonWidth / 2 : maxButtonWidth / 2;
buttonsHorizontalCenter-=labelsPosition == LABELS_ON_LEFT_SIDE ? menuRightMargin : -menuLeftMargin;
int addButtonLeft=buttonsHorizontalCenter - menuButton.getMeasuredWidth() / 2;
menuButton.layout(addButtonLeft,addButtonY,addButtonLeft + menuButton.getMeasuredWidth(),addButtonY + menuButton.getMeasuredHeight());
int labelsOffset=maxButtonWidth / 2 + labelsMargin;
int labelsXNearButton=labelsPosition == LABELS_ON_LEFT_SIDE ? buttonsHorizontalCenter - labelsOffset : buttonsHorizontalCenter + labelsOffset;
int nextY=expandUp ? addButtonY - buttonSpacing : addButtonY + menuButton.getMeasuredHeight() + buttonSpacing;
for (int i=buttonsCount - 1; i >= 0; i--) {
final View child=getChildAt(i);
if (child == menuButton || child.getVisibility() == GONE) continue;
int childX=buttonsHorizontalCenter - child.getMeasuredWidth() / 2;
int childY=expandUp ? nextY - child.getMeasuredHeight() : nextY;
child.layout(childX,childY,childX + child.getMeasuredWidth(),childY + child.getMeasuredHeight());
float collapsedTranslation=addButtonY - childY;
float expandedTranslation=0f;
child.setTranslationY(expanded ? expandedTranslation : collapsedTranslation);
child.setAlpha(expanded ? 1f : 0f);
LayoutParams params=(LayoutParams)child.getLayoutParams();
params.mCollapseDir.setFloatValues(expandedTranslation,collapsedTranslation);
params.mExpandDir.setFloatValues(collapsedTranslation,expandedTranslation);
params.setAnimationsTarget(child);
View label=(View)child.getTag(R.id.fab_label);
if (label != null) {
int labelXAwayFromButton=labelsPosition == LABELS_ON_LEFT_SIDE ? labelsXNearButton - label.getMeasuredWidth() : labelsXNearButton + label.getMeasuredWidth();
int labelLeft=labelsPosition == LABELS_ON_LEFT_SIDE ? labelXAwayFromButton : labelsXNearButton;
int labelRight=labelsPosition == LABELS_ON_LEFT_SIDE ? labelsXNearButton : labelXAwayFromButton;
int labelTop=childY - labelsVerticalOffset + (child.getMeasuredHeight() - label.getMeasuredHeight()) / 2;
label.layout(labelLeft,labelTop,labelRight,labelTop + label.getMeasuredHeight());
Rect touchArea=new Rect(Math.min(childX,labelLeft),childY - buttonSpacing / 2,Math.max(childX + child.getMeasuredWidth(),labelRight),childY + child.getMeasuredHeight() + buttonSpacing / 2);
touchDelegateGroup.addTouchDelegate(new TouchDelegate(touchArea,child));
label.setTranslationY(expanded ? expandedTranslation : collapsedTranslation);
label.setAlpha(expanded ? 1f : 0f);
LayoutParams labelParams=(LayoutParams)label.getLayoutParams();
labelParams.mCollapseDir.setFloatValues(expandedTranslation,collapsedTranslation);
labelParams.mExpandDir.setFloatValues(collapsedTranslation,expandedTranslation);
labelParams.setAnimationsTarget(label);
}
nextY=expandUp ? childY - buttonSpacing : childY + child.getMeasuredHeight() + buttonSpacing;
}
break;
case EXPAND_LEFT:
case EXPAND_RIGHT:
boolean expandLeft=expandDirection == EXPAND_LEFT;
int addButtonX=expandLeft ? r - l - menuButton.getMeasuredWidth() : 0;
if (expandLeft) addButtonX-=menuRightMargin;
 else addButtonX+=menuLeftMargin;
int addButtonTop=b - t - maxButtonHeight + (maxButtonHeight - menuButton.getMeasuredHeight()) / 2;
addButtonTop-=menuBottomMargin;
menuButton.layout(addButtonX,addButtonTop,addButtonX + menuButton.getMeasuredWidth(),addButtonTop + menuButton.getMeasuredHeight());
int nextX=expandLeft ? addButtonX - buttonSpacing : addButtonX + menuButton.getMeasuredWidth() + buttonSpacing;
for (int i=buttonsCount - 1; i >= 0; i--) {
final View child=getChildAt(i);
if (child == menuButton || child.getVisibility() == GONE) continue;
int childX=expandLeft ? nextX - child.getMeasuredWidth() : nextX;
int childY=addButtonTop + (menuButton.getMeasuredHeight() - child.getMeasuredHeight()) / 2;
child.layout(childX,childY,childX + child.getMeasuredWidth(),childY + child.getMeasuredHeight());
float collapsedTranslation=addButtonX - childX;
float expandedTranslation=0f;
child.setTranslationX(expanded ? expandedTranslation : collapsedTranslation);
child.setAlpha(expanded ? 1f : 0f);
LayoutParams params=(LayoutParams)child.getLayoutParams();
params.mCollapseDir.setFloatValues(expandedTranslation,collapsedTranslation);
params.mExpandDir.setFloatValues(collapsedTranslation,expandedTranslation);
params.setAnimationsTarget(child);
nextX=expandLeft ? childX - buttonSpacing : childX + child.getMeasuredWidth() + buttonSpacing;
}
break;
}
}",0.9998975514803812
170748,"@Override public byte[] getMessage(){
  List<ParcelOperationDAO> parcelOperationDaos=overview.retrievedParcelOperations();
  parcelPoolElementDao.operations=parcelOperationDaos;
  String responseBody=new GsonBuilder().create().toJson(parcelPoolElementDao);
  int bodyStart=requestInfo.getBodyOffset();
  byte[] header=Arrays.copyOfRange(content,0,bodyStart);
  return Bytes.concat(header,responseBody.getBytes());
}","@Override public byte[] getMessage(){
  List<ParcelOperationDAO> parcelOperationDaos=overview.retrievedParcelOperations();
  if (isModified()) {
    parcelPoolElementDao.operations=parcelOperationDaos;
    String responseBody=new GsonBuilder().create().toJson(parcelPoolElementDao);
    int bodyStart=requestInfo.getBodyOffset();
    byte[] header=Arrays.copyOfRange(content,0,bodyStart);
    return Bytes.concat(header,responseBody.getBytes());
  }
 else {
    return content;
  }
}",0.9242761692650334
170749,"public void setByteArray(ArrayList byteArray){
  StringBuilder builder=new StringBuilder();
  for (  Object element : byteArray) {
    builder.append(String.format(""String_Node_Str"",((Double)element).byteValue()));
    builder.append(""String_Node_Str"");
  }
  this.byteArray.setText(builder.toString());
}","public void setByteArray(ArrayList byteArray){
  StringBuilder builder=new StringBuilder();
  if (byteArray != null) {
    for (    Object element : byteArray) {
      builder.append(String.format(""String_Node_Str"",((Double)element).byteValue()));
      builder.append(""String_Node_Str"");
    }
  }
  this.byteArray.setText(builder.toString());
}",0.9247311827956988
170750,"public void rebuild(){
  panel.removeAll();
  Object[] columnNames={""String_Node_Str"",""String_Node_Str""};
  Object[][] data=new Object[parcelOperations.size()][];
  for (int i=0; i < parcelOperations.size(); i++) {
    ParcelOperationDAO parcelOperationDAO=parcelOperations.get(i);
    data[i]=new Object[]{parcelOperationDAO.parcelType.toString(),parcelOperationDAO.value};
  }
  table=new JTable(data,columnNames);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      int selectedRow=table.getSelectedRow();
      String operation=(String)table.getValueAt(selectedRow,0);
      Object value=parcelOperations.get(selectedRow).value;
      details.removeAll();
      if (operation.equals(""String_Node_Str"") || operation.equals(""String_Node_Str"")) {
        details.add(new ParcelByteArrDetails((LinkedTreeMap)value));
      }
 else {
        details.removeAll();
      }
      details.revalidate();
      details.repaint();
    }
  }
);
  panel.add(table.getTableHeader(),BorderLayout.PAGE_START);
  panel.add(table,BorderLayout.CENTER);
  panel.add(table);
  table.getColumnModel().getColumn(0).setWidth(5);
  table.getColumnModel().getColumn(1).setWidth(95);
  revalidate();
  repaint();
}","public void rebuild(){
  panel.removeAll();
  if (details != null) {
    details.removeAll();
  }
  Object[] columnNames={""String_Node_Str"",""String_Node_Str""};
  Object[][] data=new Object[parcelOperations.size()][];
  for (int i=0; i < parcelOperations.size(); i++) {
    ParcelOperationDAO parcelOperationDAO=parcelOperations.get(i);
    data[i]=new Object[]{parcelOperationDAO.parcelType.toString(),parcelOperationDAO.value};
  }
  table=new JTable(data,columnNames);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      int selectedRow=table.getSelectedRow();
      String operation=(String)table.getValueAt(selectedRow,0);
      Object value=parcelOperations.get(selectedRow).value;
      details.removeAll();
      if (operation.equals(""String_Node_Str"") || operation.equals(""String_Node_Str"")) {
        details.add(new ParcelByteArrDetails((LinkedTreeMap)value));
      }
 else {
        details.removeAll();
      }
      details.revalidate();
      details.repaint();
    }
  }
);
  panel.add(table.getTableHeader(),BorderLayout.PAGE_START);
  panel.add(table,BorderLayout.CENTER);
  panel.add(table);
  table.getColumnModel().getColumn(0).setWidth(5);
  table.getColumnModel().getColumn(1).setWidth(95);
  revalidate();
  repaint();
}",0.9794364051789796
170751,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  findViewById(R.id.add_card).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Luhn.startLuhn(MainActivity.this,new LuhnCallback(){
        @Override public void cardDetailsRetrieved(        Context luhnContext,        LuhnCard creditCard,        final LuhnCardVerifier cardVerifier){
          cardVerifier.startProgress();
          new Handler().postDelayed(new Runnable(){
            @Override public void run(){
              cardVerifier.requestOTP(4);
            }
          }
,2500);
        }
        @Override public void otpRetrieved(        Context luhnContext,        final LuhnCardVerifier cardVerifier,        int otp){
          cardVerifier.startProgress();
          new Handler().postDelayed(new Runnable(){
            @Override public void run(){
              cardVerifier.onCardVerified(false,getString(R.string.verification_error),getString(R.string.verification_error));
            }
          }
,2500);
        }
        @Override public void onFinished(){
        }
      }
,R.style.LuhnStyle);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  findViewById(R.id.add_card).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Luhn.startLuhn(MainActivity.this,new LuhnCallback(){
        @Override public void cardDetailsRetrieved(        Context luhnContext,        LuhnCard creditCard,        final LuhnCardVerifier cardVerifier){
          cardVerifier.startProgress();
          new Handler().postDelayed(new Runnable(){
            @Override public void run(){
              cardVerifier.requestOTP(4);
            }
          }
,2500);
        }
        @Override public void otpRetrieved(        Context luhnContext,        final LuhnCardVerifier cardVerifier,        String otp){
          cardVerifier.startProgress();
          new Handler().postDelayed(new Runnable(){
            @Override public void run(){
              cardVerifier.onCardVerified(false,getString(R.string.verification_error),getString(R.string.verification_error));
            }
          }
,2500);
        }
        @Override public void onFinished(){
        }
      }
,R.style.LuhnStyle);
    }
  }
);
}",0.9963518443453588
170752,"@Override public void onClick(View v){
  Luhn.startLuhn(MainActivity.this,new LuhnCallback(){
    @Override public void cardDetailsRetrieved(    Context luhnContext,    LuhnCard creditCard,    final LuhnCardVerifier cardVerifier){
      cardVerifier.startProgress();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          cardVerifier.requestOTP(4);
        }
      }
,2500);
    }
    @Override public void otpRetrieved(    Context luhnContext,    final LuhnCardVerifier cardVerifier,    int otp){
      cardVerifier.startProgress();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          cardVerifier.onCardVerified(false,getString(R.string.verification_error),getString(R.string.verification_error));
        }
      }
,2500);
    }
    @Override public void onFinished(){
    }
  }
,R.style.LuhnStyle);
}","@Override public void onClick(View v){
  Luhn.startLuhn(MainActivity.this,new LuhnCallback(){
    @Override public void cardDetailsRetrieved(    Context luhnContext,    LuhnCard creditCard,    final LuhnCardVerifier cardVerifier){
      cardVerifier.startProgress();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          cardVerifier.requestOTP(4);
        }
      }
,2500);
    }
    @Override public void otpRetrieved(    Context luhnContext,    final LuhnCardVerifier cardVerifier,    String otp){
      cardVerifier.startProgress();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          cardVerifier.onCardVerified(false,getString(R.string.verification_error),getString(R.string.verification_error));
        }
      }
,2500);
    }
    @Override public void onFinished(){
    }
  }
,R.style.LuhnStyle);
}",0.9949409780775716
170753,"@Override public void otpRetrieved(Context luhnContext,final LuhnCardVerifier cardVerifier,int otp){
  cardVerifier.startProgress();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      cardVerifier.onCardVerified(false,getString(R.string.verification_error),getString(R.string.verification_error));
    }
  }
,2500);
}","@Override public void otpRetrieved(Context luhnContext,final LuhnCardVerifier cardVerifier,String otp){
  cardVerifier.startProgress();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      cardVerifier.onCardVerified(false,getString(R.string.verification_error),getString(R.string.verification_error));
    }
  }
,2500);
}",0.9871611982881596
170754,"@Override public void onBackPressed(){
  if (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_EXPANDED) {
    bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
    return;
  }
  super.onBackPressed();
}","@Override public void onBackPressed(){
  if (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_EXPANDED) {
    bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
    return;
  }
  super.onBackPressed();
  sLuhnCallback.onFinished(false);
}",0.9292929292929292
170755,"@Override public void onCardVerified(boolean isSuccessFul,String errorTitle,String errorMessage){
  dismissProgress();
  if (isSuccessFul) {
    finish();
  }
 else {
    showInfo(errorTitle,errorMessage,null,true);
  }
}","@Override public void onCardVerified(boolean isSuccessFul,String errorTitle,String errorMessage){
  dismissProgress();
  if (isSuccessFul) {
    sLuhnCallback.onFinished(isSuccessFul);
  }
 else {
    showInfo(errorTitle,errorMessage,null,true);
  }
}",0.9110169491525424
170756,void onFinished();,void onFinished(boolean isVerified);,0.6666666666666666
170757,"/** 
 * @param mouseButton one of the MOUSE_* constants of this class.
 */
public void sendMouseEvent(int mouseButton,int column,int row,boolean pressed){
  if (column < 1)   column=1;
  if (column > mColumns)   column=mColumns;
  if (row < 1)   row=1;
  if (row > mRows)   row=mRows;
  if (mouseButton == MOUSE_LEFT_BUTTON_MOVED && !isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_BUTTON_EVENT)) {
  }
 else   if (isDecsetInternalBitSet(DECSET_BIT_MOUSE_PROTOCOL_SGR)) {
    mSession.write(String.format(""String_Node_Str"" + (pressed ? 'M' : 'm'),mouseButton,column,row));
  }
 else {
    mouseButton=pressed ? mouseButton : 3;
    boolean out_of_bounds=column > 255 - 32 || row > 255 - 32;
    if (!out_of_bounds) {
      byte[] data={'\033','[','M',(byte)(32 + mouseButton),(byte)(32 + column),(byte)(32 + row)};
      mSession.write(data,0,data.length);
    }
  }
}","/** 
 * @param mouseButton one of the MOUSE_* constants of this class.
 */
public void sendMouseEvent(int mouseButton,int column,int row,boolean pressed){
  if (column < 1)   column=1;
  if (column > mColumns)   column=mColumns;
  if (row < 1)   row=1;
  if (row > mRows)   row=mRows;
  if (mouseButton == MOUSE_LEFT_BUTTON_MOVED && !isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_BUTTON_EVENT)) {
  }
 else   if (isDecsetInternalBitSet(DECSET_BIT_MOUSE_PROTOCOL_SGR)) {
    mSession.write(String.format(""String_Node_Str"" + (pressed ? 'M' : 'm'),mouseButton,column,row));
  }
 else {
    mouseButton=pressed ? mouseButton : 3;
    boolean outOfBounds=column > 255 - 32 || row > 255 - 32;
    if (!outOfBounds) {
      byte[] data={'\033','[','M',(byte)(32 + mouseButton),(byte)(32 + column),(byte)(32 + row)};
      mSession.write(data,0,data.length);
    }
  }
}",0.9907727797001152
170758,"public void setProvider(SearchProvider _provider){
  provider=_provider;
}","public void setProvider(PluginInterface _pi,SearchProvider _provider){
  provider=_provider;
  if (plugin_id == null) {
    plugin_id=_pi.getPluginID();
  }
}",0.6379310344827587
170759,"@Override public Map exportToBencodedMap(boolean generic) throws IOException {
  Map res=new HashMap();
  super.exportToBencodedMap(res,generic);
  return (res);
}","@Override public Map exportToBencodedMap(boolean generic) throws IOException {
  Map res=new HashMap();
  super.exportToBencodedMap(res,generic);
  if (plugin_id != null) {
    MapUtils.setMapString(res,""String_Node_Str"",plugin_id);
  }
  return (res);
}",0.7146282973621103
170760,"protected PluginEngine(MetaSearchImpl _meta_search,Map _map) throws IOException {
  super(_meta_search,_map);
  if (getRankBias() == 0.0f) {
    setRankBias(1.0f);
  }
  setSource(ENGINE_SOURCE_LOCAL);
}","protected PluginEngine(MetaSearchImpl _meta_search,Map _map) throws IOException {
  super(_meta_search,_map);
  plugin_id=MapUtils.getMapString(_map,""String_Node_Str"",null);
  if (getRankBias() == 0.0f) {
    setRankBias(1.0f);
  }
  setSource(ENGINE_SOURCE_LOCAL);
}",0.8638297872340426
170761,"protected byte[] exportShortIDs(List<Download> downloads){
  byte[] res=new byte[SHORT_ID_SIZE * downloads.size()];
  for (int i=0; i < downloads.size(); i++) {
    Download download=downloads.get(i);
    downloadData download_data=(downloadData)download.getUserData(BuddyPluginTracker.class);
    if (download_data != null) {
      System.arraycopy(download_data.getID().getBytes(),0,res,i * SHORT_ID_SIZE,SHORT_ID_SIZE);
    }
  }
  return (res);
}","protected byte[] exportShortIDs(List<Download> downloads){
  byte[] res=new byte[SHORT_ID_SIZE * downloads.size()];
  for (int i=0; i < downloads.size(); i++) {
    Download download=downloads.get(i);
    downloadData download_data=(downloadData)download.getUserData(BuddyPluginTracker.class);
    if (download_data == null) {
      download_data=new downloadData(download);
    }
    System.arraycopy(download_data.getID().getBytes(),0,res,i * SHORT_ID_SIZE,SHORT_ID_SIZE);
  }
  return (res);
}",0.9069767441860463
170762,"protected byte[][] exportFullIDs(List<Download> downloads){
  byte[] hashes=new byte[FULL_ID_SIZE * downloads.size()];
  byte[] states=new byte[downloads.size()];
  for (int i=0; i < downloads.size(); i++) {
    Download download=downloads.get(i);
    downloadData download_data=(downloadData)download.getUserData(BuddyPluginTracker.class);
    if (download_data != null) {
      System.arraycopy(download_data.getID().getBytes(),0,hashes,i * FULL_ID_SIZE,FULL_ID_SIZE);
      states[i]=download.isComplete(false) ? (byte)0x01 : (byte)0x00;
    }
  }
  return (new byte[][]{hashes,states});
}","protected byte[][] exportFullIDs(List<Download> downloads){
  byte[] hashes=new byte[FULL_ID_SIZE * downloads.size()];
  byte[] states=new byte[downloads.size()];
  for (int i=0; i < downloads.size(); i++) {
    Download download=downloads.get(i);
    downloadData download_data=(downloadData)download.getUserData(BuddyPluginTracker.class);
    if (download_data == null) {
      download_data=new downloadData(download);
    }
    System.arraycopy(download_data.getID().getBytes(),0,hashes,i * FULL_ID_SIZE,FULL_ID_SIZE);
    states[i]=download.isComplete(false) ? (byte)0x01 : (byte)0x00;
  }
  return (new byte[][]{hashes,states});
}",0.9495114006514658
170763,"@Override public void downloadRemoved(Download download){
  download.removeListener(download_listener);
  download.removeTrackerListener(download_tracker_listener);
  download.removeActivationListener(download_activation_listener);
  DefaultRankCalculator dlData=downloadDataMap.remove(download);
  if (dlData != null) {
    sortedArrayCache=null;
    dlData.destroy();
  }
  requestProcessCycle(null);
  if (bDebugLog)   log.log(download.getTorrent(),LoggerChannel.LT_INFORMATION,""String_Node_Str"");
}","@Override public void downloadRemoved(Download download){
  download.removeListener(download_listener);
  download.removeTrackerListener(download_tracker_listener);
  download.removeActivationListener(download_activation_listener);
  DefaultRankCalculator dlData=downloadDataMap.remove(download);
  if (dlData != null) {
    dlData.getCoreDownloadObject().getDownloadState().removeListener(download_state_attribute_listener,DownloadManagerState.AT_TRANSIENT_FLAGS,DownloadManagerStateAttributeListener.WRITTEN);
    sortedArrayCache=null;
    dlData.destroy();
  }
  requestProcessCycle(null);
  if (bDebugLog)   log.log(download.getTorrent(),LoggerChannel.LT_INFORMATION,""String_Node_Str"");
}",0.8401673640167364
170764,"public StartStopDMListener(){
  download_tracker_listener=new StartStopDMTrackerListener();
  download_listener=new StartStopDownloadListener();
  download_activation_listener=new StartStopDownloadActivationListener();
}","public StartStopDMListener(){
  download_tracker_listener=new StartStopDMTrackerListener();
  download_listener=new StartStopDownloadListener();
  download_activation_listener=new StartStopDownloadActivationListener();
  download_state_attribute_listener=new StartStopDownloadStateAttributeListener();
}",0.8413001912045889
170765,"@Override public void downloadAdded(Download download){
  DefaultRankCalculator dlData=null;
  if (downloadDataMap.containsKey(download)) {
    dlData=downloadDataMap.get(download);
  }
 else {
    dlData=new DefaultRankCalculator(StartStopRulesDefaultPlugin.this,download);
    sortedArrayCache=null;
    downloadDataMap.put(download,dlData);
    download.addListener(download_listener);
    download.addTrackerListener(download_tracker_listener,false);
    download.addActivationListener(download_activation_listener);
  }
  if (dlData != null) {
    requestProcessCycle(dlData);
    if (bDebugLog)     log.log(download.getTorrent(),LoggerChannel.LT_INFORMATION,""String_Node_Str"" + sStates.charAt(download.getState()));
  }
}","@Override public void downloadAdded(Download download){
  DefaultRankCalculator dlData=null;
  if (downloadDataMap.containsKey(download)) {
    dlData=downloadDataMap.get(download);
  }
 else {
    dlData=new DefaultRankCalculator(StartStopRulesDefaultPlugin.this,download);
    sortedArrayCache=null;
    downloadDataMap.put(download,dlData);
    download.addListener(download_listener);
    download.addTrackerListener(download_tracker_listener,false);
    download.addActivationListener(download_activation_listener);
    dlData.getCoreDownloadObject().getDownloadState().addListener(download_state_attribute_listener,DownloadManagerState.AT_TRANSIENT_FLAGS,DownloadManagerStateAttributeListener.WRITTEN);
  }
  if (dlData != null) {
    requestProcessCycle(dlData);
    if (bDebugLog)     log.log(download.getTorrent(),LoggerChannel.LT_INFORMATION,""String_Node_Str"" + sStates.charAt(download.getState()));
  }
}",0.8855054811205847
170766,"@Override public void readCompleted(DiskManagerReadRequest read_request,DirectByteBuffer buffer){
  complete();
  try {
    this_mon.enter();
    if (stopped) {
      buffer.returnToPool();
      listener.checkCancelled(request);
      return;
    }
    async_checks++;
  }
  finally {
    this_mon.exit();
  }
  if (buffer.getFlag(DirectByteBuffer.FL_CONTAINS_TRANSIENT_DATA)) {
    try {
      buffer.returnToPool();
      listener.checkCompleted(request,false);
    }
  finally {
      try {
        this_mon.enter();
        async_checks--;
        if (stopped) {
          async_check_sem.release();
        }
      }
  finally {
        this_mon.exit();
      }
    }
  }
 else {
    try {
      final DirectByteBuffer f_buffer=buffer;
      ConcurrentHasher.getSingleton().addRequest(buffer.getBuffer(DirectByteBuffer.SS_DW),new ConcurrentHasherRequestListener(){
        @Override public void complete(        ConcurrentHasherRequest hash_request){
          int async_result=3;
          try {
            byte[] actual_hash=hash_request.getResult();
            if (actual_hash != null) {
              request.setHash(actual_hash);
              async_result=1;
              for (int i=0; i < actual_hash.length; i++) {
                if (actual_hash[i] != required_hash[i]) {
                  async_result=2;
                  break;
                }
              }
            }
          }
  finally {
            try {
              if (async_result == 1) {
                try {
                  for (int i=0; i < pieceList.size(); i++) {
                    DMPieceMapEntry piece_entry=pieceList.get(i);
                    DiskManagerFileInfoImpl file_info=piece_entry.getFile();
                    if (file_info.getLength() > 0 || !file_info.isSkipped()) {
                      CacheFile cache_file=file_info.getCacheFile();
                      cache_file.setPieceComplete(pieceNumber,f_buffer);
                    }
                  }
                }
 catch (                Throwable e) {
                  f_buffer.returnToPool();
                  Debug.out(e);
                  listener.checkFailed(request,e);
                  return;
                }
              }
              f_buffer.returnToPool();
              if (async_result == 1) {
                listener.checkCompleted(request,true);
              }
 else               if (async_result == 2) {
                listener.checkCompleted(request,false);
              }
 else {
                listener.checkCancelled(request);
              }
            }
  finally {
              try {
                this_mon.enter();
                async_checks--;
                if (stopped) {
                  async_check_sem.release();
                }
              }
  finally {
                this_mon.exit();
              }
            }
          }
        }
      }
,request.isLowPriority());
    }
 catch (    Throwable e) {
      Debug.printStackTrace(e);
      buffer.returnToPool();
      listener.checkFailed(request,e);
    }
  }
}","@Override public void readCompleted(DiskManagerReadRequest read_request,DirectByteBuffer buffer){
  complete();
  try {
    this_mon.enter();
    if (stopped) {
      buffer.returnToPool();
      listener.checkCancelled(request);
      return;
    }
    async_checks++;
  }
  finally {
    this_mon.exit();
  }
  if (buffer.getFlag(DirectByteBuffer.FL_CONTAINS_TRANSIENT_DATA)) {
    try {
      buffer.returnToPool();
      listener.checkCompleted(request,false);
    }
  finally {
      try {
        this_mon.enter();
        async_checks--;
        if (stopped) {
          async_check_sem.release();
        }
      }
  finally {
        this_mon.exit();
      }
    }
  }
 else {
    try {
      final DirectByteBuffer f_buffer=buffer;
      ConcurrentHasher.getSingleton().addRequest(buffer.getBuffer(DirectByteBuffer.SS_DW),new ConcurrentHasherRequestListener(){
        @Override public void complete(        ConcurrentHasherRequest hash_request){
          int async_result=3;
          try {
            byte[] actual_hash=hash_request.getResult();
            if (actual_hash != null) {
              request.setHash(actual_hash);
              async_result=1;
              for (int i=0; i < actual_hash.length; i++) {
                if (actual_hash[i] != required_hash[i]) {
                  async_result=2;
                  break;
                }
              }
            }
          }
  finally {
            try {
              if (async_result == 1) {
                try {
                  for (int i=0; i < pieceList.size(); i++) {
                    DMPieceMapEntry piece_entry=pieceList.get(i);
                    DiskManagerFileInfoImpl file_info=piece_entry.getFile();
                    if (file_info.getLength() > 0 || !file_info.isSkipped()) {
                      CacheFile cache_file=file_info.getCacheFile();
                      if (!read_flush && file_info.getStorageType() == DiskManagerFileInfoImpl.ST_REORDER) {
                        cache_file.flushCache(piece_entry.getOffset(),piece_entry.getLength());
                      }
                      cache_file.setPieceComplete(pieceNumber,f_buffer);
                    }
                  }
                }
 catch (                Throwable e) {
                  f_buffer.returnToPool();
                  Debug.out(e);
                  listener.checkFailed(request,e);
                  return;
                }
              }
              f_buffer.returnToPool();
              if (async_result == 1) {
                listener.checkCompleted(request,true);
              }
 else               if (async_result == 2) {
                listener.checkCompleted(request,false);
              }
 else {
                listener.checkCancelled(request);
              }
            }
  finally {
              try {
                this_mon.enter();
                async_checks--;
                if (stopped) {
                  async_check_sem.release();
                }
              }
  finally {
                this_mon.exit();
              }
            }
          }
        }
      }
,request.isLowPriority());
    }
 catch (    Throwable e) {
      Debug.printStackTrace(e);
      buffer.returnToPool();
      listener.checkFailed(request,e);
    }
  }
}",0.9571541501976284
170767,"protected void enqueueCheckRequestSupport(final DiskManagerCheckRequest request,final DiskManagerCheckRequestListener listener,boolean read_flush){
  if (!checking_enabled) {
    listener.checkCompleted(request,true);
    return;
  }
  final int pieceNumber=request.getPieceNumber();
  try {
    final byte[] required_hash=disk_manager.getPieceHash(pieceNumber);
    final DMPieceList pieceList=disk_manager.getPieceList(pieceNumber);
    try {
      boolean all_compact=pieceList.size() > 0;
      for (int i=0; i < pieceList.size(); i++) {
        DMPieceMapEntry piece_entry=pieceList.get(i);
        DiskManagerFileInfoImpl file_info=piece_entry.getFile();
        CacheFile cache_file=file_info.getCacheFile();
        if (cache_file.compareLength(piece_entry.getOffset()) < 0) {
          listener.checkCompleted(request,false);
          return;
        }
        if (all_compact) {
          int st=cache_file.getStorageType();
          if ((st != CacheFile.CT_COMPACT && st != CacheFile.CT_PIECE_REORDER_COMPACT) || file_info.getNbPieces() <= 2) {
            all_compact=false;
          }
        }
      }
      if (all_compact) {
        listener.checkCompleted(request,false);
        return;
      }
    }
 catch (    Throwable e) {
      listener.checkCancelled(request);
      return;
    }
    int this_piece_length=disk_manager.getPieceLength(pieceNumber);
    DiskManagerReadRequest read_request=disk_manager.createReadRequest(pieceNumber,0,this_piece_length);
    try {
      this_mon.enter();
      if (stopped) {
        listener.checkCancelled(request);
        return;
      }
      async_reads++;
    }
  finally {
      this_mon.exit();
    }
    read_request.setFlush(read_flush);
    read_request.setUseCache(!request.isAdHoc());
    disk_manager.enqueueReadRequest(read_request,new DiskManagerReadRequestListener(){
      @Override public void readCompleted(      DiskManagerReadRequest read_request,      DirectByteBuffer buffer){
        complete();
        try {
          this_mon.enter();
          if (stopped) {
            buffer.returnToPool();
            listener.checkCancelled(request);
            return;
          }
          async_checks++;
        }
  finally {
          this_mon.exit();
        }
        if (buffer.getFlag(DirectByteBuffer.FL_CONTAINS_TRANSIENT_DATA)) {
          try {
            buffer.returnToPool();
            listener.checkCompleted(request,false);
          }
  finally {
            try {
              this_mon.enter();
              async_checks--;
              if (stopped) {
                async_check_sem.release();
              }
            }
  finally {
              this_mon.exit();
            }
          }
        }
 else {
          try {
            final DirectByteBuffer f_buffer=buffer;
            ConcurrentHasher.getSingleton().addRequest(buffer.getBuffer(DirectByteBuffer.SS_DW),new ConcurrentHasherRequestListener(){
              @Override public void complete(              ConcurrentHasherRequest hash_request){
                int async_result=3;
                try {
                  byte[] actual_hash=hash_request.getResult();
                  if (actual_hash != null) {
                    request.setHash(actual_hash);
                    async_result=1;
                    for (int i=0; i < actual_hash.length; i++) {
                      if (actual_hash[i] != required_hash[i]) {
                        async_result=2;
                        break;
                      }
                    }
                  }
                }
  finally {
                  try {
                    if (async_result == 1) {
                      try {
                        for (int i=0; i < pieceList.size(); i++) {
                          DMPieceMapEntry piece_entry=pieceList.get(i);
                          DiskManagerFileInfoImpl file_info=piece_entry.getFile();
                          if (file_info.getLength() > 0 || !file_info.isSkipped()) {
                            CacheFile cache_file=file_info.getCacheFile();
                            cache_file.setPieceComplete(pieceNumber,f_buffer);
                          }
                        }
                      }
 catch (                      Throwable e) {
                        f_buffer.returnToPool();
                        Debug.out(e);
                        listener.checkFailed(request,e);
                        return;
                      }
                    }
                    f_buffer.returnToPool();
                    if (async_result == 1) {
                      listener.checkCompleted(request,true);
                    }
 else                     if (async_result == 2) {
                      listener.checkCompleted(request,false);
                    }
 else {
                      listener.checkCancelled(request);
                    }
                  }
  finally {
                    try {
                      this_mon.enter();
                      async_checks--;
                      if (stopped) {
                        async_check_sem.release();
                      }
                    }
  finally {
                      this_mon.exit();
                    }
                  }
                }
              }
            }
,request.isLowPriority());
          }
 catch (          Throwable e) {
            Debug.printStackTrace(e);
            buffer.returnToPool();
            listener.checkFailed(request,e);
          }
        }
      }
      @Override public void readFailed(      DiskManagerReadRequest read_request,      Throwable cause){
        complete();
        listener.checkFailed(request,cause);
      }
      @Override public int getPriority(){
        return (checking_read_priority ? 0 : -1);
      }
      @Override public void requestExecuted(      long bytes){
      }
      protected void complete(){
        try {
          this_mon.enter();
          async_reads--;
          if (stopped) {
            async_read_sem.release();
          }
        }
  finally {
          this_mon.exit();
        }
      }
    }
);
  }
 catch (  Throwable e) {
    disk_manager.setFailed(""String_Node_Str"" + Debug.getNestedExceptionMessage(e));
    Debug.printStackTrace(e);
    listener.checkFailed(request,e);
  }
}","protected void enqueueCheckRequestSupport(final DiskManagerCheckRequest request,final DiskManagerCheckRequestListener listener,boolean read_flush){
  if (!checking_enabled) {
    listener.checkCompleted(request,true);
    return;
  }
  final int pieceNumber=request.getPieceNumber();
  try {
    final byte[] required_hash=disk_manager.getPieceHash(pieceNumber);
    final DMPieceList pieceList=disk_manager.getPieceList(pieceNumber);
    try {
      boolean all_compact=pieceList.size() > 0;
      for (int i=0; i < pieceList.size(); i++) {
        DMPieceMapEntry piece_entry=pieceList.get(i);
        DiskManagerFileInfoImpl file_info=piece_entry.getFile();
        CacheFile cache_file=file_info.getCacheFile();
        if (cache_file.compareLength(piece_entry.getOffset()) < 0) {
          listener.checkCompleted(request,false);
          return;
        }
        if (all_compact) {
          int st=cache_file.getStorageType();
          if ((st != CacheFile.CT_COMPACT && st != CacheFile.CT_PIECE_REORDER_COMPACT) || file_info.getNbPieces() <= 2) {
            all_compact=false;
          }
        }
      }
      if (all_compact) {
        listener.checkCompleted(request,false);
        return;
      }
    }
 catch (    Throwable e) {
      listener.checkCancelled(request);
      return;
    }
    int this_piece_length=disk_manager.getPieceLength(pieceNumber);
    DiskManagerReadRequest read_request=disk_manager.createReadRequest(pieceNumber,0,this_piece_length);
    try {
      this_mon.enter();
      if (stopped) {
        listener.checkCancelled(request);
        return;
      }
      async_reads++;
    }
  finally {
      this_mon.exit();
    }
    read_request.setFlush(read_flush);
    read_request.setUseCache(!request.isAdHoc());
    disk_manager.enqueueReadRequest(read_request,new DiskManagerReadRequestListener(){
      @Override public void readCompleted(      DiskManagerReadRequest read_request,      DirectByteBuffer buffer){
        complete();
        try {
          this_mon.enter();
          if (stopped) {
            buffer.returnToPool();
            listener.checkCancelled(request);
            return;
          }
          async_checks++;
        }
  finally {
          this_mon.exit();
        }
        if (buffer.getFlag(DirectByteBuffer.FL_CONTAINS_TRANSIENT_DATA)) {
          try {
            buffer.returnToPool();
            listener.checkCompleted(request,false);
          }
  finally {
            try {
              this_mon.enter();
              async_checks--;
              if (stopped) {
                async_check_sem.release();
              }
            }
  finally {
              this_mon.exit();
            }
          }
        }
 else {
          try {
            final DirectByteBuffer f_buffer=buffer;
            ConcurrentHasher.getSingleton().addRequest(buffer.getBuffer(DirectByteBuffer.SS_DW),new ConcurrentHasherRequestListener(){
              @Override public void complete(              ConcurrentHasherRequest hash_request){
                int async_result=3;
                try {
                  byte[] actual_hash=hash_request.getResult();
                  if (actual_hash != null) {
                    request.setHash(actual_hash);
                    async_result=1;
                    for (int i=0; i < actual_hash.length; i++) {
                      if (actual_hash[i] != required_hash[i]) {
                        async_result=2;
                        break;
                      }
                    }
                  }
                }
  finally {
                  try {
                    if (async_result == 1) {
                      try {
                        for (int i=0; i < pieceList.size(); i++) {
                          DMPieceMapEntry piece_entry=pieceList.get(i);
                          DiskManagerFileInfoImpl file_info=piece_entry.getFile();
                          if (file_info.getLength() > 0 || !file_info.isSkipped()) {
                            CacheFile cache_file=file_info.getCacheFile();
                            if (!read_flush && file_info.getStorageType() == DiskManagerFileInfoImpl.ST_REORDER) {
                              cache_file.flushCache(piece_entry.getOffset(),piece_entry.getLength());
                            }
                            cache_file.setPieceComplete(pieceNumber,f_buffer);
                          }
                        }
                      }
 catch (                      Throwable e) {
                        f_buffer.returnToPool();
                        Debug.out(e);
                        listener.checkFailed(request,e);
                        return;
                      }
                    }
                    f_buffer.returnToPool();
                    if (async_result == 1) {
                      listener.checkCompleted(request,true);
                    }
 else                     if (async_result == 2) {
                      listener.checkCompleted(request,false);
                    }
 else {
                      listener.checkCancelled(request);
                    }
                  }
  finally {
                    try {
                      this_mon.enter();
                      async_checks--;
                      if (stopped) {
                        async_check_sem.release();
                      }
                    }
  finally {
                      this_mon.exit();
                    }
                  }
                }
              }
            }
,request.isLowPriority());
          }
 catch (          Throwable e) {
            Debug.printStackTrace(e);
            buffer.returnToPool();
            listener.checkFailed(request,e);
          }
        }
      }
      @Override public void readFailed(      DiskManagerReadRequest read_request,      Throwable cause){
        complete();
        listener.checkFailed(request,cause);
      }
      @Override public int getPriority(){
        return (checking_read_priority ? 0 : -1);
      }
      @Override public void requestExecuted(      long bytes){
      }
      protected void complete(){
        try {
          this_mon.enter();
          async_reads--;
          if (stopped) {
            async_read_sem.release();
          }
        }
  finally {
          this_mon.exit();
        }
      }
    }
);
  }
 catch (  Throwable e) {
    disk_manager.setFailed(""String_Node_Str"" + Debug.getNestedExceptionMessage(e));
    Debug.printStackTrace(e);
    listener.checkFailed(request,e);
  }
}",0.9807166835818564
170768,"/** 
 * flushes the cache to disk but retains entries
 * @throws CacheFileManagerException
 */
public void flushCache() throws CacheFileManagerException ;","public void flushCache(long offset,int length) throws CacheFileManagerException ;",0.502127659574468
170769,"@Override public void flushCache() throws CacheFileManagerException {
  try {
    flushCachePublic(false,-1);
    file.flush();
  }
 catch (  FMFileManagerException e) {
    manager.rethrow(this,e);
  }
}","public void flushCache(long file_position,int length) throws CacheFileManagerException {
  try {
    flushCache(file_position,length,false,-1,0,-1);
    file.flush();
  }
 catch (  FMFileManagerException e) {
    manager.rethrow(this,e);
  }
}",0.7785234899328859
170770,"@Override public void flushCache() throws CacheFileManagerException {
  try {
    file.flush();
  }
 catch (  FMFileManagerException e) {
    manager.rethrow(this,e);
  }
}","public void flushCache(long offset,int length) throws CacheFileManagerException {
  flushCache();
}",0.5313653136531366
170771,"@Override public void flushCache() throws CacheFileManagerException {
  try {
    base_file.flush();
  }
 catch (  FMFileManagerException e) {
    manager.rethrow(this,e);
  }
}","public void flushCache(long offset,int length) throws CacheFileManagerException {
  flushCache();
}",0.5217391304347826
170772,"public static SWTSkinObjectContainer buildStandAlone(SWTSkinObjectContainer soParent,String skinRef,SWTSkin skin,String parentID,String id,Object datasource,int controlType,CTabItem swtItem,UISWTViewEventListener original_event_listener,boolean listener_is_new){
  Control control=null;
  Composite parent=soParent.getComposite();
  if (skinRef != null) {
    Shell shell=parent.getShell();
    Cursor cursor=shell.getCursor();
    try {
      shell.setCursor(shell.getDisplay().getSystemCursor(SWT.CURSOR_WAIT));
      SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent,null);
      SWTSkinObject skinObject=skin.createSkinObject(id,skinRef,soContents,datasource);
      control=skinObject.getControl();
      control.setLayoutData(Utils.getFilledFormData());
      control.getParent().layout(true,true);
      soContents.setVisible(true);
      return (soContents);
    }
  finally {
      shell.setCursor(cursor);
    }
  }
 else {
    if ((original_event_listener instanceof UISWTViewCoreEventListenerEx && ((UISWTViewCoreEventListenerEx)original_event_listener).isCloneable()) || (original_event_listener instanceof UISWTViewEventListenerEx)) {
      final UISWTViewImpl view=new UISWTViewImpl(id,parentID,true);
      final UISWTViewEventListener event_listener=listener_is_new ? original_event_listener : original_event_listener instanceof UISWTViewEventListenerEx ? ((UISWTViewEventListenerEx)original_event_listener).getClone() : ((UISWTViewCoreEventListenerEx)original_event_listener).getClone();
      try {
        view.setEventListener(event_listener,false);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
      view.setDatasource(datasource);
      try {
        SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent);
        parent.setBackgroundMode(SWT.INHERIT_NONE);
        final Composite viewComposite=soContents.getComposite();
        boolean doGridLayout=true;
        if (controlType == CONTROLTYPE_SKINOBJECT) {
          doGridLayout=false;
        }
        if (doGridLayout) {
          GridLayout gridLayout=new GridLayout();
          gridLayout.horizontalSpacing=gridLayout.verticalSpacing=gridLayout.marginHeight=gridLayout.marginWidth=0;
          viewComposite.setLayout(gridLayout);
          viewComposite.setLayoutData(Utils.getFilledFormData());
        }
        view.setPluginSkinObject(soContents);
        view.initialize(viewComposite);
        soContents.addListener(new SWTSkinObjectListener(){
          @Override public Object eventOccured(          SWTSkinObject skinObject,          int eventType,          Object params){
            if (eventType == SWTSkinObjectListener.EVENT_OBFUSCATE) {
              Map data=new HashMap();
              data.put(""String_Node_Str"",(Image)params);
              data.put(""String_Node_Str"",false);
              view.triggerEvent(UISWTViewEvent.TYPE_OBFUSCATE,data);
            }
            return null;
          }
        }
);
        Composite iviewComposite=view.getComposite();
        control=iviewComposite;
        if (doGridLayout) {
          Object existingLayoutData=iviewComposite.getLayoutData();
          Object existingParentLayoutData=iviewComposite.getParent().getLayoutData();
          if (existingLayoutData == null || !(existingLayoutData instanceof GridData) && (existingParentLayoutData instanceof GridLayout)) {
            GridData gridData=new GridData(GridData.FILL_BOTH);
            iviewComposite.setLayoutData(gridData);
          }
        }
        parent.layout(true,true);
        final UIUpdater updater=UIUpdaterSWT.getInstance();
        if (updater != null) {
          updater.addUpdater(new UIUpdatable(){
            @Override public void updateUI(){
              if (viewComposite.isDisposed()) {
                updater.removeUpdater(this);
              }
 else {
                view.triggerEvent(UISWTViewEvent.TYPE_REFRESH,null);
              }
            }
            @Override public String getUpdateUIName(){
              return (""String_Node_Str"");
            }
          }
);
          if (event_listener instanceof IViewRequiresPeriodicUpdates) {
            updater.addPeriodicUpdater(new UIUpdatable(){
              @Override public void updateUI(){
                if (viewComposite.isDisposed()) {
                  updater.removePeriodicUpdater(this);
                }
 else {
                  event_listener.eventOccurred(new UISWTViewEvent(){
                    @Override public UISWTView getView(){
                      return null;
                    }
                    @Override public int getType(){
                      return (StatsView.EVENT_PERIODIC_UPDATE);
                    }
                    @Override public Object getData(){
                      return null;
                    }
                  }
);
                }
              }
              @Override public String getUpdateUIName(){
                return (""String_Node_Str"");
              }
            }
);
          }
        }
        soContents.setVisible(true);
        view.triggerEvent(UISWTViewEvent.TYPE_FOCUSGAINED,null);
        iviewComposite.addDisposeListener(new DisposeListener(){
          @Override public void widgetDisposed(          DisposeEvent arg0){
            view.triggerEvent(UISWTViewEvent.TYPE_DESTROY,null);
          }
        }
);
        return (soContents);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
    }
  }
  return (null);
}","public static SWTSkinObjectContainer buildStandAlone(SWTSkinObjectContainer soParent,String skinRef,SWTSkin skin,String parentID,String id,Object datasource,int controlType,CTabItem swtItem,UISWTViewEventListener original_event_listener,boolean listener_is_new){
  Control control=null;
  Composite parent=soParent.getComposite();
  if (skinRef != null) {
    Shell shell=parent.getShell();
    Cursor cursor=shell.getCursor();
    try {
      shell.setCursor(shell.getDisplay().getSystemCursor(SWT.CURSOR_WAIT));
      SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent,null);
      SWTSkinObject skinObject=skin.createSkinObject(id,skinRef,soContents,datasource);
      control=skinObject.getControl();
      control.setLayoutData(Utils.getFilledFormData());
      control.getParent().layout(true,true);
      soContents.setVisible(true);
      return (soContents);
    }
  finally {
      shell.setCursor(cursor);
    }
  }
 else {
    if ((original_event_listener instanceof UISWTViewCoreEventListenerEx && ((UISWTViewCoreEventListenerEx)original_event_listener).isCloneable()) || (original_event_listener instanceof UISWTViewEventListenerEx)) {
      final UISWTViewImpl view=new UISWTViewImpl(id,parentID,true);
      final UISWTViewEventListener event_listener=listener_is_new ? original_event_listener : original_event_listener instanceof UISWTViewEventListenerEx ? ((UISWTViewEventListenerEx)original_event_listener).getClone() : ((UISWTViewCoreEventListenerEx)original_event_listener).getClone();
      try {
        view.setEventListener(event_listener,false);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
      view.setDatasource(datasource);
      try {
        SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent);
        parent.setBackgroundMode(SWT.INHERIT_NONE);
        final Composite viewComposite=soContents.getComposite();
        boolean doGridLayout=true;
        if (controlType == CONTROLTYPE_SKINOBJECT) {
          doGridLayout=false;
        }
        if (doGridLayout) {
          GridLayout gridLayout=new GridLayout();
          gridLayout.horizontalSpacing=gridLayout.verticalSpacing=gridLayout.marginHeight=gridLayout.marginWidth=0;
          viewComposite.setLayout(gridLayout);
          viewComposite.setLayoutData(Utils.getFilledFormData());
        }
        view.setPluginSkinObject(soContents);
        view.initialize(viewComposite);
        viewComposite.setData(Utils.RELAYOUT_UP_STOP_HERE,true);
        soContents.addListener(new SWTSkinObjectListener(){
          @Override public Object eventOccured(          SWTSkinObject skinObject,          int eventType,          Object params){
            if (eventType == SWTSkinObjectListener.EVENT_OBFUSCATE) {
              Map data=new HashMap();
              data.put(""String_Node_Str"",(Image)params);
              data.put(""String_Node_Str"",false);
              view.triggerEvent(UISWTViewEvent.TYPE_OBFUSCATE,data);
            }
            return null;
          }
        }
);
        Composite iviewComposite=view.getComposite();
        control=iviewComposite;
        if (doGridLayout) {
          Object existingLayoutData=iviewComposite.getLayoutData();
          Object existingParentLayoutData=iviewComposite.getParent().getLayoutData();
          if (existingLayoutData == null || !(existingLayoutData instanceof GridData) && (existingParentLayoutData instanceof GridLayout)) {
            GridData gridData=new GridData(GridData.FILL_BOTH);
            iviewComposite.setLayoutData(gridData);
          }
        }
        parent.layout(true,true);
        final UIUpdater updater=UIUpdaterSWT.getInstance();
        if (updater != null) {
          updater.addUpdater(new UIUpdatable(){
            @Override public void updateUI(){
              if (viewComposite.isDisposed()) {
                updater.removeUpdater(this);
              }
 else {
                view.triggerEvent(UISWTViewEvent.TYPE_REFRESH,null);
              }
            }
            @Override public String getUpdateUIName(){
              return (""String_Node_Str"");
            }
          }
);
          if (event_listener instanceof IViewRequiresPeriodicUpdates) {
            updater.addPeriodicUpdater(new UIUpdatable(){
              @Override public void updateUI(){
                if (viewComposite.isDisposed()) {
                  updater.removePeriodicUpdater(this);
                }
 else {
                  event_listener.eventOccurred(new UISWTViewEvent(){
                    @Override public UISWTView getView(){
                      return null;
                    }
                    @Override public int getType(){
                      return (StatsView.EVENT_PERIODIC_UPDATE);
                    }
                    @Override public Object getData(){
                      return null;
                    }
                  }
);
                }
              }
              @Override public String getUpdateUIName(){
                return (""String_Node_Str"");
              }
            }
);
          }
        }
        soContents.setVisible(true);
        view.triggerEvent(UISWTViewEvent.TYPE_FOCUSGAINED,null);
        iviewComposite.addDisposeListener(new DisposeListener(){
          @Override public void widgetDisposed(          DisposeEvent arg0){
            view.triggerEvent(UISWTViewEvent.TYPE_DESTROY,null);
          }
        }
);
        return (soContents);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
    }
  }
  return (null);
}",0.9942756494936152
170773,"public static SWTSkinObjectContainer buildStandAlone(SWTSkinObjectContainer soParent,String skinRef,SWTSkin skin,String parentID,String id,Object datasource,int controlType,TreeItem swtItem,UISWTViewEventListener original_event_listener,boolean listener_is_new){
  Control control=null;
  Composite parent=soParent.getComposite();
  if (skinRef != null) {
    Shell shell=parent.getShell();
    Cursor cursor=shell.getCursor();
    try {
      shell.setCursor(shell.getDisplay().getSystemCursor(SWT.CURSOR_WAIT));
      SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent,null);
      SWTSkinObject skinObject=skin.createSkinObject(id,skinRef,soContents,datasource);
      control=skinObject.getControl();
      control.setLayoutData(Utils.getFilledFormData());
      control.getParent().layout(true,true);
      soContents.setVisible(true);
      return (soContents);
    }
  finally {
      shell.setCursor(cursor);
    }
  }
 else {
    if ((original_event_listener instanceof UISWTViewCoreEventListenerEx && ((UISWTViewCoreEventListenerEx)original_event_listener).isCloneable()) || (original_event_listener instanceof UISWTViewEventListenerEx)) {
      final UISWTViewImpl view=new UISWTViewImpl(id,parentID,true);
      final UISWTViewEventListener event_listener=original_event_listener instanceof UISWTViewEventListenerEx ? ((UISWTViewEventListenerEx)original_event_listener).getClone() : ((UISWTViewCoreEventListenerEx)original_event_listener).getClone();
      try {
        view.setEventListener(event_listener,false);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
      view.setDatasource(datasource);
      try {
        SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent);
        parent.setBackgroundMode(SWT.INHERIT_NONE);
        final Composite viewComposite=soContents.getComposite();
        boolean doGridLayout=true;
        if (controlType == CONTROLTYPE_SKINOBJECT) {
          doGridLayout=false;
        }
        if (doGridLayout) {
          GridLayout gridLayout=new GridLayout();
          gridLayout.horizontalSpacing=gridLayout.verticalSpacing=gridLayout.marginHeight=gridLayout.marginWidth=0;
          viewComposite.setLayout(gridLayout);
          viewComposite.setLayoutData(Utils.getFilledFormData());
        }
        view.setPluginSkinObject(soContents);
        view.initialize(viewComposite);
        soContents.addListener(new SWTSkinObjectListener(){
          @Override public Object eventOccured(          SWTSkinObject skinObject,          int eventType,          Object params){
            if (eventType == SWTSkinObjectListener.EVENT_OBFUSCATE) {
              Map data=new HashMap();
              data.put(""String_Node_Str"",(Image)params);
              data.put(""String_Node_Str"",false);
              view.triggerEvent(UISWTViewEvent.TYPE_OBFUSCATE,data);
            }
            return null;
          }
        }
);
        if (PAINT_BG) {
          if (swtItem != null) {
            swtItem.setText(view.getFullTitle());
          }
        }
        Composite iviewComposite=view.getComposite();
        control=iviewComposite;
        if (doGridLayout) {
          Object existingLayoutData=iviewComposite.getLayoutData();
          Object existingParentLayoutData=iviewComposite.getParent().getLayoutData();
          if (existingLayoutData == null || !(existingLayoutData instanceof GridData) && (existingParentLayoutData instanceof GridLayout)) {
            GridData gridData=new GridData(GridData.FILL_BOTH);
            iviewComposite.setLayoutData(gridData);
          }
        }
        parent.layout(true,true);
        final UIUpdater updater=UIUpdaterSWT.getInstance();
        if (updater != null) {
          updater.addUpdater(new UIUpdatable(){
            @Override public void updateUI(){
              if (viewComposite.isDisposed()) {
                updater.removeUpdater(this);
              }
 else {
                view.triggerEvent(UISWTViewEvent.TYPE_REFRESH,null);
              }
            }
            @Override public String getUpdateUIName(){
              return (""String_Node_Str"");
            }
          }
);
          if (event_listener instanceof IViewRequiresPeriodicUpdates) {
            updater.addPeriodicUpdater(new UIUpdatable(){
              @Override public void updateUI(){
                if (viewComposite.isDisposed()) {
                  updater.removePeriodicUpdater(this);
                }
 else {
                  event_listener.eventOccurred(new UISWTViewEvent(){
                    @Override public UISWTView getView(){
                      return null;
                    }
                    @Override public int getType(){
                      return (StatsView.EVENT_PERIODIC_UPDATE);
                    }
                    @Override public Object getData(){
                      return null;
                    }
                  }
);
                }
              }
              @Override public String getUpdateUIName(){
                return (""String_Node_Str"");
              }
            }
);
          }
        }
        soContents.setVisible(true);
        view.triggerEvent(UISWTViewEvent.TYPE_FOCUSGAINED,null);
        iviewComposite.addDisposeListener(new DisposeListener(){
          @Override public void widgetDisposed(          DisposeEvent arg0){
            view.triggerEvent(UISWTViewEvent.TYPE_DESTROY,null);
          }
        }
);
        return (soContents);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
    }
  }
  return (null);
}","public static SWTSkinObjectContainer buildStandAlone(SWTSkinObjectContainer soParent,String skinRef,SWTSkin skin,String parentID,String id,Object datasource,int controlType,TreeItem swtItem,UISWTViewEventListener original_event_listener,boolean listener_is_new){
  Control control=null;
  Composite parent=soParent.getComposite();
  if (skinRef != null) {
    Shell shell=parent.getShell();
    Cursor cursor=shell.getCursor();
    try {
      shell.setCursor(shell.getDisplay().getSystemCursor(SWT.CURSOR_WAIT));
      SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent,null);
      SWTSkinObject skinObject=skin.createSkinObject(id,skinRef,soContents,datasource);
      control=skinObject.getControl();
      control.setLayoutData(Utils.getFilledFormData());
      control.getParent().layout(true,true);
      soContents.setVisible(true);
      return (soContents);
    }
  finally {
      shell.setCursor(cursor);
    }
  }
 else {
    if ((original_event_listener instanceof UISWTViewCoreEventListenerEx && ((UISWTViewCoreEventListenerEx)original_event_listener).isCloneable()) || (original_event_listener instanceof UISWTViewEventListenerEx)) {
      final UISWTViewImpl view=new UISWTViewImpl(id,parentID,true);
      final UISWTViewEventListener event_listener=original_event_listener instanceof UISWTViewEventListenerEx ? ((UISWTViewEventListenerEx)original_event_listener).getClone() : ((UISWTViewCoreEventListenerEx)original_event_listener).getClone();
      try {
        view.setEventListener(event_listener,false);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
      view.setDatasource(datasource);
      try {
        SWTSkinObjectContainer soContents=(SWTSkinObjectContainer)skin.createSkinObject(""String_Node_Str"" + uniqueNumber++,SO_ID_ENTRY_WRAPPER,soParent);
        parent.setBackgroundMode(SWT.INHERIT_NONE);
        final Composite viewComposite=soContents.getComposite();
        boolean doGridLayout=true;
        if (controlType == CONTROLTYPE_SKINOBJECT) {
          doGridLayout=false;
        }
        if (doGridLayout) {
          GridLayout gridLayout=new GridLayout();
          gridLayout.horizontalSpacing=gridLayout.verticalSpacing=gridLayout.marginHeight=gridLayout.marginWidth=0;
          viewComposite.setLayout(gridLayout);
          viewComposite.setLayoutData(Utils.getFilledFormData());
        }
        view.setPluginSkinObject(soContents);
        view.initialize(viewComposite);
        viewComposite.setData(Utils.RELAYOUT_UP_STOP_HERE,true);
        soContents.addListener(new SWTSkinObjectListener(){
          @Override public Object eventOccured(          SWTSkinObject skinObject,          int eventType,          Object params){
            if (eventType == SWTSkinObjectListener.EVENT_OBFUSCATE) {
              Map data=new HashMap();
              data.put(""String_Node_Str"",(Image)params);
              data.put(""String_Node_Str"",false);
              view.triggerEvent(UISWTViewEvent.TYPE_OBFUSCATE,data);
            }
            return null;
          }
        }
);
        if (PAINT_BG) {
          if (swtItem != null) {
            swtItem.setText(view.getFullTitle());
          }
        }
        Composite iviewComposite=view.getComposite();
        control=iviewComposite;
        if (doGridLayout) {
          Object existingLayoutData=iviewComposite.getLayoutData();
          Object existingParentLayoutData=iviewComposite.getParent().getLayoutData();
          if (existingLayoutData == null || !(existingLayoutData instanceof GridData) && (existingParentLayoutData instanceof GridLayout)) {
            GridData gridData=new GridData(GridData.FILL_BOTH);
            iviewComposite.setLayoutData(gridData);
          }
        }
        parent.layout(true,true);
        final UIUpdater updater=UIUpdaterSWT.getInstance();
        if (updater != null) {
          updater.addUpdater(new UIUpdatable(){
            @Override public void updateUI(){
              if (viewComposite.isDisposed()) {
                updater.removeUpdater(this);
              }
 else {
                view.triggerEvent(UISWTViewEvent.TYPE_REFRESH,null);
              }
            }
            @Override public String getUpdateUIName(){
              return (""String_Node_Str"");
            }
          }
);
          if (event_listener instanceof IViewRequiresPeriodicUpdates) {
            updater.addPeriodicUpdater(new UIUpdatable(){
              @Override public void updateUI(){
                if (viewComposite.isDisposed()) {
                  updater.removePeriodicUpdater(this);
                }
 else {
                  event_listener.eventOccurred(new UISWTViewEvent(){
                    @Override public UISWTView getView(){
                      return null;
                    }
                    @Override public int getType(){
                      return (StatsView.EVENT_PERIODIC_UPDATE);
                    }
                    @Override public Object getData(){
                      return null;
                    }
                  }
);
                }
              }
              @Override public String getUpdateUIName(){
                return (""String_Node_Str"");
              }
            }
);
          }
        }
        soContents.setVisible(true);
        view.triggerEvent(UISWTViewEvent.TYPE_FOCUSGAINED,null);
        iviewComposite.addDisposeListener(new DisposeListener(){
          @Override public void widgetDisposed(          DisposeEvent arg0){
            view.triggerEvent(UISWTViewEvent.TYPE_DESTROY,null);
          }
        }
);
        return (soContents);
      }
 catch (      Throwable e) {
        Debug.out(e);
      }
    }
  }
  return (null);
}",0.994360086767896
170774,"@Override public void tableStructureChanged(boolean columnAddedOrRemoved,Class forPluginDataSourceType){
  if (forPluginDataSourceType != null && !forPluginDataSourceType.equals(getDataSourceType())) {
    return;
  }
  triggerLifeCycleListener(TableLifeCycleListener.EVENT_TABLELIFECYCLE_DESTROYED);
  DATASOURCETYPE[] unfilteredDS;
synchronized (rows_sync) {
    unfilteredDS=(DATASOURCETYPE[])listUnfilteredDataSources.keySet().toArray();
  }
  if (DEBUGADDREMOVE) {
    debug(""String_Node_Str"" + unfilteredDS.length);
  }
  removeAllTableRows();
  processDataSourceQueueSync();
  if (columnAddedOrRemoved) {
    tableColumns=TableColumnManager.getInstance().getAllTableColumnCoreAsArray(getDataSourceType(),tableID);
    ArrayList<TableColumnCore> listVisibleColumns=new ArrayList<>();
    for (    TableColumnCore column : tableColumns) {
      if (column.isVisible()) {
        listVisibleColumns.add(column);
      }
    }
    Collections.sort(listVisibleColumns,new Comparator<TableColumnCore>(){
      @Override public int compare(      TableColumnCore o1,      TableColumnCore o2){
        if (o1 == o2) {
          return 0;
        }
        int diff=o1.getPosition() - o2.getPosition();
        return diff;
      }
    }
);
    columnsOrdered=listVisibleColumns.toArray(new TableColumnCore[0]);
  }
  refreshTable(false);
  triggerLifeCycleListener(TableLifeCycleListener.EVENT_TABLELIFECYCLE_INITIALIZED);
  if (listUnfilteredDataSources.size() == 0) {
    addDataSources(unfilteredDS);
  }
}","@Override public void tableStructureChanged(boolean columnAddedOrRemoved,Class forPluginDataSourceType){
  if (forPluginDataSourceType != null && !forPluginDataSourceType.equals(getDataSourceType())) {
    return;
  }
  triggerLifeCycleListener(TableLifeCycleListener.EVENT_TABLELIFECYCLE_DESTROYED);
  DATASOURCETYPE[] unfilteredDS;
synchronized (rows_sync) {
    unfilteredDS=(DATASOURCETYPE[])listUnfilteredDataSources.keySet().toArray();
  }
  if (DEBUGADDREMOVE) {
    debug(""String_Node_Str"" + unfilteredDS.length);
  }
  removeAllTableRows();
  processDataSourceQueueSync();
  boolean orderChanged=false;
  if (columnsOrdered.length > 1 && !columnAddedOrRemoved) {
    for (int i=0; i < columnsOrdered.length - 2; i++) {
      if (columnsOrdered[i].getPosition() > columnsOrdered[i + 1].getPosition()) {
        orderChanged=true;
        break;
      }
    }
  }
  if (columnAddedOrRemoved || orderChanged) {
    tableColumns=TableColumnManager.getInstance().getAllTableColumnCoreAsArray(getDataSourceType(),tableID);
    ArrayList<TableColumnCore> listVisibleColumns=new ArrayList<>();
    for (    TableColumnCore column : tableColumns) {
      if (column.isVisible()) {
        listVisibleColumns.add(column);
      }
    }
    Collections.sort(listVisibleColumns,new Comparator<TableColumnCore>(){
      @Override public int compare(      TableColumnCore o1,      TableColumnCore o2){
        if (o1 == o2) {
          return 0;
        }
        int diff=o1.getPosition() - o2.getPosition();
        return diff;
      }
    }
);
    columnsOrdered=listVisibleColumns.toArray(new TableColumnCore[0]);
  }
  refreshTable(false);
  triggerLifeCycleListener(TableLifeCycleListener.EVENT_TABLELIFECYCLE_INITIALIZED);
  if (listUnfilteredDataSources.size() == 0) {
    addDataSources(unfilteredDS);
  }
}",0.9056944862910516
170775,"/** 
 * SubMenu for column specific tasks.
 * @param iColumn Column # that tasks apply to.
 */
public void fillColumnMenu(final Menu menu,final TableColumnCore column,boolean isBlankArea){
  String tableID=tv.getTableID();
  int hiddenColumnCount=0;
  if (!isBlankArea) {
    TableColumnManager tcm=TableColumnManager.getInstance();
    TableColumnCore[] allTableColumns=tcm.getAllTableColumnCoreAsArray(tv.getDataSourceType(),tableID);
    Arrays.sort(allTableColumns,TableColumnManager.getTableColumnOrderComparator());
    for (    final TableColumnCore tc : allTableColumns) {
      boolean visible=tc.isVisible();
      if (!visible) {
        TableColumnInfo columnInfo=tcm.getColumnInfo(tv.getDataSourceType(),tableID,tc.getName());
        if (columnInfo.getProficiency() != TableColumnInfo.PROFICIENCY_BEGINNER) {
          hiddenColumnCount++;
          continue;
        }
      }
      MenuItem menuItem=new MenuItem(menu,SWT.CHECK);
      Messages.setLanguageText(menuItem,tc.getTitleLanguageKey());
      if (visible) {
        menuItem.setSelection(true);
      }
      menuItem.addListener(SWT.Selection,new Listener(){
        @Override public void handleEvent(        Event e){
          tc.setVisible(!tc.isVisible());
          TableColumnManager tcm=TableColumnManager.getInstance();
          String tableID=tv.getTableID();
          tcm.saveTableColumns(tv.getDataSourceType(),tableID);
          if (tv instanceof TableStructureModificationListener) {
            ((TableStructureModificationListener)tv).tableStructureChanged(true,null);
          }
        }
      }
);
    }
  }
  if (hiddenColumnCount > 0) {
    MenuItem itemMoreHidden=new MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemMoreHidden,""String_Node_Str"",new String[]{String.valueOf(hiddenColumnCount)});
    itemMoreHidden.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        showColumnEditor();
      }
    }
);
  }
  if (menu.getItemCount() > 0) {
    new MenuItem(menu,SWT.SEPARATOR);
  }
  if (column != null) {
    final MenuItem renameColumn=new MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(renameColumn,""String_Node_Str"");
    renameColumn.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        SimpleTextEntryWindow entryWindow=new SimpleTextEntryWindow(""String_Node_Str"",""String_Node_Str"");
        String existing_name=column.getNameOverride();
        if (existing_name == null) {
          existing_name=""String_Node_Str"";
        }
        entryWindow.setPreenteredText(existing_name,false);
        entryWindow.selectPreenteredText(true);
        entryWindow.prompt(new UIInputReceiverListener(){
          @Override public void UIInputReceiverClosed(          UIInputReceiver entryWindow){
            if (!entryWindow.hasSubmittedInput()) {
              return;
            }
            String name=entryWindow.getSubmittedInput().trim();
            if (name.length() == 0) {
              name=null;
            }
            column.setNameOverride(name);
            TableColumnManager tcm=TableColumnManager.getInstance();
            String tableID=tv.getTableID();
            tcm.saveTableColumns(tv.getDataSourceType(),tableID);
            TableStructureEventDispatcher.getInstance(tableID).tableStructureChanged(true,null);
          }
        }
);
      }
    }
);
    final MenuItem itemPrefSize=new MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemPrefSize,""String_Node_Str"");
    itemPrefSize.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        Utils.execSWTThread(new Runnable(){
          @Override public void run(){
            column.setPreferredWidth(-1);
            tv.runForAllRows(new TableGroupRowRunner(){
              @Override public void run(              TableRowCore row){
                row.fakeRedraw(column.getName());
              }
            }
);
            int pref=column.getPreferredWidth();
            if (pref != -1) {
              column.setWidth(pref);
            }
          }
        }
);
      }
    }
);
  }
  final MenuItem itemResetColumns=new MenuItem(menu,SWT.PUSH);
  Messages.setLanguageText(itemResetColumns,""String_Node_Str"");
  itemResetColumns.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      String tableID=tv.getTableID();
      TableColumnManager tcm=TableColumnManager.getInstance();
      tcm.resetColumns(tv.getDataSourceType(),tableID);
    }
  }
);
  final MenuItem itemChangeTable=new MenuItem(menu,SWT.PUSH);
  Messages.setLanguageText(itemChangeTable,""String_Node_Str"");
  Utils.setMenuItemImage(itemChangeTable,""String_Node_Str"");
  itemChangeTable.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      showColumnEditor();
    }
  }
);
  menu.setData(""String_Node_Str"",column);
  if (column == null) {
    return;
  }
  String sColumnName=column.getName();
  if (sColumnName != null) {
    Object[] listeners=listenersMenuFill.toArray();
    for (int i=0; i < listeners.length; i++) {
      TableViewSWTMenuFillListener l=(TableViewSWTMenuFillListener)listeners[i];
      l.addThisColumnSubMenu(sColumnName,menu);
    }
  }
  final MenuItem at_item=new MenuItem(menu,SWT.CHECK);
  Messages.setLanguageText(at_item,""String_Node_Str"");
  at_item.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      TableColumnCore tcc=(TableColumnCore)menu.getData(""String_Node_Str"");
      tcc.setAutoTooltip(at_item.getSelection());
      tcc.invalidateCells();
    }
  }
);
  at_item.setSelection(column.doesAutoTooltip());
  TableContextMenuItem[] items=column.getContextMenuItems(TableColumnCore.MENU_STYLE_HEADER);
  if (items.length > 0) {
    new MenuItem(menu,SWT.SEPARATOR);
    MenuBuildUtils.addPluginMenuItems(items,menu,true,true,new MenuBuildUtils.MenuItemPluginMenuControllerImpl(tv.getSelectedDataSources(true)));
  }
}","/** 
 * SubMenu for column specific tasks.
 * @param iColumn Column # that tasks apply to.
 */
public void fillColumnMenu(final Menu menu,final TableColumnCore column,boolean isBlankArea){
  String tableID=tv.getTableID();
  int hiddenColumnCount=0;
  if (!isBlankArea) {
    TableColumnManager tcm=TableColumnManager.getInstance();
    TableColumnCore[] allTableColumns=tcm.getAllTableColumnCoreAsArray(tv.getDataSourceType(),tableID);
    Arrays.sort(allTableColumns,TableColumnManager.getTableColumnOrderComparator());
    for (    final TableColumnCore tc : allTableColumns) {
      boolean visible=tc.isVisible();
      if (!visible) {
        TableColumnInfo columnInfo=tcm.getColumnInfo(tv.getDataSourceType(),tableID,tc.getName());
        if (columnInfo.getProficiency() != TableColumnInfo.PROFICIENCY_BEGINNER) {
          hiddenColumnCount++;
          continue;
        }
      }
      MenuItem menuItem=new MenuItem(menu,SWT.CHECK);
      Messages.setLanguageText(menuItem,tc.getTitleLanguageKey());
      if (visible) {
        menuItem.setSelection(true);
      }
      menuItem.addListener(SWT.Selection,new Listener(){
        @Override public void handleEvent(        Event e){
          tc.setVisible(!tc.isVisible());
          TableColumnManager tcm=TableColumnManager.getInstance();
          String tableID=tv.getTableID();
          tcm.saveTableColumns(tv.getDataSourceType(),tableID);
          if (tv instanceof TableStructureModificationListener) {
            ((TableStructureModificationListener)tv).tableStructureChanged(true,null);
          }
          TableStructureEventDispatcher.getInstance(tableID).tableStructureChanged(true,null);
        }
      }
);
    }
  }
  if (hiddenColumnCount > 0) {
    MenuItem itemMoreHidden=new MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemMoreHidden,""String_Node_Str"",new String[]{String.valueOf(hiddenColumnCount)});
    itemMoreHidden.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        showColumnEditor();
      }
    }
);
  }
  if (menu.getItemCount() > 0) {
    new MenuItem(menu,SWT.SEPARATOR);
  }
  if (column != null) {
    final MenuItem renameColumn=new MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(renameColumn,""String_Node_Str"");
    renameColumn.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        SimpleTextEntryWindow entryWindow=new SimpleTextEntryWindow(""String_Node_Str"",""String_Node_Str"");
        String existing_name=column.getNameOverride();
        if (existing_name == null) {
          existing_name=""String_Node_Str"";
        }
        entryWindow.setPreenteredText(existing_name,false);
        entryWindow.selectPreenteredText(true);
        entryWindow.prompt(new UIInputReceiverListener(){
          @Override public void UIInputReceiverClosed(          UIInputReceiver entryWindow){
            if (!entryWindow.hasSubmittedInput()) {
              return;
            }
            String name=entryWindow.getSubmittedInput().trim();
            if (name.length() == 0) {
              name=null;
            }
            column.setNameOverride(name);
            TableColumnManager tcm=TableColumnManager.getInstance();
            String tableID=tv.getTableID();
            tcm.saveTableColumns(tv.getDataSourceType(),tableID);
            TableStructureEventDispatcher.getInstance(tableID).tableStructureChanged(true,null);
          }
        }
);
      }
    }
);
    final MenuItem itemPrefSize=new MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemPrefSize,""String_Node_Str"");
    itemPrefSize.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event e){
        Utils.execSWTThread(new Runnable(){
          @Override public void run(){
            column.setPreferredWidth(-1);
            tv.runForAllRows(new TableGroupRowRunner(){
              @Override public void run(              TableRowCore row){
                row.fakeRedraw(column.getName());
              }
            }
);
            int pref=column.getPreferredWidth();
            if (pref != -1) {
              column.setWidth(pref);
            }
          }
        }
);
      }
    }
);
  }
  final MenuItem itemResetColumns=new MenuItem(menu,SWT.PUSH);
  Messages.setLanguageText(itemResetColumns,""String_Node_Str"");
  itemResetColumns.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      String tableID=tv.getTableID();
      TableColumnManager tcm=TableColumnManager.getInstance();
      tcm.resetColumns(tv.getDataSourceType(),tableID);
    }
  }
);
  final MenuItem itemChangeTable=new MenuItem(menu,SWT.PUSH);
  Messages.setLanguageText(itemChangeTable,""String_Node_Str"");
  Utils.setMenuItemImage(itemChangeTable,""String_Node_Str"");
  itemChangeTable.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      showColumnEditor();
    }
  }
);
  menu.setData(""String_Node_Str"",column);
  if (column == null) {
    return;
  }
  String sColumnName=column.getName();
  if (sColumnName != null) {
    Object[] listeners=listenersMenuFill.toArray();
    for (int i=0; i < listeners.length; i++) {
      TableViewSWTMenuFillListener l=(TableViewSWTMenuFillListener)listeners[i];
      l.addThisColumnSubMenu(sColumnName,menu);
    }
  }
  final MenuItem at_item=new MenuItem(menu,SWT.CHECK);
  Messages.setLanguageText(at_item,""String_Node_Str"");
  at_item.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      TableColumnCore tcc=(TableColumnCore)menu.getData(""String_Node_Str"");
      tcc.setAutoTooltip(at_item.getSelection());
      tcc.invalidateCells();
    }
  }
);
  at_item.setSelection(column.doesAutoTooltip());
  TableContextMenuItem[] items=column.getContextMenuItems(TableColumnCore.MENU_STYLE_HEADER);
  if (items.length > 0) {
    new MenuItem(menu,SWT.SEPARATOR);
    MenuBuildUtils.addPluginMenuItems(items,menu,true,true,new MenuBuildUtils.MenuItemPluginMenuControllerImpl(tv.getSelectedDataSources(true)));
  }
}",0.9921932780014792
170776,"@Override public boolean eventOccurred(UISWTViewEvent event){
switch (event.getType()) {
case UISWTViewEvent.TYPE_CREATE:
{
      if (event instanceof UISWTViewEventImpl) {
        String parent=((UISWTViewEventImpl)event).getParentID();
        enable_tabs=parent != null && parent.equals(UISWTInstance.VIEW_TORRENT_DETAILS);
      }
      break;
    }
case UISWTViewEvent.TYPE_FOCUSGAINED:
  String id=""String_Node_Str"";
setFocused(true);
if (manager != null) {
if (manager.getTorrent() != null) {
  id+=""String_Node_Str"" + manager.getInternalName();
}
 else {
  id+=""String_Node_Str"" + manager.getSize();
}
SelectedContentManager.changeCurrentlySelectedContent(id,new SelectedContent[]{new SelectedContent(manager)});
}
 else {
SelectedContentManager.changeCurrentlySelectedContent(id,null);
}
break;
case UISWTViewEvent.TYPE_FOCUSLOST:
setFocused(false);
SelectedContentManager.clearCurrentlySelectedContent();
break;
}
return (super.eventOccurred(event));
}","@Override public boolean eventOccurred(UISWTViewEvent event){
switch (event.getType()) {
case UISWTViewEvent.TYPE_CREATE:
{
      if (event instanceof UISWTViewEventImpl) {
        String parent=((UISWTViewEventImpl)event).getParentID();
        enable_tabs=parent != null && parent.equals(UISWTInstance.VIEW_TORRENT_DETAILS);
      }
      break;
    }
case UISWTViewEvent.TYPE_FOCUSGAINED:
  updateSelectedContent();
break;
case UISWTViewEvent.TYPE_FOCUSLOST:
setFocused(false);
SelectedContentManager.clearCurrentlySelectedContent();
break;
}
return (super.eventOccurred(event));
}",0.7244501940491591
170777,"protected TableViewSWT<PEPeer> initYourTableView(String table_id,boolean enable_tabs){
  if (table_id == TableManager.TABLE_TORRENT_PEERS) {
    tv=TableViewFactory.createTableViewSWT(Peer.class,TableManager.TABLE_TORRENT_PEERS,getPropertiesPrefix(),basicItems,""String_Node_Str"",SWT.MULTI | SWT.FULL_SELECTION | SWT.VIRTUAL);
  }
 else {
    TableColumnCore[] items=PeersView.getBasicColumnItems(TableManager.TABLE_ALL_PEERS);
    TableColumnCore[] basicItems=new TableColumnCore[items.length + 1];
    System.arraycopy(items,0,basicItems,0,items.length);
    basicItems[items.length]=new DownloadNameItem(TableManager.TABLE_ALL_PEERS);
    TableColumnManager tcManager=TableColumnManager.getInstance();
    tcManager.setDefaultColumnNames(TableManager.TABLE_ALL_PEERS,basicItems);
    tv=TableViewFactory.createTableViewSWT(Peer.class,TableManager.TABLE_ALL_PEERS,getPropertiesPrefix(),basicItems,""String_Node_Str"",SWT.MULTI | SWT.FULL_SELECTION | SWT.VIRTUAL);
  }
  tv.setRowDefaultHeightEM(1);
  tv.setEnableTabViews(enable_tabs,true,null);
  UIFunctionsSWT uiFunctions=UIFunctionsManagerSWT.getUIFunctionsSWT();
  if (uiFunctions != null) {
    UISWTInstance pluginUI=uiFunctions.getUISWTInstance();
    registerPluginViews(table_id,pluginUI);
  }
  tv.addLifeCycleListener(this);
  tv.addMenuFillListener(this);
  return tv;
}","protected TableViewSWT<PEPeer> initYourTableView(String table_id,boolean enable_tabs){
  if (table_id == TableManager.TABLE_TORRENT_PEERS) {
    tv=TableViewFactory.createTableViewSWT(Peer.class,TableManager.TABLE_TORRENT_PEERS,getPropertiesPrefix(),basicItems,""String_Node_Str"",SWT.MULTI | SWT.FULL_SELECTION | SWT.VIRTUAL);
  }
 else {
    TableColumnCore[] items=PeersView.getBasicColumnItems(TableManager.TABLE_ALL_PEERS);
    TableColumnCore[] basicItems=new TableColumnCore[items.length + 1];
    System.arraycopy(items,0,basicItems,0,items.length);
    basicItems[items.length]=new DownloadNameItem(TableManager.TABLE_ALL_PEERS);
    TableColumnManager tcManager=TableColumnManager.getInstance();
    tcManager.setDefaultColumnNames(TableManager.TABLE_ALL_PEERS,basicItems);
    tv=TableViewFactory.createTableViewSWT(Peer.class,TableManager.TABLE_ALL_PEERS,getPropertiesPrefix(),basicItems,""String_Node_Str"",SWT.MULTI | SWT.FULL_SELECTION | SWT.VIRTUAL);
  }
  tv.setRowDefaultHeightEM(1);
  tv.setEnableTabViews(enable_tabs,true,null);
  UIFunctionsSWT uiFunctions=UIFunctionsManagerSWT.getUIFunctionsSWT();
  if (uiFunctions != null) {
    UISWTInstance pluginUI=uiFunctions.getUISWTInstance();
    registerPluginViews(table_id,pluginUI);
  }
  tv.addLifeCycleListener(this);
  tv.addMenuFillListener(this);
  tv.addSelectionListener(this,false);
  return tv;
}",0.9803921568627452
170778,"@Override public TableViewSWT<PEPiece> initYourTableView(){
  tv=TableViewFactory.createTableViewSWT(PEPiece.class,TableManager.TABLE_TORRENT_PIECES,getPropertiesPrefix(),basicItems,basicItems[0].getName(),SWT.SINGLE | SWT.FULL_SELECTION | SWT.VIRTUAL);
  tv.setEnableTabViews(enable_tabs,true,null);
  UIFunctionsSWT uiFunctions=UIFunctionsManagerSWT.getUIFunctionsSWT();
  if (uiFunctions != null) {
    UISWTInstance pluginUI=uiFunctions.getUISWTInstance();
    registerPluginViews(pluginUI);
  }
  tv.addTableDataSourceChangedListener(this,true);
  tv.addMenuFillListener(this);
  tv.addLifeCycleListener(this);
  return tv;
}","@Override public TableViewSWT<PEPiece> initYourTableView(){
  tv=TableViewFactory.createTableViewSWT(PEPiece.class,TableManager.TABLE_TORRENT_PIECES,getPropertiesPrefix(),basicItems,basicItems[0].getName(),SWT.SINGLE | SWT.FULL_SELECTION | SWT.VIRTUAL);
  tv.setEnableTabViews(enable_tabs,true,null);
  UIFunctionsSWT uiFunctions=UIFunctionsManagerSWT.getUIFunctionsSWT();
  if (uiFunctions != null) {
    UISWTInstance pluginUI=uiFunctions.getUISWTInstance();
    registerPluginViews(pluginUI);
  }
  tv.addTableDataSourceChangedListener(this,true);
  tv.addMenuFillListener(this);
  tv.addLifeCycleListener(this);
  tv.addSelectionListener(this,false);
  return tv;
}",0.9699769053117784
170779,"@Override public boolean eventOccurred(UISWTViewEvent event){
switch (event.getType()) {
case UISWTViewEvent.TYPE_CREATE:
{
      if (event instanceof UISWTViewEventImpl) {
        String parent=((UISWTViewEventImpl)event).getParentID();
        enable_tabs=parent != null && parent.equals(UISWTInstance.VIEW_TORRENT_DETAILS);
      }
      break;
    }
case UISWTViewEvent.TYPE_FOCUSGAINED:
  String id=""String_Node_Str"";
setFocused(true);
if (manager != null) {
if (manager.getTorrent() != null) {
  id+=""String_Node_Str"" + manager.getInternalName();
}
 else {
  id+=""String_Node_Str"" + manager.getSize();
}
SelectedContentManager.changeCurrentlySelectedContent(id,new SelectedContent[]{new SelectedContent(manager)});
}
 else {
SelectedContentManager.changeCurrentlySelectedContent(id,null);
}
break;
case UISWTViewEvent.TYPE_FOCUSLOST:
setFocused(false);
SelectedContentManager.clearCurrentlySelectedContent();
break;
}
return (super.eventOccurred(event));
}","@Override public boolean eventOccurred(UISWTViewEvent event){
switch (event.getType()) {
case UISWTViewEvent.TYPE_CREATE:
{
      if (event instanceof UISWTViewEventImpl) {
        String parent=((UISWTViewEventImpl)event).getParentID();
        enable_tabs=parent != null && parent.equals(UISWTInstance.VIEW_TORRENT_DETAILS);
      }
      break;
    }
case UISWTViewEvent.TYPE_FOCUSGAINED:
  setFocused(true);
updateSelectedContent();
break;
case UISWTViewEvent.TYPE_FOCUSLOST:
setFocused(false);
SelectedContentManager.clearCurrentlySelectedContent();
break;
}
return (super.eventOccurred(event));
}",0.7583120204603581
170780,"public static void relayoutUp(Composite c){
  while (c != null && !c.isDisposed()) {
    Composite newParent=c.getParent();
    if (newParent == null) {
      break;
    }
    try {
      newParent.layout(new Control[]{c});
    }
 catch (    SWTException e) {
    }
catch (    NullPointerException e) {
    }
    c=newParent;
  }
}","public static void relayoutUp(Composite c){
  while (c != null && !c.isDisposed()) {
    Composite newParent=c.getParent();
    if (newParent == null) {
      break;
    }
    if (newParent.getData(RELAYOUT_UP_STOP_HERE) != null) {
      break;
    }
    try {
      newParent.layout(new Control[]{c});
    }
 catch (    SWTException e) {
    }
catch (    NullPointerException e) {
    }
    c=newParent;
  }
}",0.893387314439946
170781,"private Composite build(Composite sf,final DashboardItem item,boolean use_tabs){
  Composite g=use_tabs ? new Composite(sf,SWT.NULL) : new Group(sf,SWT.NULL);
  g.setLayoutData(Utils.getFilledFormData());
  g.setLayout(new GridLayout());
  try {
    if (g instanceof Group) {
      ((Group)g).setText(item.getTitle());
    }
    Composite menu_comp=use_tabs ? sf : g;
    Menu menu=new Menu(menu_comp);
    org.eclipse.swt.widgets.MenuItem itemReload=new org.eclipse.swt.widgets.MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemReload,""String_Node_Str"");
    final Runnable reload_action=new Runnable(){
      public void run(){
        if (Utils.isSWTThread()) {
          if (!g.isDisposed()) {
            Utils.disposeComposite(g,false);
            SkinnedComposite skinned_comp=new SkinnedComposite(g);
            SWTSkin skin=skinned_comp.getSkin();
            BaseMdiEntry.importStandAlone((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str""),item.getState(),this);
            Control c=((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str"")).getControl();
            c.setLayoutData(Utils.getFilledFormData());
            g.layout(true,true);
          }
        }
 else {
          Utils.execSWTThread(this);
        }
      }
    }
;
    sf.setData(reload_action);
    itemReload.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        reload_action.run();
      }
    }
);
    org.eclipse.swt.widgets.MenuItem itemPop=new org.eclipse.swt.widgets.MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemPop,""String_Node_Str"");
    itemPop.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        SkinnedDialog skinnedDialog=new SkinnedDialog(""String_Node_Str"",""String_Node_Str"",null,SWT.RESIZE | SWT.MAX | SWT.DIALOG_TRIM);
        SWTSkin skin=skinnedDialog.getSkin();
        SWTSkinObjectContainer cont=BaseMdiEntry.importStandAlone((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str""),item.getState(),null);
        if (cont != null) {
          skinnedDialog.setTitle(item.getTitle());
          skinnedDialog.open();
        }
 else {
          skinnedDialog.close();
        }
      }
    }
);
    new org.eclipse.swt.widgets.MenuItem(menu,SWT.SEPARATOR);
    org.eclipse.swt.widgets.MenuItem itemRemove=new org.eclipse.swt.widgets.MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemRemove,""String_Node_Str"");
    Utils.setMenuItemImage(itemRemove,""String_Node_Str"");
    itemRemove.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        item.remove();
      }
    }
);
    menu_comp.setMenu(menu);
    SkinnedComposite skinned_comp=new SkinnedComposite(g);
    SWTSkin skin=skinned_comp.getSkin();
    BaseMdiEntry.importStandAlone((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str""),item.getState(),reload_action);
    Control c=((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str"")).getControl();
    c.setLayoutData(Utils.getFilledFormData());
    c.addListener(SWT.Show,new Listener(){
      @Override public void handleEvent(      Event arg0){
        g.layout(true,true);
      }
    }
);
  }
 catch (  Throwable e) {
    Debug.out(e);
  }
  return (g);
}","private Composite build(Composite sf,final DashboardItem item,boolean use_tabs){
  Composite g=use_tabs ? new Composite(sf,SWT.NULL) : new Group(sf,SWT.NULL);
  g.setLayoutData(Utils.getFilledFormData());
  g.setLayout(new GridLayout());
  g.setData(Utils.RELAYOUT_UP_STOP_HERE,true);
  try {
    if (g instanceof Group) {
      ((Group)g).setText(item.getTitle());
    }
    Composite menu_comp=use_tabs ? sf : g;
    Menu menu=new Menu(menu_comp);
    org.eclipse.swt.widgets.MenuItem itemReload=new org.eclipse.swt.widgets.MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemReload,""String_Node_Str"");
    final Runnable reload_action=new Runnable(){
      public void run(){
        if (Utils.isSWTThread()) {
          if (!g.isDisposed()) {
            Utils.disposeComposite(g,false);
            SkinnedComposite skinned_comp=new SkinnedComposite(g);
            SWTSkin skin=skinned_comp.getSkin();
            BaseMdiEntry.importStandAlone((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str""),item.getState(),this);
            Control c=((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str"")).getControl();
            c.setLayoutData(Utils.getFilledFormData());
            g.layout(true,true);
          }
        }
 else {
          Utils.execSWTThread(this);
        }
      }
    }
;
    sf.setData(reload_action);
    itemReload.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        reload_action.run();
      }
    }
);
    org.eclipse.swt.widgets.MenuItem itemPop=new org.eclipse.swt.widgets.MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemPop,""String_Node_Str"");
    itemPop.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        SkinnedDialog skinnedDialog=new SkinnedDialog(""String_Node_Str"",""String_Node_Str"",null,SWT.RESIZE | SWT.MAX | SWT.DIALOG_TRIM);
        SWTSkin skin=skinnedDialog.getSkin();
        SWTSkinObjectContainer cont=BaseMdiEntry.importStandAlone((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str""),item.getState(),null);
        if (cont != null) {
          skinnedDialog.setTitle(item.getTitle());
          skinnedDialog.open();
        }
 else {
          skinnedDialog.close();
        }
      }
    }
);
    new org.eclipse.swt.widgets.MenuItem(menu,SWT.SEPARATOR);
    org.eclipse.swt.widgets.MenuItem itemRemove=new org.eclipse.swt.widgets.MenuItem(menu,SWT.PUSH);
    Messages.setLanguageText(itemRemove,""String_Node_Str"");
    Utils.setMenuItemImage(itemRemove,""String_Node_Str"");
    itemRemove.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        item.remove();
      }
    }
);
    menu_comp.setMenu(menu);
    SkinnedComposite skinned_comp=new SkinnedComposite(g);
    SWTSkin skin=skinned_comp.getSkin();
    BaseMdiEntry.importStandAlone((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str""),item.getState(),reload_action);
    Control c=((SWTSkinObjectContainer)skin.getSkinObject(""String_Node_Str"")).getControl();
    c.setLayoutData(Utils.getFilledFormData());
    c.addListener(SWT.Show,new Listener(){
      @Override public void handleEvent(      Event arg0){
        g.layout(true,true);
      }
    }
);
  }
 catch (  Throwable e) {
    Debug.out(e);
  }
  return (g);
}",0.993038068434306
170782,"protected void setupServer(){
  try {
    if (!plugin_enabled) {
      if (tracker_context != null) {
        tracker_context.destroy();
        tracker_context=null;
      }
      return;
    }
    final int port=param_port.getValue();
    String protocol_str=param_protocol.getValue().trim();
    String bind_str=param_bind.getValue().trim();
    InetAddress bind_ip=null;
    if (bind_str.length() > 0) {
      try {
        bind_ip=InetAddress.getByName(bind_str);
      }
 catch (      Throwable e) {
      }
      if (bind_ip == null) {
        final NetworkAdmin na=NetworkAdmin.getSingleton();
        InetAddress[] addresses=na.resolveBindAddresses(bind_str);
        if (addresses.length > 0) {
          bind_ip=addresses[0];
          if (!na_intf_listener_added) {
            na_intf_listener_added=true;
            na.addPropertyChangeListener(new NetworkAdminPropertyChangeListener(){
              @Override public void propertyChanged(              String property){
                if (unloaded) {
                  na.removePropertyChangeListener(this);
                }
 else {
                  if (property == NetworkAdmin.PR_NETWORK_INTERFACES) {
                    new AEThread2(""String_Node_Str""){
                      @Override public void run(){
                        setupServer();
                      }
                    }
.start();
                  }
                }
              }
            }
);
          }
        }
      }
      if (bind_ip == null) {
        log.log(LoggerChannel.LT_ERROR,""String_Node_Str"" + bind_str + ""String_Node_Str"");
      }
    }
    if (tracker_context != null) {
      URL url=tracker_context.getURLs()[0];
      String existing_protocol=url.getProtocol();
      int existing_port=url.getPort() == -1 ? url.getDefaultPort() : url.getPort();
      InetAddress existing_bind_ip=tracker_context.getBindIP();
      if (existing_port == port && existing_protocol.equalsIgnoreCase(protocol_str) && sameAddress(bind_ip,existing_bind_ip)) {
        return;
      }
      tracker_context.destroy();
      tracker_context=null;
    }
    int protocol=protocol_str.equalsIgnoreCase(""String_Node_Str"") ? Tracker.PR_HTTP : Tracker.PR_HTTPS;
    Map<String,Object> tc_properties=new HashMap<>();
    Boolean prop_non_blocking=(Boolean)properties.get(PR_NON_BLOCKING);
    if (prop_non_blocking != null && prop_non_blocking) {
      tc_properties.put(Tracker.PR_NON_BLOCKING,true);
    }
    log.log(LoggerChannel.LT_INFORMATION,""String_Node_Str"" + port + (bind_ip == null ? ""String_Node_Str"" : (""String_Node_Str"" + bind_str + ""String_Node_Str""+ bind_ip+ ""String_Node_Str""))+ ""String_Node_Str""+ protocol_str+ (root_dir.length() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + root_dir))+ (properties.size() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + properties)));
    tracker_context=plugin_interface.getTracker().createWebContext(Constants.APP_NAME + ""String_Node_Str"" + plugin_interface.getPluginName(),port,protocol,bind_ip,tc_properties);
    Boolean prop_enable_i2p=(Boolean)properties.get(PR_ENABLE_I2P);
    if (prop_enable_i2p == null || prop_enable_i2p) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_I2P,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_i2p_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_i2p_dest.getValue().equals(host)) {
              param_i2p_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean prop_enable_tor=(Boolean)properties.get(PR_ENABLE_TOR);
    if (prop_enable_tor == null || prop_enable_tor) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_TOR,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_tor_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_tor_dest.getValue().equals(host)) {
              param_tor_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean pr_enable_keep_alive=(Boolean)properties.get(PR_ENABLE_KEEP_ALIVE);
    if (pr_enable_keep_alive != null && pr_enable_keep_alive) {
      tracker_context.setEnableKeepAlive(true);
    }
    tracker_context.addPageGenerator(this);
    tracker_context.addAuthenticationListener(new TrackerAuthenticationAdapter(){
      private String last_pw=""String_Node_Str"";
      private byte[] last_hash={};
      private final int DELAY=10 * 1000;
      private Map<String,Object[]> fail_map=new HashMap<>();
      @Override public boolean authenticate(      String headers,      URL resource,      String user,      String pw){
        long now=SystemTime.getMonotonousTime();
        String client_address=getHeaderField(headers,""String_Node_Str"");
        if (client_address == null) {
          client_address=""String_Node_Str"";
        }
synchronized (logout_timer) {
          Long logout_time=logout_timer.get(client_address);
          if (logout_time != null && now - logout_time <= LOGOUT_GRACE_MILLIS) {
            tls.set(GRACE_PERIOD_MARKER);
            return (true);
          }
        }
        boolean result=authenticateSupport(headers,resource,user,pw);
        if (!result) {
          if (!pw.equals(""String_Node_Str"")) {
            AESemaphore waiter=null;
synchronized (fail_map) {
              Object[] x=fail_map.get(client_address);
              if (x == null) {
                x=new Object[]{new AESemaphore(""String_Node_Str""),new Long(-1),new Long(-1),now};
                fail_map.put(client_address,x);
              }
 else {
                x[1]=x[2];
                x[2]=x[3];
                x[3]=now;
                long t=(Long)x[1];
                if (now - t < 10 * 1000) {
                  log(""String_Node_Str"" + client_address + ""String_Node_Str"");
                  x[2]=now + DELAY;
                  last_pw=""String_Node_Str"";
                  waiter=(AESemaphore)x[0];
                }
              }
            }
            if (waiter != null) {
              waiter.reserve(DELAY);
            }
          }
        }
 else {
synchronized (fail_map) {
            fail_map.remove(client_address);
          }
          String cookies=getHeaderField(headers,""String_Node_Str"");
          if (pairing_session_code != null) {
            if (cookies == null || !cookies.contains(pairing_session_code)) {
              tls.set(pairing_session_code);
            }
          }
        }
        recordAuthRequest(client_address,result);
        if (!result) {
        }
        return (result);
      }
      private boolean authenticateSupport(      String headers,      URL resource,      String user,      String pw){
        boolean result;
        boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
        if (!pw_enable.getValue()) {
          String whitelist=p_no_pw_whitelist.getValue().trim();
          if (whitelist.equals(""String_Node_Str"")) {
            result=true;
          }
 else {
            String actual_host=getHeaderField(headers,""String_Node_Str"");
            int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
            String referrer=getHeaderField(headers,""String_Node_Str"");
            if (actual_host.startsWith(""String_Node_Str"")) {
              int pos=actual_host.lastIndexOf(']');
              if (pos != -1) {
                String rem=actual_host.substring(pos + 1);
                actual_host=actual_host.substring(0,pos + 1);
                pos=rem.indexOf(':');
                if (pos != -1) {
                  actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
                }
              }
            }
 else {
              int pos=actual_host.indexOf(':');
              if (pos != -1) {
                actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
                actual_host=actual_host.substring(0,pos);
              }
            }
            String[] allowed=whitelist.split(""String_Node_Str"");
            result=false;
            String msg=""String_Node_Str"";
            if (actual_port != port) {
              msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
            }
 else {
              for (              String a : allowed) {
                a=a.trim();
                if (a.equals(""String_Node_Str"")) {
                  InetAddress bind=getServerBindIP();
                  if (bind != null) {
                    if (bind instanceof Inet6Address) {
                      a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
                    }
 else {
                      a=bind.getHostAddress();
                    }
                  }
                }
                if (actual_host.equals(a.trim())) {
                  result=true;
                  break;
                }
              }
              if (!result) {
                msg=""String_Node_Str"" + actual_host + ""String_Node_Str"";
              }
 else {
                if (referrer != null) {
                  result=false;
                  try {
                    URL url=new URL(referrer);
                    int ref_port=url.getPort();
                    if (ref_port == -1) {
                      ref_port=url.getDefaultPort();
                    }
                    if (ref_port == port) {
                      result=true;
                    }
                  }
 catch (                  Throwable e) {
                  }
                  if (!result) {
                    msg=""String_Node_Str"" + referrer;
                  }
                }
              }
            }
            if (!result) {
              log.log(""String_Node_Str"" + msg);
            }
          }
        }
 else {
          if (auto_auth) {
            user=user.trim().toLowerCase();
            pw=pw.toUpperCase();
          }
          if (!user.equals(p_user_name.getValue())) {
            result=false;
          }
 else {
            byte[] hash=last_hash;
            if (!last_pw.equals(pw)) {
              hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
              last_pw=pw;
              last_hash=hash;
            }
            result=Arrays.equals(hash,p_password.getValue());
          }
        }
        if (result) {
          checkCookieSet(headers,resource);
        }
 else         if (auto_auth) {
          int x=checkCookieSet(headers,resource);
          if (x == 1) {
            result=true;
          }
 else           if (x == 0) {
            result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
          }
        }
 else {
          result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
        }
        return (result);
      }
      /** 
 * @param headers
 * @param resource
 * @return 0 = unknown, 1 = ok, 2 = bad
 */
      private int checkCookieSet(      String headers,      URL resource){
        if (pairing_access_code == null) {
          return (2);
        }
        String[] locations={resource.getQuery(),getHeaderField(headers,""String_Node_Str"")};
        for (        String location : locations) {
          if (location != null) {
            boolean skip_fail=false;
            int param_len=0;
            int p1=location.indexOf(""String_Node_Str"");
            if (p1 == -1) {
              p1=location.indexOf(""String_Node_Str"");
              if (p1 != -1) {
                param_len=3;
                skip_fail=true;
              }
            }
 else {
              param_len=16;
            }
            if (p1 != -1) {
              int p2=location.indexOf('&',p1);
              String ac=location.substring(p1 + param_len,p2 == -1 ? location.length() : p2).trim();
              p2=ac.indexOf('#');
              if (p2 != -1) {
                ac=ac.substring(0,p2);
              }
              if (ac.equalsIgnoreCase(pairing_access_code)) {
                tls.set(pairing_session_code);
                return (1);
              }
 else {
                if (!skip_fail) {
                  return (2);
                }
              }
            }
          }
        }
        return (0);
      }
      private String getHeaderField(      String headers,      String field){
        String[] lines=headers.split(""String_Node_Str"");
        for (        String line : lines) {
          int pos=line.indexOf(':');
          if (pos != -1) {
            if (line.substring(0,pos).equalsIgnoreCase(field)) {
              return (line.substring(pos + 1).trim());
            }
          }
        }
        return (null);
      }
    }
);
  }
 catch (  TrackerException e) {
    log.log(""String_Node_Str"",e);
  }
}","protected void setupServer(){
  try {
    if (!plugin_enabled) {
      if (tracker_context != null) {
        tracker_context.destroy();
        tracker_context=null;
      }
      return;
    }
    final int port=param_port.getValue();
    String protocol_str=param_protocol.getValue().trim();
    String bind_str=param_bind.getValue().trim();
    InetAddress bind_ip=null;
    if (bind_str.length() > 0) {
      try {
        bind_ip=InetAddress.getByName(bind_str);
      }
 catch (      Throwable e) {
      }
      if (bind_ip == null) {
        final NetworkAdmin na=NetworkAdmin.getSingleton();
        InetAddress[] addresses=na.resolveBindAddresses(bind_str);
        if (addresses.length > 0) {
          bind_ip=addresses[0];
          if (!na_intf_listener_added) {
            na_intf_listener_added=true;
            na.addPropertyChangeListener(new NetworkAdminPropertyChangeListener(){
              @Override public void propertyChanged(              String property){
                if (unloaded) {
                  na.removePropertyChangeListener(this);
                }
 else {
                  if (property == NetworkAdmin.PR_NETWORK_INTERFACES) {
                    new AEThread2(""String_Node_Str""){
                      @Override public void run(){
                        setupServer();
                      }
                    }
.start();
                  }
                }
              }
            }
);
          }
        }
      }
      if (bind_ip == null) {
        log.log(LoggerChannel.LT_ERROR,""String_Node_Str"" + bind_str + ""String_Node_Str"");
      }
    }
    if (tracker_context != null) {
      URL url=tracker_context.getURLs()[0];
      String existing_protocol=url.getProtocol();
      int existing_port=url.getPort() == -1 ? url.getDefaultPort() : url.getPort();
      InetAddress existing_bind_ip=tracker_context.getBindIP();
      if (existing_port == port && existing_protocol.equalsIgnoreCase(protocol_str) && sameAddress(bind_ip,existing_bind_ip)) {
        return;
      }
      tracker_context.destroy();
      tracker_context=null;
    }
    int protocol=protocol_str.equalsIgnoreCase(""String_Node_Str"") ? Tracker.PR_HTTP : Tracker.PR_HTTPS;
    Map<String,Object> tc_properties=new HashMap<>();
    Boolean prop_non_blocking=(Boolean)properties.get(PR_NON_BLOCKING);
    if (prop_non_blocking != null && prop_non_blocking) {
      tc_properties.put(Tracker.PR_NON_BLOCKING,true);
    }
    log.log(LoggerChannel.LT_INFORMATION,""String_Node_Str"" + port + (bind_ip == null ? ""String_Node_Str"" : (""String_Node_Str"" + bind_str + ""String_Node_Str""+ bind_ip+ ""String_Node_Str""))+ ""String_Node_Str""+ protocol_str+ (root_dir.length() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + root_dir))+ (properties.size() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + properties)));
    tracker_context=plugin_interface.getTracker().createWebContext(Constants.APP_NAME + ""String_Node_Str"" + plugin_interface.getPluginName(),port,protocol,bind_ip,tc_properties);
    Boolean prop_enable_i2p=(Boolean)properties.get(PR_ENABLE_I2P);
    if (prop_enable_i2p == null || prop_enable_i2p) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_I2P,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_i2p_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_i2p_dest.getValue().equals(host)) {
              param_i2p_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean prop_enable_tor=(Boolean)properties.get(PR_ENABLE_TOR);
    if (prop_enable_tor == null || prop_enable_tor) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_TOR,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_tor_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_tor_dest.getValue().equals(host)) {
              param_tor_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean pr_enable_keep_alive=(Boolean)properties.get(PR_ENABLE_KEEP_ALIVE);
    if (pr_enable_keep_alive != null && pr_enable_keep_alive) {
      tracker_context.setEnableKeepAlive(true);
    }
    tracker_context.addPageGenerator(this);
    tracker_context.addAuthenticationListener(new TrackerAuthenticationAdapter(){
      private String last_pw=""String_Node_Str"";
      private byte[] last_hash={};
      private final int DELAY=10 * 1000;
      private Map<String,Object[]> fail_map=new HashMap<>();
      @Override public boolean authenticate(      String headers,      URL resource,      String user,      String pw){
        long now=SystemTime.getMonotonousTime();
        String client_address=getHeaderField(headers,""String_Node_Str"");
        if (client_address == null) {
          client_address=""String_Node_Str"";
        }
synchronized (logout_timer) {
          Long logout_time=logout_timer.get(client_address);
          if (logout_time != null && now - logout_time <= LOGOUT_GRACE_MILLIS) {
            tls.set(GRACE_PERIOD_MARKER);
            return (true);
          }
        }
        boolean result=authenticateSupport(headers,resource,user,pw);
        if (!result) {
          if (!pw.equals(""String_Node_Str"")) {
            AESemaphore waiter=null;
synchronized (fail_map) {
              Object[] x=fail_map.get(client_address);
              if (x == null) {
                x=new Object[]{new AESemaphore(""String_Node_Str""),new Long(-1),new Long(-1),now};
                fail_map.put(client_address,x);
              }
 else {
                x[1]=x[2];
                x[2]=x[3];
                x[3]=now;
                long t=(Long)x[1];
                if (now - t < 10 * 1000) {
                  log(""String_Node_Str"" + client_address + ""String_Node_Str"");
                  x[2]=now + DELAY;
                  last_pw=""String_Node_Str"";
                  waiter=(AESemaphore)x[0];
                }
              }
            }
            if (waiter != null) {
              waiter.reserve(DELAY);
            }
          }
        }
 else {
synchronized (fail_map) {
            fail_map.remove(client_address);
          }
          String cookies=getHeaderField(headers,""String_Node_Str"");
          if (pairing_session_code != null) {
            if (cookies == null || !cookies.contains(pairing_session_code)) {
              tls.set(pairing_session_code);
            }
          }
        }
        recordAuthRequest(client_address,result);
        if (!result) {
        }
        return (result);
      }
      private boolean authenticateSupport(      String headers,      URL resource,      String user,      String pw){
        boolean result;
        boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
        if (!pw_enable.getValue()) {
          String whitelist=p_no_pw_whitelist.getValue().trim();
          if (whitelist.equals(""String_Node_Str"")) {
            result=true;
          }
 else {
            String actual_host=getHeaderField(headers,""String_Node_Str"");
            int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
            String referrer=getHeaderField(headers,""String_Node_Str"");
            if (actual_host.startsWith(""String_Node_Str"")) {
              int pos=actual_host.lastIndexOf(']');
              if (pos != -1) {
                String rem=actual_host.substring(pos + 1);
                actual_host=actual_host.substring(0,pos + 1);
                pos=rem.indexOf(':');
                if (pos != -1) {
                  actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
                }
              }
            }
 else {
              int pos=actual_host.indexOf(':');
              if (pos != -1) {
                actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
                actual_host=actual_host.substring(0,pos);
              }
            }
            String[] allowed=whitelist.split(""String_Node_Str"");
            result=false;
            String msg=""String_Node_Str"";
            if (actual_port != port) {
              msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
            }
 else {
              for (              String a : allowed) {
                a=a.trim();
                if (a.equals(""String_Node_Str"")) {
                  InetAddress bind=getServerBindIP();
                  if (bind != null) {
                    if (bind instanceof Inet6Address) {
                      a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
                    }
 else {
                      a=bind.getHostAddress();
                    }
                  }
                }
                if (actual_host.equals(a.trim())) {
                  result=true;
                  break;
                }
              }
              if (!result) {
                msg=""String_Node_Str"" + actual_host + ""String_Node_Str"";
              }
 else {
                if (referrer != null) {
                  result=false;
                  try {
                    URL url=new URL(referrer);
                    int ref_port=url.getPort();
                    if (ref_port == -1) {
                      ref_port=url.getDefaultPort();
                    }
                    if (ref_port == port) {
                      result=true;
                    }
                  }
 catch (                  Throwable e) {
                  }
                  if (!result) {
                    msg=""String_Node_Str"" + referrer;
                  }
                }
              }
            }
            if (!result) {
              log.log(""String_Node_Str"" + msg);
            }
          }
        }
 else {
          if (auto_auth) {
            user=user.trim().toLowerCase();
            pw=pw.toUpperCase();
          }
          if (!user.equals(p_user_name.getValue())) {
            log.log(""String_Node_Str"" + user);
            result=false;
          }
 else {
            byte[] hash=last_hash;
            if (!last_pw.equals(pw)) {
              hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
              last_pw=pw;
              last_hash=hash;
            }
            result=Arrays.equals(hash,p_password.getValue());
            if (!result) {
              log.log(""String_Node_Str"");
            }
          }
        }
        if (result) {
          checkCookieSet(headers,resource);
        }
 else         if (auto_auth) {
          int x=checkCookieSet(headers,resource);
          if (x == 1) {
            result=true;
          }
 else           if (x == 0) {
            result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
          }
        }
 else {
          result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
        }
        return (result);
      }
      /** 
 * @param headers
 * @param resource
 * @return 0 = unknown, 1 = ok, 2 = bad
 */
      private int checkCookieSet(      String headers,      URL resource){
        if (pairing_access_code == null) {
          return (2);
        }
        String[] locations={resource.getQuery(),getHeaderField(headers,""String_Node_Str"")};
        for (        String location : locations) {
          if (location != null) {
            boolean skip_fail=false;
            int param_len=0;
            int p1=location.indexOf(""String_Node_Str"");
            if (p1 == -1) {
              p1=location.indexOf(""String_Node_Str"");
              if (p1 != -1) {
                param_len=3;
                skip_fail=true;
              }
            }
 else {
              param_len=16;
            }
            if (p1 != -1) {
              int p2=location.indexOf('&',p1);
              String ac=location.substring(p1 + param_len,p2 == -1 ? location.length() : p2).trim();
              p2=ac.indexOf('#');
              if (p2 != -1) {
                ac=ac.substring(0,p2);
              }
              if (ac.equalsIgnoreCase(pairing_access_code)) {
                tls.set(pairing_session_code);
                return (1);
              }
 else {
                if (!skip_fail) {
                  return (2);
                }
              }
            }
          }
        }
        return (0);
      }
      private String getHeaderField(      String headers,      String field){
        String[] lines=headers.split(""String_Node_Str"");
        for (        String line : lines) {
          int pos=line.indexOf(':');
          if (pos != -1) {
            if (line.substring(0,pos).equalsIgnoreCase(field)) {
              return (line.substring(pos + 1).trim());
            }
          }
        }
        return (null);
      }
    }
);
  }
 catch (  TrackerException e) {
    log.log(""String_Node_Str"",e);
  }
}",0.9952040138714676
170783,"private boolean authenticateSupport(String headers,URL resource,String user,String pw){
  boolean result;
  boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
  if (!pw_enable.getValue()) {
    String whitelist=p_no_pw_whitelist.getValue().trim();
    if (whitelist.equals(""String_Node_Str"")) {
      result=true;
    }
 else {
      String actual_host=getHeaderField(headers,""String_Node_Str"");
      int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
      String referrer=getHeaderField(headers,""String_Node_Str"");
      if (actual_host.startsWith(""String_Node_Str"")) {
        int pos=actual_host.lastIndexOf(']');
        if (pos != -1) {
          String rem=actual_host.substring(pos + 1);
          actual_host=actual_host.substring(0,pos + 1);
          pos=rem.indexOf(':');
          if (pos != -1) {
            actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
          }
        }
      }
 else {
        int pos=actual_host.indexOf(':');
        if (pos != -1) {
          actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
          actual_host=actual_host.substring(0,pos);
        }
      }
      String[] allowed=whitelist.split(""String_Node_Str"");
      result=false;
      String msg=""String_Node_Str"";
      if (actual_port != port) {
        msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
      }
 else {
        for (        String a : allowed) {
          a=a.trim();
          if (a.equals(""String_Node_Str"")) {
            InetAddress bind=getServerBindIP();
            if (bind != null) {
              if (bind instanceof Inet6Address) {
                a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
              }
 else {
                a=bind.getHostAddress();
              }
            }
          }
          if (actual_host.equals(a.trim())) {
            result=true;
            break;
          }
        }
        if (!result) {
          msg=""String_Node_Str"" + actual_host + ""String_Node_Str"";
        }
 else {
          if (referrer != null) {
            result=false;
            try {
              URL url=new URL(referrer);
              int ref_port=url.getPort();
              if (ref_port == -1) {
                ref_port=url.getDefaultPort();
              }
              if (ref_port == port) {
                result=true;
              }
            }
 catch (            Throwable e) {
            }
            if (!result) {
              msg=""String_Node_Str"" + referrer;
            }
          }
        }
      }
      if (!result) {
        log.log(""String_Node_Str"" + msg);
      }
    }
  }
 else {
    if (auto_auth) {
      user=user.trim().toLowerCase();
      pw=pw.toUpperCase();
    }
    if (!user.equals(p_user_name.getValue())) {
      result=false;
    }
 else {
      byte[] hash=last_hash;
      if (!last_pw.equals(pw)) {
        hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
        last_pw=pw;
        last_hash=hash;
      }
      result=Arrays.equals(hash,p_password.getValue());
    }
  }
  if (result) {
    checkCookieSet(headers,resource);
  }
 else   if (auto_auth) {
    int x=checkCookieSet(headers,resource);
    if (x == 1) {
      result=true;
    }
 else     if (x == 0) {
      result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
    }
  }
 else {
    result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
  }
  return (result);
}","private boolean authenticateSupport(String headers,URL resource,String user,String pw){
  boolean result;
  boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
  if (!pw_enable.getValue()) {
    String whitelist=p_no_pw_whitelist.getValue().trim();
    if (whitelist.equals(""String_Node_Str"")) {
      result=true;
    }
 else {
      String actual_host=getHeaderField(headers,""String_Node_Str"");
      int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
      String referrer=getHeaderField(headers,""String_Node_Str"");
      if (actual_host.startsWith(""String_Node_Str"")) {
        int pos=actual_host.lastIndexOf(']');
        if (pos != -1) {
          String rem=actual_host.substring(pos + 1);
          actual_host=actual_host.substring(0,pos + 1);
          pos=rem.indexOf(':');
          if (pos != -1) {
            actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
          }
        }
      }
 else {
        int pos=actual_host.indexOf(':');
        if (pos != -1) {
          actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
          actual_host=actual_host.substring(0,pos);
        }
      }
      String[] allowed=whitelist.split(""String_Node_Str"");
      result=false;
      String msg=""String_Node_Str"";
      if (actual_port != port) {
        msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
      }
 else {
        for (        String a : allowed) {
          a=a.trim();
          if (a.equals(""String_Node_Str"")) {
            InetAddress bind=getServerBindIP();
            if (bind != null) {
              if (bind instanceof Inet6Address) {
                a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
              }
 else {
                a=bind.getHostAddress();
              }
            }
          }
          if (actual_host.equals(a.trim())) {
            result=true;
            break;
          }
        }
        if (!result) {
          msg=""String_Node_Str"" + actual_host + ""String_Node_Str"";
        }
 else {
          if (referrer != null) {
            result=false;
            try {
              URL url=new URL(referrer);
              int ref_port=url.getPort();
              if (ref_port == -1) {
                ref_port=url.getDefaultPort();
              }
              if (ref_port == port) {
                result=true;
              }
            }
 catch (            Throwable e) {
            }
            if (!result) {
              msg=""String_Node_Str"" + referrer;
            }
          }
        }
      }
      if (!result) {
        log.log(""String_Node_Str"" + msg);
      }
    }
  }
 else {
    if (auto_auth) {
      user=user.trim().toLowerCase();
      pw=pw.toUpperCase();
    }
    if (!user.equals(p_user_name.getValue())) {
      log.log(""String_Node_Str"" + user);
      result=false;
    }
 else {
      byte[] hash=last_hash;
      if (!last_pw.equals(pw)) {
        hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
        last_pw=pw;
        last_hash=hash;
      }
      result=Arrays.equals(hash,p_password.getValue());
      if (!result) {
        log.log(""String_Node_Str"");
      }
    }
  }
  if (result) {
    checkCookieSet(headers,resource);
  }
 else   if (auto_auth) {
    int x=checkCookieSet(headers,resource);
    if (x == 1) {
      result=true;
    }
 else     if (x == 0) {
      result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
    }
  }
 else {
    result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
  }
  return (result);
}",0.9852037967615858
170784,"private void swt_triggerInitialize(){
  if (haveSentInitialize) {
    return;
  }
  if (!created) {
    triggerBooleanEvent(UISWTViewEvent.TYPE_CREATE,this);
  }
  if (composite != null) {
    composite.setRedraw(false);
    composite.setLayoutDeferred(true);
    triggerEvent(UISWTViewEvent.TYPE_INITIALIZE,composite);
    if (composite.getLayout() instanceof GridLayout) {
      Control[] children=composite.getChildren();
      for (int i=0; i < children.length; i++) {
        Control control=children[i];
        Object layoutData=control.getLayoutData();
        if (layoutData == null || !(layoutData instanceof GridData)) {
          if (layoutData != null) {
            Logger.log(new LogEvent(LogIDs.PLUGIN,LogEvent.LT_WARNING,""String_Node_Str"" + id + ""String_Node_Str""+ control+ ""String_Node_Str""+ layoutData.getClass().getName()));
          }
          GridData gridData;
          if (children.length == 1) {
            gridData=new GridData(SWT.FILL,SWT.FILL,true,true);
          }
 else {
            gridData=new GridData();
          }
          control.setLayoutData(gridData);
        }
      }
    }
    composite.layout();
    composite.setLayoutDeferred(false);
    composite.setRedraw(true);
  }
}","private void swt_triggerInitialize(){
  if (haveSentInitialize) {
    return;
  }
  if (!created) {
    triggerBooleanEvent(UISWTViewEvent.TYPE_CREATE,this);
  }
  if (composite != null) {
    composite.setRedraw(false);
    composite.setLayoutDeferred(true);
    triggerEvent(UISWTViewEvent.TYPE_INITIALIZE,composite);
    if (composite.getLayout() instanceof GridLayout) {
      Control[] children=composite.getChildren();
      for (int i=0; i < children.length; i++) {
        Control control=children[i];
        Object layoutData=control.getLayoutData();
        if (layoutData == null || !(layoutData instanceof GridData)) {
          if (layoutData != null) {
            Logger.log(new LogEvent(LogIDs.PLUGIN,LogEvent.LT_WARNING,""String_Node_Str"" + id + ""String_Node_Str""+ control+ ""String_Node_Str""+ layoutData.getClass().getName()));
          }
          GridData gridData;
          if (children.length == 1) {
            gridData=new GridData(SWT.FILL,SWT.FILL,true,true);
          }
 else {
            gridData=new GridData();
          }
          control.setLayoutData(gridData);
        }
      }
    }
    composite.layout();
    composite.setLayoutDeferred(false);
    Utils.relayoutUp(composite);
    composite.setRedraw(true);
  }
}",0.9866989117291416
170785,"protected void setupServer(){
  try {
    if (!plugin_enabled) {
      if (tracker_context != null) {
        tracker_context.destroy();
        tracker_context=null;
      }
      return;
    }
    final int port=param_port.getValue();
    String protocol_str=param_protocol.getValue().trim();
    String bind_str=param_bind.getValue().trim();
    InetAddress bind_ip=null;
    if (bind_str.length() > 0) {
      try {
        bind_ip=InetAddress.getByName(bind_str);
      }
 catch (      Throwable e) {
      }
      if (bind_ip == null) {
        final NetworkAdmin na=NetworkAdmin.getSingleton();
        InetAddress[] addresses=na.resolveBindAddresses(bind_str);
        if (addresses.length > 0) {
          bind_ip=addresses[0];
          if (!na_intf_listener_added) {
            na_intf_listener_added=true;
            na.addPropertyChangeListener(new NetworkAdminPropertyChangeListener(){
              @Override public void propertyChanged(              String property){
                if (unloaded) {
                  na.removePropertyChangeListener(this);
                }
 else {
                  if (property == NetworkAdmin.PR_NETWORK_INTERFACES) {
                    new AEThread2(""String_Node_Str""){
                      @Override public void run(){
                        setupServer();
                      }
                    }
.start();
                  }
                }
              }
            }
);
          }
        }
      }
      if (bind_ip == null) {
        log.log(LoggerChannel.LT_ERROR,""String_Node_Str"" + bind_str + ""String_Node_Str"");
      }
    }
    if (tracker_context != null) {
      URL url=tracker_context.getURLs()[0];
      String existing_protocol=url.getProtocol();
      int existing_port=url.getPort() == -1 ? url.getDefaultPort() : url.getPort();
      InetAddress existing_bind_ip=tracker_context.getBindIP();
      if (existing_port == port && existing_protocol.equalsIgnoreCase(protocol_str) && sameAddress(bind_ip,existing_bind_ip)) {
        return;
      }
      tracker_context.destroy();
      tracker_context=null;
    }
    int protocol=protocol_str.equalsIgnoreCase(""String_Node_Str"") ? Tracker.PR_HTTP : Tracker.PR_HTTPS;
    Map<String,Object> tc_properties=new HashMap<>();
    Boolean prop_non_blocking=(Boolean)properties.get(PR_NON_BLOCKING);
    if (prop_non_blocking != null && prop_non_blocking) {
      tc_properties.put(Tracker.PR_NON_BLOCKING,true);
    }
    log.log(LoggerChannel.LT_INFORMATION,""String_Node_Str"" + port + (bind_ip == null ? ""String_Node_Str"" : (""String_Node_Str"" + bind_str + ""String_Node_Str""+ bind_ip+ ""String_Node_Str""))+ ""String_Node_Str""+ protocol_str+ (root_dir.length() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + root_dir))+ (properties.size() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + properties)));
    tracker_context=plugin_interface.getTracker().createWebContext(Constants.APP_NAME + ""String_Node_Str"" + plugin_interface.getPluginName(),port,protocol,bind_ip,tc_properties);
    Boolean prop_enable_i2p=(Boolean)properties.get(PR_ENABLE_I2P);
    if (prop_enable_i2p == null || prop_enable_i2p) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_I2P,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_i2p_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_i2p_dest.getValue().equals(host)) {
              param_i2p_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean prop_enable_tor=(Boolean)properties.get(PR_ENABLE_TOR);
    if (prop_enable_tor == null || prop_enable_tor) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_TOR,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_tor_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_tor_dest.getValue().equals(host)) {
              param_tor_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean pr_enable_keep_alive=(Boolean)properties.get(PR_ENABLE_KEEP_ALIVE);
    if (pr_enable_keep_alive != null && pr_enable_keep_alive) {
      tracker_context.setEnableKeepAlive(true);
    }
    tracker_context.addPageGenerator(this);
    tracker_context.addAuthenticationListener(new TrackerAuthenticationAdapter(){
      private String last_pw=""String_Node_Str"";
      private byte[] last_hash={};
      private final int DELAY=10 * 1000;
      private Map<String,Object[]> fail_map=new HashMap<>();
      @Override public boolean authenticate(      String headers,      URL resource,      String user,      String pw){
        long now=SystemTime.getMonotonousTime();
        String client_address=getHeaderField(headers,""String_Node_Str"");
        if (client_address == null) {
          client_address=""String_Node_Str"";
        }
synchronized (logout_timer) {
          Long logout_time=logout_timer.get(client_address);
          if (logout_time != null && now - logout_time <= LOGOUT_GRACE_MILLIS) {
            tls.set(GRACE_PERIOD_MARKER);
            return (true);
          }
        }
        boolean result=authenticateSupport(headers,resource,user,pw);
        if (!result) {
          if (!pw.equals(""String_Node_Str"")) {
            AESemaphore waiter=null;
synchronized (fail_map) {
              Object[] x=fail_map.get(client_address);
              if (x == null) {
                x=new Object[]{new AESemaphore(""String_Node_Str""),new Long(-1),new Long(-1),now};
                fail_map.put(client_address,x);
              }
 else {
                x[1]=x[2];
                x[2]=x[3];
                x[3]=now;
                long t=(Long)x[1];
                if (now - t < 10 * 1000) {
                  log(""String_Node_Str"" + client_address + ""String_Node_Str"");
                  x[2]=now + DELAY;
                  last_pw=""String_Node_Str"";
                  waiter=(AESemaphore)x[0];
                }
              }
            }
            if (waiter != null) {
              waiter.reserve(DELAY);
            }
          }
        }
 else {
synchronized (fail_map) {
            fail_map.remove(client_address);
          }
          String cookies=getHeaderField(headers,""String_Node_Str"");
          if (pairing_session_code != null) {
            if (cookies == null || !cookies.contains(pairing_session_code)) {
              tls.set(pairing_session_code);
            }
          }
        }
        recordAuthRequest(client_address,result);
        if (!result) {
        }
        return (result);
      }
      private boolean authenticateSupport(      String headers,      URL resource,      String user,      String pw){
        boolean result;
        boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
        if (!pw_enable.getValue()) {
          String whitelist=p_no_pw_whitelist.getValue().trim();
          if (whitelist.equals(""String_Node_Str"")) {
            result=true;
          }
 else {
            String actual_host=getHeaderField(headers,""String_Node_Str"");
            int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
            String referrer=getHeaderField(headers,""String_Node_Str"");
            String original_host=actual_host;
            if (actual_host.startsWith(""String_Node_Str"")) {
              int pos=actual_host.lastIndexOf(']');
              if (pos != -1) {
                String rem=actual_host.substring(pos + 1);
                actual_host=actual_host.substring(0,pos + 1);
                pos=rem.indexOf(':');
                if (pos != -1) {
                  actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
                }
              }
            }
 else {
              int pos=actual_host.indexOf(':');
              if (pos != -1) {
                actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
                actual_host=actual_host.substring(0,pos);
              }
            }
            String[] allowed=whitelist.split(""String_Node_Str"");
            result=false;
            String msg=""String_Node_Str"";
            if (actual_port != port) {
              msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
            }
 else {
              for (              String a : allowed) {
                a=a.trim();
                if (a.equals(""String_Node_Str"")) {
                  InetAddress bind=getServerBindIP();
                  if (bind != null) {
                    if (bind instanceof Inet6Address) {
                      a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
                    }
 else {
                      a=bind.getHostAddress();
                    }
                  }
                }
                if (actual_host.equals(a.trim())) {
                  result=true;
                  break;
                }
              }
              if (!result) {
                msg=""String_Node_Str"" + original_host + ""String_Node_Str"";
              }
 else {
                if (referrer != null) {
                  result=false;
                  try {
                    URL url=new URL(referrer);
                    int ref_port=url.getPort();
                    if (ref_port == -1) {
                      ref_port=url.getDefaultPort();
                    }
                    if (ref_port == port) {
                      result=true;
                    }
                  }
 catch (                  Throwable e) {
                  }
                  if (!result) {
                    msg=""String_Node_Str"" + referrer;
                  }
                }
              }
            }
            if (!result) {
              log.log(""String_Node_Str"" + msg);
            }
          }
        }
 else {
          if (auto_auth) {
            user=user.trim().toLowerCase();
            pw=pw.toUpperCase();
          }
          if (!user.equals(p_user_name.getValue())) {
            result=false;
          }
 else {
            byte[] hash=last_hash;
            if (!last_pw.equals(pw)) {
              hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
              last_pw=pw;
              last_hash=hash;
            }
            result=Arrays.equals(hash,p_password.getValue());
          }
        }
        if (result) {
          checkCookieSet(headers,resource);
        }
 else         if (auto_auth) {
          int x=checkCookieSet(headers,resource);
          if (x == 1) {
            result=true;
          }
 else           if (x == 0) {
            result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
          }
        }
 else {
          result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
        }
        return (result);
      }
      /** 
 * @param headers
 * @param resource
 * @return 0 = unknown, 1 = ok, 2 = bad
 */
      private int checkCookieSet(      String headers,      URL resource){
        if (pairing_access_code == null) {
          return (2);
        }
        String[] locations={resource.getQuery(),getHeaderField(headers,""String_Node_Str"")};
        for (        String location : locations) {
          if (location != null) {
            boolean skip_fail=false;
            int param_len=0;
            int p1=location.indexOf(""String_Node_Str"");
            if (p1 == -1) {
              p1=location.indexOf(""String_Node_Str"");
              if (p1 != -1) {
                param_len=3;
                skip_fail=true;
              }
            }
 else {
              param_len=16;
            }
            if (p1 != -1) {
              int p2=location.indexOf('&',p1);
              String ac=location.substring(p1 + param_len,p2 == -1 ? location.length() : p2).trim();
              p2=ac.indexOf('#');
              if (p2 != -1) {
                ac=ac.substring(0,p2);
              }
              if (ac.equalsIgnoreCase(pairing_access_code)) {
                tls.set(pairing_session_code);
                return (1);
              }
 else {
                if (!skip_fail) {
                  return (2);
                }
              }
            }
          }
        }
        return (0);
      }
      private String getHeaderField(      String headers,      String field){
        String[] lines=headers.split(""String_Node_Str"");
        for (        String line : lines) {
          int pos=line.indexOf(':');
          if (pos != -1) {
            if (line.substring(0,pos).equalsIgnoreCase(field)) {
              return (line.substring(pos + 1).trim());
            }
          }
        }
        return (null);
      }
    }
);
  }
 catch (  TrackerException e) {
    log.log(""String_Node_Str"",e);
  }
}","protected void setupServer(){
  try {
    if (!plugin_enabled) {
      if (tracker_context != null) {
        tracker_context.destroy();
        tracker_context=null;
      }
      return;
    }
    final int port=param_port.getValue();
    String protocol_str=param_protocol.getValue().trim();
    String bind_str=param_bind.getValue().trim();
    InetAddress bind_ip=null;
    if (bind_str.length() > 0) {
      try {
        bind_ip=InetAddress.getByName(bind_str);
      }
 catch (      Throwable e) {
      }
      if (bind_ip == null) {
        final NetworkAdmin na=NetworkAdmin.getSingleton();
        InetAddress[] addresses=na.resolveBindAddresses(bind_str);
        if (addresses.length > 0) {
          bind_ip=addresses[0];
          if (!na_intf_listener_added) {
            na_intf_listener_added=true;
            na.addPropertyChangeListener(new NetworkAdminPropertyChangeListener(){
              @Override public void propertyChanged(              String property){
                if (unloaded) {
                  na.removePropertyChangeListener(this);
                }
 else {
                  if (property == NetworkAdmin.PR_NETWORK_INTERFACES) {
                    new AEThread2(""String_Node_Str""){
                      @Override public void run(){
                        setupServer();
                      }
                    }
.start();
                  }
                }
              }
            }
);
          }
        }
      }
      if (bind_ip == null) {
        log.log(LoggerChannel.LT_ERROR,""String_Node_Str"" + bind_str + ""String_Node_Str"");
      }
    }
    if (tracker_context != null) {
      URL url=tracker_context.getURLs()[0];
      String existing_protocol=url.getProtocol();
      int existing_port=url.getPort() == -1 ? url.getDefaultPort() : url.getPort();
      InetAddress existing_bind_ip=tracker_context.getBindIP();
      if (existing_port == port && existing_protocol.equalsIgnoreCase(protocol_str) && sameAddress(bind_ip,existing_bind_ip)) {
        return;
      }
      tracker_context.destroy();
      tracker_context=null;
    }
    int protocol=protocol_str.equalsIgnoreCase(""String_Node_Str"") ? Tracker.PR_HTTP : Tracker.PR_HTTPS;
    Map<String,Object> tc_properties=new HashMap<>();
    Boolean prop_non_blocking=(Boolean)properties.get(PR_NON_BLOCKING);
    if (prop_non_blocking != null && prop_non_blocking) {
      tc_properties.put(Tracker.PR_NON_BLOCKING,true);
    }
    log.log(LoggerChannel.LT_INFORMATION,""String_Node_Str"" + port + (bind_ip == null ? ""String_Node_Str"" : (""String_Node_Str"" + bind_str + ""String_Node_Str""+ bind_ip+ ""String_Node_Str""))+ ""String_Node_Str""+ protocol_str+ (root_dir.length() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + root_dir))+ (properties.size() == 0 ? ""String_Node_Str"" : (""String_Node_Str"" + properties)));
    tracker_context=plugin_interface.getTracker().createWebContext(Constants.APP_NAME + ""String_Node_Str"" + plugin_interface.getPluginName(),port,protocol,bind_ip,tc_properties);
    Boolean prop_enable_i2p=(Boolean)properties.get(PR_ENABLE_I2P);
    if (prop_enable_i2p == null || prop_enable_i2p) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_I2P,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_i2p_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_i2p_dest.getValue().equals(host)) {
              param_i2p_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean prop_enable_tor=(Boolean)properties.get(PR_ENABLE_TOR);
    if (prop_enable_tor == null || prop_enable_tor) {
      network_dispatcher.dispatch(new AERunnable(){
        @Override public void runSupport(){
          Map<String,Object> options=new HashMap<>();
          options.put(AEProxyFactory.SP_PORT,port);
          Map<String,Object> reply=AEProxyFactory.getPluginServerProxy(plugin_interface.getPluginName(),AENetworkClassifier.AT_TOR,plugin_interface.getPluginID(),options);
          if (reply != null) {
            param_tor_dest.setVisible(true);
            String host=(String)reply.get(""String_Node_Str"");
            if (!param_tor_dest.getValue().equals(host)) {
              param_tor_dest.setValue(host);
              if (p_sid != null) {
                updatePairing(p_sid);
              }
            }
          }
        }
      }
);
    }
    Boolean pr_enable_keep_alive=(Boolean)properties.get(PR_ENABLE_KEEP_ALIVE);
    if (pr_enable_keep_alive != null && pr_enable_keep_alive) {
      tracker_context.setEnableKeepAlive(true);
    }
    tracker_context.addPageGenerator(this);
    tracker_context.addAuthenticationListener(new TrackerAuthenticationAdapter(){
      private String last_pw=""String_Node_Str"";
      private byte[] last_hash={};
      private final int DELAY=10 * 1000;
      private Map<String,Object[]> fail_map=new HashMap<>();
      @Override public boolean authenticate(      String headers,      URL resource,      String user,      String pw){
        long now=SystemTime.getMonotonousTime();
        String client_address=getHeaderField(headers,""String_Node_Str"");
        if (client_address == null) {
          client_address=""String_Node_Str"";
        }
synchronized (logout_timer) {
          Long logout_time=logout_timer.get(client_address);
          if (logout_time != null && now - logout_time <= LOGOUT_GRACE_MILLIS) {
            tls.set(GRACE_PERIOD_MARKER);
            return (true);
          }
        }
        boolean result=authenticateSupport(headers,resource,user,pw);
        if (!result) {
          if (!pw.equals(""String_Node_Str"")) {
            AESemaphore waiter=null;
synchronized (fail_map) {
              Object[] x=fail_map.get(client_address);
              if (x == null) {
                x=new Object[]{new AESemaphore(""String_Node_Str""),new Long(-1),new Long(-1),now};
                fail_map.put(client_address,x);
              }
 else {
                x[1]=x[2];
                x[2]=x[3];
                x[3]=now;
                long t=(Long)x[1];
                if (now - t < 10 * 1000) {
                  log(""String_Node_Str"" + client_address + ""String_Node_Str"");
                  x[2]=now + DELAY;
                  last_pw=""String_Node_Str"";
                  waiter=(AESemaphore)x[0];
                }
              }
            }
            if (waiter != null) {
              waiter.reserve(DELAY);
            }
          }
        }
 else {
synchronized (fail_map) {
            fail_map.remove(client_address);
          }
          String cookies=getHeaderField(headers,""String_Node_Str"");
          if (pairing_session_code != null) {
            if (cookies == null || !cookies.contains(pairing_session_code)) {
              tls.set(pairing_session_code);
            }
          }
        }
        recordAuthRequest(client_address,result);
        if (!result) {
        }
        return (result);
      }
      private boolean authenticateSupport(      String headers,      URL resource,      String user,      String pw){
        boolean result;
        boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
        if (!pw_enable.getValue()) {
          String whitelist=p_no_pw_whitelist.getValue().trim();
          if (whitelist.equals(""String_Node_Str"")) {
            result=true;
          }
 else {
            String actual_host=getHeaderField(headers,""String_Node_Str"");
            int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
            String referrer=getHeaderField(headers,""String_Node_Str"");
            if (actual_host.startsWith(""String_Node_Str"")) {
              int pos=actual_host.lastIndexOf(']');
              if (pos != -1) {
                String rem=actual_host.substring(pos + 1);
                actual_host=actual_host.substring(0,pos + 1);
                pos=rem.indexOf(':');
                if (pos != -1) {
                  actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
                }
              }
            }
 else {
              int pos=actual_host.indexOf(':');
              if (pos != -1) {
                actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
                actual_host=actual_host.substring(0,pos);
              }
            }
            String[] allowed=whitelist.split(""String_Node_Str"");
            result=false;
            String msg=""String_Node_Str"";
            if (actual_port != port) {
              msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
            }
 else {
              for (              String a : allowed) {
                a=a.trim();
                if (a.equals(""String_Node_Str"")) {
                  InetAddress bind=getServerBindIP();
                  if (bind != null) {
                    if (bind instanceof Inet6Address) {
                      a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
                    }
 else {
                      a=bind.getHostAddress();
                    }
                  }
                }
                if (actual_host.equals(a.trim())) {
                  result=true;
                  break;
                }
              }
              if (!result) {
                msg=""String_Node_Str"" + actual_host + ""String_Node_Str"";
              }
 else {
                if (referrer != null) {
                  result=false;
                  try {
                    URL url=new URL(referrer);
                    int ref_port=url.getPort();
                    if (ref_port == -1) {
                      ref_port=url.getDefaultPort();
                    }
                    if (ref_port == port) {
                      result=true;
                    }
                  }
 catch (                  Throwable e) {
                  }
                  if (!result) {
                    msg=""String_Node_Str"" + referrer;
                  }
                }
              }
            }
            if (!result) {
              log.log(""String_Node_Str"" + msg);
            }
          }
        }
 else {
          if (auto_auth) {
            user=user.trim().toLowerCase();
            pw=pw.toUpperCase();
          }
          if (!user.equals(p_user_name.getValue())) {
            result=false;
          }
 else {
            byte[] hash=last_hash;
            if (!last_pw.equals(pw)) {
              hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
              last_pw=pw;
              last_hash=hash;
            }
            result=Arrays.equals(hash,p_password.getValue());
          }
        }
        if (result) {
          checkCookieSet(headers,resource);
        }
 else         if (auto_auth) {
          int x=checkCookieSet(headers,resource);
          if (x == 1) {
            result=true;
          }
 else           if (x == 0) {
            result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
          }
        }
 else {
          result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
        }
        return (result);
      }
      /** 
 * @param headers
 * @param resource
 * @return 0 = unknown, 1 = ok, 2 = bad
 */
      private int checkCookieSet(      String headers,      URL resource){
        if (pairing_access_code == null) {
          return (2);
        }
        String[] locations={resource.getQuery(),getHeaderField(headers,""String_Node_Str"")};
        for (        String location : locations) {
          if (location != null) {
            boolean skip_fail=false;
            int param_len=0;
            int p1=location.indexOf(""String_Node_Str"");
            if (p1 == -1) {
              p1=location.indexOf(""String_Node_Str"");
              if (p1 != -1) {
                param_len=3;
                skip_fail=true;
              }
            }
 else {
              param_len=16;
            }
            if (p1 != -1) {
              int p2=location.indexOf('&',p1);
              String ac=location.substring(p1 + param_len,p2 == -1 ? location.length() : p2).trim();
              p2=ac.indexOf('#');
              if (p2 != -1) {
                ac=ac.substring(0,p2);
              }
              if (ac.equalsIgnoreCase(pairing_access_code)) {
                tls.set(pairing_session_code);
                return (1);
              }
 else {
                if (!skip_fail) {
                  return (2);
                }
              }
            }
          }
        }
        return (0);
      }
      private String getHeaderField(      String headers,      String field){
        String[] lines=headers.split(""String_Node_Str"");
        for (        String line : lines) {
          int pos=line.indexOf(':');
          if (pos != -1) {
            if (line.substring(0,pos).equalsIgnoreCase(field)) {
              return (line.substring(pos + 1).trim());
            }
          }
        }
        return (null);
      }
    }
);
  }
 catch (  TrackerException e) {
    log.log(""String_Node_Str"",e);
  }
}",0.997927767910006
170786,"private boolean authenticateSupport(String headers,URL resource,String user,String pw){
  boolean result;
  boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
  if (!pw_enable.getValue()) {
    String whitelist=p_no_pw_whitelist.getValue().trim();
    if (whitelist.equals(""String_Node_Str"")) {
      result=true;
    }
 else {
      String actual_host=getHeaderField(headers,""String_Node_Str"");
      int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
      String referrer=getHeaderField(headers,""String_Node_Str"");
      String original_host=actual_host;
      if (actual_host.startsWith(""String_Node_Str"")) {
        int pos=actual_host.lastIndexOf(']');
        if (pos != -1) {
          String rem=actual_host.substring(pos + 1);
          actual_host=actual_host.substring(0,pos + 1);
          pos=rem.indexOf(':');
          if (pos != -1) {
            actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
          }
        }
      }
 else {
        int pos=actual_host.indexOf(':');
        if (pos != -1) {
          actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
          actual_host=actual_host.substring(0,pos);
        }
      }
      String[] allowed=whitelist.split(""String_Node_Str"");
      result=false;
      String msg=""String_Node_Str"";
      if (actual_port != port) {
        msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
      }
 else {
        for (        String a : allowed) {
          a=a.trim();
          if (a.equals(""String_Node_Str"")) {
            InetAddress bind=getServerBindIP();
            if (bind != null) {
              if (bind instanceof Inet6Address) {
                a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
              }
 else {
                a=bind.getHostAddress();
              }
            }
          }
          if (actual_host.equals(a.trim())) {
            result=true;
            break;
          }
        }
        if (!result) {
          msg=""String_Node_Str"" + original_host + ""String_Node_Str"";
        }
 else {
          if (referrer != null) {
            result=false;
            try {
              URL url=new URL(referrer);
              int ref_port=url.getPort();
              if (ref_port == -1) {
                ref_port=url.getDefaultPort();
              }
              if (ref_port == port) {
                result=true;
              }
            }
 catch (            Throwable e) {
            }
            if (!result) {
              msg=""String_Node_Str"" + referrer;
            }
          }
        }
      }
      if (!result) {
        log.log(""String_Node_Str"" + msg);
      }
    }
  }
 else {
    if (auto_auth) {
      user=user.trim().toLowerCase();
      pw=pw.toUpperCase();
    }
    if (!user.equals(p_user_name.getValue())) {
      result=false;
    }
 else {
      byte[] hash=last_hash;
      if (!last_pw.equals(pw)) {
        hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
        last_pw=pw;
        last_hash=hash;
      }
      result=Arrays.equals(hash,p_password.getValue());
    }
  }
  if (result) {
    checkCookieSet(headers,resource);
  }
 else   if (auto_auth) {
    int x=checkCookieSet(headers,resource);
    if (x == 1) {
      result=true;
    }
 else     if (x == 0) {
      result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
    }
  }
 else {
    result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
  }
  return (result);
}","private boolean authenticateSupport(String headers,URL resource,String user,String pw){
  boolean result;
  boolean auto_auth=param_auto_auth != null && param_auto_auth.getValue();
  if (!pw_enable.getValue()) {
    String whitelist=p_no_pw_whitelist.getValue().trim();
    if (whitelist.equals(""String_Node_Str"")) {
      result=true;
    }
 else {
      String actual_host=getHeaderField(headers,""String_Node_Str"");
      int actual_port=protocol == Tracker.PR_HTTP ? 80 : 443;
      String referrer=getHeaderField(headers,""String_Node_Str"");
      if (actual_host.startsWith(""String_Node_Str"")) {
        int pos=actual_host.lastIndexOf(']');
        if (pos != -1) {
          String rem=actual_host.substring(pos + 1);
          actual_host=actual_host.substring(0,pos + 1);
          pos=rem.indexOf(':');
          if (pos != -1) {
            actual_port=Integer.parseInt(rem.substring(pos + 1).trim());
          }
        }
      }
 else {
        int pos=actual_host.indexOf(':');
        if (pos != -1) {
          actual_port=Integer.parseInt(actual_host.substring(pos + 1).trim());
          actual_host=actual_host.substring(0,pos);
        }
      }
      String[] allowed=whitelist.split(""String_Node_Str"");
      result=false;
      String msg=""String_Node_Str"";
      if (actual_port != port) {
        msg=""String_Node_Str"" + port + ""String_Node_Str""+ actual_port;
      }
 else {
        for (        String a : allowed) {
          a=a.trim();
          if (a.equals(""String_Node_Str"")) {
            InetAddress bind=getServerBindIP();
            if (bind != null) {
              if (bind instanceof Inet6Address) {
                a=""String_Node_Str"" + bind.getHostAddress() + ""String_Node_Str"";
              }
 else {
                a=bind.getHostAddress();
              }
            }
          }
          if (actual_host.equals(a.trim())) {
            result=true;
            break;
          }
        }
        if (!result) {
          msg=""String_Node_Str"" + actual_host + ""String_Node_Str"";
        }
 else {
          if (referrer != null) {
            result=false;
            try {
              URL url=new URL(referrer);
              int ref_port=url.getPort();
              if (ref_port == -1) {
                ref_port=url.getDefaultPort();
              }
              if (ref_port == port) {
                result=true;
              }
            }
 catch (            Throwable e) {
            }
            if (!result) {
              msg=""String_Node_Str"" + referrer;
            }
          }
        }
      }
      if (!result) {
        log.log(""String_Node_Str"" + msg);
      }
    }
  }
 else {
    if (auto_auth) {
      user=user.trim().toLowerCase();
      pw=pw.toUpperCase();
    }
    if (!user.equals(p_user_name.getValue())) {
      result=false;
    }
 else {
      byte[] hash=last_hash;
      if (!last_pw.equals(pw)) {
        hash=plugin_interface.getUtilities().getSecurityManager().calculateSHA1(auto_auth ? pw.toUpperCase().getBytes() : pw.getBytes());
        last_pw=pw;
        last_hash=hash;
      }
      result=Arrays.equals(hash,p_password.getValue());
    }
  }
  if (result) {
    checkCookieSet(headers,resource);
  }
 else   if (auto_auth) {
    int x=checkCookieSet(headers,resource);
    if (x == 1) {
      result=true;
    }
 else     if (x == 0) {
      result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
    }
  }
 else {
    result=hasOurCookie(getHeaderField(headers,""String_Node_Str""));
  }
  return (result);
}",0.9929577464788732
170787,"protected static String renderMessage(BuddyPluginBeta beta,ChatInstance chat,ChatMessage message,String original_msg,int message_type,int start,List<StyleRange> new_ranges,Font info_font,Color info_colour,Font bold_font,Font italic_font){
  String msg=original_msg;
  try {
{
      List<Object> segments=new ArrayList<>();
      int pos=0;
      while (true) {
        int old_pos=pos;
        pos=original_msg.indexOf(':',old_pos);
        if (pos == -1) {
          String tail=original_msg.substring(old_pos);
          if (tail.length() > 0) {
            segments.add(tail);
          }
          break;
        }
        boolean was_url=false;
        String protocol=""String_Node_Str"";
        for (int i=pos - 1; i >= 0; i--) {
          char c=original_msg.charAt(i);
          if (!Character.isLetterOrDigit(c)) {
            if (c == '""') {
              protocol=c + protocol;
            }
            break;
          }
          protocol=c + protocol;
        }
        if (protocol.length() > 0) {
          char term_char=' ';
          if (protocol.startsWith(""String_Node_Str"")) {
            term_char='""';
          }
          int url_start=pos - protocol.length();
          int url_end=original_msg.length();
          for (int i=pos + 1; i < url_end; i++) {
            char c=original_msg.charAt(i);
            if (c == term_char || (term_char == ' ' && Character.isWhitespace(c))) {
              url_end=term_char == ' ' ? i : (i + 1);
              break;
            }
          }
          if (url_end > pos + 1 && !Character.isDigit(protocol.charAt(0))) {
            try {
              String url_str=protocol + original_msg.substring(pos,url_end);
              if (url_str.startsWith(""String_Node_Str"") && url_str.endsWith(""String_Node_Str"")) {
                url_str=url_str.substring(1,url_str.length() - 1);
                protocol=protocol.substring(1);
              }
              URL url=new URL(url_str);
              if (url_start > old_pos) {
                segments.add(original_msg.substring(old_pos,url_start));
              }
              segments.add(url);
              was_url=true;
              pos=url_end;
            }
 catch (            Throwable e) {
            }
          }
        }
        if (!was_url) {
          pos++;
          segments.add(original_msg.substring(old_pos,pos));
        }
      }
      if (segments.size() > 1) {
        List<Object> temp=new ArrayList<>(segments.size());
        String str=""String_Node_Str"";
        for (        Object obj : segments) {
          if (obj instanceof String) {
            str+=obj;
          }
 else {
            if (str.length() > 0) {
              temp.add(str);
            }
            str=""String_Node_Str"";
            temp.add(obj);
          }
        }
        if (str.length() > 0) {
          temp.add(str);
        }
        segments=temp;
      }
      Map<String,String> params=new HashMap<>();
      for (int i=0; i < segments.size(); i++) {
        Object obj=segments.get(i);
        if (obj instanceof URL) {
          params.clear();
          String str=((URL)obj).toExternalForm();
          int qpos=str.indexOf('?');
          if (qpos > 0) {
            int hpos=str.lastIndexOf(""String_Node_Str"");
            String[] bits=str.substring(qpos + 1,hpos == -1 ? str.length() : hpos).split(""String_Node_Str"");
            for (            String bit : bits) {
              String[] temp=bit.split(""String_Node_Str"",2);
              if (temp.length == 2) {
                params.put(temp[0],temp[1]);
              }
            }
            if (hpos > 0 && str.endsWith(""String_Node_Str"")) {
              str=str.substring(0,hpos) + ""String_Node_Str"" + expand(params,str.substring(hpos + 2,str.length() - 2),false)+ ""String_Node_Str"";
              try {
                segments.set(i,new URL(str));
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
            }
          }
 else {
            int hpos=str.lastIndexOf(""String_Node_Str"");
            if (hpos > 0 && str.endsWith(""String_Node_Str"")) {
              str=str.substring(0,hpos) + ""String_Node_Str"" + str.substring(hpos + 2,str.length() - 2)+ ""String_Node_Str"";
              try {
                segments.set(i,new URL(str));
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
            }
          }
        }
 else {
          String str=(String)obj;
          if (message_type == ChatMessage.MT_NORMAL) {
            str=expandResources(str);
            if (bold_font != null) {
              str=expandEmphasis(str);
            }
          }
          if (params.size() > 0) {
            str=expand(params,str,true);
          }
          segments.set(i,str);
        }
      }
      StringBuilder sb=new StringBuilder(1024);
      for (      Object obj : segments) {
        if (obj instanceof URL) {
          sb.append(""String_Node_Str"").append(((URL)obj).toExternalForm()).append(""String_Node_Str"");
        }
 else {
          String segment_str=(String)obj;
          try {
            String my_nick=chat.getNickname(true);
            my_nick=my_nick.replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (my_nick.length() > 0 && segment_str.contains(my_nick) && message_type == ChatMessage.MT_NORMAL) {
              StringBuilder temp=new StringBuilder(segment_str.length() + 1024);
              int nick_len=my_nick.length();
              int segment_len=segment_str.length();
              int segment_pos=0;
              while (segment_pos < segment_len) {
                int next_pos=segment_str.indexOf(my_nick,segment_pos);
                if (next_pos >= 0) {
                  temp.append(segment_str.substring(segment_pos,next_pos));
                  boolean match=true;
                  if (next_pos > 0) {
                    if (Character.isLetterOrDigit(segment_str.charAt(next_pos - 1))) {
                      match=false;
                    }
                  }
                  int nick_end=next_pos + nick_len;
                  if (nick_end < segment_len) {
                    if (Character.isLetterOrDigit(segment_str.charAt(nick_end))) {
                      match=false;
                    }
                  }
                  if (match) {
                    temp.append(""String_Node_Str"").append(UrlUtils.encode(my_nick)).append(""String_Node_Str"");
                  }
 else {
                    temp.append(my_nick);
                  }
                  segment_pos=next_pos + nick_len;
                }
 else {
                  temp.append(segment_str.substring(segment_pos));
                  break;
                }
              }
              segment_str=temp.toString();
            }
          }
 catch (          Throwable e) {
            Debug.out(e);
          }
          sb.append(segment_str);
        }
      }
      msg=sb.toString();
    }
{
      int next_style_start=start;
      int pos=0;
      while (pos < msg.length()) {
        pos=msg.indexOf(':',pos);
        if (pos == -1) {
          break;
        }
        String protocol=""String_Node_Str"";
        for (int i=pos - 1; i >= 0; i--) {
          char c=msg.charAt(i);
          if (!Character.isLetterOrDigit(c)) {
            if (c == '""') {
              protocol=c + protocol;
            }
            break;
          }
          protocol=c + protocol;
        }
        if (protocol.length() > 0) {
          char term_char=' ';
          if (protocol.startsWith(""String_Node_Str"")) {
            term_char='""';
          }
          int url_start=pos - protocol.length();
          int url_end=msg.length();
          for (int i=pos + 1; i < url_end; i++) {
            char c=msg.charAt(i);
            if (c == term_char || (term_char == ' ' && Character.isWhitespace(c))) {
              url_end=term_char == ' ' ? i : (i + 1);
              break;
            }
          }
          if (url_end > pos + 1 && !Character.isDigit(protocol.charAt(0))) {
            try {
              String url_str=protocol + msg.substring(pos,url_end);
              if (url_str.startsWith(""String_Node_Str"") && url_str.endsWith(""String_Node_Str"")) {
                url_str=url_str.substring(1,url_str.length() - 1);
                protocol=protocol.substring(1);
              }
              if (protocol.equalsIgnoreCase(""String_Node_Str"")) {
                if (url_str.toLowerCase(Locale.US).startsWith(""String_Node_Str"")) {
                  if (beta != null && !beta.isI2PAvailable()) {
                    throw (new Exception(""String_Node_Str""));
                  }
                }
              }
 else {
                URL url=new URL(url_str);
              }
              String original_url_str=url_str;
              String display_url=UrlUtils.decode(url_str);
              int hack_pos=url_str.lastIndexOf(""String_Node_Str"");
              if (hack_pos > 0 && url_str.endsWith(""String_Node_Str"")) {
                String substitution=url_str.substring(hack_pos + 2,url_str.length() - 2).trim();
                url_str=url_str.substring(0,hack_pos);
                boolean safe=protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"");
                if (safe || UrlUtils.parseTextForURL(substitution,true) == null) {
                  display_url=UrlUtils.decode(substitution);
                }
 else {
                  display_url=UrlUtils.decode(url_str);
                }
              }
              if (term_char != ' ' || !display_url.equals(original_url_str)) {
                int old_len=msg.length();
                msg=msg.substring(0,url_start) + display_url + msg.substring(url_end);
                url_end+=(msg.length() - old_len);
              }
              int this_style_start=start + url_start;
              int this_style_length=display_url.length();
              if (this_style_start > next_style_start) {
                if (message_type == ChatMessage.MT_INFO) {
                  StyleRange styleRange=new MyStyleRange(message);
                  styleRange.start=next_style_start;
                  styleRange.length=this_style_start - next_style_start;
                  styleRange.foreground=info_colour;
                  styleRange.font=info_font;
                  new_ranges.add(styleRange);
                  next_style_start=this_style_start + this_style_length;
                }
              }
              boolean will_work=true;
              Font fail_font=bold_font;
              try {
                String lc_url=url_str.toLowerCase(Locale.US);
                if (lc_url.startsWith(""String_Node_Str"")) {
                  if ((!lc_url.contains(""String_Node_Str"")) || lc_url.contains(""String_Node_Str"") || lc_url.endsWith(""String_Node_Str"")) {
                    if (!lc_url.contains(""String_Node_Str"")) {
                      will_work=false;
                    }
                  }
                }
 else                 if (lc_url.startsWith(""String_Node_Str"") || lc_url.startsWith(""String_Node_Str"")) {
                  will_work=false;
                }
 else                 if (lc_url.startsWith(""String_Node_Str"")) {
                  fail_font=italic_font;
                  will_work=false;
                }
              }
 catch (              Throwable e) {
              }
              if (will_work) {
                StyleRange styleRange=new MyStyleRange(message);
                styleRange.start=this_style_start;
                styleRange.length=this_style_length;
                styleRange.foreground=Colors.blue;
                styleRange.underline=true;
                styleRange.data=url_str;
                new_ranges.add(styleRange);
              }
 else {
                StyleRange styleRange=new MyStyleRange(message);
                styleRange.start=this_style_start;
                styleRange.length=this_style_length;
                styleRange.font=fail_font;
                new_ranges.add(styleRange);
              }
            }
 catch (            Throwable e) {
            }
          }
          pos=url_end;
        }
 else {
          pos=pos + 1;
        }
      }
      if (next_style_start < start + msg.length()) {
        if (message_type == ChatMessage.MT_INFO) {
          StyleRange styleRange=new MyStyleRange(message);
          styleRange.start=next_style_start;
          styleRange.length=start + msg.length() - next_style_start;
          styleRange.foreground=info_colour;
          styleRange.font=info_font;
          new_ranges.add(styleRange);
        }
      }
    }
  }
 catch (  Throwable e) {
    Debug.out(e);
  }
  return (msg);
}","protected static String renderMessage(BuddyPluginBeta beta,ChatInstance chat,ChatMessage message,String original_msg,int message_type,int start,List<StyleRange> new_ranges,Font info_font,Color info_colour,Font bold_font,Font italic_font){
  String msg=original_msg;
  try {
{
      List<Object> segments=new ArrayList<>();
      int pos=0;
      while (true) {
        int old_pos=pos;
        pos=original_msg.indexOf(':',old_pos);
        if (pos == -1) {
          String tail=original_msg.substring(old_pos);
          if (tail.length() > 0) {
            segments.add(tail);
          }
          break;
        }
        boolean was_url=false;
        String protocol=""String_Node_Str"";
        for (int i=pos - 1; i >= 0; i--) {
          char c=original_msg.charAt(i);
          if (!Character.isLetterOrDigit(c)) {
            if (c == '""') {
              protocol=c + protocol;
            }
            break;
          }
          protocol=c + protocol;
        }
        if (protocol.length() > 0) {
          char term_char=' ';
          if (protocol.startsWith(""String_Node_Str"")) {
            term_char='""';
          }
          int url_start=pos - protocol.length();
          int url_end=original_msg.length();
          for (int i=pos + 1; i < url_end; i++) {
            char c=original_msg.charAt(i);
            if (c == term_char || (term_char == ' ' && Character.isWhitespace(c))) {
              url_end=term_char == ' ' ? i : (i + 1);
              break;
            }
          }
          if (url_end > pos + 1 && !Character.isDigit(protocol.charAt(0))) {
            try {
              String url_str=protocol + original_msg.substring(pos,url_end);
              if (url_str.startsWith(""String_Node_Str"") && url_str.endsWith(""String_Node_Str"")) {
                url_str=url_str.substring(1,url_str.length() - 1);
                protocol=protocol.substring(1);
              }
              URL url=new URL(url_str);
              if (url_start > old_pos) {
                segments.add(original_msg.substring(old_pos,url_start));
              }
              segments.add(url);
              was_url=true;
              pos=url_end;
            }
 catch (            Throwable e) {
            }
          }
        }
        if (!was_url) {
          pos++;
          segments.add(original_msg.substring(old_pos,pos));
        }
      }
      if (segments.size() > 1) {
        List<Object> temp=new ArrayList<>(segments.size());
        String str=""String_Node_Str"";
        for (        Object obj : segments) {
          if (obj instanceof String) {
            str+=obj;
          }
 else {
            if (str.length() > 0) {
              temp.add(str);
            }
            str=""String_Node_Str"";
            temp.add(obj);
          }
        }
        if (str.length() > 0) {
          temp.add(str);
        }
        segments=temp;
      }
      Map<String,String> params=new HashMap<>();
      for (int i=0; i < segments.size(); i++) {
        Object obj=segments.get(i);
        if (obj instanceof URL) {
          params.clear();
          String str=((URL)obj).toExternalForm();
          int qpos=str.indexOf('?');
          if (qpos > 0) {
            int hpos=str.lastIndexOf(""String_Node_Str"");
            if (hpos < qpos) {
              hpos=-1;
            }
            String[] bits=str.substring(qpos + 1,hpos == -1 ? str.length() : hpos).split(""String_Node_Str"");
            for (            String bit : bits) {
              String[] temp=bit.split(""String_Node_Str"",2);
              if (temp.length == 2) {
                params.put(temp[0],temp[1]);
              }
            }
            if (hpos > 0 && str.endsWith(""String_Node_Str"")) {
              str=str.substring(0,hpos) + ""String_Node_Str"" + expand(params,str.substring(hpos + 2,str.length() - 2),false)+ ""String_Node_Str"";
              try {
                segments.set(i,new URL(str));
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
            }
          }
 else {
            int hpos=str.lastIndexOf(""String_Node_Str"");
            if (hpos > 0 && str.endsWith(""String_Node_Str"")) {
              str=str.substring(0,hpos) + ""String_Node_Str"" + str.substring(hpos + 2,str.length() - 2)+ ""String_Node_Str"";
              try {
                segments.set(i,new URL(str));
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
            }
          }
        }
 else {
          String str=(String)obj;
          if (message_type == ChatMessage.MT_NORMAL) {
            str=expandResources(str);
            if (bold_font != null) {
              str=expandEmphasis(str);
            }
          }
          if (params.size() > 0) {
            str=expand(params,str,true);
          }
          segments.set(i,str);
        }
      }
      StringBuilder sb=new StringBuilder(1024);
      for (      Object obj : segments) {
        if (obj instanceof URL) {
          sb.append(""String_Node_Str"").append(((URL)obj).toExternalForm()).append(""String_Node_Str"");
        }
 else {
          String segment_str=(String)obj;
          try {
            String my_nick=chat.getNickname(true);
            my_nick=my_nick.replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (my_nick.length() > 0 && segment_str.contains(my_nick) && message_type == ChatMessage.MT_NORMAL) {
              StringBuilder temp=new StringBuilder(segment_str.length() + 1024);
              int nick_len=my_nick.length();
              int segment_len=segment_str.length();
              int segment_pos=0;
              while (segment_pos < segment_len) {
                int next_pos=segment_str.indexOf(my_nick,segment_pos);
                if (next_pos >= 0) {
                  temp.append(segment_str.substring(segment_pos,next_pos));
                  boolean match=true;
                  if (next_pos > 0) {
                    if (Character.isLetterOrDigit(segment_str.charAt(next_pos - 1))) {
                      match=false;
                    }
                  }
                  int nick_end=next_pos + nick_len;
                  if (nick_end < segment_len) {
                    if (Character.isLetterOrDigit(segment_str.charAt(nick_end))) {
                      match=false;
                    }
                  }
                  if (match) {
                    temp.append(""String_Node_Str"").append(UrlUtils.encode(my_nick)).append(""String_Node_Str"");
                  }
 else {
                    temp.append(my_nick);
                  }
                  segment_pos=next_pos + nick_len;
                }
 else {
                  temp.append(segment_str.substring(segment_pos));
                  break;
                }
              }
              segment_str=temp.toString();
            }
          }
 catch (          Throwable e) {
            Debug.out(e);
          }
          sb.append(segment_str);
        }
      }
      msg=sb.toString();
    }
{
      int next_style_start=start;
      int pos=0;
      while (pos < msg.length()) {
        pos=msg.indexOf(':',pos);
        if (pos == -1) {
          break;
        }
        String protocol=""String_Node_Str"";
        for (int i=pos - 1; i >= 0; i--) {
          char c=msg.charAt(i);
          if (!Character.isLetterOrDigit(c)) {
            if (c == '""') {
              protocol=c + protocol;
            }
            break;
          }
          protocol=c + protocol;
        }
        if (protocol.length() > 0) {
          char term_char=' ';
          if (protocol.startsWith(""String_Node_Str"")) {
            term_char='""';
          }
          int url_start=pos - protocol.length();
          int url_end=msg.length();
          for (int i=pos + 1; i < url_end; i++) {
            char c=msg.charAt(i);
            if (c == term_char || (term_char == ' ' && Character.isWhitespace(c))) {
              url_end=term_char == ' ' ? i : (i + 1);
              break;
            }
          }
          if (url_end > pos + 1 && !Character.isDigit(protocol.charAt(0))) {
            try {
              String url_str=protocol + msg.substring(pos,url_end);
              if (url_str.startsWith(""String_Node_Str"") && url_str.endsWith(""String_Node_Str"")) {
                url_str=url_str.substring(1,url_str.length() - 1);
                protocol=protocol.substring(1);
              }
              if (protocol.equalsIgnoreCase(""String_Node_Str"")) {
                if (url_str.toLowerCase(Locale.US).startsWith(""String_Node_Str"")) {
                  if (beta != null && !beta.isI2PAvailable()) {
                    throw (new Exception(""String_Node_Str""));
                  }
                }
              }
 else {
                URL url=new URL(url_str);
              }
              String original_url_str=url_str;
              String display_url=UrlUtils.decode(url_str);
              int hack_pos=url_str.lastIndexOf(""String_Node_Str"");
              if (hack_pos > 0 && url_str.endsWith(""String_Node_Str"")) {
                String substitution=url_str.substring(hack_pos + 2,url_str.length() - 2).trim();
                url_str=url_str.substring(0,hack_pos);
                boolean safe=protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"");
                if (safe || UrlUtils.parseTextForURL(substitution,true) == null) {
                  display_url=UrlUtils.decode(substitution);
                }
 else {
                  display_url=UrlUtils.decode(url_str);
                }
              }
              if (term_char != ' ' || !display_url.equals(original_url_str)) {
                int old_len=msg.length();
                msg=msg.substring(0,url_start) + display_url + msg.substring(url_end);
                url_end+=(msg.length() - old_len);
              }
              int this_style_start=start + url_start;
              int this_style_length=display_url.length();
              if (this_style_start > next_style_start) {
                if (message_type == ChatMessage.MT_INFO) {
                  StyleRange styleRange=new MyStyleRange(message);
                  styleRange.start=next_style_start;
                  styleRange.length=this_style_start - next_style_start;
                  styleRange.foreground=info_colour;
                  styleRange.font=info_font;
                  new_ranges.add(styleRange);
                  next_style_start=this_style_start + this_style_length;
                }
              }
              boolean will_work=true;
              Font fail_font=bold_font;
              try {
                String lc_url=url_str.toLowerCase(Locale.US);
                if (lc_url.startsWith(""String_Node_Str"")) {
                  if ((!lc_url.contains(""String_Node_Str"")) || lc_url.contains(""String_Node_Str"") || lc_url.endsWith(""String_Node_Str"")) {
                    if (!lc_url.contains(""String_Node_Str"")) {
                      will_work=false;
                    }
                  }
                }
 else                 if (lc_url.startsWith(""String_Node_Str"") || lc_url.startsWith(""String_Node_Str"")) {
                  will_work=false;
                }
 else                 if (lc_url.startsWith(""String_Node_Str"")) {
                  fail_font=italic_font;
                  will_work=false;
                }
              }
 catch (              Throwable e) {
              }
              if (will_work) {
                StyleRange styleRange=new MyStyleRange(message);
                styleRange.start=this_style_start;
                styleRange.length=this_style_length;
                styleRange.foreground=Colors.blue;
                styleRange.underline=true;
                styleRange.data=url_str;
                new_ranges.add(styleRange);
              }
 else {
                StyleRange styleRange=new MyStyleRange(message);
                styleRange.start=this_style_start;
                styleRange.length=this_style_length;
                styleRange.font=fail_font;
                new_ranges.add(styleRange);
              }
            }
 catch (            Throwable e) {
            }
          }
          pos=url_end;
        }
 else {
          pos=pos + 1;
        }
      }
      if (next_style_start < start + msg.length()) {
        if (message_type == ChatMessage.MT_INFO) {
          StyleRange styleRange=new MyStyleRange(message);
          styleRange.start=next_style_start;
          styleRange.length=start + msg.length() - next_style_start;
          styleRange.foreground=info_colour;
          styleRange.font=info_font;
          new_ranges.add(styleRange);
        }
      }
    }
  }
 catch (  Throwable e) {
    Debug.out(e);
  }
  return (msg);
}",0.9973291437549096
170788,"private void swt_initialize(Composite parent){
  if (cMainComposite == null || cMainComposite.isDisposed()) {
    if (parent == null || parent.isDisposed()) {
      return;
    }
    sc=new ScrolledComposite(parent,SWT.V_SCROLL);
    sc.setExpandHorizontal(true);
    sc.setExpandVertical(true);
    sc.getVerticalBar().setIncrement(16);
    Layout parentLayout=parent.getLayout();
    if (parentLayout instanceof GridLayout) {
      GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
      Utils.setLayoutData(sc,gd);
    }
 else     if (parentLayout instanceof FormLayout) {
      Utils.setLayoutData(sc,Utils.getFilledFormData());
    }
    cMainComposite=new Composite(sc,SWT.NONE);
    sc.setContent(cMainComposite);
  }
 else {
    Utils.disposeComposite(cMainComposite,false);
  }
  if (tags == null) {
    params=null;
    cMainComposite.setLayout(new FillLayout());
    Label label=new Label(cMainComposite,SWT.NONE);
    label.setText(MessageText.getString(""String_Node_Str""));
  }
 else {
    final int numTags=tags.length;
    int isTagVisible=-1;
    int canBePublic=-1;
    int[] tagColor=tags[0].getColor();
    boolean tagsAreTagFeatureRateLimit=true;
    Set<String> listTagTypes=new HashSet<>();
    for (    Tag tag : tags) {
      TagType tt=tag.getTagType();
      String s=tt.getTagTypeName(true);
      listTagTypes.add(s);
      if (tagsAreTagFeatureRateLimit && !(tag instanceof TagFeatureRateLimit)) {
        tagsAreTagFeatureRateLimit=false;
      }
      isTagVisible=updateIntBoolean(tag.isVisible(),isTagVisible);
      canBePublic=updateIntBoolean(tag.canBePublic(),canBePublic);
      if (tagColor != null) {
        int[] color=tag.getColor();
        if (!Arrays.areEqual(tagColor,color)) {
          tagColor=null;
        }
      }
    }
    String tagTypes=GeneralUtils.stringJoin(listTagTypes,""String_Node_Str"");
    params=new Params();
    GridData gd;
    GridLayout gridLayout;
    gridLayout=new GridLayout(1,false);
    gridLayout.horizontalSpacing=gridLayout.verticalSpacing=0;
    gridLayout.marginHeight=gridLayout.marginWidth=0;
    cMainComposite.setLayout(gridLayout);
    Composite cSection1=new Composite(cMainComposite,SWT.NONE);
    gridLayout=new GridLayout(4,false);
    gridLayout.marginHeight=0;
    cSection1.setLayout(gridLayout);
    gd=new GridData(SWT.FILL,SWT.FILL,true,false);
    cSection1.setLayoutData(gd);
    Composite cSection2=new Composite(cMainComposite,SWT.NONE);
    gridLayout=new GridLayout(4,false);
    cSection2.setLayout(gridLayout);
    gd=new GridData(SWT.FILL,SWT.FILL,true,false);
    cSection2.setLayoutData(gd);
    Label label;
    label=new Label(cSection1,SWT.NONE);
    FontUtils.setFontHeight(label,12,SWT.BOLD);
    gd=new GridData();
    gd.horizontalSpan=4;
    Utils.setLayoutData(label,gd);
    label.setText(tagTypes);
    label=new Label(cSection1,SWT.NONE);
    Messages.setLanguageText(label,""String_Node_Str"");
    gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
    Utils.setLayoutData(label,gd);
    if (numTags == 1 && !tags[0].getTagType().isTagTypeAuto()) {
      Text txtName=new Text(cSection1,SWT.BORDER);
      params.cName=txtName;
      gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
      Utils.setLayoutData(txtName,gd);
      txtName.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent e){
          try {
            String newName=((Text)e.widget).getText();
            if (!tags[0].getTagName(true).equals(newName)) {
              tags[0].setTagName(newName);
            }
          }
 catch (          TagException e1) {
            Debug.out(e1);
          }
        }
      }
);
    }
 else {
      label=new Label(cSection1,SWT.WRAP);
      gd=Utils.getWrappableLabelGridData(1,GridData.GRAB_HORIZONTAL);
      Utils.setLayoutData(label,gd);
      params.cName=label;
    }
    label=new Label(cSection1,SWT.NONE);
    Messages.setLanguageText(label,""String_Node_Str"");
    if (tagColor == null) {
      tagColor=new int[]{0,0,0};
    }
    params.tagColor=new ColorParameter(cSection1,null,tagColor[0],tagColor[1],tagColor[2]){
      @Override public void newColorChosen(      RGB newColor){
        for (        Tag tag : tags) {
          tag.setColor(new int[]{newColor.red,newColor.green,newColor.blue});
        }
      }
    }
;
    params.viewInSideBar=new GenericBooleanParameter(new BooleanParameterAdapter(){
      @Override public Boolean getBooleanValue(      String key){
        int isTagVisible=-1;
        for (        Tag tag : tags) {
          isTagVisible=updateIntBoolean(tag.isVisible(),isTagVisible);
        }
        return isTagVisible == 2 ? null : (isTagVisible == 1);
      }
      @Override public void setBooleanValue(      String key,      boolean value){
        for (        Tag tag : tags) {
          tag.setVisible(value);
        }
      }
    }
,cSection2,null,""String_Node_Str"");
    gd=new GridData();
    gd.horizontalSpan=4;
    params.viewInSideBar.setLayoutData(gd);
    if (canBePublic == 1) {
      params.isPublic=new GenericBooleanParameter(new BooleanParameterAdapter(){
        @Override public Boolean getBooleanValue(        String key){
          int val=-1;
          for (          Tag tag : tags) {
            val=updateIntBoolean(tag.isPublic(),val);
          }
          return val == 2 ? null : (val == 1);
        }
        @Override public void setBooleanValue(        String key,        boolean value){
          for (          Tag tag : tags) {
            tag.setPublic(value);
          }
        }
      }
,cSection2,null,""String_Node_Str"");
      gd=new GridData();
      gd.horizontalSpan=4;
      params.isPublic.setLayoutData(gd);
    }
    Group gTransfer=new Group(cMainComposite,SWT.NONE);
    gTransfer.setText(MessageText.getString(""String_Node_Str""));
    gridLayout=new GridLayout(6,false);
    gTransfer.setLayout(gridLayout);
    gd=new GridData(SWT.FILL,SWT.NONE,false,false,4,1);
    gTransfer.setLayoutData(gd);
    if (tagsAreTagFeatureRateLimit) {
      final TagFeatureRateLimit rls[]=new TagFeatureRateLimit[tags.length];
      System.arraycopy(tags,0,rls,0,tags.length);
      boolean supportsTagDownloadLimit=true;
      boolean supportsTagUploadLimit=true;
      boolean hasTagUploadPriority=true;
      for (      TagFeatureRateLimit rl : rls) {
        supportsTagDownloadLimit&=rl.supportsTagDownloadLimit();
        supportsTagUploadLimit&=rl.supportsTagUploadLimit();
        hasTagUploadPriority&=rl.getTagUploadPriority() >= 0;
      }
      String k_unit=DisplayFormatters.getRateUnitBase10(DisplayFormatters.UNIT_KB).trim();
      int cols_used=0;
      if (supportsTagDownloadLimit) {
        gd=new GridData();
        label=new Label(gTransfer,SWT.NULL);
        Utils.setLayoutData(label,gd);
        label.setText(k_unit + ""String_Node_Str"" + MessageText.getString(""String_Node_Str""));
        gd=new GridData();
        params.maxDownloadSpeed=new GenericIntParameter(new GenericParameterAdapter(){
          @Override public int getIntValue(          String key){
            int limit=rls[0].getTagDownloadLimit();
            if (numTags > 1) {
              for (int i=1; i < rls.length; i++) {
                int nextLimit=rls[i].getTagDownloadLimit();
                if (nextLimit != limit) {
                  return 0;
                }
              }
            }
            return limit < 0 ? limit : limit / DisplayFormatters.getKinB();
          }
          @Override public int getIntValue(          String key,          int def){
            return getIntValue(key);
          }
          @Override public void setIntValue(          String key,          int value){
            for (            TagFeatureRateLimit rl : rls) {
              if (value == -1) {
                rl.setTagDownloadLimit(-1);
              }
 else {
                rl.setTagDownloadLimit(value * DisplayFormatters.getKinB());
              }
            }
          }
          @Override public boolean resetIntDefault(          String key){
            return false;
          }
        }
,gTransfer,null,-1,Integer.MAX_VALUE);
        params.maxDownloadSpeed.setLayoutData(gd);
        params.maxDownloadSpeed.setZeroHidden(numTags > 1);
        cols_used+=2;
      }
      if (supportsTagUploadLimit) {
        gd=new GridData();
        label=new Label(gTransfer,SWT.NULL);
        Utils.setLayoutData(label,gd);
        label.setText(k_unit + ""String_Node_Str"" + MessageText.getString(""String_Node_Str""));
        gd=new GridData();
        params.maxUploadSpeed=new GenericIntParameter(new GenericParameterAdapter(){
          @Override public int getIntValue(          String key){
            int limit=rls[0].getTagUploadLimit();
            if (numTags > 1) {
              for (int i=1; i < rls.length; i++) {
                int nextLimit=rls[i].getTagUploadLimit();
                if (nextLimit != limit) {
                  return 0;
                }
              }
            }
            return limit < 0 ? limit : limit / DisplayFormatters.getKinB();
          }
          @Override public int getIntValue(          String key,          int def){
            return getIntValue(key);
          }
          @Override public void setIntValue(          String key,          int value){
            for (            TagFeatureRateLimit rl : rls) {
              if (value == -1) {
                rl.setTagUploadLimit(value);
              }
 else {
                rl.setTagUploadLimit(value * DisplayFormatters.getKinB());
              }
            }
          }
          @Override public boolean resetIntDefault(          String key){
            return false;
          }
        }
,gTransfer,null,-1,Integer.MAX_VALUE);
        params.maxUploadSpeed.setLayoutData(gd);
        params.maxUploadSpeed.setZeroHidden(numTags > 1);
        cols_used+=2;
      }
      if (hasTagUploadPriority) {
        params.uploadPriority=new GenericBooleanParameter(new BooleanParameterAdapter(){
          @Override public Boolean getBooleanValue(          String key){
            int value=-1;
            for (            TagFeatureRateLimit rl : rls) {
              value=updateIntBoolean(rl.getTagUploadPriority() > 0,value);
            }
            return value == 2 ? null : value == 1;
          }
          @Override public void setBooleanValue(          String key,          boolean value){
            for (            TagFeatureRateLimit rl : rls) {
              rl.setTagUploadPriority(value ? 1 : 0);
            }
          }
        }
,gTransfer,null,""String_Node_Str"");
        gd=new GridData();
        gd.horizontalSpan=6 - cols_used;
        params.uploadPriority.setLayoutData(gd);
      }
      if (numTags == 1 && rls[0].getTagMinShareRatio() >= 0) {
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.min_sr=new GenericFloatParameter(new GenericParameterAdapter(){
          @Override public float getFloatValue(          String key){
            return rls[0].getTagMinShareRatio() / 1000f;
          }
          @Override public void setFloatValue(          String key,          float value){
            rls[0].setTagMinShareRatio((int)(value * 1000));
          }
        }
,gTransfer,null,0,Float.MAX_VALUE,true,3);
        gd=new GridData();
        gd.widthHint=75;
        params.min_sr.setLayoutData(gd);
      }
      if (numTags == 1 && rls[0].getTagMaxShareRatio() >= 0) {
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_sr=new GenericFloatParameter(new GenericParameterAdapter(){
          @Override public float getFloatValue(          String key){
            return rls[0].getTagMaxShareRatio() / 1000f;
          }
          @Override public void setFloatValue(          String key,          float value){
            rls[0].setTagMaxShareRatio((int)(value * 1000));
            updateTagSRParams(params);
          }
        }
,gTransfer,null,0,Float.MAX_VALUE,true,3);
        gd=new GridData();
        gd.widthHint=75;
        params.max_sr.setLayoutData(gd);
        String[] ST_ACTION_VALUES={""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_QUEUE,""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_PAUSE,""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_STOP};
        String[] ST_ACTION_LABELS={MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")};
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_sr_action=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public String getStringListValue(          String key){
            return (""String_Node_Str"" + rls[0].getTagMaxShareRatioAction());
          }
          @Override public void setStringListValue(          String key,          String value){
            rls[0].setTagMaxShareRatioAction(Integer.parseInt(value));
          }
        }
,gTransfer,""String_Node_Str"",""String_Node_Str"" + TagFeatureRateLimit.SR_INDIVIDUAL_ACTION_DEFAULT,ST_ACTION_LABELS,ST_ACTION_VALUES);
      }
      if (numTags == 1 && rls[0].getTagAggregateShareRatio() >= 0) {
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_aggregate_sr=new GenericFloatParameter(new GenericParameterAdapter(){
          @Override public float getFloatValue(          String key){
            return rls[0].getTagMaxAggregateShareRatio() / 1000f;
          }
          @Override public void setFloatValue(          String key,          float value){
            rls[0].setTagMaxAggregateShareRatio((int)(value * 1000));
            updateTagSRParams(params);
          }
        }
,gTransfer,null,0,Float.MAX_VALUE,true,3);
        gd=new GridData();
        gd.widthHint=75;
        params.max_aggregate_sr.setLayoutData(gd);
        String[] ST_ACTION_VALUES={""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_PAUSE,""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_STOP};
        String[] ST_ACTION_LABELS={MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")};
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_aggregate_sr_action=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public String getStringListValue(          String key){
            return (""String_Node_Str"" + rls[0].getTagMaxAggregateShareRatioAction());
          }
          @Override public void setStringListValue(          String key,          String value){
            rls[0].setTagMaxAggregateShareRatioAction(Integer.parseInt(value));
          }
        }
,gTransfer,""String_Node_Str"",""String_Node_Str"" + TagFeatureRateLimit.SR_AGGREGATE_ACTION_DEFAULT,ST_ACTION_LABELS,ST_ACTION_VALUES);
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_aggregate_sr_priority=new GenericBooleanParameter(new BooleanParameterAdapter(){
          @Override public Boolean getBooleanValue(          String key){
            return (rls[0].getTagMaxAggregateShareRatioHasPriority());
          }
          @Override public void setBooleanValue(          String key,          boolean value){
            rls[0].setTagMaxAggregateShareRatioHasPriority(value);
          }
        }
,gTransfer,""String_Node_Str"",TagFeatureRateLimit.AT_RATELIMIT_MAX_AGGREGATE_SR_PRIORITY_DEFAULT);
        updateTagSRParams(params);
      }
    }
    if (numTags == 1 && (tags[0] instanceof TagFeatureFileLocation)) {
      final TagFeatureFileLocation fl=(TagFeatureFileLocation)tags[0];
      if (fl.supportsTagCopyOnComplete() || fl.supportsTagInitialSaveFolder() || fl.supportsTagMoveOnComplete()) {
        Group gFiles=new Group(cMainComposite,SWT.NONE);
        gFiles.setText(MessageText.getString(""String_Node_Str""));
        gridLayout=new GridLayout(6,false);
        gFiles.setLayout(gridLayout);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,4,1);
        Utils.setLayoutData(gFiles,gd);
        if (fl.supportsTagInitialSaveFolder()) {
          params.initalSaveFolder=new folderOption(gFiles,""String_Node_Str""){
            @Override public void setFolder(            File folder){
              params.initalSaveData.setEnabled(folder != null);
              params.initalSaveTorrent.setEnabled(folder != null);
              fl.setTagInitialSaveFolder(folder);
            }
            @Override public File getFolder(){
              File result=fl.getTagInitialSaveFolder();
              params.initalSaveData.setEnabled(result != null);
              params.initalSaveTorrent.setEnabled(result != null);
              return (result);
            }
          }
;
          params.initalSaveData=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagInitialSaveOptions() & TagFeatureFileLocation.FL_DATA) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagInitialSaveOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_DATA;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_DATA;
              }
              fl.setTagInitialSaveOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
          params.initalSaveTorrent=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagInitialSaveOptions() & TagFeatureFileLocation.FL_TORRENT) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagInitialSaveOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_TORRENT;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_TORRENT;
              }
              fl.setTagInitialSaveOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
        }
        if (fl.supportsTagMoveOnComplete()) {
          params.moveOnCompleteFolder=new folderOption(gFiles,""String_Node_Str""){
            @Override public void setFolder(            File folder){
              params.moveOnCompleteData.setEnabled(folder != null);
              params.moveOnCompleteTorrent.setEnabled(folder != null);
              fl.setTagMoveOnCompleteFolder(folder);
            }
            @Override public File getFolder(){
              File result=fl.getTagMoveOnCompleteFolder();
              params.moveOnCompleteData.setEnabled(result != null);
              params.moveOnCompleteTorrent.setEnabled(result != null);
              return (result);
            }
          }
;
          params.moveOnCompleteData=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagMoveOnCompleteOptions() & TagFeatureFileLocation.FL_DATA) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagMoveOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_DATA;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_DATA;
              }
              fl.setTagMoveOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
          params.moveOnCompleteTorrent=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagMoveOnCompleteOptions() & TagFeatureFileLocation.FL_TORRENT) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagMoveOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_TORRENT;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_TORRENT;
              }
              fl.setTagMoveOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
        }
        if (fl.supportsTagCopyOnComplete()) {
          params.copyOnCompleteFolder=new folderOption(gFiles,""String_Node_Str""){
            @Override public void setFolder(            File folder){
              params.copyOnCompleteData.setEnabled(folder != null);
              params.copyOnCompleteTorrent.setEnabled(folder != null);
              fl.setTagCopyOnCompleteFolder(folder);
            }
            @Override public File getFolder(){
              File result=fl.getTagCopyOnCompleteFolder();
              params.copyOnCompleteData.setEnabled(result != null);
              params.copyOnCompleteTorrent.setEnabled(result != null);
              return (result);
            }
          }
;
          params.copyOnCompleteData=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagCopyOnCompleteOptions() & TagFeatureFileLocation.FL_DATA) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagCopyOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_DATA;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_DATA;
              }
              fl.setTagCopyOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
          params.copyOnCompleteTorrent=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagCopyOnCompleteOptions() & TagFeatureFileLocation.FL_TORRENT) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagCopyOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_TORRENT;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_TORRENT;
              }
              fl.setTagCopyOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
        }
      }
    }
    if (numTags == 1 && tags[0].getTagType().hasTagTypeFeature(TagFeature.TF_PROPERTIES) && (tags[0] instanceof TagFeatureProperties)) {
      TagFeatureProperties tfp=(TagFeatureProperties)tags[0];
      final TagProperty propConstraint=tfp.getProperty(TagFeatureProperties.PR_CONSTRAINT);
      if (propConstraint != null) {
        Group gConstraint=new Group(cMainComposite,SWT.NONE);
        Messages.setLanguageText(gConstraint,""String_Node_Str"");
        gridLayout=new GridLayout(5,false);
        gConstraint.setLayout(gridLayout);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,4,1);
        Utils.setLayoutData(gConstraint,gd);
        params.constraints=new Text(gConstraint,SWT.WRAP | SWT.BORDER | SWT.MULTI);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,5,1);
        gd.heightHint=40;
        Utils.setLayoutData(params.constraints,gd);
        params.constraints.addKeyListener(new KeyListener(){
          @Override public void keyReleased(          KeyEvent e){
          }
          @Override public void keyPressed(          KeyEvent e){
            params.constraints.setData(""String_Node_Str"",1);
            if (btnSaveConstraint != null && !btnSaveConstraint.isDisposed()) {
              btnSaveConstraint.setEnabled(true);
              btnResetConstraint.setEnabled(true);
            }
          }
        }
);
        params.constraintError=new Label(gConstraint,SWT.NULL);
        params.constraintError.setForeground(Colors.colorError);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,5,1);
        Utils.setLayoutData(params.constraintError,gd);
        btnSaveConstraint=new Button(gConstraint,SWT.PUSH);
        btnSaveConstraint.setEnabled(false);
        btnSaveConstraint.addListener(SWT.Selection,new Listener(){
          @Override public void handleEvent(          Event event){
            String constraint=params.constraints.getText().trim();
            String[] old_value=propConstraint.getStringList();
            if (constraint.length() == 0) {
              propConstraint.setStringList(null);
            }
 else {
              String old_options=old_value.length > 1 && old_value[1] != null ? old_value[1] : ""String_Node_Str"";
              if (old_options.length() == 0) {
                old_options=CM_ADD_REMOVE;
              }
              propConstraint.setStringList(new String[]{constraint,old_options});
            }
            if (btnSaveConstraint != null && !btnSaveConstraint.isDisposed()) {
              btnSaveConstraint.setEnabled(false);
              btnResetConstraint.setEnabled(false);
            }
          }
        }
);
        Messages.setLanguageText(btnSaveConstraint,""String_Node_Str"");
        btnResetConstraint=new Button(gConstraint,SWT.PUSH);
        btnResetConstraint.setEnabled(false);
        btnResetConstraint.addListener(SWT.Selection,new Listener(){
          @Override public void handleEvent(          Event event){
            params.constraints.setData(""String_Node_Str"",null);
            swt_updateFields();
            if (btnSaveConstraint != null && !btnSaveConstraint.isDisposed()) {
              btnSaveConstraint.setEnabled(false);
              btnResetConstraint.setEnabled(false);
            }
          }
        }
);
        Messages.setLanguageText(btnResetConstraint,""String_Node_Str"");
        Label constraintMode=new Label(gConstraint,SWT.NULL);
        Messages.setLanguageText(constraintMode,""String_Node_Str"");
        String[] CM_VALUES={CM_ADD_REMOVE,CM_ADD_ONLY,CM_REMOVE_ONLY};
        String[] CM_LABELS={MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")};
        params.constraintMode=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public String getStringListValue(          String key){
            String[] list=propConstraint.getStringList();
            if (list.length > 1 && list[1] != null) {
              return (list[1]);
            }
 else {
              return (CM_ADD_REMOVE);
            }
          }
          @Override public void setStringListValue(          String key,          String value){
            if (value == null || value.length() == 0) {
              value=CM_ADD_REMOVE;
            }
            String[] list=propConstraint.getStringList();
            propConstraint.setStringList(new String[]{list != null && list.length > 0 ? list[0] : ""String_Node_Str"",value});
          }
        }
,gConstraint,""String_Node_Str"",CM_ADD_REMOVE,CM_LABELS,CM_VALUES);
        Link lblAboutConstraint=new Link(gConstraint,SWT.WRAP);
        Utils.setLayoutData(lblAboutConstraint,Utils.getWrappableLabelGridData(1,GridData.GRAB_HORIZONTAL));
        lblAboutConstraint.setText(MessageText.getString(""String_Node_Str""));
        lblAboutConstraint.addListener(SWT.Selection,new Listener(){
          @Override public void handleEvent(          Event event){
            if (event.text != null && (event.text.startsWith(""String_Node_Str"") || event.text.startsWith(""String_Node_Str""))) {
              Utils.launch(event.text);
            }
          }
        }
);
      }
    }
    if (numTags == 1 && tags[0].getTagType().hasTagTypeFeature(TagFeature.TF_LIMITS)) {
      final TagFeatureLimits tfl=(TagFeatureLimits)tags[0];
      if (tfl.getMaximumTaggables() >= 0) {
        Group gLimits=new Group(cMainComposite,SWT.NONE);
        gLimits.setText(MessageText.getString(""String_Node_Str""));
        gridLayout=new GridLayout(6,false);
        gLimits.setLayout(gridLayout);
        gd=new GridData(SWT.FILL,SWT.NONE,false,false,4,1);
        gLimits.setLayoutData(gd);
        label=new Label(gLimits,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.tfl_max_taggables=new GenericIntParameter(new GenericParameterAdapter(){
          @Override public int getIntValue(          String key){
            return tfl.getMaximumTaggables();
          }
          @Override public int getIntValue(          String key,          int def){
            return getIntValue(key);
          }
          @Override public void setIntValue(          String key,          int value){
            tfl.setMaximumTaggables(value);
          }
        }
,gLimits,null,0,Integer.MAX_VALUE);
        params.tfl_max_taggables.disableTimedSave();
        gd=new GridData();
        gd.widthHint=50;
        params.tfl_max_taggables.setLayoutData(gd);
        label=new Label(gLimits,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        params.tfl_removal_policy=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key){
            return (String.valueOf(tfl.getRemovalStrategy()));
          }
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public void setStringListValue(          String key,          String value){
            tfl.setRemovalStrategy(value == null ? TagFeatureLimits.RS_DEFAULT : Integer.parseInt(value));
          }
        }
,gLimits,null,new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
        label=new Label(gLimits,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        params.tfl_ordering=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key){
            return (String.valueOf(tfl.getOrdering()));
          }
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public void setStringListValue(          String key,          String value){
            tfl.setOrdering(value == null ? TagFeatureLimits.OP_DEFAULT : Integer.parseInt(value));
          }
        }
,gLimits,null,new String[]{MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")},new String[]{""String_Node_Str"",""String_Node_Str""});
      }
    }
    if (numTags == 1 && tags[0].getTagType().hasTagTypeFeature(TagFeature.TF_NOTIFICATIONS)) {
      final TagFeatureNotifications tfn=(TagFeatureNotifications)tags[0];
      Group gNotifications=new Group(cMainComposite,SWT.NONE);
      gNotifications.setText(MessageText.getString(""String_Node_Str""));
      gridLayout=new GridLayout(6,false);
      gNotifications.setLayout(gridLayout);
      gd=new GridData(SWT.FILL,SWT.NONE,false,false,4,1);
      gNotifications.setLayoutData(gd);
      label=new Label(gNotifications,SWT.NONE);
      label.setText(MessageText.getString(""String_Node_Str"") + ""String_Node_Str"");
      params.notification_post_add=new GenericBooleanParameter(new BooleanParameterAdapter(){
        @Override public Boolean getBooleanValue(        String key){
          return ((tfn.getPostingNotifications() & TagFeatureNotifications.NOTIFY_ON_ADD) != 0);
        }
        @Override public void setBooleanValue(        String key,        boolean value){
          int flags=tfn.getPostingNotifications();
          if (value) {
            flags|=TagFeatureNotifications.NOTIFY_ON_ADD;
          }
 else {
            flags&=~TagFeatureNotifications.NOTIFY_ON_ADD;
          }
          tfn.setPostingNotifications(flags);
        }
      }
,gNotifications,null,""String_Node_Str"");
      params.notification_post_remove=new GenericBooleanParameter(new BooleanParameterAdapter(){
        @Override public Boolean getBooleanValue(        String key){
          return ((tfn.getPostingNotifications() & TagFeatureNotifications.NOTIFY_ON_REMOVE) != 0);
        }
        @Override public void setBooleanValue(        String key,        boolean value){
          int flags=tfn.getPostingNotifications();
          if (value) {
            flags|=TagFeatureNotifications.NOTIFY_ON_REMOVE;
          }
 else {
            flags&=~TagFeatureNotifications.NOTIFY_ON_REMOVE;
          }
          tfn.setPostingNotifications(flags);
        }
      }
,gNotifications,null,""String_Node_Str"");
    }
    swt_updateFields();
  }
  cMainComposite.layout();
  sc.setMinSize(cMainComposite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}","private void swt_initialize(Composite parent){
  if (cMainComposite == null || cMainComposite.isDisposed()) {
    if (parent == null || parent.isDisposed()) {
      return;
    }
    sc=new ScrolledComposite(parent,SWT.V_SCROLL);
    sc.setExpandHorizontal(true);
    sc.setExpandVertical(true);
    sc.getVerticalBar().setIncrement(16);
    Layout parentLayout=parent.getLayout();
    if (parentLayout instanceof GridLayout) {
      GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
      Utils.setLayoutData(sc,gd);
    }
 else     if (parentLayout instanceof FormLayout) {
      Utils.setLayoutData(sc,Utils.getFilledFormData());
    }
    cMainComposite=new Composite(sc,SWT.NONE);
    sc.setContent(cMainComposite);
  }
 else {
    Utils.disposeComposite(cMainComposite,false);
  }
  if (tags == null) {
    params=null;
    cMainComposite.setLayout(new FillLayout());
    Label label=new Label(cMainComposite,SWT.NONE);
    label.setText(MessageText.getString(""String_Node_Str""));
  }
 else {
    final int numTags=tags.length;
    int isTagVisible=-1;
    int canBePublic=-1;
    int[] tagColor=tags[0].getColor();
    boolean tagsAreTagFeatureRateLimit=true;
    Set<String> listTagTypes=new HashSet<>();
    for (    Tag tag : tags) {
      TagType tt=tag.getTagType();
      String s=tt.getTagTypeName(true);
      listTagTypes.add(s);
      if (tagsAreTagFeatureRateLimit && !(tag instanceof TagFeatureRateLimit)) {
        tagsAreTagFeatureRateLimit=false;
      }
      isTagVisible=updateIntBoolean(tag.isVisible(),isTagVisible);
      canBePublic=updateIntBoolean(tag.canBePublic(),canBePublic);
      if (tagColor != null) {
        int[] color=tag.getColor();
        if (!Arrays.areEqual(tagColor,color)) {
          tagColor=null;
        }
      }
    }
    String tagTypes=GeneralUtils.stringJoin(listTagTypes,""String_Node_Str"");
    params=new Params();
    GridData gd;
    GridLayout gridLayout;
    gridLayout=new GridLayout(1,false);
    gridLayout.horizontalSpacing=gridLayout.verticalSpacing=0;
    gridLayout.marginHeight=gridLayout.marginWidth=0;
    cMainComposite.setLayout(gridLayout);
    Composite cSection1=new Composite(cMainComposite,SWT.NONE);
    gridLayout=new GridLayout(4,false);
    gridLayout.marginHeight=0;
    cSection1.setLayout(gridLayout);
    gd=new GridData(SWT.FILL,SWT.FILL,true,false);
    cSection1.setLayoutData(gd);
    Composite cSection2=new Composite(cMainComposite,SWT.NONE);
    gridLayout=new GridLayout(4,false);
    cSection2.setLayout(gridLayout);
    gd=new GridData(SWT.FILL,SWT.FILL,true,false);
    cSection2.setLayoutData(gd);
    Label label;
    label=new Label(cSection1,SWT.NONE);
    FontUtils.setFontHeight(label,12,SWT.BOLD);
    gd=new GridData();
    gd.horizontalSpan=4;
    Utils.setLayoutData(label,gd);
    label.setText(tagTypes);
    label=new Label(cSection1,SWT.NONE);
    Messages.setLanguageText(label,""String_Node_Str"");
    gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
    Utils.setLayoutData(label,gd);
    if (numTags == 1 && !tags[0].getTagType().isTagTypeAuto()) {
      Text txtName=new Text(cSection1,SWT.BORDER);
      params.cName=txtName;
      gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
      Utils.setLayoutData(txtName,gd);
      txtName.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent e){
          try {
            String newName=((Text)e.widget).getText();
            if (!tags[0].getTagName(true).equals(newName)) {
              tags[0].setTagName(newName);
            }
          }
 catch (          TagException e1) {
            Debug.out(e1);
          }
        }
      }
);
    }
 else {
      label=new Label(cSection1,SWT.WRAP);
      gd=Utils.getWrappableLabelGridData(1,GridData.GRAB_HORIZONTAL);
      Utils.setLayoutData(label,gd);
      params.cName=label;
    }
    label=new Label(cSection1,SWT.NONE);
    Messages.setLanguageText(label,""String_Node_Str"");
    if (tagColor == null) {
      tagColor=new int[]{0,0,0};
    }
    params.tagColor=new ColorParameter(cSection1,null,tagColor[0],tagColor[1],tagColor[2]){
      @Override public void newColorChosen(      RGB newColor){
        for (        Tag tag : tags) {
          tag.setColor(new int[]{newColor.red,newColor.green,newColor.blue});
        }
      }
    }
;
    params.viewInSideBar=new GenericBooleanParameter(new BooleanParameterAdapter(){
      @Override public Boolean getBooleanValue(      String key){
        int isTagVisible=-1;
        for (        Tag tag : tags) {
          isTagVisible=updateIntBoolean(tag.isVisible(),isTagVisible);
        }
        return isTagVisible == 2 ? null : (isTagVisible == 1);
      }
      @Override public void setBooleanValue(      String key,      boolean value){
        for (        Tag tag : tags) {
          tag.setVisible(value);
        }
      }
    }
,cSection2,null,""String_Node_Str"");
    gd=new GridData();
    gd.horizontalSpan=4;
    params.viewInSideBar.setLayoutData(gd);
    if (canBePublic == 1) {
      params.isPublic=new GenericBooleanParameter(new BooleanParameterAdapter(){
        @Override public Boolean getBooleanValue(        String key){
          int val=-1;
          for (          Tag tag : tags) {
            val=updateIntBoolean(tag.isPublic(),val);
          }
          return val == 2 ? null : (val == 1);
        }
        @Override public void setBooleanValue(        String key,        boolean value){
          for (          Tag tag : tags) {
            tag.setPublic(value);
          }
        }
      }
,cSection2,null,""String_Node_Str"");
      gd=new GridData();
      gd.horizontalSpan=4;
      params.isPublic.setLayoutData(gd);
    }
    Group gTransfer=new Group(cMainComposite,SWT.NONE);
    gTransfer.setText(MessageText.getString(""String_Node_Str""));
    gridLayout=new GridLayout(6,false);
    gTransfer.setLayout(gridLayout);
    gd=new GridData(SWT.FILL,SWT.NONE,false,false,4,1);
    gTransfer.setLayoutData(gd);
    if (tagsAreTagFeatureRateLimit) {
      final TagFeatureRateLimit rls[]=new TagFeatureRateLimit[tags.length];
      System.arraycopy(tags,0,rls,0,tags.length);
      boolean supportsTagDownloadLimit=true;
      boolean supportsTagUploadLimit=true;
      boolean hasTagUploadPriority=true;
      for (      TagFeatureRateLimit rl : rls) {
        supportsTagDownloadLimit&=rl.supportsTagDownloadLimit();
        supportsTagUploadLimit&=rl.supportsTagUploadLimit();
        hasTagUploadPriority&=rl.getTagUploadPriority() >= 0;
      }
      String k_unit=DisplayFormatters.getRateUnitBase10(DisplayFormatters.UNIT_KB).trim();
      int cols_used=0;
      if (supportsTagDownloadLimit) {
        gd=new GridData();
        label=new Label(gTransfer,SWT.NULL);
        Utils.setLayoutData(label,gd);
        label.setText(k_unit + ""String_Node_Str"" + MessageText.getString(""String_Node_Str""));
        gd=new GridData();
        params.maxDownloadSpeed=new GenericIntParameter(new GenericParameterAdapter(){
          @Override public int getIntValue(          String key){
            int limit=rls[0].getTagDownloadLimit();
            if (numTags > 1) {
              for (int i=1; i < rls.length; i++) {
                int nextLimit=rls[i].getTagDownloadLimit();
                if (nextLimit != limit) {
                  return 0;
                }
              }
            }
            return limit < 0 ? limit : limit / DisplayFormatters.getKinB();
          }
          @Override public int getIntValue(          String key,          int def){
            return getIntValue(key);
          }
          @Override public void setIntValue(          String key,          int value){
            for (            TagFeatureRateLimit rl : rls) {
              if (value == -1) {
                rl.setTagDownloadLimit(-1);
              }
 else {
                rl.setTagDownloadLimit(value * DisplayFormatters.getKinB());
              }
            }
          }
          @Override public boolean resetIntDefault(          String key){
            return false;
          }
        }
,gTransfer,null,-1,Integer.MAX_VALUE);
        params.maxDownloadSpeed.setLayoutData(gd);
        params.maxDownloadSpeed.setZeroHidden(numTags > 1);
        cols_used+=2;
      }
      if (supportsTagUploadLimit) {
        gd=new GridData();
        label=new Label(gTransfer,SWT.NULL);
        Utils.setLayoutData(label,gd);
        label.setText(k_unit + ""String_Node_Str"" + MessageText.getString(""String_Node_Str""));
        gd=new GridData();
        params.maxUploadSpeed=new GenericIntParameter(new GenericParameterAdapter(){
          @Override public int getIntValue(          String key){
            int limit=rls[0].getTagUploadLimit();
            if (numTags > 1) {
              for (int i=1; i < rls.length; i++) {
                int nextLimit=rls[i].getTagUploadLimit();
                if (nextLimit != limit) {
                  return 0;
                }
              }
            }
            return limit < 0 ? limit : limit / DisplayFormatters.getKinB();
          }
          @Override public int getIntValue(          String key,          int def){
            return getIntValue(key);
          }
          @Override public void setIntValue(          String key,          int value){
            for (            TagFeatureRateLimit rl : rls) {
              if (value == -1) {
                rl.setTagUploadLimit(value);
              }
 else {
                rl.setTagUploadLimit(value * DisplayFormatters.getKinB());
              }
            }
          }
          @Override public boolean resetIntDefault(          String key){
            return false;
          }
        }
,gTransfer,null,-1,Integer.MAX_VALUE);
        params.maxUploadSpeed.setLayoutData(gd);
        params.maxUploadSpeed.setZeroHidden(numTags > 1);
        cols_used+=2;
      }
      if (hasTagUploadPriority) {
        params.uploadPriority=new GenericBooleanParameter(new BooleanParameterAdapter(){
          @Override public Boolean getBooleanValue(          String key){
            int value=-1;
            for (            TagFeatureRateLimit rl : rls) {
              value=updateIntBoolean(rl.getTagUploadPriority() > 0,value);
            }
            return value == 2 ? null : value == 1;
          }
          @Override public void setBooleanValue(          String key,          boolean value){
            for (            TagFeatureRateLimit rl : rls) {
              rl.setTagUploadPriority(value ? 1 : 0);
            }
          }
        }
,gTransfer,null,""String_Node_Str"");
        gd=new GridData();
        gd.horizontalSpan=6 - cols_used;
        params.uploadPriority.setLayoutData(gd);
      }
      if (numTags == 1 && rls[0].getTagMinShareRatio() >= 0) {
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.min_sr=new GenericFloatParameter(new GenericParameterAdapter(){
          @Override public float getFloatValue(          String key){
            return rls[0].getTagMinShareRatio() / 1000f;
          }
          @Override public void setFloatValue(          String key,          float value){
            rls[0].setTagMinShareRatio((int)(value * 1000));
          }
        }
,gTransfer,null,0,Float.MAX_VALUE,true,3);
        gd=new GridData();
        gd.widthHint=75;
        params.min_sr.setLayoutData(gd);
      }
      if (numTags == 1 && rls[0].getTagMaxShareRatio() >= 0) {
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_sr=new GenericFloatParameter(new GenericParameterAdapter(){
          @Override public float getFloatValue(          String key){
            return rls[0].getTagMaxShareRatio() / 1000f;
          }
          @Override public void setFloatValue(          String key,          float value){
            rls[0].setTagMaxShareRatio((int)(value * 1000));
            updateTagSRParams(params);
          }
        }
,gTransfer,null,0,Float.MAX_VALUE,true,3);
        gd=new GridData();
        gd.widthHint=75;
        params.max_sr.setLayoutData(gd);
        String[] ST_ACTION_VALUES={""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_QUEUE,""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_PAUSE,""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_STOP};
        String[] ST_ACTION_LABELS={MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")};
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_sr_action=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public String getStringListValue(          String key){
            return (""String_Node_Str"" + rls[0].getTagMaxShareRatioAction());
          }
          @Override public void setStringListValue(          String key,          String value){
            rls[0].setTagMaxShareRatioAction(Integer.parseInt(value));
          }
        }
,gTransfer,""String_Node_Str"",""String_Node_Str"" + TagFeatureRateLimit.SR_INDIVIDUAL_ACTION_DEFAULT,ST_ACTION_LABELS,ST_ACTION_VALUES);
      }
      if (numTags == 1 && rls[0].getTagAggregateShareRatio() >= 0) {
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_aggregate_sr=new GenericFloatParameter(new GenericParameterAdapter(){
          @Override public float getFloatValue(          String key){
            return rls[0].getTagMaxAggregateShareRatio() / 1000f;
          }
          @Override public void setFloatValue(          String key,          float value){
            rls[0].setTagMaxAggregateShareRatio((int)(value * 1000));
            updateTagSRParams(params);
          }
        }
,gTransfer,null,0,Float.MAX_VALUE,true,3);
        gd=new GridData();
        gd.widthHint=75;
        params.max_aggregate_sr.setLayoutData(gd);
        String[] ST_ACTION_VALUES={""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_PAUSE,""String_Node_Str"" + TagFeatureRateLimit.SR_ACTION_STOP};
        String[] ST_ACTION_LABELS={MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")};
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_aggregate_sr_action=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public String getStringListValue(          String key){
            return (""String_Node_Str"" + rls[0].getTagMaxAggregateShareRatioAction());
          }
          @Override public void setStringListValue(          String key,          String value){
            rls[0].setTagMaxAggregateShareRatioAction(Integer.parseInt(value));
          }
        }
,gTransfer,""String_Node_Str"",""String_Node_Str"" + TagFeatureRateLimit.SR_AGGREGATE_ACTION_DEFAULT,ST_ACTION_LABELS,ST_ACTION_VALUES);
        label=new Label(gTransfer,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.max_aggregate_sr_priority=new GenericBooleanParameter(new BooleanParameterAdapter(){
          @Override public Boolean getBooleanValue(          String key){
            return (rls[0].getTagMaxAggregateShareRatioHasPriority());
          }
          @Override public void setBooleanValue(          String key,          boolean value){
            rls[0].setTagMaxAggregateShareRatioHasPriority(value);
          }
        }
,gTransfer,""String_Node_Str"",TagFeatureRateLimit.AT_RATELIMIT_MAX_AGGREGATE_SR_PRIORITY_DEFAULT);
        updateTagSRParams(params);
      }
    }
    if (numTags == 1 && (tags[0] instanceof TagFeatureFileLocation)) {
      final TagFeatureFileLocation fl=(TagFeatureFileLocation)tags[0];
      if (fl.supportsTagCopyOnComplete() || fl.supportsTagInitialSaveFolder() || fl.supportsTagMoveOnComplete()) {
        Group gFiles=new Group(cMainComposite,SWT.NONE);
        gFiles.setText(MessageText.getString(""String_Node_Str""));
        gridLayout=new GridLayout(6,false);
        gFiles.setLayout(gridLayout);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,4,1);
        Utils.setLayoutData(gFiles,gd);
        if (fl.supportsTagInitialSaveFolder()) {
          params.initalSaveFolder=new folderOption(gFiles,""String_Node_Str""){
            @Override public void setFolder(            File folder){
              params.initalSaveData.setEnabled(folder != null);
              params.initalSaveTorrent.setEnabled(folder != null);
              fl.setTagInitialSaveFolder(folder);
            }
            @Override public File getFolder(){
              File result=fl.getTagInitialSaveFolder();
              params.initalSaveData.setEnabled(result != null);
              params.initalSaveTorrent.setEnabled(result != null);
              return (result);
            }
          }
;
          params.initalSaveData=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagInitialSaveOptions() & TagFeatureFileLocation.FL_DATA) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagInitialSaveOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_DATA;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_DATA;
              }
              fl.setTagInitialSaveOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
          params.initalSaveTorrent=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagInitialSaveOptions() & TagFeatureFileLocation.FL_TORRENT) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagInitialSaveOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_TORRENT;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_TORRENT;
              }
              fl.setTagInitialSaveOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
        }
        if (fl.supportsTagMoveOnComplete()) {
          params.moveOnCompleteFolder=new folderOption(gFiles,""String_Node_Str""){
            @Override public void setFolder(            File folder){
              params.moveOnCompleteData.setEnabled(folder != null);
              params.moveOnCompleteTorrent.setEnabled(folder != null);
              fl.setTagMoveOnCompleteFolder(folder);
            }
            @Override public File getFolder(){
              File result=fl.getTagMoveOnCompleteFolder();
              params.moveOnCompleteData.setEnabled(result != null);
              params.moveOnCompleteTorrent.setEnabled(result != null);
              return (result);
            }
          }
;
          params.moveOnCompleteData=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagMoveOnCompleteOptions() & TagFeatureFileLocation.FL_DATA) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagMoveOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_DATA;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_DATA;
              }
              fl.setTagMoveOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
          params.moveOnCompleteTorrent=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagMoveOnCompleteOptions() & TagFeatureFileLocation.FL_TORRENT) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagMoveOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_TORRENT;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_TORRENT;
              }
              fl.setTagMoveOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
        }
        if (fl.supportsTagCopyOnComplete()) {
          params.copyOnCompleteFolder=new folderOption(gFiles,""String_Node_Str""){
            @Override public void setFolder(            File folder){
              params.copyOnCompleteData.setEnabled(folder != null);
              params.copyOnCompleteTorrent.setEnabled(folder != null);
              fl.setTagCopyOnCompleteFolder(folder);
            }
            @Override public File getFolder(){
              File result=fl.getTagCopyOnCompleteFolder();
              params.copyOnCompleteData.setEnabled(result != null);
              params.copyOnCompleteTorrent.setEnabled(result != null);
              return (result);
            }
          }
;
          params.copyOnCompleteData=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagCopyOnCompleteOptions() & TagFeatureFileLocation.FL_DATA) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagCopyOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_DATA;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_DATA;
              }
              fl.setTagCopyOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
          params.copyOnCompleteTorrent=new GenericBooleanParameter(new BooleanParameterAdapter(){
            @Override public Boolean getBooleanValue(            String key){
              return ((fl.getTagCopyOnCompleteOptions() & TagFeatureFileLocation.FL_TORRENT) != 0);
            }
            @Override public void setBooleanValue(            String key,            boolean value){
              long flags=fl.getTagCopyOnCompleteOptions();
              if (value) {
                flags|=TagFeatureFileLocation.FL_TORRENT;
              }
 else {
                flags&=~TagFeatureFileLocation.FL_TORRENT;
              }
              fl.setTagCopyOnCompleteOptions(flags);
            }
          }
,gFiles,null,""String_Node_Str"");
        }
      }
    }
    if (numTags == 1 && tags[0].getTagType().hasTagTypeFeature(TagFeature.TF_PROPERTIES) && (tags[0] instanceof TagFeatureProperties)) {
      TagFeatureProperties tfp=(TagFeatureProperties)tags[0];
      final TagProperty propConstraint=tfp.getProperty(TagFeatureProperties.PR_CONSTRAINT);
      if (propConstraint != null) {
        Group gConstraint=new Group(cMainComposite,SWT.NONE);
        Messages.setLanguageText(gConstraint,""String_Node_Str"");
        gridLayout=new GridLayout(5,false);
        gConstraint.setLayout(gridLayout);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,4,1);
        Utils.setLayoutData(gConstraint,gd);
        params.constraints=new Text(gConstraint,SWT.WRAP | SWT.BORDER | SWT.MULTI);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,5,1);
        gd.heightHint=40;
        Utils.setLayoutData(params.constraints,gd);
        params.constraints.addKeyListener(new KeyListener(){
          @Override public void keyReleased(          KeyEvent e){
          }
          @Override public void keyPressed(          KeyEvent e){
            params.constraints.setData(""String_Node_Str"",1);
            if (btnSaveConstraint != null && !btnSaveConstraint.isDisposed()) {
              btnSaveConstraint.setEnabled(true);
              btnResetConstraint.setEnabled(true);
            }
          }
        }
);
        params.constraintError=new Label(gConstraint,SWT.NULL);
        params.constraintError.setForeground(Colors.colorError);
        gd=new GridData(SWT.FILL,SWT.NONE,true,false,5,1);
        Utils.setLayoutData(params.constraintError,gd);
        btnSaveConstraint=new Button(gConstraint,SWT.PUSH);
        btnSaveConstraint.setEnabled(false);
        btnSaveConstraint.addListener(SWT.Selection,new Listener(){
          @Override public void handleEvent(          Event event){
            String constraint=params.constraints.getText().trim();
            String[] old_value=propConstraint.getStringList();
            if (constraint.length() == 0) {
              propConstraint.setStringList(null);
            }
 else {
              String old_options=old_value.length > 1 && old_value[1] != null ? old_value[1] : ""String_Node_Str"";
              if (old_options.length() == 0) {
                old_options=CM_ADD_REMOVE;
              }
              propConstraint.setStringList(new String[]{constraint,old_options});
            }
            if (btnSaveConstraint != null && !btnSaveConstraint.isDisposed()) {
              btnSaveConstraint.setEnabled(false);
              btnResetConstraint.setEnabled(false);
            }
          }
        }
);
        Messages.setLanguageText(btnSaveConstraint,""String_Node_Str"");
        btnResetConstraint=new Button(gConstraint,SWT.PUSH);
        btnResetConstraint.setEnabled(false);
        btnResetConstraint.addListener(SWT.Selection,new Listener(){
          @Override public void handleEvent(          Event event){
            params.constraints.setData(""String_Node_Str"",null);
            swt_updateFields();
            if (btnSaveConstraint != null && !btnSaveConstraint.isDisposed()) {
              btnSaveConstraint.setEnabled(false);
              btnResetConstraint.setEnabled(false);
            }
          }
        }
);
        Messages.setLanguageText(btnResetConstraint,""String_Node_Str"");
        Label constraintMode=new Label(gConstraint,SWT.NULL);
        Messages.setLanguageText(constraintMode,""String_Node_Str"");
        String[] CM_VALUES={CM_ADD_REMOVE,CM_ADD_ONLY,CM_REMOVE_ONLY};
        String[] CM_LABELS={MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")};
        params.constraintMode=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public String getStringListValue(          String key){
            String[] list=propConstraint.getStringList();
            if (list.length > 1 && list[1] != null) {
              return (list[1]);
            }
 else {
              return (CM_ADD_REMOVE);
            }
          }
          @Override public void setStringListValue(          String key,          String value){
            if (value == null || value.length() == 0) {
              value=CM_ADD_REMOVE;
            }
            String[] list=propConstraint.getStringList();
            propConstraint.setStringList(new String[]{list != null && list.length > 0 ? list[0] : ""String_Node_Str"",value});
          }
        }
,gConstraint,""String_Node_Str"",CM_ADD_REMOVE,CM_LABELS,CM_VALUES);
        Link lblAboutConstraint=new Link(gConstraint,SWT.WRAP);
        Utils.setLayoutData(lblAboutConstraint,Utils.getWrappableLabelGridData(1,GridData.GRAB_HORIZONTAL));
        lblAboutConstraint.setText(MessageText.getString(""String_Node_Str""));
        lblAboutConstraint.addListener(SWT.Selection,new Listener(){
          @Override public void handleEvent(          Event event){
            if (event.text != null && (event.text.startsWith(""String_Node_Str"") || event.text.startsWith(""String_Node_Str""))) {
              Utils.launch(event.text);
            }
          }
        }
);
      }
    }
    if (numTags == 1 && tags[0].getTagType().hasTagTypeFeature(TagFeature.TF_LIMITS)) {
      final TagFeatureLimits tfl=(TagFeatureLimits)tags[0];
      if (tfl.getMaximumTaggables() >= 0) {
        Group gLimits=new Group(cMainComposite,SWT.NONE);
        gLimits.setText(MessageText.getString(""String_Node_Str""));
        gridLayout=new GridLayout(6,false);
        gLimits.setLayout(gridLayout);
        gd=new GridData(SWT.FILL,SWT.NONE,false,false,4,1);
        gLimits.setLayoutData(gd);
        label=new Label(gLimits,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        gd=new GridData(SWT.BEGINNING,SWT.CENTER,false,false);
        Utils.setLayoutData(label,gd);
        params.tfl_max_taggables=new GenericIntParameter(new GenericParameterAdapter(){
          @Override public int getIntValue(          String key){
            return tfl.getMaximumTaggables();
          }
          @Override public int getIntValue(          String key,          int def){
            return getIntValue(key);
          }
          @Override public void setIntValue(          String key,          int value){
            tfl.setMaximumTaggables(value);
          }
        }
,gLimits,null,0,Integer.MAX_VALUE);
        params.tfl_max_taggables.disableTimedSave();
        gd=new GridData();
        gd.widthHint=50;
        params.tfl_max_taggables.setLayoutData(gd);
        label=new Label(gLimits,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        params.tfl_removal_policy=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key){
            return (String.valueOf(tfl.getRemovalStrategy()));
          }
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public void setStringListValue(          String key,          String value){
            tfl.setRemovalStrategy(value == null ? TagFeatureLimits.RS_DEFAULT : Integer.parseInt(value));
          }
        }
,gLimits,null,new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
        label=new Label(gLimits,SWT.NONE);
        Messages.setLanguageText(label,""String_Node_Str"");
        params.tfl_ordering=new GenericStringListParameter(new GenericParameterAdapter(){
          @Override public String getStringListValue(          String key){
            return (String.valueOf(tfl.getOrdering()));
          }
          @Override public String getStringListValue(          String key,          String def){
            return (getStringListValue(key));
          }
          @Override public void setStringListValue(          String key,          String value){
            tfl.setOrdering(value == null ? TagFeatureLimits.OP_DEFAULT : Integer.parseInt(value));
          }
        }
,gLimits,null,new String[]{MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")},new String[]{""String_Node_Str"",""String_Node_Str""});
      }
    }
    if (numTags == 1 && tags[0].getTagType().hasTagTypeFeature(TagFeature.TF_NOTIFICATIONS)) {
      final TagFeatureNotifications tfn=(TagFeatureNotifications)tags[0];
      Group gNotifications=new Group(cMainComposite,SWT.NONE);
      gNotifications.setText(MessageText.getString(""String_Node_Str""));
      gridLayout=new GridLayout(6,false);
      gNotifications.setLayout(gridLayout);
      gd=new GridData(SWT.FILL,SWT.NONE,false,false,4,1);
      gNotifications.setLayoutData(gd);
      label=new Label(gNotifications,SWT.NONE);
      label.setText(MessageText.getString(""String_Node_Str"") + ""String_Node_Str"");
      params.notification_post_add=new GenericBooleanParameter(new BooleanParameterAdapter(){
        @Override public Boolean getBooleanValue(        String key){
          return ((tfn.getPostingNotifications() & TagFeatureNotifications.NOTIFY_ON_ADD) != 0);
        }
        @Override public void setBooleanValue(        String key,        boolean value){
          int flags=tfn.getPostingNotifications();
          if (value) {
            flags|=TagFeatureNotifications.NOTIFY_ON_ADD;
          }
 else {
            flags&=~TagFeatureNotifications.NOTIFY_ON_ADD;
          }
          tfn.setPostingNotifications(flags);
        }
      }
,gNotifications,null,""String_Node_Str"");
      params.notification_post_remove=new GenericBooleanParameter(new BooleanParameterAdapter(){
        @Override public Boolean getBooleanValue(        String key){
          return ((tfn.getPostingNotifications() & TagFeatureNotifications.NOTIFY_ON_REMOVE) != 0);
        }
        @Override public void setBooleanValue(        String key,        boolean value){
          int flags=tfn.getPostingNotifications();
          if (value) {
            flags|=TagFeatureNotifications.NOTIFY_ON_REMOVE;
          }
 else {
            flags&=~TagFeatureNotifications.NOTIFY_ON_REMOVE;
          }
          tfn.setPostingNotifications(flags);
        }
      }
,gNotifications,null,""String_Node_Str"");
    }
    swt_updateFields();
  }
  cMainComposite.layout();
  Rectangle r=sc.getClientArea();
  sc.setMinSize(cMainComposite.computeSize(r.width,SWT.DEFAULT));
}",0.9992173459330976
170789,"protected void sendMessage(String text){
  try {
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(text);
    boolean result=m.find();
    if (result) {
      StringBuffer sb=new StringBuffer();
      while (result) {
        String str=m.group(1);
        int unicode=Integer.parseInt(str,16);
        m.appendReplacement(sb,Matcher.quoteReplacement(String.valueOf((char)unicode)));
        result=m.find();
      }
      m.appendTail(sb);
      text=sb.toString();
    }
  }
 catch (  Throwable e) {
  }
  boolean hacked=false;
  Pattern p=getEmphasisPattern();
  Matcher m=p.matcher(text);
  boolean result=m.find();
  if (result) {
    StringBuffer sb=new StringBuffer();
    while (result) {
      String match=m.group(1);
      boolean is_italic=match.length() == 1 || match.toLowerCase(Locale.US).contains(""String_Node_Str"");
      String str=m.group(3);
      str=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
      hacked=true;
      String emphasis=is_italic ? ""String_Node_Str"" : ""String_Node_Str"";
      m.appendReplacement(sb,Matcher.quoteReplacement(emphasis + str + emphasis));
      result=m.find();
    }
    m.appendTail(sb);
    text=sb.toString();
  }
  while (text.length() > MAX_MSG_CHUNK_LENGTH) {
    char[] chars=text.toCharArray();
    int pos=MAX_MSG_CHUNK_LENGTH - 1;
    boolean chunked=false;
    while (pos > MAX_MSG_CHUNK_LENGTH / 2) {
      if (chars[pos] == ' ') {
        String chunk=text.substring(0,pos).trim();
        if (!chunk.isEmpty()) {
          if (hacked) {
            chunk=chunk.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
          chat.sendMessage(chunk,new HashMap<String,Object>());
        }
        text=text.substring(pos).trim();
        chunked=true;
        break;
      }
      pos--;
    }
    if (!chunked) {
      String chunk=text.substring(0,MAX_MSG_CHUNK_LENGTH).trim();
      if (!chunk.isEmpty()) {
        if (hacked) {
          chunk=chunk.replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        chat.sendMessage(chunk,new HashMap<String,Object>());
      }
      text=text.substring(MAX_MSG_CHUNK_LENGTH).trim();
    }
  }
  if (text.length() > 0) {
    if (hacked) {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    chat.sendMessage(text,new HashMap<String,Object>());
  }
}","protected void sendMessage(String text){
  try {
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(text);
    boolean result=m.find();
    if (result) {
      StringBuffer sb=new StringBuffer();
      while (result) {
        String str=m.group(1);
        int unicode=Integer.parseInt(str,16);
        m.appendReplacement(sb,Matcher.quoteReplacement(String.valueOf((char)unicode)));
        result=m.find();
      }
      m.appendTail(sb);
      text=sb.toString();
    }
  }
 catch (  Throwable e) {
  }
  boolean hacked=false;
  Pattern p=getEmphasisPattern();
  Matcher m=p.matcher(text);
  boolean result=m.find();
  if (result) {
    StringBuffer sb=new StringBuffer();
    while (result) {
      String match_start=m.group(1);
      String emp_text=m.group(3);
      String match_end=m.group(4);
      if (emp_text.contains(""String_Node_Str"")) {
        emp_text=emp_text.replaceAll(""String_Node_Str"",""String_Node_Str"");
        hacked=true;
      }
      m.appendReplacement(sb,Matcher.quoteReplacement(match_start + emp_text + match_end));
      result=m.find();
    }
    m.appendTail(sb);
    text=sb.toString();
  }
  while (text.length() > MAX_MSG_CHUNK_LENGTH) {
    char[] chars=text.toCharArray();
    int pos=MAX_MSG_CHUNK_LENGTH - 1;
    boolean chunked=false;
    while (pos > MAX_MSG_CHUNK_LENGTH / 2) {
      if (chars[pos] == ' ') {
        String chunk=text.substring(0,pos).trim();
        if (!chunk.isEmpty()) {
          if (hacked) {
            chunk=chunk.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
          chat.sendMessage(chunk,new HashMap<String,Object>());
        }
        text=text.substring(pos).trim();
        chunked=true;
        break;
      }
      pos--;
    }
    if (!chunked) {
      String chunk=text.substring(0,MAX_MSG_CHUNK_LENGTH).trim();
      if (!chunk.isEmpty()) {
        if (hacked) {
          chunk=chunk.replaceAll(""String_Node_Str"",""String_Node_Str"");
        }
        chat.sendMessage(chunk,new HashMap<String,Object>());
      }
      text=text.substring(MAX_MSG_CHUNK_LENGTH).trim();
    }
  }
  if (text.length() > 0) {
    if (hacked) {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    chat.sendMessage(text,new HashMap<String,Object>());
  }
}",0.9252761533463288
170790,"public static Map<String,Long> calculateToolbarStates(ISelectedContent[] currentContent,String viewID_unused){
  Map<String,Long> mapNewToolbarStates=new HashMap<>();
  String[] itemsNeedingSelection={};
  String[] itemsNeedingRealDMSelection={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] itemsRequiring1DMwithHash={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] itemsRequiring1DMSelection={};
  int numSelection=currentContent.length;
  boolean hasSelection=numSelection > 0;
  boolean has1Selection=numSelection == 1;
  for (int i=0; i < itemsNeedingSelection.length; i++) {
    String itemID=itemsNeedingSelection[i];
    mapNewToolbarStates.put(itemID,hasSelection ? UIToolBarItem.STATE_ENABLED : 0);
  }
  TableView tv=SelectedContentManager.getCurrentlySelectedTableView();
  boolean hasRealDM=tv != null;
  if (!hasRealDM && numSelection > 0) {
    hasRealDM=true;
    for (int i=0; i < currentContent.length; i++) {
      ISelectedContent content=currentContent[i];
      DownloadManager dm=content.getDownloadManager();
      if (dm == null) {
        hasRealDM=false;
        break;
      }
    }
  }
  if (!hasRealDM) {
    MultipleDocumentInterfaceSWT mdi=UIFunctionsManagerSWT.getUIFunctionsSWT().getMDISWT();
    if (mdi != null) {
      MdiEntrySWT entry=mdi.getCurrentEntrySWT();
      if (entry != null) {
        if (entry.getDatasource() instanceof DownloadManager) {
          hasRealDM=true;
        }
 else         if ((entry instanceof UIPluginView) && (((UIPluginView)entry).getDataSource() instanceof DownloadManager)) {
          hasRealDM=true;
        }
      }
    }
  }
  boolean canStart=false;
  boolean canStop=false;
  boolean canRemoveFileInfo=false;
  boolean canRunFileInfo=false;
  boolean hasDM=false;
  if (currentContent.length > 0 && hasRealDM) {
    boolean canMoveUp=false;
    boolean canMoveDown=false;
    boolean canDownload=false;
    GlobalManager gm=null;
    for (int i=0; i < currentContent.length; i++) {
      ISelectedContent content=currentContent[i];
      DownloadManager dm=content.getDownloadManager();
      if (dm == null) {
        if (!canDownload && content.getDownloadInfo() != null) {
          canDownload=true;
        }
        continue;
      }
      if (gm == null) {
        gm=dm.getGlobalManager();
      }
      int fileIndex=content.getFileIndex();
      if (fileIndex == -1) {
        if (!canMoveUp && gm.isMoveableUp(dm)) {
          canMoveUp=true;
        }
        if (!canMoveDown && gm.isMoveableDown(dm)) {
          canMoveDown=true;
        }
        hasDM=true;
        if (!canStart && ManagerUtils.isStartable(dm)) {
          canStart=true;
        }
        if (!canStop && ManagerUtils.isStopable(dm)) {
          canStop=true;
        }
      }
 else {
        DiskManagerFileInfoSet fileInfos=dm.getDiskManagerFileInfoSet();
        if (fileIndex < fileInfos.nbFiles()) {
          DiskManagerFileInfo fileInfo=fileInfos.getFiles()[fileIndex];
          if (!canStart && (fileInfo.isSkipped())) {
            canStart=true;
          }
          if (!canStop && !fileInfo.isSkipped()) {
            canStop=true;
          }
          if (!canRemoveFileInfo && !fileInfo.isSkipped()) {
            int storageType=fileInfo.getStorageType();
            if (storageType == DiskManagerFileInfo.ST_LINEAR || storageType == DiskManagerFileInfo.ST_COMPACT) {
              canRemoveFileInfo=true;
            }
          }
          if (!canRunFileInfo && fileInfo.getAccessMode() == DiskManagerFileInfo.READ && fileInfo.getDownloaded() == fileInfo.getLength() && fileInfo.getFile(true).exists()) {
            canRunFileInfo=true;
          }
        }
      }
    }
    boolean canRemove=hasDM || canRemoveFileInfo;
    mapNewToolbarStates.put(""String_Node_Str"",canRemove ? UIToolBarItem.STATE_ENABLED : 0);
    mapNewToolbarStates.put(""String_Node_Str"",canDownload ? UIToolBarItem.STATE_ENABLED : 0);
    if (currentContent.length == 1) {
      mapNewToolbarStates.put(""String_Node_Str"",canMoveUp ? UIToolBarItem.STATE_ENABLED : 0);
      mapNewToolbarStates.put(""String_Node_Str"",canMoveDown ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  boolean canRun=has1Selection && ((hasDM && !canRunFileInfo) || (!hasDM && canRunFileInfo));
  if (canRun) {
    ISelectedContent content=currentContent[0];
    DownloadManager dm=content.getDownloadManager();
    if (dm == null) {
      canRun=false;
    }
 else {
      TOTorrent torrent=dm.getTorrent();
      if (torrent == null) {
        canRun=false;
      }
 else       if (!dm.getAssumedComplete() && torrent.isSimpleTorrent()) {
        canRun=false;
      }
    }
  }
  mapNewToolbarStates.put(""String_Node_Str"",canRun ? UIToolBarItem.STATE_ENABLED : 0);
  mapNewToolbarStates.put(""String_Node_Str"",canStart ? UIToolBarItem.STATE_ENABLED : 0);
  mapNewToolbarStates.put(""String_Node_Str"",canStop ? UIToolBarItem.STATE_ENABLED : 0);
  mapNewToolbarStates.put(""String_Node_Str"",canStart || canStop ? UIToolBarItem.STATE_ENABLED : 0);
  for (int i=0; i < itemsNeedingRealDMSelection.length; i++) {
    String itemID=itemsNeedingRealDMSelection[i];
    if (!mapNewToolbarStates.containsKey(itemID)) {
      mapNewToolbarStates.put(itemID,hasSelection && hasDM && hasRealDM ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  for (int i=0; i < itemsRequiring1DMSelection.length; i++) {
    String itemID=itemsRequiring1DMSelection[i];
    if (!mapNewToolbarStates.containsKey(itemID)) {
      mapNewToolbarStates.put(itemID,has1Selection && hasDM ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  for (int i=0; i < itemsRequiring1DMwithHash.length; i++) {
    String itemID=itemsRequiring1DMwithHash[i];
    if (!mapNewToolbarStates.containsKey(itemID)) {
      mapNewToolbarStates.put(itemID,hasDM ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  mapNewToolbarStates.put(""String_Node_Str"",has1Selection && (!(currentContent[0] instanceof ISelectedVuzeFileContent)) && currentContent[0].getDownloadManager() == null && (currentContent[0].getHash() != null || currentContent[0].getDownloadInfo() != null) ? UIToolBarItem.STATE_ENABLED : 0);
  if (tv != null) {
    TableColumn tc=tv.getTableColumn(RankItem.COLUMN_ID);
    if (tc != null && !tc.isVisible()) {
      mapNewToolbarStates.put(""String_Node_Str"",0L);
      mapNewToolbarStates.put(""String_Node_Str"",0L);
    }
  }
  return mapNewToolbarStates;
}","public static Map<String,Long> calculateToolbarStates(ISelectedContent[] currentContent,String viewID_unused){
  Map<String,Long> mapNewToolbarStates=new HashMap<>();
  String[] itemsNeedingSelection={};
  String[] itemsNeedingRealDMSelection={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] itemsRequiring1DMwithHash={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] itemsRequiring1DMSelection={};
  int numSelection=currentContent.length;
  boolean hasSelection=numSelection > 0;
  boolean has1Selection=numSelection == 1;
  for (int i=0; i < itemsNeedingSelection.length; i++) {
    String itemID=itemsNeedingSelection[i];
    mapNewToolbarStates.put(itemID,hasSelection ? UIToolBarItem.STATE_ENABLED : 0);
  }
  TableView tv=SelectedContentManager.getCurrentlySelectedTableView();
  boolean hasRealDM=tv != null;
  if (!hasRealDM && numSelection > 0) {
    hasRealDM=true;
    for (int i=0; i < currentContent.length; i++) {
      ISelectedContent content=currentContent[i];
      DownloadManager dm=content.getDownloadManager();
      if (dm == null) {
        hasRealDM=false;
        break;
      }
    }
  }
  if (!hasRealDM) {
    MultipleDocumentInterfaceSWT mdi=UIFunctionsManagerSWT.getUIFunctionsSWT().getMDISWT();
    if (mdi != null) {
      MdiEntrySWT entry=mdi.getCurrentEntrySWT();
      if (entry != null) {
        if (entry.getDatasource() instanceof DownloadManager) {
          hasRealDM=true;
        }
 else         if ((entry instanceof UIPluginView) && (((UIPluginView)entry).getDataSource() instanceof DownloadManager)) {
          hasRealDM=true;
        }
      }
    }
  }
  boolean canStart=false;
  boolean canStop=false;
  boolean canRemoveFileInfo=false;
  boolean canRunFileInfo=false;
  boolean hasDM=false;
  boolean canRecheck=false;
  if (currentContent.length > 0 && hasRealDM) {
    boolean canMoveUp=false;
    boolean canMoveDown=false;
    boolean canDownload=false;
    GlobalManager gm=null;
    for (int i=0; i < currentContent.length; i++) {
      ISelectedContent content=currentContent[i];
      DownloadManager dm=content.getDownloadManager();
      if (dm == null) {
        if (!canDownload && content.getDownloadInfo() != null) {
          canDownload=true;
        }
        continue;
      }
      if (gm == null) {
        gm=dm.getGlobalManager();
      }
      int fileIndex=content.getFileIndex();
      if (fileIndex == -1) {
        if (!canMoveUp && gm.isMoveableUp(dm)) {
          canMoveUp=true;
        }
        if (!canMoveDown && gm.isMoveableDown(dm)) {
          canMoveDown=true;
        }
        hasDM=true;
        if (!canStart && ManagerUtils.isStartable(dm)) {
          canStart=true;
        }
        if (!canStop && ManagerUtils.isStopable(dm)) {
          canStop=true;
        }
      }
 else {
        DiskManagerFileInfoSet fileInfos=dm.getDiskManagerFileInfoSet();
        if (fileIndex < fileInfos.nbFiles()) {
          DiskManagerFileInfo fileInfo=fileInfos.getFiles()[fileIndex];
          if (!canStart && (fileInfo.isSkipped())) {
            canStart=true;
          }
          if (!canStop && !fileInfo.isSkipped()) {
            canStop=true;
          }
          if (!canRemoveFileInfo && !fileInfo.isSkipped()) {
            int storageType=fileInfo.getStorageType();
            if (storageType == DiskManagerFileInfo.ST_LINEAR || storageType == DiskManagerFileInfo.ST_COMPACT) {
              canRemoveFileInfo=true;
            }
          }
          if (!canRunFileInfo && fileInfo.getAccessMode() == DiskManagerFileInfo.READ && fileInfo.getDownloaded() == fileInfo.getLength() && fileInfo.getFile(true).exists()) {
            canRunFileInfo=true;
          }
        }
      }
      canRecheck=canRecheck || dm.canForceRecheck();
    }
    boolean canRemove=hasDM || canRemoveFileInfo;
    mapNewToolbarStates.put(""String_Node_Str"",canRemove ? UIToolBarItem.STATE_ENABLED : 0);
    mapNewToolbarStates.put(""String_Node_Str"",canDownload ? UIToolBarItem.STATE_ENABLED : 0);
    if (currentContent.length == 1) {
      mapNewToolbarStates.put(""String_Node_Str"",canMoveUp ? UIToolBarItem.STATE_ENABLED : 0);
      mapNewToolbarStates.put(""String_Node_Str"",canMoveDown ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  boolean canRun=has1Selection && ((hasDM && !canRunFileInfo) || (!hasDM && canRunFileInfo));
  if (canRun) {
    ISelectedContent content=currentContent[0];
    DownloadManager dm=content.getDownloadManager();
    if (dm == null) {
      canRun=false;
    }
 else {
      TOTorrent torrent=dm.getTorrent();
      if (torrent == null) {
        canRun=false;
      }
 else       if (!dm.getAssumedComplete() && torrent.isSimpleTorrent()) {
        canRun=false;
      }
    }
  }
  mapNewToolbarStates.put(""String_Node_Str"",canRun ? UIToolBarItem.STATE_ENABLED : 0);
  mapNewToolbarStates.put(""String_Node_Str"",canStart ? UIToolBarItem.STATE_ENABLED : 0);
  mapNewToolbarStates.put(""String_Node_Str"",canStop ? UIToolBarItem.STATE_ENABLED : 0);
  mapNewToolbarStates.put(""String_Node_Str"",canStart || canStop ? UIToolBarItem.STATE_ENABLED : 0);
  for (int i=0; i < itemsNeedingRealDMSelection.length; i++) {
    String itemID=itemsNeedingRealDMSelection[i];
    if (!mapNewToolbarStates.containsKey(itemID)) {
      mapNewToolbarStates.put(itemID,hasSelection && hasDM && hasRealDM ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  for (int i=0; i < itemsRequiring1DMSelection.length; i++) {
    String itemID=itemsRequiring1DMSelection[i];
    if (!mapNewToolbarStates.containsKey(itemID)) {
      mapNewToolbarStates.put(itemID,has1Selection && hasDM ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  for (int i=0; i < itemsRequiring1DMwithHash.length; i++) {
    String itemID=itemsRequiring1DMwithHash[i];
    if (!mapNewToolbarStates.containsKey(itemID)) {
      mapNewToolbarStates.put(itemID,hasDM ? UIToolBarItem.STATE_ENABLED : 0);
    }
  }
  mapNewToolbarStates.put(""String_Node_Str"",has1Selection && (!(currentContent[0] instanceof ISelectedVuzeFileContent)) && currentContent[0].getDownloadManager() == null && (currentContent[0].getHash() != null || currentContent[0].getDownloadInfo() != null) ? UIToolBarItem.STATE_ENABLED : 0);
  if (tv != null) {
    TableColumn tc=tv.getTableColumn(RankItem.COLUMN_ID);
    if (tc != null && !tc.isVisible()) {
      mapNewToolbarStates.put(""String_Node_Str"",0L);
      mapNewToolbarStates.put(""String_Node_Str"",0L);
    }
  }
  mapNewToolbarStates.put(TU_ITEM_RECHECK,canRecheck ? UIToolBarItem.STATE_ENABLED : 0);
  return mapNewToolbarStates;
}",0.985891734396565
170791,"public void updateUI(){
  if (skinButton != null) {
    skinButton.setImage(base.getImageID());
    String tt=base.getTooltipID();
    if (tt == null) {
      String temp=base.getTextID();
      if (temp != null) {
        String test=temp + ""String_Node_Str"";
        if (MessageText.keyExists(test)) {
          temp=test;
        }
      }
      tt=temp;
    }
    skinButton.setTooltipID(tt);
  }
  if (skinTitle != null) {
    skinTitle.setTextID(base.getTextID());
  }
  if (base.isAlwaysAvailable()) {
    setEnabled(true);
  }
 else {
    long state=base.getState();
    setEnabled((state & UIToolBarItem.STATE_ENABLED) > 0);
    isDown=(state & UIToolBarItem.STATE_DOWN) > 0;
    if (skinButton != null) {
      skinButton.getSkinObject().switchSuffix(isDown ? ""String_Node_Str"" : ""String_Node_Str"",4,false);
    }
  }
}","public void updateUI(){
  if (skinButton != null) {
    skinButton.setImage(base.getImageID());
    String tt=base.getToolTipID();
    if (tt == null) {
      String temp=base.getTextID();
      if (temp != null) {
        String test=temp + ""String_Node_Str"";
        if (MessageText.keyExists(test)) {
          temp=test;
        }
      }
      tt=temp;
    }
    skinButton.setTooltipID(tt);
  }
  if (skinTitle != null) {
    skinTitle.setTextID(base.getTextID());
  }
  if (base.isAlwaysAvailable()) {
    setEnabled(true);
  }
 else {
    long state=base.getState();
    setEnabled((state & UIToolBarItem.STATE_ENABLED) > 0);
    isDown=(state & UIToolBarItem.STATE_DOWN) > 0;
    if (skinButton != null) {
      skinButton.getSkinObject().switchSuffix(isDown ? ""String_Node_Str"" : ""String_Node_Str"",4,false);
    }
  }
}",0.9987937273823884
170792,"@Override public Composite configSectionCreate(final Composite parent){
  int userMode=COConfigurationManager.getIntParameter(""String_Node_Str"");
  boolean isAZ3=COConfigurationManager.getStringParameter(""String_Node_Str"").equals(""String_Node_Str"");
  Label label;
  GridLayout layout;
  GridData gridData;
  Composite cSection=new Composite(parent,SWT.NULL);
  Utils.setLayoutData(cSection,new GridData(GridData.FILL_BOTH));
  layout=new GridLayout();
  layout.numColumns=1;
  cSection.setLayout(layout);
  Group gVarious=new Group(cSection,SWT.NULL);
  layout=new GridLayout();
  layout.numColumns=1;
  gVarious.setLayout(layout);
  Utils.setLayoutData(gVarious,new GridData(GridData.FILL_HORIZONTAL));
  gVarious.setText(MessageText.getString(""String_Node_Str""));
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  if (!Constants.isUnix) {
    new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  }
  if (Constants.isWindowsXP) {
    final Button enableXPStyle=new Button(gVarious,SWT.CHECK);
    Messages.setLanguageText(enableXPStyle,""String_Node_Str"");
    boolean enabled=false;
    boolean valid=false;
    try {
      File f=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
      if (f.exists()) {
        enabled=true;
      }
      f=FileUtil.getApplicationFile(""String_Node_Str"");
      if (f.exists()) {
        valid=true;
      }
    }
 catch (    Exception e) {
      Debug.printStackTrace(e);
      valid=false;
    }
    enableXPStyle.setEnabled(valid);
    enableXPStyle.setSelection(enabled);
    enableXPStyle.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event arg0){
        if (enableXPStyle.getSelection()) {
          try {
            File fDest=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
            File fOrigin=new File(""String_Node_Str"");
            if (!fDest.exists() && fOrigin.exists()) {
              FileUtil.copyFile(fOrigin,fDest);
            }
          }
 catch (          Exception e) {
            Debug.printStackTrace(e);
          }
        }
 else {
          try {
            File fDest=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
            fDest.delete();
          }
 catch (          Exception e) {
            Debug.printStackTrace(e);
          }
        }
      }
    }
);
  }
  if (Constants.isOSX) {
    new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  }
  if (PlatformManagerFactory.getPlatformManager().hasCapability(PlatformManagerCapabilities.ShowFileInBrowser)) {
    BooleanParameter bp=new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
    Messages.setLanguageText(bp.getControl(),""String_Node_Str"",new String[]{MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")});
    if (Constants.isOSX) {
      new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (userMode > 0) {
    final BooleanParameter paramEnableForceDPI=new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
    paramEnableForceDPI.setLayoutData(new GridData());
    IntParameter forceDPI=new IntParameter(gVarious,""String_Node_Str"",0,Integer.MAX_VALUE);
    forceDPI.setLayoutData(new GridData());
    paramEnableForceDPI.setAdditionalActionPerformer(new ChangeSelectionActionPerformer(forceDPI.getControl()));
  }
{
    Group gToolBar=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(gToolBar,""String_Node_Str"");
    int gToolBarSpan=4 + (isAZ3 ? 1 : 2);
    layout=new GridLayout();
    layout.numColumns=gToolBarSpan;
    gToolBar.setLayout(layout);
    Utils.setLayoutData(gToolBar,new GridData(GridData.FILL_HORIZONTAL));
    BooleanParameter enabled=null;
    if (!isAZ3) {
      enabled=new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
      GridData gd=new GridData();
      gd.horizontalSpan=gToolBarSpan;
      enabled.setLayoutData(gd);
    }
    if (isAZ3) {
      new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    }
    new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    if (!isAZ3) {
      new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    }
    new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    if (!isAZ3) {
      new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    }
    BooleanParameter sss=new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    GridData gd=new GridData();
    gd.horizontalSpan=gToolBarSpan;
    sss.setLayoutData(gd);
  }
  if (isAZ3) {
    Group gSideBar=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(gSideBar,""String_Node_Str"");
    layout=new GridLayout();
    layout.numColumns=2;
    gSideBar.setLayout(layout);
    Utils.setLayoutData(gSideBar,new GridData(GridData.FILL_HORIZONTAL));
    new BooleanParameter(gSideBar,""String_Node_Str"",""String_Node_Str"");
    label=new Label(gSideBar,SWT.NULL);
    label=new Label(gSideBar,SWT.NULL);
    Messages.setLanguageText(label,""String_Node_Str"");
    new IntParameter(gSideBar,""String_Node_Str"",0,5);
    new BooleanParameter(gSideBar,""String_Node_Str"",""String_Node_Str"");
    label=new Label(gSideBar,SWT.NULL);
  }
  Group cStatusBar=new Group(cSection,SWT.NULL);
  Messages.setLanguageText(cStatusBar,""String_Node_Str"");
  layout=new GridLayout();
  layout.numColumns=1;
  cStatusBar.setLayout(layout);
  Utils.setLayoutData(cStatusBar,new GridData(GridData.FILL_HORIZONTAL));
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  if (userMode > 0) {
    Group cUnits=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(cUnits,""String_Node_Str"");
    layout=new GridLayout();
    layout.numColumns=1;
    cUnits.setLayout(layout);
    Utils.setLayoutData(cUnits,new GridData(GridData.FILL_HORIZONTAL));
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
  }
  if (userMode > 0) {
    Group formatters_group=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(formatters_group,""String_Node_Str"");
    layout=new GridLayout();
    formatters_group.setLayout(layout);
    Utils.setLayoutData(formatters_group,new GridData(GridData.FILL_HORIZONTAL));
    StringAreaParameter formatters=new StringAreaParameter(formatters_group,""String_Node_Str"");
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.heightHint=formatters.getPreferredHeight(3);
    formatters.setLayoutData(gridData);
    Composite format_info=new Composite(formatters_group,SWT.NULL);
    layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.numColumns=3;
    format_info.setLayout(layout);
    Utils.setLayoutData(format_info,new GridData(GridData.FILL_HORIZONTAL));
    new LinkLabel(format_info,""String_Node_Str"",MessageText.getString(""String_Node_Str""));
    label=new Label(format_info,SWT.NULL);
    Messages.setLanguageText(label,""String_Node_Str"");
    InfoParameter info_param=new InfoParameter(format_info,""String_Node_Str"");
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    info_param.setLayoutData(gridData);
  }
  if (userMode > 0) {
    Group gExternalBrowser=new Group(cSection,SWT.NULL);
    layout=new GridLayout();
    layout.numColumns=1;
    gExternalBrowser.setLayout(layout);
    Utils.setLayoutData(gExternalBrowser,new GridData(GridData.FILL_HORIZONTAL));
    gExternalBrowser.setText(MessageText.getString(""String_Node_Str""));
    label=new Label(gExternalBrowser,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    Utils.setLayoutData(label,Utils.getWrappableLabelGridData(1,0));
    label=new Label(gExternalBrowser,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    Utils.setLayoutData(label,Utils.getWrappableLabelGridData(1,0));
    final java.util.List<String[]> browser_choices=new ArrayList<>();
    browser_choices.add(new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str"")});
    browser_choices.add(new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str"")});
    java.util.List<PluginInterface> pis=CoreFactory.getSingleton().getPluginManager().getPluginsWithMethod(""String_Node_Str"",new Class[]{URL.class,boolean.class,Runnable.class});
    String pi_names=""String_Node_Str"";
    for (    PluginInterface pi : pis) {
      String pi_name=pi.getPluginName();
      pi_names+=(pi_names.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + pi_name;
      browser_choices.add(new String[]{""String_Node_Str"" + pi.getPluginID(),pi_name});
    }
    final Composite cEBArea=new Composite(gExternalBrowser,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cEBArea,gridData);
    layout=new GridLayout();
    layout.numColumns=2;
    layout.marginHeight=0;
    cEBArea.setLayout(layout);
    label=new Label(cEBArea,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    final Composite cEB=new Group(cEBArea,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cEB,gridData);
    layout=new GridLayout();
    layout.numColumns=browser_choices.size();
    layout.marginHeight=0;
    cEB.setLayout(layout);
    java.util.List<Button> buttons=new ArrayList<>();
    for (int i=0; i < browser_choices.size(); i++) {
      Button button=new Button(cEB,SWT.RADIO);
      button.setText(browser_choices.get(i)[1]);
      button.setData(""String_Node_Str"",String.valueOf(i));
      buttons.add(button);
    }
    String existing=COConfigurationManager.getStringParameter(""String_Node_Str"",browser_choices.get(0)[0]);
    int existing_index=-1;
    for (int i=0; i < browser_choices.size(); i++) {
      if (browser_choices.get(i)[0].equals(existing)) {
        existing_index=i;
        break;
      }
    }
    if (existing_index == -1) {
      existing_index=0;
      COConfigurationManager.setParameter(""String_Node_Str"",browser_choices.get(0)[0]);
    }
    buttons.get(existing_index).setSelection(true);
    Messages.setLanguageText(new Label(cEBArea,SWT.WRAP),""String_Node_Str"");
    Composite manualArea=new Composite(cEBArea,SWT.NULL);
    layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    manualArea.setLayout(layout);
    Utils.setLayoutData(manualArea,new GridData(GridData.FILL_HORIZONTAL));
    final Parameter manualProg=new FileParameter(manualArea,""String_Node_Str"",""String_Node_Str"",new String[]{});
    manualProg.setEnabled(existing_index == 1);
    Listener radioListener=new Listener(){
      @Override public void handleEvent(      Event event){
        Button button=(Button)event.widget;
        if (button.getSelection()) {
          Control[] children=cEB.getChildren();
          for (int j=0; j < children.length; j++) {
            Control child=children[j];
            if (child != button && child instanceof Button) {
              Button b=(Button)child;
              b.setSelection(false);
            }
          }
          int index=Integer.parseInt((String)button.getData(""String_Node_Str""));
          COConfigurationManager.setParameter(""String_Node_Str"",browser_choices.get(index)[0]);
          manualProg.setEnabled(index == 1);
        }
      }
    }
;
    for (    Button b : buttons) {
      b.addListener(SWT.Selection,radioListener);
    }
    if (pis.size() > 0) {
      Composite nonPubArea=new Composite(gExternalBrowser,SWT.NULL);
      layout=new GridLayout(2,false);
      layout.marginHeight=0;
      nonPubArea.setLayout(layout);
      Utils.setLayoutData(nonPubArea,new GridData(GridData.FILL_HORIZONTAL));
      String temp=MessageText.getString(""String_Node_Str"",new String[]{pi_names});
      BooleanParameter non_pub=new BooleanParameter(nonPubArea,""String_Node_Str"",true,""String_Node_Str"" + temp + ""String_Node_Str"");
    }
    Composite testArea=new Composite(gExternalBrowser,SWT.NULL);
    layout=new GridLayout(4,false);
    layout.marginHeight=0;
    testArea.setLayout(layout);
    Utils.setLayoutData(testArea,new GridData(GridData.FILL_HORIZONTAL));
    label=new Label(testArea,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    final Button test_button=new Button(testArea,SWT.PUSH);
    Messages.setLanguageText(test_button,""String_Node_Str"");
    final Text test_url=new Text(testArea,SWT.BORDER);
    Utils.setLayoutData(test_url,new GridData(GridData.FILL_HORIZONTAL));
    test_url.setText(""String_Node_Str"");
    test_button.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        test_button.setEnabled(false);
        final String url_str=test_url.getText().trim();
        new AEThread2(""String_Node_Str""){
          @Override public void run(){
            try {
              Utils.launch(url_str,true);
            }
  finally {
              Utils.execSWTThread(new Runnable(){
                @Override public void run(){
                  if (!test_button.isDisposed()) {
                    test_button.setEnabled(true);
                  }
                }
              }
);
            }
          }
        }
.start();
      }
    }
);
    label=new Label(testArea,SWT.NULL);
    Utils.setLayoutData(label,new GridData(GridData.FILL_HORIZONTAL));
  }
  if (userMode > 1) {
    Group gInternalBrowser=new Group(cSection,SWT.NULL);
    layout=new GridLayout();
    layout.numColumns=1;
    gInternalBrowser.setLayout(layout);
    Utils.setLayoutData(gInternalBrowser,new GridData(GridData.FILL_HORIZONTAL));
    gInternalBrowser.setText(MessageText.getString(""String_Node_Str""));
    label=new Label(gInternalBrowser,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    final BooleanParameter intbrow_disable=new BooleanParameter(gInternalBrowser,""String_Node_Str"",""String_Node_Str"");
    label=new Label(gInternalBrowser,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    gridData.horizontalIndent=15;
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    label=new Label(gInternalBrowser,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    java.util.List<PluginInterface> pis=AEProxyFactory.getPluginHTTPProxyProviders(true);
    final java.util.List<String[]> proxy_choices=new ArrayList<>();
    proxy_choices.add(new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str"")});
    for (    PluginInterface pi : pis) {
      proxy_choices.add(new String[]{""String_Node_Str"" + pi.getPluginID(),pi.getPluginName()});
    }
    final Composite cIPArea=new Composite(gInternalBrowser,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cIPArea,gridData);
    layout=new GridLayout();
    layout.numColumns=2;
    layout.marginHeight=0;
    cIPArea.setLayout(layout);
    label=new Label(cIPArea,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    final Composite cIP=new Group(cIPArea,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cIP,gridData);
    layout=new GridLayout();
    layout.numColumns=proxy_choices.size();
    layout.marginHeight=0;
    cIP.setLayout(layout);
    java.util.List<Button> buttons=new ArrayList<>();
    for (int i=0; i < proxy_choices.size(); i++) {
      Button button=new Button(cIP,SWT.RADIO);
      button.setText(proxy_choices.get(i)[1]);
      button.setData(""String_Node_Str"",String.valueOf(i));
      buttons.add(button);
    }
    String existing=COConfigurationManager.getStringParameter(""String_Node_Str"",proxy_choices.get(0)[0]);
    int existing_index=-1;
    for (int i=0; i < proxy_choices.size(); i++) {
      if (proxy_choices.get(i)[0].equals(existing)) {
        existing_index=i;
        break;
      }
    }
    if (existing_index == -1) {
      existing_index=0;
      COConfigurationManager.setParameter(""String_Node_Str"",proxy_choices.get(0)[0]);
    }
    buttons.get(existing_index).setSelection(true);
    Listener radioListener=new Listener(){
      @Override public void handleEvent(      Event event){
        Button button=(Button)event.widget;
        if (button.getSelection()) {
          Control[] children=cIP.getChildren();
          for (int j=0; j < children.length; j++) {
            Control child=children[j];
            if (child != button && child instanceof Button) {
              Button b=(Button)child;
              b.setSelection(false);
            }
          }
          int index=Integer.parseInt((String)button.getData(""String_Node_Str""));
          COConfigurationManager.setParameter(""String_Node_Str"",proxy_choices.get(index)[0]);
        }
      }
    }
;
    for (    Button b : buttons) {
      b.addListener(SWT.Selection,radioListener);
    }
  }
  Group gRefresh=new Group(cSection,SWT.NULL);
  gRefresh.setText(MessageText.getString(""String_Node_Str""));
  layout=new GridLayout();
  layout.numColumns=2;
  gRefresh.setLayout(layout);
  Utils.setLayoutData(gRefresh,new GridData(GridData.FILL_HORIZONTAL));
  label=new Label(gRefresh,SWT.NULL);
  Messages.setLanguageText(label,""String_Node_Str"");
  int[] values={10,25,50,100,250,500,1000,2000,5000,10000,15000};
  String[] labels={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  new IntListParameter(gRefresh,""String_Node_Str"",1000,labels,values);
  label=new Label(gRefresh,SWT.NULL);
  Messages.setLanguageText(label,""String_Node_Str"");
  gridData=new GridData();
  IntParameter inactiveUpdate=new IntParameter(gRefresh,""String_Node_Str"",1,Integer.MAX_VALUE);
  inactiveUpdate.setLayoutData(gridData);
  label=new Label(gRefresh,SWT.NULL);
  Messages.setLanguageText(label,""String_Node_Str"");
  gridData=new GridData();
  IntParameter graphicUpdate=new IntParameter(gRefresh,""String_Node_Str"",1,Integer.MAX_VALUE);
  graphicUpdate.setLayoutData(gridData);
  return cSection;
}","@Override public Composite configSectionCreate(final Composite parent){
  int userMode=COConfigurationManager.getIntParameter(""String_Node_Str"");
  boolean isAZ3=COConfigurationManager.getStringParameter(""String_Node_Str"").equals(""String_Node_Str"");
  Label label;
  GridLayout layout;
  GridData gridData;
  Composite cSection=new Composite(parent,SWT.NULL);
  Utils.setLayoutData(cSection,new GridData(GridData.FILL_BOTH));
  layout=new GridLayout();
  layout.numColumns=1;
  cSection.setLayout(layout);
  Group gVarious=new Group(cSection,SWT.NULL);
  layout=new GridLayout();
  layout.numColumns=1;
  gVarious.setLayout(layout);
  Utils.setLayoutData(gVarious,new GridData(GridData.FILL_HORIZONTAL));
  gVarious.setText(MessageText.getString(""String_Node_Str""));
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  if (!Constants.isUnix) {
    new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  }
  if (Constants.isWindowsXP) {
    final Button enableXPStyle=new Button(gVarious,SWT.CHECK);
    Messages.setLanguageText(enableXPStyle,""String_Node_Str"");
    boolean enabled=false;
    boolean valid=false;
    try {
      File f=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
      if (f.exists()) {
        enabled=true;
      }
      f=FileUtil.getApplicationFile(""String_Node_Str"");
      if (f.exists()) {
        valid=true;
      }
    }
 catch (    Exception e) {
      Debug.printStackTrace(e);
      valid=false;
    }
    enableXPStyle.setEnabled(valid);
    enableXPStyle.setSelection(enabled);
    enableXPStyle.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event arg0){
        if (enableXPStyle.getSelection()) {
          try {
            File fDest=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
            File fOrigin=new File(""String_Node_Str"");
            if (!fDest.exists() && fOrigin.exists()) {
              FileUtil.copyFile(fOrigin,fDest);
            }
          }
 catch (          Exception e) {
            Debug.printStackTrace(e);
          }
        }
 else {
          try {
            File fDest=new File(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
            fDest.delete();
          }
 catch (          Exception e) {
            Debug.printStackTrace(e);
          }
        }
      }
    }
);
  }
  if (Constants.isOSX) {
    new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
  }
  if (PlatformManagerFactory.getPlatformManager().hasCapability(PlatformManagerCapabilities.ShowFileInBrowser)) {
    BooleanParameter bp=new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
    Messages.setLanguageText(bp.getControl(),""String_Node_Str"",new String[]{MessageText.getString(""String_Node_Str""),MessageText.getString(""String_Node_Str"")});
    if (Constants.isOSX) {
      new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (userMode > 0) {
    final BooleanParameter paramEnableForceDPI=new BooleanParameter(gVarious,""String_Node_Str"",""String_Node_Str"");
    paramEnableForceDPI.setLayoutData(new GridData());
    IntParameter forceDPI=new IntParameter(gVarious,""String_Node_Str"",0,Integer.MAX_VALUE);
    forceDPI.setLayoutData(new GridData());
    paramEnableForceDPI.setAdditionalActionPerformer(new ChangeSelectionActionPerformer(forceDPI.getControl()));
  }
{
    Group gToolBar=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(gToolBar,""String_Node_Str"");
    int gToolBarSpan=5 + (isAZ3 ? 1 : 2);
    layout=new GridLayout();
    layout.numColumns=gToolBarSpan;
    gToolBar.setLayout(layout);
    Utils.setLayoutData(gToolBar,new GridData(GridData.FILL_HORIZONTAL));
    BooleanParameter enabled=null;
    if (!isAZ3) {
      enabled=new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
      GridData gd=new GridData();
      gd.horizontalSpan=gToolBarSpan;
      enabled.setLayoutData(gd);
    }
    if (isAZ3) {
      new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    }
    new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    if (!isAZ3) {
      new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    }
    new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    if (!isAZ3) {
      new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    }
    new BooleanParameter(gToolBar,""String_Node_Str"" + TorrentUtil.TU_ITEM_RECHECK,""String_Node_Str"");
    BooleanParameter sss=new BooleanParameter(gToolBar,""String_Node_Str"",""String_Node_Str"");
    GridData gd=new GridData();
    gd.horizontalSpan=gToolBarSpan;
    sss.setLayoutData(gd);
  }
  if (isAZ3) {
    Group gSideBar=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(gSideBar,""String_Node_Str"");
    layout=new GridLayout();
    layout.numColumns=2;
    gSideBar.setLayout(layout);
    Utils.setLayoutData(gSideBar,new GridData(GridData.FILL_HORIZONTAL));
    new BooleanParameter(gSideBar,""String_Node_Str"",""String_Node_Str"");
    label=new Label(gSideBar,SWT.NULL);
    label=new Label(gSideBar,SWT.NULL);
    Messages.setLanguageText(label,""String_Node_Str"");
    new IntParameter(gSideBar,""String_Node_Str"",0,5);
    new BooleanParameter(gSideBar,""String_Node_Str"",""String_Node_Str"");
    label=new Label(gSideBar,SWT.NULL);
  }
  Group cStatusBar=new Group(cSection,SWT.NULL);
  Messages.setLanguageText(cStatusBar,""String_Node_Str"");
  layout=new GridLayout();
  layout.numColumns=1;
  cStatusBar.setLayout(layout);
  Utils.setLayoutData(cStatusBar,new GridData(GridData.FILL_HORIZONTAL));
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  new BooleanParameter(cStatusBar,""String_Node_Str"",""String_Node_Str"");
  if (userMode > 0) {
    Group cUnits=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(cUnits,""String_Node_Str"");
    layout=new GridLayout();
    layout.numColumns=1;
    cUnits.setLayout(layout);
    Utils.setLayoutData(cUnits,new GridData(GridData.FILL_HORIZONTAL));
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
    new BooleanParameter(cUnits,""String_Node_Str"",""String_Node_Str"");
  }
  if (userMode > 0) {
    Group formatters_group=new Group(cSection,SWT.NULL);
    Messages.setLanguageText(formatters_group,""String_Node_Str"");
    layout=new GridLayout();
    formatters_group.setLayout(layout);
    Utils.setLayoutData(formatters_group,new GridData(GridData.FILL_HORIZONTAL));
    StringAreaParameter formatters=new StringAreaParameter(formatters_group,""String_Node_Str"");
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.heightHint=formatters.getPreferredHeight(3);
    formatters.setLayoutData(gridData);
    Composite format_info=new Composite(formatters_group,SWT.NULL);
    layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=0;
    layout.numColumns=3;
    format_info.setLayout(layout);
    Utils.setLayoutData(format_info,new GridData(GridData.FILL_HORIZONTAL));
    new LinkLabel(format_info,""String_Node_Str"",MessageText.getString(""String_Node_Str""));
    label=new Label(format_info,SWT.NULL);
    Messages.setLanguageText(label,""String_Node_Str"");
    InfoParameter info_param=new InfoParameter(format_info,""String_Node_Str"");
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    info_param.setLayoutData(gridData);
  }
  if (userMode > 0) {
    Group gExternalBrowser=new Group(cSection,SWT.NULL);
    layout=new GridLayout();
    layout.numColumns=1;
    gExternalBrowser.setLayout(layout);
    Utils.setLayoutData(gExternalBrowser,new GridData(GridData.FILL_HORIZONTAL));
    gExternalBrowser.setText(MessageText.getString(""String_Node_Str""));
    label=new Label(gExternalBrowser,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    Utils.setLayoutData(label,Utils.getWrappableLabelGridData(1,0));
    label=new Label(gExternalBrowser,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    Utils.setLayoutData(label,Utils.getWrappableLabelGridData(1,0));
    final java.util.List<String[]> browser_choices=new ArrayList<>();
    browser_choices.add(new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str"")});
    browser_choices.add(new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str"")});
    java.util.List<PluginInterface> pis=CoreFactory.getSingleton().getPluginManager().getPluginsWithMethod(""String_Node_Str"",new Class[]{URL.class,boolean.class,Runnable.class});
    String pi_names=""String_Node_Str"";
    for (    PluginInterface pi : pis) {
      String pi_name=pi.getPluginName();
      pi_names+=(pi_names.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + pi_name;
      browser_choices.add(new String[]{""String_Node_Str"" + pi.getPluginID(),pi_name});
    }
    final Composite cEBArea=new Composite(gExternalBrowser,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cEBArea,gridData);
    layout=new GridLayout();
    layout.numColumns=2;
    layout.marginHeight=0;
    cEBArea.setLayout(layout);
    label=new Label(cEBArea,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    final Composite cEB=new Group(cEBArea,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cEB,gridData);
    layout=new GridLayout();
    layout.numColumns=browser_choices.size();
    layout.marginHeight=0;
    cEB.setLayout(layout);
    java.util.List<Button> buttons=new ArrayList<>();
    for (int i=0; i < browser_choices.size(); i++) {
      Button button=new Button(cEB,SWT.RADIO);
      button.setText(browser_choices.get(i)[1]);
      button.setData(""String_Node_Str"",String.valueOf(i));
      buttons.add(button);
    }
    String existing=COConfigurationManager.getStringParameter(""String_Node_Str"",browser_choices.get(0)[0]);
    int existing_index=-1;
    for (int i=0; i < browser_choices.size(); i++) {
      if (browser_choices.get(i)[0].equals(existing)) {
        existing_index=i;
        break;
      }
    }
    if (existing_index == -1) {
      existing_index=0;
      COConfigurationManager.setParameter(""String_Node_Str"",browser_choices.get(0)[0]);
    }
    buttons.get(existing_index).setSelection(true);
    Messages.setLanguageText(new Label(cEBArea,SWT.WRAP),""String_Node_Str"");
    Composite manualArea=new Composite(cEBArea,SWT.NULL);
    layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    manualArea.setLayout(layout);
    Utils.setLayoutData(manualArea,new GridData(GridData.FILL_HORIZONTAL));
    final Parameter manualProg=new FileParameter(manualArea,""String_Node_Str"",""String_Node_Str"",new String[]{});
    manualProg.setEnabled(existing_index == 1);
    Listener radioListener=new Listener(){
      @Override public void handleEvent(      Event event){
        Button button=(Button)event.widget;
        if (button.getSelection()) {
          Control[] children=cEB.getChildren();
          for (int j=0; j < children.length; j++) {
            Control child=children[j];
            if (child != button && child instanceof Button) {
              Button b=(Button)child;
              b.setSelection(false);
            }
          }
          int index=Integer.parseInt((String)button.getData(""String_Node_Str""));
          COConfigurationManager.setParameter(""String_Node_Str"",browser_choices.get(index)[0]);
          manualProg.setEnabled(index == 1);
        }
      }
    }
;
    for (    Button b : buttons) {
      b.addListener(SWT.Selection,radioListener);
    }
    if (pis.size() > 0) {
      Composite nonPubArea=new Composite(gExternalBrowser,SWT.NULL);
      layout=new GridLayout(2,false);
      layout.marginHeight=0;
      nonPubArea.setLayout(layout);
      Utils.setLayoutData(nonPubArea,new GridData(GridData.FILL_HORIZONTAL));
      String temp=MessageText.getString(""String_Node_Str"",new String[]{pi_names});
      BooleanParameter non_pub=new BooleanParameter(nonPubArea,""String_Node_Str"",true,""String_Node_Str"" + temp + ""String_Node_Str"");
    }
    Composite testArea=new Composite(gExternalBrowser,SWT.NULL);
    layout=new GridLayout(4,false);
    layout.marginHeight=0;
    testArea.setLayout(layout);
    Utils.setLayoutData(testArea,new GridData(GridData.FILL_HORIZONTAL));
    label=new Label(testArea,SWT.WRAP);
    Messages.setLanguageText(label,""String_Node_Str"");
    final Button test_button=new Button(testArea,SWT.PUSH);
    Messages.setLanguageText(test_button,""String_Node_Str"");
    final Text test_url=new Text(testArea,SWT.BORDER);
    Utils.setLayoutData(test_url,new GridData(GridData.FILL_HORIZONTAL));
    test_url.setText(""String_Node_Str"");
    test_button.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        test_button.setEnabled(false);
        final String url_str=test_url.getText().trim();
        new AEThread2(""String_Node_Str""){
          @Override public void run(){
            try {
              Utils.launch(url_str,true);
            }
  finally {
              Utils.execSWTThread(new Runnable(){
                @Override public void run(){
                  if (!test_button.isDisposed()) {
                    test_button.setEnabled(true);
                  }
                }
              }
);
            }
          }
        }
.start();
      }
    }
);
    label=new Label(testArea,SWT.NULL);
    Utils.setLayoutData(label,new GridData(GridData.FILL_HORIZONTAL));
  }
  if (userMode > 1) {
    Group gInternalBrowser=new Group(cSection,SWT.NULL);
    layout=new GridLayout();
    layout.numColumns=1;
    gInternalBrowser.setLayout(layout);
    Utils.setLayoutData(gInternalBrowser,new GridData(GridData.FILL_HORIZONTAL));
    gInternalBrowser.setText(MessageText.getString(""String_Node_Str""));
    label=new Label(gInternalBrowser,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    final BooleanParameter intbrow_disable=new BooleanParameter(gInternalBrowser,""String_Node_Str"",""String_Node_Str"");
    label=new Label(gInternalBrowser,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    gridData.horizontalIndent=15;
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    label=new Label(gInternalBrowser,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    java.util.List<PluginInterface> pis=AEProxyFactory.getPluginHTTPProxyProviders(true);
    final java.util.List<String[]> proxy_choices=new ArrayList<>();
    proxy_choices.add(new String[]{""String_Node_Str"",MessageText.getString(""String_Node_Str"")});
    for (    PluginInterface pi : pis) {
      proxy_choices.add(new String[]{""String_Node_Str"" + pi.getPluginID(),pi.getPluginName()});
    }
    final Composite cIPArea=new Composite(gInternalBrowser,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cIPArea,gridData);
    layout=new GridLayout();
    layout.numColumns=2;
    layout.marginHeight=0;
    cIPArea.setLayout(layout);
    label=new Label(cIPArea,SWT.WRAP);
    gridData=Utils.getWrappableLabelGridData(1,GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(label,gridData);
    Messages.setLanguageText(label,""String_Node_Str"");
    final Composite cIP=new Group(cIPArea,SWT.WRAP);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    Utils.setLayoutData(cIP,gridData);
    layout=new GridLayout();
    layout.numColumns=proxy_choices.size();
    layout.marginHeight=0;
    cIP.setLayout(layout);
    java.util.List<Button> buttons=new ArrayList<>();
    for (int i=0; i < proxy_choices.size(); i++) {
      Button button=new Button(cIP,SWT.RADIO);
      button.setText(proxy_choices.get(i)[1]);
      button.setData(""String_Node_Str"",String.valueOf(i));
      buttons.add(button);
    }
    String existing=COConfigurationManager.getStringParameter(""String_Node_Str"",proxy_choices.get(0)[0]);
    int existing_index=-1;
    for (int i=0; i < proxy_choices.size(); i++) {
      if (proxy_choices.get(i)[0].equals(existing)) {
        existing_index=i;
        break;
      }
    }
    if (existing_index == -1) {
      existing_index=0;
      COConfigurationManager.setParameter(""String_Node_Str"",proxy_choices.get(0)[0]);
    }
    buttons.get(existing_index).setSelection(true);
    Listener radioListener=new Listener(){
      @Override public void handleEvent(      Event event){
        Button button=(Button)event.widget;
        if (button.getSelection()) {
          Control[] children=cIP.getChildren();
          for (int j=0; j < children.length; j++) {
            Control child=children[j];
            if (child != button && child instanceof Button) {
              Button b=(Button)child;
              b.setSelection(false);
            }
          }
          int index=Integer.parseInt((String)button.getData(""String_Node_Str""));
          COConfigurationManager.setParameter(""String_Node_Str"",proxy_choices.get(index)[0]);
        }
      }
    }
;
    for (    Button b : buttons) {
      b.addListener(SWT.Selection,radioListener);
    }
  }
  Group gRefresh=new Group(cSection,SWT.NULL);
  gRefresh.setText(MessageText.getString(""String_Node_Str""));
  layout=new GridLayout();
  layout.numColumns=2;
  gRefresh.setLayout(layout);
  Utils.setLayoutData(gRefresh,new GridData(GridData.FILL_HORIZONTAL));
  label=new Label(gRefresh,SWT.NULL);
  Messages.setLanguageText(label,""String_Node_Str"");
  int[] values={10,25,50,100,250,500,1000,2000,5000,10000,15000};
  String[] labels={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  new IntListParameter(gRefresh,""String_Node_Str"",1000,labels,values);
  label=new Label(gRefresh,SWT.NULL);
  Messages.setLanguageText(label,""String_Node_Str"");
  gridData=new GridData();
  IntParameter inactiveUpdate=new IntParameter(gRefresh,""String_Node_Str"",1,Integer.MAX_VALUE);
  inactiveUpdate.setLayoutData(gridData);
  label=new Label(gRefresh,SWT.NULL);
  Messages.setLanguageText(label,""String_Node_Str"");
  gridData=new GridData();
  IntParameter graphicUpdate=new IntParameter(gRefresh,""String_Node_Str"",1,Integer.MAX_VALUE);
  graphicUpdate.setLayoutData(gridData);
  return cSection;
}",0.997320140177283
170793,"@Override public void selected(MenuItem _menu,Object _target){
  TableRow[] rows=(TableRow[])_target;
  String cb_all_data=""String_Node_Str"";
  for (  TableRow row : rows) {
    Torrent torrent;
    String name;
    Object ds=row.getDataSource();
    Download download=null;
    ShareResource share=null;
    if (ds instanceof ShareResourceFile) {
      try {
        torrent=((ShareResourceFile)ds).getItem().getTorrent();
      }
 catch (      ShareException e) {
        continue;
      }
      name=((ShareResourceFile)ds).getName();
      share=(ShareResource)ds;
    }
 else     if (ds instanceof ShareResourceDir) {
      try {
        torrent=((ShareResourceDir)ds).getItem().getTorrent();
      }
 catch (      ShareException e) {
        continue;
      }
      name=((ShareResourceDir)ds).getName();
      share=(ShareResource)ds;
    }
 else     if (ds instanceof Download) {
      download=(Download)ds;
      torrent=download.getTorrent();
      name=download.getName();
    }
 else {
      continue;
    }
    Set<String> networks=new HashSet<>();
    if (share != null) {
      Map<String,String> properties=share.getProperties();
      String nets=properties.get(ShareManager.PR_NETWORKS);
      if (nets != null) {
        String[] bits=nets.split(""String_Node_Str"");
        for (        String bit : bits) {
          bit=AENetworkClassifier.internalise(bit.trim());
          if (bit != null) {
            networks.add(bit);
          }
        }
      }
    }
    if (download != null) {
      TorrentAttribute ta=plugin_interface.getTorrentManager().getAttribute(TorrentAttribute.TA_NETWORKS);
      String[] nets=download.getListAttribute(ta);
      networks.addAll(Arrays.asList(nets));
    }
    String cb_data=download == null ? UrlUtils.getMagnetURI(name,torrent) : UrlUtils.getMagnetURI(download);
    if (download != null) {
      List<Tag> tags=TagManagerFactory.getTagManager().getTagsForTaggable(TagType.TT_DOWNLOAD_MANUAL,PluginCoreUtils.unwrap(download));
      for (      Tag tag : tags) {
        if (tag.isPublic()) {
          cb_data+=""String_Node_Str"" + UrlUtils.encode(tag.getTagName(true));
        }
      }
    }
    String sources=sources_param.getValue();
    boolean add_sources=sources.equals(""String_Node_Str"") || (sources.equals(""String_Node_Str"") && share != null);
    if (add_sources) {
      if (networks.isEmpty()) {
        for (        String net : AENetworkClassifier.AT_NETWORKS) {
          if (isNetworkEnabled(net)) {
            networks.add(net);
          }
        }
      }
      if (networks.contains(AENetworkClassifier.AT_PUBLIC) && !cb_data.contains(""String_Node_Str"")) {
        InetAddress ip=NetworkAdmin.getSingleton().getDefaultPublicAddress();
        InetAddress ip_v6=NetworkAdmin.getSingleton().getDefaultPublicAddressV6();
        int port=TCPNetworkManager.getSingleton().getTCPListeningPortNumber();
        if (ip != null && port > 0) {
          cb_data+=""String_Node_Str"" + UrlUtils.encode(ip.getHostAddress() + ""String_Node_Str"" + port);
        }
        if (ip_v6 != null && port > 0) {
          cb_data+=""String_Node_Str"" + UrlUtils.encode(ip_v6.getHostAddress() + ""String_Node_Str"" + port);
        }
      }
    }
    cb_all_data+=(cb_all_data.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + cb_data;
  }
  try {
    plugin_interface.getUIManager().copyToClipBoard(cb_all_data);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}","@Override public void selected(MenuItem _menu,Object _target){
  TableRow[] rows=(TableRow[])_target;
  String cb_all_data=""String_Node_Str"";
  for (  TableRow row : rows) {
    Torrent torrent;
    String name;
    Object ds=row.getDataSource();
    Download download=null;
    ShareResource share=null;
    if (ds instanceof ShareResourceFile) {
      try {
        torrent=((ShareResourceFile)ds).getItem().getTorrent();
      }
 catch (      ShareException e) {
        continue;
      }
      name=((ShareResourceFile)ds).getName();
      share=(ShareResource)ds;
    }
 else     if (ds instanceof ShareResourceDir) {
      try {
        torrent=((ShareResourceDir)ds).getItem().getTorrent();
      }
 catch (      ShareException e) {
        continue;
      }
      name=((ShareResourceDir)ds).getName();
      share=(ShareResource)ds;
    }
 else     if (ds instanceof Download) {
      download=(Download)ds;
      torrent=download.getTorrent();
      name=download.getName();
    }
 else {
      continue;
    }
    boolean is_share=false;
    Set<String> networks=new HashSet<>();
    if (share != null) {
      is_share=true;
      Map<String,String> properties=share.getProperties();
      if (properties != null) {
        String nets=properties.get(ShareManager.PR_NETWORKS);
        if (nets != null) {
          String[] bits=nets.split(""String_Node_Str"");
          for (          String bit : bits) {
            bit=AENetworkClassifier.internalise(bit.trim());
            if (bit != null) {
              networks.add(bit);
            }
          }
        }
      }
    }
    if (download != null) {
      TorrentAttribute ta=plugin_interface.getTorrentManager().getAttribute(TorrentAttribute.TA_NETWORKS);
      String[] nets=download.getListAttribute(ta);
      networks.addAll(Arrays.asList(nets));
      try {
        byte[] hash=download.getTorrentHash();
        if (plugin_interface.getShareManager().lookupShare(hash) != null) {
          is_share=true;
        }
      }
 catch (      Throwable e) {
      }
    }
    String cb_data=download == null ? UrlUtils.getMagnetURI(name,torrent) : UrlUtils.getMagnetURI(download);
    if (download != null) {
      List<Tag> tags=TagManagerFactory.getTagManager().getTagsForTaggable(TagType.TT_DOWNLOAD_MANUAL,PluginCoreUtils.unwrap(download));
      for (      Tag tag : tags) {
        if (tag.isPublic()) {
          cb_data+=""String_Node_Str"" + UrlUtils.encode(tag.getTagName(true));
        }
      }
    }
    String sources=sources_param.getValue();
    boolean add_sources=sources.equals(""String_Node_Str"") || (sources.equals(""String_Node_Str"") && is_share);
    if (add_sources) {
      if (networks.isEmpty()) {
        for (        String net : AENetworkClassifier.AT_NETWORKS) {
          if (isNetworkEnabled(net)) {
            networks.add(net);
          }
        }
      }
      if (networks.contains(AENetworkClassifier.AT_PUBLIC) && !cb_data.contains(""String_Node_Str"")) {
        InetAddress ip=NetworkAdmin.getSingleton().getDefaultPublicAddress();
        InetAddress ip_v6=NetworkAdmin.getSingleton().getDefaultPublicAddressV6();
        int port=TCPNetworkManager.getSingleton().getTCPListeningPortNumber();
        if (ip != null && port > 0) {
          cb_data+=""String_Node_Str"" + UrlUtils.encode(ip.getHostAddress() + ""String_Node_Str"" + port);
        }
        if (ip_v6 != null && port > 0) {
          cb_data+=""String_Node_Str"" + UrlUtils.encode(ip_v6.getHostAddress() + ""String_Node_Str"" + port);
        }
      }
    }
    cb_all_data+=(cb_all_data.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + cb_data;
  }
  try {
    plugin_interface.getUIManager().copyToClipBoard(cb_all_data);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.9532269257460098
170794,"@Override public void initialize(PluginInterface _plugin_interface){
  plugin_interface=_plugin_interface;
  MagnetURIHandler uri_handler=MagnetURIHandler.getSingleton();
  final LocaleUtilities lu=plugin_interface.getUtilities().getLocaleUtilities();
  lu.addListener(new LocaleListener(){
    @Override public void localeChanged(    Locale l){
      updateLocale(lu);
    }
  }
);
  updateLocale(lu);
  BasicPluginConfigModel config=plugin_interface.getUIManager().createBasicPluginConfigModel(ConfigSection.SECTION_PLUGINS,PLUGIN_CONFIGSECTION_ID);
  config.addInfoParameter2(""String_Node_Str"",String.valueOf(uri_handler.getPort()));
  secondary_lookup=config.addBooleanParameter2(""String_Node_Str"",""String_Node_Str"",true);
  md_lookup=config.addBooleanParameter2(""String_Node_Str"",""String_Node_Str"",true);
  md_lookup_delay=config.addIntParameter2(""String_Node_Str"",""String_Node_Str"",MD_LOOKUP_DELAY_SECS_DEFAULT);
  md_lookup.addEnabledOnSelection(md_lookup_delay);
  timeout_param=config.addIntParameter2(""String_Node_Str"",""String_Node_Str"",PLUGIN_DOWNLOAD_TIMEOUT_SECS_DEFAULT);
  sources_param=config.addStringListParameter2(""String_Node_Str"",""String_Node_Str"",SOURCE_VALUES,SOURCE_STRINGS,SOURCE_VALUES[1]);
  magnet_recovery=config.addBooleanParameter2(""String_Node_Str"",""String_Node_Str"",true);
  Parameter[] nps=new Parameter[AENetworkClassifier.AT_NETWORKS.length];
  for (int i=0; i < nps.length; i++) {
    String nn=AENetworkClassifier.AT_NETWORKS[i];
    String config_name=""String_Node_Str"" + nn;
    String msg_text=""String_Node_Str"" + nn;
    final BooleanParameter param=config.addBooleanParameter2(config_name,msg_text,COConfigurationManager.getBooleanParameter(config_name));
    COConfigurationManager.addParameterListener(config_name,new com.biglybt.core.config.ParameterListener(){
      @Override public void parameterChanged(      String name){
        param.setDefaultValue(COConfigurationManager.getBooleanParameter(name));
      }
    }
);
    nps[i]=param;
    net_params.put(nn,param);
  }
  config.createGroup(""String_Node_Str"",nps);
  MenuItemListener listener=new MenuItemListener(){
    @Override public void selected(    MenuItem _menu,    Object _target){
      TableRow[] rows=(TableRow[])_target;
      String cb_all_data=""String_Node_Str"";
      for (      TableRow row : rows) {
        Torrent torrent;
        String name;
        Object ds=row.getDataSource();
        Download download=null;
        ShareResource share=null;
        if (ds instanceof ShareResourceFile) {
          try {
            torrent=((ShareResourceFile)ds).getItem().getTorrent();
          }
 catch (          ShareException e) {
            continue;
          }
          name=((ShareResourceFile)ds).getName();
          share=(ShareResource)ds;
        }
 else         if (ds instanceof ShareResourceDir) {
          try {
            torrent=((ShareResourceDir)ds).getItem().getTorrent();
          }
 catch (          ShareException e) {
            continue;
          }
          name=((ShareResourceDir)ds).getName();
          share=(ShareResource)ds;
        }
 else         if (ds instanceof Download) {
          download=(Download)ds;
          torrent=download.getTorrent();
          name=download.getName();
        }
 else {
          continue;
        }
        Set<String> networks=new HashSet<>();
        if (share != null) {
          Map<String,String> properties=share.getProperties();
          String nets=properties.get(ShareManager.PR_NETWORKS);
          if (nets != null) {
            String[] bits=nets.split(""String_Node_Str"");
            for (            String bit : bits) {
              bit=AENetworkClassifier.internalise(bit.trim());
              if (bit != null) {
                networks.add(bit);
              }
            }
          }
        }
        if (download != null) {
          TorrentAttribute ta=plugin_interface.getTorrentManager().getAttribute(TorrentAttribute.TA_NETWORKS);
          String[] nets=download.getListAttribute(ta);
          networks.addAll(Arrays.asList(nets));
        }
        String cb_data=download == null ? UrlUtils.getMagnetURI(name,torrent) : UrlUtils.getMagnetURI(download);
        if (download != null) {
          List<Tag> tags=TagManagerFactory.getTagManager().getTagsForTaggable(TagType.TT_DOWNLOAD_MANUAL,PluginCoreUtils.unwrap(download));
          for (          Tag tag : tags) {
            if (tag.isPublic()) {
              cb_data+=""String_Node_Str"" + UrlUtils.encode(tag.getTagName(true));
            }
          }
        }
        String sources=sources_param.getValue();
        boolean add_sources=sources.equals(""String_Node_Str"") || (sources.equals(""String_Node_Str"") && share != null);
        if (add_sources) {
          if (networks.isEmpty()) {
            for (            String net : AENetworkClassifier.AT_NETWORKS) {
              if (isNetworkEnabled(net)) {
                networks.add(net);
              }
            }
          }
          if (networks.contains(AENetworkClassifier.AT_PUBLIC) && !cb_data.contains(""String_Node_Str"")) {
            InetAddress ip=NetworkAdmin.getSingleton().getDefaultPublicAddress();
            InetAddress ip_v6=NetworkAdmin.getSingleton().getDefaultPublicAddressV6();
            int port=TCPNetworkManager.getSingleton().getTCPListeningPortNumber();
            if (ip != null && port > 0) {
              cb_data+=""String_Node_Str"" + UrlUtils.encode(ip.getHostAddress() + ""String_Node_Str"" + port);
            }
            if (ip_v6 != null && port > 0) {
              cb_data+=""String_Node_Str"" + UrlUtils.encode(ip_v6.getHostAddress() + ""String_Node_Str"" + port);
            }
          }
        }
        cb_all_data+=(cb_all_data.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + cb_data;
      }
      try {
        plugin_interface.getUIManager().copyToClipBoard(cb_all_data);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
;
  final TableContextMenuItem menu1=plugin_interface.getUIManager().getTableManager().addContextMenuItem(TableManager.TABLE_MYTORRENTS_INCOMPLETE,""String_Node_Str"");
  final TableContextMenuItem menu2=plugin_interface.getUIManager().getTableManager().addContextMenuItem(TableManager.TABLE_MYTORRENTS_COMPLETE,""String_Node_Str"");
  final TableContextMenuItem menu3=plugin_interface.getUIManager().getTableManager().addContextMenuItem(TableManager.TABLE_MYSHARES,""String_Node_Str"");
  menu1.addMultiListener(listener);
  menu1.setHeaderCategory(MenuItem.HEADER_SOCIAL);
  menu2.addMultiListener(listener);
  menu2.setHeaderCategory(MenuItem.HEADER_SOCIAL);
  menu3.addMultiListener(listener);
  menu3.setHeaderCategory(MenuItem.HEADER_SOCIAL);
  uri_handler.addListener(new MagnetURIHandlerListener(){
    @Override public byte[] badge(){
      InputStream is=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
      if (is == null) {
        return (null);
      }
      try {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        try {
          byte[] buffer=new byte[8192];
          while (true) {
            int len=is.read(buffer);
            if (len <= 0) {
              break;
            }
            baos.write(buffer,0,len);
          }
        }
  finally {
          is.close();
        }
        return (baos.toByteArray());
      }
 catch (      Throwable e) {
        Debug.printStackTrace(e);
        return (null);
      }
    }
    @Override public byte[] download(    MagnetURIHandlerProgressListener muh_listener,    byte[] hash,    String args,    InetSocketAddress[] sources,    long timeout) throws MagnetURIHandlerException {
      try {
        Download dl=plugin_interface.getDownloadManager().getDownload(hash);
        if (dl != null) {
          Torrent torrent=dl.getTorrent();
          if (torrent != null) {
            byte[] torrent_data=torrent.writeToBEncodedData();
            torrent_data=addTrackersAndWebSeedsEtc(torrent_data,args,new HashSet<String>());
            return (torrent_data);
          }
        }
      }
 catch (      Throwable e) {
        Debug.printStackTrace(e);
      }
      return (recoverableDownload(muh_listener,hash,args,sources,timeout,false));
    }
    @Override public boolean download(    URL url) throws MagnetURIHandlerException {
      try {
        plugin_interface.getDownloadManager().addDownload(url,false);
        return (true);
      }
 catch (      DownloadException e) {
        throw (new MagnetURIHandlerException(""String_Node_Str"",e));
      }
    }
    @Override public boolean set(    String name,    Map values){
      List l=listeners.getList();
      for (int i=0; i < l.size(); i++) {
        if (((MagnetPluginListener)l.get(i)).set(name,values)) {
          return (true);
        }
      }
      return (false);
    }
    @Override public int get(    String name,    Map values){
      List l=listeners.getList();
      for (int i=0; i < l.size(); i++) {
        int res=((MagnetPluginListener)l.get(i)).get(name,values);
        if (res != Integer.MIN_VALUE) {
          return (res);
        }
      }
      return (Integer.MIN_VALUE);
    }
  }
);
  plugin_interface.getUIManager().addUIListener(new UIManagerListener(){
    @Override public void UIAttached(    UIInstance instance){
      if (instance.getUIType().equals(UIInstance.UIT_SWT)) {
        try {
          Class.forName(""String_Node_Str"").getConstructor(new Class[]{UIInstance.class,TableContextMenuItem[].class}).newInstance(new Object[]{instance,new TableContextMenuItem[]{menu1,menu2,menu3}});
        }
 catch (        Throwable e) {
          e.printStackTrace();
        }
      }
    }
    @Override public void UIDetached(    UIInstance instance){
    }
  }
);
  final List<Download> to_delete=new ArrayList<>();
  Download[] downloads=plugin_interface.getDownloadManager().getDownloads();
  for (  Download download : downloads) {
    if (download.getFlag(Download.FLAG_METADATA_DOWNLOAD)) {
      to_delete.add(download);
    }
  }
  final AESemaphore delete_done=new AESemaphore(""String_Node_Str"");
  if (to_delete.size() > 0) {
    AEThread2 t=new AEThread2(""String_Node_Str"",true){
      @Override public void run(){
        try {
          for (          Download download : to_delete) {
            try {
              download.stop();
            }
 catch (            Throwable e) {
            }
            try {
              download.remove(true,true);
            }
 catch (            Throwable e) {
              Debug.out(e);
            }
          }
        }
  finally {
          delete_done.release();
        }
      }
    }
;
    t.start();
  }
 else {
    delete_done.release();
  }
  plugin_interface.addListener(new PluginListener(){
    @Override public void initializationComplete(){
      AEThread2 t=new AEThread2(""String_Node_Str"",true){
        @Override public void run(){
          delete_done.reserve();
          recoverDownloads();
          plugin_interface.getDistributedDatabase();
        }
      }
;
      t.start();
    }
    @Override public void closedownInitiated(){
    }
    @Override public void closedownComplete(){
    }
  }
);
}","@Override public void initialize(PluginInterface _plugin_interface){
  plugin_interface=_plugin_interface;
  MagnetURIHandler uri_handler=MagnetURIHandler.getSingleton();
  final LocaleUtilities lu=plugin_interface.getUtilities().getLocaleUtilities();
  lu.addListener(new LocaleListener(){
    @Override public void localeChanged(    Locale l){
      updateLocale(lu);
    }
  }
);
  updateLocale(lu);
  BasicPluginConfigModel config=plugin_interface.getUIManager().createBasicPluginConfigModel(ConfigSection.SECTION_PLUGINS,PLUGIN_CONFIGSECTION_ID);
  config.addInfoParameter2(""String_Node_Str"",String.valueOf(uri_handler.getPort()));
  secondary_lookup=config.addBooleanParameter2(""String_Node_Str"",""String_Node_Str"",true);
  md_lookup=config.addBooleanParameter2(""String_Node_Str"",""String_Node_Str"",true);
  md_lookup_delay=config.addIntParameter2(""String_Node_Str"",""String_Node_Str"",MD_LOOKUP_DELAY_SECS_DEFAULT);
  md_lookup.addEnabledOnSelection(md_lookup_delay);
  timeout_param=config.addIntParameter2(""String_Node_Str"",""String_Node_Str"",PLUGIN_DOWNLOAD_TIMEOUT_SECS_DEFAULT);
  sources_param=config.addStringListParameter2(""String_Node_Str"",""String_Node_Str"",SOURCE_VALUES,SOURCE_STRINGS,SOURCE_VALUES[1]);
  magnet_recovery=config.addBooleanParameter2(""String_Node_Str"",""String_Node_Str"",true);
  Parameter[] nps=new Parameter[AENetworkClassifier.AT_NETWORKS.length];
  for (int i=0; i < nps.length; i++) {
    String nn=AENetworkClassifier.AT_NETWORKS[i];
    String config_name=""String_Node_Str"" + nn;
    String msg_text=""String_Node_Str"" + nn;
    final BooleanParameter param=config.addBooleanParameter2(config_name,msg_text,COConfigurationManager.getBooleanParameter(config_name));
    COConfigurationManager.addParameterListener(config_name,new com.biglybt.core.config.ParameterListener(){
      @Override public void parameterChanged(      String name){
        param.setDefaultValue(COConfigurationManager.getBooleanParameter(name));
      }
    }
);
    nps[i]=param;
    net_params.put(nn,param);
  }
  config.createGroup(""String_Node_Str"",nps);
  MenuItemListener listener=new MenuItemListener(){
    @Override public void selected(    MenuItem _menu,    Object _target){
      TableRow[] rows=(TableRow[])_target;
      String cb_all_data=""String_Node_Str"";
      for (      TableRow row : rows) {
        Torrent torrent;
        String name;
        Object ds=row.getDataSource();
        Download download=null;
        ShareResource share=null;
        if (ds instanceof ShareResourceFile) {
          try {
            torrent=((ShareResourceFile)ds).getItem().getTorrent();
          }
 catch (          ShareException e) {
            continue;
          }
          name=((ShareResourceFile)ds).getName();
          share=(ShareResource)ds;
        }
 else         if (ds instanceof ShareResourceDir) {
          try {
            torrent=((ShareResourceDir)ds).getItem().getTorrent();
          }
 catch (          ShareException e) {
            continue;
          }
          name=((ShareResourceDir)ds).getName();
          share=(ShareResource)ds;
        }
 else         if (ds instanceof Download) {
          download=(Download)ds;
          torrent=download.getTorrent();
          name=download.getName();
        }
 else {
          continue;
        }
        boolean is_share=false;
        Set<String> networks=new HashSet<>();
        if (share != null) {
          is_share=true;
          Map<String,String> properties=share.getProperties();
          if (properties != null) {
            String nets=properties.get(ShareManager.PR_NETWORKS);
            if (nets != null) {
              String[] bits=nets.split(""String_Node_Str"");
              for (              String bit : bits) {
                bit=AENetworkClassifier.internalise(bit.trim());
                if (bit != null) {
                  networks.add(bit);
                }
              }
            }
          }
        }
        if (download != null) {
          TorrentAttribute ta=plugin_interface.getTorrentManager().getAttribute(TorrentAttribute.TA_NETWORKS);
          String[] nets=download.getListAttribute(ta);
          networks.addAll(Arrays.asList(nets));
          try {
            byte[] hash=download.getTorrentHash();
            if (plugin_interface.getShareManager().lookupShare(hash) != null) {
              is_share=true;
            }
          }
 catch (          Throwable e) {
          }
        }
        String cb_data=download == null ? UrlUtils.getMagnetURI(name,torrent) : UrlUtils.getMagnetURI(download);
        if (download != null) {
          List<Tag> tags=TagManagerFactory.getTagManager().getTagsForTaggable(TagType.TT_DOWNLOAD_MANUAL,PluginCoreUtils.unwrap(download));
          for (          Tag tag : tags) {
            if (tag.isPublic()) {
              cb_data+=""String_Node_Str"" + UrlUtils.encode(tag.getTagName(true));
            }
          }
        }
        String sources=sources_param.getValue();
        boolean add_sources=sources.equals(""String_Node_Str"") || (sources.equals(""String_Node_Str"") && is_share);
        if (add_sources) {
          if (networks.isEmpty()) {
            for (            String net : AENetworkClassifier.AT_NETWORKS) {
              if (isNetworkEnabled(net)) {
                networks.add(net);
              }
            }
          }
          if (networks.contains(AENetworkClassifier.AT_PUBLIC) && !cb_data.contains(""String_Node_Str"")) {
            InetAddress ip=NetworkAdmin.getSingleton().getDefaultPublicAddress();
            InetAddress ip_v6=NetworkAdmin.getSingleton().getDefaultPublicAddressV6();
            int port=TCPNetworkManager.getSingleton().getTCPListeningPortNumber();
            if (ip != null && port > 0) {
              cb_data+=""String_Node_Str"" + UrlUtils.encode(ip.getHostAddress() + ""String_Node_Str"" + port);
            }
            if (ip_v6 != null && port > 0) {
              cb_data+=""String_Node_Str"" + UrlUtils.encode(ip_v6.getHostAddress() + ""String_Node_Str"" + port);
            }
          }
        }
        cb_all_data+=(cb_all_data.length() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + cb_data;
      }
      try {
        plugin_interface.getUIManager().copyToClipBoard(cb_all_data);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
;
  final TableContextMenuItem menu1=plugin_interface.getUIManager().getTableManager().addContextMenuItem(TableManager.TABLE_MYTORRENTS_INCOMPLETE,""String_Node_Str"");
  final TableContextMenuItem menu2=plugin_interface.getUIManager().getTableManager().addContextMenuItem(TableManager.TABLE_MYTORRENTS_COMPLETE,""String_Node_Str"");
  final TableContextMenuItem menu3=plugin_interface.getUIManager().getTableManager().addContextMenuItem(TableManager.TABLE_MYSHARES,""String_Node_Str"");
  menu1.addMultiListener(listener);
  menu1.setHeaderCategory(MenuItem.HEADER_SOCIAL);
  menu2.addMultiListener(listener);
  menu2.setHeaderCategory(MenuItem.HEADER_SOCIAL);
  menu3.addMultiListener(listener);
  menu3.setHeaderCategory(MenuItem.HEADER_SOCIAL);
  uri_handler.addListener(new MagnetURIHandlerListener(){
    @Override public byte[] badge(){
      InputStream is=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
      if (is == null) {
        return (null);
      }
      try {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        try {
          byte[] buffer=new byte[8192];
          while (true) {
            int len=is.read(buffer);
            if (len <= 0) {
              break;
            }
            baos.write(buffer,0,len);
          }
        }
  finally {
          is.close();
        }
        return (baos.toByteArray());
      }
 catch (      Throwable e) {
        Debug.printStackTrace(e);
        return (null);
      }
    }
    @Override public byte[] download(    MagnetURIHandlerProgressListener muh_listener,    byte[] hash,    String args,    InetSocketAddress[] sources,    long timeout) throws MagnetURIHandlerException {
      try {
        Download dl=plugin_interface.getDownloadManager().getDownload(hash);
        if (dl != null) {
          Torrent torrent=dl.getTorrent();
          if (torrent != null) {
            byte[] torrent_data=torrent.writeToBEncodedData();
            torrent_data=addTrackersAndWebSeedsEtc(torrent_data,args,new HashSet<String>());
            return (torrent_data);
          }
        }
      }
 catch (      Throwable e) {
        Debug.printStackTrace(e);
      }
      return (recoverableDownload(muh_listener,hash,args,sources,timeout,false));
    }
    @Override public boolean download(    URL url) throws MagnetURIHandlerException {
      try {
        plugin_interface.getDownloadManager().addDownload(url,false);
        return (true);
      }
 catch (      DownloadException e) {
        throw (new MagnetURIHandlerException(""String_Node_Str"",e));
      }
    }
    @Override public boolean set(    String name,    Map values){
      List l=listeners.getList();
      for (int i=0; i < l.size(); i++) {
        if (((MagnetPluginListener)l.get(i)).set(name,values)) {
          return (true);
        }
      }
      return (false);
    }
    @Override public int get(    String name,    Map values){
      List l=listeners.getList();
      for (int i=0; i < l.size(); i++) {
        int res=((MagnetPluginListener)l.get(i)).get(name,values);
        if (res != Integer.MIN_VALUE) {
          return (res);
        }
      }
      return (Integer.MIN_VALUE);
    }
  }
);
  plugin_interface.getUIManager().addUIListener(new UIManagerListener(){
    @Override public void UIAttached(    UIInstance instance){
      if (instance.getUIType().equals(UIInstance.UIT_SWT)) {
        try {
          Class.forName(""String_Node_Str"").getConstructor(new Class[]{UIInstance.class,TableContextMenuItem[].class}).newInstance(new Object[]{instance,new TableContextMenuItem[]{menu1,menu2,menu3}});
        }
 catch (        Throwable e) {
          e.printStackTrace();
        }
      }
    }
    @Override public void UIDetached(    UIInstance instance){
    }
  }
);
  final List<Download> to_delete=new ArrayList<>();
  Download[] downloads=plugin_interface.getDownloadManager().getDownloads();
  for (  Download download : downloads) {
    if (download.getFlag(Download.FLAG_METADATA_DOWNLOAD)) {
      to_delete.add(download);
    }
  }
  final AESemaphore delete_done=new AESemaphore(""String_Node_Str"");
  if (to_delete.size() > 0) {
    AEThread2 t=new AEThread2(""String_Node_Str"",true){
      @Override public void run(){
        try {
          for (          Download download : to_delete) {
            try {
              download.stop();
            }
 catch (            Throwable e) {
            }
            try {
              download.remove(true,true);
            }
 catch (            Throwable e) {
              Debug.out(e);
            }
          }
        }
  finally {
          delete_done.release();
        }
      }
    }
;
    t.start();
  }
 else {
    delete_done.release();
  }
  plugin_interface.addListener(new PluginListener(){
    @Override public void initializationComplete(){
      AEThread2 t=new AEThread2(""String_Node_Str"",true){
        @Override public void run(){
          delete_done.reserve();
          recoverDownloads();
          plugin_interface.getDistributedDatabase();
        }
      }
;
      t.start();
    }
    @Override public void closedownInitiated(){
    }
    @Override public void closedownComplete(){
    }
  }
);
}",0.9830374058245585
170795,"private DownloadResult _downloadSupport(final MagnetPluginProgressListener listener,final byte[] hash,final String args,final InetSocketAddress[] sources,long _timeout,int flags) throws MagnetURIHandlerException {
  final long timeout;
  if (_timeout < 0) {
    int secs=timeout_param.getValue();
    if (secs <= 0) {
      timeout=Integer.MAX_VALUE;
    }
 else {
      timeout=secs * 1000L;
    }
  }
 else {
    timeout=_timeout;
  }
  boolean md_enabled;
  final boolean dummy_hash=Arrays.equals(hash,new byte[20]);
  if ((flags & FL_DISABLE_MD_LOOKUP) != 0) {
    md_enabled=false;
  }
 else {
    md_enabled=md_lookup.getValue() && FeatureAvailability.isMagnetMDEnabled();
  }
  final byte[][] result_holder={null};
  final Throwable[] result_error={null};
  final boolean[] manually_cancelled={false};
  TimerEvent md_delay_event=null;
  final MagnetPluginMDDownloader[] md_downloader={null};
  boolean net_pub_default=isNetworkEnabled(AENetworkClassifier.AT_PUBLIC);
  final Set<String> networks_enabled;
  final Set<String> additional_networks=new HashSet<>();
  if (args != null) {
    String[] bits=args.split(""String_Node_Str"");
    List<URL> fl_args=new ArrayList<>();
    Set<String> tr_networks=new HashSet<>();
    Set<String> explicit_networks=new HashSet<>();
    for (    String bit : bits) {
      if (bit.startsWith(""String_Node_Str"")) {
        tr_networks.clear();
        explicit_networks.clear();
        fl_args.clear();
        explicit_networks.add(AENetworkClassifier.AT_I2P);
        break;
      }
      String[] x=bit.split(""String_Node_Str"");
      if (x.length == 2) {
        String lhs=x[0].toLowerCase();
        if (lhs.equals(""String_Node_Str"") || lhs.equals(""String_Node_Str"") || lhs.equals(""String_Node_Str"")) {
          try {
            URL url=new URL(UrlUtils.decode(x[1]));
            fl_args.add(url);
            tr_networks.add(AENetworkClassifier.categoriseAddress(url.getHost()));
          }
 catch (          Throwable e) {
          }
        }
 else         if (lhs.equals(""String_Node_Str"")) {
          try {
            tr_networks.add(AENetworkClassifier.categoriseAddress(new URL(UrlUtils.decode(x[1])).getHost()));
          }
 catch (          Throwable e) {
          }
        }
 else         if (lhs.equals(""String_Node_Str"")) {
          String network=AENetworkClassifier.internalise(x[1]);
          if (network != null) {
            explicit_networks.add(network);
          }
        }
      }
    }
    if (explicit_networks.size() > 0) {
      networks_enabled=explicit_networks;
    }
 else {
      networks_enabled=tr_networks;
      if (net_pub_default) {
        if (networks_enabled.size() == 0) {
          networks_enabled.add(AENetworkClassifier.AT_PUBLIC);
        }
      }
 else {
        networks_enabled.remove(AENetworkClassifier.AT_PUBLIC);
      }
    }
    if (fl_args.size() > 0) {
      final AESemaphore fl_sem=new AESemaphore(""String_Node_Str"");
      int fl_run=0;
      for (int i=0; i < fl_args.size() && i < 3; i++) {
        final URL fl_url=fl_args.get(i);
        String url_net=AENetworkClassifier.categoriseAddress(fl_url.getHost());
        if (networks_enabled.contains(url_net)) {
          new AEThread2(""String_Node_Str"",true){
            @Override public void run(){
              try {
                TOTorrent torrent=TorrentUtils.download(fl_url,timeout);
                if (torrent != null) {
                  if (dummy_hash || Arrays.equals(torrent.getHash(),hash)) {
synchronized (result_holder) {
                      result_holder[0]=BEncoder.encode(torrent.serialiseToMap());
                    }
                  }
                }
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
 finally {
                fl_sem.release();
              }
            }
          }
.start();
          fl_run++;
        }
      }
      if (dummy_hash) {
        long remaining=timeout;
        for (int i=0; i < fl_run && remaining > 0; i++) {
          long start=SystemTime.getMonotonousTime();
          if (!fl_sem.reserve(remaining)) {
            break;
          }
          remaining-=(SystemTime.getMonotonousTime() - start);
synchronized (result_holder) {
            if (result_holder[0] != null) {
              return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
            }
          }
        }
      }
    }
  }
 else {
    networks_enabled=new HashSet<>();
    if (net_pub_default) {
      networks_enabled.add(AENetworkClassifier.AT_PUBLIC);
    }
  }
  if (dummy_hash) {
    return (null);
  }
  if (md_enabled) {
    int delay_millis;
    if ((flags & FL_NO_MD_LOOKUP_DELAY) != 0) {
      delay_millis=0;
    }
 else {
      delay_millis=md_lookup_delay.getValue() * 1000;
    }
    md_delay_event=SimpleTimer.addEvent(""String_Node_Str"",delay_millis <= 0 ? 0 : (SystemTime.getCurrentTime() + delay_millis),new TimerEventPerformer(){
      @Override public void perform(      TimerEvent event){
        MagnetPluginMDDownloader mdd;
synchronized (md_downloader) {
          if (event.isCancelled()) {
            return;
          }
          md_downloader[0]=mdd=new MagnetPluginMDDownloader(MagnetPlugin.this,plugin_interface,hash,networks_enabled,sources,args);
        }
        if (listener != null) {
          listener.reportActivity(getMessageText(""String_Node_Str""));
        }
        mdd.start(new MagnetPluginMDDownloader.DownloadListener(){
          @Override public void reportProgress(          int downloaded,          int total_size){
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str"",String.valueOf(downloaded + ""String_Node_Str"" + total_size)));
              listener.reportCompleteness(100 * downloaded / total_size);
            }
          }
          @Override public void complete(          TOTorrent torrent,          Set<String> peer_networks){
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str""));
            }
synchronized (result_holder) {
              additional_networks.addAll(peer_networks);
              try {
                result_holder[0]=BEncoder.encode(torrent.serialiseToMap());
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
            }
          }
          @Override public void failed(          boolean mc,          Throwable e){
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str"",Debug.getNestedExceptionMessage(e)));
            }
synchronized (result_holder) {
              manually_cancelled[0]=mc;
              result_error[0]=e;
            }
          }
        }
);
      }
    }
);
  }
  try {
    try {
      long remaining=timeout;
      boolean sl_enabled=secondary_lookup.getValue() && FeatureAvailability.isMagnetSLEnabled();
      boolean sl_failed=false;
      long secondary_lookup_time=-1;
      final Object[] secondary_result={null};
      if (networks_enabled.contains(AENetworkClassifier.AT_PUBLIC)) {
        boolean is_first_download=first_download;
        if (is_first_download) {
          if (listener != null) {
            listener.reportActivity(getMessageText(""String_Node_Str""));
          }
          first_download=false;
        }
        final DistributedDatabase db=plugin_interface.getDistributedDatabase();
        if (db.isAvailable()) {
          final List potential_contacts=new ArrayList();
          final AESemaphore potential_contacts_sem=new AESemaphore(""String_Node_Str"");
          final AEMonitor potential_contacts_mon=new AEMonitor(""String_Node_Str"");
          final int[] outstanding={0};
          final boolean[] lookup_complete={false};
          if (listener != null) {
            listener.reportActivity(getMessageText(""String_Node_Str""));
          }
          DistributedDatabaseListener ddb_listener=new DistributedDatabaseListener(){
            private Set found_set=new HashSet();
            @Override public void event(            DistributedDatabaseEvent event){
              int type=event.getType();
              if (type == DistributedDatabaseEvent.ET_OPERATION_STARTS) {
                if (sources.length > 0) {
                  new DelayedEvent(""String_Node_Str"",10 * 1000,new AERunnable(){
                    @Override public void runSupport(){
                      addExplicitSources();
                    }
                  }
);
                }
              }
 else               if (type == DistributedDatabaseEvent.ET_VALUE_READ) {
                contactFound(event.getValue().getContact());
              }
 else               if (type == DistributedDatabaseEvent.ET_OPERATION_COMPLETE || type == DistributedDatabaseEvent.ET_OPERATION_TIMEOUT) {
                if (listener != null) {
                  listener.reportActivity(getMessageText(""String_Node_Str"",String.valueOf(found_set.size())));
                }
                addExplicitSources();
                try {
                  potential_contacts_mon.enter();
                  lookup_complete[0]=true;
                }
  finally {
                  potential_contacts_mon.exit();
                }
                potential_contacts_sem.release();
              }
            }
            protected void addExplicitSources(){
              for (int i=0; i < sources.length; i++) {
                try {
                  contactFound(db.importContact(sources[i]));
                }
 catch (                Throwable e) {
                  Debug.printStackTrace(e);
                }
              }
            }
            public void contactFound(            final DistributedDatabaseContact contact){
              String key=contact.getAddress().toString();
synchronized (found_set) {
                if (found_set.contains(key)) {
                  return;
                }
                found_set.add(key);
              }
              if (listener != null && listener.verbose()) {
                listener.reportActivity(getMessageText(""String_Node_Str"",contact.getName()));
              }
              try {
                potential_contacts_mon.enter();
                outstanding[0]++;
              }
  finally {
                potential_contacts_mon.exit();
              }
              contact.isAlive(20 * 1000,new DistributedDatabaseListener(){
                @Override public void event(                DistributedDatabaseEvent event){
                  try {
                    boolean alive=event.getType() == DistributedDatabaseEvent.ET_OPERATION_COMPLETE;
                    if (listener != null && listener.verbose()) {
                      listener.reportActivity(getMessageText(alive ? ""String_Node_Str"" : ""String_Node_Str"",contact.getName()));
                    }
                    try {
                      potential_contacts_mon.enter();
                      Object[] entry=new Object[]{Boolean.valueOf(alive),contact};
                      boolean added=false;
                      if (alive) {
                        for (int i=0; i < potential_contacts.size(); i++) {
                          if (!((Boolean)((Object[])potential_contacts.get(i))[0]).booleanValue()) {
                            potential_contacts.add(i,entry);
                            added=true;
                            break;
                          }
                        }
                      }
                      if (!added) {
                        potential_contacts.add(entry);
                      }
                    }
  finally {
                      potential_contacts_mon.exit();
                    }
                  }
  finally {
                    try {
                      potential_contacts_mon.enter();
                      outstanding[0]--;
                    }
  finally {
                      potential_contacts_mon.exit();
                    }
                    potential_contacts_sem.release();
                  }
                }
              }
);
            }
          }
;
          db.read(ddb_listener,db.createKey(hash,""String_Node_Str"" + ByteFormatter.encodeString(hash) + ""String_Node_Str""),timeout,DistributedDatabase.OP_EXHAUSTIVE_READ | DistributedDatabase.OP_PRIORITY_HIGH);
          long overall_start=SystemTime.getMonotonousTime();
          long last_found=-1;
          AsyncDispatcher dispatcher=new AsyncDispatcher();
          while (remaining > 0) {
            try {
              potential_contacts_mon.enter();
              if (lookup_complete[0] && potential_contacts.size() == 0 && outstanding[0] == 0) {
                break;
              }
            }
  finally {
              potential_contacts_mon.exit();
            }
            while (remaining > 0) {
              if (listener != null && listener.cancelled()) {
                return (null);
              }
synchronized (result_holder) {
                if (result_holder[0] != null) {
                  return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
                }
                if (manually_cancelled[0]) {
                  throw (new Exception(""String_Node_Str""));
                }
              }
              long wait_start=SystemTime.getMonotonousTime();
              boolean got_sem=potential_contacts_sem.reserve(1000);
              long now=SystemTime.getMonotonousTime();
              remaining-=(now - wait_start);
              if (got_sem) {
                last_found=now;
                break;
              }
 else {
                if (sl_enabled) {
                  if (secondary_lookup_time == -1) {
                    long base_time;
                    if (last_found == -1 || now - overall_start > 60 * 1000) {
                      base_time=overall_start;
                    }
 else {
                      base_time=last_found;
                    }
                    long time_so_far=now - base_time;
                    if (time_so_far > SECONDARY_LOOKUP_DELAY) {
                      secondary_lookup_time=SystemTime.getMonotonousTime();
                      doSecondaryLookup(listener,secondary_result,hash,networks_enabled,args);
                    }
                  }
 else {
                    try {
                      byte[] torrent=getSecondaryLookupResult(secondary_result);
                      if (torrent != null) {
                        return (new DownloadResult(torrent,networks_enabled,additional_networks));
                      }
                    }
 catch (                    ResourceDownloaderException e) {
                      sl_failed=true;
                    }
                  }
                }
                continue;
              }
            }
            if (sl_enabled) {
              try {
                byte[] torrent=getSecondaryLookupResult(secondary_result);
                if (torrent != null) {
                  return (new DownloadResult(torrent,networks_enabled,additional_networks));
                }
              }
 catch (              ResourceDownloaderException e) {
                sl_failed=true;
              }
            }
            final DistributedDatabaseContact contact;
            final boolean live_contact;
            try {
              potential_contacts_mon.enter();
              if (potential_contacts.size() == 0) {
                if (outstanding[0] == 0) {
                  break;
                }
 else {
                  continue;
                }
              }
 else {
                Object[] entry=(Object[])potential_contacts.remove(0);
                live_contact=((Boolean)entry[0]).booleanValue();
                contact=(DistributedDatabaseContact)entry[1];
              }
            }
  finally {
              potential_contacts_mon.exit();
            }
            final AESemaphore contact_sem=new AESemaphore(""String_Node_Str"");
            dispatcher.dispatch(new AERunnable(){
              @Override public void runSupport(){
                try {
                  if (!live_contact) {
                    if (listener != null) {
                      listener.reportActivity(getMessageText(""String_Node_Str"",contact.getName()));
                    }
                    contact.openTunnel();
                  }
                  try {
                    if (listener != null) {
                      listener.reportActivity(getMessageText(""String_Node_Str"",contact.getName()));
                    }
                    DistributedDatabaseValue value=contact.read(listener == null ? null : new DistributedDatabaseProgressListener(){
                      @Override public void reportSize(                      long size){
                        listener.reportSize(size);
                      }
                      @Override public void reportActivity(                      String str){
                        listener.reportActivity(str);
                      }
                      @Override public void reportCompleteness(                      int percent){
                        listener.reportCompleteness(percent);
                      }
                    }
,db.getStandardTransferType(DistributedDatabaseTransferType.ST_TORRENT),db.createKey(hash,""String_Node_Str"" + ByteFormatter.encodeString(hash) + ""String_Node_Str""),timeout);
                    if (value != null) {
                      byte[] data=(byte[])value.getValue(byte[].class);
                      try {
                        TOTorrent torrent=TOTorrentFactory.deserialiseFromBEncodedByteArray(data);
                        if (Arrays.equals(hash,torrent.getHash())) {
                          if (listener != null) {
                            listener.reportContributor(contact.getAddress());
                          }
synchronized (result_holder) {
                            result_holder[0]=data;
                          }
                        }
 else {
                          if (listener != null) {
                            listener.reportActivity(getMessageText(""String_Node_Str"",""String_Node_Str""));
                          }
                        }
                      }
 catch (                      Throwable e) {
                        if (listener != null) {
                          listener.reportActivity(getMessageText(""String_Node_Str"",""String_Node_Str""));
                        }
                      }
                    }
                  }
 catch (                  Throwable e) {
                    if (listener != null) {
                      listener.reportActivity(getMessageText(""String_Node_Str"",Debug.getNestedExceptionMessage(e)));
                    }
                    Debug.printStackTrace(e);
                  }
                }
  finally {
                  contact_sem.release();
                }
              }
            }
);
            while (true) {
              if (listener != null && listener.cancelled()) {
                return (null);
              }
              boolean got_sem=contact_sem.reserve(500);
synchronized (result_holder) {
                if (result_holder[0] != null) {
                  return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
                }
                if (manually_cancelled[0]) {
                  throw (new Exception(""String_Node_Str""));
                }
              }
              if (got_sem) {
                break;
              }
            }
          }
        }
 else {
          if (is_first_download) {
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str""));
            }
          }
        }
      }
      if (sl_enabled && !sl_failed) {
        if (secondary_lookup_time == -1) {
          secondary_lookup_time=SystemTime.getMonotonousTime();
          doSecondaryLookup(listener,secondary_result,hash,networks_enabled,args);
        }
        while (SystemTime.getMonotonousTime() - secondary_lookup_time < SECONDARY_LOOKUP_MAX_TIME) {
          if (listener != null && listener.cancelled()) {
            return (null);
          }
          try {
            byte[] torrent=getSecondaryLookupResult(secondary_result);
            if (torrent != null) {
              return (new DownloadResult(torrent,networks_enabled,additional_networks));
            }
synchronized (result_holder) {
              if (result_holder[0] != null) {
                return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
              }
              if (manually_cancelled[0]) {
                throw (new Exception(""String_Node_Str""));
              }
            }
            Thread.sleep(500);
          }
 catch (          ResourceDownloaderException e) {
            sl_failed=true;
            break;
          }
        }
      }
      if (md_enabled) {
        while (remaining > 0) {
          if (listener != null && listener.cancelled()) {
            return (null);
          }
          Thread.sleep(500);
          remaining-=500;
          if (!sl_failed) {
            try {
              byte[] torrent=getSecondaryLookupResult(secondary_result);
              if (torrent != null) {
                return (new DownloadResult(torrent,networks_enabled,additional_networks));
              }
            }
 catch (            ResourceDownloaderException e) {
              sl_failed=true;
            }
          }
synchronized (result_holder) {
            if (result_holder[0] != null) {
              return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
            }
            if (result_error[0] != null) {
              break;
            }
          }
        }
      }
      return (null);
    }
 catch (    Throwable e) {
      Debug.printStackTrace(e);
      if (listener != null) {
        listener.reportActivity(getMessageText(""String_Node_Str"",Debug.getNestedExceptionMessage(e)));
      }
      throw (new MagnetURIHandlerException(""String_Node_Str"",e));
    }
  }
  finally {
synchronized (md_downloader) {
      if (md_delay_event != null) {
        md_delay_event.cancel();
        if (md_downloader[0] != null) {
          md_downloader[0].cancel();
        }
      }
    }
  }
}","private DownloadResult _downloadSupport(final MagnetPluginProgressListener listener,final byte[] hash,final String args,final InetSocketAddress[] sources,long _timeout,int flags) throws MagnetURIHandlerException {
  final long timeout;
  if (_timeout < 0) {
    int secs=timeout_param.getValue();
    if (secs <= 0) {
      timeout=Integer.MAX_VALUE;
    }
 else {
      timeout=secs * 1000L;
    }
  }
 else {
    timeout=_timeout;
  }
  boolean md_enabled;
  final boolean dummy_hash=Arrays.equals(hash,new byte[20]);
  if ((flags & FL_DISABLE_MD_LOOKUP) != 0) {
    md_enabled=false;
  }
 else {
    md_enabled=md_lookup.getValue() && FeatureAvailability.isMagnetMDEnabled();
  }
  final byte[][] result_holder={null};
  final Throwable[] result_error={null};
  final boolean[] manually_cancelled={false};
  TimerEvent md_delay_event=null;
  final MagnetPluginMDDownloader[] md_downloader={null};
  boolean net_pub_default=isNetworkEnabled(AENetworkClassifier.AT_PUBLIC);
  final Set<String> networks_enabled;
  final Set<String> additional_networks=new HashSet<>();
  if (args != null) {
    String[] bits=args.split(""String_Node_Str"");
    List<URL> fl_args=new ArrayList<>();
    Set<String> tr_networks=new HashSet<>();
    Set<String> explicit_networks=new HashSet<>();
    for (    String bit : bits) {
      if (bit.startsWith(""String_Node_Str"")) {
        tr_networks.clear();
        explicit_networks.clear();
        fl_args.clear();
        explicit_networks.add(AENetworkClassifier.AT_I2P);
        break;
      }
      String[] x=bit.split(""String_Node_Str"");
      if (x.length == 2) {
        String lhs=x[0].toLowerCase();
        if (lhs.equals(""String_Node_Str"") || lhs.equals(""String_Node_Str"") || lhs.equals(""String_Node_Str"")) {
          try {
            URL url=new URL(UrlUtils.decode(x[1]));
            fl_args.add(url);
            tr_networks.add(AENetworkClassifier.categoriseAddress(url.getHost()));
          }
 catch (          Throwable e) {
          }
        }
 else         if (lhs.equals(""String_Node_Str"")) {
          try {
            tr_networks.add(AENetworkClassifier.categoriseAddress(new URL(UrlUtils.decode(x[1])).getHost()));
          }
 catch (          Throwable e) {
          }
        }
 else         if (lhs.equals(""String_Node_Str"")) {
          String network=AENetworkClassifier.internalise(x[1]);
          if (network != null) {
            explicit_networks.add(network);
          }
        }
      }
    }
    if (explicit_networks.size() > 0) {
      networks_enabled=explicit_networks;
    }
 else {
      networks_enabled=tr_networks;
      if (net_pub_default) {
        if (networks_enabled.size() == 0) {
          networks_enabled.add(AENetworkClassifier.AT_PUBLIC);
        }
      }
 else {
        networks_enabled.remove(AENetworkClassifier.AT_PUBLIC);
      }
    }
    if (fl_args.size() > 0) {
      final AESemaphore fl_sem=new AESemaphore(""String_Node_Str"");
      int fl_run=0;
      for (int i=0; i < fl_args.size() && i < 3; i++) {
        final URL fl_url=fl_args.get(i);
        String url_net=AENetworkClassifier.categoriseAddress(fl_url.getHost());
        if (networks_enabled.contains(url_net)) {
          new AEThread2(""String_Node_Str"",true){
            @Override public void run(){
              try {
                TOTorrent torrent=TorrentUtils.download(fl_url,timeout);
                if (torrent != null) {
                  if (dummy_hash || Arrays.equals(torrent.getHash(),hash)) {
synchronized (result_holder) {
                      result_holder[0]=BEncoder.encode(torrent.serialiseToMap());
                    }
                  }
                }
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
 finally {
                fl_sem.release();
              }
            }
          }
.start();
          fl_run++;
        }
      }
      if (dummy_hash) {
        long remaining=timeout;
        for (int i=0; i < fl_run && remaining > 0; i++) {
          long start=SystemTime.getMonotonousTime();
          if (!fl_sem.reserve(remaining)) {
            break;
          }
          remaining-=(SystemTime.getMonotonousTime() - start);
synchronized (result_holder) {
            if (result_holder[0] != null) {
              return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
            }
          }
        }
      }
    }
  }
 else {
    networks_enabled=new HashSet<>();
    if (net_pub_default) {
      networks_enabled.add(AENetworkClassifier.AT_PUBLIC);
    }
  }
  if (dummy_hash) {
    return (null);
  }
  if (md_enabled) {
    int delay_millis;
    if ((flags & FL_NO_MD_LOOKUP_DELAY) != 0) {
      delay_millis=0;
    }
 else {
      delay_millis=md_lookup_delay.getValue() * 1000;
    }
    md_delay_event=SimpleTimer.addEvent(""String_Node_Str"",delay_millis <= 0 ? 0 : (SystemTime.getCurrentTime() + delay_millis),new TimerEventPerformer(){
      @Override public void perform(      TimerEvent event){
        MagnetPluginMDDownloader mdd;
synchronized (md_downloader) {
          if (event.isCancelled()) {
            return;
          }
          md_downloader[0]=mdd=new MagnetPluginMDDownloader(MagnetPlugin.this,plugin_interface,hash,networks_enabled,sources,args);
        }
        if (listener != null) {
          listener.reportActivity(getMessageText(""String_Node_Str""));
        }
        mdd.start(new MagnetPluginMDDownloader.DownloadListener(){
          @Override public void reportProgress(          int downloaded,          int total_size){
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str"",String.valueOf(downloaded + ""String_Node_Str"" + total_size)));
              listener.reportCompleteness(100 * downloaded / total_size);
            }
          }
          @Override public void complete(          TOTorrent torrent,          Set<String> peer_networks){
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str""));
            }
synchronized (result_holder) {
              additional_networks.addAll(peer_networks);
              try {
                result_holder[0]=BEncoder.encode(torrent.serialiseToMap());
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
            }
          }
          @Override public void failed(          boolean mc,          Throwable e){
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str"",Debug.getNestedExceptionMessage(e)));
            }
synchronized (result_holder) {
              manually_cancelled[0]=mc;
              result_error[0]=e;
            }
          }
        }
);
      }
    }
);
  }
  try {
    try {
      long remaining=timeout;
      boolean sl_enabled=secondary_lookup.getValue() && FeatureAvailability.isMagnetSLEnabled();
      boolean sl_failed=false;
      long secondary_lookup_time=-1;
      final Object[] secondary_result={null};
      if (networks_enabled.contains(AENetworkClassifier.AT_PUBLIC)) {
        boolean is_first_download=first_download;
        if (is_first_download) {
          if (listener != null) {
            listener.reportActivity(getMessageText(""String_Node_Str""));
          }
          first_download=false;
        }
        final DistributedDatabase db=plugin_interface.getDistributedDatabase();
        if (db.isAvailable()) {
          final List potential_contacts=new ArrayList();
          final AESemaphore potential_contacts_sem=new AESemaphore(""String_Node_Str"");
          final AEMonitor potential_contacts_mon=new AEMonitor(""String_Node_Str"");
          final int[] outstanding={0};
          final boolean[] lookup_complete={false};
          if (listener != null) {
            listener.reportActivity(getMessageText(""String_Node_Str""));
          }
          DistributedDatabaseListener ddb_listener=new DistributedDatabaseListener(){
            private Set found_set=new HashSet();
            @Override public void event(            DistributedDatabaseEvent event){
              int type=event.getType();
              if (type == DistributedDatabaseEvent.ET_OPERATION_STARTS) {
                if (sources.length > 0) {
                  new DelayedEvent(""String_Node_Str"",10 * 1000,new AERunnable(){
                    @Override public void runSupport(){
                      addExplicitSources();
                    }
                  }
);
                }
              }
 else               if (type == DistributedDatabaseEvent.ET_VALUE_READ) {
                contactFound(event.getValue().getContact());
              }
 else               if (type == DistributedDatabaseEvent.ET_OPERATION_COMPLETE || type == DistributedDatabaseEvent.ET_OPERATION_TIMEOUT) {
                if (listener != null) {
                  listener.reportActivity(getMessageText(""String_Node_Str"",String.valueOf(found_set.size())));
                }
                addExplicitSources();
                try {
                  potential_contacts_mon.enter();
                  lookup_complete[0]=true;
                }
  finally {
                  potential_contacts_mon.exit();
                }
                potential_contacts_sem.release();
              }
            }
            protected void addExplicitSources(){
              for (int i=0; i < sources.length; i++) {
                try {
                  InetSocketAddress source=sources[i];
                  if (AENetworkClassifier.categoriseAddress(source) == AENetworkClassifier.AT_PUBLIC) {
                    contactFound(db.importContact(sources[i]));
                  }
                }
 catch (                Throwable e) {
                  Debug.printStackTrace(e);
                }
              }
            }
            public void contactFound(            final DistributedDatabaseContact contact){
              String key=contact.getAddress().toString();
synchronized (found_set) {
                if (found_set.contains(key)) {
                  return;
                }
                found_set.add(key);
              }
              if (listener != null && listener.verbose()) {
                listener.reportActivity(getMessageText(""String_Node_Str"",contact.getName()));
              }
              try {
                potential_contacts_mon.enter();
                outstanding[0]++;
              }
  finally {
                potential_contacts_mon.exit();
              }
              contact.isAlive(20 * 1000,new DistributedDatabaseListener(){
                @Override public void event(                DistributedDatabaseEvent event){
                  try {
                    boolean alive=event.getType() == DistributedDatabaseEvent.ET_OPERATION_COMPLETE;
                    if (listener != null && listener.verbose()) {
                      listener.reportActivity(getMessageText(alive ? ""String_Node_Str"" : ""String_Node_Str"",contact.getName()));
                    }
                    try {
                      potential_contacts_mon.enter();
                      Object[] entry=new Object[]{Boolean.valueOf(alive),contact};
                      boolean added=false;
                      if (alive) {
                        for (int i=0; i < potential_contacts.size(); i++) {
                          if (!((Boolean)((Object[])potential_contacts.get(i))[0]).booleanValue()) {
                            potential_contacts.add(i,entry);
                            added=true;
                            break;
                          }
                        }
                      }
                      if (!added) {
                        potential_contacts.add(entry);
                      }
                    }
  finally {
                      potential_contacts_mon.exit();
                    }
                  }
  finally {
                    try {
                      potential_contacts_mon.enter();
                      outstanding[0]--;
                    }
  finally {
                      potential_contacts_mon.exit();
                    }
                    potential_contacts_sem.release();
                  }
                }
              }
);
            }
          }
;
          db.read(ddb_listener,db.createKey(hash,""String_Node_Str"" + ByteFormatter.encodeString(hash) + ""String_Node_Str""),timeout,DistributedDatabase.OP_EXHAUSTIVE_READ | DistributedDatabase.OP_PRIORITY_HIGH);
          long overall_start=SystemTime.getMonotonousTime();
          long last_found=-1;
          AsyncDispatcher dispatcher=new AsyncDispatcher();
          while (remaining > 0) {
            try {
              potential_contacts_mon.enter();
              if (lookup_complete[0] && potential_contacts.size() == 0 && outstanding[0] == 0) {
                break;
              }
            }
  finally {
              potential_contacts_mon.exit();
            }
            while (remaining > 0) {
              if (listener != null && listener.cancelled()) {
                return (null);
              }
synchronized (result_holder) {
                if (result_holder[0] != null) {
                  return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
                }
                if (manually_cancelled[0]) {
                  throw (new Exception(""String_Node_Str""));
                }
              }
              long wait_start=SystemTime.getMonotonousTime();
              boolean got_sem=potential_contacts_sem.reserve(1000);
              long now=SystemTime.getMonotonousTime();
              remaining-=(now - wait_start);
              if (got_sem) {
                last_found=now;
                break;
              }
 else {
                if (sl_enabled) {
                  if (secondary_lookup_time == -1) {
                    long base_time;
                    if (last_found == -1 || now - overall_start > 60 * 1000) {
                      base_time=overall_start;
                    }
 else {
                      base_time=last_found;
                    }
                    long time_so_far=now - base_time;
                    if (time_so_far > SECONDARY_LOOKUP_DELAY) {
                      secondary_lookup_time=SystemTime.getMonotonousTime();
                      doSecondaryLookup(listener,secondary_result,hash,networks_enabled,args);
                    }
                  }
 else {
                    try {
                      byte[] torrent=getSecondaryLookupResult(secondary_result);
                      if (torrent != null) {
                        return (new DownloadResult(torrent,networks_enabled,additional_networks));
                      }
                    }
 catch (                    ResourceDownloaderException e) {
                      sl_failed=true;
                    }
                  }
                }
                continue;
              }
            }
            if (sl_enabled) {
              try {
                byte[] torrent=getSecondaryLookupResult(secondary_result);
                if (torrent != null) {
                  return (new DownloadResult(torrent,networks_enabled,additional_networks));
                }
              }
 catch (              ResourceDownloaderException e) {
                sl_failed=true;
              }
            }
            final DistributedDatabaseContact contact;
            final boolean live_contact;
            try {
              potential_contacts_mon.enter();
              if (potential_contacts.size() == 0) {
                if (outstanding[0] == 0) {
                  break;
                }
 else {
                  continue;
                }
              }
 else {
                Object[] entry=(Object[])potential_contacts.remove(0);
                live_contact=((Boolean)entry[0]).booleanValue();
                contact=(DistributedDatabaseContact)entry[1];
              }
            }
  finally {
              potential_contacts_mon.exit();
            }
            final AESemaphore contact_sem=new AESemaphore(""String_Node_Str"");
            dispatcher.dispatch(new AERunnable(){
              @Override public void runSupport(){
                try {
                  if (!live_contact) {
                    if (listener != null) {
                      listener.reportActivity(getMessageText(""String_Node_Str"",contact.getName()));
                    }
                    contact.openTunnel();
                  }
                  try {
                    if (listener != null) {
                      listener.reportActivity(getMessageText(""String_Node_Str"",contact.getName()));
                    }
                    DistributedDatabaseValue value=contact.read(listener == null ? null : new DistributedDatabaseProgressListener(){
                      @Override public void reportSize(                      long size){
                        listener.reportSize(size);
                      }
                      @Override public void reportActivity(                      String str){
                        listener.reportActivity(str);
                      }
                      @Override public void reportCompleteness(                      int percent){
                        listener.reportCompleteness(percent);
                      }
                    }
,db.getStandardTransferType(DistributedDatabaseTransferType.ST_TORRENT),db.createKey(hash,""String_Node_Str"" + ByteFormatter.encodeString(hash) + ""String_Node_Str""),timeout);
                    if (value != null) {
                      byte[] data=(byte[])value.getValue(byte[].class);
                      try {
                        TOTorrent torrent=TOTorrentFactory.deserialiseFromBEncodedByteArray(data);
                        if (Arrays.equals(hash,torrent.getHash())) {
                          if (listener != null) {
                            listener.reportContributor(contact.getAddress());
                          }
synchronized (result_holder) {
                            result_holder[0]=data;
                          }
                        }
 else {
                          if (listener != null) {
                            listener.reportActivity(getMessageText(""String_Node_Str"",""String_Node_Str""));
                          }
                        }
                      }
 catch (                      Throwable e) {
                        if (listener != null) {
                          listener.reportActivity(getMessageText(""String_Node_Str"",""String_Node_Str""));
                        }
                      }
                    }
                  }
 catch (                  Throwable e) {
                    if (listener != null) {
                      listener.reportActivity(getMessageText(""String_Node_Str"",Debug.getNestedExceptionMessage(e)));
                    }
                    Debug.printStackTrace(e);
                  }
                }
  finally {
                  contact_sem.release();
                }
              }
            }
);
            while (true) {
              if (listener != null && listener.cancelled()) {
                return (null);
              }
              boolean got_sem=contact_sem.reserve(500);
synchronized (result_holder) {
                if (result_holder[0] != null) {
                  return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
                }
                if (manually_cancelled[0]) {
                  throw (new Exception(""String_Node_Str""));
                }
              }
              if (got_sem) {
                break;
              }
            }
          }
        }
 else {
          if (is_first_download) {
            if (listener != null) {
              listener.reportActivity(getMessageText(""String_Node_Str""));
            }
          }
        }
      }
      if (sl_enabled && !sl_failed) {
        if (secondary_lookup_time == -1) {
          secondary_lookup_time=SystemTime.getMonotonousTime();
          doSecondaryLookup(listener,secondary_result,hash,networks_enabled,args);
        }
        while (SystemTime.getMonotonousTime() - secondary_lookup_time < SECONDARY_LOOKUP_MAX_TIME) {
          if (listener != null && listener.cancelled()) {
            return (null);
          }
          try {
            byte[] torrent=getSecondaryLookupResult(secondary_result);
            if (torrent != null) {
              return (new DownloadResult(torrent,networks_enabled,additional_networks));
            }
synchronized (result_holder) {
              if (result_holder[0] != null) {
                return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
              }
              if (manually_cancelled[0]) {
                throw (new Exception(""String_Node_Str""));
              }
            }
            Thread.sleep(500);
          }
 catch (          ResourceDownloaderException e) {
            sl_failed=true;
            break;
          }
        }
      }
      if (md_enabled) {
        while (remaining > 0) {
          if (listener != null && listener.cancelled()) {
            return (null);
          }
          Thread.sleep(500);
          remaining-=500;
          if (!sl_failed) {
            try {
              byte[] torrent=getSecondaryLookupResult(secondary_result);
              if (torrent != null) {
                return (new DownloadResult(torrent,networks_enabled,additional_networks));
              }
            }
 catch (            ResourceDownloaderException e) {
              sl_failed=true;
            }
          }
synchronized (result_holder) {
            if (result_holder[0] != null) {
              return (new DownloadResult(result_holder[0],networks_enabled,additional_networks));
            }
            if (result_error[0] != null) {
              break;
            }
          }
        }
      }
      return (null);
    }
 catch (    Throwable e) {
      Debug.printStackTrace(e);
      if (listener != null) {
        listener.reportActivity(getMessageText(""String_Node_Str"",Debug.getNestedExceptionMessage(e)));
      }
      throw (new MagnetURIHandlerException(""String_Node_Str"",e));
    }
  }
  finally {
synchronized (md_downloader) {
      if (md_delay_event != null) {
        md_delay_event.cancel();
        if (md_downloader[0] != null) {
          md_downloader[0].cancel();
        }
      }
    }
  }
}",0.9959662142586526
170796,"protected void addExplicitSources(){
  for (int i=0; i < sources.length; i++) {
    try {
      contactFound(db.importContact(sources[i]));
    }
 catch (    Throwable e) {
      Debug.printStackTrace(e);
    }
  }
}","protected void addExplicitSources(){
  for (int i=0; i < sources.length; i++) {
    try {
      InetSocketAddress source=sources[i];
      if (AENetworkClassifier.categoriseAddress(source) == AENetworkClassifier.AT_PUBLIC) {
        contactFound(db.importContact(sources[i]));
      }
    }
 catch (    Throwable e) {
      Debug.printStackTrace(e);
    }
  }
}",0.7487001733102253
170797,"public void stopIt(int _stateAfterStopping,final boolean remove_torrent,final boolean remove_data,final boolean for_removal){
  long current_up=stats.getDataSendRate();
  if (current_up != 0) {
    data_send_rate_at_close=current_up;
  }
  boolean closing=_stateAfterStopping == DownloadManager.STATE_CLOSED;
  if (closing) {
    _stateAfterStopping=DownloadManager.STATE_STOPPED;
  }
  final int stateAfterStopping=_stateAfterStopping;
  try {
    control_mon.enter();
    int state=getState();
    if (state == DownloadManager.STATE_STOPPED || (state == DownloadManager.STATE_ERROR && getDiskManager() == null)) {
      if (remove_data) {
        download_manager.deleteDataFiles();
      }
 else {
        if (for_removal && COConfigurationManager.getBooleanParameter(""String_Node_Str"")) {
          download_manager.deletePartialDataFiles();
        }
      }
      if (remove_torrent) {
        download_manager.deleteTorrentFile();
      }
      setState(_stateAfterStopping,false);
      return;
    }
    if (state == DownloadManager.STATE_STOPPING) {
      return;
    }
    setSubState(_stateAfterStopping);
    setState(DownloadManager.STATE_STOPPING,false);
    final AESemaphore nd_sem=new AESemaphore(""String_Node_Str"");
    NonDaemonTaskRunner.runAsync(new NonDaemonTask(){
      @Override public Object run(){
        nd_sem.reserve();
        return (null);
      }
      @Override public String getName(){
        return (""String_Node_Str"" + getDisplayName() + ""String_Node_Str"");
      }
    }
);
    try {
      try {
        if (peer_manager != null) {
          peer_manager.stopAll();
          stats.saveSessionTotals();
          DownloadManagerState dmState=download_manager.getDownloadState();
          dmState.setLongParameter(DownloadManagerState.PARAM_DOWNLOAD_LAST_ACTIVE_TIME,SystemTime.getCurrentTime());
          SimpleTimer.removeTickReceiver(this);
          DownloadManagerRateController.removePeerManager(peer_manager);
          download_manager.getDownloadState().removeListener(dm_attribute_listener,DownloadManagerState.AT_FLAGS,DownloadManagerStateAttributeListener.WRITTEN);
          dm_attribute_listener=null;
        }
        download_manager.informStopped(peer_manager,stateAfterStopping == DownloadManager.STATE_QUEUED);
        peer_manager=null;
        DiskManager dm=getDiskManager();
        if (dm != null) {
          boolean went_async=dm.stop(closing);
          if (went_async) {
            int wait_count=0;
            Thread.sleep(10);
            while (!dm.isStopped()) {
              wait_count++;
              if (wait_count > 2 * 60 * 10) {
                Debug.out(""String_Node_Str"");
                break;
              }
 else               if (wait_count % 200 == 0) {
                Debug.out(""String_Node_Str"" + wait_count + ""String_Node_Str"");
              }
              Thread.sleep(100);
            }
          }
          stats.setCompleted(stats.getCompleted());
          stats.recalcDownloadCompleteBytes();
          if (!download_manager.getAssumedComplete()) {
            download_manager.getDownloadState().save();
          }
          setDiskManager(null,null);
        }
      }
  finally {
        force_start=false;
        if (remove_data) {
          download_manager.deleteDataFiles();
        }
 else {
          if (for_removal && COConfigurationManager.getBooleanParameter(""String_Node_Str"")) {
            download_manager.deletePartialDataFiles();
          }
        }
        if (remove_torrent) {
          download_manager.deleteTorrentFile();
        }
        List<ExternalSeedPeer> to_remove=new ArrayList<>();
synchronized (http_seeds) {
          to_remove.addAll(http_seeds);
          http_seeds.clear();
        }
        for (        ExternalSeedPeer peer : to_remove) {
          peer.remove();
        }
        if (getState() == DownloadManager.STATE_STOPPING) {
          setState(stateAfterStopping,true);
        }
      }
    }
  finally {
      nd_sem.release();
    }
  }
 catch (  Throwable e) {
    Debug.printStackTrace(e);
  }
 finally {
    control_mon.exit();
    download_manager.informStateChanged();
  }
}","public void stopIt(int _stateAfterStopping,final boolean remove_torrent,final boolean remove_data,final boolean for_removal){
  long current_up=stats.getDataSendRate();
  if (current_up != 0) {
    data_send_rate_at_close=current_up;
  }
  boolean closing=_stateAfterStopping == DownloadManager.STATE_CLOSED;
  if (closing) {
    _stateAfterStopping=DownloadManager.STATE_STOPPED;
  }
  final int stateAfterStopping=_stateAfterStopping;
  try {
    control_mon.enter();
    int state=getState();
    if (state == DownloadManager.STATE_STOPPED || (state == DownloadManager.STATE_ERROR && getDiskManager() == null)) {
      if (remove_data) {
        download_manager.deleteDataFiles();
      }
 else {
        if (for_removal && COConfigurationManager.getBooleanParameter(""String_Node_Str"")) {
          download_manager.deletePartialDataFiles();
        }
      }
      if (remove_torrent) {
        download_manager.deleteTorrentFile();
      }
      setState(_stateAfterStopping,false);
      return;
    }
    if (state == DownloadManager.STATE_STOPPING) {
      return;
    }
    setSubState(_stateAfterStopping);
    setState(DownloadManager.STATE_STOPPING,false);
    NonDaemonTaskRunner.run(new NonDaemonTask(){
      @Override public Object run(){
        try {
          if (peer_manager != null) {
            peer_manager.stopAll();
            stats.saveSessionTotals();
            DownloadManagerState dmState=download_manager.getDownloadState();
            dmState.setLongParameter(DownloadManagerState.PARAM_DOWNLOAD_LAST_ACTIVE_TIME,SystemTime.getCurrentTime());
            SimpleTimer.removeTickReceiver(DownloadManagerController.this);
            DownloadManagerRateController.removePeerManager(peer_manager);
            download_manager.getDownloadState().removeListener(dm_attribute_listener,DownloadManagerState.AT_FLAGS,DownloadManagerStateAttributeListener.WRITTEN);
            dm_attribute_listener=null;
          }
          download_manager.informStopped(peer_manager,stateAfterStopping == DownloadManager.STATE_QUEUED);
          peer_manager=null;
          DiskManager dm=getDiskManager();
          if (dm != null) {
            boolean went_async=dm.stop(closing);
            if (went_async) {
              try {
                int wait_count=0;
                Thread.sleep(10);
                while (!dm.isStopped()) {
                  wait_count++;
                  if (wait_count > 2 * 60 * 10) {
                    Debug.out(""String_Node_Str"");
                    break;
                  }
 else                   if (wait_count % 200 == 0) {
                    Debug.out(""String_Node_Str"" + wait_count + ""String_Node_Str"");
                  }
                  Thread.sleep(100);
                }
              }
 catch (              Throwable e) {
                Debug.out(e);
              }
            }
            stats.setCompleted(stats.getCompleted());
            stats.recalcDownloadCompleteBytes();
            if (!download_manager.getAssumedComplete()) {
              download_manager.getDownloadState().save();
            }
            setDiskManager(null,null);
          }
        }
  finally {
          force_start=false;
          if (remove_data) {
            download_manager.deleteDataFiles();
          }
 else {
            if (for_removal && COConfigurationManager.getBooleanParameter(""String_Node_Str"")) {
              download_manager.deletePartialDataFiles();
            }
          }
          if (remove_torrent) {
            download_manager.deleteTorrentFile();
          }
          List<ExternalSeedPeer> to_remove=new ArrayList<>();
synchronized (http_seeds) {
            to_remove.addAll(http_seeds);
            http_seeds.clear();
          }
          for (          ExternalSeedPeer peer : to_remove) {
            peer.remove();
          }
          if (getState() == DownloadManager.STATE_STOPPING) {
            setState(stateAfterStopping,true);
          }
        }
        return (null);
      }
      @Override public String getName(){
        return (""String_Node_Str"" + getDisplayName() + ""String_Node_Str"");
      }
    }
);
  }
 catch (  Throwable e) {
    Debug.printStackTrace(e);
  }
 finally {
    control_mon.exit();
    download_manager.informStateChanged();
  }
}",0.9102761645134526
170798,"@Override public Object run(){
  nd_sem.reserve();
  return (null);
}","@Override public Object run(){
  try {
    if (peer_manager != null) {
      peer_manager.stopAll();
      stats.saveSessionTotals();
      DownloadManagerState dmState=download_manager.getDownloadState();
      dmState.setLongParameter(DownloadManagerState.PARAM_DOWNLOAD_LAST_ACTIVE_TIME,SystemTime.getCurrentTime());
      SimpleTimer.removeTickReceiver(DownloadManagerController.this);
      DownloadManagerRateController.removePeerManager(peer_manager);
      download_manager.getDownloadState().removeListener(dm_attribute_listener,DownloadManagerState.AT_FLAGS,DownloadManagerStateAttributeListener.WRITTEN);
      dm_attribute_listener=null;
    }
    download_manager.informStopped(peer_manager,stateAfterStopping == DownloadManager.STATE_QUEUED);
    peer_manager=null;
    DiskManager dm=getDiskManager();
    if (dm != null) {
      boolean went_async=dm.stop(closing);
      if (went_async) {
        try {
          int wait_count=0;
          Thread.sleep(10);
          while (!dm.isStopped()) {
            wait_count++;
            if (wait_count > 2 * 60 * 10) {
              Debug.out(""String_Node_Str"");
              break;
            }
 else             if (wait_count % 200 == 0) {
              Debug.out(""String_Node_Str"" + wait_count + ""String_Node_Str"");
            }
            Thread.sleep(100);
          }
        }
 catch (        Throwable e) {
          Debug.out(e);
        }
      }
      stats.setCompleted(stats.getCompleted());
      stats.recalcDownloadCompleteBytes();
      if (!download_manager.getAssumedComplete()) {
        download_manager.getDownloadState().save();
      }
      setDiskManager(null,null);
    }
  }
  finally {
    force_start=false;
    if (remove_data) {
      download_manager.deleteDataFiles();
    }
 else {
      if (for_removal && COConfigurationManager.getBooleanParameter(""String_Node_Str"")) {
        download_manager.deletePartialDataFiles();
      }
    }
    if (remove_torrent) {
      download_manager.deleteTorrentFile();
    }
    List<ExternalSeedPeer> to_remove=new ArrayList<>();
synchronized (http_seeds) {
      to_remove.addAll(http_seeds);
      http_seeds.clear();
    }
    for (    ExternalSeedPeer peer : to_remove) {
      peer.remove();
    }
    if (getState() == DownloadManager.STATE_STOPPING) {
      setState(stateAfterStopping,true);
    }
  }
  return (null);
}",0.029520295202952
170799,"protected static void addSpeedLimitsMenu(DownloadManager[] dms,Menu menu){
  Core core=CoreFactory.getSingleton();
  final SpeedLimitHandler slh=SpeedLimitHandler.getSingleton(core);
  boolean all_have_limit=true;
  Set<String> common_profiles=new HashSet<>();
  final List<byte[]> dm_hashes=new ArrayList<>();
  for (int i=0; i < dms.length; i++) {
    DownloadManager dm=dms[i];
    int maxul=dm.getStats().getUploadRateLimitBytesPerSecond();
    int maxdl=dm.getStats().getDownloadRateLimitBytesPerSecond();
    if (maxul == 0 && maxdl == 0) {
      all_have_limit=false;
    }
    TOTorrent t=dm.getTorrent();
    if (t == null) {
      common_profiles.clear();
    }
 else {
      try {
        byte[] hash=t.getHash();
        dm_hashes.add(hash);
        List<String> profs=slh.getProfilesForDownload(hash);
        if (i == 0) {
          common_profiles.addAll(profs);
        }
 else {
          common_profiles.retainAll(profs);
        }
      }
 catch (      TOTorrentException e) {
        Debug.out(e);
        common_profiles.clear();
      }
    }
  }
  java.util.List<String> profiles=slh.getProfileNames();
  final Menu add_to_prof_menu=new Menu(menu.getShell(),SWT.DROP_DOWN);
  MenuItem add_to_prof_item=new MenuItem(menu,SWT.CASCADE);
  add_to_prof_item.setMenu(add_to_prof_menu);
  Messages.setLanguageText(add_to_prof_item,""String_Node_Str"");
  if (!all_have_limit) {
    add_to_prof_item.setEnabled(false);
  }
 else {
    for (    final String p : profiles) {
      MenuItem addItem=new MenuItem(add_to_prof_menu,SWT.PUSH);
      addItem.setText(p);
      addItem.addListener(SWT.Selection,new Listener(){
        @Override public void handleEvent(        Event arg0){
          slh.addDownloadsToProfile(p,dm_hashes);
          MenuFactory.showText(""String_Node_Str"",MessageText.getString(""String_Node_Str"",new String[]{p}),slh.getProfile(p));
        }
      }
);
    }
  }
  final Menu remove_from_prof_menu=new Menu(menu.getShell(),SWT.DROP_DOWN);
  MenuItem remove_from_prof_item=new MenuItem(menu,SWT.CASCADE);
  remove_from_prof_item.setMenu(remove_from_prof_menu);
  Messages.setLanguageText(remove_from_prof_item,""String_Node_Str"");
  if (common_profiles.isEmpty()) {
    remove_from_prof_item.setEnabled(false);
  }
 else {
    for (    final String p : common_profiles) {
      MenuItem addItem=new MenuItem(remove_from_prof_menu,SWT.PUSH);
      addItem.setText(p);
      addItem.addListener(SWT.Selection,new Listener(){
        @Override public void handleEvent(        Event arg0){
          slh.removeDownloadsFromProfile(p,dm_hashes);
          MenuFactory.showText(""String_Node_Str"",MessageText.getString(""String_Node_Str"",new String[]{p}),slh.getProfile(p));
        }
      }
);
    }
  }
}","protected static void addSpeedLimitsMenu(DownloadManager[] dms,Menu menu){
  Core core=CoreFactory.getSingleton();
  Shell menu_shell=menu.getShell();
  final SpeedLimitHandler slh=SpeedLimitHandler.getSingleton(core);
  boolean all_have_limit=true;
  Set<String> common_profiles=new HashSet<>();
  final List<byte[]> dm_hashes=new ArrayList<>();
  for (int i=0; i < dms.length; i++) {
    DownloadManager dm=dms[i];
    int maxul=dm.getStats().getUploadRateLimitBytesPerSecond();
    int maxdl=dm.getStats().getDownloadRateLimitBytesPerSecond();
    if (maxul == 0 && maxdl == 0) {
      all_have_limit=false;
    }
    TOTorrent t=dm.getTorrent();
    if (t == null) {
      common_profiles.clear();
    }
 else {
      try {
        byte[] hash=t.getHash();
        dm_hashes.add(hash);
        List<String> profs=slh.getProfilesForDownload(hash);
        if (i == 0) {
          common_profiles.addAll(profs);
        }
 else {
          common_profiles.retainAll(profs);
        }
      }
 catch (      TOTorrentException e) {
        Debug.out(e);
        common_profiles.clear();
      }
    }
  }
  java.util.List<String> profiles=slh.getProfileNames();
  final Menu add_to_prof_menu=new Menu(menu_shell,SWT.DROP_DOWN);
  MenuItem add_to_prof_item=new MenuItem(menu,SWT.CASCADE);
  add_to_prof_item.setMenu(add_to_prof_menu);
  Messages.setLanguageText(add_to_prof_item,""String_Node_Str"");
  if (!all_have_limit) {
    add_to_prof_item.setEnabled(false);
  }
 else {
    for (    final String p : profiles) {
      MenuItem addItem=new MenuItem(add_to_prof_menu,SWT.PUSH);
      addItem.setText(p);
      addItem.addListener(SWT.Selection,new Listener(){
        @Override public void handleEvent(        Event arg0){
          slh.addDownloadsToProfile(p,dm_hashes);
          MenuFactory.showText(""String_Node_Str"",MessageText.getString(""String_Node_Str"",new String[]{p}),slh.getProfile(p));
        }
      }
);
    }
  }
  final Menu remove_from_prof_menu=new Menu(menu_shell,SWT.DROP_DOWN);
  MenuItem remove_from_prof_item=new MenuItem(menu,SWT.CASCADE);
  remove_from_prof_item.setMenu(remove_from_prof_menu);
  Messages.setLanguageText(remove_from_prof_item,""String_Node_Str"");
  if (common_profiles.isEmpty()) {
    remove_from_prof_item.setEnabled(false);
  }
 else {
    for (    final String p : common_profiles) {
      MenuItem addItem=new MenuItem(remove_from_prof_menu,SWT.PUSH);
      addItem.setText(p);
      addItem.addListener(SWT.Selection,new Listener(){
        @Override public void handleEvent(        Event arg0){
          slh.removeDownloadsFromProfile(p,dm_hashes);
          MenuFactory.showText(""String_Node_Str"",MessageText.getString(""String_Node_Str"",new String[]{p}),slh.getProfile(p));
        }
      }
);
    }
  }
}",0.9872680974899964
170800,"public static void fillTorrentMenu(final Menu menu,final DownloadManager[] dms,final Core core,boolean include_show_details,int selected_dl_types,final TableView tv){
  Shell shell=Utils.findAnyShell();
  final boolean isSeedingView;
switch (selected_dl_types) {
case 1:
    isSeedingView=false;
  break;
case 2:
isSeedingView=true;
break;
case 0:
{
if (dms.length == 1) {
isSeedingView=dms[0].isDownloadComplete(false);
break;
}
}
default :
isSeedingView=false;
}
boolean hasSelection=dms.length > 0;
boolean isSingleSelection=dms.length == 1;
boolean isTrackerOn=TRTrackerUtils.isTrackerEnabled();
int userMode=COConfigurationManager.getIntParameter(""String_Node_Str"");
boolean bChangeDir=hasSelection;
boolean start, stop, changeUrl, barsOpened, forceStart;
boolean forceStartEnabled, recheck, manualUpdate, fileMove, fileRescan;
changeUrl=barsOpened=manualUpdate=fileMove=fileRescan=true;
forceStart=forceStartEnabled=recheck=start=stop=false;
boolean canSetSuperSeed=false;
boolean superSeedAllYes=true;
boolean superSeedAllNo=true;
boolean upSpeedDisabled=false;
long totalUpSpeed=0;
boolean upSpeedUnlimited=false;
long upSpeedSetMax=0;
boolean downSpeedDisabled=false;
long totalDownSpeed=0;
boolean downSpeedUnlimited=false;
long downSpeedSetMax=0;
boolean allScanSelected=true;
boolean allScanNotSelected=true;
boolean allStopped=true;
boolean allResumeIncomplete=true;
boolean hasClearableLinks=false;
boolean hasRevertableFiles=false;
if (hasSelection) {
for (int i=0; i < dms.length; i++) {
DownloadManager dm=(DownloadManager)dms[i];
try {
int maxul=dm.getStats().getUploadRateLimitBytesPerSecond();
if (maxul == 0) {
upSpeedUnlimited=true;
}
 else {
if (maxul > upSpeedSetMax) {
upSpeedSetMax=maxul;
}
}
if (maxul == -1) {
maxul=0;
upSpeedDisabled=true;
}
totalUpSpeed+=maxul;
int maxdl=dm.getStats().getDownloadRateLimitBytesPerSecond();
if (maxdl == 0) {
downSpeedUnlimited=true;
}
 else {
if (maxdl > downSpeedSetMax) {
downSpeedSetMax=maxdl;
}
}
if (maxdl == -1) {
maxdl=0;
downSpeedDisabled=true;
}
totalDownSpeed+=maxdl;
}
 catch (Exception ex) {
Debug.printStackTrace(ex);
}
if (barsOpened && !DownloadBar.getManager().isOpen(dm)) {
barsOpened=false;
}
stop=stop || ManagerUtils.isStopable(dm);
start=start || ManagerUtils.isStartable(dm);
recheck=recheck || dm.canForceRecheck();
forceStartEnabled=forceStartEnabled || ManagerUtils.isForceStartable(dm);
forceStart=forceStart || dm.isForceStart();
boolean stopped=ManagerUtils.isStopped(dm);
allStopped&=stopped;
fileMove=fileMove && dm.canMoveDataFiles();
if (userMode < 2) {
TRTrackerAnnouncer trackerClient=dm.getTrackerClient();
if (trackerClient != null) {
boolean update_state=((SystemTime.getCurrentTime() / 1000 - trackerClient.getLastUpdateTime() >= TRTrackerAnnouncer.REFRESH_MINIMUM_SECS));
manualUpdate=manualUpdate & update_state;
}
}
int state=dm.getState();
bChangeDir&=(state == DownloadManager.STATE_ERROR || state == DownloadManager.STATE_STOPPED || state == DownloadManager.STATE_QUEUED);
if (bChangeDir && dms.length == 1) {
bChangeDir=dm.isDataAlreadyAllocated();
if (bChangeDir && state == DownloadManager.STATE_ERROR) {
bChangeDir=!dm.filesExist(true);
}
 else {
bChangeDir=false;
}
}
DownloadManagerState dm_state=dm.getDownloadState();
boolean scan=dm_state.getFlag(DownloadManagerState.FLAG_SCAN_INCOMPLETE_PIECES);
boolean incomplete=!dm.isDownloadComplete(true);
allScanSelected=incomplete && allScanSelected && scan;
allScanNotSelected=incomplete && allScanNotSelected && !scan;
PEPeerManager pm=dm.getPeerManager();
if (pm != null) {
if (pm.canToggleSuperSeedMode()) {
canSetSuperSeed=true;
}
if (pm.isSuperSeedMode()) {
superSeedAllYes=false;
}
 else {
superSeedAllNo=false;
}
}
 else {
superSeedAllYes=false;
superSeedAllNo=false;
}
if (dm_state.isResumeDataComplete()) {
allResumeIncomplete=false;
}
if (stopped && !hasClearableLinks) {
if (dm.getDiskManagerFileInfoSet().nbFiles() > 1) {
if (dm_state.getFileLinks().hasLinks()) {
hasClearableLinks=true;
}
}
}
if (dm_state.getFileLinks().size() > 0) {
hasRevertableFiles=true;
}
}
fileRescan=allScanSelected || allScanNotSelected;
}
 else {
barsOpened=false;
forceStart=false;
forceStartEnabled=false;
start=false;
stop=false;
fileMove=false;
fileRescan=false;
upSpeedDisabled=true;
downSpeedDisabled=true;
changeUrl=false;
recheck=false;
manualUpdate=false;
}
if (bChangeDir) {
MenuItem menuItemChangeDir=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(menuItemChangeDir,""String_Node_Str"");
menuItemChangeDir.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event e){
changeDirSelectedTorrents(dms,shell);
}
}
);
}
if (include_show_details) {
final MenuItem itemDetails=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemDetails,""String_Node_Str"");
menu.setDefaultItem(itemDetails);
Utils.setMenuItemImage(itemDetails,""String_Node_Str"");
itemDetails.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
UIFunctions uiFunctions=UIFunctionsManager.getUIFunctions();
if (uiFunctions != null) {
uiFunctions.getMDI().showEntryByID(MultipleDocumentInterface.SIDEBAR_SECTION_TORRENT_DETAILS,dm);
}
}
}
);
itemDetails.setEnabled(hasSelection);
}
final MenuItem itemBar=new MenuItem(menu,SWT.CHECK);
Messages.setLanguageText(itemBar,""String_Node_Str"");
Utils.setMenuItemImage(itemBar,""String_Node_Str"");
itemBar.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (DownloadBar.getManager().isOpen(dm)) {
DownloadBar.close(dm);
}
 else {
DownloadBar.open(dm,menu.getShell());
}
}
}
);
itemBar.setEnabled(hasSelection);
itemBar.setSelection(barsOpened);
new MenuItem(menu,SWT.SEPARATOR);
final MenuItem itemOpen=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemOpen,""String_Node_Str"");
Utils.setMenuItemImage(itemOpen,""String_Node_Str"");
itemOpen.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
runDataSources(dms);
}
}
);
itemOpen.setEnabled(hasSelection);
final boolean use_open_containing_folder=COConfigurationManager.getBooleanParameter(""String_Node_Str"");
final MenuItem itemExplore=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemExplore,""String_Node_Str"" + (use_open_containing_folder ? ""String_Node_Str"" : ""String_Node_Str""));
itemExplore.addListener(SWT.Selection,new ListenerDMTask(dms,false){
@Override public void run(DownloadManager dm){
ManagerUtils.open(dm,use_open_containing_folder);
}
}
);
itemExplore.setEnabled(hasSelection);
final Menu menuBrowse=new Menu(menu.getShell(),SWT.DROP_DOWN);
final MenuItem itemBrowse=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemBrowse,""String_Node_Str"");
itemBrowse.setMenu(menuBrowse);
final MenuItem itemBrowsePublic=new MenuItem(menuBrowse,SWT.PUSH);
itemBrowsePublic.setText(MessageText.getString(""String_Node_Str"") + ""String_Node_Str"");
itemBrowsePublic.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
ManagerUtils.browse(dm,false,true);
}
}
);
final MenuItem itemBrowseAnon=new MenuItem(menuBrowse,SWT.PUSH);
itemBrowseAnon.setText(MessageText.getString(""String_Node_Str"") + ""String_Node_Str"");
itemBrowseAnon.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
ManagerUtils.browse(dm,true,true);
}
}
);
new MenuItem(menuBrowse,SWT.SEPARATOR);
final MenuItem itemBrowseURL=new MenuItem(menuBrowse,SWT.PUSH);
Messages.setLanguageText(itemBrowseURL,""String_Node_Str"");
itemBrowseURL.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
String url=ManagerUtils.browse(dms[0],true,false);
if (url != null) {
ClipboardCopy.copyToClipBoard(url);
}
}
}
);
}
}
);
itemBrowseURL.setEnabled(isSingleSelection);
new MenuItem(menuBrowse,SWT.SEPARATOR);
final MenuItem itemBrowseDir=new MenuItem(menuBrowse,SWT.CHECK);
Messages.setLanguageText(itemBrowseDir,""String_Node_Str"");
itemBrowseDir.setSelection(COConfigurationManager.getBooleanParameter(""String_Node_Str""));
itemBrowseDir.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
COConfigurationManager.setParameter(""String_Node_Str"",itemBrowseDir.getSelection());
}
}
);
itemBrowse.setEnabled(hasSelection);
final MenuItem itemAdvanced=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemAdvanced,""String_Node_Str"");
itemAdvanced.setEnabled(hasSelection);
final Menu menuAdvanced=new Menu(menu.getShell(),SWT.DROP_DOWN);
itemAdvanced.setMenu(menuAdvanced);
long kInB=DisplayFormatters.getKinB();
long maxDownload=COConfigurationManager.getIntParameter(""String_Node_Str"",0) * kInB;
long maxUpload=COConfigurationManager.getIntParameter(""String_Node_Str"",0) * kInB;
ViewUtils.addSpeedMenu(menu.getShell(),menuAdvanced,true,true,true,hasSelection,downSpeedDisabled,downSpeedUnlimited,totalDownSpeed,downSpeedSetMax,maxDownload,upSpeedDisabled,upSpeedUnlimited,totalUpSpeed,upSpeedSetMax,maxUpload,dms.length,null,new ViewUtils.SpeedAdapter(){
@Override public void setDownSpeed(final int speed){
ListenerDMTask task=new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getStats().setDownloadRateLimitBytesPerSecond(speed);
}
}
;
task.go();
}
@Override public void setUpSpeed(final int speed){
ListenerDMTask task=new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getStats().setUploadRateLimitBytesPerSecond(speed);
}
}
;
task.go();
}
}
);
final Menu speedLimitsMenu=new Menu(menuAdvanced.getShell(),SWT.DROP_DOWN);
final MenuItem speedLimitsMenuItem=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(speedLimitsMenuItem,IMenuConstants.MENU_ID_SPEED_LIMITS);
speedLimitsMenuItem.setMenu(speedLimitsMenu);
MenuBuildUtils.addMaintenanceListenerForMenu(speedLimitsMenu,new MenuBuildUtils.MenuBuilder(){
@Override public void buildMenu(Menu menu,MenuEvent menuEvent){
addSpeedLimitsMenu(dms,speedLimitsMenu);
}
}
);
final Menu menuTracker=new Menu(menu.getShell(),SWT.DROP_DOWN);
final MenuItem itemTracker=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemTracker,""String_Node_Str"");
itemTracker.setMenu(menuTracker);
itemExplore.setEnabled(hasSelection);
addTrackerTorrentMenu(menuTracker,dms,changeUrl,manualUpdate,allStopped,use_open_containing_folder);
final MenuItem itemFiles=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemFiles,""String_Node_Str"");
final Menu menuFiles=new Menu(shell,SWT.DROP_DOWN);
itemFiles.setMenu(menuFiles);
final MenuItem itemFileMoveData=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileMoveData,""String_Node_Str"");
itemFileMoveData.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
moveDataFiles(shell,dms);
}
}
);
itemFileMoveData.setEnabled(fileMove);
final MenuItem itemFileMoveTorrent=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileMoveTorrent,""String_Node_Str"");
itemFileMoveTorrent.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
moveTorrentFile(shell,dms);
}
}
);
itemFileMoveTorrent.setEnabled(fileMove);
final MenuItem itemCheckFilesExist=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemCheckFilesExist,""String_Node_Str"");
itemCheckFilesExist.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.filesExist(true);
}
}
);
final MenuItem itemLocateFiles=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemLocateFiles,""String_Node_Str"");
itemLocateFiles.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
ManagerUtils.locateFiles(dms,menu.getShell());
}
}
);
final MenuItem itemFileRescan=new MenuItem(menuFiles,SWT.CHECK);
Messages.setLanguageText(itemFileRescan,""String_Node_Str"");
itemFileRescan.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().setFlag(DownloadManagerState.FLAG_SCAN_INCOMPLETE_PIECES,itemFileRescan.getSelection());
}
}
);
itemFileRescan.setSelection(allScanSelected);
itemFileRescan.setEnabled(fileRescan);
final MenuItem itemRevertFiles=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemRevertFiles,""String_Node_Str"");
itemRevertFiles.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
FilesViewMenuUtil.revertFiles(tv,dms);
}
}
);
itemRevertFiles.setEnabled(hasRevertableFiles);
final MenuItem itemClearLinks=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemClearLinks,""String_Node_Str"");
itemClearLinks.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (ManagerUtils.isStopped(dm) && dm.getDownloadState().getFileLinks().hasLinks()) {
DiskManagerFileInfoSet fis=dm.getDiskManagerFileInfoSet();
if (fis.nbFiles() > 1) {
DiskManagerFileInfo[] files=fis.getFiles();
for (DiskManagerFileInfo file_info : files) {
File file_link=file_info.getFile(true);
File file_nolink=file_info.getFile(false);
if (!file_nolink.getAbsolutePath().equals(file_link.getAbsolutePath())) {
  file_info.setLink(null);
}
}
}
}
}
}
);
itemClearLinks.setEnabled(hasClearableLinks);
MenuItem itemFileClearAlloc=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileClearAlloc,""String_Node_Str"");
itemFileClearAlloc.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.setDataAlreadyAllocated(false);
}
}
);
itemFileClearAlloc.setEnabled(allStopped);
MenuItem itemFileClearResume=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileClearResume,""String_Node_Str"");
itemFileClearResume.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().clearResumeData();
}
}
);
itemFileClearResume.setEnabled(allStopped);
MenuItem itemFileSetResumeComplete=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileSetResumeComplete,""String_Node_Str"");
itemFileSetResumeComplete.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
TorrentUtils.setResumeDataCompletelyValid(dm.getDownloadState());
}
}
);
itemFileSetResumeComplete.setEnabled(allStopped && allResumeIncomplete);
final List<Download> ar_dms=new ArrayList<>();
for (DownloadManager dm : dms) {
Download stub=PluginCoreUtils.wrap(dm);
if (!stub.canStubbify()) {
continue;
}
ar_dms.add(stub);
}
MenuItem itemArchive=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemArchive,""String_Node_Str"");
Utils.setMenuItemImage(itemArchive,""String_Node_Str"");
itemArchive.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
ManagerUtils.moveToArchive(ar_dms,null);
}
}
);
itemArchive.setEnabled(ar_dms.size() > 0);
final MenuItem itemRename=new MenuItem(menuAdvanced,SWT.DROP_DOWN);
Messages.setLanguageText(itemRename,""String_Node_Str"");
itemRename.setEnabled(hasSelection);
itemRename.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
for (DownloadManager dm : dms) {
AdvRenameWindow window=new AdvRenameWindow();
window.open(dm);
}
}
}
);
if (ManagerUtils.canFindMoreLikeThis()) {
final MenuItem itemFindMore=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemFindMore,""String_Node_Str"");
itemFindMore.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
ManagerUtils.findMoreLikeThis(dms[0],menu.getShell());
}
}
);
itemFindMore.setSelection(isSingleSelection);
}
final Menu quickViewMenu=new Menu(menuAdvanced.getShell(),SWT.DROP_DOWN);
final MenuItem quickViewMenuItem=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(quickViewMenuItem,IMenuConstants.MENU_ID_QUICK_VIEW);
quickViewMenuItem.setMenu(quickViewMenu);
MenuBuildUtils.addMaintenanceListenerForMenu(quickViewMenu,new MenuBuildUtils.MenuBuilder(){
@Override public void buildMenu(Menu menu,MenuEvent menuEvent){
DownloadManager dm=dms[0];
DiskManagerFileInfo[] files=dm.getDiskManagerFileInfoSet().getFiles();
int added=0;
for (final DiskManagerFileInfo file : files) {
if (Utils.isQuickViewSupported(file)) {
final MenuItem addItem=new MenuItem(menu,SWT.CHECK);
addItem.setSelection(Utils.isQuickViewActive(file));
addItem.setText(file.getTorrentFile().getRelativePath());
addItem.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event arg){
  Utils.setQuickViewActive(file,addItem.getSelection());
}
}
);
added++;
}
}
if (added == 0) {
final MenuItem addItem=new MenuItem(menu,SWT.PUSH);
addItem.setText(MessageText.getString(""String_Node_Str""));
addItem.setEnabled(false);
}
}
}
);
quickViewMenuItem.setEnabled(isSingleSelection);
MenuFactory.addAlertsMenu(menuAdvanced,true,dms);
if (userMode > 0) {
final MenuItem itemExport=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemExport,""String_Node_Str"");
Utils.setMenuItemImage(itemExport,""String_Node_Str"");
itemExport.setEnabled(hasSelection);
final Menu menuExport=new Menu(shell,SWT.DROP_DOWN);
itemExport.setMenu(menuExport);
final MenuItem itemExportXML=new MenuItem(menuExport,SWT.PUSH);
Messages.setLanguageText(itemExportXML,""String_Node_Str"");
itemExportXML.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
DownloadManager dm=dms[0];
if (dm != null) new ExportTorrentWizard(itemExportXML.getDisplay(),dm);
}
}
);
final MenuItem itemExportTorrent=new MenuItem(menuExport,SWT.PUSH);
Messages.setLanguageText(itemExportTorrent,""String_Node_Str"");
itemExportTorrent.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
exportTorrent(dms,shell);
}
}
);
final MenuItem itemWebSeed=new MenuItem(menuExport,SWT.PUSH);
Messages.setLanguageText(itemWebSeed,""String_Node_Str"");
itemWebSeed.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
exportHTTPSeeds(dms);
}
}
);
}
if (userMode > 0) {
final MenuItem itemExportXML=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemExportXML,""String_Node_Str"");
itemExportXML.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
UIFunctions uiFunctions=UIFunctionsManager.getUIFunctions();
if (uiFunctions != null) {
uiFunctions.getMDI().showEntryByID(MultipleDocumentInterface.SIDEBAR_SECTION_TORRENT_OPTIONS,dms);
}
}
}
);
}
if (userMode > 0) {
final MenuItem itemPeerSource=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemPeerSource,""String_Node_Str"");
final Menu menuPeerSource=new Menu(shell,SWT.DROP_DOWN);
itemPeerSource.setMenu(menuPeerSource);
addPeerSourceSubMenu(dms,menuPeerSource);
}
{
final MenuItem dl_seq_enable=new MenuItem(menuAdvanced,SWT.CHECK);
Messages.setLanguageText(dl_seq_enable,""String_Node_Str"");
dl_seq_enable.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().setFlag(DownloadManagerState.FLAG_SEQUENTIAL_DOWNLOAD,dl_seq_enable.getSelection());
}
}
);
boolean allSeq=true;
boolean AllNonSeq=true;
for (int j=0; j < dms.length; j++) {
DownloadManager dm=dms[j];
boolean seq=dm.getDownloadState().getFlag(DownloadManagerState.FLAG_SEQUENTIAL_DOWNLOAD);
if (seq) {
AllNonSeq=false;
}
 else {
allSeq=false;
}
}
boolean bChecked;
if (allSeq) {
bChecked=true;
}
 else if (AllNonSeq) {
bChecked=false;
}
 else {
bChecked=false;
}
dl_seq_enable.setSelection(bChecked);
}
if (userMode > 0) {
final MenuItem ipf_enable=new MenuItem(menuAdvanced,SWT.CHECK);
Messages.setLanguageText(ipf_enable,""String_Node_Str"");
ipf_enable.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().setFlag(DownloadManagerState.FLAG_DISABLE_IP_FILTER,!ipf_enable.getSelection());
}
}
);
boolean bEnabled=IpFilterManagerFactory.getSingleton().getIPFilter().isEnabled();
if (bEnabled) {
boolean allChecked=true;
boolean allUnchecked=true;
for (int j=0; j < dms.length; j++) {
DownloadManager dm=(DownloadManager)dms[j];
boolean b=dm.getDownloadState().getFlag(DownloadManagerState.FLAG_DISABLE_IP_FILTER);
if (b) {
allUnchecked=false;
}
 else {
allChecked=false;
}
}
boolean bChecked;
if (allUnchecked) {
bChecked=true;
}
 else if (allChecked) {
bChecked=false;
}
 else {
bChecked=false;
}
ipf_enable.setSelection(bChecked);
}
ipf_enable.setEnabled(bEnabled);
}
if (userMode > 1) {
final MenuItem itemNetworks=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemNetworks,""String_Node_Str"");
final Menu menuNetworks=new Menu(shell,SWT.DROP_DOWN);
itemNetworks.setMenu(menuNetworks);
addNetworksSubMenu(dms,menuNetworks);
}
if (userMode > 1 && isSeedingView) {
final MenuItem itemSuperSeed=new MenuItem(menuAdvanced,SWT.CHECK);
Messages.setLanguageText(itemSuperSeed,""String_Node_Str"");
boolean enabled=canSetSuperSeed && (superSeedAllNo || superSeedAllYes);
itemSuperSeed.setEnabled(enabled);
final boolean selected=superSeedAllNo;
if (enabled) {
itemSuperSeed.setSelection(selected);
itemSuperSeed.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
PEPeerManager pm=dm.getPeerManager();
if (pm != null) {
if (pm.isSuperSeedMode() == selected && pm.canToggleSuperSeedMode()) {
  pm.setSuperSeedMode(!selected);
}
}
}
}
);
}
}
if (userMode > 0) {
boolean can_pause=false;
for (int i=0; i < dms.length; i++) {
DownloadManager dm=dms[i];
if (ManagerUtils.isPauseable(dm)) {
can_pause=true;
break;
}
}
final MenuItem itemPauseFor=new MenuItem(menuAdvanced,SWT.PUSH);
itemPauseFor.setEnabled(can_pause);
Messages.setLanguageText(itemPauseFor,""String_Node_Str"");
itemPauseFor.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
pauseDownloadsFor(dms);
}
}
);
}
final MenuItem itemPositionManual=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemPositionManual,""String_Node_Str"");
Utils.setMenuItemImage(itemPositionManual,""String_Node_Str"");
itemPositionManual.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
repositionManual(tv,dms,shell,isSeedingView);
}
}
);
if (userMode > 0 && isTrackerOn) {
final MenuItem itemHost=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemHost,""String_Node_Str"");
Utils.setMenuItemImage(itemHost,""String_Node_Str"");
itemHost.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
hostTorrents(dms);
}
}
);
final MenuItem itemPublish=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemPublish,""String_Node_Str"");
Utils.setMenuItemImage(itemPublish,""String_Node_Str"");
itemPublish.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
publishTorrents(dms);
}
}
);
itemHost.setEnabled(hasSelection);
itemPublish.setEnabled(hasSelection);
}
Menu menuCategory=new Menu(shell,SWT.DROP_DOWN);
final MenuItem itemCategory=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemCategory,""String_Node_Str"");
itemCategory.setMenu(menuCategory);
itemCategory.setEnabled(hasSelection);
addCategorySubMenu(dms,menuCategory);
Menu menuTags=new Menu(shell,SWT.DROP_DOWN);
final MenuItem itemTags=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemTags,""String_Node_Str"");
itemTags.setMenu(menuTags);
itemTags.setEnabled(hasSelection);
TagUIUtils.addLibraryViewTagsSubMenu(dms,menuTags);
if (isSeedingView) {
final MenuItem itemPersonalShare=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemPersonalShare,""String_Node_Str"");
itemPersonalShare.addListener(SWT.Selection,new ListenerDMTask(dms,false){
@Override public void run(DownloadManager dm){
File file=dm.getSaveLocation();
Map<String,String> properties=new HashMap<>();
properties.put(ShareManager.PR_PERSONAL,""String_Node_Str"");
if (file.isFile()) {
ShareUtils.shareFile(file.getAbsolutePath(),properties);
}
 else if (file.isDirectory()) {
ShareUtils.shareDir(file.getAbsolutePath(),properties);
}
}
}
);
}
new MenuItem(menu,SWT.SEPARATOR);
final MenuItem itemQueue=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemQueue,""String_Node_Str"");
Utils.setMenuItemImage(itemQueue,""String_Node_Str"");
itemQueue.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
queueDataSources(dms,true);
}
}
);
}
}
);
itemQueue.setEnabled(start);
if (userMode > 0) {
final MenuItem itemForceStart=new MenuItem(menu,SWT.CHECK);
Messages.setLanguageText(itemForceStart,""String_Node_Str"");
Utils.setMenuItemImage(itemForceStart,""String_Node_Str"");
itemForceStart.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (ManagerUtils.isForceStartable(dm)) {
dm.setForceStart(itemForceStart.getSelection());
}
}
}
);
itemForceStart.setSelection(forceStart);
itemForceStart.setEnabled(forceStartEnabled);
}
if (userMode > 0) {
final MenuItem itemPause=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemPause,""String_Node_Str"");
Utils.setMenuItemImage(itemPause,""String_Node_Str"");
itemPause.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
pauseDataSources(dms);
}
}
);
}
}
);
itemPause.setEnabled(stop);
}
final MenuItem itemStop=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemStop,""String_Node_Str"");
Utils.setMenuItemImage(itemStop,""String_Node_Str"");
itemStop.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
stopDataSources(dms);
}
}
);
}
}
);
itemStop.setEnabled(stop);
final MenuItem itemRecheck=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemRecheck,""String_Node_Str"");
Utils.setMenuItemImage(itemRecheck,""String_Node_Str"");
itemRecheck.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (dm.canForceRecheck()) {
dm.forceRecheck();
}
}
}
);
itemRecheck.setEnabled(recheck);
final MenuItem itemRemove=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemRemove,""String_Node_Str"");
Utils.setMenuItemImage(itemRemove,""String_Node_Str"");
itemRemove.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
removeDownloads(dms,null,true);
}
}
);
itemRemove.setEnabled(hasSelection);
}","public static void fillTorrentMenu(final Menu menu,final DownloadManager[] dms,final Core core,boolean include_show_details,int selected_dl_types,final TableView tv){
  Shell shell=Utils.findAnyShell();
  Shell menu_shell=menu.getShell();
  final boolean isSeedingView;
switch (selected_dl_types) {
case 1:
    isSeedingView=false;
  break;
case 2:
isSeedingView=true;
break;
case 0:
{
if (dms.length == 1) {
isSeedingView=dms[0].isDownloadComplete(false);
break;
}
}
default :
isSeedingView=false;
}
boolean hasSelection=dms.length > 0;
boolean isSingleSelection=dms.length == 1;
boolean isTrackerOn=TRTrackerUtils.isTrackerEnabled();
int userMode=COConfigurationManager.getIntParameter(""String_Node_Str"");
boolean bChangeDir=hasSelection;
boolean start, stop, changeUrl, barsOpened, forceStart;
boolean forceStartEnabled, recheck, manualUpdate, fileMove, fileRescan;
changeUrl=barsOpened=manualUpdate=fileMove=fileRescan=true;
forceStart=forceStartEnabled=recheck=start=stop=false;
boolean canSetSuperSeed=false;
boolean superSeedAllYes=true;
boolean superSeedAllNo=true;
boolean upSpeedDisabled=false;
long totalUpSpeed=0;
boolean upSpeedUnlimited=false;
long upSpeedSetMax=0;
boolean downSpeedDisabled=false;
long totalDownSpeed=0;
boolean downSpeedUnlimited=false;
long downSpeedSetMax=0;
boolean allScanSelected=true;
boolean allScanNotSelected=true;
boolean allStopped=true;
boolean allResumeIncomplete=true;
boolean hasClearableLinks=false;
boolean hasRevertableFiles=false;
if (hasSelection) {
for (int i=0; i < dms.length; i++) {
DownloadManager dm=(DownloadManager)dms[i];
try {
int maxul=dm.getStats().getUploadRateLimitBytesPerSecond();
if (maxul == 0) {
upSpeedUnlimited=true;
}
 else {
if (maxul > upSpeedSetMax) {
upSpeedSetMax=maxul;
}
}
if (maxul == -1) {
maxul=0;
upSpeedDisabled=true;
}
totalUpSpeed+=maxul;
int maxdl=dm.getStats().getDownloadRateLimitBytesPerSecond();
if (maxdl == 0) {
downSpeedUnlimited=true;
}
 else {
if (maxdl > downSpeedSetMax) {
downSpeedSetMax=maxdl;
}
}
if (maxdl == -1) {
maxdl=0;
downSpeedDisabled=true;
}
totalDownSpeed+=maxdl;
}
 catch (Exception ex) {
Debug.printStackTrace(ex);
}
if (barsOpened && !DownloadBar.getManager().isOpen(dm)) {
barsOpened=false;
}
stop=stop || ManagerUtils.isStopable(dm);
start=start || ManagerUtils.isStartable(dm);
recheck=recheck || dm.canForceRecheck();
forceStartEnabled=forceStartEnabled || ManagerUtils.isForceStartable(dm);
forceStart=forceStart || dm.isForceStart();
boolean stopped=ManagerUtils.isStopped(dm);
allStopped&=stopped;
fileMove=fileMove && dm.canMoveDataFiles();
if (userMode < 2) {
TRTrackerAnnouncer trackerClient=dm.getTrackerClient();
if (trackerClient != null) {
boolean update_state=((SystemTime.getCurrentTime() / 1000 - trackerClient.getLastUpdateTime() >= TRTrackerAnnouncer.REFRESH_MINIMUM_SECS));
manualUpdate=manualUpdate & update_state;
}
}
int state=dm.getState();
bChangeDir&=(state == DownloadManager.STATE_ERROR || state == DownloadManager.STATE_STOPPED || state == DownloadManager.STATE_QUEUED);
if (bChangeDir && dms.length == 1) {
bChangeDir=dm.isDataAlreadyAllocated();
if (bChangeDir && state == DownloadManager.STATE_ERROR) {
bChangeDir=!dm.filesExist(true);
}
 else {
bChangeDir=false;
}
}
DownloadManagerState dm_state=dm.getDownloadState();
boolean scan=dm_state.getFlag(DownloadManagerState.FLAG_SCAN_INCOMPLETE_PIECES);
boolean incomplete=!dm.isDownloadComplete(true);
allScanSelected=incomplete && allScanSelected && scan;
allScanNotSelected=incomplete && allScanNotSelected && !scan;
PEPeerManager pm=dm.getPeerManager();
if (pm != null) {
if (pm.canToggleSuperSeedMode()) {
canSetSuperSeed=true;
}
if (pm.isSuperSeedMode()) {
superSeedAllYes=false;
}
 else {
superSeedAllNo=false;
}
}
 else {
superSeedAllYes=false;
superSeedAllNo=false;
}
if (dm_state.isResumeDataComplete()) {
allResumeIncomplete=false;
}
if (stopped && !hasClearableLinks) {
if (dm.getDiskManagerFileInfoSet().nbFiles() > 1) {
if (dm_state.getFileLinks().hasLinks()) {
hasClearableLinks=true;
}
}
}
if (dm_state.getFileLinks().size() > 0) {
hasRevertableFiles=true;
}
}
fileRescan=allScanSelected || allScanNotSelected;
}
 else {
barsOpened=false;
forceStart=false;
forceStartEnabled=false;
start=false;
stop=false;
fileMove=false;
fileRescan=false;
upSpeedDisabled=true;
downSpeedDisabled=true;
changeUrl=false;
recheck=false;
manualUpdate=false;
}
if (bChangeDir) {
MenuItem menuItemChangeDir=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(menuItemChangeDir,""String_Node_Str"");
menuItemChangeDir.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event e){
changeDirSelectedTorrents(dms,shell);
}
}
);
}
if (include_show_details) {
final MenuItem itemDetails=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemDetails,""String_Node_Str"");
menu.setDefaultItem(itemDetails);
Utils.setMenuItemImage(itemDetails,""String_Node_Str"");
itemDetails.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
UIFunctions uiFunctions=UIFunctionsManager.getUIFunctions();
if (uiFunctions != null) {
uiFunctions.getMDI().showEntryByID(MultipleDocumentInterface.SIDEBAR_SECTION_TORRENT_DETAILS,dm);
}
}
}
);
itemDetails.setEnabled(hasSelection);
}
final MenuItem itemBar=new MenuItem(menu,SWT.CHECK);
Messages.setLanguageText(itemBar,""String_Node_Str"");
Utils.setMenuItemImage(itemBar,""String_Node_Str"");
itemBar.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (DownloadBar.getManager().isOpen(dm)) {
DownloadBar.close(dm);
}
 else {
DownloadBar.open(dm,shell);
}
}
}
);
itemBar.setEnabled(hasSelection);
itemBar.setSelection(barsOpened);
new MenuItem(menu,SWT.SEPARATOR);
final MenuItem itemOpen=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemOpen,""String_Node_Str"");
Utils.setMenuItemImage(itemOpen,""String_Node_Str"");
itemOpen.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
runDataSources(dms);
}
}
);
itemOpen.setEnabled(hasSelection);
final boolean use_open_containing_folder=COConfigurationManager.getBooleanParameter(""String_Node_Str"");
final MenuItem itemExplore=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemExplore,""String_Node_Str"" + (use_open_containing_folder ? ""String_Node_Str"" : ""String_Node_Str""));
itemExplore.addListener(SWT.Selection,new ListenerDMTask(dms,false){
@Override public void run(DownloadManager dm){
ManagerUtils.open(dm,use_open_containing_folder);
}
}
);
itemExplore.setEnabled(hasSelection);
final Menu menuBrowse=new Menu(menu_shell,SWT.DROP_DOWN);
final MenuItem itemBrowse=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemBrowse,""String_Node_Str"");
itemBrowse.setMenu(menuBrowse);
final MenuItem itemBrowsePublic=new MenuItem(menuBrowse,SWT.PUSH);
itemBrowsePublic.setText(MessageText.getString(""String_Node_Str"") + ""String_Node_Str"");
itemBrowsePublic.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
ManagerUtils.browse(dm,false,true);
}
}
);
final MenuItem itemBrowseAnon=new MenuItem(menuBrowse,SWT.PUSH);
itemBrowseAnon.setText(MessageText.getString(""String_Node_Str"") + ""String_Node_Str"");
itemBrowseAnon.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
ManagerUtils.browse(dm,true,true);
}
}
);
new MenuItem(menuBrowse,SWT.SEPARATOR);
final MenuItem itemBrowseURL=new MenuItem(menuBrowse,SWT.PUSH);
Messages.setLanguageText(itemBrowseURL,""String_Node_Str"");
itemBrowseURL.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
String url=ManagerUtils.browse(dms[0],true,false);
if (url != null) {
ClipboardCopy.copyToClipBoard(url);
}
}
}
);
}
}
);
itemBrowseURL.setEnabled(isSingleSelection);
new MenuItem(menuBrowse,SWT.SEPARATOR);
final MenuItem itemBrowseDir=new MenuItem(menuBrowse,SWT.CHECK);
Messages.setLanguageText(itemBrowseDir,""String_Node_Str"");
itemBrowseDir.setSelection(COConfigurationManager.getBooleanParameter(""String_Node_Str""));
itemBrowseDir.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
COConfigurationManager.setParameter(""String_Node_Str"",itemBrowseDir.getSelection());
}
}
);
itemBrowse.setEnabled(hasSelection);
final MenuItem itemAdvanced=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemAdvanced,""String_Node_Str"");
itemAdvanced.setEnabled(hasSelection);
final Menu menuAdvanced=new Menu(menu_shell,SWT.DROP_DOWN);
itemAdvanced.setMenu(menuAdvanced);
long kInB=DisplayFormatters.getKinB();
long maxDownload=COConfigurationManager.getIntParameter(""String_Node_Str"",0) * kInB;
long maxUpload=COConfigurationManager.getIntParameter(""String_Node_Str"",0) * kInB;
ViewUtils.addSpeedMenu(menu_shell,menuAdvanced,true,true,true,hasSelection,downSpeedDisabled,downSpeedUnlimited,totalDownSpeed,downSpeedSetMax,maxDownload,upSpeedDisabled,upSpeedUnlimited,totalUpSpeed,upSpeedSetMax,maxUpload,dms.length,null,new ViewUtils.SpeedAdapter(){
@Override public void setDownSpeed(final int speed){
ListenerDMTask task=new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getStats().setDownloadRateLimitBytesPerSecond(speed);
}
}
;
task.go();
}
@Override public void setUpSpeed(final int speed){
ListenerDMTask task=new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getStats().setUploadRateLimitBytesPerSecond(speed);
}
}
;
task.go();
}
}
);
final Menu speedLimitsMenu=new Menu(menuAdvanced.getShell(),SWT.DROP_DOWN);
final MenuItem speedLimitsMenuItem=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(speedLimitsMenuItem,IMenuConstants.MENU_ID_SPEED_LIMITS);
speedLimitsMenuItem.setMenu(speedLimitsMenu);
MenuBuildUtils.addMaintenanceListenerForMenu(speedLimitsMenu,new MenuBuildUtils.MenuBuilder(){
@Override public void buildMenu(Menu menu,MenuEvent menuEvent){
addSpeedLimitsMenu(dms,speedLimitsMenu);
}
}
);
final Menu menuTracker=new Menu(menu_shell,SWT.DROP_DOWN);
final MenuItem itemTracker=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemTracker,""String_Node_Str"");
itemTracker.setMenu(menuTracker);
itemExplore.setEnabled(hasSelection);
addTrackerTorrentMenu(menuTracker,dms,changeUrl,manualUpdate,allStopped,use_open_containing_folder);
final MenuItem itemFiles=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemFiles,""String_Node_Str"");
final Menu menuFiles=new Menu(menu_shell,SWT.DROP_DOWN);
itemFiles.setMenu(menuFiles);
final MenuItem itemFileMoveData=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileMoveData,""String_Node_Str"");
itemFileMoveData.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
moveDataFiles(shell,dms);
}
}
);
itemFileMoveData.setEnabled(fileMove);
final MenuItem itemFileMoveTorrent=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileMoveTorrent,""String_Node_Str"");
itemFileMoveTorrent.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
moveTorrentFile(shell,dms);
}
}
);
itemFileMoveTorrent.setEnabled(fileMove);
final MenuItem itemCheckFilesExist=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemCheckFilesExist,""String_Node_Str"");
itemCheckFilesExist.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.filesExist(true);
}
}
);
final MenuItem itemLocateFiles=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemLocateFiles,""String_Node_Str"");
itemLocateFiles.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
ManagerUtils.locateFiles(dms,shell);
}
}
);
final MenuItem itemFileRescan=new MenuItem(menuFiles,SWT.CHECK);
Messages.setLanguageText(itemFileRescan,""String_Node_Str"");
itemFileRescan.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().setFlag(DownloadManagerState.FLAG_SCAN_INCOMPLETE_PIECES,itemFileRescan.getSelection());
}
}
);
itemFileRescan.setSelection(allScanSelected);
itemFileRescan.setEnabled(fileRescan);
final MenuItem itemRevertFiles=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemRevertFiles,""String_Node_Str"");
itemRevertFiles.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
FilesViewMenuUtil.revertFiles(tv,dms);
}
}
);
itemRevertFiles.setEnabled(hasRevertableFiles);
final MenuItem itemClearLinks=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemClearLinks,""String_Node_Str"");
itemClearLinks.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (ManagerUtils.isStopped(dm) && dm.getDownloadState().getFileLinks().hasLinks()) {
DiskManagerFileInfoSet fis=dm.getDiskManagerFileInfoSet();
if (fis.nbFiles() > 1) {
DiskManagerFileInfo[] files=fis.getFiles();
for (DiskManagerFileInfo file_info : files) {
File file_link=file_info.getFile(true);
File file_nolink=file_info.getFile(false);
if (!file_nolink.getAbsolutePath().equals(file_link.getAbsolutePath())) {
  file_info.setLink(null);
}
}
}
}
}
}
);
itemClearLinks.setEnabled(hasClearableLinks);
MenuItem itemFileClearAlloc=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileClearAlloc,""String_Node_Str"");
itemFileClearAlloc.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.setDataAlreadyAllocated(false);
}
}
);
itemFileClearAlloc.setEnabled(allStopped);
MenuItem itemFileClearResume=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileClearResume,""String_Node_Str"");
itemFileClearResume.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().clearResumeData();
}
}
);
itemFileClearResume.setEnabled(allStopped);
MenuItem itemFileSetResumeComplete=new MenuItem(menuFiles,SWT.PUSH);
Messages.setLanguageText(itemFileSetResumeComplete,""String_Node_Str"");
itemFileSetResumeComplete.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
TorrentUtils.setResumeDataCompletelyValid(dm.getDownloadState());
}
}
);
itemFileSetResumeComplete.setEnabled(allStopped && allResumeIncomplete);
final List<Download> ar_dms=new ArrayList<>();
for (DownloadManager dm : dms) {
Download stub=PluginCoreUtils.wrap(dm);
if (!stub.canStubbify()) {
continue;
}
ar_dms.add(stub);
}
MenuItem itemArchive=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemArchive,""String_Node_Str"");
Utils.setMenuItemImage(itemArchive,""String_Node_Str"");
itemArchive.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
ManagerUtils.moveToArchive(ar_dms,null);
}
}
);
itemArchive.setEnabled(ar_dms.size() > 0);
final MenuItem itemRename=new MenuItem(menuAdvanced,SWT.DROP_DOWN);
Messages.setLanguageText(itemRename,""String_Node_Str"");
itemRename.setEnabled(hasSelection);
itemRename.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
for (DownloadManager dm : dms) {
AdvRenameWindow window=new AdvRenameWindow();
window.open(dm);
}
}
}
);
if (ManagerUtils.canFindMoreLikeThis()) {
final MenuItem itemFindMore=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemFindMore,""String_Node_Str"");
itemFindMore.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
ManagerUtils.findMoreLikeThis(dms[0],shell);
}
}
);
itemFindMore.setSelection(isSingleSelection);
}
final Menu quickViewMenu=new Menu(menuAdvanced.getShell(),SWT.DROP_DOWN);
final MenuItem quickViewMenuItem=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(quickViewMenuItem,IMenuConstants.MENU_ID_QUICK_VIEW);
quickViewMenuItem.setMenu(quickViewMenu);
MenuBuildUtils.addMaintenanceListenerForMenu(quickViewMenu,new MenuBuildUtils.MenuBuilder(){
@Override public void buildMenu(Menu menu,MenuEvent menuEvent){
DownloadManager dm=dms[0];
DiskManagerFileInfo[] files=dm.getDiskManagerFileInfoSet().getFiles();
int added=0;
for (final DiskManagerFileInfo file : files) {
if (Utils.isQuickViewSupported(file)) {
final MenuItem addItem=new MenuItem(menu,SWT.CHECK);
addItem.setSelection(Utils.isQuickViewActive(file));
addItem.setText(file.getTorrentFile().getRelativePath());
addItem.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event arg){
  Utils.setQuickViewActive(file,addItem.getSelection());
}
}
);
added++;
}
}
if (added == 0) {
final MenuItem addItem=new MenuItem(menu,SWT.PUSH);
addItem.setText(MessageText.getString(""String_Node_Str""));
addItem.setEnabled(false);
}
}
}
);
quickViewMenuItem.setEnabled(isSingleSelection);
MenuFactory.addAlertsMenu(menuAdvanced,true,dms);
if (userMode > 0) {
final MenuItem itemExport=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemExport,""String_Node_Str"");
Utils.setMenuItemImage(itemExport,""String_Node_Str"");
itemExport.setEnabled(hasSelection);
final Menu menuExport=new Menu(menu_shell,SWT.DROP_DOWN);
itemExport.setMenu(menuExport);
final MenuItem itemExportXML=new MenuItem(menuExport,SWT.PUSH);
Messages.setLanguageText(itemExportXML,""String_Node_Str"");
itemExportXML.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
DownloadManager dm=dms[0];
if (dm != null) new ExportTorrentWizard(itemExportXML.getDisplay(),dm);
}
}
);
final MenuItem itemExportTorrent=new MenuItem(menuExport,SWT.PUSH);
Messages.setLanguageText(itemExportTorrent,""String_Node_Str"");
itemExportTorrent.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
exportTorrent(dms,shell);
}
}
);
final MenuItem itemWebSeed=new MenuItem(menuExport,SWT.PUSH);
Messages.setLanguageText(itemWebSeed,""String_Node_Str"");
itemWebSeed.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
exportHTTPSeeds(dms);
}
}
);
}
if (userMode > 0) {
final MenuItem itemExportXML=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemExportXML,""String_Node_Str"");
itemExportXML.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager[] dms){
UIFunctions uiFunctions=UIFunctionsManager.getUIFunctions();
if (uiFunctions != null) {
uiFunctions.getMDI().showEntryByID(MultipleDocumentInterface.SIDEBAR_SECTION_TORRENT_OPTIONS,dms);
}
}
}
);
}
if (userMode > 0) {
final MenuItem itemPeerSource=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemPeerSource,""String_Node_Str"");
final Menu menuPeerSource=new Menu(menu_shell,SWT.DROP_DOWN);
itemPeerSource.setMenu(menuPeerSource);
addPeerSourceSubMenu(dms,menuPeerSource);
}
{
final MenuItem dl_seq_enable=new MenuItem(menuAdvanced,SWT.CHECK);
Messages.setLanguageText(dl_seq_enable,""String_Node_Str"");
dl_seq_enable.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().setFlag(DownloadManagerState.FLAG_SEQUENTIAL_DOWNLOAD,dl_seq_enable.getSelection());
}
}
);
boolean allSeq=true;
boolean AllNonSeq=true;
for (int j=0; j < dms.length; j++) {
DownloadManager dm=dms[j];
boolean seq=dm.getDownloadState().getFlag(DownloadManagerState.FLAG_SEQUENTIAL_DOWNLOAD);
if (seq) {
AllNonSeq=false;
}
 else {
allSeq=false;
}
}
boolean bChecked;
if (allSeq) {
bChecked=true;
}
 else if (AllNonSeq) {
bChecked=false;
}
 else {
bChecked=false;
}
dl_seq_enable.setSelection(bChecked);
}
if (userMode > 0) {
final MenuItem ipf_enable=new MenuItem(menuAdvanced,SWT.CHECK);
Messages.setLanguageText(ipf_enable,""String_Node_Str"");
ipf_enable.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
dm.getDownloadState().setFlag(DownloadManagerState.FLAG_DISABLE_IP_FILTER,!ipf_enable.getSelection());
}
}
);
boolean bEnabled=IpFilterManagerFactory.getSingleton().getIPFilter().isEnabled();
if (bEnabled) {
boolean allChecked=true;
boolean allUnchecked=true;
for (int j=0; j < dms.length; j++) {
DownloadManager dm=(DownloadManager)dms[j];
boolean b=dm.getDownloadState().getFlag(DownloadManagerState.FLAG_DISABLE_IP_FILTER);
if (b) {
allUnchecked=false;
}
 else {
allChecked=false;
}
}
boolean bChecked;
if (allUnchecked) {
bChecked=true;
}
 else if (allChecked) {
bChecked=false;
}
 else {
bChecked=false;
}
ipf_enable.setSelection(bChecked);
}
ipf_enable.setEnabled(bEnabled);
}
if (userMode > 1) {
final MenuItem itemNetworks=new MenuItem(menuAdvanced,SWT.CASCADE);
Messages.setLanguageText(itemNetworks,""String_Node_Str"");
final Menu menuNetworks=new Menu(menu_shell,SWT.DROP_DOWN);
itemNetworks.setMenu(menuNetworks);
addNetworksSubMenu(dms,menuNetworks);
}
if (userMode > 1 && isSeedingView) {
final MenuItem itemSuperSeed=new MenuItem(menuAdvanced,SWT.CHECK);
Messages.setLanguageText(itemSuperSeed,""String_Node_Str"");
boolean enabled=canSetSuperSeed && (superSeedAllNo || superSeedAllYes);
itemSuperSeed.setEnabled(enabled);
final boolean selected=superSeedAllNo;
if (enabled) {
itemSuperSeed.setSelection(selected);
itemSuperSeed.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
PEPeerManager pm=dm.getPeerManager();
if (pm != null) {
if (pm.isSuperSeedMode() == selected && pm.canToggleSuperSeedMode()) {
  pm.setSuperSeedMode(!selected);
}
}
}
}
);
}
}
if (userMode > 0) {
boolean can_pause=false;
for (int i=0; i < dms.length; i++) {
DownloadManager dm=dms[i];
if (ManagerUtils.isPauseable(dm)) {
can_pause=true;
break;
}
}
final MenuItem itemPauseFor=new MenuItem(menuAdvanced,SWT.PUSH);
itemPauseFor.setEnabled(can_pause);
Messages.setLanguageText(itemPauseFor,""String_Node_Str"");
itemPauseFor.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
pauseDownloadsFor(dms);
}
}
);
}
final MenuItem itemPositionManual=new MenuItem(menuAdvanced,SWT.PUSH);
Messages.setLanguageText(itemPositionManual,""String_Node_Str"");
Utils.setMenuItemImage(itemPositionManual,""String_Node_Str"");
itemPositionManual.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
repositionManual(tv,dms,shell,isSeedingView);
}
}
);
if (userMode > 0 && isTrackerOn) {
final MenuItem itemHost=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemHost,""String_Node_Str"");
Utils.setMenuItemImage(itemHost,""String_Node_Str"");
itemHost.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
hostTorrents(dms);
}
}
);
final MenuItem itemPublish=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemPublish,""String_Node_Str"");
Utils.setMenuItemImage(itemPublish,""String_Node_Str"");
itemPublish.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
publishTorrents(dms);
}
}
);
itemHost.setEnabled(hasSelection);
itemPublish.setEnabled(hasSelection);
}
Menu menuCategory=new Menu(menu_shell,SWT.DROP_DOWN);
final MenuItem itemCategory=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemCategory,""String_Node_Str"");
itemCategory.setMenu(menuCategory);
itemCategory.setEnabled(hasSelection);
addCategorySubMenu(dms,menuCategory);
Menu menuTags=new Menu(menu_shell,SWT.DROP_DOWN);
final MenuItem itemTags=new MenuItem(menu,SWT.CASCADE);
Messages.setLanguageText(itemTags,""String_Node_Str"");
itemTags.setMenu(menuTags);
itemTags.setEnabled(hasSelection);
TagUIUtils.addLibraryViewTagsSubMenu(dms,menuTags);
if (isSeedingView) {
final MenuItem itemPersonalShare=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemPersonalShare,""String_Node_Str"");
itemPersonalShare.addListener(SWT.Selection,new ListenerDMTask(dms,false){
@Override public void run(DownloadManager dm){
File file=dm.getSaveLocation();
Map<String,String> properties=new HashMap<>();
properties.put(ShareManager.PR_PERSONAL,""String_Node_Str"");
if (file.isFile()) {
ShareUtils.shareFile(file.getAbsolutePath(),properties);
}
 else if (file.isDirectory()) {
ShareUtils.shareDir(file.getAbsolutePath(),properties);
}
}
}
);
}
new MenuItem(menu,SWT.SEPARATOR);
final MenuItem itemQueue=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemQueue,""String_Node_Str"");
Utils.setMenuItemImage(itemQueue,""String_Node_Str"");
itemQueue.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
queueDataSources(dms,true);
}
}
);
}
}
);
itemQueue.setEnabled(start);
if (userMode > 0) {
final MenuItem itemForceStart=new MenuItem(menu,SWT.CHECK);
Messages.setLanguageText(itemForceStart,""String_Node_Str"");
Utils.setMenuItemImage(itemForceStart,""String_Node_Str"");
itemForceStart.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (ManagerUtils.isForceStartable(dm)) {
dm.setForceStart(itemForceStart.getSelection());
}
}
}
);
itemForceStart.setSelection(forceStart);
itemForceStart.setEnabled(forceStartEnabled);
}
if (userMode > 0) {
final MenuItem itemPause=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemPause,""String_Node_Str"");
Utils.setMenuItemImage(itemPause,""String_Node_Str"");
itemPause.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
pauseDataSources(dms);
}
}
);
}
}
);
itemPause.setEnabled(stop);
}
final MenuItem itemStop=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemStop,""String_Node_Str"");
Utils.setMenuItemImage(itemStop,""String_Node_Str"");
itemStop.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
Utils.getOffOfSWTThread(new AERunnable(){
@Override public void runSupport(){
stopDataSources(dms);
}
}
);
}
}
);
itemStop.setEnabled(stop);
final MenuItem itemRecheck=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemRecheck,""String_Node_Str"");
Utils.setMenuItemImage(itemRecheck,""String_Node_Str"");
itemRecheck.addListener(SWT.Selection,new ListenerDMTask(dms){
@Override public void run(DownloadManager dm){
if (dm.canForceRecheck()) {
dm.forceRecheck();
}
}
}
);
itemRecheck.setEnabled(recheck);
final MenuItem itemRemove=new MenuItem(menu,SWT.PUSH);
Messages.setLanguageText(itemRemove,""String_Node_Str"");
Utils.setMenuItemImage(itemRemove,""String_Node_Str"");
itemRemove.addListener(SWT.Selection,new Listener(){
@Override public void handleEvent(Event event){
removeDownloads(dms,null,true);
}
}
);
itemRemove.setEnabled(hasSelection);
}",0.9974113674732696
170801,"@Override public Object skinObjectInitialShow(SWTSkinObject skinObject,Object params){
  SWTSkinObject soListArea=getSkinObject(""String_Node_Str"");
  if (soListArea == null) {
    return null;
  }
  MultipleDocumentInterfaceSWT mdi=UIFunctionsManagerSWT.getUIFunctionsSWT().getMDISWT();
  if (mdi != null) {
    mdi_entry=mdi.getEntryFromSkinObject(skinObject);
    if (mdi_entry == null) {
      Debug.out(""String_Node_Str"");
      mdi_entry=mdi.getCurrentEntrySWT();
    }
  }
  initialize((Composite)soListArea.getControl());
  return null;
}","@Override public Object skinObjectInitialShow(SWTSkinObject skinObject,Object params){
  SWTSkinObject soListArea=getSkinObject(""String_Node_Str"");
  if (soListArea == null) {
    return null;
  }
  initialize((Composite)soListArea.getControl());
  return null;
}",0.5099009900990099
170802,"private static void checkI2PInstall(final String host_name){
synchronized (AENameServiceDescriptor.class) {
    if (i2p_checked) {
      return;
    }
    try {
      Core core=CoreFactory.getSingleton();
      if (core != null) {
        i2p_checked=true;
        PluginInterface pi=core.getPluginManager().getDefaultPluginInterface();
        pi.addListener(new PluginAdapter(){
          @Override public void initializationComplete(){
            if (I2PHelpers.isI2PInstalled()) {
              return;
            }
            final boolean[] install_outcome={false};
            String enable_i2p_reason=MessageText.getString(""String_Node_Str"",new String[]{host_name});
            I2PHelpers.installI2PHelper(enable_i2p_reason,""String_Node_Str"",install_outcome,new Runnable(){
              @Override public void run(){
                if (!install_outcome[0]) {
                }
              }
            }
);
          }
        }
);
      }
    }
 catch (    Throwable e) {
    }
  }
}","private static void checkI2PInstall(final String host_name){
synchronized (AENameServiceJava9.class) {
    if (i2p_checked) {
      return;
    }
    try {
      Core core=CoreFactory.getSingleton();
      if (core != null) {
        i2p_checked=true;
        PluginInterface pi=core.getPluginManager().getDefaultPluginInterface();
        pi.addListener(new PluginAdapter(){
          @Override public void initializationComplete(){
            if (I2PHelpers.isI2PInstalled()) {
              return;
            }
            final boolean[] install_outcome={false};
            String enable_i2p_reason=MessageText.getString(""String_Node_Str"",new String[]{host_name});
            I2PHelpers.installI2PHelper(enable_i2p_reason,""String_Node_Str"",install_outcome,new Runnable(){
              @Override public void run(){
                if (!install_outcome[0]) {
                }
              }
            }
);
          }
        }
);
      }
    }
 catch (    Throwable e) {
    }
  }
}",0.9924812030075189
170803,"public void addDownload(final Download download){
  Torrent torrent=download.getTorrent();
  boolean is_decentralised=false;
  if (torrent != null) {
    is_decentralised=TorrentUtils.isDecentralised(torrent.getAnnounceURL());
  }
  if (download.getFlag(Download.FLAG_LOW_NOISE) && !is_decentralised) {
    return;
  }
  if (track_only_decentralsed) {
    if (torrent != null) {
      if (!is_decentralised) {
        return;
      }
    }
  }
  if (is_running) {
    String[] networks=download.getListAttribute(ta_networks);
    if (torrent != null && networks != null) {
      boolean public_net=false;
      for (int i=0; i < networks.length; i++) {
        if (networks[i].equalsIgnoreCase(""String_Node_Str"")) {
          public_net=true;
          break;
        }
      }
      if (public_net && !torrent.isPrivate()) {
        boolean our_download=torrent.wasCreatedByUs();
        long delay;
        if (our_download) {
          if (download.getCreationTime() > start_time) {
            delay=0;
          }
 else {
            delay=plugin_interface.getUtilities().getCurrentSystemTime() + INTERESTING_INIT_MIN_OURS + random.nextInt(INTERESTING_INIT_RAND_OURS);
          }
        }
 else {
          int min;
          int rand;
          if (TorrentUtils.isDecentralised(torrent.getAnnounceURL())) {
            min=INTERESTING_DHT_INIT_MIN;
            rand=INTERESTING_DHT_INIT_RAND;
          }
 else {
            min=INTERESTING_INIT_MIN_OTHERS;
            rand=INTERESTING_INIT_RAND_OTHERS;
          }
          delay=plugin_interface.getUtilities().getCurrentSystemTime() + min + random.nextInt(rand);
        }
        try {
          this_mon.enter();
          interesting_downloads.put(download,new Long(delay));
        }
  finally {
          this_mon.exit();
        }
      }
    }
    download.addAttributeListener(DHTTrackerPlugin.this,ta_networks,DownloadAttributeListener.WRITTEN);
    download.addAttributeListener(DHTTrackerPlugin.this,ta_peer_sources,DownloadAttributeListener.WRITTEN);
    download.addTrackerListener(DHTTrackerPlugin.this);
    download.addListener(DHTTrackerPlugin.this);
    checkDownloadForRegistration(download,true);
  }
 else {
    if (torrent != null && torrent.isDecentralised()) {
      download.addListener(new DownloadListener(){
        @Override public void stateChanged(        final Download download,        int old_state,        int new_state){
          int state=download.getState();
          if (state == Download.ST_DOWNLOADING || state == Download.ST_SEEDING) {
            download.setAnnounceResult(new DownloadAnnounceResult(){
              @Override public Download getDownload(){
                return (download);
              }
              @Override public int getResponseType(){
                return (DownloadAnnounceResult.RT_ERROR);
              }
              @Override public int getReportedPeerCount(){
                return (0);
              }
              @Override public int getSeedCount(){
                return (0);
              }
              @Override public int getNonSeedCount(){
                return (0);
              }
              @Override public String getError(){
                return (""String_Node_Str"");
              }
              @Override public URL getURL(){
                return (download.getTorrent().getAnnounceURL());
              }
              @Override public DownloadAnnounceResultPeer[] getPeers(){
                return (new DownloadAnnounceResultPeer[0]);
              }
              @Override public long getTimeToWait(){
                return (0);
              }
              @Override public Map getExtensions(){
                return (null);
              }
            }
);
          }
        }
        @Override public void positionChanged(        Download download,        int oldPosition,        int newPosition){
        }
      }
);
      download.setScrapeResult(new DownloadScrapeResult(){
        @Override public Download getDownload(){
          return (download);
        }
        @Override public int getResponseType(){
          return (DownloadScrapeResult.RT_ERROR);
        }
        @Override public int getSeedCount(){
          return (-1);
        }
        @Override public int getNonSeedCount(){
          return (-1);
        }
        @Override public long getScrapeStartTime(){
          return (SystemTime.getCurrentTime());
        }
        @Override public void setNextScrapeStartTime(        long nextScrapeStartTime){
        }
        @Override public long getNextScrapeStartTime(){
          return (-1);
        }
        @Override public String getStatus(){
          return (""String_Node_Str"");
        }
        @Override public URL getURL(){
          return (download.getTorrent().getAnnounceURL());
        }
      }
);
    }
  }
}","public void addDownload(final Download download){
  Torrent torrent=download.getTorrent();
  boolean is_decentralised=false;
  URL announce_url=torrent.getAnnounceURL();
  if (torrent != null) {
    is_decentralised=TorrentUtils.isDecentralised(announce_url);
  }
  if (download.getFlag(Download.FLAG_LOW_NOISE) && !is_decentralised) {
    if (!announce_url.getHost().endsWith(""String_Node_Str"")) {
      return;
    }
  }
  if (track_only_decentralsed) {
    if (torrent != null) {
      if (!is_decentralised) {
        return;
      }
    }
  }
  if (is_running) {
    String[] networks=download.getListAttribute(ta_networks);
    if (torrent != null && networks != null) {
      boolean public_net=false;
      for (int i=0; i < networks.length; i++) {
        if (networks[i].equalsIgnoreCase(""String_Node_Str"")) {
          public_net=true;
          break;
        }
      }
      if (public_net && !torrent.isPrivate()) {
        boolean our_download=torrent.wasCreatedByUs();
        long delay;
        if (our_download) {
          if (download.getCreationTime() > start_time) {
            delay=0;
          }
 else {
            delay=plugin_interface.getUtilities().getCurrentSystemTime() + INTERESTING_INIT_MIN_OURS + random.nextInt(INTERESTING_INIT_RAND_OURS);
          }
        }
 else {
          int min;
          int rand;
          if (TorrentUtils.isDecentralised(torrent.getAnnounceURL())) {
            min=INTERESTING_DHT_INIT_MIN;
            rand=INTERESTING_DHT_INIT_RAND;
          }
 else {
            min=INTERESTING_INIT_MIN_OTHERS;
            rand=INTERESTING_INIT_RAND_OTHERS;
          }
          delay=plugin_interface.getUtilities().getCurrentSystemTime() + min + random.nextInt(rand);
        }
        try {
          this_mon.enter();
          interesting_downloads.put(download,new Long(delay));
        }
  finally {
          this_mon.exit();
        }
      }
    }
    download.addAttributeListener(DHTTrackerPlugin.this,ta_networks,DownloadAttributeListener.WRITTEN);
    download.addAttributeListener(DHTTrackerPlugin.this,ta_peer_sources,DownloadAttributeListener.WRITTEN);
    download.addTrackerListener(DHTTrackerPlugin.this);
    download.addListener(DHTTrackerPlugin.this);
    checkDownloadForRegistration(download,true);
  }
 else {
    if (torrent != null && torrent.isDecentralised()) {
      download.addListener(new DownloadListener(){
        @Override public void stateChanged(        final Download download,        int old_state,        int new_state){
          int state=download.getState();
          if (state == Download.ST_DOWNLOADING || state == Download.ST_SEEDING) {
            download.setAnnounceResult(new DownloadAnnounceResult(){
              @Override public Download getDownload(){
                return (download);
              }
              @Override public int getResponseType(){
                return (DownloadAnnounceResult.RT_ERROR);
              }
              @Override public int getReportedPeerCount(){
                return (0);
              }
              @Override public int getSeedCount(){
                return (0);
              }
              @Override public int getNonSeedCount(){
                return (0);
              }
              @Override public String getError(){
                return (""String_Node_Str"");
              }
              @Override public URL getURL(){
                return (download.getTorrent().getAnnounceURL());
              }
              @Override public DownloadAnnounceResultPeer[] getPeers(){
                return (new DownloadAnnounceResultPeer[0]);
              }
              @Override public long getTimeToWait(){
                return (0);
              }
              @Override public Map getExtensions(){
                return (null);
              }
            }
);
          }
        }
        @Override public void positionChanged(        Download download,        int oldPosition,        int newPosition){
        }
      }
);
      download.setScrapeResult(new DownloadScrapeResult(){
        @Override public Download getDownload(){
          return (download);
        }
        @Override public int getResponseType(){
          return (DownloadScrapeResult.RT_ERROR);
        }
        @Override public int getSeedCount(){
          return (-1);
        }
        @Override public int getNonSeedCount(){
          return (-1);
        }
        @Override public long getScrapeStartTime(){
          return (SystemTime.getCurrentTime());
        }
        @Override public void setNextScrapeStartTime(        long nextScrapeStartTime){
        }
        @Override public long getNextScrapeStartTime(){
          return (-1);
        }
        @Override public String getStatus(){
          return (""String_Node_Str"");
        }
        @Override public URL getURL(){
          return (download.getTorrent().getAnnounceURL());
        }
      }
);
    }
  }
}",0.9687116564417176
170804,"public ExportedDataSource exportDataSource(){
  return (new ExportedDataSource(){
    public Class<? extends DataSourceImporter> getExporter(){
      return (SubscriptionManagerImpl.class);
    }
    public Map<String,Object> getExport(){
      Map<String,Object> map=new HashMap<>();
      map.put(""String_Node_Str"",getID());
      return (map);
    }
  }
);
}","public ExportedDataSource exportDataSource(){
  return (new ExportedDataSource(){
    public Class<? extends DataSourceImporter> getExporter(){
      return (SubscriptionManagerImpl.class);
    }
    public Map<String,Object> getExport(){
      Map<String,Object> map=new HashMap<>();
      map.put(""String_Node_Str"",getID());
      map.put(""String_Node_Str"",version);
      map.put(""String_Node_Str"",is_anonymous ? 1L : 0L);
      if (singleton_details != null) {
        Map sd=new HashMap(singleton_details);
        byte[] key=(byte[])sd.get(""String_Node_Str"");
        if (key instanceof byte[]) {
          sd.put(""String_Node_Str"",Base32.encode(key));
        }
        map.put(""String_Node_Str"",sd);
      }
      return (map);
    }
  }
);
}",0.6192619261926192
170805,"public Map<String,Object> getExport(){
  Map<String,Object> map=new HashMap<>();
  map.put(""String_Node_Str"",getID());
  return (map);
}","public Map<String,Object> getExport(){
  Map<String,Object> map=new HashMap<>();
  map.put(""String_Node_Str"",getID());
  map.put(""String_Node_Str"",version);
  map.put(""String_Node_Str"",is_anonymous ? 1L : 0L);
  if (singleton_details != null) {
    Map sd=new HashMap(singleton_details);
    byte[] key=(byte[])sd.get(""String_Node_Str"");
    if (key instanceof byte[]) {
      sd.put(""String_Node_Str"",Base32.encode(key));
    }
    map.put(""String_Node_Str"",sd);
  }
  return (map);
}",0.392914653784219
170806,"public Object importDataSource(Map<String,Object> map){
  return (getSubscriptionByID((String)map.get(""String_Node_Str"")));
}","public Object importDataSource(Map<String,Object> map){
  String sid=(String)map.get(""String_Node_Str"");
  Subscription subs=getSubscriptionByID(sid);
  if (subs == null) {
    Map sd=(Map)map.get(""String_Node_Str"");
    if (sd != null) {
      String key=(String)sd.get(""String_Node_Str"");
      sd.put(""String_Node_Str"",Base32.decode(key));
      try {
        subs=createSingletonSubscription(sd,SubscriptionImpl.ADD_TYPE_IMPORT,true);
      }
 catch (      Throwable e) {
      }
    }
    if (subs == null) {
      int version=((Number)map.get(""String_Node_Str"")).intValue();
      boolean anon=((Number)map.get(""String_Node_Str"")).intValue() != 0;
      Subscription[] result=new Subscription[1];
      boolean[] returned={false};
synchronized (result) {
        lookupSubscription(""String_Node_Str"" + sid + ""String_Node_Str"",new byte[20],Base32.decode(sid),version,anon,new subsLookupListener(){
          @Override public void found(          byte[] hash,          Subscription subscription){
            boolean enable_callback;
synchronized (imported_sids) {
              enable_callback=!imported_sids.contains(sid);
              imported_sids.add(sid);
            }
synchronized (result) {
              result[0]=subscription;
              if (returned[0] && enable_callback) {
                Runnable callback=(Runnable)map.get(""String_Node_Str"");
                if (callback != null) {
                  callback.run();
                }
              }
            }
          }
          @Override public void failed(          byte[] hash,          SubscriptionException error){
          }
          @Override public void complete(          byte[] hash,          Subscription[] subscriptions){
          }
          @Override public boolean isCancelled(){
            return false;
          }
        }
);
        subs=result[0];
        returned[0]=true;
      }
    }
  }
  return (subs);
}",0.1038197845249755
170807,"protected long getSizeSupport() throws ResourceDownloaderException {
  try {
    String protocol=original_url.getProtocol().toLowerCase();
    if (protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")) {
      return (-1);
    }
 else     if (protocol.equals(""String_Node_Str"")) {
      return (new File(original_url.toURI()).length());
    }
    reportActivity(this,""String_Node_Str"" + original_url);
    try {
      URL url=new URL(original_url.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
      url=AddressUtils.adjustURL(url);
      URL initial_url=url;
      PluginProxy plugin_proxy;
      boolean ok=false;
      if (auto_plugin_proxy || isAnonymous()) {
        plugin_proxy=AEProxyFactory.getPluginProxy(""String_Node_Str"",url);
        if (plugin_proxy == null) {
          throw (new ResourceDownloaderException(this,""String_Node_Str""));
        }
        url=plugin_proxy.getURL();
        force_proxy=plugin_proxy.getProxy();
      }
 else {
        plugin_proxy=null;
      }
      try {
        if (force_no_proxy) {
          AEProxySelectorFactory.getSelector().startNoProxy();
        }
        if (auth_supplied) {
          SESecurityManager.setPasswordHandler(url,this);
        }
        boolean dh_hack=false;
        boolean internal_error_hack=false;
        SSLSocketFactory ssl_socket_factory=null;
        for (int connect_loop=0; connect_loop < 2; connect_loop++) {
          try {
            HttpURLConnection con;
            if (url.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
              HttpsURLConnection ssl_con=(HttpsURLConnection)openConnection(force_proxy,url);
              if (ssl_socket_factory != null) {
                ssl_con.setSSLSocketFactory(ssl_socket_factory);
              }
              if (!internal_error_hack) {
                ssl_con.setHostnameVerifier(new HostnameVerifier(){
                  @Override public boolean verify(                  String host,                  SSLSession session){
                    return (true);
                  }
                }
);
              }
              if (dh_hack) {
                UrlUtils.DHHackIt(ssl_con);
              }
              if (internal_error_hack && plugin_proxy != null) {
                String host=plugin_proxy.getURLHostRewrite();
                UrlUtils.HTTPSURLConnectionSNIHack(host,ssl_con);
              }
              con=ssl_con;
            }
 else {
              con=(HttpURLConnection)openConnection(force_proxy,url);
            }
            con.setInstanceFollowRedirects(plugin_proxy == null);
            if (plugin_proxy != null) {
              con.setRequestProperty(""String_Node_Str"",plugin_proxy.getURLHostRewrite() + (initial_url.getPort() == -1 ? ""String_Node_Str"" : (""String_Node_Str"" + initial_url.getPort())));
            }
            con.setRequestMethod(""String_Node_Str"");
            ClientIDGenerator cidg=ClientIDManagerImpl.getSingleton().getGenerator();
            if (cidg != null) {
              Properties props=new Properties();
              cidg.generateHTTPProperties(null,props);
              String ua=props.getProperty(ClientIDGenerator.PR_USER_AGENT);
              con.setRequestProperty(""String_Node_Str"",ua);
            }
            setRequestProperties(con,false);
            try {
              con.connect();
            }
 catch (            AEProxyFactory.UnknownHostException e) {
              throw (new UnknownHostException(e.getMessage()));
            }
            int response=con.getResponseCode();
            setProperty(""String_Node_Str"",new Long(response));
            if ((response != HttpURLConnection.HTTP_ACCEPTED) && (response != HttpURLConnection.HTTP_OK)) {
              if (response == HttpURLConnection.HTTP_MOVED_TEMP || response == HttpURLConnection.HTTP_MOVED_PERM) {
                return (-1);
              }
              URL dest=url;
              if (plugin_proxy != null) {
                try {
                  dest=new URL(plugin_proxy.getTarget());
                }
 catch (                Throwable e) {
                }
              }
              throw (new ResourceDownloaderException(this,""String_Node_Str"" + trimForDisplay(dest) + ""String_Node_Str""+ Integer.toString(response)+ ""String_Node_Str""+ con.getResponseMessage()));
            }
            getRequestProperties(con);
            ok=true;
            return (UrlUtils.getContentLength(con));
          }
 catch (          SSLException e) {
            String msg=Debug.getNestedExceptionMessage(e);
            if (connect_loop < 3) {
              boolean try_again=false;
              if (msg.contains(""String_Node_Str"")) {
                if (!dh_hack) {
                  dh_hack=true;
                  try_again=true;
                }
              }
 else               if (msg.contains(""String_Node_Str"") || msg.contains(""String_Node_Str"")) {
                if (!internal_error_hack) {
                  internal_error_hack=true;
                  try_again=true;
                }
              }
              ssl_socket_factory=SESecurityManager.installServerCertificates(url);
              if (ssl_socket_factory != null) {
                try_again=true;
              }
              if (try_again) {
                continue;
              }
            }
            throw (e);
          }
catch (          IOException e) {
            if (connect_loop == 0) {
              URL retry_url=UrlUtils.getIPV4Fallback(url);
              if (retry_url != null) {
                url=retry_url;
                continue;
              }
            }
            throw (e);
          }
        }
        throw (new ResourceDownloaderException(this,""String_Node_Str""));
      }
  finally {
        if (auth_supplied) {
          SESecurityManager.setPasswordHandler(url,null);
        }
        if (force_no_proxy) {
          AEProxySelectorFactory.getSelector().endNoProxy();
        }
        if (plugin_proxy != null) {
          plugin_proxy.setOK(ok);
          force_proxy=null;
        }
      }
    }
 catch (    java.net.MalformedURLException e) {
      throw (new ResourceDownloaderException(this,""String_Node_Str"" + original_url + ""String_Node_Str""+ e.getMessage(),e));
    }
catch (    java.net.UnknownHostException e) {
      throw (new ResourceDownloaderException(this,""String_Node_Str"" + trimForDisplay(original_url) + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"",e));
    }
catch (    java.io.IOException e) {
      throw (new ResourceDownloaderException(this,""String_Node_Str"" + trimForDisplay(original_url) + ""String_Node_Str"",e));
    }
  }
 catch (  Throwable e) {
    ResourceDownloaderException rde;
    if (e instanceof ResourceDownloaderException) {
      rde=(ResourceDownloaderException)e;
    }
 else {
      Debug.out(e);
      rde=new ResourceDownloaderException(this,""String_Node_Str"",e);
    }
    throw (rde);
  }
}","protected long getSizeSupport() throws ResourceDownloaderException {
  try {
    String protocol=original_url.getProtocol().toLowerCase();
    if (protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")|| protocol.equals(""String_Node_Str"")) {
      return (-1);
    }
 else     if (protocol.equals(""String_Node_Str"")) {
      return (new File(original_url.toURI()).length());
    }
    reportActivity(this,""String_Node_Str"" + original_url);
    try {
      URL url=new URL(original_url.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
      url=AddressUtils.adjustURL(url);
      URL initial_url=url;
      PluginProxy plugin_proxy;
      boolean ok=false;
      if (auto_plugin_proxy || isAnonymous()) {
        plugin_proxy=AEProxyFactory.getPluginProxy(""String_Node_Str"",url);
        if (plugin_proxy == null) {
          throw (new ResourceDownloaderException(this,""String_Node_Str""));
        }
        url=plugin_proxy.getURL();
        force_proxy=plugin_proxy.getProxy();
      }
 else {
        plugin_proxy=null;
      }
      try {
        if (force_no_proxy) {
          AEProxySelectorFactory.getSelector().startNoProxy();
        }
        if (auth_supplied) {
          SESecurityManager.setPasswordHandler(url,this);
        }
        boolean dh_hack=false;
        boolean internal_error_hack=false;
        SSLSocketFactory ssl_socket_factory=null;
        for (int connect_loop=0; connect_loop < 2; connect_loop++) {
          try {
            HttpURLConnection con;
            if (url.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
              HttpsURLConnection ssl_con=(HttpsURLConnection)openConnection(force_proxy,url);
              if (ssl_socket_factory != null) {
                ssl_con.setSSLSocketFactory(ssl_socket_factory);
              }
              if (!internal_error_hack) {
                ssl_con.setHostnameVerifier(new HostnameVerifier(){
                  @Override public boolean verify(                  String host,                  SSLSession session){
                    return (true);
                  }
                }
);
              }
              if (plugin_proxy != null) {
                TrustManagerFactory tmf=SESecurityManager.getTrustManagerFactory();
                final List<X509TrustManager> default_tms=new ArrayList<>();
                if (tmf != null) {
                  for (                  TrustManager tm : tmf.getTrustManagers()) {
                    if (tm instanceof X509TrustManager) {
                      default_tms.add((X509TrustManager)tm);
                    }
                  }
                }
                TrustManager[] tms_delegate=SESecurityManager.getAllTrustingTrustManager(new X509TrustManager(){
                  @Override public X509Certificate[] getAcceptedIssuers(){
                    List<X509Certificate> result=new ArrayList<>();
                    for (                    X509TrustManager tm : default_tms) {
                      result.addAll(Arrays.asList(tm.getAcceptedIssuers()));
                    }
                    return (result.toArray(new X509Certificate[result.size()]));
                  }
                  @Override public void checkClientTrusted(                  java.security.cert.X509Certificate[] chain,                  String authType) throws CertificateException {
                    for (                    X509TrustManager tm : default_tms) {
                      tm.checkClientTrusted(chain,authType);
                    }
                  }
                  @Override public void checkServerTrusted(                  java.security.cert.X509Certificate[] chain,                  String authType) throws CertificateException {
                    for (                    X509TrustManager tm : default_tms) {
                      tm.checkServerTrusted(chain,authType);
                    }
                  }
                }
);
                SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
                sc.init(null,tms_delegate,RandomUtils.SECURE_RANDOM);
                SSLSocketFactory factory=sc.getSocketFactory();
                ssl_con.setSSLSocketFactory(factory);
              }
              if (dh_hack) {
                UrlUtils.DHHackIt(ssl_con);
              }
              if (internal_error_hack && plugin_proxy != null) {
                String host=plugin_proxy.getURLHostRewrite();
                UrlUtils.HTTPSURLConnectionSNIHack(host,ssl_con);
              }
              con=ssl_con;
            }
 else {
              con=(HttpURLConnection)openConnection(force_proxy,url);
            }
            con.setInstanceFollowRedirects(plugin_proxy == null);
            if (plugin_proxy != null) {
              con.setRequestProperty(""String_Node_Str"",plugin_proxy.getURLHostRewrite() + (initial_url.getPort() == -1 ? ""String_Node_Str"" : (""String_Node_Str"" + initial_url.getPort())));
            }
            con.setRequestMethod(""String_Node_Str"");
            ClientIDGenerator cidg=ClientIDManagerImpl.getSingleton().getGenerator();
            if (cidg != null) {
              Properties props=new Properties();
              cidg.generateHTTPProperties(null,props);
              String ua=props.getProperty(ClientIDGenerator.PR_USER_AGENT);
              con.setRequestProperty(""String_Node_Str"",ua);
            }
            setRequestProperties(con,false);
            try {
              con.connect();
            }
 catch (            AEProxyFactory.UnknownHostException e) {
              throw (new UnknownHostException(e.getMessage()));
            }
            int response=con.getResponseCode();
            setProperty(""String_Node_Str"",new Long(response));
            if ((response != HttpURLConnection.HTTP_ACCEPTED) && (response != HttpURLConnection.HTTP_OK)) {
              if (response == HttpURLConnection.HTTP_MOVED_TEMP || response == HttpURLConnection.HTTP_MOVED_PERM) {
                return (-1);
              }
              URL dest=url;
              if (plugin_proxy != null) {
                try {
                  dest=new URL(plugin_proxy.getTarget());
                }
 catch (                Throwable e) {
                }
              }
              throw (new ResourceDownloaderException(this,""String_Node_Str"" + trimForDisplay(dest) + ""String_Node_Str""+ Integer.toString(response)+ ""String_Node_Str""+ con.getResponseMessage()));
            }
            getRequestProperties(con);
            ok=true;
            return (UrlUtils.getContentLength(con));
          }
 catch (          SSLException e) {
            String msg=Debug.getNestedExceptionMessage(e);
            if (connect_loop < 3) {
              boolean try_again=false;
              if (msg.contains(""String_Node_Str"")) {
                if (!dh_hack) {
                  dh_hack=true;
                  try_again=true;
                }
              }
 else               if (msg.contains(""String_Node_Str"") || msg.contains(""String_Node_Str"")) {
                if (!internal_error_hack) {
                  internal_error_hack=true;
                  try_again=true;
                }
              }
              ssl_socket_factory=SESecurityManager.installServerCertificates(url);
              if (ssl_socket_factory != null) {
                try_again=true;
              }
              if (try_again) {
                continue;
              }
            }
            throw (e);
          }
catch (          IOException e) {
            if (connect_loop == 0) {
              URL retry_url=UrlUtils.getIPV4Fallback(url);
              if (retry_url != null) {
                url=retry_url;
                continue;
              }
            }
            throw (e);
          }
        }
        throw (new ResourceDownloaderException(this,""String_Node_Str""));
      }
  finally {
        if (auth_supplied) {
          SESecurityManager.setPasswordHandler(url,null);
        }
        if (force_no_proxy) {
          AEProxySelectorFactory.getSelector().endNoProxy();
        }
        if (plugin_proxy != null) {
          plugin_proxy.setOK(ok);
          force_proxy=null;
        }
      }
    }
 catch (    java.net.MalformedURLException e) {
      throw (new ResourceDownloaderException(this,""String_Node_Str"" + original_url + ""String_Node_Str""+ e.getMessage(),e));
    }
catch (    java.net.UnknownHostException e) {
      throw (new ResourceDownloaderException(this,""String_Node_Str"" + trimForDisplay(original_url) + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"",e));
    }
catch (    java.io.IOException e) {
      throw (new ResourceDownloaderException(this,""String_Node_Str"" + trimForDisplay(original_url) + ""String_Node_Str"",e));
    }
  }
 catch (  Throwable e) {
    ResourceDownloaderException rde;
    if (e instanceof ResourceDownloaderException) {
      rde=(ResourceDownloaderException)e;
    }
 else {
      Debug.out(e);
      rde=new ResourceDownloaderException(this,""String_Node_Str"",e);
    }
    throw (rde);
  }
}",0.8726001349444887
170808,"private void updateStats(boolean force){
  try {
    this_mon.enter();
    long current_time=SystemTime.getCurrentTime() / 1000;
    if (current_time < lastUptime) {
      lastUptime=current_time;
      return;
    }
    long current_total_d_received=gm_stats.getTotalDataBytesReceived();
    long current_total_p_received=gm_stats.getTotalProtocolBytesReceived();
    long current_total_d_sent=gm_stats.getTotalDataBytesSent();
    long current_total_p_sent=gm_stats.getTotalProtocolBytesSent();
    long current_total_received=current_total_d_received + current_total_p_received;
    long current_total_sent=current_total_d_sent + current_total_p_sent;
    totalDownloaded+=current_total_received - lastDownloaded;
    lastDownloaded=current_total_received;
    if (totalDownloaded < 0)     totalDownloaded=0;
    totalUploaded+=current_total_sent - lastUploaded;
    lastUploaded=current_total_sent;
    if (totalUploaded < 0)     totalUploaded=0;
    totalDataDownloaded+=current_total_d_received - lastDataDownloaded;
    lastDataDownloaded=current_total_d_received;
    if (totalDataDownloaded < 0)     totalDataDownloaded=0;
    totalProtocolDownloaded+=current_total_p_received - lastProtocolDownloaded;
    lastProtocolDownloaded=current_total_p_received;
    if (totalProtocolDownloaded < 0)     totalProtocolDownloaded=0;
    totalDataUploaded+=current_total_d_sent - lastDataUploaded;
    lastDataUploaded=current_total_d_sent;
    if (totalDataUploaded < 0)     totalDataUploaded=0;
    totalProtocolUploaded+=current_total_p_sent - lastProtocolUploaded;
    lastProtocolUploaded=current_total_p_sent;
    if (totalProtocolUploaded < 0)     totalProtocolUploaded=0;
    if (dhts == null) {
      try {
        PluginManager pm=core.getPluginManager();
        if (pm.isInitialized()) {
          PluginInterface dht_pi=pm.getPluginInterfaceByClass(DHTPlugin.class);
          if (dht_pi == null) {
            dhts=new DHT[0];
          }
 else {
            DHTPlugin plugin=(DHTPlugin)dht_pi.getPlugin();
            if (!plugin.isInitialising()) {
              if (plugin.isEnabled()) {
                dhts=((DHTPlugin)dht_pi.getPlugin()).getDHTs();
              }
 else {
                dhts=new DHT[0];
              }
            }
          }
        }
      }
 catch (      Throwable e) {
        dhts=new DHT[0];
      }
    }
    long current_total_dht_up=0;
    long current_total_dht_down=0;
    if (dhts != null) {
      for (      DHT dht : dhts) {
        DHTTransportStats stats=dht.getTransport().getStats();
        current_total_dht_up+=stats.getBytesSent();
        current_total_dht_down+=stats.getBytesReceived();
      }
    }
    totalDHTUploaded+=current_total_dht_up - lastDHTUploaded;
    lastDHTUploaded=current_total_dht_up;
    if (totalDHTUploaded < 0)     totalDHTUploaded=0;
    totalDHTDownloaded+=current_total_dht_down - lastDHTDownloaded;
    lastDHTDownloaded=current_total_dht_down;
    if (totalDHTDownloaded < 0)     totalDHTDownloaded=0;
    long delta=current_time - lastUptime;
    if (delta > 100 || delta < 0) {
      lastUptime=current_time;
      return;
    }
    if (totalUptime > TEN_YEARS) {
      totalUptime=0;
    }
    if (totalUptime < 0)     totalUptime=0;
    totalUptime+=delta;
    lastUptime=current_time;
    lastSnapshot=new long[]{totalProtocolUploaded,totalDataUploaded,totalProtocolDownloaded,totalDataDownloaded,totalDHTUploaded,totalDHTDownloaded,current_total_p_sent,current_total_d_sent,current_total_p_received,current_total_d_received,current_total_dht_up,current_total_dht_down};
    HashMap overallMap=new HashMap();
    overallMap.put(""String_Node_Str"",new Long(totalDownloaded));
    overallMap.put(""String_Node_Str"",new Long(totalUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalUptime));
    overallMap.put(""String_Node_Str"",new Long(markTime));
    overallMap.put(""String_Node_Str"",new Long(markTotalDownloaded));
    overallMap.put(""String_Node_Str"",new Long(markTotalUploaded));
    overallMap.put(""String_Node_Str"",new Long(markTotalUptime));
    overallMap.put(""String_Node_Str"",new Long(totalDHTDownloaded));
    overallMap.put(""String_Node_Str"",new Long(totalDHTUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalProtocolUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalDataUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalProtocolDownloaded));
    overallMap.put(""String_Node_Str"",new Long(totalDataDownloaded));
    Map map=new HashMap();
    map.put(""String_Node_Str"",overallMap);
    tick_count++;
    if (force || tick_count % SAVE_TICKS == 0) {
      save(map);
    }
  }
  finally {
    this_mon.exit();
  }
}","private void updateStats(boolean force){
  try {
    this_mon.enter();
    long current_time=SystemTime.getCurrentTime() / 1000;
    if (current_time < lastUptime) {
      lastUptime=current_time;
      return;
    }
    long current_total_d_received=gm_stats.getTotalDataBytesReceived();
    long current_total_p_received=gm_stats.getTotalProtocolBytesReceived();
    long current_total_d_sent=gm_stats.getTotalDataBytesSent();
    long current_total_p_sent=gm_stats.getTotalProtocolBytesSent();
    long current_total_received=current_total_d_received + current_total_p_received;
    long current_total_sent=current_total_d_sent + current_total_p_sent;
    totalDownloaded+=current_total_received - lastDownloaded;
    lastDownloaded=current_total_received;
    if (totalDownloaded < 0)     totalDownloaded=0;
    totalUploaded+=current_total_sent - lastUploaded;
    lastUploaded=current_total_sent;
    if (totalUploaded < 0)     totalUploaded=0;
    totalDataDownloaded+=current_total_d_received - lastDataDownloaded;
    lastDataDownloaded=current_total_d_received;
    if (totalDataDownloaded < 0)     totalDataDownloaded=0;
    totalProtocolDownloaded+=current_total_p_received - lastProtocolDownloaded;
    lastProtocolDownloaded=current_total_p_received;
    if (totalProtocolDownloaded < 0)     totalProtocolDownloaded=0;
    totalDataUploaded+=current_total_d_sent - lastDataUploaded;
    lastDataUploaded=current_total_d_sent;
    if (totalDataUploaded < 0)     totalDataUploaded=0;
    totalProtocolUploaded+=current_total_p_sent - lastProtocolUploaded;
    lastProtocolUploaded=current_total_p_sent;
    if (totalProtocolUploaded < 0)     totalProtocolUploaded=0;
    if (dhts == null) {
      try {
        PluginManager pm=core.getPluginManager();
        if (pm.isInitialized()) {
          PluginInterface dht_pi=pm.getPluginInterfaceByClass(DHTPlugin.class);
          if (dht_pi == null) {
            dhts=new DHT[0];
          }
 else {
            DHTPlugin plugin=(DHTPlugin)dht_pi.getPlugin();
            if (!plugin.isInitialising()) {
              if (plugin.isEnabled()) {
                dhts=((DHTPlugin)dht_pi.getPlugin()).getDHTs();
              }
 else {
                dhts=new DHT[0];
              }
            }
          }
        }
      }
 catch (      Throwable e) {
        dhts=new DHT[0];
      }
    }
    long current_total_dht_up=0;
    long current_total_dht_down=0;
    if (dhts != null) {
      for (      DHT dht : dhts) {
        DHTTransportStats stats=dht.getTransport().getStats();
        current_total_dht_up+=stats.getBytesSent();
        current_total_dht_down+=stats.getBytesReceived();
      }
    }
    totalDHTUploaded+=current_total_dht_up - lastDHTUploaded;
    lastDHTUploaded=current_total_dht_up;
    if (totalDHTUploaded < 0)     totalDHTUploaded=0;
    totalDHTDownloaded+=current_total_dht_down - lastDHTDownloaded;
    lastDHTDownloaded=current_total_dht_down;
    if (totalDHTDownloaded < 0)     totalDHTDownloaded=0;
    long delta=current_time - lastUptime;
    if (delta > 100 || delta < 0) {
      lastUptime=current_time;
      return;
    }
    if (totalUptime < 0)     totalUptime=0;
    totalUptime+=delta;
    lastUptime=current_time;
    lastSnapshot=new long[]{totalProtocolUploaded,totalDataUploaded,totalProtocolDownloaded,totalDataDownloaded,totalDHTUploaded,totalDHTDownloaded,current_total_p_sent,current_total_d_sent,current_total_p_received,current_total_d_received,current_total_dht_up,current_total_dht_down};
    HashMap overallMap=new HashMap();
    overallMap.put(""String_Node_Str"",new Long(totalDownloaded));
    overallMap.put(""String_Node_Str"",new Long(totalUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalUptime));
    overallMap.put(""String_Node_Str"",new Long(markTime));
    overallMap.put(""String_Node_Str"",new Long(markTotalDownloaded));
    overallMap.put(""String_Node_Str"",new Long(markTotalUploaded));
    overallMap.put(""String_Node_Str"",new Long(markTotalUptime));
    overallMap.put(""String_Node_Str"",new Long(totalDHTDownloaded));
    overallMap.put(""String_Node_Str"",new Long(totalDHTUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalProtocolUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalDataUploaded));
    overallMap.put(""String_Node_Str"",new Long(totalProtocolDownloaded));
    overallMap.put(""String_Node_Str"",new Long(totalDataDownloaded));
    Map map=new HashMap();
    map.put(""String_Node_Str"",overallMap);
    tick_count++;
    if (force || tick_count % SAVE_TICKS == 0) {
      save(map);
    }
  }
  finally {
    this_mon.exit();
  }
}",0.9933218440327444
170809,"public AuthAdapter(FragmentManager manager,AnimatedViewPager pager,ImageView authBackground,List<ImageView> sharedElements){
  super(manager);
  this.authBackground=authBackground;
  this.pager=pager;
  this.authArray=new SparseArray<>(getCount());
  this.sharedElements=sharedElements;
  pager.setDuration(400);
  final float textSize=pager.getResources().getDimension(R.dimen.folded_size);
  final float textPadding=pager.getResources().getDimension(R.dimen.folded_label_padding);
  factor=1 - (textSize + textPadding) / (pager.getWidth());
}","public AuthAdapter(FragmentManager manager,AnimatedViewPager pager,ImageView authBackground,List<ImageView> sharedElements){
  super(manager);
  this.authBackground=authBackground;
  this.pager=pager;
  this.authArray=new SparseArray<>(getCount());
  this.sharedElements=sharedElements;
  pager.setDuration(350);
  final float textSize=pager.getResources().getDimension(R.dimen.folded_size);
  final float textPadding=pager.getResources().getDimension(R.dimen.folded_label_padding);
  factor=1 - (textSize + textPadding) / (pager.getWidth());
}",0.9963235294117648
170810,"private void setUpMedia(){
  mMediaPlayer=new MediaPlayer();
  mMediaSession=new MediaSession(this,MusicService.SESSION_TAG);
  mMediaSession.setCallback(mSessionCallback);
  setState(PlaybackState.STATE_NONE);
  mMediaSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);
  mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
  mNoisyIntentFilter=new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY);
  mNoisyReceiver=new BecomingNoisyReceiver();
  mAudioManager=(AudioManager)getSystemService(AUDIO_SERVICE);
}","private void setUpMedia(){
  mMediaPlayer=new MediaPlayer();
  mMediaSession=new MediaSession(this,MusicService.SESSION_TAG);
  mMediaSession.setCallback(mSessionCallback);
  setState(PlaybackState.STATE_NONE);
  mMediaSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS | MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);
  mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
  mNoisyIntentFilter=new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY);
  mNoisyReceiver=new BecomingNoisyReceiver();
  mAudioManager=(AudioManager)getSystemService(AUDIO_SERVICE);
  registerReceiver(mNoisyReceiver,mNoisyIntentFilter);
}",0.9545829892650702
170811,"public void start(){
  mMediaPlayer.start();
  mDuration=mMediaPlayer.getDuration();
  setState(PlaybackState.STATE_PLAYING);
  mTickNotification.notifyPlay(this);
  registerReceiver(mNoisyReceiver,mNoisyIntentFilter);
  mAudioManager.requestAudioFocus(mAudioFocusChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);
  if (mUpdateListener != null) {
    mUpdateListener.startPlay();
  }
}","public void start(){
  mMediaPlayer.start();
  mDuration=mMediaPlayer.getDuration();
  setState(PlaybackState.STATE_PLAYING);
  mTickNotification.notifyPlay(this);
  mAudioManager.requestAudioFocus(mAudioFocusChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);
  if (mUpdateListener != null) {
    mUpdateListener.startPlay();
  }
}",0.927536231884058
170812,"/** 
 * 获取缓存数据
 * @param type 类型（新歌，摇滚等）
 * @return 缓存的数据集合
 */
public List<NetSongBean> querySongData(int type){
  SQLiteDatabase db=mTickDaoHelper.getReadableDatabase();
  Cursor cursor=null;
  try {
    cursor=db.query(TickDaoHelper.NET_MUSIC_TABLE,null,NetParam.TYPE + ""String_Node_Str"",new String[]{String.valueOf(type)},null,null,NetParam.RANK + ""String_Node_Str"",null);
    if (cursor.getCount() > 0) {
      List<NetSongBean> listBeen=new ArrayList<>();
      while (cursor.moveToNext()) {
        NetSongBean listBean=new NetSongBean();
        listBean.songId=cursor.getString(cursor.getColumnIndex(NetParam.SONG_ID));
        listBean.title=cursor.getString(cursor.getColumnIndex(NetParam.SONG_NAME));
        listBean.artistId=cursor.getString(cursor.getColumnIndex(NetParam.SINGER_ID));
        listBean.artistName=cursor.getString(cursor.getColumnIndex(NetParam.SINGER_NAME));
        listBean.imgUrl=cursor.getString(cursor.getColumnIndex(NetParam.PIC_URL));
        listBean.lrcLink=cursor.getString(cursor.getColumnIndex(NetParam.LRC_LINK));
        listBean.albumId=cursor.getString(cursor.getColumnIndex(NetParam.ALBUM_ID));
        listBean.albumTitle=cursor.getString(cursor.getColumnIndex(NetParam.ALBUM_NAME));
        listBean.rank=cursor.getInt(cursor.getColumnIndex(NetParam.RANK));
        listBeen.add(listBean);
      }
      return listBeen;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
    db.close();
  }
  return null;
}","/** 
 * 获取缓存数据
 * @param type 类型（新歌，摇滚等）
 * @return 缓存的数据集合
 */
public List<NetSongBean> querySongData(int type){
  SQLiteDatabase db=mTickDaoHelper.getReadableDatabase();
  Cursor cursor=null;
  List<NetSongBean> netSongBeans=new ArrayList<>();
  db.beginTransaction();
  try {
    cursor=db.query(TickDaoHelper.NET_MUSIC_TABLE,null,NetParam.TYPE + ""String_Node_Str"",new String[]{String.valueOf(type)},null,null,NetParam.RANK + ""String_Node_Str"",null);
    if (cursor.getCount() > 0) {
      List<NetSongBean> listBeen=new ArrayList<>();
      while (cursor.moveToNext()) {
        NetSongBean listBean=new NetSongBean();
        listBean.songId=cursor.getString(cursor.getColumnIndex(NetParam.SONG_ID));
        listBean.title=cursor.getString(cursor.getColumnIndex(NetParam.SONG_NAME));
        listBean.artistId=cursor.getString(cursor.getColumnIndex(NetParam.SINGER_ID));
        listBean.artistName=cursor.getString(cursor.getColumnIndex(NetParam.SINGER_NAME));
        listBean.imgUrl=cursor.getString(cursor.getColumnIndex(NetParam.PIC_URL));
        listBean.lrcLink=cursor.getString(cursor.getColumnIndex(NetParam.LRC_LINK));
        listBean.albumId=cursor.getString(cursor.getColumnIndex(NetParam.ALBUM_ID));
        listBean.albumTitle=cursor.getString(cursor.getColumnIndex(NetParam.ALBUM_NAME));
        listBean.rank=cursor.getInt(cursor.getColumnIndex(NetParam.RANK));
        listBeen.add(listBean);
      }
      netSongBeans=listBeen;
    }
    db.setTransactionSuccessful();
    return netSongBeans;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
    db.endTransaction();
    db.close();
  }
  return null;
}",0.93893832463946
170813,"public DataManager(Context context){
  mCacheRepo=new CacheRepoImpl(context);
  mConfigRepo=new ConfigRepoImpl(context);
}","private DataManager(Context context){
  mCacheRepo=new CacheRepoImpl(context);
  mConfigRepo=new ConfigRepoImpl(context);
}",0.963265306122449
170814,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (isNavigatingMain()) {
      mDrawerLayout.openDrawer(GravityCompat.START);
    }
 else {
      super.onBackPressed();
    }
  return true;
case R.id.action_search:
mNavigator.navigeteToSearch(this);
return true;
case R.id.action_clear:
postClearEvent();
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (isNavigatingMain()) {
      mDrawerLayout.openDrawer(GravityCompat.START);
    }
 else {
      super.onBackPressed();
    }
  return true;
case R.id.action_search:
mNavigator.navigateToSearch(this);
return true;
case R.id.action_clear:
postClearEvent();
return true;
}
return super.onOptionsItemSelected(item);
}",0.9977011494252872
170815,"/** 
 * 设置侧滑抽屉的属性
 * @param songEntity 当前播放音乐
 */
private void setNavHeadView(SongEntity songEntity){
  if (songEntity == null) {
    return;
  }
  mNavTitle.setText(songEntity.title);
  mNavSinger.setText(songEntity.artistName);
  ImageLoader.getInstance().display(MainActivity.this,new ImageConfig.Builder().url(songEntity.albumCover).isRound(false).placeholder(R.drawable.ic_default).into(mImgNavHeadBg).build());
  mImgNavHeadBg.setColorFilter(ContextCompat.getColor(MainActivity.this,R.color.colorDarkerTransparent),PorterDuff.Mode.SRC_OVER);
}","/** 
 * 设置侧滑抽屉的属性
 * @param songEntity 当前播放音乐
 */
private void setNavHeadView(SongEntity songEntity){
  if (songEntity == null || isDestroyed()) {
    return;
  }
  mNavTitle.setText(songEntity.title);
  mNavSinger.setText(songEntity.artistName);
  ImageLoader.getInstance().display(MainActivity.this,new ImageConfig.Builder().url(songEntity.albumCover).isRound(false).placeholder(R.drawable.ic_default).into(mImgNavHeadBg).build());
  mImgNavHeadBg.setColorFilter(ContextCompat.getColor(MainActivity.this,R.color.colorDarkerTransparent),PorterDuff.Mode.SRC_OVER);
}",0.9847533632286996
170816,"/** 
 * 设置底部快捷控制条的属性
 * @param songEntity 当前播放音乐
 */
private void setMusicBarView(SongEntity songEntity){
  if (!this.isDestroyed() && songEntity != null) {
    mTxtCurSong.setText(SubTextUtil.addEllipsis(songEntity.title,15));
    mTxtCurSinger.setText(SubTextUtil.addEllipsis(songEntity.artistName,15));
    ImageLoader.getInstance().display(MainActivity.this,new ImageConfig.Builder().url(songEntity.albumCover).isRound(false).placeholder(R.drawable.ic_default).into(mImgCurSong).build());
  }
}","/** 
 * 设置底部快捷控制条的属性
 * @param songEntity 当前播放音乐
 */
private void setMusicBarView(SongEntity songEntity){
  if (songEntity == null || isDestroyed()) {
    return;
  }
  mTxtCurSong.setText(SubTextUtil.addEllipsis(songEntity.title,15));
  mTxtCurSinger.setText(SubTextUtil.addEllipsis(songEntity.artistName,15));
  ImageLoader.getInstance().display(MainActivity.this,new ImageConfig.Builder().url(songEntity.albumCover).isRound(false).placeholder(R.drawable.ic_default).into(mImgCurSong).build());
}",0.927710843373494
170817,"@Override public ObservableSource<ResponseBody> apply(List<LrcBean> lrcBeans) throws Exception {
  if (lrcBeans == null || lrcBeans.isEmpty()) {
    return Observable.empty();
  }
  LrcBean lrcBean=lrcBeans.get(0);
  if (lrcBean == null) {
    return Observable.empty();
  }
  return RetrofitHelper.INSTANCE.createApi(SongService.class).downloadLrcFile(lrcBean.lrc);
}","@Override public ObservableSource<ResponseBody> apply(List<LrcBean> lrcBeans) throws Exception {
  if (lrcBeans == null || lrcBeans.isEmpty()) {
    return null;
  }
  LrcBean lrcBean=lrcBeans.get(0);
  if (lrcBean == null) {
    return null;
  }
  return RetrofitHelper.INSTANCE.createApi(SongService.class).downloadLrcFile(lrcBean.lrc);
}",0.9378531073446328
170818,"@Override public Observable<ResponseBody> getLrcData(String songName,String singer){
  return RetrofitHelper.INSTANCE.createApi(SongService.class).getOnLrcData(songName,singer).map(new Function<OnLineLrcEntity,List<LrcBean>>(){
    @Override public List<LrcBean> apply(    OnLineLrcEntity onLineLrcEntity) throws Exception {
      if (onLineLrcEntity == null) {
        return Collections.emptyList();
      }
      List<OnLineLrcEntity.ResultBean> result=onLineLrcEntity.result;
      if (result == null || result.isEmpty()) {
        return Collections.emptyList();
      }
      return LrcMapper.transform(result);
    }
  }
).flatMap(new Function<List<LrcBean>,ObservableSource<ResponseBody>>(){
    @Override public ObservableSource<ResponseBody> apply(    List<LrcBean> lrcBeans) throws Exception {
      if (lrcBeans == null || lrcBeans.isEmpty()) {
        return Observable.empty();
      }
      LrcBean lrcBean=lrcBeans.get(0);
      if (lrcBean == null) {
        return Observable.empty();
      }
      return RetrofitHelper.INSTANCE.createApi(SongService.class).downloadLrcFile(lrcBean.lrc);
    }
  }
);
}","@Override public Observable<ResponseBody> getLrcData(String songName,String singer){
  return RetrofitHelper.INSTANCE.createApi(SongService.class).getOnLrcData(songName,singer).map(new Function<OnLineLrcEntity,List<LrcBean>>(){
    @Override public List<LrcBean> apply(    OnLineLrcEntity onLineLrcEntity) throws Exception {
      if (onLineLrcEntity == null) {
        return Collections.emptyList();
      }
      List<OnLineLrcEntity.ResultBean> result=onLineLrcEntity.result;
      if (result == null || result.isEmpty()) {
        return Collections.emptyList();
      }
      return LrcMapper.transform(result);
    }
  }
).flatMap(new Function<List<LrcBean>,ObservableSource<ResponseBody>>(){
    @Override public ObservableSource<ResponseBody> apply(    List<LrcBean> lrcBeans) throws Exception {
      if (lrcBeans == null || lrcBeans.isEmpty()) {
        return null;
      }
      LrcBean lrcBean=lrcBeans.get(0);
      if (lrcBean == null) {
        return null;
      }
      return RetrofitHelper.INSTANCE.createApi(SongService.class).downloadLrcFile(lrcBean.lrc);
    }
  }
);
}",0.980126467931346
170819,"private int getLrcWidth(){
  return (int)(getMeasuredWidth() - mHorizontalPadding * 2);
}","private int getLrcWidth(){
  return (int)(getWidth() - mHorizontalPadding * 2);
}",0.9529411764705882
170820,"private int getLrcHeight(){
  return (int)(getMeasuredHeight() - mVerticalPadding * 2);
}","private int getLrcHeight(){
  return (int)(getHeight() - mVerticalPadding * 2);
}",0.9529411764705882
170821,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (isLrcEmpty()) {
    drawEmptyText(canvas);
    return;
  }
  float y=getLrcHeight() / 2;
  float x=getLrcWidth() * 0.5f + mHorizontalPadding;
  for (int i=0; i < getLrcCount(); i++) {
    if (i > 0) {
      y+=(getTextHeight(i - 1) + getTextHeight(i)) / 2 + mLrcLineSpaceHeight;
    }
    if (mCurrentLine == i) {
      mTextPaint.setColor(mCurrentPlayLineColor);
    }
 else {
      mTextPaint.setColor(mNormalColor);
    }
    @SuppressLint(""String_Node_Str"") StaticLayout staticLayout=new StaticLayout(mLrcData.get(i).getText(),mTextPaint,getLrcWidth(),Layout.Alignment.ALIGN_NORMAL,1f,0f,false);
    canvas.save();
    canvas.translate(x,y + mVerticalPadding - staticLayout.getHeight() / 2 - mOffset);
    staticLayout.draw(canvas);
    canvas.restore();
  }
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (isLrcEmpty()) {
    drawEmptyText(canvas);
    return;
  }
  mTextPaint.setTextSize(mLrcTextSize);
  mTextPaint.setTextAlign(Paint.Align.CENTER);
  float y=getLrcHeight() / 2;
  float x=getLrcWidth() * 0.5f + mHorizontalPadding;
  canvas.translate(0,-mOffset);
  for (int i=0; i < getLrcCount(); i++) {
    if (i > 0) {
      y+=(getTextHeight(i - 1) + getTextHeight(i)) / 2 + mLrcLineSpaceHeight;
    }
    if (mCurrentLine == i) {
      mTextPaint.setColor(mCurrentPlayLineColor);
    }
 else {
      mTextPaint.setColor(mNormalColor);
    }
    @SuppressLint(""String_Node_Str"") StaticLayout staticLayout=new StaticLayout(mLrcData.get(i).getText(),mTextPaint,getLrcWidth(),Layout.Alignment.ALIGN_NORMAL,1f,0f,false);
    canvas.save();
    canvas.translate(x,y + mVerticalPadding - staticLayout.getHeight() / 2);
    staticLayout.draw(canvas);
    canvas.restore();
  }
}",0.928053541550474
170822,"public void setLrcData(List<Lrc> lrcData){
  resetView();
  mLrcData=lrcData;
  invalidate();
}","public void setLrcData(List<Lrc> lrcData){
  resetView(DEFAULT_CONTENT);
  mLrcData=lrcData;
  invalidate();
}",0.926829268292683
170823,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isLrcEmpty()) {
    return super.onTouchEvent(event);
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(event);
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    removeCallbacks(mScrollRunnable);
  performClick();
if (!mOverScroller.isFinished()) {
  mOverScroller.abortAnimation();
}
mLastMotionY=event.getY();
isUserScroll=true;
break;
case MotionEvent.ACTION_MOVE:
float moveY=event.getY() - mLastMotionY;
if (Math.abs(moveY) > mScaledTouchSlop) {
mOffset-=moveY;
if (mOffset < 0) {
mOffset=Math.max(mOffset,-getTextHeight(0) - mLrcLineSpaceHeight);
}
float maxHeight=getItemOffsetY(getLrcCount() - 1);
if (mOffset > maxHeight) {
mOffset=Math.min(mOffset,maxHeight + getTextHeight(0) + mLrcLineSpaceHeight);
}
invalidate();
mLastMotionY=event.getY();
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
handleActionUp();
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isLrcEmpty()) {
    return super.onTouchEvent(event);
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(event);
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    performClick();
  removeCallbacks(mScrollRunnable);
if (!mOverScroller.isFinished()) {
  mOverScroller.abortAnimation();
}
mLastMotionY=event.getY();
isUserScroll=true;
break;
case MotionEvent.ACTION_MOVE:
float moveY=event.getY() - mLastMotionY;
if (Math.abs(moveY) > mScaledTouchSlop) {
mOffset-=moveY;
if (mOffset < 0) {
mOffset=Math.max(mOffset,-getTextHeight(0) - mLrcLineSpaceHeight);
}
float maxHeight=getItemOffsetY(getLrcCount() - 1);
if (mOffset > maxHeight) {
mOffset=Math.min(mOffset,maxHeight + getTextHeight(0) + mLrcLineSpaceHeight);
}
mLastMotionY=event.getY();
postInvalidate();
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
handleActionUp();
break;
}
return true;
}",0.9605133267522212
170824,"private void resetView(){
  if (mLrcData != null) {
    mLrcData.clear();
  }
  mCurrentLine=0;
  mOffset=0;
  isUserScroll=false;
  removeCallbacks(mScrollRunnable);
  invalidate();
}","public void resetView(String defaultContent){
  if (mLrcData != null) {
    mLrcData.clear();
  }
  mCurrentLine=0;
  mOffset=0;
  isUserScroll=false;
  mDefaultContent=defaultContent;
  removeCallbacks(mScrollRunnable);
  invalidate();
}",0.0189573459715639
170825,"@Override public void loadLrc(SongEntity entity){
  LrcUseCase.Param param=new LrcUseCase.Param(entity.title,""String_Node_Str"");
  String fileName=entity.title + ""String_Node_Str"" + entity.artistName+ ""String_Node_Str"";
  File lrcFile=new File(FileManager.getInstance().getLrcDir().getAbsolutePath(),fileName);
  Observable.just(lrcFile).flatMap(file -> {
    if (file.exists() && file.canRead()) {
      return Observable.just(file);
    }
    return mLrcUseCase.buildObservable(param).flatMap(body -> {
      boolean saveFile=FileManager.getInstance().saveFile(body.byteStream(),fileName);
      return saveFile ? Observable.just(file) : Observable.empty();
    }
);
  }
).map((Function<File,List<Lrc>>)file -> {
    if (file == null || !file.exists()) {
      return Collections.emptyList();
    }
    return LrcParser.parseLrcFromFile(file);
  }
).compose(RxHelper.ioMain()).subscribeWith(new DefaultDisposableObserver<List<Lrc>>(){
    @Override protected void onStart(){
      super.onStart();
      if (getView() == null) {
        return;
      }
      getView().startDownloadLrc();
    }
    @Override public void onNext(    List<Lrc> lrcs){
      super.onNext(lrcs);
      if (getView() == null) {
        return;
      }
      getView().downloadLrcSuccess(lrcs);
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      if (getView() == null) {
        return;
      }
      getView().downloadFailed(e);
    }
  }
);
}","@Override public void loadLrc(SongEntity entity){
  LrcUseCase.Param param=new LrcUseCase.Param(entity.title,""String_Node_Str"");
  String fileName=entity.title + ""String_Node_Str"" + entity.artistName+ ""String_Node_Str"";
  File lrcFile=new File(FileManager.getInstance().getLrcDir().getAbsolutePath(),fileName);
  Observable.just(lrcFile).flatMap(file -> {
    if (file.exists() && file.canRead()) {
      return Observable.just(file);
    }
    return mLrcUseCase.buildObservable(param).flatMap(responseBody -> {
      boolean saveFile=FileManager.getInstance().saveFile(responseBody.byteStream(),fileName);
      return saveFile ? Observable.just(file) : null;
    }
);
  }
).map((Function<File,List<Lrc>>)file -> {
    if (file == null || !file.exists()) {
      return Collections.emptyList();
    }
    return LrcParser.parseLrcFromFile(file);
  }
).compose(RxHelper.ioMain()).subscribeWith(new DefaultDisposableObserver<List<Lrc>>(){
    @Override protected void onStart(){
      super.onStart();
      if (getView() == null) {
        return;
      }
      getView().startDownloadLrc();
    }
    @Override public void onNext(    List<Lrc> lrcs){
      super.onNext(lrcs);
      if (getView() == null) {
        return;
      }
      getView().downloadLrcSuccess(lrcs);
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      if (getView() == null) {
        return;
      }
      getView().downloadFailed(e);
    }
  }
);
}",0.9856262833675564
170826,"@Override public void downloadLrcSuccess(List<Lrc> lrcs){
  if (lrcs == null || lrcs.isEmpty()) {
    mLvSimple.setDefaultContent(""String_Node_Str"");
    return;
  }
  mLvSimple.setCurrentPlayLineColor(ThemeHelper.getThemeColorResId(this));
  mLvSimple.setLrcData(lrcs);
}","@Override public void downloadLrcSuccess(List<Lrc> lrcs){
  if (lrcs == null || lrcs.isEmpty()) {
    mLvSimple.setDefaultContent(""String_Node_Str"");
    return;
  }
  mLvSimple.setCurrentPlayLineColor(ThemeHelper.getThemeColorResId(this));
  mLvSimple.setLrcData(lrcs);
  mLvSimple.updateTime(MusicManager.getInstance().getCurrentProgress());
  mLvFull.setLrcData(lrcs);
  mLvFull.updateTime(MusicManager.getInstance().getCurrentProgress());
}",0.7597765363128491
170827,"@Override public void downloadFailed(Throwable e){
  mLvSimple.setDefaultContent(""String_Node_Str"");
}","@Override public void downloadFailed(Throwable e){
  mLvSimple.setDefaultContent(""String_Node_Str"");
  mLvFull.setDefaultContent(""String_Node_Str"");
}",0.8095238095238095
170828,"@Override protected void initViews(){
  mIvPlay.setTransitionName(getString(R.string.play_view_transition_name));
  showBackIcon();
  setModeView();
  mToolbarCommon.setBackgroundColor(Color.TRANSPARENT);
}","@Override protected void initViews(){
  mIvPlay.setTransitionName(getString(R.string.play_view_transition_name));
  showBackIcon();
  setModeView();
  mToolbarCommon.setBackgroundColor(Color.TRANSPARENT);
  mLvSimple.setVisibility(View.VISIBLE);
  mLvFull.setVisibility(View.GONE);
  mLvSimple.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mFlPlay.setVisibility(View.GONE);
      mLvFull.setVisibility(View.VISIBLE);
      mLvSimple.setVisibility(View.GONE);
      mImageViewBg.setVisibility(View.VISIBLE);
    }
  }
);
}",0.5275288092189501
170829,"private void setCurProgress(int progress,int duration){
  mSeekPlay.setMax(duration);
  mSeekPlay.setProgress(progress);
  mLvSimple.updateTime(progress);
}","private void setCurProgress(int progress,int duration){
  mSeekPlay.setMax(duration);
  mSeekPlay.setProgress(progress);
  mLvSimple.updateTime(progress);
  mLvFull.updateTime(progress);
}",0.9069767441860463
170830,"@Override public void startDownloadLrc(){
  mLvSimple.setDefaultContent(""String_Node_Str"");
}","@Override public void startDownloadLrc(){
  mLvSimple.resetView(""String_Node_Str"");
  mLvFull.resetView(""String_Node_Str"");
  mLvSimple.setDefaultContent(""String_Node_Str"");
  mLvFull.setDefaultContent(""String_Node_Str"");
}",0.5886075949367089
170831,"@Override public boolean onTouchEvent(MotionEvent event){
  if (isLrcEmpty()) {
    return super.onTouchEvent(event);
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(event);
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    removeCallbacks(mScrollRunnable);
  removeCallbacks(mHideIndicatorRunnable);
if (!mOverScroller.isFinished()) {
  mOverScroller.abortAnimation();
}
mLastMotionX=event.getX();
mLastMotionY=event.getY();
isUserScroll=true;
isDragging=false;
break;
case MotionEvent.ACTION_MOVE:
float moveY=event.getY() - mLastMotionY;
if (Math.abs(moveY) > mScaledTouchSlop) {
isDragging=true;
isShowTimeIndicator=isEnableShowIndicator;
}
if (isDragging) {
mOffset-=moveY;
if (mOffset < 0) {
mOffset=Math.max(mOffset,-getTextHeight(0) - mLrcLineSpaceHeight);
}
float maxHeight=getItemOffsetY(getLrcCount() - 1);
if (mOffset > maxHeight) {
mOffset=Math.min(mOffset,maxHeight + getTextHeight(0) + mLrcLineSpaceHeight);
}
mLastMotionY=event.getY();
postInvalidate();
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (!isDragging && (!isShowTimeIndicator || !onClickPlayButton(event))) {
performClick();
}
handleActionUp(event);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (isLrcEmpty()) {
    return super.onTouchEvent(event);
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(event);
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    removeCallbacks(mScrollRunnable);
  removeCallbacks(mHideIndicatorRunnable);
if (!mOverScroller.isFinished()) {
  mOverScroller.abortAnimation();
}
mLastMotionX=event.getX();
mLastMotionY=event.getY();
isUserScroll=true;
isDragging=false;
break;
case MotionEvent.ACTION_MOVE:
float moveY=event.getY() - mLastMotionY;
if (Math.abs(moveY) > mScaledTouchSlop) {
isDragging=true;
isShowTimeIndicator=isEnableShowIndicator;
}
if (isDragging) {
mOffset-=moveY;
if (mOffset < 0) {
mOffset=Math.max(mOffset,-getTextHeight(0) - mLrcLineSpaceHeight);
}
float maxHeight=getItemOffsetY(getLrcCount() - 1);
if (mOffset > maxHeight) {
mOffset=Math.min(mOffset,maxHeight + getTextHeight(getLrcCount() - 1) + mLrcLineSpaceHeight);
}
mLastMotionY=event.getY();
postInvalidate();
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (!isDragging && (!isShowTimeIndicator || !onClickPlayButton(event))) {
performClick();
}
handleActionUp(event);
break;
}
return true;
}",0.9929133858267716
170832,"private float getTextHeight(int linePosition){
  String text=mLrcData.get(linePosition).getText();
  StaticLayout staticLayout=mStaticLayoutHashMap.get(text);
  if (staticLayout == null) {
    staticLayout=new StaticLayout(text,mTextPaint,getLrcWidth(),Layout.Alignment.ALIGN_NORMAL,1f,0f,false);
    mStaticLayoutHashMap.put(text,staticLayout);
  }
  return staticLayout.getHeight();
}","private float getTextHeight(int linePosition){
  String text=mLrcData.get(linePosition).getText();
  StaticLayout staticLayout=mStaticLayoutHashMap.get(text);
  if (staticLayout == null) {
    mTextPaint.setTextSize(mLrcTextSize);
    staticLayout=new StaticLayout(text,mTextPaint,getLrcWidth(),Layout.Alignment.ALIGN_NORMAL,1f,0f,false);
    mStaticLayoutHashMap.put(text,staticLayout);
  }
  return staticLayout.getHeight();
}",0.9484029484029484
170833,"public void resetView(String defaultContent){
  if (mLrcData != null) {
    mLrcData.clear();
  }
  mLrcMap.clear();
  mStaticLayoutHashMap.clear();
  mCurrentLine=0;
  mOffset=0;
  isUserScroll=false;
  mDefaultContent=defaultContent;
  removeCallbacks(mScrollRunnable);
  postInvalidate();
}","public void resetView(String defaultContent){
  if (mLrcData != null) {
    mLrcData.clear();
  }
  mLrcMap.clear();
  mStaticLayoutHashMap.clear();
  mCurrentLine=0;
  mOffset=0;
  isUserScroll=false;
  isDragging=false;
  mDefaultContent=defaultContent;
  removeCallbacks(mScrollRunnable);
  invalidate();
}",0.9534883720930232
170834,"private void drawLrc(Canvas canvas,float x,float y,int i){
  String text=mLrcData.get(i).getText();
  StaticLayout staticLayout=mLrcMap.get(text);
  if (staticLayout == null) {
    staticLayout=new StaticLayout(text,mTextPaint,getLrcWidth(),Layout.Alignment.ALIGN_NORMAL,1f,0f,false);
    mLrcMap.put(text,staticLayout);
  }
  canvas.save();
  canvas.translate(x,y - getTextHeight(i) / 2 - mOffset);
  staticLayout.draw(canvas);
  canvas.restore();
}","private void drawLrc(Canvas canvas,float x,float y,int i){
  String text=mLrcData.get(i).getText();
  StaticLayout staticLayout=mLrcMap.get(text);
  if (staticLayout == null) {
    mTextPaint.setTextSize(mLrcTextSize);
    staticLayout=new StaticLayout(text,mTextPaint,getLrcWidth(),Layout.Alignment.ALIGN_NORMAL,1f,0f,false);
    mLrcMap.put(text,staticLayout);
  }
  canvas.save();
  canvas.translate(x,y - staticLayout.getHeight() / 2 - mOffset);
  staticLayout.draw(canvas);
  canvas.restore();
}",0.9326315789473684
170835,"public void setLrcData(List<Lrc> lrcData){
  resetView(DEFAULT_CONTENT);
  mLrcData=lrcData;
  postInvalidate();
}","public void setLrcData(List<Lrc> lrcData){
  resetView(DEFAULT_CONTENT);
  mLrcData=lrcData;
  invalidate();
}",0.9732142857142856
170836,"private float getItemOffsetY(int linePosition){
  float tempY=0;
  for (int i=1; i <= linePosition; i++) {
    tempY+=getTextHeight(i) + mLrcLineSpaceHeight;
  }
  return tempY;
}","private float getItemOffsetY(int linePosition){
  float tempY=0;
  for (int i=1; i <= linePosition; i++) {
    tempY+=(getTextHeight(i - 1) + getTextHeight(i)) / 2 + mLrcLineSpaceHeight;
  }
  return tempY;
}",0.9198966408268734
170837,"@Override public void loadLrc(SongEntity entity){
  LrcUseCase.Param param=new LrcUseCase.Param(entity.title,""String_Node_Str"");
  String fileName=entity.title + ""String_Node_Str"" + entity.artistName+ ""String_Node_Str"";
  File lrcFile=new File(FileManager.getInstance().getLrcDir().getAbsolutePath(),fileName);
  Observable.just(lrcFile).flatMap(file -> {
    if (file.exists() && file.canRead()) {
      return Observable.just(file);
    }
    if (entity.type.equals(BaseDb.QueueParam.LOCAL)) {
      return mLrcUseCase.buildObservable(param).flatMap(responseBody -> {
        boolean saveFile=FileManager.getInstance().saveFile(responseBody.byteStream(),fileName);
        return saveFile ? Observable.just(file) : null;
      }
);
    }
 else {
      return mLrcUseCase.getBaiduLrcData(NetConstants.Value.METHOD_LRC,entity.id).flatMap(s -> {
        boolean saveFile=FileManager.getInstance().saveFile(new ByteArrayInputStream(s.getBytes(""String_Node_Str"")),fileName);
        return saveFile ? Observable.just(file) : null;
      }
);
    }
  }
).map((Function<File,List<Lrc>>)file -> {
    if (file == null || !file.exists()) {
      return Collections.emptyList();
    }
    return LrcHelper.parseLrcFromFile(file);
  }
).compose(RxHelper.ioMain()).subscribeWith(new DefaultDisposableObserver<List<Lrc>>(){
    @Override protected void onStart(){
      super.onStart();
      if (getView() == null) {
        return;
      }
      getView().startDownloadLrc();
    }
    @Override public void onNext(    List<Lrc> lrcs){
      super.onNext(lrcs);
      if (getView() == null) {
        return;
      }
      getView().downloadLrcSuccess(lrcs);
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      if (getView() == null) {
        return;
      }
      getView().downloadFailed(e);
    }
  }
);
}","@Override public void loadLrc(SongEntity entity){
  LrcUseCase.Param param=new LrcUseCase.Param(entity.title,""String_Node_Str"");
  String fileName=entity.title + ""String_Node_Str"" + entity.artistName+ ""String_Node_Str"";
  File lrcFile=new File(FileManager.getInstance().getLrcDir().getAbsolutePath(),fileName);
  Observable.just(lrcFile).flatMap(file -> {
    if (file.exists() && file.canRead()) {
      return Observable.just(file);
    }
    if (entity.type.equals(BaseDb.QueueParam.LOCAL)) {
      LogUtil.i(TAG,""String_Node_Str"");
      return mLrcUseCase.buildObservable(param).flatMap(responseBody -> {
        boolean saveFile=FileManager.getInstance().saveFile(responseBody.byteStream(),fileName);
        return saveFile ? Observable.just(file) : null;
      }
);
    }
 else {
      LogUtil.i(TAG,""String_Node_Str"");
      return mLrcUseCase.getBaiduLrcData(NetConstants.Value.METHOD_LRC,entity.id).flatMap(s -> {
        boolean saveFile=FileManager.getInstance().saveFile(new ByteArrayInputStream(s.getBytes(""String_Node_Str"")),fileName);
        return saveFile ? Observable.just(file) : null;
      }
);
    }
  }
).map((Function<File,List<Lrc>>)file -> {
    if (file == null || !file.exists()) {
      return Collections.emptyList();
    }
    return LrcHelper.parseLrcFromFile(file);
  }
).compose(RxHelper.ioMain()).subscribeWith(new DefaultDisposableObserver<List<Lrc>>(){
    @Override protected void onStart(){
      super.onStart();
      if (getView() == null) {
        return;
      }
      getView().startDownloadLrc();
    }
    @Override public void onNext(    List<Lrc> lrcs){
      super.onNext(lrcs);
      if (getView() == null) {
        return;
      }
      getView().downloadLrcSuccess(lrcs);
    }
    @Override public void onError(    Throwable e){
      super.onError(e);
      if (getView() == null) {
        return;
      }
      getView().downloadFailed(e);
    }
  }
);
}",0.9786780383795308
170838,"@Override public void showLightViews(boolean favorite){
  isFavorite=favorite;
  isDarkStyle=true;
  setViewsColor(Color.WHITE);
  mImgFavorite.setImageResource(favorite ? R.drawable.ic_favorite_white : R.drawable.ic_favorite_border_white);
  if (favorite) {
    setImageTint();
  }
  mLvSimple.setNormalColor(ContextCompat.getColor(this,R.color.gray_light));
  mLvFull.setNormalColor(ContextCompat.getColor(this,R.color.gray_light));
  mLvFull.setPlayDrawable(ContextCompat.getDrawable(this,R.drawable.play_white));
}","@Override public void showLightViews(boolean favorite){
  isFavorite=favorite;
  isDarkStyle=true;
  setViewsColor(Color.WHITE);
  mImgFavorite.setImageResource(favorite ? R.drawable.ic_favorite_white : R.drawable.ic_favorite_border_white);
  if (favorite) {
    setImageTint();
  }
  mLvSimple.setNormalColor(ContextCompat.getColor(this,R.color.gray_light));
  mLvFull.setNormalColor(ContextCompat.getColor(this,R.color.gray_light));
  mLvFull.setPlayDrawable(ContextCompat.getDrawable(this,R.drawable.play_white));
  mLvFull.setIndicatorLineColor(ContextCompat.getColor(this,R.color.gray_light));
  mLvFull.setIndicatorTextColor(ContextCompat.getColor(this,R.color.gray_light));
}",0.8633333333333333
170839,"@Override public void showDarkViews(boolean favorite){
  isFavorite=favorite;
  isDarkStyle=false;
  setViewsColor(Color.BLACK);
  mImgFavorite.setImageResource(favorite ? R.drawable.ic_favorite_white : R.drawable.ic_favorite_border_black);
  if (favorite) {
    setImageTint();
  }
  mLvSimple.setNormalColor(ContextCompat.getColor(this,R.color.txt_black));
  mLvFull.setNormalColor(ContextCompat.getColor(this,R.color.txt_black));
  mLvFull.setPlayDrawable(ContextCompat.getDrawable(this,R.drawable.play_black));
}","@Override public void showDarkViews(boolean favorite){
  isFavorite=favorite;
  isDarkStyle=false;
  setViewsColor(Color.BLACK);
  mImgFavorite.setImageResource(favorite ? R.drawable.ic_favorite_white : R.drawable.ic_favorite_border_black);
  if (favorite) {
    setImageTint();
  }
  mLvSimple.setNormalColor(ContextCompat.getColor(this,R.color.txt_black));
  mLvFull.setNormalColor(ContextCompat.getColor(this,R.color.txt_black));
  mLvFull.setPlayDrawable(ContextCompat.getDrawable(this,R.drawable.play_black));
  mLvFull.setIndicatorLineColor(ContextCompat.getColor(this,R.color.txt_black));
  mLvFull.setIndicatorTextColor(ContextCompat.getColor(this,R.color.txt_black));
}",0.864321608040201
170840,"@Override public void setViewBgColor(int paletteColor){
  mClPlay.setBackgroundColor(paletteColor);
}","@Override public void setViewBgColor(int paletteColor){
}",0.7215189873417721
170841,"private void playPrevious(){
  MusicManager.getInstance().skipToPrevious();
  refreshFavoriteIcon();
}","private void playPrevious(){
  mVpPlayView.setCurrentItem(mVpPlayView.getCurrentItem() - 1,true);
  refreshFavoriteIcon();
}",0.6548672566371682
170842,"@Override public void onPageSelected(int position){
  if (MusicManager.getInstance().getCurPosition() > position) {
    MusicManager.getInstance().skipToPrevious();
  }
 else   if (MusicManager.getInstance().getCurPosition() < position) {
    MusicManager.getInstance().skipToNext();
  }
}","@Override public void onPageSelected(int position){
  if (MusicManager.getInstance().getCurPosition() > position) {
    mPlayHandler.sendEmptyMessageDelayed(MSG_PREVIOUS,DELAY_PLAY);
  }
 else   if (MusicManager.getInstance().getCurPosition() < position) {
    mPlayHandler.sendEmptyMessageDelayed(MSG_NEXT,DELAY_PLAY);
  }
}",0.4234527687296417
170843,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  int color=adapter.getColorArr().get(position % songData.size());
  int nextColor=adapter.getColorArr().get((position + 1) % songData.size());
  int evaluateColor=(int)argbEvaluator.evaluate(positionOffset,color,nextColor);
  mClPlay.setBackgroundColor(evaluateColor);
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  int color=mPagerAdapter.getColorArr().get(position % songData.size());
  int nextColor=mPagerAdapter.getColorArr().get((position + 1) % songData.size());
  int evaluateColor=(int)argbEvaluator.evaluate(positionOffset,color,nextColor);
  mClPlay.setBackgroundColor(evaluateColor);
}",0.9413333333333334
170844,"@Override public void currentPlay(SongEntity songEntity){
  if (songEntity == null) {
    return;
  }
  mToolbarCommon.setTitle(songEntity.title);
  mToolbarCommon.setSubtitle(songEntity.artistName);
  mTxtTotalLength.setText(songEntity.songLength);
  mPresenter.setCoverImgUrl(songEntity.albumCover);
  mPresenter.isFavoriteSong(songEntity.id);
  if (MusicManager.getInstance().isPlaying() && !mPlayPause.isPlaying()) {
    mPlayPause.playWithoutAnim();
  }
  int curPosition=MusicManager.getInstance().getCurPosition();
  LogUtil.e(""String_Node_Str"",""String_Node_Str"" + curPosition);
  mVpPlayView.setCurrentItem(curPosition,false);
}","@Override public void currentPlay(SongEntity songEntity){
  if (songEntity == null) {
    return;
  }
  mToolbarCommon.setTitle(songEntity.title);
  mToolbarCommon.setSubtitle(songEntity.artistName);
  mTxtTotalLength.setText(songEntity.songLength);
  mPresenter.setCoverImgUrl(songEntity.albumCover);
  mPresenter.isFavoriteSong(songEntity.id);
  if (MusicManager.getInstance().isPlaying() && !mPlayPause.isPlaying()) {
    mPlayPause.playWithoutAnim();
  }
  int curPosition=MusicManager.getInstance().getCurPosition();
  LogUtil.e(""String_Node_Str"",""String_Node_Str"" + curPosition);
  mVpPlayView.setCurrentItem(curPosition);
}",0.995260663507109
170845,"private void setUpViewPager(){
  mImageViewBg.setVisibility(View.INVISIBLE);
  List<SongEntity> songData=MusicManager.getInstance().getMusicService().getSongData();
  PlayViewAdapter adapter=new PlayViewAdapter(songData);
  mVpPlayView.setPageTransformer(false,new PlayPagerTransformer());
  mVpPlayView.setAdapter(adapter);
  ArgbEvaluator argbEvaluator=new ArgbEvaluator();
  mVpPlayView.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
      int color=adapter.getColorArr().get(position % songData.size());
      int nextColor=adapter.getColorArr().get((position + 1) % songData.size());
      int evaluateColor=(int)argbEvaluator.evaluate(positionOffset,color,nextColor);
      mClPlay.setBackgroundColor(evaluateColor);
    }
    @Override public void onPageSelected(    int position){
      if (MusicManager.getInstance().getCurPosition() > position) {
        MusicManager.getInstance().skipToPrevious();
      }
 else       if (MusicManager.getInstance().getCurPosition() < position) {
        MusicManager.getInstance().skipToNext();
      }
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
}","private void setUpViewPager(){
  mImageViewBg.setVisibility(View.INVISIBLE);
  List<SongEntity> songData=MusicManager.getInstance().getMusicService().getSongData();
  mPagerAdapter=new PlayViewAdapter(songData);
  mVpPlayView.setPageTransformer(false,new PlayPagerTransformer());
  mVpPlayView.setAdapter(mPagerAdapter);
  int curPosition=MusicManager.getInstance().getCurPosition();
  mVpPlayView.setCurrentItem(curPosition);
  mPagerAdapter.setOnPaletteCompleteListener(() -> mClPlay.setBackgroundColor(mPagerAdapter.getColorArr().get(mVpPlayView.getCurrentItem())));
  ArgbEvaluator argbEvaluator=new ArgbEvaluator();
  mVpPlayView.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
      int color=mPagerAdapter.getColorArr().get(position % songData.size());
      int nextColor=mPagerAdapter.getColorArr().get((position + 1) % songData.size());
      int evaluateColor=(int)argbEvaluator.evaluate(positionOffset,color,nextColor);
      mClPlay.setBackgroundColor(evaluateColor);
    }
    @Override public void onPageSelected(    int position){
      if (MusicManager.getInstance().getCurPosition() > position) {
        mPlayHandler.sendEmptyMessageDelayed(MSG_PREVIOUS,DELAY_PLAY);
      }
 else       if (MusicManager.getInstance().getCurPosition() < position) {
        mPlayHandler.sendEmptyMessageDelayed(MSG_NEXT,DELAY_PLAY);
      }
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
}",0.6744597945448105
170846,"private void playNext(){
  MusicManager.getInstance().skipToNext();
  refreshFavoriteIcon();
}","private void playNext(){
  mVpPlayView.setCurrentItem(mVpPlayView.getCurrentItem() + 1,true);
  refreshFavoriteIcon();
}",0.6448598130841121
170847,"@Override public void onResourceReady(Bitmap resource,Transition<? super Bitmap> transition){
  PaletteColor.mainColorObservable(ThemeHelper.getThemeColorResId(context),resource).subscribe(integer -> {
    mColorArr.put(position,integer);
    Drawable drawable=ScrimUtil.makeCubicGradientScrimDrawable(integer,8,Gravity.BOTTOM);
    frameLayout.setForeground(drawable);
    ivPlay.setImageBitmap(resource);
  }
);
}","@Override public void onResourceReady(Bitmap resource,Transition<? super Bitmap> transition){
  PaletteColor.mainColorObservable(ThemeHelper.getThemeColorResId(context),resource).subscribe(integer -> {
    mColorArr.put(position,integer);
    if (mOnPaletteCompleteListener != null) {
      mOnPaletteCompleteListener.onPaletteComplete();
    }
    Drawable drawable=ScrimUtil.makeCubicGradientScrimDrawable(integer,8,Gravity.BOTTOM);
    frameLayout.setForeground(drawable);
    ivPlay.setImageBitmap(resource);
  }
);
}",0.8867521367521367
170848,"@Override public Object instantiateItem(ViewGroup container,int position){
  Context context=container.getContext();
  View view=LayoutInflater.from(context).inflate(R.layout.item_play_view,container,false);
  ImageView ivPlay=(ImageView)view.findViewById(R.id.iv_play);
  FrameLayout frameLayout=(FrameLayout)view.findViewById(R.id.fl_play);
  ImageLoader.INSTANCE.display(context,new ImageConfig.Builder().asBitmap(true).url(mSongEntities.get(position).albumCover).cacheStrategy(ImageConfig.CACHE_NONE).skipMemoryCache(true).isRound(false).placeholder(R.drawable.ic_default).intoTarget(new SimpleTarget<Bitmap>(){
    @Override public void onResourceReady(    Bitmap resource,    Transition<? super Bitmap> transition){
      PaletteColor.mainColorObservable(ThemeHelper.getThemeColorResId(context),resource).subscribe(integer -> {
        mColorArr.put(position,integer);
        Drawable drawable=ScrimUtil.makeCubicGradientScrimDrawable(integer,8,Gravity.BOTTOM);
        frameLayout.setForeground(drawable);
        ivPlay.setImageBitmap(resource);
      }
);
    }
  }
).build());
  container.addView(view);
  return view;
}","@Override public Object instantiateItem(ViewGroup container,int position){
  Context context=container.getContext();
  View view=LayoutInflater.from(context).inflate(R.layout.item_play_view,container,false);
  ImageView ivPlay=(ImageView)view.findViewById(R.id.iv_play);
  FrameLayout frameLayout=(FrameLayout)view.findViewById(R.id.fl_play);
  ImageLoader.INSTANCE.display(context,new ImageConfig.Builder().asBitmap(true).url(mSongEntities.get(position).albumCover).isRound(false).placeholder(R.drawable.ic_default).intoTarget(new SimpleTarget<Bitmap>(){
    @Override public void onResourceReady(    Bitmap resource,    Transition<? super Bitmap> transition){
      PaletteColor.mainColorObservable(ThemeHelper.getThemeColorResId(context),resource).subscribe(integer -> {
        mColorArr.put(position,integer);
        if (mOnPaletteCompleteListener != null) {
          mOnPaletteCompleteListener.onPaletteComplete();
        }
        Drawable drawable=ScrimUtil.makeCubicGradientScrimDrawable(integer,8,Gravity.BOTTOM);
        frameLayout.setForeground(drawable);
        ivPlay.setImageBitmap(resource);
      }
);
    }
  }
).build());
  container.addView(view);
  return view;
}",0.9232758620689656
170849,"public static void navigateToAlbumDetail(Context context,ImageView view,String transName,String albumName,long id){
  Fragment fragment=AlbumDetailFragment.newInstance(transName,albumName,id);
  FragmentTransaction transaction=((AppCompatActivity)context).getSupportFragmentManager().beginTransaction();
  FragmentAnimUtil.setEnterExitAnim(fragment);
  if (view != null && transName != null)   transaction.addSharedElement(view,transName).hide(((AppCompatActivity)context).getSupportFragmentManager().findFragmentById(R.id.layout_main)).add(R.id.layout_main,fragment).addToBackStack(null).commit();
}","public static void navigateToAlbumDetail(Context context,ImageView view,String transName,String albumName,long id){
  Fragment fragment=AlbumDetailFragment.newInstance(transName,albumName,id);
  FragmentTransaction transaction=((AppCompatActivity)context).getSupportFragmentManager().beginTransaction();
  FragmentAnimUtil.setEnterExitAnim(fragment);
  if (view != null && transName != null && !""String_Node_Str"".equals(transName)) {
    transaction.addSharedElement(view,transName);
  }
  transaction.hide(((AppCompatActivity)context).getSupportFragmentManager().findFragmentById(R.id.layout_main)).add(R.id.layout_main,fragment).addToBackStack(null).commit();
}",0.948535233570863
170850,"public static void navigateToArtistDetail(Context context,ImageView view,String transName,String artistName,long artistId,int albumNum,int songNum){
  Fragment fragment=ArtistDetailFragment.newInstance(transName,artistName,artistId,albumNum,songNum);
  FragmentTransaction transaction=((AppCompatActivity)context).getSupportFragmentManager().beginTransaction();
  FragmentAnimUtil.setEnterExitAnim(fragment);
  transaction.addSharedElement(view,transName).hide(((AppCompatActivity)context).getSupportFragmentManager().findFragmentById(R.id.layout_main)).add(R.id.layout_main,fragment).addToBackStack(null).commit();
}","public static void navigateToArtistDetail(Context context,ImageView view,String transName,String artistName,long artistId,int albumNum,int songNum){
  Fragment fragment=ArtistDetailFragment.newInstance(transName,artistName,artistId,albumNum,songNum);
  FragmentTransaction transaction=((AppCompatActivity)context).getSupportFragmentManager().beginTransaction();
  FragmentAnimUtil.setEnterExitAnim(fragment);
  if (transName != null && !""String_Node_Str"".equals(transName) && view != null) {
    transaction.addSharedElement(view,transName);
  }
  transaction.hide(((AppCompatActivity)context).getSupportFragmentManager().findFragmentById(R.id.layout_main)).add(R.id.layout_main,fragment).addToBackStack(null).commit();
}",0.922272047832586
170851,"public static Observable<Bitmap> albumCoverObservable(Context context,SongEntity entity){
  return Observable.create(e -> {
    Bitmap bitmap;
    String coverUri=LocalUtil.getCoverUri(context,entity.albumId);
    if (coverUri != null && new File(coverUri).exists()) {
      bitmap=BitmapFactory.decodeFile(coverUri);
    }
 else {
      Drawable drawable=ContextCompat.getDrawable(context,R.drawable.ic_album_default);
      bitmap=((BitmapDrawable)drawable).getBitmap();
    }
    e.onNext(bitmap);
    e.onComplete();
  }
);
}","/** 
 * 专辑图片 Observable
 * @param context context
 * @param entity 音乐
 * @return Observable
 */
@SuppressWarnings(""String_Node_Str"") public static Observable<Bitmap> albumCoverObservable(Context context,SongEntity entity){
  return Observable.create(e -> {
    Bitmap bitmap;
    String coverUri=LocalUtil.getCoverUri(context,entity.albumId);
    if (coverUri != null && new File(coverUri).exists()) {
      bitmap=BitmapFactory.decodeFile(coverUri);
    }
 else {
      Drawable drawable=ContextCompat.getDrawable(context,R.drawable.ic_album_default);
      bitmap=((BitmapDrawable)drawable).getBitmap();
    }
    e.onNext(bitmap);
    e.onComplete();
  }
);
}",0.8883291351805206
170852,"@Override public Observable<List<QueueSongBean>> getQueueData(final String[] songIds){
  return Observable.create(new ObservableOnSubscribe<List<QueueSongBean>>(){
    @Override public void subscribe(    @NonNull ObservableEmitter<List<QueueSongBean>> e) throws Exception {
      List<QueueSongBean> songBeen=PlayQueueDao.getInstance(mContext).queryQueue(songIds);
      e.onNext(songBeen);
      e.onComplete();
    }
  }
);
}","@Override public Observable<List<QueueSongBean>> getQueueData(final String[] songIds){
  return Observable.create(new ObservableOnSubscribe<List<QueueSongBean>>(){
    @Override public void subscribe(    @NonNull ObservableEmitter<List<QueueSongBean>> e) throws Exception {
      List<QueueSongBean> songBeen=PlayQueueDao.getInstance(mContext).queryQueue(songIds);
      e.onNext(songBeen != null ? songBeen : Collections.<QueueSongBean>emptyList());
      e.onComplete();
    }
  }
);
}",0.8949671772428884
170853,"@SuppressWarnings(""String_Node_Str"") public static <T>ResponseWrapper<T> errorReturn(Status status,String... msgs){
  String msg;
  if (msgs.length == 0) {
    msg=String.format(status.getMsg(),msgs);
  }
 else {
    msg=status.getMsg();
  }
  return new ResponseWrapper<T>(status.getCode(),msg);
}","@SuppressWarnings(""String_Node_Str"") public static <T>ResponseWrapper<T> errorReturn(Status status,String... msgs){
  String msg;
  if (msgs.length > 0) {
    msg=String.format(status.getMsg(),msgs);
  }
 else {
    msg=status.getMsg();
  }
  return new ResponseWrapper<T>(status.getCode(),msg);
}",0.9949579831932772
170854,"@RequestMapping(value=""String_Node_Str"") public String notFound404(Map<String,Object> map){
  map.put(HEAD_BANNER_KEY,HeadBannerConstants.getInstance()._404VO);
  return ""String_Node_Str"";
}","@RequestMapping(value={""String_Node_Str"",""String_Node_Str""}) public String notFound404(Map<String,Object> map){
  map.put(HEAD_BANNER_KEY,HeadBannerConstants.getInstance()._404VO);
  return ""String_Node_Str"";
}",0.865
170855,"@RequestMapping(value=""String_Node_Str"") public String interError500(Map<String,Object> map){
  map.put(HEAD_BANNER_KEY,HeadBannerConstants.getInstance()._500VO);
  return ""String_Node_Str"";
}","@RequestMapping(value={""String_Node_Str"",""String_Node_Str""}) public String interError500(Map<String,Object> map){
  map.put(HEAD_BANNER_KEY,HeadBannerConstants.getInstance()._500VO);
  return ""String_Node_Str"";
}",0.8663366336633663
170856,"/** 
 * {@inheritDoc}NOTE: Not presently supported, will throw an UnsupportedOperationException
 */
@Override @RequiresApi(api=Build.VERSION_CODES.JELLY_BEAN) public void setWriteAheadLoggingEnabled(boolean enabled){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","void setWriteAheadLoggingEnabled(boolean writeAheadLoggingEnabled){
  walEnabled=writeAheadLoggingEnabled;
  if (wrappedDb != null) {
    setupWAL(wrappedDb);
  }
}",0.3108108108108108
170857,"Database getWrappedDb(SQLiteDatabase db){
  if (wrappedDb == null) {
    wrappedDb=new Database(db);
  }
  return (wrappedDb);
}","Database getWrappedDb(SQLiteDatabase db){
  if (wrappedDb == null) {
    wrappedDb=new Database(db);
    if (walEnabled != null) {
      setupWAL(wrappedDb);
    }
  }
  return (wrappedDb);
}",0.8025078369905956
170858,"/** 
 * {@inheritDoc}
 */
@Override public int update(String table,int conflictAlgorithm,ContentValues values,String whereClause,Object[] whereArgs){
  if (values == null || values.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder sql=new StringBuilder(120);
  sql.append(""String_Node_Str"");
  sql.append(CONFLICT_VALUES[conflictAlgorithm]);
  sql.append(table);
  sql.append(""String_Node_Str"");
  int setValuesSize=values.size();
  int bindArgsSize=(whereArgs == null) ? setValuesSize : (setValuesSize + whereArgs.length);
  Object[] bindArgs=new Object[bindArgsSize];
  int i=0;
  for (  String colName : values.keySet()) {
    sql.append((i > 0) ? ""String_Node_Str"" : ""String_Node_Str"");
    sql.append(colName);
    bindArgs[i++]=values.get(colName);
    sql.append(""String_Node_Str"");
  }
  if (whereArgs != null) {
    for (i=setValuesSize; i < bindArgsSize; i++) {
      bindArgs[i]=whereArgs[i - setValuesSize];
    }
  }
  if (!isEmpty(whereClause)) {
    sql.append(""String_Node_Str"");
    sql.append(whereClause);
  }
  SupportSQLiteStatement stmt=compileStatement(sql.toString());
  SimpleSQLiteQuery.bind(stmt,bindArgs);
  return stmt.executeUpdateDelete();
}","/** 
 * {@inheritDoc}
 */
@Override public int update(String table,int conflictAlgorithm,ContentValues values,String whereClause,Object[] whereArgs){
  if (values == null || values.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder sql=new StringBuilder(120);
  sql.append(""String_Node_Str"");
  sql.append(CONFLICT_VALUES[conflictAlgorithm]);
  sql.append(table);
  sql.append(""String_Node_Str"");
  int setValuesSize=values.size();
  int bindArgsSize=(whereArgs == null) ? setValuesSize : (setValuesSize + whereArgs.length);
  Object[] bindArgs=new Object[bindArgsSize];
  int i=0;
  for (  String colName : values.keySet()) {
    sql.append((i > 0) ? ""String_Node_Str"" : ""String_Node_Str"");
    sql.append(colName);
    bindArgs[i++]=values.get(colName);
    sql.append(""String_Node_Str"");
  }
  if (whereArgs != null) {
    for (i=setValuesSize; i < bindArgsSize; i++) {
      bindArgs[i]=whereArgs[i - setValuesSize];
    }
  }
  if (!isEmpty(whereClause)) {
    sql.append(""String_Node_Str"");
    sql.append(whereClause);
  }
  SupportSQLiteStatement statement=compileStatement(sql.toString());
  try {
    SimpleSQLiteQuery.bind(statement,bindArgs);
    return statement.executeUpdateDelete();
  }
  finally {
    try {
      statement.close();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}",0.9233128834355828
170859,"/** 
 * {@inheritDoc}
 */
@Override public int delete(String table,String whereClause,Object[] whereArgs){
  String query=""String_Node_Str"" + table + (isEmpty(whereClause) ? ""String_Node_Str"" : ""String_Node_Str"" + whereClause);
  SupportSQLiteStatement statement=compileStatement(query);
  SimpleSQLiteQuery.bind(statement,whereArgs);
  return statement.executeUpdateDelete();
}","/** 
 * {@inheritDoc}
 */
@SuppressWarnings(""String_Node_Str"") @Override public int delete(String table,String whereClause,Object[] whereArgs){
  String query=""String_Node_Str"" + table + (isEmpty(whereClause) ? ""String_Node_Str"" : ""String_Node_Str"" + whereClause);
  SupportSQLiteStatement statement=compileStatement(query);
  try {
    SimpleSQLiteQuery.bind(statement,whereArgs);
    return statement.executeUpdateDelete();
  }
  finally {
    try {
      statement.close();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}",0.7924528301886793
170860,"@Override public void onAttach(Context context){
  AndroidInjection.inject(this);
  super.onAttach(context);
}","@Override public void onAttach(Context context){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    AndroidInjection.inject(this);
  }
  super.onAttach(context);
}",0.7801418439716312
170861,"@Override public void appendOut(final byte[] chars,final int start,final int end){
  mHandler.post(new Runnable(){
    @Override public void run(){
      CharSequence charSequence=new String(chars).subSequence(start,end);
      SpannableString spannableString=new SpannableString(charSequence);
      Matcher matcher=PatternFactory.JAVA_FILE.matcher(spannableString);
      int color=ContextCompat.getColor(getContext(),R.color.dark_color_file_java);
      while (matcher.find()) {
        spannableString.setSpan(new ForegroundColorSpan(color),matcher.start(),matcher.end(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
      matcher=PatternFactory.JAVA_FILE_LINE_COL.matcher(spannableString);
      while (matcher.find()) {
        spannableString.setSpan(new ForegroundColorSpan(color),matcher.start(),matcher.end(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
      mCompileMsg.append(spannableString);
      mScrollView.fullScroll(View.FOCUS_DOWN);
    }
  }
);
}","@Override public void appendOut(final byte[] chars,final int start,final int end){
  append(new String(chars,start,end));
}",0.2191528545119705
170862,"@Override public void removePage(int position){
  Fragment existingFragment=mPageAdapter.getExistingFragment(position);
  if (existingFragment == null) {
    if (DLog.DEBUG)     DLog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + position);
    return;
  }
  String filePath=existingFragment.getTag();
  mFileManager.removeTabFile(filePath);
  mPageAdapter.remove(position);
  invalidateTab();
  Toast.makeText(mContext,mContext.getString(R.string.closed) + ""String_Node_Str"" + new File(filePath).getName(),Toast.LENGTH_SHORT).show();
}","@Override public void removePage(int position){
  if (position >= mPageAdapter.getCount()) {
    return;
  }
  Fragment existingFragment=mPageAdapter.getExistingFragment(position);
  if (existingFragment == null) {
    if (DLog.DEBUG)     DLog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + position);
    return;
  }
  String filePath=existingFragment.getTag();
  mFileManager.removeTabFile(filePath);
  mPageAdapter.remove(position);
  invalidateTab();
  Toast.makeText(mContext,mContext.getString(R.string.closed) + ""String_Node_Str"" + new File(filePath).getName(),Toast.LENGTH_SHORT).show();
}",0.9460654288240496
170863,"public void display(List<Diagnostic> diagnostics){
  view.display(diagnostics);
}","public void display(List<Diagnostic> diagnostics){
  this.view=(DiagnosticContract.View)adapter.getExistingFragment(1);
  if (view != null) {
    view.setPresenter(this);
    view.display(diagnostics);
  }
}",0.5625
170864,"@Override public void clear(){
  this.view=(DiagnosticContract.View)adapter.getExistingFragment(1);
  if (view != null) {
    view.clear();
  }
}","@Override public void clear(){
  this.view=(DiagnosticContract.View)adapter.getExistingFragment(1);
  if (view != null) {
    view.setPresenter(this);
    view.clear();
  }
}",0.9090909090909092
170865,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  if (savedInstanceState != null) {
    this.mProjectFile=(JavaProjectFile)savedInstanceState.getSerializable(KEY_PROJECT_FILE);
  }
 else {
    this.mProjectFile=ProjectManager.getLastProject(this);
  }
  bindView();
  setupToolbar();
  setupFileView(savedInstanceState);
  setupEditor();
  FragmentManager fm=getSupportFragmentManager();
  List<PageDescriptor> pageDescriptors=new ArrayList<>();
  pageDescriptors.add(new SimplePageDescriptor(MessageFragment.TAG,""String_Node_Str""));
  pageDescriptors.add(new SimplePageDescriptor(DiagnosticFragment.TAG,""String_Node_Str""));
  BottomPageAdapter bottomAdapter=new BottomPageAdapter(fm,pageDescriptors);
  mMessagePresenter=new MessagePresenter(this,bottomAdapter);
  mDiagnosticPresenter=new DiagnosticPresenter(this,bottomAdapter,mPagePresenter);
  mBottomPage=(ViewPager)findViewById(R.id.bottom_page);
  mBottomPage.setAdapter(bottomAdapter);
  mBottomPage.setOffscreenPageLimit(bottomAdapter.getCount());
  TabLayout bottomTab=(TabLayout)findViewById(R.id.bottom_tab);
  bottomTab.setupWithViewPager(mBottomPage);
  createProjectIfNeed();
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  if (savedInstanceState != null) {
    this.mProjectFile=(JavaProjectFile)savedInstanceState.getSerializable(KEY_PROJECT_FILE);
  }
 else {
    this.mProjectFile=ProjectManager.getLastProject(this);
  }
  bindView();
  setupToolbar();
  setupFileView(savedInstanceState);
  setupEditor();
  FragmentManager fm=getSupportFragmentManager();
  List<PageDescriptor> pageDescriptors=new ArrayList<>();
  pageDescriptors.add(new SimplePageDescriptor(MessageFragment.TAG,""String_Node_Str""));
  pageDescriptors.add(new SimplePageDescriptor(DiagnosticFragment.TAG,""String_Node_Str""));
  BottomPageAdapter bottomAdapter=new BottomPageAdapter(fm,pageDescriptors);
  mBottomPage=(ViewPager)findViewById(R.id.bottom_page);
  mBottomPage.setAdapter(bottomAdapter);
  mBottomPage.setOffscreenPageLimit(bottomAdapter.getCount());
  mMessagePresenter=new MessagePresenter(this,bottomAdapter);
  mDiagnosticPresenter=new DiagnosticPresenter(this,bottomAdapter,mPagePresenter);
  TabLayout bottomTab=(TabLayout)findViewById(R.id.bottom_tab);
  bottomTab.setupWithViewPager(mBottomPage);
  createProjectIfNeed();
}",0.8837209302325582
170866,"@Override public void click(Diagnostic diagnostic){
  Log.d(TAG,""String_Node_Str"" + diagnostic + ""String_Node_Str"");
  Object source=diagnostic.getSource();
  if (source instanceof JavaFileObject) {
    String path=((JavaFileObject)source).getName();
    int i=mPagePresenter.gotoPage(path);
    if (i == -1) {
      mPagePresenter.addPage(path,true);
    }
    EditPageContract.View editor=mPagePresenter.getCurrentPage();
    if (editor == null) {
      Log.d(TAG,""String_Node_Str"");
      return;
    }
    long startPosition=diagnostic.getStartPosition();
    long endPosition=diagnostic.getEndPosition();
    editor.highlightError(startPosition,endPosition);
  }
 else {
  }
}","@Override public void click(Diagnostic diagnostic){
  Log.d(TAG,""String_Node_Str"" + diagnostic + ""String_Node_Str"");
  Object source=diagnostic.getSource();
  if (source instanceof JavaFileObject) {
    String path=((JavaFileObject)source).getName();
    int i=mPagePresenter.gotoPage(path);
    if (i == -1) {
      mPagePresenter.addPage(path,true);
    }
    EditPageContract.View editor=mPagePresenter.getCurrentPage();
    if (editor == null) {
      Log.d(TAG,""String_Node_Str"");
      return;
    }
    int startPosition=(int)diagnostic.getStartPosition();
    int endPosition=(int)diagnostic.getEndPosition();
    editor.highlightError(startPosition,endPosition);
    editor.setCursorPosition(endPosition);
  }
 else {
  }
}",0.8634111818825194
170867,"@Override public boolean hasPage(String path){
  return false;
}","@Override public boolean hasPage(String path){
  return mPageAdapter.getPositionForTag(path) > -1;
}",0.7439024390243902
170868,"@Override public int getPagePosition(String path){
  return 0;
}","@Override public int getPagePosition(String path){
  return mPageAdapter.getPositionForTag(path);
}",0.7730061349693251
170869,"@Override public void highlightError(long startPosition,long endPosition){
  mCodeEditor.highlightError(startPosition,endPosition);
}","@Override public void highlightError(long startPosition,long endPosition){
  if (mCodeEditor != null) {
    mCodeEditor.highlightError(startPosition,endPosition);
  }
}",0.8837209302325582
170870,"@Override public void click(Diagnostic diagnostic){
  Log.d(TAG,""String_Node_Str"" + diagnostic + ""String_Node_Str"");
  Object source=diagnostic.getSource();
  if (source instanceof JavaFileObject) {
    String path=((JavaFileObject)source).getName();
    int i=mPagePresenter.gotoPage(path);
    if (i == -1) {
      mPagePresenter.addPage(path,true);
    }
    EditPageContract.View editor=mPagePresenter.getCurrentPage();
    if (editor == null)     return;
    long startPosition=diagnostic.getStartPosition();
    long endPosition=diagnostic.getEndPosition();
    editor.highlightError(startPosition,endPosition);
  }
 else {
  }
}","@Override public void click(Diagnostic diagnostic){
  Log.d(TAG,""String_Node_Str"" + diagnostic + ""String_Node_Str"");
  Object source=diagnostic.getSource();
  if (source instanceof JavaFileObject) {
    String path=((JavaFileObject)source).getName();
    int i=mPagePresenter.gotoPage(path);
    if (i == -1) {
      mPagePresenter.addPage(path,true);
    }
    EditPageContract.View editor=mPagePresenter.getCurrentPage();
    if (editor == null) {
      Log.d(TAG,""String_Node_Str"");
      return;
    }
    long startPosition=diagnostic.getStartPosition();
    long endPosition=diagnostic.getEndPosition();
    editor.highlightError(startPosition,endPosition);
  }
 else {
  }
}",0.9483282674772036
170871,"@Override public EditPageContract.View getCurrentPage(){
  return null;
}","@Override public EditPageContract.View getCurrentPage(){
  return mPageAdapter.getCurrentFragment();
}",0.8
170872,"protected void bindView(){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mKeyList=(SymbolListView)findViewById(R.id.recycler_view);
  mFileManager=new FileManager(this);
  navigationView=(NavigationView)findViewById(R.id.navigation_view);
  mTabLayout=(TabLayout)findViewById(R.id.tab_layout);
  mContainerSymbol=findViewById(R.id.container_symbol);
  mViewPager=(ViewPager)findViewById(R.id.view_pager);
  mContainerOutput=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
}","protected void bindView(){
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mKeyList=(SymbolListView)findViewById(R.id.recycler_view);
  mFileManager=new FileManager(this);
  navigationView=(NavigationView)findViewById(R.id.navigation_view);
  mTabLayout=(TabLayout)findViewById(R.id.tab_layout);
  mContainerSymbol=findViewById(R.id.container_symbol);
  mViewPager=(ViewPager)findViewById(R.id.view_pager);
  mContainerOutput=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  View toggle=findViewById(R.id.img_toggle);
  toggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mContainerOutput.getPanelState() == PanelState.EXPANDED) {
        mContainerOutput.setPanelState(PanelState.COLLAPSED);
      }
 else       if (mContainerOutput.getPanelState() == PanelState.COLLAPSED) {
        mContainerOutput.setPanelState(PanelState.EXPANDED);
      }
    }
  }
);
}",0.6928916494133885
170873,"protected void onShowKeyboard(){
  mTabLayout.setVisibility(View.GONE);
  mHandler.postDelayed(new Runnable(){
    @Override public void run(){
      if (mContainerOutput != null) {
        if (mContainerOutput.getPanelState() == SlidingUpPanelLayout.PanelState.EXPANDED) {
          mContainerOutput.setPanelState(SlidingUpPanelLayout.PanelState.COLLAPSED);
          mContainerOutput.setTouchEnabled(false);
          mContainerOutput.setEnabled(false);
        }
      }
    }
  }
,100);
}","protected void onShowKeyboard(){
  mTabLayout.setVisibility(View.GONE);
  mHandler.postDelayed(new Runnable(){
    @Override public void run(){
      if (mContainerOutput != null) {
        if (mContainerOutput.getPanelState() == PanelState.EXPANDED) {
          mContainerOutput.setPanelState(PanelState.COLLAPSED);
          mContainerOutput.setTouchEnabled(false);
          mContainerOutput.setEnabled(false);
        }
      }
    }
  }
,100);
}",0.9554140127388536
170874,"@Override public void run(){
  for (int i=0; i < mPageAdapter.getCount(); i++) {
    final TabLayout.Tab tab=mTabLayout.getTabAt(i);
    View view=null;
    if (tab != null) {
      tab.setCustomView(R.layout.item_tab_file);
      view=tab.getCustomView();
    }
    if (view != null) {
      View close=view.findViewById(R.id.img_close);
      final int position=i;
      close.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          removePage(position);
        }
      }
);
      TextView txtTitle=view.findViewById(R.id.txt_title);
      txtTitle.setText(mPageAdapter.getPageTitle(i));
      txtTitle.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          mViewPager.setCurrentItem(position);
        }
      }
);
      if (i == mViewPager.getCurrentItem()) {
        tab.select();
      }
    }
  }
}","@Override public void run(){
  showDialogCreateProject();
}",0.0940695296523517
170875,"@Override protected void onPause(){
  super.onPause();
  JavaPreferences preferences=getPreferences();
  if (preferences != null) {
    preferences.put(JavaPreferences.TAB_POSITION_FILE,mTabLayout.getSelectedTabPosition());
  }
  ProjectManager.saveProject(this,mProjectFile);
}","@Override protected void onPause(){
  super.onPause();
  mPagePresenter.pause();
  ProjectManager.saveProject(this,mProjectFile);
}",0.5770171149144254
170876,"@Override protected void onResume(){
  super.onResume();
  Intent intent=getIntent();
  if (intent != null) {
    if (intent.getStringExtra(CompileManager.FILE_PATH) != null) {
      String filePath=intent.getStringExtra(CompileManager.FILE_PATH);
      addNewPageEditor(new File(filePath),SELECT);
      intent.removeExtra(CompileManager.FILE_PATH);
    }
  }
}","@Override protected void onResume(){
  super.onResume();
}",0.2761904761904762
170877,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (intent.getStringExtra(CompileManager.FILE_PATH) != null) {
    String filePath=intent.getStringExtra(CompileManager.FILE_PATH);
    File file=new File(filePath);
    if (!file.exists()) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return;
    }
    addNewPageEditor(file,SELECT);
    intent.removeExtra(CompileManager.FILE_PATH);
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
}",0.3068391866913124
170878,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  clientId=AppUtils.getMetaDataValue(this,getString(R.string.com_jaychang_sa_instagramClientId));
  clientSecret=AppUtils.getMetaDataValue(this,getString(R.string.com_jaychang_sa_instagramClientSecret));
  redirectUrl=AppUtils.getMetaDataValue(this,getString(R.string.com_jaychang_sa_instagramRedirectUrl));
  loadingDialog=DialogFactory.createLoadingDialog(this);
  String scopes=TextUtils.join(""String_Node_Str"",getAuthData().getScopes());
  String url=String.format(AUTH_URL,clientId,redirectUrl,scopes);
  WebView webView=new WebView(this);
  webView.loadUrl(url);
  webView.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      super.onPageStarted(view,url,favicon);
      loadingDialog.show();
    }
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      loadingDialog.dismiss();
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      if (url.startsWith(redirectUrl)) {
        getCode(Uri.parse(url));
        return true;
      }
      return false;
    }
  }
);
  setContentView(webView);
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  clientId=AppUtils.getMetaDataValue(this,getString(R.string.com_jaychang_sa_instagramClientId));
  clientSecret=AppUtils.getMetaDataValue(this,getString(R.string.com_jaychang_sa_instagramClientSecret));
  redirectUrl=AppUtils.getMetaDataValue(this,getString(R.string.com_jaychang_sa_instagramRedirectUrl));
  loadingDialog=DialogFactory.createLoadingDialog(this);
  String scopes=TextUtils.join(""String_Node_Str"",getAuthData().getScopes());
  String url=String.format(AUTH_URL,clientId,redirectUrl,scopes);
  WebView webView=new WebView(this);
  webView.getSettings().setJavaScriptEnabled(true);
  webView.loadUrl(url);
  webView.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      super.onPageStarted(view,url,favicon);
      loadingDialog.show();
    }
    @Override public void onPageFinished(    WebView view,    String url){
      super.onPageFinished(view,url);
      loadingDialog.dismiss();
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      if (url.startsWith(redirectUrl)) {
        getCode(Uri.parse(url));
        return true;
      }
      return false;
    }
  }
);
  setContentView(webView);
}",0.9804069329314242
170879,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode != RC_SIGN_IN || resultCode != RESULT_OK) {
    return;
  }
  GoogleSignInResult signInResult=Auth.GoogleSignInApi.getSignInResultFromIntent(data);
  if ((!isGoogleDisconnectRequested(this) && !isGoogleRevokeRequested(this)) || retrySignIn) {
    retrySignIn=false;
    handleSignInResult(signInResult);
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode != RC_SIGN_IN || resultCode != RESULT_OK) {
    handCancel();
    return;
  }
  GoogleSignInResult signInResult=Auth.GoogleSignInApi.getSignInResultFromIntent(data);
  if ((!isGoogleDisconnectRequested(this) && !isGoogleRevokeRequested(this)) || retrySignIn) {
    retrySignIn=false;
    handleSignInResult(signInResult);
  }
}",0.9811715481171548
170880,"@Override public void onCompleted(JSONObject object,GraphResponse response){
  try {
    SocialUser user=new SocialUser();
    user.userId=object.getString(""String_Node_Str"");
    user.accessToken=AccessToken.getCurrentAccessToken().getToken();
    user.profilePictureUrl=String.format(PROFILE_PIC_URL,user.userId);
    user.email=object.getString(""String_Node_Str"");
    user.fullName=object.getString(""String_Node_Str"");
    user.pageLink=object.getString(""String_Node_Str"");
    loadingDialog.dismiss();
    handleSuccess(user);
  }
 catch (  JSONException e) {
    loadingDialog.dismiss();
    handleError(e);
  }
}","@Override public void onCompleted(JSONObject object,GraphResponse response){
  try {
    SocialUser user=new SocialUser();
    user.userId=getValue(""String_Node_Str"",object);
    user.accessToken=AccessToken.getCurrentAccessToken().getToken();
    user.profilePictureUrl=String.format(PROFILE_PIC_URL,user.userId);
    user.email=getValue(""String_Node_Str"",object);
    user.fullName=getValue(""String_Node_Str"",object);
    user.pageLink=getValue(""String_Node_Str"",object);
    loadingDialog.dismiss();
    handleSuccess(user);
  }
 catch (  JSONException e) {
    loadingDialog.dismiss();
    handleError(e);
  }
}",0.7909238249594813
170881,"public AuthCallback getCallback(){
  return callback;
}","AuthCallback getCallback(){
  return callback;
}",0.9320388349514565
170882,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  loadingDialog=DialogUtils.createLoadingDialog(this);
  callbackManager=CallbackManager.Factory.create();
  LoginManager.getInstance().registerCallback(callbackManager,this);
  LoginManager.getInstance().logInWithReadPermissions(this,getScopes());
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  loadingDialog=DialogUtils.createLoadingDialog(this);
  callbackManager=CallbackManager.Factory.create();
  if (DeviceUtils.isFacebookInstalled(this)) {
    LoginManager.getInstance().logOut();
  }
  LoginManager.getInstance().registerCallback(callbackManager,this);
  LoginManager.getInstance().logInWithReadPermissions(this,getScopes());
}",0.8866995073891626
170883,"private void clearCookies(){
  if (Build.VERSION.SDK_INT >= 21) {
    CookieManager.getInstance().removeAllCookies(null);
  }
 else {
    CookieManager.getInstance().removeAllCookie();
  }
}","private void clearCookies(){
  if (Build.VERSION.SDK_INT >= 21) {
    CookieManager.getInstance().removeAllCookies(null);
  }
 else {
    CookieSyncManager.createInstance(appContext);
    CookieManager.getInstance().removeAllCookie();
  }
}",0.8837209302325582
170884,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getTwitterAuthClient().authorize(this,callback);
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  TwitterSession activeSession=TwitterCore.getInstance().getSessionManager().getActiveSession();
  if (activeSession != null) {
    handleSuccess(activeSession);
  }
 else {
    getTwitterAuthClient().authorize(this,callback);
  }
}",0.6309523809523809
170885,"@Override public void success(Result<User> userResult){
  loadingDialog.dismiss();
  SocialUser user=new SocialUser();
  User data=userResult.data;
  user.userId=String.valueOf(data.getId());
  user.accessToken=sessionResult.data.getAuthToken().token;
  user.profilePictureUrl=String.format(PROFILE_PIC_URL,data.screenName);
  user.email=data.email != null ? data.email : ""String_Node_Str"";
  user.fullName=data.name;
  user.username=data.screenName;
  user.pageLink=String.format(PAGE_LINK,data.screenName);
  handleSuccess(user);
}","@Override public void success(Result<User> userResult){
  loadingDialog.dismiss();
  SocialUser user=new SocialUser();
  User data=userResult.data;
  user.userId=String.valueOf(data.getId());
  user.accessToken=session.getAuthToken().token;
  user.profilePictureUrl=String.format(PROFILE_PIC_URL,data.screenName);
  user.email=data.email != null ? data.email : ""String_Node_Str"";
  user.fullName=data.name;
  user.username=data.screenName;
  user.pageLink=String.format(PAGE_LINK,data.screenName);
  handleSuccess(user);
}",0.9895734597156398
170886,"private void handleSuccess(Result<TwitterSession> sessionResult){
  final ProgressDialog loadingDialog=DialogUtils.createLoadingDialog(this);
  loadingDialog.show();
  TwitterApiClient twitterApiClient=TwitterCore.getInstance().getApiClient();
  AccountService accountService=twitterApiClient.getAccountService();
  Call<User> call=accountService.verifyCredentials(false,true,true);
  call.enqueue(new Callback<User>(){
    @Override public void success(    Result<User> userResult){
      loadingDialog.dismiss();
      SocialUser user=new SocialUser();
      User data=userResult.data;
      user.userId=String.valueOf(data.getId());
      user.accessToken=sessionResult.data.getAuthToken().token;
      user.profilePictureUrl=String.format(PROFILE_PIC_URL,data.screenName);
      user.email=data.email != null ? data.email : ""String_Node_Str"";
      user.fullName=data.name;
      user.username=data.screenName;
      user.pageLink=String.format(PAGE_LINK,data.screenName);
      handleSuccess(user);
    }
    public void failure(    TwitterException error){
      loadingDialog.dismiss();
      handleError(error);
    }
  }
);
}","private void handleSuccess(TwitterSession session){
  final ProgressDialog loadingDialog=DialogUtils.createLoadingDialog(this);
  loadingDialog.show();
  TwitterApiClient twitterApiClient=TwitterCore.getInstance().getApiClient();
  AccountService accountService=twitterApiClient.getAccountService();
  Call<User> call=accountService.verifyCredentials(false,true,true);
  call.enqueue(new Callback<User>(){
    @Override public void success(    Result<User> userResult){
      loadingDialog.dismiss();
      SocialUser user=new SocialUser();
      User data=userResult.data;
      user.userId=String.valueOf(data.getId());
      user.accessToken=session.getAuthToken().token;
      user.profilePictureUrl=String.format(PROFILE_PIC_URL,data.screenName);
      user.email=data.email != null ? data.email : ""String_Node_Str"";
      user.fullName=data.name;
      user.username=data.screenName;
      user.pageLink=String.format(PAGE_LINK,data.screenName);
      handleSuccess(user);
    }
    public void failure(    TwitterException error){
      loadingDialog.dismiss();
      handleError(error);
    }
  }
);
}",0.9817209094962104
170887,"private void init(Context context,AttributeSet attrs){
  this.context=context;
  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomizableCalendar);
  if (typedArray != null) {
    monthResId=typedArray.getResourceId(R.styleable.CustomizableCalendar_month_layout,R.layout.calendar_view);
    monthCellResId=typedArray.getResourceId(R.styleable.CustomizableCalendar_cell_layout,R.layout.calendar_cell);
    typedArray.recycle();
  }
  linearLayoutManager=new LinearLayoutManager(getContext());
  linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
  setLayoutManager(linearLayoutManager);
  this.calendar=AUCalendar.getInstance();
}","private void init(Context context,AttributeSet attrs){
  this.context=context;
  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.CustomizableCalendar);
  if (typedArray != null) {
    monthResId=typedArray.getResourceId(R.styleable.CustomizableCalendar_month_layout,R.layout.calendar_view);
    monthCellResId=typedArray.getResourceId(R.styleable.CustomizableCalendar_cell_layout,R.layout.calendar_cell);
    typedArray.recycle();
  }
  LinearLayoutManager linearLayoutManager=new LinearLayoutManager(getContext());
  linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
  setLayoutManager(linearLayoutManager);
  this.calendar=AUCalendar.getInstance();
}",0.985358711566618
170888,"private void setupCalendarScroll(){
  PagerSnapHelper snapHelper=new PagerSnapHelper();
  snapHelper.attachToRecyclerView(this);
  addOnChildAttachStateChangeListener(new OnChildAttachStateChangeListener(){
    @Override public void onChildViewAttachedToWindow(    View view){
      MonthGridView monthGridView=(MonthGridView)view;
      monthGridView.subscribe();
    }
    @Override public void onChildViewDetachedFromWindow(    View view){
      MonthGridView monthGridView=(MonthGridView)view;
      monthGridView.unsubscribe();
    }
  }
);
  addOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
switch (newState) {
case SCROLL_STATE_IDLE:
{
          View view=snapHelper.findSnapView(linearLayoutManager);
          if (view != null) {
            int currentPosition=getChildAdapterPosition(view);
            DateTime currentMonth=calendar.getMonths().get(currentPosition);
            calendar.setCurrentMonth(currentMonth);
          }
        }
    }
  }
}
);
}","private void setupCalendarScroll(){
  PagerSnapHelper snapHelper=new PagerSnapHelper();
  snapHelper.attachToRecyclerView(this);
  addOnChildAttachStateChangeListener(new OnChildAttachStateChangeListener(){
    @Override public void onChildViewAttachedToWindow(    View view){
      MonthGridView monthGridView=(MonthGridView)view;
      monthGridView.subscribe();
    }
    @Override public void onChildViewDetachedFromWindow(    View view){
      MonthGridView monthGridView=(MonthGridView)view;
      monthGridView.unsubscribe();
    }
  }
);
  addOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
switch (newState) {
case SCROLL_STATE_IDLE:
{
          View view=snapHelper.findSnapView(getLayoutManager());
          if (view != null) {
            int currentPosition=getChildAdapterPosition(view);
            DateTime currentMonth=calendar.getMonths().get(currentPosition);
            calendar.setCurrentMonth(currentMonth);
          }
        }
    }
  }
}
);
}",0.9950738916256158
170889,"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  super.onScrollStateChanged(recyclerView,newState);
switch (newState) {
case SCROLL_STATE_IDLE:
{
      View view=snapHelper.findSnapView(linearLayoutManager);
      if (view != null) {
        int currentPosition=getChildAdapterPosition(view);
        DateTime currentMonth=calendar.getMonths().get(currentPosition);
        calendar.setCurrentMonth(currentMonth);
      }
    }
}
}","@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  super.onScrollStateChanged(recyclerView,newState);
switch (newState) {
case SCROLL_STATE_IDLE:
{
      View view=snapHelper.findSnapView(getLayoutManager());
      if (view != null) {
        int currentPosition=getChildAdapterPosition(view);
        DateTime currentMonth=calendar.getMonths().get(currentPosition);
        calendar.setCurrentMonth(currentMonth);
      }
    }
}
}",0.9882352941176472
170890,"public void search(String subdomainof,String domainlike){
  IHttpRequestResponse[] response=callbacks.getSiteMap(""String_Node_Str"");
  for (  IHttpRequestResponse x : response) {
    IRequestInfo analyzeRequest=helpers.analyzeRequest(x);
    List<String> headers=analyzeRequest.getHeaders();
    for (    String header : headers) {
      String key=header.split(""String_Node_Str"")[0];
      String value=header.split(""String_Node_Str"")[1];
      if (subdomainof.equals(""String_Node_Str"")) {
      }
 else       if (key.equals(""String_Node_Str"") && value.endsWith(""String_Node_Str"" + subdomainof)) {
        subdomainofset.add(value);
      }
 else       if (domainlike.equals(""String_Node_Str"")) {
      }
 else       if (key.equals(""String_Node_Str"") && value.contains(domainlike)) {
        domainlikeset.add(value);
      }
    }
  }
}","public void search(String subdomainof,String domainlike){
  subdomainofset.clear();
  domainlikeset.clear();
  IHttpRequestResponse[] response=callbacks.getSiteMap(""String_Node_Str"");
  for (  IHttpRequestResponse x : response) {
    IRequestInfo analyzeRequest=helpers.analyzeRequest(x);
    List<String> headers=analyzeRequest.getHeaders();
    for (    String header : headers) {
      String key=header.split(""String_Node_Str"")[0];
      String value=header.split(""String_Node_Str"")[1];
      if (subdomainof.equals(""String_Node_Str"")) {
      }
 else       if (key.equals(""String_Node_Str"") && value.endsWith(""String_Node_Str"" + subdomainof)) {
        subdomainofset.add(value);
      }
 else       if (domainlike.equals(""String_Node_Str"")) {
      }
 else       if (key.equals(""String_Node_Str"") && value.contains(domainlike)) {
        domainlikeset.add(value);
      }
    }
  }
}",0.9704690214244356
170891,"@Override public LiveData<List<ZhihuStory>> getLastZhihuList(){
  mApiZhihu.getLatestNews().enqueue(new Callback<ZhihuData>(){
    @Override public void onResponse(    Call<ZhihuData> call,    Response<ZhihuData> response){
      if (response.isSuccessful()) {
        mZhihuList.setValue(response.body().getStories());
        refreshLocalZhihuList(response.body().getStories());
        mZhihuPageDate=response.body().getDate();
      }
      mIsLoadingZhihuList.setValue(false);
    }
    @Override public void onFailure(    Call<ZhihuData> call,    Throwable t){
      mIsLoadingZhihuList.setValue(false);
    }
  }
);
  return mZhihuList;
}","@Override public LiveData<List<ZhihuStory>> getLastZhihuList(){
  mIsLoadingZhihuList.setValue(true);
  mApiZhihu.getLatestNews().enqueue(new Callback<ZhihuData>(){
    @Override public void onResponse(    Call<ZhihuData> call,    Response<ZhihuData> response){
      if (response.isSuccessful()) {
        mZhihuList.setValue(response.body().getStories());
        refreshLocalZhihuList(response.body().getStories());
        mZhihuPageDate=response.body().getDate();
      }
      mIsLoadingZhihuList.setValue(false);
    }
    @Override public void onFailure(    Call<ZhihuData> call,    Throwable t){
      mIsLoadingZhihuList.setValue(false);
    }
  }
);
  return mZhihuList;
}",0.9713855421686748
170892,"@Override public LiveData<List<ZhihuStory>> getMoreZhihuList(String date){
  mApiZhihu.getTheDaily(mZhihuPageDate).enqueue(new Callback<ZhihuData>(){
    @Override public void onResponse(    Call<ZhihuData> call,    Response<ZhihuData> response){
      if (response.isSuccessful()) {
        mZhihuList.setValue(response.body().getStories());
        refreshLocalZhihuList(response.body().getStories());
        mZhihuPageDate=response.body().getDate();
      }
      mIsLoadingZhihuList.setValue(false);
    }
    @Override public void onFailure(    Call<ZhihuData> call,    Throwable t){
      mIsLoadingZhihuList.setValue(false);
    }
  }
);
  return mZhihuList;
}","@Override public LiveData<List<ZhihuStory>> getMoreZhihuList(String date){
  mIsLoadingZhihuList.setValue(true);
  mApiZhihu.getTheDaily(mZhihuPageDate).enqueue(new Callback<ZhihuData>(){
    @Override public void onResponse(    Call<ZhihuData> call,    Response<ZhihuData> response){
      if (response.isSuccessful()) {
        mZhihuList.setValue(response.body().getStories());
        refreshLocalZhihuList(response.body().getStories());
        mZhihuPageDate=response.body().getDate();
      }
      mIsLoadingZhihuList.setValue(false);
    }
    @Override public void onFailure(    Call<ZhihuData> call,    Throwable t){
      mIsLoadingZhihuList.setValue(false);
    }
  }
);
  return mZhihuList;
}",0.9723435225618632
170893,"private void subscribeUI(){
  ZhihuListViewModel.Factory factory=new ZhihuListViewModel.Factory(MyApplication.getInstance(),Injection.getDataRepository(MyApplication.getInstance()));
  mListViewModel=ViewModelProviders.of(this,factory).get(ZhihuListViewModel.class);
  mListViewModel.getZhihuList().observe(this,new Observer<List<ZhihuStory>>(){
    @Override public void onChanged(    @Nullable List<ZhihuStory> stories){
      if (stories == null || stories.size() <= 0) {
        return;
      }
      L.i(""String_Node_Str"" + stories.size());
      mAdapter.setStoryList(stories);
    }
  }
);
  mListViewModel.isLoadingZhihuList().observe(this,new Observer<Boolean>(){
    @Override public void onChanged(    @Nullable Boolean aBoolean){
      if (aBoolean == null) {
        return;
      }
      L.i(""String_Node_Str"" + aBoolean);
      mRefreshLayout.setRefreshing(false);
      mLoadMorebar.setVisibility(aBoolean ? View.VISIBLE : View.INVISIBLE);
    }
  }
);
  mListViewModel.refreshZhihusData();
}","/** 
 * 将 ZhihuListFragment 对应的 ZhihuListViewModel 类中的 LiveData 添加注册监听到 此 ZhihuListFragment
 */
private void subscribeUI(){
  ZhihuListViewModel.Factory factory=new ZhihuListViewModel.Factory(MyApplication.getInstance(),Injection.getDataRepository(MyApplication.getInstance()));
  mListViewModel=ViewModelProviders.of(this,factory).get(ZhihuListViewModel.class);
  mListViewModel.getZhihuList().observe(this,new Observer<List<ZhihuStory>>(){
    @Override public void onChanged(    @Nullable List<ZhihuStory> stories){
      if (stories == null || stories.size() <= 0) {
        return;
      }
      L.i(""String_Node_Str"" + stories.size());
      mAdapter.setStoryList(stories);
    }
  }
);
  mListViewModel.isLoadingZhihuList().observe(this,new Observer<Boolean>(){
    @Override public void onChanged(    @Nullable Boolean aBoolean){
      if (aBoolean == null) {
        return;
      }
      L.i(""String_Node_Str"" + aBoolean);
      mRefreshLayout.setRefreshing(false);
      mLoadMorebar.setVisibility(aBoolean ? View.VISIBLE : View.INVISIBLE);
    }
  }
);
  mListViewModel.refreshZhihusData();
}",0.9545454545454546
170894,"private void initView(View view){
  if (view == null) {
    return;
  }
  LinearLayoutManager layoutManager=new LinearLayoutManager(getContext());
  mAdapter=new ZhihuListAdapter(getContext(),mZhihuOnItemClickListener);
  RecyclerView recyclerView=view.findViewById(R.id.rv_zhihu_list);
  recyclerView.setAdapter(mAdapter);
  recyclerView.setLayoutManager(layoutManager);
  recyclerView.addOnScrollListener(new ZhihuOnScrollListener());
  mRefreshLayout=view.findViewById(R.id.srl_zhihu);
  mRefreshLayout.setOnRefreshListener(new ZhihuSwipeListener());
  mRefreshLayout.setColorSchemeResources(android.R.color.holo_blue_bright,android.R.color.holo_green_light,android.R.color.holo_orange_light,android.R.color.holo_red_light);
  mLoadMorebar=view.findViewById(R.id.bar_load_more_zhihu);
  mRLZhihuRoot=view.findViewById(R.id.rl_zhihu_root);
}","/** 
 * 初始化页面 UI
 * @param view Fragment 的 View
 */
private void initView(View view){
  if (view == null) {
    return;
  }
  LinearLayoutManager layoutManager=new LinearLayoutManager(getContext());
  mAdapter=new ZhihuListAdapter(getContext(),mZhihuOnItemClickListener);
  RecyclerView recyclerView=view.findViewById(R.id.rv_zhihu_list);
  recyclerView.setAdapter(mAdapter);
  recyclerView.setLayoutManager(layoutManager);
  recyclerView.addOnScrollListener(new ZhihuOnScrollListener());
  mRefreshLayout=view.findViewById(R.id.srl_zhihu);
  mRefreshLayout.setOnRefreshListener(new ZhihuSwipeListener());
  mRefreshLayout.setColorSchemeResources(android.R.color.holo_blue_bright,android.R.color.holo_green_light,android.R.color.holo_orange_light,android.R.color.holo_red_light);
  mLoadMorebar=view.findViewById(R.id.bar_load_more_zhihu);
  mRLZhihuRoot=view.findViewById(R.id.rl_zhihu_root);
}",0.9700805523590332
170895,"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  LinearLayoutManager layoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();
  int lastPosition=layoutManager.findLastCompletelyVisibleItemPosition();
  if (lastPosition == mAdapter.getItemCount() - 1) {
    mListViewModel.loadNextPageZhihu();
  }
}","@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  LinearLayoutManager layoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();
  int lastPosition=layoutManager.findLastCompletelyVisibleItemPosition();
  if (lastPosition == mAdapter.getItemCount() - 1) {
    mListViewModel.loadNextPageZhihu(lastPosition);
  }
}",0.9829545454545454
170896,"public void refreshGrilsData(){
  mGirlPageIndex.setValue(1);
  mLoadHandler.startLoadGirls();
}","public void refreshGrilsData(){
  mGirlPageIndex.setValue(1);
}",0.7924528301886793
170897,"private MutableLiveData<Boolean> getLoadMoreState(){
  return mLoadMoreState;
}","public LiveData<Boolean> getLoadMoreState(){
  return mGirlsDataRepository.isLoadingGirlList();
}",0.6931818181818182
170898,"private GirlListViewModel(Application application,DataRepository girlsDataRepository){
  super(application);
  mGirlsDataRepository=girlsDataRepository;
  mLoadHandler=new LoadHandler(girlsDataRepository);
  mGirls=Transformations.switchMap(mGirlPageIndex,new Function<Integer,LiveData<List<Girl>>>(){
    @Override public LiveData<List<Girl>> apply(    Integer input){
      return mGirlsDataRepository.getGirlList(input);
    }
  }
);
}","private GirlListViewModel(Application application,DataRepository girlsDataRepository){
  super(application);
  mGirlsDataRepository=girlsDataRepository;
  mGirls=Transformations.switchMap(mGirlPageIndex,new Function<Integer,LiveData<List<Girl>>>(){
    @Override public LiveData<List<Girl>> apply(    Integer input){
      return mGirlsDataRepository.getGirlList(input);
    }
  }
);
}",0.9356014580801943
170899,"public void loadNextPageGirls(){
  if (!Util.isNetworkConnected(MyApplication.getInstance())) {
    return;
  }
  mGirlPageIndex.setValue((mGirlPageIndex.getValue() == null ? 1 : mGirlPageIndex.getValue() + 1));
  mLoadHandler.mLoadMoreState.setValue(true);
  mLoadHandler.startLoadGirls();
}","public void loadNextPageGirls(){
  if (!Util.isNetworkConnected(MyApplication.getInstance())) {
    return;
  }
  mGirlPageIndex.setValue((mGirlPageIndex.getValue() == null ? 1 : mGirlPageIndex.getValue() + 1));
}",0.8435643564356435
170900,"public void loadNextPageZhihu(){
  if (!Util.isNetworkConnected(MyApplication.getInstance())) {
    return;
  }
  mLoadHandler.startLoadGirls();
  mZhihuPageDate.setValue(String.valueOf(System.currentTimeMillis()));
}","/** 
 * 上拉加载更多时，获取 Zhihu 历史列表数据
 * @param positon 表示列表滑动到最后一项
 */
public void loadNextPageZhihu(int positon){
  if (!Util.isNetworkConnected(MyApplication.getInstance())) {
    return;
  }
  mZhihuPageDate.setValue(String.valueOf(positon));
}",0.6884531590413944
170901,"private ZhihuListViewModel(Application application,DataRepository dataRepository){
  super(application);
  mDataRepository=dataRepository;
  mLoadHandler=new LoadHandler(mDataRepository);
  mZhihuList=Transformations.switchMap(mZhihuPageDate,new Function<String,LiveData<List<ZhihuStory>>>(){
    @Override public LiveData<List<ZhihuStory>> apply(    String input){
      return mDataRepository.getZhihuList(input);
    }
  }
);
}","private ZhihuListViewModel(Application application,DataRepository dataRepository){
  super(application);
  mDataRepository=dataRepository;
  mZhihuList=Transformations.switchMap(mZhihuPageDate,new Function<String,LiveData<List<ZhihuStory>>>(){
    @Override public LiveData<List<ZhihuStory>> apply(    String input){
      return mDataRepository.getZhihuList(input);
    }
  }
);
}",0.939580764488286
170902,"public LiveData<Boolean> isLoadingZhihuList(){
  return mLoadHandler.getLoadMoreState();
}","/** 
 * 数据请求状态由 DataRepository 控制，包括下拉刷新和上拉加载更多
 * @return 是否在进行数据请求
 */
public LiveData<Boolean> isLoadingZhihuList(){
  return mDataRepository.isLoadingZhihuList();
}",0.5348837209302325
170903,"public LiveData<List<ZhihuStory>> getZhihuList(){
  return mZhihuList;
}","/** 
 * 获取 Zhihu 列表数据
 * @return Zhihu 列表数据
 */
public LiveData<List<ZhihuStory>> getZhihuList(){
  return mZhihuList;
}",0.75
170904,"public void refreshZhihusData(){
  mLoadHandler.startLoadGirls();
  mZhihuPageDate.setValue(""String_Node_Str"");
}","/** 
 * 下拉刷新，获取最新的 Zhihu 列表数据
 */
public void refreshZhihusData(){
  mZhihuPageDate.setValue(""String_Node_Str"");
}",0.7048458149779736
170905,"@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  rv=view.findViewById(R.id.items);
  viewModel=ViewModelProviders.of(getActivity()).get(RosterViewModel.class);
  empty=view.findViewById(R.id.empty);
  empty.setVisibility(View.INVISIBLE);
}","@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  rv=view.findViewById(R.id.items);
  empty=view.findViewById(R.id.empty);
  empty.setVisibility(View.INVISIBLE);
}",0.8651488616462347
170906,"@Override public void onViewCreated(View view,@Nullable Bundle state){
  super.onViewCreated(view,state);
  DisplayViewModelFactory factory=new DisplayViewModelFactory(state);
  displayViewModel=ViewModelProviders.of(this,factory).get(DisplayViewModel.class);
  layoutManager=new LinearLayoutManager(getActivity(),LinearLayoutManager.HORIZONTAL,false);
  getRecyclerView().setLayoutManager(layoutManager);
  snapperCarr.attachToRecyclerView(getRecyclerView());
  adapter=new PageAdapter();
  getRecyclerView().setAdapter(adapter);
  getRecyclerView().addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrolled(    RecyclerView recyclerView,    int dx,    int dy){
      if (ignoreNextScroll) {
        ignoreNextScroll=false;
      }
 else {
        int position=getCurrentPosition();
        if (position >= 0) {
          displayViewModel.setCurrentModel(adapter.getItem(position));
        }
      }
    }
  }
);
  Toolbar tb=view.findViewById(R.id.toolbar);
  tb.inflateMenu(R.menu.actions_display);
  tb.setOnMenuItemClickListener(item -> (onOptionsItemSelected(item)));
  if (((Contract)getActivity()).shouldShowTitle()) {
    tb.setTitle(R.string.app_name);
  }
  startObserving();
}","@Override public void onViewCreated(View view,@Nullable Bundle state){
  super.onViewCreated(view,state);
  layoutManager=new LinearLayoutManager(getActivity(),LinearLayoutManager.HORIZONTAL,false);
  getRecyclerView().setLayoutManager(layoutManager);
  snapperCarr.attachToRecyclerView(getRecyclerView());
  adapter=new PageAdapter();
  getRecyclerView().setAdapter(adapter);
  getRecyclerView().addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrolled(    RecyclerView recyclerView,    int dx,    int dy){
      if (ignoreNextScroll) {
        ignoreNextScroll=false;
      }
 else {
        int position=getCurrentPosition();
        if (position >= 0) {
          displayViewModel.setCurrentModel(adapter.getItem(position));
        }
      }
    }
  }
);
  Toolbar tb=view.findViewById(R.id.toolbar);
  tb.inflateMenu(R.menu.actions_display);
  tb.setOnMenuItemClickListener(item -> (onOptionsItemSelected(item)));
  if (((Contract)getActivity()).shouldShowTitle()) {
    tb.setTitle(R.string.app_name);
  }
  editMenu=tb.getMenu().findItem(R.id.edit);
  editMenu.setVisible(false);
}",0.8991918332624416
170907,"@Override void render(ViewState state){
  adapter.setState(state);
  if (!displayViewModel.hasCurrentModelId()) {
    String initialModelId=getInitialModelId();
    if (initialModelId != null) {
      displayViewModel.setCurrentModelId(initialModelId);
    }
  }
  updatePager(false);
}","@Override void render(ViewState state){
  if (adapter != null) {
    adapter.setState(state);
    if (!displayViewModel.hasCurrentModelId()) {
      String initialModelId=getInitialModelId();
      if (initialModelId != null) {
        displayViewModel.setCurrentModelId(initialModelId);
      }
    }
    editMenu.setVisible(state.filteredItems().size() > 0);
    updatePager(false);
  }
}",0.8461538461538461
170908,"private void render(ViewState viewState){
  String id=getModelId();
  if (id != null) {
    model=viewState.find(id);
  }
  if (model != null) {
    if (!hadSavedState) {
      binding.setModel(model);
    }
    deleteItem.setVisible(true);
  }
}","private void render(ViewState viewState){
  if (binding != null) {
    String id=getModelId();
    if (id != null) {
      model=viewState.find(id);
    }
    if (model != null) {
      if (!hadSavedState) {
        binding.setModel(model);
      }
      deleteItem.setVisible(true);
    }
  }
}",0.7319778188539742
170909,"@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  viewModel=ViewModelProviders.of(getActivity()).get(RosterViewModel.class);
  viewModel.stateStream().observe(this,this::render);
  Toolbar tb=view.findViewById(R.id.toolbar);
  tb.inflateMenu(R.menu.actions_edit);
  tb.setOnMenuItemClickListener(item -> (onOptionsItemSelected(item)));
  if (((Contract)getActivity()).shouldShowTitle()) {
    tb.setTitle(R.string.app_name);
  }
  deleteItem=tb.getMenu().findItem(R.id.delete);
}","@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  Toolbar tb=view.findViewById(R.id.toolbar);
  tb.inflateMenu(R.menu.actions_edit);
  tb.setOnMenuItemClickListener(item -> (onOptionsItemSelected(item)));
  if (((Contract)getActivity()).shouldShowTitle()) {
    tb.setTitle(R.string.app_name);
  }
  deleteItem=tb.getMenu().findItem(R.id.delete);
}",0.8542825361512792
170910,"@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  getRecyclerView().setLayoutManager(new LinearLayoutManager(getActivity()));
  DividerItemDecoration decoration=new DividerItemDecoration(getActivity(),LinearLayoutManager.VERTICAL);
  getRecyclerView().addItemDecoration(decoration);
  adapter=new RosterListAdapter(this);
  getRecyclerView().setAdapter(adapter);
  Toolbar tb=view.findViewById(R.id.toolbar);
  tb.inflateMenu(R.menu.actions_roster);
  tb.setTitle(R.string.app_name);
  tb.setOnMenuItemClickListener(item -> (onOptionsItemSelected(item)));
  Menu menu=tb.getMenu();
  filter=menu.findItem(R.id.filter);
  filterAll=menu.findItem(R.id.all);
  filterCompleted=menu.findItem(R.id.completed);
  filterOutstanding=menu.findItem(R.id.outstanding);
  adapter.updateFilter();
  startObserving();
}","@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  getRecyclerView().setLayoutManager(new LinearLayoutManager(getActivity()));
  DividerItemDecoration decoration=new DividerItemDecoration(getActivity(),LinearLayoutManager.VERTICAL);
  getRecyclerView().addItemDecoration(decoration);
  adapter=new RosterListAdapter(this);
  getRecyclerView().setAdapter(adapter);
  Toolbar tb=view.findViewById(R.id.toolbar);
  tb.inflateMenu(R.menu.actions_roster);
  tb.setTitle(R.string.app_name);
  tb.setOnMenuItemClickListener(item -> (onOptionsItemSelected(item)));
  Menu menu=tb.getMenu();
  filter=menu.findItem(R.id.filter);
  filterAll=menu.findItem(R.id.all);
  filterCompleted=menu.findItem(R.id.completed);
  filterOutstanding=menu.findItem(R.id.outstanding);
  adapter.updateFilter();
}",0.9886234357224118
170911,"@Override void render(ViewState state){
  if (state.cause() == null) {
    adapter.setState(state);
    if (state.isLoaded() && state.filteredItems().size() == 0) {
      getEmptyView().setVisibility(View.VISIBLE);
      if (state.items().size() > 0) {
        getEmptyView().setText(R.string.msg_empty_filter);
      }
 else {
        getEmptyView().setText(R.string.msg_empty);
      }
    }
 else {
      getEmptyView().setVisibility(View.GONE);
    }
    if (state.getSelectionCount() == 0 && snackbar != null && snackbar.isShown()) {
      snackbar.dismiss();
    }
  }
 else {
    Snackbar.make(getView(),R.string.msg_crash,Snackbar.LENGTH_LONG).show();
    Log.e(getClass().getSimpleName(),""String_Node_Str"",state.cause());
  }
}","@Override void render(ViewState state){
  if (adapter != null) {
    if (state.cause() == null) {
      adapter.setState(state);
      if (state.isLoaded() && state.filteredItems().size() == 0) {
        getEmptyView().setVisibility(View.VISIBLE);
        if (state.items().size() > 0) {
          getEmptyView().setText(R.string.msg_empty_filter);
        }
 else {
          getEmptyView().setText(R.string.msg_empty);
        }
      }
 else {
        getEmptyView().setVisibility(View.GONE);
      }
      if (state.getSelectionCount() == 0 && snackbar != null && snackbar.isShown()) {
        snackbar.dismiss();
      }
    }
 else {
      Snackbar.make(getView(),R.string.msg_crash,Snackbar.LENGTH_LONG).show();
      Log.e(getClass().getSimpleName(),""String_Node_Str"",state.cause());
    }
  }
}",0.9564652371669916
170912,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  pager=findViewById(R.id.pager);
  layoutManager=new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false);
  pager.setLayoutManager(layoutManager);
  snapperCarr.attachToRecyclerView(pager);
  viewModel=ViewModelProviders.of(this).get(EditorViewModel.class);
  if (savedInstanceState != null) {
    viewModel.restoreInstanceState(savedInstanceState);
  }
  adapter=new PageAdapter(viewModel,getLayoutInflater());
  pager.setAdapter(adapter);
  pager.setHasFixedSize(true);
  tabs=findViewById(R.id.tabs);
  for (int i=0; i < adapter.getItemCount(); i++) {
    tabs.addTab(tabs.newTab().setText(adapter.getTabText(i)));
  }
  tabs.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener(){
    @Override public void onTabSelected(    TabLayout.Tab tab){
      pager.smoothScrollToPosition(tab.getPosition());
    }
    @Override public void onTabUnselected(    TabLayout.Tab tab){
    }
    @Override public void onTabReselected(    TabLayout.Tab tab){
    }
  }
);
  pager.addOnScrollStateChangedListener(scrollState -> {
    if (scrollState == RecyclerView.SCROLL_STATE_IDLE) {
      int tab=getCurrentPosition();
      if (tab >= 0 && tab < tabs.getTabCount()) {
        tabs.getTabAt(tab).select();
      }
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  pager=findViewById(R.id.pager);
  layoutManager=new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false);
  pager.setLayoutManager(layoutManager);
  snapperCarr.attachToRecyclerView(pager);
  viewModel=ViewModelProviders.of(this).get(EditorViewModel.class);
  if (savedInstanceState != null) {
    viewModel.restoreInstanceState(savedInstanceState);
  }
  adapter=new PageAdapter(viewModel,getLayoutInflater());
  pager.setAdapter(adapter);
  pager.setHasFixedSize(true);
  tabs=findViewById(R.id.tabs);
  for (int i=0; i < adapter.getItemCount(); i++) {
    tabs.addTab(tabs.newTab().setText(adapter.getTabText(i)));
  }
  tabs.addOnTabSelectedListener(new TabLayoutLite.OnTabSelectedListener(){
    @Override public void onTabSelected(    TabLayoutLite.Tab tab){
      pager.smoothScrollToPosition(tab.getPosition());
    }
    @Override public void onTabUnselected(    TabLayoutLite.Tab tab){
    }
    @Override public void onTabReselected(    TabLayoutLite.Tab tab){
    }
  }
);
  pager.addOnScrollStateChangedListener(scrollState -> {
    if (scrollState == RecyclerView.SCROLL_STATE_IDLE) {
      int tab=getCurrentPosition();
      if (tab >= 0 && tab < tabs.getTabCount()) {
        tabs.getTabAt(tab).select();
      }
    }
  }
);
}",0.9941944847605224
170913,"private void swap(){
  int first=getCurrentPosition();
  int second;
  if (first >= adapter.getItemCount() - 1) {
    second=first;
    first--;
  }
 else {
    second=first + 1;
  }
  adapter.swap(first,second);
  TabLayout.Tab firstTab=tabs.getTabAt(first);
  TabLayout.Tab secondTab=tabs.getTabAt(second);
  CharSequence firstText=firstTab.getText();
  firstTab.setText(secondTab.getText());
  secondTab.setText(firstText);
}","private void swap(){
  int first=getCurrentPosition();
  int second;
  if (first >= adapter.getItemCount() - 1) {
    second=first;
    first--;
  }
 else {
    second=first + 1;
  }
  adapter.swap(first,second);
  TabLayoutLite.Tab firstTab=tabs.getTabAt(first);
  TabLayoutLite.Tab secondTab=tabs.getTabAt(second);
  CharSequence firstText=firstTab.getText();
  firstTab.setText(secondTab.getText());
  secondTab.setText(firstText);
}",0.9907407407407408
170914,"@Override public void onTabSelected(TabLayout.Tab tab){
  pager.smoothScrollToPosition(tab.getPosition());
}","@Override public void onTabSelected(TabLayoutLite.Tab tab){
  pager.smoothScrollToPosition(tab.getPosition());
}",0.9818181818181818
170915,"@Override public void onTabUnselected(TabLayout.Tab tab){
}","@Override public void onTabUnselected(TabLayoutLite.Tab tab){
}",0.9672131147540984
170916,"@Override public void onTabReselected(TabLayout.Tab tab){
}","@Override public void onTabReselected(TabLayoutLite.Tab tab){
}",0.9672131147540984
170917,"@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeInt(labelLineSize);
  dest.writeInt(labelTextSize);
  dest.writeLong(gridLineColor);
  dest.writeInt(gridLineWidth);
  dest.writeInt(xLabelsNumber);
  dest.writeInt(yLabelsNumber);
}","@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeInt(labelLineSize);
  dest.writeInt(labelTextSize);
  dest.writeInt(gridLineColor);
  dest.writeInt(gridLineWidth);
  dest.writeInt(xLabelsNumber);
  dest.writeInt(yLabelsNumber);
}",0.9861932938856016
170918,"/** 
 * Set that an operation blocking the user interface is currently performed
 */
@SuppressWarnings(""String_Node_Str"") public void setInOperation(AsyncTask owner,boolean inOperation,OnClickListener stopHandler){
  fragment.setInOperation(inOperation,stopHandler);
  formulaListView.setEnabled(!inOperation);
  palette.setEnabled(!inOperation);
  if (!inOperation && owner instanceof XmlLoaderTask) {
    XmlLoaderTask t=(XmlLoaderTask)owner;
    fragment.setXmlReadingResult(t.isMmtOpened());
    if (t.error != null) {
      isContentValid();
      Toast.makeText(getActivity(),t.error,Toast.LENGTH_LONG).show();
    }
 else     if (t.postAction == XmlLoaderTask.PostAction.CALCULATE) {
      calculate();
    }
 else     if (t.postAction == XmlLoaderTask.PostAction.INTERRUPT) {
    }
 else {
      isContentValid();
    }
    if (xmlLoaderTask != null) {
      ViewUtils.Debug(this,""String_Node_Str"" + xmlLoaderTask.toString());
      xmlLoaderTask=null;
    }
    updatePalette();
  }
  if (taSession != null) {
    taSession.setInOperation(owner,inOperation);
  }
}","/** 
 * Set that an operation blocking the user interface is currently performed
 */
@SuppressWarnings(""String_Node_Str"") public void setInOperation(AsyncTask owner,boolean inOperation,OnClickListener stopHandler){
  fragment.setInOperation(inOperation,stopHandler);
  formulaListView.setEnabled(!inOperation);
  palette.setEnabled(!inOperation);
  if (!inOperation && owner instanceof XmlLoaderTask) {
    XmlLoaderTask t=(XmlLoaderTask)owner;
    fragment.setXmlReadingResult(t.isMmtOpened());
    if (t.error != null) {
      isContentValid();
      Toast.makeText(getActivity(),t.error,Toast.LENGTH_LONG).show();
    }
 else     if (t.postAction == XmlLoaderTask.PostAction.CALCULATE) {
      calculate();
    }
 else     if (t.postAction == XmlLoaderTask.PostAction.INTERRUPT) {
    }
 else {
      isContentValid();
    }
    if (xmlLoaderTask != null) {
      ViewUtils.Debug(this,""String_Node_Str"" + xmlLoaderTask.toString());
      xmlLoaderTask=null;
    }
    formulaScrollView.setScaleDetectorActive(true);
    updatePalette();
  }
  if (taSession != null) {
    taSession.setInOperation(owner,inOperation);
  }
}",0.9763421292083712
170919,"/** 
 * Procedure calculates recursively the derivative value
 */
public CalculatedValue.ValueType getDerivativeValue(String var,CalculaterTask thread,CalculatedValue outValue) throws CancelException {
  if (isTerm()) {
    return term.getDerivativeValue(var,thread,outValue);
  }
  if (contentType == ContentType.ARGUMENT && parser.isArgumentInHolder(var)) {
    return outValue.setValue(parser.getSign());
  }
  return outValue.setValue(0.0);
}","/** 
 * Procedure calculates recursively the derivative value
 */
public CalculatedValue.ValueType getDerivativeValue(String var,CalculaterTask thread,CalculatedValue outValue) throws CancelException {
  if (isTerm()) {
    return term.getDerivativeValue(var,thread,outValue);
  }
  if (contentType == ContentType.ARGUMENT && parser.isArgumentInHolder(var)) {
    return outValue.setValue(parser.getSign());
  }
  return outValue.setValue(0.0,null);
}",0.9944258639910812
170920,"/** 
 * Re-implementation for methods for FormulaBase and FormulaTerm superclass's
 */
@Override public CalculatedValue.ValueType getValue(CalculaterTask thread,CalculatedValue outValue) throws CancelException {
  if (termType != null) {
    leftTerm.getValue(thread,leftTermValue);
    rightTerm.getValue(thread,rightTermValue);
switch (getComparatorType()) {
case EQUAL:
      return outValue.setValue((leftTermValue.getReal() == rightTermValue.getReal()) ? 1 : -1);
case NOT_EQUAL:
    return outValue.setValue((leftTermValue.getReal() != rightTermValue.getReal()) ? 1 : -1);
case LESS:
  return outValue.setValue((leftTermValue.getReal() < rightTermValue.getReal()) ? 1 : -1);
case LESS_EQUAL:
return outValue.setValue((leftTermValue.getReal() <= rightTermValue.getReal()) ? 1 : -1);
case GREATER:
return outValue.setValue((leftTermValue.getReal() > rightTermValue.getReal()) ? 1 : -1);
case GREATER_EQUAL:
return outValue.setValue((leftTermValue.getReal() >= rightTermValue.getReal()) ? 1 : -1);
case COMPARATOR_AND:
return outValue.setValue((leftTermValue.getReal() > 0 && rightTermValue.getReal() > 0) ? 1 : -1);
case COMPARATOR_OR:
return outValue.setValue((leftTermValue.getReal() > 0 || rightTermValue.getReal() > 0) ? 1 : -1);
}
}
return outValue.invalidate(CalculatedValue.ErrorType.TERM_NOT_READY);
}","/** 
 * Re-implementation for methods for FormulaBase and FormulaTerm superclass's
 */
@Override public CalculatedValue.ValueType getValue(CalculaterTask thread,CalculatedValue outValue) throws CancelException {
  if (termType != null) {
    leftTerm.getValue(thread,leftTermValue);
    rightTerm.getValue(thread,rightTermValue);
switch (getComparatorType()) {
case EQUAL:
      return outValue.setValue((leftTermValue.getReal() == rightTermValue.getReal()) ? 1 : 0);
case NOT_EQUAL:
    return outValue.setValue((leftTermValue.getReal() != rightTermValue.getReal()) ? 1 : 0);
case LESS:
  return outValue.setValue((leftTermValue.getReal() < rightTermValue.getReal()) ? 1 : 0);
case LESS_EQUAL:
return outValue.setValue((leftTermValue.getReal() <= rightTermValue.getReal()) ? 1 : 0);
case GREATER:
return outValue.setValue((leftTermValue.getReal() > rightTermValue.getReal()) ? 1 : 0);
case GREATER_EQUAL:
return outValue.setValue((leftTermValue.getReal() >= rightTermValue.getReal()) ? 1 : 0);
case COMPARATOR_AND:
return outValue.setValue((leftTermValue.getReal() > 0 && rightTermValue.getReal() > 0) ? 1 : 0);
case COMPARATOR_OR:
return outValue.setValue((leftTermValue.getReal() > 0 || rightTermValue.getReal() > 0) ? 1 : 0);
}
}
return outValue.invalidate(CalculatedValue.ErrorType.TERM_NOT_READY);
}",0.9908326967150496
170921,"@Override protected CustomEditText initializeTerm(CustomEditText v,LinearLayout l){
  if (v.getText() != null) {
    final String val=v.getText().toString();
    if (termType == FunctionType.FUNCTION_INDEX && val.equals(getContext().getResources().getString(R.string.formula_arg_term_key))) {
      final TermField t=addTerm(getFormulaRoot(),l,-1,v,this,getArgumentDepth());
      t.bracketsType=TermField.BracketsType.NEVER;
    }
 else     if (termType != FunctionType.FUNCTION_INDEX && val.equals(getContext().getResources().getString(R.string.formula_arg_term_key))) {
      final TermField t=addTerm(getFormulaRoot(),l,-1,v,this,0);
      t.bracketsType=TermField.BracketsType.NEVER;
    }
  }
  return v;
}","@Override protected CustomEditText initializeTerm(CustomEditText v,LinearLayout l){
  if (v.getText() != null) {
    final String val=v.getText().toString();
    if (termType == FunctionType.FUNCTION_INDEX && val.equals(getContext().getResources().getString(R.string.formula_arg_term_key))) {
      final TermField t=addTerm(getFormulaRoot(),l,-1,v,this,getArgumentDepth());
      t.bracketsType=TermField.BracketsType.NEVER;
    }
 else     if (termType != FunctionType.FUNCTION_INDEX && val.equals(getContext().getResources().getString(R.string.formula_arg_term_key))) {
      final TermField t=addTerm(getFormulaRoot(),l,-1,v,this,0);
      t.bracketsType=TermField.BracketsType.NEVER;
      if (termType == FunctionType.IDENTITY) {
        t.getEditText().setComparatorEnabled(true);
      }
    }
  }
  return v;
}",0.930111038536904
170922,"@Override public void updateTextSize(){
  super.updateTextSize();
  final int hsp=getFormulaList().getDimen().get(ScaledDimensions.Type.HOR_SYMBOL_PADDING);
  if (functionTerm != null) {
    if (termType == FunctionType.SQRT_LAYOUT || termType == FunctionType.NTHRT_LAYOUT) {
      functionTerm.setWidth(getFormulaList().getDimen().get(ScaledDimensions.Type.SMALL_SYMBOL_SIZE));
      functionTerm.setPadding(0,0,0,0);
    }
 else     if (termType == FunctionType.CONJUGATE_LAYOUT) {
      functionTerm.setPadding(hsp,0,hsp,0);
    }
 else {
      functionTerm.setPadding(0,0,hsp,0);
    }
  }
  if (termType == FunctionType.NTHRT_LAYOUT) {
    View nthrtPoverLayout=layout.findViewById(R.id.nthrt_power_layout);
    if (nthrtPoverLayout != null) {
      nthrtPoverLayout.setPadding(hsp,0,hsp,0);
    }
  }
}","@Override public void updateTextSize(){
  super.updateTextSize();
  final int hsp=getFormulaList().getDimen().get(ScaledDimensions.Type.HOR_SYMBOL_PADDING);
  if (functionTerm != null) {
    if (termType == FunctionType.SQRT_LAYOUT || termType == FunctionType.NTHRT_LAYOUT) {
      functionTerm.setWidth(getFormulaList().getDimen().get(ScaledDimensions.Type.SMALL_SYMBOL_SIZE));
      functionTerm.setPadding(0,0,0,0);
    }
 else     if (termType == FunctionType.CONJUGATE_LAYOUT) {
      functionTerm.setPadding(hsp,0,hsp,0);
    }
 else     if (getFunctionLabel().isEmpty()) {
      functionTerm.setPadding(0,0,hsp,0);
    }
  }
  if (termType == FunctionType.NTHRT_LAYOUT) {
    View nthrtPoverLayout=layout.findViewById(R.id.nthrt_power_layout);
    if (nthrtPoverLayout != null) {
      nthrtPoverLayout.setPadding(hsp,0,hsp,0);
    }
  }
}",0.9770253929866988
170923,"public void updateTextSize(ScaledDimensions dimen,int termDepth){
  strokeWidth=dimen.get(ScaledDimensions.Type.STROKE_WIDTH);
  if (symbolType == SymbolType.SUMMATION || symbolType == SymbolType.PRODUCT || symbolType == SymbolType.INTEGRAL) {
    setTextSize(TypedValue.COMPLEX_UNIT_PX,dimen.getTextSize(ScaledDimensions.Type.BIG_SYMBOL_SIZE,termDepth));
  }
 else {
    setTextSize(TypedValue.COMPLEX_UNIT_PX,dimen.getTextSize(termDepth));
  }
  setText(getText(),AppCompatTextView.BufferType.SPANNABLE);
  if (symbolType != null) {
switch (symbolType) {
case EMPTY:
      break;
case HOR_LINE:
    setPadding(0,0,0,0);
  setHeight(strokeWidth * 5);
break;
case LEFT_BRACKET:
case LEFT_SQR_BRACKET:
case RIGHT_BRACKET:
case RIGHT_SQR_BRACKET:
final int p1=dimen.get(ScaledDimensions.Type.HOR_BRAKET_PADDING);
setPadding(p1,0,p1,0);
break;
case SLASH:
setPadding(0,0,0,0);
break;
case INTEGRAL:
final int p2=dimen.get(ScaledDimensions.Type.HOR_SYMBOL_PADDING);
setWidth(20 * strokeWidth);
setHeight(60 * strokeWidth);
setPadding(p2,0,p2,0);
default :
final int p3=dimen.get(ScaledDimensions.Type.HOR_SYMBOL_PADDING);
setPadding(p3,0,p3,0);
break;
}
}
}","public void updateTextSize(ScaledDimensions dimen,int termDepth){
  strokeWidth=dimen.get(ScaledDimensions.Type.STROKE_WIDTH);
  if (symbolType == SymbolType.SUMMATION || symbolType == SymbolType.PRODUCT || symbolType == SymbolType.INTEGRAL) {
    setTextSize(TypedValue.COMPLEX_UNIT_PX,dimen.getTextSize(ScaledDimensions.Type.BIG_SYMBOL_SIZE,termDepth));
  }
 else {
    setTextSize(TypedValue.COMPLEX_UNIT_PX,dimen.getTextSize(termDepth));
  }
  setText(getText(),AppCompatTextView.BufferType.SPANNABLE);
  if (symbolType != null) {
switch (symbolType) {
case EMPTY:
      break;
case HOR_LINE:
    setPadding(0,0,0,0);
  setHeight(strokeWidth * 5);
break;
case LEFT_BRACKET:
case LEFT_SQR_BRACKET:
case RIGHT_BRACKET:
case RIGHT_SQR_BRACKET:
final int p1=dimen.get(ScaledDimensions.Type.HOR_BRAKET_PADDING);
setPadding(p1,0,p1,0);
break;
case SLASH:
setPadding(0,0,0,0);
break;
case INTEGRAL:
final int p2=dimen.get(ScaledDimensions.Type.HOR_SYMBOL_PADDING);
setWidth(20 * strokeWidth);
setHeight(60 * strokeWidth);
setPadding(p2,0,p2,0);
case TEXT:
final int p3=dimen.get(ScaledDimensions.Type.HOR_TEXT_PADDING);
setPadding(p3,0,p3,0);
break;
default :
final int p4=dimen.get(ScaledDimensions.Type.HOR_SYMBOL_PADDING);
setPadding(p4,0,p4,0);
break;
}
}
}",0.9489838241393612
170924,"/** 
 * FormulaTermInterval-specific methods
 */
private Pair<Unit,Integer> compareUnits(TermField[] terms){
  Unit unit=terms[0].getParser().getUnit();
  int compatibleNumber=0;
  for (  TermField t : terms) {
    if (unit != null && unit.isCompatible(t.getParser().getUnit())) {
      compatibleNumber++;
    }
    if (unit == null) {
      unit=t.getParser().getUnit();
    }
  }
  return new Pair<>(unit == null ? null : unit.getStandardUnit(),compatibleNumber);
}","/** 
 * FormulaTermInterval-specific methods
 */
private Pair<Unit,Integer> compareUnits(TermField[] terms){
  Unit unit=terms[0].getParser().getUnit();
  int compatibleNumber=0;
  for (  TermField t : terms) {
    final Unit tp=t.getParser().getUnit();
    if (unit != null && tp != null && unit.isCompatible(tp)) {
      compatibleNumber++;
    }
    if (unit == null) {
      unit=tp;
    }
  }
  return new Pair<>(unit == null ? null : unit.getStandardUnit(),compatibleNumber);
}",0.8916929547844374
170925,"@Override public CalculatedValue.ValueType getValue(CalculaterTask thread,CalculatedValue outValue) throws CancelException {
  if (termType != null && terms.size() > 0) {
    ensureArgValSize();
    for (int i=0; i < terms.size(); i++) {
      terms.get(i).getValue(thread,argVal[i]);
    }
    final CalculatedValue a0=argVal[0];
switch (getFunctionType()) {
case SIN:
      return outValue.sin(a0);
case CSC:
    return outValue.csc(a0);
case ASIN:
  return outValue.asin(a0);
case ACSC:
{
  outValue.divide(CalculatedValue.ONE,a0);
  return outValue.asin(outValue);
}
case COS:
return outValue.cos(a0);
case SEC:
return outValue.sec(a0);
case ACOS:
return outValue.acos(a0);
case ASEC:
{
outValue.divide(CalculatedValue.ONE,a0);
return outValue.acos(outValue);
}
case TAN:
return outValue.tan(a0);
case COT:
return outValue.cot(a0);
case ATAN:
return outValue.atan(a0);
case ATAN2:
{
final CalculatedValue a1=argVal[1];
if (a0.isComplex() || a1.isComplex()) {
return outValue.invalidate(CalculatedValue.ErrorType.PASSED_COMPLEX);
}
return outValue.setValue(FastMath.atan2(a0.getReal(),a1.getReal()));
}
case ACOT:
{
outValue.divide(CalculatedValue.ONE,a0);
return outValue.atan(outValue);
}
}
}
return outValue.invalidate(CalculatedValue.ErrorType.TERM_NOT_READY);
}","@Override public CalculatedValue.ValueType getValue(CalculaterTask thread,CalculatedValue outValue) throws CancelException {
  if (termType != null && terms.size() > 0) {
    ensureArgValSize();
    for (int i=0; i < terms.size(); i++) {
      terms.get(i).getValue(thread,argVal[i]);
    }
    final CalculatedValue a0=argVal[0];
switch (getFunctionType()) {
case SIN:
      return outValue.sin(a0);
case CSC:
    return outValue.csc(a0);
case ASIN:
  return outValue.asin(a0);
case ACSC:
{
  outValue.divide(CalculatedValue.ONE,a0);
  return outValue.asin(outValue);
}
case COS:
return outValue.cos(a0);
case SEC:
return outValue.sec(a0);
case ACOS:
return outValue.acos(a0);
case ASEC:
{
outValue.divide(CalculatedValue.ONE,a0);
return outValue.acos(outValue);
}
case TAN:
return outValue.tan(a0);
case COT:
return outValue.cot(a0);
case ATAN:
return outValue.atan(a0);
case ATAN2:
{
final CalculatedValue a1=argVal[1];
if (a0.isComplex() || a1.isComplex()) {
return outValue.invalidate(CalculatedValue.ErrorType.PASSED_COMPLEX);
}
return outValue.setValue(FastMath.atan2(a0.getReal(),a1.getReal()));
}
case ACOT:
{
outValue.atan(a0);
tmpVal.setValue(FastMath.PI / 2.0f);
return outValue.subtract(tmpVal,outValue);
}
}
}
return outValue.invalidate(CalculatedValue.ErrorType.TERM_NOT_READY);
}",0.9492979719188768
170926,"protected boolean isRemainingTermOnDelete(){
  return terms.size() <= 1;
}","protected boolean isRemainingTermOnDelete(){
  return terms.size() <= 1 || !isNewTermEnabled();
}",0.8654970760233918
170927,"@Override public boolean isNewTermEnabled(){
  return getFunctionType().isLink();
}","/** 
 * Implementation for methods for FormulaChangeIf interface
 */
@Override public boolean isNewTermEnabled(){
  return getFunctionType().isLink();
}",0.7063829787234043
170928,"public DialogPaletteSettings(Context context,PaletteSettingsChangeIf changeIf,List<String> visibleGroups){
  super(context,R.layout.dialog_palette_settings,R.string.dialog_palette_settings_title);
  this.changeIf=changeIf;
  this.groups=FormulaTerm.collectPaletteGroups();
  final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  paletteView=getRootLayout().findViewById(R.id.dialog_palette_view);
{
    inflater.inflate(R.layout.dialog_palette_settings_item,paletteView);
    final LinearLayout itemLayout=(LinearLayout)paletteView.getChildAt(paletteView.getChildCount() - 1);
    final LinearLayout buttonLayout=itemLayout.findViewById(R.id.dialog_palette_settings_buttons);
    FormulaBase.addToPalette(context,buttonLayout);
    prepareGroup(context,itemLayout,FormulaBase.class.getSimpleName(),visibleGroups);
  }
  for (  TermTypeIf.GroupType g : groups) {
    inflater.inflate(R.layout.dialog_palette_settings_item,paletteView);
    final LinearLayout itemLayout=(LinearLayout)paletteView.getChildAt(paletteView.getChildCount() - 1);
    final LinearLayout buttonLayout=itemLayout.findViewById(R.id.dialog_palette_settings_buttons);
    FormulaTerm.addToPalette(context,buttonLayout,g);
    prepareGroup(context,itemLayout,g.toString(),visibleGroups);
  }
}","public DialogPaletteSettings(Context context,PaletteSettingsChangeIf changeIf,List<String> visibleGroups){
  super(context,R.layout.dialog_palette_settings,R.string.dialog_palette_settings_title);
  this.changeIf=changeIf;
  this.groups=FormulaTerm.collectPaletteGroups();
  final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  paletteView=getRootLayout().findViewById(R.id.dialog_palette_view);
{
    inflater.inflate(R.layout.dialog_palette_settings_item,paletteView);
    final LinearLayout itemLayout=(LinearLayout)paletteView.getChildAt(paletteView.getChildCount() - 1);
    final LinearLayout buttonLayout=itemLayout.findViewById(R.id.dialog_palette_settings_buttons);
    final List<PaletteButton> termButtons=new ArrayList<>();
    FormulaBase.addToPalette(context,termButtons);
    for (    PaletteButton b : termButtons) {
      buttonLayout.addView(b);
    }
    prepareGroup(context,itemLayout,FormulaBase.class.getSimpleName(),visibleGroups);
  }
  for (  TermTypeIf.GroupType g : groups) {
    inflater.inflate(R.layout.dialog_palette_settings_item,paletteView);
    final LinearLayout itemLayout=(LinearLayout)paletteView.getChildAt(paletteView.getChildCount() - 1);
    final LinearLayout buttonLayout=itemLayout.findViewById(R.id.dialog_palette_settings_buttons);
    final List<PaletteButton> termButtons=new ArrayList<>();
    FormulaTerm.addToPalette(context,termButtons,true,g);
    for (    PaletteButton b : termButtons) {
      buttonLayout.addView(b);
    }
    prepareGroup(context,itemLayout,g.toString(),visibleGroups);
  }
}",0.881691101261507
170929,"public static void addToPalette(Context context,LinearLayout paletteLayout){
  for (int i=0; i < BaseType.values().length; i++) {
    final BaseType t=BaseType.values()[i];
    if (t.getImageId() != Palette.NO_BUTTON) {
      if (t == BaseType.TERM) {
        PaletteButton p=new PaletteButton(context,R.string.formula_term_separator,t.getImageId(),t.getDescriptionId(),t.toString());
        p.setCategories(new PaletteButton.Category[]{PaletteButton.Category.NEW_TERM,PaletteButton.Category.CONVERSION});
        paletteLayout.addView(p);
      }
 else {
        PaletteButton p=new PaletteButton(context,Palette.NO_BUTTON,t.getImageId(),t.getDescriptionId(),t.toString());
        paletteLayout.addView(p);
      }
    }
  }
}","public static void addToPalette(Context context,List<PaletteButton> paletteLayout){
  for (int i=0; i < BaseType.values().length; i++) {
    final BaseType t=BaseType.values()[i];
    if (t.getImageId() != Palette.NO_BUTTON) {
      if (t == BaseType.TERM) {
        PaletteButton p=new PaletteButton(context,FormulaBase.class.getSimpleName(),t.toString(),t.getImageId(),t.getDescriptionId(),R.string.formula_term_separator);
        p.setCategories(new PaletteButton.Category[]{PaletteButton.Category.NEW_TERM,PaletteButton.Category.CONVERSION});
        paletteLayout.add(p);
      }
 else {
        PaletteButton p=new PaletteButton(context,FormulaBase.class.getSimpleName(),t.toString(),t.getImageId(),t.getDescriptionId(),Palette.NO_BUTTON);
        paletteLayout.add(p);
      }
    }
  }
}",0.7436065573770492
170930,"private static <T extends TermTypeIf>void addToPalette(Context context,T[] buttons,LinearLayout paletteLayout,PaletteButton.Category[] categories){
  for (  final TermTypeIf b : buttons) {
    if (b.getImageId() != Palette.NO_BUTTON) {
      PaletteButton p=new PaletteButton(context,b.getShortCutId(),b.getImageId(),b.getDescriptionId(),b.getLowerCaseName());
      paletteLayout.addView(p);
      p.setCategories(categories);
    }
  }
}","private static <T extends TermTypeIf>void addToPalette(Context context,T[] buttons,List<PaletteButton> paletteLayout,boolean ensureImageId,PaletteButton.Category[] categories){
  for (  final TermTypeIf b : buttons) {
    if (ensureImageId && b.getImageId() == Palette.NO_BUTTON) {
      continue;
    }
    PaletteButton p=new PaletteButton(context,b);
    p.setCategories(categories);
    paletteLayout.add(p);
  }
}",0.6487747957992999
170931,"private void addButtonsToPalette(){
  paletteBlock.clear();
  for (int i=paletteLayout.getChildCount() - 1; i > 0; i--) {
    if (paletteLayout.getChildAt(i) instanceof PaletteButton) {
      paletteLayout.removeViewAt(i);
    }
  }
  if (visibleGroups.contains(FormulaBase.class.getSimpleName())) {
    FormulaBase.addToPalette(context,paletteLayout);
  }
  for (  TermTypeIf.GroupType g : FormulaTerm.collectPaletteGroups()) {
    if (visibleGroups.contains(g.toString())) {
      FormulaTerm.addToPalette(context,paletteLayout,g);
    }
  }
  for (int i=0; i < Category.values().length; i++) {
    paletteBlock.add(new ArrayList<PaletteButton>());
  }
  for (int i=0; i < paletteLayout.getChildCount(); i++) {
    View b=paletteLayout.getChildAt(i);
    if (b instanceof PaletteButton) {
      final PaletteButton pb=(PaletteButton)b;
      if (pb.getCategories() != null) {
        for (        Category cat : pb.getCategories()) {
          paletteBlock.get(cat.ordinal()).add(pb);
        }
      }
      pb.setOnLongClickListener(this);
      pb.setOnClickListener(this);
    }
  }
}","private void addButtonsToPalette(){
  termButtons.clear();
  paletteBlock.clear();
  for (int i=paletteLayout.getChildCount() - 1; i > 0; i--) {
    if (paletteLayout.getChildAt(i) instanceof PaletteButton) {
      paletteLayout.removeViewAt(i);
    }
  }
  FormulaBase.addToPalette(context,termButtons);
  for (  TermTypeIf.GroupType g : FormulaTerm.collectPaletteGroups()) {
    FormulaTerm.addToPalette(context,termButtons,false,g);
  }
  for (int i=0; i < Category.values().length; i++) {
    paletteBlock.add(new ArrayList<PaletteButton>());
  }
  for (  PaletteButton pb : termButtons) {
    if (pb.getCategories() != null) {
      for (      Category cat : pb.getCategories()) {
        paletteBlock.get(cat.ordinal()).add(pb);
      }
    }
    if (pb.hasImage() && visibleGroups.contains(pb.getGroup())) {
      pb.setOnLongClickListener(this);
      pb.setOnClickListener(this);
      paletteLayout.addView(pb);
    }
  }
}",0.7325753830944143
170932,"@Override public void onTextChanged(String s,boolean isManualInput){
  if (s == null || listChangeIf == null) {
    lastHiddenInput=null;
    return;
  }
  if (lastHiddenInput != null && lastHiddenInput.equals(s)) {
    return;
  }
  lastHiddenInput=s;
  if (ClipboardManager.isFormulaObject(s)) {
    hiddenInput.setTextWatcher(false);
    listChangeIf.onPalettePressed(s);
    return;
  }
  final String termSep=context.getResources().getString(R.string.formula_term_separator);
  final String code=(termSep.equals(s)) ? FormulaBase.BaseType.TERM.toString() : FormulaTerm.getOperatorCode(context,s,true);
  if (code == null) {
    return;
  }
  if (UserFunctions.FunctionType.FUNCTION_LINK.toString().equalsIgnoreCase(code)) {
    hiddenInput.setTextWatcher(false);
    listChangeIf.onPalettePressed(s);
    return;
  }
  for (int i=0; i < paletteLayout.getChildCount(); i++) {
    if (paletteLayout.getChildAt(i) instanceof PaletteButton) {
      PaletteButton b=(PaletteButton)paletteLayout.getChildAt(i);
      if (b.isEnabled() && b.getCode() != null && b.getCode().equalsIgnoreCase(code)) {
        hiddenInput.setTextWatcher(false);
        listChangeIf.onPalettePressed(b.getCode());
        break;
      }
    }
  }
}","@Override public void onTextChanged(String s,boolean isManualInput){
  if (s == null || listChangeIf == null) {
    lastHiddenInput=null;
    return;
  }
  if (lastHiddenInput != null && lastHiddenInput.equals(s)) {
    return;
  }
  lastHiddenInput=s;
  if (ClipboardManager.isFormulaObject(s)) {
    hiddenInput.setTextWatcher(false);
    listChangeIf.onPalettePressed(s);
    return;
  }
  final String termSep=context.getResources().getString(R.string.formula_term_separator);
  final TermTypeIf term=FormulaTerm.getTermTypeIf(context,null,s,true);
  final String code=(termSep.equals(s)) ? FormulaBase.BaseType.TERM.toString() : ((term != null) ? term.getLowerCaseName() : null);
  if (code == null) {
    return;
  }
  if (UserFunctions.FunctionType.FUNCTION_LINK.toString().equalsIgnoreCase(code)) {
    hiddenInput.setTextWatcher(false);
    listChangeIf.onPalettePressed(s);
    return;
  }
  for (  PaletteButton b : termButtons) {
    if (b.isEnabled() && b.getCode() != null && b.getCode().equalsIgnoreCase(code)) {
      hiddenInput.setTextWatcher(false);
      listChangeIf.onPalettePressed(b.getCode());
      break;
    }
  }
}",0.8371308016877637
170933,"/** 
 * Procedure sets the background color for all buttons depending on enabled status
 */
private void updateButtonsColor(){
  for (int i=0; i < paletteLayout.getChildCount(); i++) {
    if (!(paletteLayout.getChildAt(i) instanceof PaletteButton)) {
      continue;
    }
    PaletteButton b=(PaletteButton)paletteLayout.getChildAt(i);
    final boolean isEnabled=b.isEnabled() && paletteLayout.isEnabled();
    ViewUtils.setImageButtonColorAttr(context,b,isEnabled ? R.attr.colorMicroMathIcon : R.attr.colorPrimaryDark);
  }
}","/** 
 * Procedure sets the background color for all buttons depending on enabled status
 */
private void updateButtonsColor(){
  for (  PaletteButton b : termButtons) {
    final boolean isEnabled=b.isEnabled() && paletteLayout.isEnabled();
    ViewUtils.setImageButtonColorAttr(context,b,isEnabled ? R.attr.colorMicroMathIcon : R.attr.colorPrimaryDark);
  }
}",0.7401574803149606
170934,"public PaletteButton(Context context,int shortCutId,int imageId,int descriptionId,String code){
  super(context);
  final int buttonSize=context.getResources().getDimensionPixelSize(R.dimen.activity_toolbar_height) - 2 * context.getResources().getDimensionPixelSize(R.dimen.activity_palette_vertical_padding);
  setLayoutParams(new ViewGroup.LayoutParams(buttonSize,buttonSize));
  TypedValue outValue=new TypedValue();
  context.getTheme().resolveAttribute(R.attr.selectableItemBackground,outValue,true);
  setBackgroundResource(outValue.resourceId);
  setImageResource(imageId);
  if (shortCutId != Palette.NO_BUTTON) {
    shortCut=context.getResources().getString(shortCutId);
  }
  if (descriptionId != Palette.NO_BUTTON) {
    String description=context.getResources().getString(descriptionId);
    if (shortCut != null) {
      description+=""String_Node_Str"";
      description+=shortCut;
      description+=""String_Node_Str"";
    }
    setContentDescription(description);
    setLongClickable(true);
  }
  this.code=code;
  enableAll();
  ViewUtils.setImageButtonColorAttr(getContext(),this,isEnabled() ? R.attr.colorMicroMathIcon : R.attr.colorPrimaryDark);
}","public PaletteButton(Context context,String group,String code,int imageId,int descriptionId,int shortCutId){
  super(context);
  final int buttonSize=context.getResources().getDimensionPixelSize(R.dimen.activity_toolbar_height) - 2 * context.getResources().getDimensionPixelSize(R.dimen.activity_palette_vertical_padding);
  setLayoutParams(new ViewGroup.LayoutParams(buttonSize,buttonSize));
  TypedValue outValue=new TypedValue();
  context.getTheme().resolveAttribute(R.attr.selectableItemBackground,outValue,true);
  setBackgroundResource(outValue.resourceId);
  this.group=group;
  this.code=code;
  this.imageId=imageId;
  if (hasImage()) {
    setImageResource(imageId);
  }
  String shortCut=null;
  if (shortCutId != Palette.NO_BUTTON) {
    shortCut=context.getResources().getString(shortCutId);
  }
  if (descriptionId != Palette.NO_BUTTON) {
    String description=context.getResources().getString(descriptionId);
    if (shortCut != null) {
      description+=""String_Node_Str"";
      description+=shortCut;
      description+=""String_Node_Str"";
    }
    setContentDescription(description);
    setLongClickable(true);
  }
  enableAll();
  ViewUtils.setImageButtonColorAttr(getContext(),this,isEnabled() ? R.attr.colorMicroMathIcon : R.attr.colorPrimaryDark);
}",0.9070814572247236
170935,"protected void onSaveFinished(){
}","protected void onSaveFinished(){
  setInOperation(false,null);
}",0.6938775510204082
170936,"@Override protected void onSaveFinished(){
  ((MainActivity)activity).selectWorksheet(INVALID_ACTION_ID);
}","@Override protected void onSaveFinished(){
  super.onSaveFinished();
  ((MainActivity)activity).selectWorksheet(INVALID_ACTION_ID);
}",0.8916666666666667
170937,"public ValueType sqrt(CalculatedValue g){
  if (g.isComplex() || (g.isReal() && g.real < 0)) {
    if (g.unit != null) {
      invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
    return setComplexValue(g.getComplex().sqrt());
  }
 else {
    if (g.unit != null) {
      unit=g.unit.root(2);
    }
    return setValue(FastMath.sqrt(g.real));
  }
}","public ValueType sqrt(CalculatedValue g){
  if (g.isComplex() || (g.isReal() && g.real < 0)) {
    if (g.unit != null) {
      invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
 else {
      unit=null;
    }
    return setComplexValue(g.getComplex().sqrt());
  }
 else {
    if (g.unit != null) {
      unit=g.unit.root(2);
    }
 else {
      unit=null;
    }
    return setValue(FastMath.sqrt(g.real));
  }
}",0.9175531914893617
170938,"public ValueType add(CalculatedValue f,CalculatedValue g){
  if (unitExists(f,g)) {
    if (f.unit == null || g.unit == null || !f.unit.isCompatible(g.unit)) {
      return invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
    unit=f.unit;
  }
  if (f.isComplex() || g.isComplex()) {
    return setComplexValue(f.real + g.real,f.imaginary + g.imaginary);
  }
 else {
    return setValue(f.real + g.real);
  }
}","public ValueType add(CalculatedValue f,CalculatedValue g){
  if (unitExists(f,g)) {
    if (f.unit == null || g.unit == null || !f.unit.isCompatible(g.unit)) {
      return invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
    unit=f.unit;
  }
 else {
    unit=null;
  }
  if (f.isComplex() || g.isComplex()) {
    return setComplexValue(f.real + g.real,f.imaginary + g.imaginary);
  }
 else {
    return setValue(f.real + g.real);
  }
}",0.967895362663496
170939,"public ValueType nthRoot(CalculatedValue g,int n){
  try {
    if (g.unit != null) {
      unit=g.unit.root(n);
    }
    final List<Complex> roots=g.getComplex().nthRoot(n);
    for (    Complex root : roots) {
      if (FastMath.abs(root.getImaginary()) < 1E-15) {
        return setValue(root.getReal());
      }
    }
    if (!roots.isEmpty()) {
      return setComplexValue(roots.get(0));
    }
  }
 catch (  Exception ex) {
  }
  return invalidate(ErrorType.NOT_A_NUMBER);
}","public ValueType nthRoot(CalculatedValue g,int n){
  try {
    if (g.unit != null) {
      unit=g.unit.root(n);
    }
 else {
      unit=null;
    }
    final List<Complex> roots=g.getComplex().nthRoot(n);
    for (    Complex root : roots) {
      if (FastMath.abs(root.getImaginary()) < 1E-15) {
        return setValue(root.getReal());
      }
    }
    if (!roots.isEmpty()) {
      return setComplexValue(roots.get(0));
    }
  }
 catch (  Exception ex) {
  }
  return invalidate(ErrorType.NOT_A_NUMBER);
}",0.968718466195762
170940,"public ValueType subtract(CalculatedValue f,CalculatedValue g){
  if (unitExists(f,g)) {
    if (f.unit == null || g.unit == null || !f.unit.isCompatible(g.unit)) {
      return invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
    unit=f.unit;
  }
  if (f.isComplex() || g.isComplex()) {
    return setComplexValue(f.real - g.real,f.imaginary - g.imaginary);
  }
 else {
    return setValue(f.real - g.real);
  }
}","public ValueType subtract(CalculatedValue f,CalculatedValue g){
  if (unitExists(f,g)) {
    if (f.unit == null || g.unit == null || !f.unit.isCompatible(g.unit)) {
      return invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
    unit=f.unit;
  }
 else {
    unit=null;
  }
  if (f.isComplex() || g.isComplex()) {
    return setComplexValue(f.real - g.real,f.imaginary - g.imaginary);
  }
 else {
    return setValue(f.real - g.real);
  }
}",0.9682726204465336
170941,"public ValueType pow(CalculatedValue f,CalculatedValue g){
  if (f.isComplex() || g.isComplex()) {
    if (f.unit != null) {
      invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
    return setComplexValue(f.getComplex().pow(g.getComplex()));
  }
 else {
    if (f.unit != null) {
      final int n=(int)g.real;
      if ((double)n != g.real) {
        invalidate(ErrorType.INCOMPATIBLE_UNIT);
      }
 else {
        unit=f.unit.pow(n);
      }
    }
    return setValue(FastMath.pow(f.real,g.real));
  }
}","public ValueType pow(CalculatedValue f,CalculatedValue g){
  if (g.unit != null) {
    invalidate(ErrorType.INCOMPATIBLE_UNIT);
  }
  if (f.isComplex() || g.isComplex()) {
    if (f.unit != null) {
      invalidate(ErrorType.INCOMPATIBLE_UNIT);
    }
 else {
      unit=null;
    }
    return setComplexValue(f.getComplex().pow(g.getComplex()));
  }
 else {
    if (f.unit != null) {
      final int n=g.getInteger();
      if ((double)n != g.real) {
        invalidate(ErrorType.INCOMPATIBLE_UNIT);
      }
 else {
        unit=f.unit.pow(n);
      }
    }
 else {
      unit=null;
    }
    return setValue(FastMath.pow(f.real,g.real));
  }
}",0.5078260869565218
170942,"public ValueType divide(CalculatedValue f,CalculatedValue g){
  if (unitExists(f,g)) {
    if (f.unit == null) {
      unit=g.unit.inverse();
    }
 else     if (g.unit == null) {
      unit=f.unit;
    }
 else     if (f.unit.equals(g.unit)) {
      unit=null;
    }
 else {
      unit=f.unit.divide(g.unit);
    }
  }
  if (f.isComplex() || g.isComplex()) {
    final double c=g.real;
    final double d=g.imaginary;
    if (FastMath.abs(c) < FastMath.abs(d)) {
      final double q=c / d;
      final double denominator=c * q + d;
      return setComplexValue((f.real * q + f.imaginary) / denominator,(f.imaginary * q - f.real) / denominator);
    }
 else {
      final double q=d / c;
      final double denominator=d * q + c;
      return setComplexValue((f.imaginary * q + f.real) / denominator,(f.imaginary - f.real * q) / denominator);
    }
  }
 else {
    return setValue(f.real / g.real);
  }
}","public ValueType divide(CalculatedValue f,CalculatedValue g){
  if (unitExists(f,g)) {
    if (f.unit == null) {
      unit=g.unit.inverse();
    }
 else     if (g.unit == null) {
      unit=f.unit;
    }
 else     if (f.unit.equals(g.unit)) {
      unit=null;
    }
 else {
      unit=f.unit.divide(g.unit);
    }
  }
 else {
    unit=null;
  }
  if (f.isComplex() || g.isComplex()) {
    final double c=g.real;
    final double d=g.imaginary;
    if (FastMath.abs(c) < FastMath.abs(d)) {
      final double q=c / d;
      final double denominator=c * q + d;
      return setComplexValue((f.real * q + f.imaginary) / denominator,(f.imaginary * q - f.real) / denominator);
    }
 else {
      final double q=d / c;
      final double denominator=d * q + c;
      return setComplexValue((f.imaginary * q + f.real) / denominator,(f.imaginary - f.real * q) / denominator);
    }
  }
 else {
    return setValue(f.real / g.real);
  }
}",0.9852861035422344
170943,"/** 
 * Conversion methods
 */
public String toString(){
  return valueType.toString() + ""String_Node_Str"" + real+ ""String_Node_Str""+ imaginary+ ""String_Node_Str"";
}","/** 
 * Conversion methods
 */
public String toString(){
  return valueType.toString() + ""String_Node_Str"" + real+ ""String_Node_Str""+ imaginary+ ""String_Node_Str""+ (unit == null ? ""String_Node_Str"" : unit.toString());
}",0.859375
170944,"public void prepare(AppCompatActivity activity,FormulaChangeIf termChangeIf){
  super.prepare(SymbolType.EMPTY,activity,termChangeIf);
  plotParameters.initialize(getContext());
  if (colorMapView != null) {
    colorMapView.prepare(activity,termChangeIf);
  }
}","public void prepare(AppCompatActivity activity,FormulaChangeIf termChangeIf){
  super.prepare(SymbolType.EMPTY,activity,termChangeIf);
  getPaint().setColor(CompatUtils.getThemeColorAttr(activity,R.attr.colorFormulaNormal));
  plotParameters.initialize(getContext());
  if (colorMapView != null) {
    colorMapView.prepare(activity,termChangeIf);
  }
}",0.8534201954397395
170945,"FileListView(Commander c){
  commander=c;
  listView=(ListView)commander.findViewById(R.id.fman_list_view);
  listView.setItemsCanFocus(false);
  listView.setFocusableInTouchMode(true);
  listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  listView.setOnItemClickListener(this);
  if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    TypedValue outValue=new TypedValue();
    commander.getContext().getTheme().resolveAttribute(R.attr.selectableItemBackground,outValue,true);
    listView.setSelector(outValue.resourceId);
  }
  commander.registerForContextMenu(listView);
  statusPanel=(LinearLayout)commander.findViewById(R.id.fman_status_panel);
  statusBar=(TextView)commander.findViewById(R.id.fman_status_bar);
}","FileListView(Commander c){
  commander=c;
  listView=(ListView)commander.findViewById(R.id.fman_list_view);
  listView.setItemsCanFocus(false);
  listView.setFocusableInTouchMode(true);
  listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  listView.setOnItemClickListener(this);
  if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    TypedValue outValue=new TypedValue();
    commander.getContext().getTheme().resolveAttribute(R.attr.selectableItemBackground,outValue,true);
    listView.setSelector(outValue.resourceId);
  }
  commander.registerForContextMenu(listView);
  statusPanel=(LinearLayout)commander.findViewById(R.id.fman_status_panel);
  statusPanelDivider=commander.findViewById(R.id.fman_status_panel_divider);
  statusBar=(TextView)commander.findViewById(R.id.fman_status_bar);
}",0.9363579080025204
170946,"public final void Navigate(Uri uri,String posTo){
  try {
    currentPosition=-1;
    listView.clearChoices();
    listView.invalidateViews();
    AdapterIf ca_new=null, ca=(AdapterIf)listView.getAdapter();
    String scheme=uri.getScheme();
    if (scheme == null) {
      scheme=""String_Node_Str"";
    }
    if (ca == null || !scheme.equals(ca.getScheme())) {
      ca_new=commander.CreateAdapter(uri);
      listView.setAdapter((ListAdapter)ca_new);
      applySettings();
      ca=ca_new;
    }
    ca.setMode(AdapterIf.MODE_SORTING | AdapterIf.MODE_SORT_DIR,adapterMode);
    ca.readSource(uri,Integer.toBinaryString(0) + (posTo == null ? ""String_Node_Str"" : posTo));
    statusPanel.setVisibility((ca instanceof AdapterHome) ? View.GONE : View.VISIBLE);
    statusBar.setText(ca.toString());
    ViewUtils.Debug(this,""String_Node_Str"" + ca.getUri().getPath());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public final void Navigate(Uri uri,String posTo){
  try {
    currentPosition=-1;
    listView.clearChoices();
    listView.invalidateViews();
    AdapterIf ca_new=null, ca=(AdapterIf)listView.getAdapter();
    String scheme=uri.getScheme();
    if (scheme == null) {
      scheme=""String_Node_Str"";
    }
    if (ca == null || !scheme.equals(ca.getScheme())) {
      ca_new=commander.CreateAdapter(uri);
      listView.setAdapter((ListAdapter)ca_new);
      applySettings();
      ca=ca_new;
    }
    ca.setMode(AdapterIf.MODE_SORTING | AdapterIf.MODE_SORT_DIR,adapterMode);
    ca.readSource(uri,Integer.toBinaryString(0) + (posTo == null ? ""String_Node_Str"" : posTo));
    statusPanel.setVisibility((ca instanceof AdapterHome) ? View.GONE : View.VISIBLE);
    statusPanelDivider.setVisibility(statusPanel.getVisibility());
    statusBar.setText(ca.toString());
    ViewUtils.Debug(this,""String_Node_Str"" + ca.getUri().getPath());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9650859822824388
170947,"public void prepare(AppCompatActivity activity,FormulaChangeIf termChangeIf){
  this.prepare(null);
  super.prepare(SymbolType.EMPTY,activity,termChangeIf);
}","public void prepare(AppCompatActivity activity,FormulaChangeIf termChangeIf){
  this.prepare(null);
  super.prepare(SymbolType.EMPTY,activity,termChangeIf);
  getPaint().setColor(CompatUtils.getThemeColorAttr(activity,R.attr.colorFormulaNormal));
}",0.7783251231527094
170948,"public boolean onScaleBegin(ScaleGestureDetector detector){
  isScaled=true;
  scale=1.0f;
  mEdgeGlowLeft.onRelease();
  mEdgeGlowRight.onRelease();
  mEdgeGlowTop.onRelease();
  mEdgeGlowBottom.onRelease();
  return true;
}","public boolean onScaleBegin(ScaleGestureDetector detector){
  if (scaleDetectorActive) {
    isScaled=true;
    scale=1.0f;
    mEdgeGlowLeft.onRelease();
    mEdgeGlowRight.onRelease();
    mEdgeGlowTop.onRelease();
    mEdgeGlowBottom.onRelease();
  }
 else {
    isScaled=false;
  }
  return isScaled;
}",0.832391713747646
170949,"/** 
 * Scrolls the view to make the area defined by <code>top</code> and <code>bottom</code> visible. This method attempts to give the focus to a component visible in this area. If no component can be focused in the new visible area, the focus is reclaimed by this scrollview.
 * @param direction the scroll direction: {@link android.view.View#FOCUS_UP} to go upward{@link android.view.View#FOCUS_DOWN} to downward
 * @param top       the top offset of the new area to be made visible
 * @param bottom    the bottom offset of the new area to be made visible
 * @return true if the key event is consumed by this method, false otherwise
 */
private boolean scrollAndFocus(int directionY,int top,int bottom,int directionX,int left,int right){
  boolean handled=true;
  int height=getHeight();
  int containerTop=getScrollY();
  int containerBottom=containerTop + height;
  boolean up=directionY == View.FOCUS_UP;
  int width=getWidth();
  int containerLeft=getScrollX();
  int containerRight=containerLeft + width;
  boolean leftwards=directionX == View.FOCUS_UP;
  View newFocused=findFocusableViewInBounds(up,top,bottom,leftwards,left,right);
  if (newFocused == null) {
    newFocused=this;
  }
  if ((top >= containerTop && bottom <= containerBottom) || (left >= containerLeft && right <= containerRight)) {
    handled=false;
  }
 else {
    int deltaY=up ? (top - containerTop) : (bottom - containerBottom);
    int deltaX=leftwards ? (left - containerLeft) : (right - containerRight);
    doScroll(deltaX,deltaY);
  }
  return handled;
}","/** 
 * Scrolls the view to make the area defined by <code>top</code> and <code>bottom</code> visible. This method attempts to give the focus to a component visible in this area. If no component can be focused in the new visible area, the focus is reclaimed by this scrollview.
 * @param directionY the scroll direction: {@link android.view.View#FOCUS_UP} to go upward{@link android.view.View#FOCUS_DOWN} to downward
 * @param top       the top offset of the new area to be made visible
 * @param bottom    the bottom offset of the new area to be made visible
 * @return true if the key event is consumed by this method, false otherwise
 */
private boolean scrollAndFocus(int directionY,int top,int bottom,int directionX,int left,int right){
  boolean handled=true;
  int height=getHeight();
  int containerTop=getScrollY();
  int containerBottom=containerTop + height;
  boolean up=directionY == View.FOCUS_UP;
  int width=getWidth();
  int containerLeft=getScrollX();
  int containerRight=containerLeft + width;
  boolean leftwards=directionX == View.FOCUS_UP;
  View newFocused=findFocusableViewInBounds(up,top,bottom,leftwards,left,right);
  if (newFocused == null) {
    newFocused=this;
  }
  if ((top >= containerTop && bottom <= containerBottom) || (left >= containerLeft && right <= containerRight)) {
    handled=false;
  }
 else {
    int deltaY=up ? (top - containerTop) : (bottom - containerBottom);
    int deltaX=leftwards ? (left - containerLeft) : (right - containerRight);
    doScroll(deltaX,deltaY);
  }
  return handled;
}",0.99967585089141
170950,"@Override public boolean onTouchEvent(MotionEvent event){
  boolean retVal=scaleDetectorActive && mScaleGestureDetector.onTouchEvent(event);
  retVal=mGestureDetector.onTouchEvent(event) || retVal;
  final int action=MotionEventCompat.getActionMasked(event);
  if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_POINTER_UP) {
    mGestureListener.finish();
  }
  return retVal || super.onTouchEvent(event);
}","@Override public boolean onTouchEvent(MotionEvent event){
  boolean retVal=mScaleGestureDetector.onTouchEvent(event);
  retVal=mGestureDetector.onTouchEvent(event) || retVal;
  final int action=MotionEventCompat.getActionMasked(event);
  if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_POINTER_UP) {
    mGestureListener.finish();
  }
  return retVal || super.onTouchEvent(event);
}",0.974585635359116
170951,"public void onScaleEnd(ScaleGestureDetector detector){
  if (Build.VERSION.SDK_INT >= 11) {
    scale*=detector.getScaleFactor();
    if (listChangeIf != null) {
      listChangeIf.onScale(scale);
      getMainLayout().setScaleX(1.0f);
      getMainLayout().setScaleY(1.0f);
    }
  }
  isScaled=false;
}","public void onScaleEnd(ScaleGestureDetector detector){
  if (isScaled && Build.VERSION.SDK_INT >= 11) {
    scale*=detector.getScaleFactor();
    if (listChangeIf != null) {
      listChangeIf.onScale(scale);
      getMainLayout().setScaleX(1.0f);
      getMainLayout().setScaleY(1.0f);
    }
  }
  isScaled=false;
}",0.9806451612903224
170952,"@Override public boolean onScale(ScaleGestureDetector detector){
  if (listChangeIf != null) {
    scale*=detector.getScaleFactor();
    if (Build.VERSION.SDK_INT >= 11) {
      getMainLayout().setScaleX(scale);
      getMainLayout().setScaleY(scale);
    }
 else {
      listChangeIf.onScale(detector.getScaleFactor());
    }
  }
  return true;
}","@Override public boolean onScale(ScaleGestureDetector detector){
  if (isScaled && listChangeIf != null) {
    scale*=detector.getScaleFactor();
    if (Build.VERSION.SDK_INT >= 11) {
      getMainLayout().setScaleX(scale);
      getMainLayout().setScaleY(scale);
    }
 else {
      listChangeIf.onScale(detector.getScaleFactor());
    }
  }
  return true;
}",0.9830028328611898
170953,"/** 
 * Re-implementation for methods for CalculationResult superclass
 */
@Override public void invalidateResult(){
  clearResult();
  showResult();
}","/** 
 * Re-implementation for methods for CalculationResult superclass
 */
@Override public void invalidateResult(){
  constantResultField.getEditText().setText(""String_Node_Str"");
  arrayResultMatrix.setText(""String_Node_Str"",getFormulaList().getDimen());
}",0.6308068459657702
170954,"@Override public void calculate(CalculaterTask thread) throws CancelException {
  final TestSession ta=getFormulaList().getTaSession();
  if (disableCalculation()) {
    if (!leftTerm.isTerm() && ta != null) {
      ta.setResult(leftTerm.getText(),fillResultString());
    }
    return;
  }
  ArrayList<Equation> linkedIntervals=getAllIntervals();
  if (linkedIntervals.isEmpty()) {
    resultType=ResultType.CONSTANT;
    constantResult=new CalculatedValue();
    leftTerm.getValue(thread,constantResult);
  }
 else   if (linkedIntervals.size() == 1) {
    final CalculatedValue[] argValues=new CalculatedValue[1];
    argValues[0]=new CalculatedValue();
    final ArrayList<Double> xValues=linkedIntervals.get(0).getInterval(thread);
    if (xValues != null && xValues.size() > 0) {
      final int xLength=xValues.size();
      resultType=ResultType.ARRAY_1D;
      arrayArgument=new EquationArrayResult(xLength);
      arrayResult=new EquationArrayResult(xLength,1);
      for (int xIndex=0; xIndex < xLength; xIndex++) {
        final Double x=xValues.get(xIndex);
        argValues[0].setValue(x);
        arrayArgument.getValue1D(xIndex).setValue(x);
        linkedIntervals.get(0).setArgumentValues(argValues);
        leftTerm.getValue(thread,arrayResult.getValue2D(xIndex,0));
      }
    }
 else {
      resultType=ResultType.NAN;
    }
  }
 else   if (linkedIntervals.size() == 2) {
    final CalculatedValue[][] argValues=new CalculatedValue[2][1];
    argValues[0][0]=new CalculatedValue();
    final ArrayList<Double> xValues=linkedIntervals.get(0).getInterval(thread);
    argValues[1][0]=new CalculatedValue();
    final ArrayList<Double> yValues=linkedIntervals.get(1).getInterval(thread);
    if (xValues != null && xValues.size() > 0 && yValues != null && yValues.size() > 0) {
      final int xLength=xValues.size();
      final int yLength=yValues.size();
      resultType=ResultType.ARRAY_2D;
      arrayResult=new EquationArrayResult(xLength,yLength);
      for (int xIndex=0; xIndex < xLength; xIndex++) {
        argValues[0][0].setValue(xValues.get(xIndex));
        linkedIntervals.get(0).setArgumentValues(argValues[0]);
        for (int yIndex=0; yIndex < yLength; yIndex++) {
          argValues[1][0].setValue(yValues.get(yIndex));
          linkedIntervals.get(1).setArgumentValues(argValues[1]);
          leftTerm.getValue(thread,arrayResult.getValue2D(xIndex,yIndex));
        }
      }
    }
  }
  if (!leftTerm.isTerm() && ta != null) {
    ta.setResult(leftTerm.getText(),fillResultString());
  }
}","@Override public void calculate(CalculaterTask thread) throws CancelException {
  clearResult();
  final TestSession ta=getFormulaList().getTaSession();
  if (disableCalculation()) {
    if (!leftTerm.isTerm() && ta != null) {
      ta.setResult(leftTerm.getText(),fillResultString());
    }
    return;
  }
  ArrayList<Equation> linkedIntervals=getAllIntervals();
  if (linkedIntervals.isEmpty()) {
    resultType=ResultType.CONSTANT;
    constantResult=new CalculatedValue();
    leftTerm.getValue(thread,constantResult);
  }
 else   if (linkedIntervals.size() == 1) {
    final CalculatedValue[] argValues=new CalculatedValue[1];
    argValues[0]=new CalculatedValue();
    final ArrayList<Double> xValues=linkedIntervals.get(0).getInterval(thread);
    if (xValues != null && xValues.size() > 0) {
      final int xLength=xValues.size();
      resultType=ResultType.ARRAY_1D;
      arrayArgument=new EquationArrayResult(xLength);
      arrayResult=new EquationArrayResult(xLength,1);
      for (int xIndex=0; xIndex < xLength; xIndex++) {
        final Double x=xValues.get(xIndex);
        argValues[0].setValue(x);
        arrayArgument.getValue1D(xIndex).setValue(x);
        linkedIntervals.get(0).setArgumentValues(argValues);
        leftTerm.getValue(thread,arrayResult.getValue2D(xIndex,0));
      }
    }
 else {
      resultType=ResultType.NAN;
    }
  }
 else   if (linkedIntervals.size() == 2) {
    final CalculatedValue[][] argValues=new CalculatedValue[2][1];
    argValues[0][0]=new CalculatedValue();
    final ArrayList<Double> xValues=linkedIntervals.get(0).getInterval(thread);
    argValues[1][0]=new CalculatedValue();
    final ArrayList<Double> yValues=linkedIntervals.get(1).getInterval(thread);
    if (xValues != null && xValues.size() > 0 && yValues != null && yValues.size() > 0) {
      final int xLength=xValues.size();
      final int yLength=yValues.size();
      resultType=ResultType.ARRAY_2D;
      arrayResult=new EquationArrayResult(xLength,yLength);
      for (int xIndex=0; xIndex < xLength; xIndex++) {
        argValues[0][0].setValue(xValues.get(xIndex));
        linkedIntervals.get(0).setArgumentValues(argValues[0]);
        for (int yIndex=0; yIndex < yLength; yIndex++) {
          argValues[1][0].setValue(yValues.get(yIndex));
          linkedIntervals.get(1).setArgumentValues(argValues[1]);
          leftTerm.getValue(thread,arrayResult.getValue2D(xIndex,yIndex));
        }
      }
    }
 else {
      resultType=ResultType.NAN;
    }
  }
  if (!leftTerm.isTerm() && ta != null) {
    ta.setResult(leftTerm.getText(),fillResultString());
  }
}",0.9875437913585052
170955,"@Override public boolean isContentValid(ValidationPassType type){
  boolean isValid=super.isContentValid(type);
switch (type) {
case VALIDATE_SINGLE_FORMULA:
    break;
case VALIDATE_LINKS:
  if (isValid && !leftTerm.isEmpty()) {
    String errorMsg=null;
    final ArrayList<String> indirectIntervals=getIndirectIntervals();
    if (!indirectIntervals.isEmpty() && !getDirectIntervals().isEmpty()) {
      isValid=false;
      errorMsg=String.format(getContext().getResources().getString(R.string.error_indirect_intervals),indirectIntervals.toString());
    }
 else     if (getAllIntervals().size() > 2) {
      isValid=false;
      errorMsg=getContext().getResources().getString(R.string.error_ensure_double_interval);
    }
    leftTerm.setError(errorMsg,ErrorNotification.LAYOUT_BORDER,null);
  }
break;
}
if (!isValid) {
invalidateResult();
}
return disableCalculation() || isValid;
}","@Override public boolean isContentValid(ValidationPassType type){
  boolean isValid=super.isContentValid(type);
switch (type) {
case VALIDATE_SINGLE_FORMULA:
    break;
case VALIDATE_LINKS:
  if (isValid && !leftTerm.isEmpty()) {
    String errorMsg=null;
    final ArrayList<String> indirectIntervals=getIndirectIntervals();
    if (!indirectIntervals.isEmpty() && !getDirectIntervals().isEmpty()) {
      isValid=false;
      errorMsg=String.format(getContext().getResources().getString(R.string.error_indirect_intervals),indirectIntervals.toString());
    }
 else     if (getAllIntervals().size() > 2) {
      isValid=false;
      errorMsg=getContext().getResources().getString(R.string.error_ensure_double_interval);
    }
    leftTerm.setError(errorMsg,ErrorNotification.LAYOUT_BORDER,null);
  }
break;
}
if (!isValid) {
clearResult();
showResult();
}
return disableCalculation() || isValid;
}",0.9837716843872412
170956,"@Override public void onResultPropertiesChange(boolean isChanged){
  getFormulaList().finishActiveActionMode();
  if (!isChanged) {
    formulaState=null;
    return;
  }
  if (formulaState != null) {
    getFormulaList().getUndoState().addEntry(formulaState);
    formulaState=null;
  }
  if (properties.disableCalculation) {
    invalidateResult();
  }
  updateResultView(true);
  ViewUtils.invalidateLayout(layout,layout);
}","@Override public void onResultPropertiesChange(boolean isChanged){
  getFormulaList().finishActiveActionMode();
  if (!isChanged) {
    formulaState=null;
    return;
  }
  if (formulaState != null) {
    getFormulaList().getUndoState().addEntry(formulaState);
    formulaState=null;
  }
  if (properties.disableCalculation) {
    clearResult();
  }
  updateResultView(true);
  ViewUtils.invalidateLayout(layout,layout);
}",0.9823321554770318
170957,"public void setText(int row,int col,String text){
  final CustomEditText cell=getCell(row,col);
  if (cell != null) {
    cell.setText(text);
  }
}","public void setText(String s,ScaledDimensions dimen){
  for (  CustomEditText field : fields) {
    field.setText(s);
    field.updateTextSize(dimen,0,ScaledDimensions.Type.MATRIX_COLUMN_PADDING);
  }
}",0.2865329512893982
170958,"@Override protected Void doInBackground(Void... params){
  for (  CalculationResult f : formulas) {
    if (!f.isEmpty()) {
      try {
        f.calculate(this);
      }
 catch (      CancelException e) {
        break;
      }
      publishProgress(f);
    }
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  for (  CalculationResult f : formulas) {
    if (!f.isEmpty()) {
      try {
        f.calculate(this);
      }
 catch (      CancelException e) {
        break;
      }
catch (      OutOfMemoryError ex) {
        String error=list.getActivity().getResources().getString(R.string.error_out_of_memory);
        Toast.makeText(list.getActivity(),error,Toast.LENGTH_LONG).show();
        break;
      }
      publishProgress(f);
    }
  }
  return null;
}",0.7095959595959596
170959,"@Override public void onSupportActionModeStarted(android.support.v7.view.ActionMode mode){
  activeActionModes.add(mode);
  final BaseFragment f=getVisibleFragment();
  if (f != null) {
    f.updateModeTitle();
  }
}","@Override public void onSupportActionModeStarted(android.support.v7.view.ActionMode mode){
  super.onSupportActionModeStarted(mode);
  activeActionModes.add(mode);
  final BaseFragment f=getVisibleFragment();
  if (f != null) {
    f.updateModeTitle();
  }
}",0.9113924050632912
170960,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  PackageManager pm=getPackageManager();
  ViewUtils.Debug(this,""String_Node_Str"" + Build.VERSION.SDK_INT + ""String_Node_Str""+ pm.getInstallerPackageName(getPackageName()));
  actionBar=getSupportActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  actionBar.setHomeButtonEnabled(true);
  actionBar.setShowHideAnimationEnabled(true);
  actionBar.setBackgroundDrawable(CompatUtils.getDrawable(this,R.drawable.action_bar_background));
  actionBar.setElevation(3);
  CompatUtils.addOnMenuVisibilityListener(actionBar,this);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.main_drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.main_left_drawer);
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  drawerListAdapter=new DrawerListAdapter(this);
  mDrawerList.setAdapter(drawerListAdapter);
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open){
    public void onDrawerClosed(    View view){
      supportInvalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      supportInvalidateOptionsMenu();
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  activeActionModes=new ArrayList<android.support.v7.view.ActionMode>();
  Intent intent=getIntent();
  if (intent != null) {
    externalUri=intent.getData();
  }
  if (savedInstanceState == null) {
    selectItem(BaseFragment.WORKSHEET_FRAGMENT_ID,BaseFragment.INVALID_ACTION_ID);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  PackageManager pm=getPackageManager();
  ViewUtils.Debug(this,""String_Node_Str"" + Build.VERSION.SDK_INT + ""String_Node_Str""+ pm.getInstallerPackageName(getPackageName()));
  actionBar=getSupportActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  actionBar.setHomeButtonEnabled(true);
  actionBar.setShowHideAnimationEnabled(true);
  actionBar.setBackgroundDrawable(CompatUtils.getDrawable(this,R.drawable.action_bar_background));
  actionBar.setElevation(3);
  CompatUtils.addOnMenuVisibilityListener(actionBar,this);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.main_drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.main_left_drawer);
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  drawerListAdapter=new DrawerListAdapter(this);
  mDrawerList.setAdapter(drawerListAdapter);
  mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open){
    public void onDrawerClosed(    View view){
      supportInvalidateOptionsMenu();
    }
    public void onDrawerOpened(    View drawerView){
      supportInvalidateOptionsMenu();
    }
  }
;
  CompatUtils.setDrawerListener(mDrawerLayout,mDrawerToggle);
  activeActionModes=new ArrayList<android.support.v7.view.ActionMode>();
  Intent intent=getIntent();
  if (intent != null) {
    externalUri=intent.getData();
  }
  if (savedInstanceState == null) {
    selectItem(BaseFragment.WORKSHEET_FRAGMENT_ID,BaseFragment.INVALID_ACTION_ID);
  }
}",0.9851632047477744
170961,"@Override public void onSupportActionModeFinished(android.support.v7.view.ActionMode mode){
  activeActionModes.remove(mode);
  final BaseFragment f=getVisibleFragment();
  if (f != null) {
    f.enableObjectPropertiesButton(false);
    f.enableObjectDetailsButton(false);
  }
}","@Override public void onSupportActionModeFinished(android.support.v7.view.ActionMode mode){
  super.onSupportActionModeFinished(mode);
  activeActionModes.remove(mode);
  final BaseFragment f=getVisibleFragment();
  if (f != null) {
    f.enableObjectPropertiesButton(false);
    f.enableObjectDetailsButton(false);
  }
}",0.9282136894824708
170962,"/** 
 * Parcelable interface: procedure reads the formula state
 */
public void onRestoreInstanceState(Parcelable state){
  if (state == null) {
    return;
  }
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    if (IdGenerator.enableIdRestore) {
      setId(bundle.getInt(STATE_FORMULA_ID));
      IdGenerator.compareAndSet(getId());
    }
    inRightOfPrevious=bundle.getBoolean(STATE_INRIGHTOFPREVIOUS);
    for (int i=0; i < terms.size(); i++) {
      if (terms.get(i).isWritable) {
        terms.get(i).readFromBundle(bundle,STATE_TERM + i);
      }
    }
  }
}","/** 
 * Parcelable interface: procedure reads the formula state
 */
@SuppressLint(""String_Node_Str"") public void onRestoreInstanceState(Parcelable state){
  if (state == null) {
    return;
  }
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    if (IdGenerator.enableIdRestore) {
      setId(bundle.getInt(STATE_FORMULA_ID));
      IdGenerator.compareAndSet(getId());
    }
    inRightOfPrevious=bundle.getBoolean(STATE_INRIGHTOFPREVIOUS);
    for (int i=0; i < terms.size(); i++) {
      if (terms.get(i).isWritable) {
        terms.get(i).readFromBundle(bundle,STATE_TERM + i);
      }
    }
  }
}",0.972568578553616
170963,"/** 
 * Parcelable interface: procedure writes the formula state
 */
public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  bundle.putInt(STATE_FORMULA_ID,getId());
  bundle.putBoolean(STATE_INRIGHTOFPREVIOUS,inRightOfPrevious);
  for (int i=0; i < terms.size(); i++) {
    terms.get(i).writeToBundle(bundle,STATE_TERM + i);
  }
  return bundle;
}","/** 
 * Parcelable interface: procedure writes the formula state
 */
@SuppressLint(""String_Node_Str"") public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  bundle.putInt(STATE_FORMULA_ID,getId());
  bundle.putBoolean(STATE_INRIGHTOFPREVIOUS,inRightOfPrevious);
  for (int i=0; i < terms.size(); i++) {
    terms.get(i).writeToBundle(bundle,STATE_TERM + i);
  }
  return bundle;
}",0.9567496723460026
170964,"/** 
 * Parcelable interface: procedure reads the formula state
 */
public void onRestoreInstanceState(Parcelable state){
  if (state == null) {
    return;
  }
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    axisParameters.assign((AxisProperties)bundle.getParcelable(STATE_AXIS_PARAMETERS));
    plotParameters.assign((PlotProperties)bundle.getParcelable(STATE_PLOT_PARAMETERS));
    if (colorMapView != null) {
      colorMapView.getColorMapParameters().assign((ColorMapProperties)bundle.getParcelable(STATE_COLORMAP_PARAMETERS));
    }
  }
}","/** 
 * Parcelable interface: procedure reads the formula state
 */
@SuppressLint(""String_Node_Str"") public void onRestoreInstanceState(Parcelable state){
  if (state == null) {
    return;
  }
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    axisParameters.assign((AxisProperties)bundle.getParcelable(STATE_AXIS_PARAMETERS));
    plotParameters.assign((PlotProperties)bundle.getParcelable(STATE_PLOT_PARAMETERS));
    if (colorMapView != null) {
      colorMapView.getColorMapParameters().assign((ColorMapProperties)bundle.getParcelable(STATE_COLORMAP_PARAMETERS));
    }
  }
}",0.9716738197424892
170965,"/** 
 * Parcelable interface: procedure writes the formula state
 */
public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
{
    AxisProperties ap=new AxisProperties();
    ap.assign(axisParameters);
    bundle.putParcelable(STATE_AXIS_PARAMETERS,ap);
  }
{
    PlotProperties pp=new PlotProperties();
    pp.assign(plotParameters);
    bundle.putParcelable(STATE_PLOT_PARAMETERS,pp);
  }
  if (colorMapView != null) {
    ColorMapProperties cp=new ColorMapProperties();
    cp.assign(colorMapView.getColorMapParameters());
    bundle.putParcelable(STATE_COLORMAP_PARAMETERS,cp);
  }
  return bundle;
}","/** 
 * Parcelable interface: procedure writes the formula state
 */
@SuppressLint(""String_Node_Str"") public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
{
    AxisProperties ap=new AxisProperties();
    ap.assign(axisParameters);
    bundle.putParcelable(STATE_AXIS_PARAMETERS,ap);
  }
{
    PlotProperties pp=new PlotProperties();
    pp.assign(plotParameters);
    bundle.putParcelable(STATE_PLOT_PARAMETERS,pp);
  }
  if (colorMapView != null) {
    ColorMapProperties cp=new ColorMapProperties();
    cp.assign(colorMapView.getColorMapParameters());
    bundle.putParcelable(STATE_COLORMAP_PARAMETERS,cp);
  }
  return bundle;
}",0.9740361919748228
170966,"/** 
 * Parcelable interface: procedure reads the formula state
 */
@Override public void onRestoreInstanceState(Parcelable state){
  if (state == null) {
    return;
  }
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    final ImageType type=ImageType.valueOf(bundle.getString(SATATE_IMAGE_TYPE));
switch (type) {
case NONE:
      break;
case BITMAP:
    setBitmap((Bitmap)bundle.getParcelable(STATE_IMAGE_BITMAP));
  break;
case SVG:
setSvg(bundle.getString(STATE_IMAGE_SVG));
break;
}
}
}","/** 
 * Parcelable interface: procedure reads the formula state
 */
@Override @SuppressLint(""String_Node_Str"") public void onRestoreInstanceState(Parcelable state){
  if (state == null) {
    return;
  }
  if (state instanceof Bundle) {
    Bundle bundle=(Bundle)state;
    final ImageType type=ImageType.valueOf(bundle.getString(SATATE_IMAGE_TYPE));
switch (type) {
case NONE:
      break;
case BITMAP:
    setBitmap((Bitmap)bundle.getParcelable(STATE_IMAGE_BITMAP));
  break;
case SVG:
setSvg(bundle.getString(STATE_IMAGE_SVG));
break;
}
}
}",0.9686609686609686
170967,"/** 
 * Parcelable interface: procedure writes the formula state
 */
@Override public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  bundle.putString(SATATE_IMAGE_TYPE,imageType.toString());
switch (imageType) {
case NONE:
    break;
case BITMAP:
  if (bitmap != null) {
    bundle.putParcelable(STATE_IMAGE_BITMAP,bitmap);
  }
break;
case SVG:
if (svgData != null) {
bundle.putString(STATE_IMAGE_SVG,svgData);
}
break;
}
return bundle;
}","/** 
 * Parcelable interface: procedure writes the formula state
 */
@Override @SuppressLint(""String_Node_Str"") public Parcelable onSaveInstanceState(){
  Bundle bundle=new Bundle();
  bundle.putString(SATATE_IMAGE_TYPE,imageType.toString());
switch (imageType) {
case NONE:
    break;
case BITMAP:
  if (bitmap != null) {
    bundle.putParcelable(STATE_IMAGE_BITMAP,bitmap);
  }
break;
case SVG:
if (svgData != null) {
bundle.putString(STATE_IMAGE_SVG,svgData);
}
break;
}
return bundle;
}",0.9651531151003168
170968,"/** 
 * Returns the cache key that is created from the provided input key.
 * @param input the input key
 * @param < K >   type parameter indicating the type of the input key
 * @param < U >   type parameter indicating the type of the cache key that is returned
 * @return the cache key
 */
<K,U>U getKey(K input);","/** 
 * Returns the cache key that is created from the provided input key.
 * @param input the input key
 * @return the cache key
 */
Object getKey(K input);",0.6411889596602972
170969,"/** 
 * Gets the object that is used in the internal cache map as key, by applying the cache key function to the provided key. <p> If no cache key function is present in   {@link DataLoaderOptions}, then the returned value equals the input key.
 * @param key the input key
 * @return the cache key after the input is transformed with the cache key function
 */
public Object getCacheKey(K key){
  return loaderOptions.cacheKeyFunction().isPresent() ? loaderOptions.cacheKeyFunction().get().getKey(key) : key;
}","/** 
 * Gets the object that is used in the internal cache map as key, by applying the cache key function to the provided key. <p> If no cache key function is present in   {@link DataLoaderOptions}, then the returned value equals the input key.
 * @param key the input key
 * @return the cache key after the input is transformed with the cache key function
 */
@SuppressWarnings(""String_Node_Str"") public Object getCacheKey(K key){
  return loaderOptions.cacheKeyFunction().isPresent() ? loaderOptions.cacheKeyFunction().get().getKey(key) : key;
}",0.9649952696310312
170970,"/** 
 * Creates a new data loader with the provided batch load function and options.
 * @param batchLoadFunction the batch load function to use
 * @param options           the batch load options
 */
@SuppressWarnings(""String_Node_Str"") public DataLoader(BatchLoader<K> batchLoadFunction,DataLoaderOptions<K,V> options){
  Objects.requireNonNull(batchLoadFunction,""String_Node_Str"");
  this.batchLoadFunction=batchLoadFunction;
  this.loaderOptions=options == null ? new DataLoaderOptions<>() : options;
  this.futureCache=loaderOptions.cacheMap().isPresent() ? (CacheMap<Object,Future<V>>)loaderOptions.cacheMap().get() : CacheMap.simpleMap();
  this.loaderQueue=new LinkedHashMap<>();
}","/** 
 * Creates a new data loader with the provided batch load function and options.
 * @param batchLoadFunction the batch load function to use
 * @param options           the batch load options
 */
@SuppressWarnings(""String_Node_Str"") public DataLoader(BatchLoader<K> batchLoadFunction,DataLoaderOptions options){
  Objects.requireNonNull(batchLoadFunction,""String_Node_Str"");
  this.batchLoadFunction=batchLoadFunction;
  this.loaderOptions=options == null ? new DataLoaderOptions() : options;
  this.futureCache=loaderOptions.cacheMap().isPresent() ? (CacheMap<Object,Future<V>>)loaderOptions.cacheMap().get() : CacheMap.simpleMap();
  this.loaderQueue=new LinkedHashMap<>();
}",0.9948792977322604
170971,"/** 
 * Requests to load the data with the specified key asynchronously, and returns a future of the resulting value. <p> If batching is enabled (the default), you'll have to call   {@link DataLoader#dispatch()} at a later stage tostart batch execution. If you forget this call the future will never be completed (unless already completed, and returned from cache).
 * @param key the key to load
 * @return the future of the value
 */
public Future<V> load(K key){
  Objects.requireNonNull(key,""String_Node_Str"");
  Object cacheKey=getCacheKey(key);
  if (loaderOptions.cachingEnabled() && futureCache.containsKey(cacheKey)) {
    return futureCache.get(key);
  }
  Future<V> future=Future.future();
  if (loaderOptions.batchingEnabled()) {
    loaderQueue.put(key,future);
  }
 else {
    CompositeFuture compositeFuture=batchLoadFunction.load(Collections.singleton(key));
    if (compositeFuture.succeeded()) {
      future.complete(compositeFuture.result().result(0));
    }
 else {
      future.fail(compositeFuture.cause());
    }
  }
  if (loaderOptions.cachingEnabled()) {
    futureCache.set(key,future);
  }
  return future;
}","/** 
 * Requests to load the data with the specified key asynchronously, and returns a future of the resulting value. <p> If batching is enabled (the default), you'll have to call   {@link DataLoader#dispatch()} at a later stage tostart batch execution. If you forget this call the future will never be completed (unless already completed, and returned from cache).
 * @param key the key to load
 * @return the future of the value
 */
public Future<V> load(K key){
  Objects.requireNonNull(key,""String_Node_Str"");
  Object cacheKey=getCacheKey(key);
  if (loaderOptions.cachingEnabled() && futureCache.containsKey(cacheKey)) {
    return futureCache.get(cacheKey);
  }
  Future<V> future=Future.future();
  if (loaderOptions.batchingEnabled()) {
    loaderQueue.put(key,future);
  }
 else {
    CompositeFuture compositeFuture=batchLoadFunction.load(Collections.singleton(key));
    if (compositeFuture.succeeded()) {
      future.complete(compositeFuture.result().result(0));
    }
 else {
      future.fail(compositeFuture.cause());
    }
  }
  if (loaderOptions.cachingEnabled()) {
    futureCache.set(cacheKey,future);
  }
  return future;
}",0.993859649122807
170972,"/** 
 * Gets the (optional) cache map implementation that is used for caching, if caching is enabled. <p> If missing a standard   {@link java.util.LinkedHashMap} will be used as the cache implementation.
 * @return an optional with the cache map instance, or empty
 */
public Optional<CacheMap<K,Future<V>>> cacheMap(){
  return Optional.ofNullable(cacheMap);
}","/** 
 * Gets the (optional) cache map implementation that is used for caching, if caching is enabled. <p> If missing a standard   {@link java.util.LinkedHashMap} will be used as the cache implementation.
 * @return an optional with the cache map instance, or empty
 */
public Optional<CacheMap> cacheMap(){
  return Optional.ofNullable(cacheMap);
}",0.9816643159379408
170973,"/** 
 * Sets the option that determines whether batch loading is enabled.
 * @param batchingEnabled {@code true} to enable batch loading, {@code false} otherwise
 * @return the data loader options for fluent coding
 */
public DataLoaderOptions<K,V> setBatchingEnabled(boolean batchingEnabled){
  this.batchingEnabled=batchingEnabled;
  return this;
}","/** 
 * Sets the option that determines whether batch loading is enabled.
 * @param batchingEnabled {@code true} to enable batch loading, {@code false} otherwise
 * @return the data loader options for fluent coding
 */
public DataLoaderOptions setBatchingEnabled(boolean batchingEnabled){
  this.batchingEnabled=batchingEnabled;
  return this;
}",0.9928057553956836
170974,"/** 
 * Sets the function to use for creating the cache key, if caching is enabled.
 * @param cacheKeyFunction the cache key function to use
 * @return the data loader options for fluent coding
 */
public DataLoaderOptions<K,V> setCacheKeyFunction(CacheKey cacheKeyFunction){
  this.cacheKeyFunction=cacheKeyFunction;
  return this;
}","/** 
 * Sets the function to use for creating the cache key, if caching is enabled.
 * @param cacheKeyFunction the cache key function to use
 * @return the data loader options for fluent coding
 */
public DataLoaderOptions setCacheKeyFunction(CacheKey cacheKeyFunction){
  this.cacheKeyFunction=cacheKeyFunction;
  return this;
}",0.9924585218702866
170975,"/** 
 * Sets the cache map implementation to use for caching, if caching is enabled.
 * @param cacheMap the cache map instance
 * @return the data loader options for fluent coding
 */
public DataLoaderOptions setCacheMap(CacheMap<K,Future<V>> cacheMap){
  this.cacheMap=cacheMap;
  return this;
}","/** 
 * Sets the cache map implementation to use for caching, if caching is enabled.
 * @param cacheMap the cache map instance
 * @return the data loader options for fluent coding
 */
public <K,V>DataLoaderOptions setCacheMap(CacheMap<K,Future<V>> cacheMap){
  this.cacheMap=cacheMap;
  return this;
}",0.9916247906197656
170976,"/** 
 * Sets the option that determines whether caching is enabled.
 * @param cachingEnabled {@code true} to enable caching, {@code false} otherwise
 * @return the data loader options for fluent coding
 */
public DataLoaderOptions<K,V> setCachingEnabled(boolean cachingEnabled){
  this.cachingEnabled=cachingEnabled;
  return this;
}","/** 
 * Sets the option that determines whether caching is enabled.
 * @param cachingEnabled {@code true} to enable caching, {@code false} otherwise
 * @return the data loader options for fluent coding
 */
public DataLoaderOptions setCachingEnabled(boolean cachingEnabled){
  this.cachingEnabled=cachingEnabled;
  return this;
}",0.9924357034795764
170977,"public static <K,V>DataLoaderOptions<K,V> create(){
  return new DataLoaderOptions<>();
}","public static DataLoaderOptions create(){
  return new DataLoaderOptions();
}",0.927710843373494
170978,"public static IJsonAdapter getJsonAdapter(){
  return sJsonAdapter;
}","public static IJsonAdapter getJsonAdapter(){
  if (sJsonAdapter == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return sJsonAdapter;
}",0.6052631578947368
170979,"public static SocialSdkConfig getConfig(){
  return sSocialSdkConfig;
}","public static SocialSdkConfig getConfig(){
  if (sSocialSdkConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return sSocialSdkConfig;
}",0.6016949152542372
170980,"@Override protected OperationContext tick(OperationContext operationContext){
  final String operationName=operationContext.operation.getName();
  Poller poller=new Poller(worker.config.getOperationPollPeriod(),() -> {
    boolean success=worker.instance.pollOperation(operationName,ExecuteOperationMetadata.Stage.EXECUTING);
    return success;
  }
);
  new Thread(poller).start();
  ActionResult.Builder resultBuilder;
  try {
    resultBuilder=operationContext.operation.getResponse().unpack(ExecuteResponse.class).getResult().toBuilder();
  }
 catch (  InvalidProtocolBufferException ex) {
    poller.stop();
    return null;
  }
  int inlineContentBytes=0;
  ImmutableList.Builder<ByteString> contents=new ImmutableList.Builder<>();
  CASInsertionPolicy policy=worker.config.getFileCasPolicy();
  for (  String outputFile : operationContext.action.getOutputFilesList()) {
    Path outputPath=operationContext.execDir.resolve(outputFile);
    if (!Files.exists(outputPath)) {
      continue;
    }
    ByteString content;
    try {
      InputStream inputStream=Files.newInputStream(outputPath);
      content=ByteString.readFrom(inputStream);
      inputStream.close();
    }
 catch (    IOException ex) {
      continue;
    }
    OutputFile.Builder outputFileBuilder=resultBuilder.addOutputFilesBuilder().setPath(outputFile).setIsExecutable(Files.isExecutable(outputPath));
    inlineContentBytes=inlineOrDigest(content,worker.config.getFileCasPolicy(),contents,inlineContentBytes,worker.config.getInlineContentLimit(),() -> outputFileBuilder.setContent(content),(fileContent) -> outputFileBuilder.setDigest(getDigestUtil().compute(fileContent)));
  }
  inlineContentBytes+=updateActionResultStdOutputs(resultBuilder,contents,inlineContentBytes);
  try {
    worker.instance.putAllBlobs(contents.build());
  }
 catch (  IOException ex) {
  }
catch (  InterruptedException ex) {
    poller.stop();
    return null;
  }
  ActionResult result=resultBuilder.build();
  if (!operationContext.action.getDoNotCache() && resultBuilder.getExitCode() == 0) {
    worker.instance.putActionResult(digestUtil.asActionKey(operationContext.metadata.getActionDigest()),result);
  }
  ExecuteOperationMetadata metadata=operationContext.metadata.toBuilder().setStage(ExecuteOperationMetadata.Stage.COMPLETED).build();
  Operation operation=operationContext.operation.toBuilder().setDone(true).setMetadata(Any.pack(metadata)).setResponse(Any.pack(ExecuteResponse.newBuilder().setResult(result).setCachedResult(false).build())).build();
  poller.stop();
  if (!worker.instance.putOperation(operation)) {
    return null;
  }
  return new OperationContext(operation,operationContext.execDir,metadata,operationContext.action,operationContext.inputFiles);
}","@Override protected OperationContext tick(OperationContext operationContext){
  final String operationName=operationContext.operation.getName();
  Poller poller=new Poller(worker.config.getOperationPollPeriod(),() -> {
    boolean success=worker.instance.pollOperation(operationName,ExecuteOperationMetadata.Stage.EXECUTING);
    return success;
  }
);
  new Thread(poller).start();
  ActionResult.Builder resultBuilder;
  try {
    resultBuilder=operationContext.operation.getResponse().unpack(ExecuteResponse.class).getResult().toBuilder();
  }
 catch (  InvalidProtocolBufferException ex) {
    poller.stop();
    return null;
  }
  int inlineContentBytes=0;
  ImmutableList.Builder<ByteString> contents=new ImmutableList.Builder<>();
  CASInsertionPolicy policy=worker.config.getFileCasPolicy();
  for (  String outputFile : operationContext.action.getOutputFilesList()) {
    Path outputPath=operationContext.execDir.resolve(outputFile);
    if (!Files.exists(outputPath)) {
      continue;
    }
    ByteString content;
    try {
      InputStream inputStream=Files.newInputStream(outputPath);
      content=ByteString.readFrom(inputStream);
      inputStream.close();
    }
 catch (    IOException ex) {
      continue;
    }
    OutputFile.Builder outputFileBuilder=resultBuilder.addOutputFilesBuilder().setPath(outputFile).setIsExecutable(Files.isExecutable(outputPath));
    inlineContentBytes=inlineOrDigest(content,worker.config.getFileCasPolicy(),contents,inlineContentBytes,worker.config.getInlineContentLimit(),() -> outputFileBuilder.setContent(content),(fileContent) -> outputFileBuilder.setDigest(getDigestUtil().compute(fileContent)));
  }
  inlineContentBytes+=updateActionResultStdOutputs(resultBuilder,contents,inlineContentBytes);
  try {
    worker.instance.putAllBlobs(contents.build());
  }
 catch (  IOException ex) {
  }
catch (  InterruptedException ex) {
    poller.stop();
    return null;
  }
  ActionResult result=resultBuilder.build();
  if (!operationContext.action.getDoNotCache() && resultBuilder.getExitCode() == 0) {
    worker.instance.putActionResult(getDigestUtil().asActionKey(operationContext.metadata.getActionDigest()),result);
  }
  ExecuteOperationMetadata metadata=operationContext.metadata.toBuilder().setStage(ExecuteOperationMetadata.Stage.COMPLETED).build();
  Operation operation=operationContext.operation.toBuilder().setDone(true).setMetadata(Any.pack(metadata)).setResponse(Any.pack(ExecuteResponse.newBuilder().setResult(result).setCachedResult(false).build())).build();
  poller.stop();
  if (!worker.instance.putOperation(operation)) {
    return null;
  }
  return new OperationContext(operation,operationContext.execDir,metadata,operationContext.action,operationContext.inputFiles);
}",0.9987242573355204
170981,"public Bitmap decodeSampledBitmapFromUri(Uri fileUri,int reqWidth,int reqHeight) throws IOException {
  InputStream stream=new BufferedInputStream(mApplicationContext.getContentResolver().openInputStream(fileUri));
  stream.mark(stream.available());
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeStream(stream,null,options);
  stream.reset();
  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);
  options.inJustDecodeBounds=false;
  BitmapFactory.decodeStream(stream,null,options);
  stream.reset();
  return BitmapFactory.decodeStream(stream,null,options);
}","public Bitmap decodeSampledBitmapFromUri(Uri fileUri,int reqWidth,int reqHeight) throws IOException {
  InputStream stream=streamFromUri(fileUri);
  stream.mark(stream.available());
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  BitmapFactory.decodeStream(stream,null,options);
  stream.reset();
  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);
  options.inJustDecodeBounds=false;
  BitmapFactory.decodeStream(stream,null,options);
  stream.close();
  InputStream freshStream=streamFromUri(fileUri);
  return BitmapFactory.decodeStream(freshStream,null,options);
}",0.8723897911832946
170982,"@PostConstruct public void init() throws Exception {
  Map<String,Object> beans=applicationContext.getBeansWithAnnotation(MQProducer.class);
  if (CollectionUtils.isEmpty(beans)) {
    return;
  }
  if (producer == null) {
    if (StringUtils.isEmpty(mqProperties.getProducerGroup())) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (StringUtils.isEmpty(mqProperties.getNameServerAddress())) {
      throw new RuntimeException(""String_Node_Str"");
    }
    producer=new DefaultMQProducer(mqProperties.getProducerGroup());
    producer.setNamesrvAddr(mqProperties.getNameServerAddress());
    producer.start();
    registerBean(DefaultMQProducer.class.getName(),producer);
  }
  for (  Map.Entry<String,Object> entry : beans.entrySet()) {
    publishProducer(entry.getKey(),entry.getValue());
  }
}","@PostConstruct public void init() throws Exception {
  Map<String,Object> beans=applicationContext.getBeansWithAnnotation(MQProducer.class);
  if (CollectionUtils.isEmpty(beans)) {
    return;
  }
  if (producer == null) {
    Assert.notNull(mqProperties.getProducerGroup(),""String_Node_Str"");
    Assert.notNull(mqProperties.getNameServerAddress(),""String_Node_Str"");
    producer=new DefaultMQProducer(mqProperties.getProducerGroup());
    producer.setNamesrvAddr(mqProperties.getNameServerAddress());
    producer.start();
  }
  registerBean(DefaultMQProducer.class.getName(),producer);
  for (  Map.Entry<String,Object> entry : beans.entrySet()) {
    publishProducer(entry.getKey(),entry.getValue());
  }
}",0.8887434554973822
170983,"private void prepareApplicationContextMissingProducerGroupConfigure(){
  this.context=new AnnotationConfigApplicationContext();
  EnvironmentTestUtils.addEnvironment(this.context,""String_Node_Str"");
  this.context.register(TestProducerWithTopicAndTag.class);
  this.context.register(MQProducerAutoConfiguration.class);
  this.context.refresh();
}","private void prepareApplicationContextMissingProducerGroupConfigure(){
  this.context=new AnnotationConfigApplicationContext();
  EnvironmentTestUtils.addEnvironment(this.context,""String_Node_Str"");
  this.context.register(TestProducerWithTopicAndTag.class);
  MQProducerAutoConfiguration.setProducer(null);
  this.context.register(MQProducerAutoConfiguration.class);
  this.context.refresh();
}",0.8744939271255061
170984,"private void prepareApplicationContextMissingConfigure(){
  this.context=new AnnotationConfigApplicationContext();
  this.context.register(TestProducerWithTopicAndTag.class);
  this.context.register(MQProducerAutoConfiguration.class);
  this.context.refresh();
}","private void prepareApplicationContextMissingConfigure(){
  this.context=new AnnotationConfigApplicationContext();
  this.context.register(TestProducerWithTopicAndTag.class);
  MQProducerAutoConfiguration.setProducer(null);
  this.context.register(MQProducerAutoConfiguration.class);
  this.context.refresh();
}",0.837696335078534
170985,"static int getSecurity(@NonNull ScanResult result){
  if (result.capabilities.contains(""String_Node_Str""))   return SECURITY_WEP;
 else   if (result.capabilities.contains(""String_Node_Str""))   return SECURITY_PSK;
 else   if (result.capabilities.contains(""String_Node_Str""))   return SECURITY_EAP;
  return SECURITY_NONE;
}","static String getSecurity(@NonNull ScanResult result){
  if (result.capabilities.contains(SECURITY_WEP))   return SECURITY_WEP;
 else   if (result.capabilities.contains(SECURITY_WPA))   return SECURITY_WPA;
 else   if (result.capabilities.contains(SECURITY_WPA2))   return SECURITY_WPA2;
 else   if (result.capabilities.contains(SECURITY_WPA_EAP))   return SECURITY_WPA_EAP;
 else   if (result.capabilities.contains(SECURITY_IEEE8021X))   return SECURITY_IEEE8021X;
 else   return SECURITY_NONE;
}",0.5341463414634147
170986,"/** 
 * Fill in the security fields of WifiConfiguration config.
 * @param config   The object to fill.
 * @param security If is OPEN, password is ignored.
 * @param password Password of the network if security is not OPEN.
 */
static void setupSecurity(@NonNull WifiConfiguration config,int security,@NonNull final String password){
  config.allowedAuthAlgorithms.clear();
  config.allowedGroupCiphers.clear();
  config.allowedKeyManagement.clear();
  config.allowedPairwiseCiphers.clear();
  config.allowedProtocols.clear();
switch (security) {
case SECURITY_NONE:
    config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
  break;
case SECURITY_WEP:
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);
if (ConnectorUtils.isHexWepKey(password)) config.wepKeys[0]=password;
 else config.wepKeys[0]=convertToQuotedString(password);
break;
case SECURITY_PSK:
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
if (password.matches(""String_Node_Str"")) config.preSharedKey=password;
 else config.preSharedKey=convertToQuotedString(password);
break;
case SECURITY_EAP:
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.IEEE8021X);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
config.preSharedKey=convertToQuotedString(password);
break;
default :
wifiLog(""String_Node_Str"" + security);
}
}","/** 
 * Fill in the security fields of WifiConfiguration config.
 * @param config   The object to fill.
 * @param security If is OPEN, password is ignored.
 * @param password Password of the network if security is not OPEN.
 */
static void setupSecurity(@NonNull WifiConfiguration config,String security,@NonNull final String password){
  config.allowedAuthAlgorithms.clear();
  config.allowedGroupCiphers.clear();
  config.allowedKeyManagement.clear();
  config.allowedPairwiseCiphers.clear();
  config.allowedProtocols.clear();
switch (security) {
case SECURITY_NONE:
    config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
  break;
case SECURITY_WEP:
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);
if (ConnectorUtils.isHexWepKey(password)) config.wepKeys[0]=password;
 else config.wepKeys[0]=convertToQuotedString(password);
break;
case SECURITY_WPA:
case SECURITY_WPA2:
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
config.allowedProtocols.set(SECURITY_WPA2.equals(security) ? WifiConfiguration.Protocol.RSN : WifiConfiguration.Protocol.WPA);
if (password.matches(""String_Node_Str"")) config.preSharedKey=password;
 else config.preSharedKey=convertToQuotedString(password);
break;
case SECURITY_WPA_EAP:
case SECURITY_IEEE8021X:
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
config.allowedKeyManagement.set(SECURITY_WPA_EAP.equals(security) ? WifiConfiguration.KeyMgmt.WPA_EAP : WifiConfiguration.KeyMgmt.IEEE8021X);
config.preSharedKey=convertToQuotedString(password);
break;
default :
wifiLog(""String_Node_Str"" + security);
}
}",0.7309644670050761
170987,"@Nullable static WifiConfiguration getWifiConfiguration(@NonNull final WifiManager wifiMgr,@NonNull final ScanResult scanResult){
  final String ssid=convertToQuotedString(scanResult.SSID);
  if (ssid.isEmpty())   return null;
  final String bssid=scanResult.BSSID;
  if (bssid == null)   return null;
  final int security=getSecurity(scanResult);
  final List<WifiConfiguration> configurations=wifiMgr.getConfiguredNetworks();
  if (configurations == null)   return null;
  for (  final WifiConfiguration config : configurations) {
    if (bssid.equals(config.BSSID) || ssid.equals(config.SSID)) {
      final int configSecurity=getSecurity(config);
      if (security == configSecurity)       return config;
    }
  }
  return null;
}","@Nullable static WifiConfiguration getWifiConfiguration(@NonNull final WifiManager wifiMgr,@NonNull final ScanResult scanResult){
  final String ssid=convertToQuotedString(scanResult.SSID);
  if (ssid.isEmpty())   return null;
  final String bssid=scanResult.BSSID;
  if (bssid == null)   return null;
  final String security=getSecurity(scanResult);
  final List<WifiConfiguration> configurations=wifiMgr.getConfiguredNetworks();
  if (configurations == null)   return null;
  for (  final WifiConfiguration config : configurations) {
    if (bssid.equals(config.BSSID) || ssid.equals(config.SSID)) {
      final String configSecurity=getSecurity(config);
      if (security.equals(configSecurity))       return config;
    }
  }
  return null;
}",0.9790964261631828
170988,"public static boolean isAlreadyConnected(@Nullable WifiManager wifiManager,@Nullable String bssid){
  if (bssid != null && wifiManager != null) {
    if (wifiManager.getConnectionInfo() != null && wifiManager.getConnectionInfo().getBSSID() != null && Objects.equals(bssid,wifiManager.getConnectionInfo().getBSSID())) {
      wifiLog(""String_Node_Str"" + wifiManager.getConnectionInfo().getSSID() + ""String_Node_Str""+ wifiManager.getConnectionInfo().getBSSID());
      return true;
    }
  }
  return false;
}","public static boolean isAlreadyConnected(@Nullable WifiManager wifiManager,@Nullable String bssid){
  if (bssid != null && wifiManager != null) {
    if (wifiManager.getConnectionInfo() != null && wifiManager.getConnectionInfo().getBSSID() != null && wifiManager.getConnectionInfo().getIpAddress() != 0 && Objects.equals(bssid,wifiManager.getConnectionInfo().getBSSID())) {
      wifiLog(""String_Node_Str"" + wifiManager.getConnectionInfo().getSSID() + ""String_Node_Str""+ wifiManager.getConnectionInfo().getBSSID());
      return true;
    }
  }
  return false;
}",0.9485500467726848
170989,"@Override public void onScanResultsReady(){
  wifiLog(""String_Node_Str"");
  unregisterReceiver(mContext,mWifiScanReceiver);
  final List<ScanResult> scanResultList=mWifiManager.getScanResults();
  of(mScanResultsListener).ifPresent(resultsListener -> resultsListener.onScanResults(scanResultList));
  of(mConnectionScanResultsListener).ifPresent(connectionResultsListener -> mSingleScanResult=connectionResultsListener.onConnectWithScanResult(scanResultList));
  if (mConnectionWpsListener != null && mBssid != null && mPassword != null) {
    mSingleScanResult=matchScanResultBssid(mBssid,scanResultList);
    if (mSingleScanResult != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)     connectWps(mWifiManager,mSingleScanResult,mPassword,mWpsTimeoutMillis,mConnectionWpsListener);
 else {
      if (mSingleScanResult == null)       wifiLog(""String_Node_Str"");
      mConnectionWpsListener.isSuccessful(false);
    }
    return;
  }
  if (mSsid != null) {
    if (mBssid != null)     mSingleScanResult=matchScanResult(mSsid,mBssid,scanResultList);
 else     mSingleScanResult=matchScanResultSsid(mSsid,scanResultList);
  }
  if (mSingleScanResult != null && mPassword != null) {
    if (isAlreadyConnected(mWifiManager,mSingleScanResult.BSSID)) {
      mWifiConnectionCallback.successfulConnect();
      return;
    }
    if (connectToWifi(mContext,mWifiManager,mSingleScanResult,mPassword))     registerReceiver(mContext,mWifiConnectionReceiver.activateTimeoutHandler(mSingleScanResult),new IntentFilter(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION));
 else     mWifiConnectionCallback.errorConnect();
  }
 else   mWifiConnectionCallback.errorConnect();
}","@Override public void onScanResultsReady(){
  wifiLog(""String_Node_Str"");
  unregisterReceiver(mContext,mWifiScanReceiver);
  final List<ScanResult> scanResultList=mWifiManager.getScanResults();
  of(mScanResultsListener).ifPresent(resultsListener -> resultsListener.onScanResults(scanResultList));
  of(mConnectionScanResultsListener).ifPresent(connectionResultsListener -> mSingleScanResult=connectionResultsListener.onConnectWithScanResult(scanResultList));
  if (mConnectionWpsListener != null && mBssid != null && mPassword != null) {
    mSingleScanResult=matchScanResultBssid(mBssid,scanResultList);
    if (mSingleScanResult != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)     connectWps(mWifiManager,mSingleScanResult,mPassword,mWpsTimeoutMillis,mConnectionWpsListener);
 else {
      if (mSingleScanResult == null)       wifiLog(""String_Node_Str"");
      mConnectionWpsListener.isSuccessful(false);
    }
    return;
  }
  if (mSsid != null) {
    if (mBssid != null)     mSingleScanResult=matchScanResult(mSsid,mBssid,scanResultList);
 else     mSingleScanResult=matchScanResultSsid(mSsid,scanResultList);
  }
  if (mSingleScanResult != null && mPassword != null) {
    if (connectToWifi(mContext,mWifiManager,mSingleScanResult,mPassword)) {
      registerReceiver(mContext,mWifiConnectionReceiver.activateTimeoutHandler(mSingleScanResult),new IntentFilter(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION));
      registerReceiver(mContext,mWifiConnectionReceiver,new IntentFilter(WifiManager.NETWORK_STATE_CHANGED_ACTION));
    }
 else     mWifiConnectionCallback.errorConnect();
  }
 else   mWifiConnectionCallback.errorConnect();
}",0.9027027027027028
170990,"@Override public void onReceive(Context context,@NonNull Intent intent){
  final String action=intent.getAction();
  if (Objects.equals(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION,action)) {
    final SupplicantState state=intent.getParcelableExtra(WifiManager.EXTRA_NEW_STATE);
    final int supl_error=intent.getIntExtra(WifiManager.EXTRA_SUPPLICANT_ERROR,-1);
    if (state == null) {
      handler.removeCallbacks(handlerCallback);
      mWifiConnectionCallback.errorConnect();
      return;
    }
    wifiLog(""String_Node_Str"" + state);
switch (state) {
case COMPLETED:
case FOUR_WAY_HANDSHAKE:
      if (isAlreadyConnected(mWifiManager,of(mScanResult).next(scanResult -> scanResult.BSSID).get())) {
        handler.removeCallbacks(handlerCallback);
        mWifiConnectionCallback.successfulConnect();
      }
    break;
case DISCONNECTED:
  if (supl_error == WifiManager.ERROR_AUTHENTICATING) {
    wifiLog(""String_Node_Str"");
    handler.removeCallbacks(handlerCallback);
    mWifiConnectionCallback.errorConnect();
  }
 else {
    wifiLog(""String_Node_Str"");
    reEnableNetworkIfPossible(mWifiManager,mScanResult);
  }
}
}
}","@Override public void onReceive(Context context,@NonNull Intent intent){
  final String action=intent.getAction();
  wifiLog(""String_Node_Str"" + action);
  if (Objects.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION,action)) {
    if (isAlreadyConnected(mWifiManager,of(mScanResult).next(scanResult -> scanResult.BSSID).get())) {
      handler.removeCallbacks(handlerCallback);
      mWifiConnectionCallback.successfulConnect();
    }
  }
 else   if (Objects.equals(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION,action)) {
    final SupplicantState state=intent.getParcelableExtra(WifiManager.EXTRA_NEW_STATE);
    final int supl_error=intent.getIntExtra(WifiManager.EXTRA_SUPPLICANT_ERROR,-1);
    if (state == null) {
      handler.removeCallbacks(handlerCallback);
      mWifiConnectionCallback.errorConnect();
      return;
    }
    wifiLog(""String_Node_Str"" + state);
switch (state) {
case COMPLETED:
case FOUR_WAY_HANDSHAKE:
      if (isAlreadyConnected(mWifiManager,of(mScanResult).next(scanResult -> scanResult.BSSID).get())) {
        handler.removeCallbacks(handlerCallback);
        mWifiConnectionCallback.successfulConnect();
      }
    break;
case DISCONNECTED:
  if (supl_error == WifiManager.ERROR_AUTHENTICATING) {
    wifiLog(""String_Node_Str"");
    handler.removeCallbacks(handlerCallback);
    mWifiConnectionCallback.errorConnect();
  }
 else {
    wifiLog(""String_Node_Str"");
    reEnableNetworkIfPossible(mWifiManager,mScanResult);
  }
}
}
}",0.8729792147806005
170991,"@Override public void onComplete(@NonNull Task<Location> task){
  if (task.isSuccessful() && task.getResult() != null) {
    Location location=task.getResult();
    HashMap loc=new HashMap();
    loc.put(""String_Node_Str"",location.getLatitude());
    loc.put(""String_Node_Str"",location.getLongitude());
    loc.put(""String_Node_Str"",location.getAccuracy());
    loc.put(""String_Node_Str"",location.getAltitude());
    if (result != null) {
      result.success(loc);
      return;
    }
    events.success(loc);
  }
 else {
    Log.w(METHOD_CHANNEL_NAME,""String_Node_Str"");
    HashMap hash=new HashMap();
    if (result != null) {
      result.error(""String_Node_Str"",""String_Node_Str"",null);
      return;
    }
    events.error(""String_Node_Str"",""String_Node_Str"",null);
  }
}","@Override public void onComplete(@NonNull Task<Location> task){
  if (task.isSuccessful() && task.getResult() != null) {
    Location location=task.getResult();
    HashMap loc=new HashMap();
    loc.put(""String_Node_Str"",location.getLatitude());
    loc.put(""String_Node_Str"",location.getLongitude());
    loc.put(""String_Node_Str"",location.getAccuracy());
    loc.put(""String_Node_Str"",location.getAltitude());
    if (result != null) {
      result.success(loc);
      return;
    }
    events.success(loc);
  }
 else {
    Log.w(METHOD_CHANNEL_NAME,""String_Node_Str"");
    HashMap hash=new HashMap();
    if (result != null) {
      result.error(""String_Node_Str"",""String_Node_Str"",null);
      return;
    }
  }
}",0.9598930481283422
170992,"private void getLastLocation(final Result result){
  Log.i(METHOD_CHANNEL_NAME,""String_Node_Str"");
  mFusedLocationClient.getLastLocation().addOnCompleteListener(new OnCompleteListener<Location>(){
    @Override public void onComplete(    @NonNull Task<Location> task){
      if (task.isSuccessful() && task.getResult() != null) {
        Location location=task.getResult();
        HashMap loc=new HashMap();
        loc.put(""String_Node_Str"",location.getLatitude());
        loc.put(""String_Node_Str"",location.getLongitude());
        loc.put(""String_Node_Str"",location.getAccuracy());
        loc.put(""String_Node_Str"",location.getAltitude());
        if (result != null) {
          result.success(loc);
          return;
        }
        events.success(loc);
      }
 else {
        Log.w(METHOD_CHANNEL_NAME,""String_Node_Str"");
        HashMap hash=new HashMap();
        if (result != null) {
          result.error(""String_Node_Str"",""String_Node_Str"",null);
          return;
        }
        events.error(""String_Node_Str"",""String_Node_Str"",null);
      }
    }
  }
);
}","private void getLastLocation(final Result result){
  Log.i(METHOD_CHANNEL_NAME,""String_Node_Str"");
  mFusedLocationClient.getLastLocation().addOnCompleteListener(new OnCompleteListener<Location>(){
    @Override public void onComplete(    @NonNull Task<Location> task){
      if (task.isSuccessful() && task.getResult() != null) {
        Location location=task.getResult();
        HashMap loc=new HashMap();
        loc.put(""String_Node_Str"",location.getLatitude());
        loc.put(""String_Node_Str"",location.getLongitude());
        loc.put(""String_Node_Str"",location.getAccuracy());
        loc.put(""String_Node_Str"",location.getAltitude());
        if (result != null) {
          result.success(loc);
          return;
        }
        events.success(loc);
      }
 else {
        Log.w(METHOD_CHANNEL_NAME,""String_Node_Str"");
        HashMap hash=new HashMap();
        if (result != null) {
          result.error(""String_Node_Str"",""String_Node_Str"",null);
          return;
        }
      }
    }
  }
);
}",0.969494756911344
170993,"@Override public void onAnimationEnd(final Animation animation){
  if (listener != null) {
    listener.onDismiss();
  }
  destroy();
}","@Override public void onAnimationEnd(Animator animation){
  destroy();
}",0.6859903381642513
170994,"@Override public void onAnimationRepeat(final Animation animation){
}","@Override public void onAnimationRepeat(Animator animation){
}",0.931297709923664
170995,"@Override public boolean onTouch(View view,MotionEvent motionEvent){
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_DOWN:
    initialDragX=motionEvent.getRawX();
  return true;
case MotionEvent.ACTION_UP:
if (!swipedOut) {
  view.animate().x(0).alpha(1).setDuration(200).start();
}
return true;
case MotionEvent.ACTION_MOVE:
float offset=motionEvent.getRawX() - initialDragX;
float alpha=1 - Math.abs(offset / viewWidth);
long duration=0;
if (Math.abs(offset) > dismissOffsetThreshold) {
offset=viewWidth * Math.signum(offset);
alpha=0;
duration=100;
swipedOut=true;
destroy();
}
view.animate().x(offset).alpha(alpha).setDuration(duration).start();
return true;
default :
return false;
}
}","@Override public boolean onTouch(View view,MotionEvent motionEvent){
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_DOWN:
    initialDragX=motionEvent.getRawX();
  return true;
case MotionEvent.ACTION_UP:
if (!swipedOut) {
  view.animate().x(0).alpha(1).setDuration(200).start();
}
return true;
case MotionEvent.ACTION_MOVE:
if (swipedOut) {
return true;
}
float offset=motionEvent.getRawX() - initialDragX;
float alpha=1 - Math.abs(offset / viewWidth);
long duration=0;
if (Math.abs(offset) > dismissOffsetThreshold) {
offset=viewWidth * Math.signum(offset);
alpha=0;
duration=200;
swipedOut=true;
}
view.animate().setListener(swipedOut ? getDestroyListener() : null).x(offset).alpha(alpha).setDuration(duration).start();
return true;
default :
return false;
}
}",0.7981029810298103
170996,"@Override public void onAnimationStart(final Animation animation){
}","@Override public void onAnimationStart(Animator animation){
}",0.9302325581395348
170997,"@GraphTransaction public AtlasGlossaryTerm updateTerm(AtlasGlossaryTerm atlasGlossaryTerm) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",atlasGlossaryTerm);
  }
  if (Objects.isNull(atlasGlossaryTerm)) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (StringUtils.isEmpty(atlasGlossaryTerm.getDisplayName())) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (isNameInvalid(atlasGlossaryTerm.getDisplayName())) {
    throw new AtlasBaseException(AtlasErrorCode.INVALID_DISPLAY_NAME);
  }
  AtlasGlossaryTerm storeObject=dataAccess.load(atlasGlossaryTerm);
  if (!storeObject.equals(atlasGlossaryTerm)) {
    try {
      atlasGlossaryTerm.setGuid(storeObject.getGuid());
      atlasGlossaryTerm.setQualifiedName(storeObject.getQualifiedName());
      storeObject=dataAccess.save(atlasGlossaryTerm);
    }
 catch (    AtlasBaseException e) {
      LOG.debug(""String_Node_Str"",e.getMessage());
    }
 finally {
      glossaryTermUtils.processTermRelations(storeObject,atlasGlossaryTerm,GlossaryUtils.RelationshipOperation.UPDATE);
    }
  }
  storeObject=dataAccess.load(atlasGlossaryTerm);
  setInfoForRelations(storeObject);
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",storeObject);
  }
  return storeObject;
}","@GraphTransaction public AtlasGlossaryTerm updateTerm(AtlasGlossaryTerm atlasGlossaryTerm) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",atlasGlossaryTerm);
  }
  if (Objects.isNull(atlasGlossaryTerm)) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (StringUtils.isEmpty(atlasGlossaryTerm.getDisplayName())) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (isNameInvalid(atlasGlossaryTerm.getDisplayName())) {
    throw new AtlasBaseException(AtlasErrorCode.INVALID_DISPLAY_NAME);
  }
  AtlasGlossaryTerm storeObject=dataAccess.load(atlasGlossaryTerm);
  if (!storeObject.equals(atlasGlossaryTerm)) {
    try {
      atlasGlossaryTerm.setGuid(storeObject.getGuid());
      atlasGlossaryTerm.setQualifiedName(storeObject.getQualifiedName());
      storeObject=dataAccess.save(atlasGlossaryTerm);
    }
 catch (    AtlasBaseException e) {
      LOG.debug(""String_Node_Str"",e.getMessage());
    }
 finally {
      glossaryTermUtils.processTermRelations(storeObject,atlasGlossaryTerm,GlossaryUtils.RelationshipOperation.UPDATE);
      if (StringUtils.equals(storeObject.getQualifiedName(),atlasGlossaryTerm.getQualifiedName())) {
        storeObject=dataAccess.load(atlasGlossaryTerm);
      }
 else {
        atlasGlossaryTerm.setQualifiedName(storeObject.getQualifiedName());
        storeObject=dataAccess.save(atlasGlossaryTerm);
      }
    }
  }
  setInfoForRelations(storeObject);
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",storeObject);
  }
  return storeObject;
}",0.8786952089704383
170998,"@GraphTransaction public AtlasGlossaryTerm createTerm(AtlasGlossaryTerm glossaryTerm) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",glossaryTerm);
  }
  if (Objects.isNull(glossaryTerm)) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (Objects.isNull(glossaryTerm.getAnchor())) {
    throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ANCHOR);
  }
  if (StringUtils.isEmpty(glossaryTerm.getQualifiedName())) {
    if (StringUtils.isEmpty(glossaryTerm.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_TERM_QUALIFIED_NAME_CANT_BE_DERIVED);
    }
    if (isNameInvalid(glossaryTerm.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.INVALID_DISPLAY_NAME);
    }
 else {
      glossaryTerm.setQualifiedName(glossaryTerm.getDisplayName());
    }
  }
  if (termExists(glossaryTerm)) {
    throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_TERM_ALREADY_EXISTS,glossaryTerm.getQualifiedName());
  }
  AtlasGlossaryTerm storeObject=dataAccess.save(glossaryTerm);
  glossaryTermUtils.processTermRelations(storeObject,glossaryTerm,GlossaryUtils.RelationshipOperation.CREATE);
  storeObject=dataAccess.load(glossaryTerm);
  setInfoForRelations(storeObject);
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",storeObject);
  }
  return storeObject;
}","@GraphTransaction public AtlasGlossaryTerm createTerm(AtlasGlossaryTerm glossaryTerm) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",glossaryTerm);
  }
  if (Objects.isNull(glossaryTerm)) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (Objects.isNull(glossaryTerm.getAnchor())) {
    throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ANCHOR);
  }
  if (StringUtils.isEmpty(glossaryTerm.getQualifiedName())) {
    if (StringUtils.isEmpty(glossaryTerm.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_TERM_QUALIFIED_NAME_CANT_BE_DERIVED);
    }
    if (isNameInvalid(glossaryTerm.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.INVALID_DISPLAY_NAME);
    }
 else {
      glossaryTerm.setQualifiedName(glossaryTerm.getDisplayName());
    }
  }
  if (termExists(glossaryTerm)) {
    throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_TERM_ALREADY_EXISTS,glossaryTerm.getQualifiedName());
  }
  AtlasGlossaryTerm storeObject=dataAccess.save(glossaryTerm);
  glossaryTermUtils.processTermRelations(storeObject,glossaryTerm,GlossaryUtils.RelationshipOperation.CREATE);
  if (StringUtils.equals(storeObject.getQualifiedName(),glossaryTerm.getQualifiedName())) {
    storeObject=dataAccess.load(glossaryTerm);
  }
 else {
    glossaryTerm.setQualifiedName(storeObject.getQualifiedName());
    storeObject=dataAccess.save(glossaryTerm);
  }
  setInfoForRelations(storeObject);
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",storeObject);
  }
  return storeObject;
}",0.9252835223482322
170999,"@GraphTransaction public AtlasGlossaryCategory createCategory(AtlasGlossaryCategory glossaryCategory) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",glossaryCategory);
  }
  if (Objects.isNull(glossaryCategory)) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (Objects.isNull(glossaryCategory.getAnchor())) {
    throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ANCHOR);
  }
  if (StringUtils.isEmpty(glossaryCategory.getQualifiedName())) {
    if (StringUtils.isEmpty(glossaryCategory.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_CATEGORY_QUALIFIED_NAME_CANT_BE_DERIVED);
    }
    if (isNameInvalid(glossaryCategory.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.INVALID_DISPLAY_NAME);
    }
 else {
      glossaryCategory.setQualifiedName(glossaryCategory.getDisplayName());
    }
  }
  if (categoryExists(glossaryCategory)) {
    throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_CATEGORY_ALREADY_EXISTS,glossaryCategory.getQualifiedName());
  }
  AtlasGlossaryCategory storeObject=dataAccess.save(glossaryCategory);
  Map<String,AtlasGlossaryCategory> impactedCategories=glossaryCategoryUtils.processCategoryRelations(storeObject,glossaryCategory,GlossaryUtils.RelationshipOperation.CREATE);
  dataAccess.save(impactedCategories.values());
  if (!StringUtils.equals(glossaryCategory.getQualifiedName(),storeObject.getQualifiedName())) {
    glossaryCategory.setQualifiedName(storeObject.getQualifiedName());
    storeObject=dataAccess.save(glossaryCategory);
  }
 else {
    storeObject=dataAccess.load(glossaryCategory);
  }
  setInfoForRelations(storeObject);
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",storeObject);
  }
  return storeObject;
}","@GraphTransaction public AtlasGlossaryCategory createCategory(AtlasGlossaryCategory glossaryCategory) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",glossaryCategory);
  }
  if (Objects.isNull(glossaryCategory)) {
    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST,""String_Node_Str"");
  }
  if (Objects.isNull(glossaryCategory.getAnchor())) {
    throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ANCHOR);
  }
  if (StringUtils.isEmpty(glossaryCategory.getQualifiedName())) {
    if (StringUtils.isEmpty(glossaryCategory.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_CATEGORY_QUALIFIED_NAME_CANT_BE_DERIVED);
    }
    if (isNameInvalid(glossaryCategory.getDisplayName())) {
      throw new AtlasBaseException(AtlasErrorCode.INVALID_DISPLAY_NAME);
    }
 else {
      glossaryCategory.setQualifiedName(glossaryCategory.getDisplayName());
    }
  }
  if (categoryExists(glossaryCategory)) {
    throw new AtlasBaseException(AtlasErrorCode.GLOSSARY_CATEGORY_ALREADY_EXISTS,glossaryCategory.getQualifiedName());
  }
  AtlasGlossaryCategory storeObject=dataAccess.save(glossaryCategory);
  Map<String,AtlasGlossaryCategory> impactedCategories=glossaryCategoryUtils.processCategoryRelations(storeObject,glossaryCategory,GlossaryUtils.RelationshipOperation.CREATE);
  dataAccess.save(impactedCategories.values());
  if (StringUtils.equals(glossaryCategory.getQualifiedName(),storeObject.getQualifiedName())) {
    storeObject=dataAccess.load(glossaryCategory);
  }
 else {
    glossaryCategory.setQualifiedName(storeObject.getQualifiedName());
    storeObject=dataAccess.save(glossaryCategory);
  }
  setInfoForRelations(storeObject);
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",storeObject);
  }
  return storeObject;
}",0.9650426644646298
171000,"public void processTermDissociation(AtlasGlossaryTerm glossaryTerm,Collection<AtlasRelatedObjectId> relatedObjectIds) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",glossaryTerm.getGuid(),relatedObjectIds,glossaryTerm);
  }
  Objects.requireNonNull(glossaryTerm);
  Set<AtlasRelatedObjectId> assignedEntities=glossaryTerm.getAssignedEntities();
  Map<String,AtlasRelatedObjectId> assignedEntityMap=new HashMap<>();
  if (CollectionUtils.isNotEmpty(assignedEntities)) {
    for (    AtlasRelatedObjectId relatedObjectId : assignedEntities) {
      assignedEntityMap.put(relatedObjectId.getGuid(),relatedObjectId);
    }
  }
  if (CollectionUtils.isNotEmpty(relatedObjectIds)) {
    for (    AtlasRelatedObjectId relatedObjectId : relatedObjectIds) {
      if (DEBUG_ENABLED) {
        LOG.debug(""String_Node_Str"",glossaryTerm.getGuid(),relatedObjectId.getGuid());
      }
      if (Objects.isNull(relatedObjectId.getRelationshipGuid())) {
        throw new AtlasBaseException(AtlasErrorCode.TERM_DISSOCIATION_MISSING_RELATION_GUID);
      }
      AtlasRelatedObjectId existingTermRelation=assignedEntityMap.get(relatedObjectId.getGuid());
      if (CollectionUtils.isNotEmpty(assignedEntities) && isRelationshipGuidSame(existingTermRelation,relatedObjectId)) {
        relationshipStore.deleteById(relatedObjectId.getRelationshipGuid());
      }
 else {
        throw new AtlasBaseException(AtlasErrorCode.INVALID_TERM_DISSOCIATION,glossaryTerm.getGuid(),relatedObjectId.getGuid());
      }
    }
  }
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"");
  }
}","public void processTermDissociation(AtlasGlossaryTerm glossaryTerm,Collection<AtlasRelatedObjectId> relatedObjectIds) throws AtlasBaseException {
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"",glossaryTerm.getGuid(),relatedObjectIds,glossaryTerm);
  }
  Objects.requireNonNull(glossaryTerm);
  Set<AtlasRelatedObjectId> assignedEntities=glossaryTerm.getAssignedEntities();
  Map<String,AtlasRelatedObjectId> assignedEntityMap=new HashMap<>();
  if (CollectionUtils.isNotEmpty(assignedEntities)) {
    for (    AtlasRelatedObjectId relatedObjectId : assignedEntities) {
      assignedEntityMap.put(relatedObjectId.getGuid(),relatedObjectId);
    }
  }
  if (CollectionUtils.isNotEmpty(relatedObjectIds)) {
    for (    AtlasRelatedObjectId relatedObjectId : relatedObjectIds) {
      if (DEBUG_ENABLED) {
        LOG.debug(""String_Node_Str"",glossaryTerm.getGuid(),relatedObjectId.getGuid());
      }
      if (Objects.isNull(relatedObjectId.getRelationshipGuid())) {
        throw new AtlasBaseException(AtlasErrorCode.TERM_DISSOCIATION_MISSING_RELATION_GUID);
      }
      AtlasRelatedObjectId existingTermRelation=assignedEntityMap.get(relatedObjectId.getGuid());
      if (CollectionUtils.isNotEmpty(assignedEntities) && isRelationshipGuidSame(existingTermRelation,relatedObjectId)) {
        relationshipStore.deleteById(relatedObjectId.getRelationshipGuid());
      }
 else {
        throw new AtlasBaseException(AtlasErrorCode.INVALID_TERM_DISSOCIATION,relatedObjectId.getRelationshipGuid(),glossaryTerm.getGuid(),relatedObjectId.getGuid());
      }
    }
  }
  if (DEBUG_ENABLED) {
    LOG.debug(""String_Node_Str"");
  }
}",0.9882498453927026
